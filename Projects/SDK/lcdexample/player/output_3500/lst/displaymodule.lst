TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd0e9b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;displaymodule.c:
                               96 ; 1    |#include "types.h"
                               97 
                               99 
                              100 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              101 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              102 ; 3    |//
                              103 ; 4    |// Filename: types.h
                              104 ; 5    |// Description: Standard data types
                              105 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              106 ; 7    |
                              107 ; 8    |#ifndef _TYPES_H
                              108 ; 9    |#define _TYPES_H
                              109 ; 10   |
                              110 ; 11   |// TODO:  move this outta here!
                              111 ; 12   |#if !defined(NOERROR)
                              112 ; 13   |#define NOERROR 0
                              113 ; 14   |#define SUCCESS 0
                              114 ; 15   |#endif 
                              115 ; 16   |#if !defined(SUCCESS)
                              116 ; 17   |#define SUCCESS  0
                              117 ; 18   |#endif
                              118 ; 19   |#if !defined(ERROR)
                              119 ; 20   |#define ERROR   -1
                              120 ; 21   |#endif
                              121 ; 22   |#if !defined(FALSE)
                              122 ; 23   |#define FALSE 0
                              123 ; 24   |#endif
                              124 ; 25   |#if !defined(TRUE)
                              125 ; 26   |#define TRUE  1
                              126 ; 27   |#endif
                              127 ; 28   |
                              128 ; 29   |#if !defined(NULL)
                              129 ; 30   |#define NULL 0
                              130 ; 31   |#endif
                              131 ; 32   |
                              132 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              134 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              135 ; 36   |#define MAX_ULONG   (-1) 
                              136 ; 37   |
                              137 ; 38   |#define WORD_SIZE   24              // word size in bits
                              138 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              139 ; 40   |
                              140 ; 41   |
                              141 ; 42   |#define BYTE    unsigned char       // btVarName
                              142 ; 43   |#define CHAR    signed char         // cVarName
                              143 ; 44   |#define USHORT  unsigned short      // usVarName
                              144 ; 45   |#define SHORT   unsigned short      // sVarName
                              145 ; 46   |#define WORD    unsigned int        // wVarName
                              146 ; 47   |#define INT     signed int          // iVarName
                              147 ; 48   |#define DWORD   unsigned long       // dwVarName
                              148 ; 49   |#define LONG    signed long         // lVarName
                              149 ; 50   |#define BOOL    unsigned int        // bVarName
                              150 ; 51   |#define FRACT   _fract              // frVarName
                              151 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              152 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              153 ; 54   |#define FLOAT   float               // fVarName
                              154 ; 55   |#define DBL     double              // dVarName
                              155 ; 56   |#define ENUM    enum                // eVarName
                              156 ; 57   |#define CMX     _complex            // cmxVarName
                              157 ; 58   |typedef WORD UCS3;                   // 
                              158 ; 59   |
                              159 ; 60   |#define UINT16  unsigned short
                              160 ; 61   |#define UINT8   unsigned char   
                              161 ; 62   |#define UINT32  unsigned long
                              162 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              163 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              164 ; 65   |#define WCHAR   UINT16
                              165 ; 66   |
                              166 ; 67   |//UINT128 is 16 bytes or 6 words
                              167 ; 68   |typedef struct UINT128_3500 {   
                              168 ; 69   |    int val[6];     
                              169 ; 70   |} UINT128_3500;
                              170 ; 71   |
                              171 ; 72   |#define UINT128   UINT128_3500
                              172 ; 73   |
                              173 ; 74   |// Little endian word packed byte strings:   
                              174 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              175 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              176 ; 77   |// Little endian word packed byte strings:   
                              177 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              178 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              179 ; 80   |
                              180 ; 81   |// Declare Memory Spaces To Use When Coding
                              181 ; 82   |// A. Sector Buffers
                              182 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              183 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              184 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              185 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              186 
                              188 
                              189 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              190 ; 88   |// B. Media DDI Memory
                              191 ; 89   |#define MEDIA_DDI_MEM _Y
                              192 ; 90   |
                              193 ; 91   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 92   |
                              195 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              196 ; 94   |// Examples of circular pointers:
                              197 ; 95   |//    INT CIRC cpiVarName
                              198 ; 96   |//    DWORD CIRC cpdwVarName
                              199 ; 97   |
                              200 ; 98   |#define RETCODE INT                 // rcVarName
                              201 ; 99   |
                              202 ; 100  |// generic bitfield structure
                              203 ; 101  |struct Bitfield {
                              204 ; 102  |    unsigned int B0  :1;
                              205 ; 103  |    unsigned int B1  :1;
                              206 ; 104  |    unsigned int B2  :1;
                              207 ; 105  |    unsigned int B3  :1;
                              208 ; 106  |    unsigned int B4  :1;
                              209 ; 107  |    unsigned int B5  :1;
                              210 ; 108  |    unsigned int B6  :1;
                              211 ; 109  |    unsigned int B7  :1;
                              212 ; 110  |    unsigned int B8  :1;
                              213 ; 111  |    unsigned int B9  :1;
                              214 ; 112  |    unsigned int B10 :1;
                              215 ; 113  |    unsigned int B11 :1;
                              216 ; 114  |    unsigned int B12 :1;
                              217 ; 115  |    unsigned int B13 :1;
                              218 ; 116  |    unsigned int B14 :1;
                              219 ; 117  |    unsigned int B15 :1;
                              220 ; 118  |    unsigned int B16 :1;
                              221 ; 119  |    unsigned int B17 :1;
                              222 ; 120  |    unsigned int B18 :1;
                              223 ; 121  |    unsigned int B19 :1;
                              224 ; 122  |    unsigned int B20 :1;
                              225 ; 123  |    unsigned int B21 :1;
                              226 ; 124  |    unsigned int B22 :1;
                              227 ; 125  |    unsigned int B23 :1;
                              228 ; 126  |};
                              229 ; 127  |
                              230 ; 128  |union BitInt {
                              231 ; 129  |        struct Bitfield B;
                              232 ; 130  |        int        I;
                              233 ; 131  |};
                              234 ; 132  |
                              235 ; 133  |#define MAX_MSG_LENGTH 10
                              236 ; 134  |struct CMessage
                              237 ; 135  |{
                              238 ; 136  |        unsigned int m_uLength;
                              239 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              240 ; 138  |};
                              241 ; 139  |
                              242 ; 140  |typedef struct {
                              243 ; 141  |    WORD m_wLength;
                              244 ; 142  |    WORD m_wMessage;
                              245 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              246 ; 144  |} Message;
                              247 ; 145  |
                              248 ; 146  |struct MessageQueueDescriptor
                              249 ; 147  |{
                              250 ; 148  |        int *m_pBase;
                              251 ; 149  |        int m_iModulo;
                              252 ; 150  |        int m_iSize;
                              253 ; 151  |        int *m_pHead;
                              254 ; 152  |        int *m_pTail;
                              255 ; 153  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 154  |
                              257 ; 155  |struct ModuleEntry
                              258 ; 156  |{
                              259 ; 157  |    int m_iSignaledEventMask;
                              260 ; 158  |    int m_iWaitEventMask;
                              261 ; 159  |    int m_iResourceOfCode;
                              262 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              263 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              264 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              265 ; 163  |    int m_uTimeOutHigh;
                              266 ; 164  |    int m_uTimeOutLow;
                              267 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              268 ; 166  |};
                              269 ; 167  |
                              270 ; 168  |union WaitMask{
                              271 ; 169  |    struct B{
                              272 ; 170  |        unsigned int m_bNone     :1;
                              273 ; 171  |        unsigned int m_bMessage  :1;
                              274 ; 172  |        unsigned int m_bTimer    :1;
                              275 ; 173  |        unsigned int m_bButton   :1;
                              276 ; 174  |    } B;
                              277 ; 175  |    int I;
                              278 ; 176  |} ;
                              279 ; 177  |
                              280 ; 178  |
                              281 ; 179  |struct Button {
                              282 ; 180  |        WORD wButtonEvent;
                              283 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              284 ; 182  |};
                              285 ; 183  |
                              286 ; 184  |struct Message {
                              287 ; 185  |        WORD wMsgLength;
                              288 ; 186  |        WORD wMsgCommand;
                              289 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              290 ; 188  |};
                              291 ; 189  |
                              292 ; 190  |union EventTypes {
                              293 ; 191  |        struct CMessage msg;
                              294 ; 192  |        struct Button Button ;
                              295 ; 193  |        struct Message Message;
                              296 ; 194  |};
                              297 ; 195  |
                              298 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              299 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              300 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              301 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              302 ; 200  |
                              303 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              304 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              305 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              306 ; 204  |
                              307 ; 205  |#if DEBUG
                              308 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              309 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              310 ; 208  |#else 
                              311 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              312 ; 210  |#define DebugBuildAssert(x)    
                              313 ; 211  |#endif
                              314 ; 212  |
                              315 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 214  |//  #pragma asm
                              317 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              318 ; 216  |//  #pragma endasm
                              319 ; 217  |
                              320 ; 218  |
                              321 ; 219  |#ifdef COLOR_262K
                              322 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              323 ; 221  |#elif defined(COLOR_65K)
                              324 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              325 ; 223  |#else
                              326 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              327 ; 225  |#endif
                              328 ; 226  |    
                              329 ; 227  |#endif // #ifndef _TYPES_H
                              330 
                              332 
                              333 ; 2    |
                              334 ; 3    |#include "messages.h"
                              335 
                              337 
                              338 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              339 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              340 ; 3    |// Message defs
                              341 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              342 ; 5    |
                              343 ; 6    |#if (!defined(MSGEQU_INC))
                              344 ; 7    |#define MSGEQU_INC 1
                              345 ; 8    |
                              346 ; 9    |
                              347 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              348 ; 11   |
                              349 ; 12   |
                              350 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              351 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              352 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              353 ; 16   |#define MSG_TYPE_LCD 0x030000
                              354 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              355 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              356 ; 19   |#define MSG_TYPE_MENU 0x060000
                              357 ; 20   |#define MSG_TYPE_LED 0x070000
                              358 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              359 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              360 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              361 ; 24   |// Equalizer and other effects
                              362 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              363 ; 26   |#if (defined(USE_PLAYLIST3))
                              364 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              365 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              366 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              367 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              368 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              369 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                              370 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              371 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              372 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              373 ; 36   |#if defined(USE_PLAYLIST5)
                              374 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              375 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              376 ; 39   |#endif // if @def('USE_PLAYLIST5')
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              377 ; 40   |
                              378 ; 41   |// Message Structure Offsets
                              379 ; 42   |#define MSG_Length 0
                              380 ; 43   |#define MSG_ID 1
                              381 ; 44   |#define MSG_Argument1 2
                              382 ; 45   |#define MSG_Argument2 3
                              383 ; 46   |#define MSG_Argument3 4
                              384 ; 47   |#define MSG_Argument4 5
                              385 ; 48   |#define MSG_Argument5 6
                              386 ; 49   |#define MSG_Argument6 7
                              387 ; 50   |
                              388 ; 51   |
                              389 ; 52   |
                              390 ; 53   |// LCD Message IDs
                              391 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              392 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              393 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              394 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              395 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              396 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              397 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              398 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                              399 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              400 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              401 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              402 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              403 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              404 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              405 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              406 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              407 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              408 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              409 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              410 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              411 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              412 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              413 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              414 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              415 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              416 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              417 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              418 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              419 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              420 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              421 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              422 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              423 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              424 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              425 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              426 ; 89   |//Param1 = left
                              427 ; 90   |//Param2 = top
                              428 ; 91   |//Param3 = right
                              429 ; 92   |//Param4 = bottom
                              430 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              431 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                              432 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              433 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              434 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              435 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              436 ; 99   |
                              437 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              438 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              439 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                              440 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              441 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              442 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              443 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              444 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              445 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              446 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              447 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              448 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              449 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              450 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              451 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              452 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              453 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              454 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              455 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              456 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              457 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              458 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              459 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              460 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                              461 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              462 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              463 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              464 ; 127  |
                              465 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              466 ; 129  |
                              467 ; 130  |#if defined(CLCD_16BIT)
                              468 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              469 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              470 ; 133  |
                              471 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              472 ; 135  |#else 
                              473 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              474 ; 137  |#endif
                              475 ; 138  |
                              476 ; 139  |// If you change the LCD message ID's then you must
                              477 ; 140  |// also change the jump table in lcdapi.asm
                              478 ; 141  |
                              479 ; 142  |// Character LCD Message IDs
                              480 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              481 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              482 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              483 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              484 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              485 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              486 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              487 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              488 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              489 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              490 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              491 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              492 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              493 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              494 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              495 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              496 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              497 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              498 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              499 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              500 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              501 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              502 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              503 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              504 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                              505 ; 168  |// also change the jump table in lcdapi.asm
                              506 ; 169  |
                              507 ; 170  |// Decoder Message IDs
                              508 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              509 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              510 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              511 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              512 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              513 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              514 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              515 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              516 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              517 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              518 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              519 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              520 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              521 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                              522 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                              523 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                              524 ; 187  |// If you change the Decoder message ID's, then you must
                              525 ; 188  |// also change the jump table in decoder_overlay.asm
                              526 ; 189  |// and in dec_adpcm_overlay.asm.
                              527 ; 190  |
                              528 ; 191  |// Encoder Message IDs
                              529 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              530 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              531 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              532 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              533 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              534 ; 197  |// If you change the Encoder message ID's, then you must
                              535 ; 198  |// also change the jump table in all encoder overlay modules.
                              536 ; 199  |
                              537 ; 200  |// Parser Message IDs
                              538 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              539 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              540 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              541 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              542 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              543 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              544 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              545 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              546 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              547 ; 210  |// If you change the Parser message ID's, then you must
                              548 ; 211  |// also change the jump table in parser.asm
                              549 ; 212  |
                              550 ; 213  |// Button Message IDs
                              551 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              552 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              553 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              554 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              555 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                              556 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              557 ; 220  |
                              558 ; 221  |// Mixer Message IDs
                              559 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              560 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              561 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              562 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                              564 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              565 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              566 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              567 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              568 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              569 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              570 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              571 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              572 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              573 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              574 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              575 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              576 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              577 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              578 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              579 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              580 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              581 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              582 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              583 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              584 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                              585 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              586 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              587 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              588 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              589 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              590 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                              591 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              592 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              593 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              594 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              595 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              596 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              597 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              598 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              599 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                              600 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                              601 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                              602 ; 265  |// If you change the mixer message ID's then you must
                              603 ; 266  |// also change the jump table in mixer.asm
                              604 ; 267  |#define MIXER_ON 0
                              605 ; 268  |#define MIXER_OFF 1
                              606 ; 269  |
                              607 ; 270  |
                              608 ; 271  |// System Message IDs
                              609 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              610 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              611 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              612 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              613 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              614 ; 277  |// If you change the system message ID's then you must
                              615 ; 278  |// also change the jump table in systemapi.asm
                              616 ; 279  |
                              617 ; 280  |// Menu IDs
                              618 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              619 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              620 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              621 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              622 ; 285  |//sub parameters for this message:
                              623 ; 286  |#define RECORDER_START 0
                              624 ; 287  |#define RECORDER_PAUSE 0x2000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              625 ; 288  |#define RECORDER_RESUME 0x4000
                              626 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                              627 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              628 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              629 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                              630 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              631 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              632 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              633 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              634 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              635 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              636 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                              637 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                              638 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                              639 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                              640 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                              641 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                              642 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                              643 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                              644 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                              645 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                              646 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                              647 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                              648 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                              649 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                              650 ; 313  |
                              651 ; 314  |// Note that other versions of this file have different msg equates.
                              652 ; 315  |// If you change the system message ID's then you must
                              653 ; 316  |// also change the jump table in all menu *.asm
                              654 ; 317  |
                              655 ; 318  |// LED Message IDs
                              656 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              657 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                              658 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                              659 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                              660 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                              661 ; 324  |// If you change the LeD message ID's then you must
                              662 ; 325  |// also change the jump table in ledapi.asm
                              663 ; 326  |
                              664 ; 327  |#if (!defined(REMOVE_FM))
                              665 ; 328  |// FM Tuner Message IDs
                              666 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              667 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              668 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              669 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              670 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              671 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              672 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              673 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              674 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              675 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              676 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              677 ; 340  |//one parameter--the sensitivity in uV
                              678 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              679 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                              680 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              681 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              682 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              683 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              684 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              685 ; 348  |#endif
                              686 ; 349  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              687 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                              688 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              689 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              690 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              691 ; 354  |
                              692 ; 355  |
                              693 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              694 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              695 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              696 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              697 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              698 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              699 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              700 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              701 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              702 ; 365  |
                              703 ; 366  |#if (defined(USE_PLAYLIST3))
                              704 ; 367  |// Music Library
                              705 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                              706 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                              707 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                              708 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                              709 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                              710 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                              711 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                              712 ; 375  |
                              713 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                              714 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                              715 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                              716 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                              717 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                              718 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                              719 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                              720 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                              721 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                              722 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                              723 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                              724 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                              725 ; 388  |
                              726 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              727 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              728 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              729 ; 392  |
                              730 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              731 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              732 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              733 ; 396  |
                              734 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                              735 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                              736 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                              737 ; 400  |
                              738 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                              739 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                              740 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                              741 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                              742 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                              743 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                              744 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                              745 ; 408  |
                              746 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              747 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              748 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              749 ; 412  |
                              750 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                              751 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                              752 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                              753 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                              754 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                              755 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                              756 ; 419  |
                              757 ; 420  |#if defined(USE_PLAYLIST5)
                              758 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                              759 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                              760 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                              761 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                              762 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                              763 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                              764 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                              765 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                              766 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                              767 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                              768 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                              769 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                              770 ; 433  |
                              771 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                              772 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                              773 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                              774 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                              775 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                              776 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                              777 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                              778 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                              779 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                              780 ; 443  |#endif // if @def('USE_PLAYLIST5')
                              781 ; 444  |// Events
                              782 ; 445  |// No event
                              783 ; 446  |#define EVENT_NONE 0x000001   
                              784 ; 447  |// A message has been posted
                              785 ; 448  |#define EVENT_MESSAGE 0x000002   
                              786 ; 449  |// Run if wait time elapsed
                              787 ; 450  |#define EVENT_TIMER 0x000004   
                              788 ; 451  |// Run if a button event occured
                              789 ; 452  |#define EVENT_BUTTON 0x000008   
                              790 ; 453  |// Run if a background event occured
                              791 ; 454  |#define EVENT_BACKGROUND 0x000010   
                              792 ; 455  |// The executive should immediately repeat this module
                              793 ; 456  |#define EVENT_REPEAT 0x000020   
                              794 ; 457  |// Run the module's init routine
                              795 ; 458  |#define EVENT_INIT 0x800000   
                              796 ; 459  |
                              797 ; 460  |#define EVENT_NONE_BITPOS 0
                              798 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                              799 ; 462  |#define EVENT_TIMER_BITPOS 2
                              800 ; 463  |#define EVENT_BUTTON_BITPOS 3
                              801 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                              802 ; 465  |#define EVENT_REPEAT_BITPOS 5
                              803 ; 466  |#define EVENT_INIT_BITPOS 23
                              804 ; 467  |
                              805 ; 468  |// Parser Message Buffers
                              806 ; 469  |#define ParserPlayBit 0
                              807 ; 470  |#define ButtonPressBit 1
                              808 ; 471  |#define ParserRwndBit 1
                              809 ; 472  |#define ParserFfwdBit 2
                              810 ; 473  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              811 ; 474  |//NextSong Message Parameters
                              812 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                              813 ; 476  |#define NEXT_SONG 2             
                              814 ; 477  |// ButtonPressBit1 cleared
                              815 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                              816 ; 479  |// ButtonPressBit1 set
                              817 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                              818 ; 481  |// NextSong + Ffwd
                              819 ; 482  |#define NEXT_SONG_FFWD 4          
                              820 ; 483  |
                              821 ; 484  |//PrevSong Message Parameters
                              822 ; 485  |// PrevSong + Stopped
                              823 ; 486  |#define PREV_SONG 0          
                              824 ; 487  |// PrevSong + Play
                              825 ; 488  |#define PREV_SONG_PLAY 1          
                              826 ; 489  |// PrevSong + Rwnd
                              827 ; 490  |#define PREV_SONG_RWND 2          
                              828 ; 491  |
                              829 ; 492  |
                              830 ; 493  |
                              831 ; 494  |
                              832 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                              833 ; 496  |
                              834 ; 497  |
                              835 
                              837 
                              838 ; 4    |#include "project.h"
                              839 
                              841 
                              842 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              843 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              844 ; 3    |//  Filename: project.inc
                              845 ; 4    |//  Description: 
                              846 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              847 ; 6    |
                              848 ; 7    |#if (!defined(_PROJECT_INC))
                              849 ; 8    |#define _PROJECT_INC 1
                              850 ; 9    |
                              851 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              852 ; 11   |#include "hwequ.h"
                              853 
                              855 
                              856 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              857 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              858 ; 3    |//  File        : hwequ.inc
                              859 ; 4    |//  Description : STMP Hardware Constants
                              860 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              861 ; 6    |
                              862 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              863 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              864 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              865 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              866 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              867 ; 12   |
                              868 ; 13   |#if (!defined(HWEQU_INC))
                              869 ; 14   |#define HWEQU_INC 1
                              870 ; 15   |
                              871 ; 16   |#include "types.h"
                              872 
                              874 
                              875 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              876 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              877 ; 3    |//
                              878 ; 4    |// Filename: types.h
                              879 ; 5    |// Description: Standard data types
                              880 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              881 ; 7    |
                              882 ; 8    |#ifndef _TYPES_H
                              883 ; 9    |#define _TYPES_H
                              884 ; 10   |
                              885 ; 11   |// TODO:  move this outta here!
                              886 ; 12   |#if !defined(NOERROR)
                              887 ; 13   |#define NOERROR 0
                              888 ; 14   |#define SUCCESS 0
                              889 ; 15   |#endif 
                              890 ; 16   |#if !defined(SUCCESS)
                              891 ; 17   |#define SUCCESS  0
                              892 ; 18   |#endif
                              893 ; 19   |#if !defined(ERROR)
                              894 ; 20   |#define ERROR   -1
                              895 ; 21   |#endif
                              896 ; 22   |#if !defined(FALSE)
                              897 ; 23   |#define FALSE 0
                              898 ; 24   |#endif
                              899 ; 25   |#if !defined(TRUE)
                              900 ; 26   |#define TRUE  1
                              901 ; 27   |#endif
                              902 ; 28   |
                              903 ; 29   |#if !defined(NULL)
                              904 ; 30   |#define NULL 0
                              905 ; 31   |#endif
                              906 ; 32   |
                              907 ; 33   |#define MAX_INT     0x7FFFFF
                              908 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              909 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              910 ; 36   |#define MAX_ULONG   (-1) 
                              911 ; 37   |
                              912 ; 38   |#define WORD_SIZE   24              // word size in bits
                              913 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              914 ; 40   |
                              915 ; 41   |
                              916 ; 42   |#define BYTE    unsigned char       // btVarName
                              917 ; 43   |#define CHAR    signed char         // cVarName
                              918 ; 44   |#define USHORT  unsigned short      // usVarName
                              919 ; 45   |#define SHORT   unsigned short      // sVarName
                              920 ; 46   |#define WORD    unsigned int        // wVarName
                              921 ; 47   |#define INT     signed int          // iVarName
                              922 ; 48   |#define DWORD   unsigned long       // dwVarName
                              923 ; 49   |#define LONG    signed long         // lVarName
                              924 ; 50   |#define BOOL    unsigned int        // bVarName
                              925 ; 51   |#define FRACT   _fract              // frVarName
                              926 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              927 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              928 ; 54   |#define FLOAT   float               // fVarName
                              929 ; 55   |#define DBL     double              // dVarName
                              930 ; 56   |#define ENUM    enum                // eVarName
                              931 ; 57   |#define CMX     _complex            // cmxVarName
                              932 ; 58   |typedef WORD UCS3;                   // 
                              933 ; 59   |
                              934 ; 60   |#define UINT16  unsigned short
                              935 ; 61   |#define UINT8   unsigned char   
                              936 ; 62   |#define UINT32  unsigned long
                              937 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              938 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              939 ; 65   |#define WCHAR   UINT16
                              940 ; 66   |
                              941 ; 67   |//UINT128 is 16 bytes or 6 words
                              942 ; 68   |typedef struct UINT128_3500 {   
                              943 ; 69   |    int val[6];     
                              944 ; 70   |} UINT128_3500;
                              945 ; 71   |
                              946 ; 72   |#define UINT128   UINT128_3500
                              947 ; 73   |
                              948 ; 74   |// Little endian word packed byte strings:   
                              949 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              950 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              951 ; 77   |// Little endian word packed byte strings:   
                              952 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              953 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              954 ; 80   |
                              955 ; 81   |// Declare Memory Spaces To Use When Coding
                              956 ; 82   |// A. Sector Buffers
                              957 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              958 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              959 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              960 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              961 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              962 ; 88   |// B. Media DDI Memory
                              963 ; 89   |#define MEDIA_DDI_MEM _Y
                              964 ; 90   |
                              965 ; 91   |
                              966 ; 92   |
                              967 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              968 ; 94   |// Examples of circular pointers:
                              969 ; 95   |//    INT CIRC cpiVarName
                              970 ; 96   |//    DWORD CIRC cpdwVarName
                              971 ; 97   |
                              972 ; 98   |#define RETCODE INT                 // rcVarName
                              973 ; 99   |
                              974 ; 100  |// generic bitfield structure
                              975 ; 101  |struct Bitfield {
                              976 ; 102  |    unsigned int B0  :1;
                              977 ; 103  |    unsigned int B1  :1;
                              978 ; 104  |    unsigned int B2  :1;
                              979 ; 105  |    unsigned int B3  :1;
                              980 ; 106  |    unsigned int B4  :1;
                              981 ; 107  |    unsigned int B5  :1;
                              982 ; 108  |    unsigned int B6  :1;
                              983 ; 109  |    unsigned int B7  :1;
                              984 ; 110  |    unsigned int B8  :1;
                              985 ; 111  |    unsigned int B9  :1;
                              986 ; 112  |    unsigned int B10 :1;
                              987 ; 113  |    unsigned int B11 :1;
                              988 ; 114  |    unsigned int B12 :1;
                              989 ; 115  |    unsigned int B13 :1;
                              990 ; 116  |    unsigned int B14 :1;
                              991 ; 117  |    unsigned int B15 :1;
                              992 ; 118  |    unsigned int B16 :1;
                              993 ; 119  |    unsigned int B17 :1;
                              994 ; 120  |    unsigned int B18 :1;
                              995 ; 121  |    unsigned int B19 :1;
                              996 ; 122  |    unsigned int B20 :1;
                              997 ; 123  |    unsigned int B21 :1;
                              998 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              999 ; 125  |    unsigned int B23 :1;
                             1000 ; 126  |};
                             1001 ; 127  |
                             1002 ; 128  |union BitInt {
                             1003 ; 129  |        struct Bitfield B;
                             1004 ; 130  |        int        I;
                             1005 ; 131  |};
                             1006 ; 132  |
                             1007 ; 133  |#define MAX_MSG_LENGTH 10
                             1008 ; 134  |struct CMessage
                             1009 ; 135  |{
                             1010 ; 136  |        unsigned int m_uLength;
                             1011 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1012 ; 138  |};
                             1013 ; 139  |
                             1014 ; 140  |typedef struct {
                             1015 ; 141  |    WORD m_wLength;
                             1016 ; 142  |    WORD m_wMessage;
                             1017 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1018 ; 144  |} Message;
                             1019 ; 145  |
                             1020 ; 146  |struct MessageQueueDescriptor
                             1021 ; 147  |{
                             1022 ; 148  |        int *m_pBase;
                             1023 ; 149  |        int m_iModulo;
                             1024 ; 150  |        int m_iSize;
                             1025 ; 151  |        int *m_pHead;
                             1026 ; 152  |        int *m_pTail;
                             1027 ; 153  |};
                             1028 ; 154  |
                             1029 ; 155  |struct ModuleEntry
                             1030 ; 156  |{
                             1031 ; 157  |    int m_iSignaledEventMask;
                             1032 ; 158  |    int m_iWaitEventMask;
                             1033 ; 159  |    int m_iResourceOfCode;
                             1034 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1035 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1036 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1037 ; 163  |    int m_uTimeOutHigh;
                             1038 ; 164  |    int m_uTimeOutLow;
                             1039 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1040 ; 166  |};
                             1041 ; 167  |
                             1042 ; 168  |union WaitMask{
                             1043 ; 169  |    struct B{
                             1044 ; 170  |        unsigned int m_bNone     :1;
                             1045 ; 171  |        unsigned int m_bMessage  :1;
                             1046 ; 172  |        unsigned int m_bTimer    :1;
                             1047 ; 173  |        unsigned int m_bButton   :1;
                             1048 ; 174  |    } B;
                             1049 ; 175  |    int I;
                             1050 ; 176  |} ;
                             1051 ; 177  |
                             1052 ; 178  |
                             1053 ; 179  |struct Button {
                             1054 ; 180  |        WORD wButtonEvent;
                             1055 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1056 ; 182  |};
                             1057 ; 183  |
                             1058 ; 184  |struct Message {
                             1059 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1060 ; 186  |        WORD wMsgCommand;
                             1061 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1062 ; 188  |};
                             1063 ; 189  |
                             1064 ; 190  |union EventTypes {
                             1065 ; 191  |        struct CMessage msg;
                             1066 ; 192  |        struct Button Button ;
                             1067 ; 193  |        struct Message Message;
                             1068 ; 194  |};
                             1069 ; 195  |
                             1070 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1071 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1072 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1073 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1074 ; 200  |
                             1075 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1076 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1077 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1078 ; 204  |
                             1079 ; 205  |#if DEBUG
                             1080 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1081 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1082 ; 208  |#else 
                             1083 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1084 ; 210  |#define DebugBuildAssert(x)    
                             1085 ; 211  |#endif
                             1086 ; 212  |
                             1087 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1088 ; 214  |//  #pragma asm
                             1089 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1090 ; 216  |//  #pragma endasm
                             1091 ; 217  |
                             1092 ; 218  |
                             1093 ; 219  |#ifdef COLOR_262K
                             1094 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1095 ; 221  |#elif defined(COLOR_65K)
                             1096 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1097 ; 223  |#else
                             1098 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1099 ; 225  |#endif
                             1100 ; 226  |    
                             1101 ; 227  |#endif // #ifndef _TYPES_H
                             1102 
                             1104 
                             1105 ; 17   |#include "regsclkctrl.h"
                             1106 
                             1108 
                             1109 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             1110 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             1111 ; 3    |
                             1112 ; 4    |
                             1113 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1114 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             1115 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             1116 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             1117 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             1118 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             1119 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1120 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             1121 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             1122 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             1123 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             1124 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             1125 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             1126 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             1127 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             1128 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             1129 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             1130 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             1131 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             1132 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             1133 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             1134 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             1135 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             1136 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             1137 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                             1138 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             1139 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             1140 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             1141 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             1142 ; 34   |
                             1143 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             1144 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             1145 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             1146 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             1147 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             1148 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             1149 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             1150 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             1151 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             1152 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             1153 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             1154 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             1155 ; 47   |
                             1156 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             1157 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             1158 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             1159 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             1160 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             1161 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             1162 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             1163 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             1164 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             1165 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             1166 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             1167 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             1168 ; 60   |
                             1169 ; 61   |typedef union               
                             1170 ; 62   |{
                             1171 ; 63   |    struct
                             1172 ; 64   |    {
                             1173 ; 65   |        int CKRST       :1; // Clock Reset
                             1174 ; 66   |        int LTC         :1;
                             1175 ; 67   |        int PLLEN       :1;
                             1176 ; 68   |        int XTLEN       :1;
                             1177 ; 69   |        int FLB         :1;
                             1178 ; 70   |        unsigned ADIV   :3;
                             1179 ; 71   |        int CKSRC       :1;
                             1180 ; 72   |        unsigned DDIV   :3;
                             1181 ; 73   |        unsigned PDIV   :5;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1182 ; 74   |        int PWDN        :1;
                             1183 ; 75   |        int ACKEN       :1;
                             1184 ; 76   |        int LOCK        :1;
                             1185 ; 77   |        unsigned ADIV1  :3;
                             1186 ; 78   |        unsigned DDIV_MSB:1;
                             1187 ; 79   |    } B;
                             1188 ; 80   |
                             1189 ; 81   |    int I;
                             1190 ; 82   |    unsigned int U;
                             1191 ; 83   |
                             1192 ; 84   |} ccr_type;
                             1193 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             1194 ; 86   |
                             1195 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1196 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             1197 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             1198 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             1199 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             1200 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             1201 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             1202 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             1203 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             1204 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             1205 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             1206 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             1207 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             1208 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             1209 ; 101  |
                             1210 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             1211 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             1212 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             1213 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             1214 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             1215 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             1216 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             1217 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             1218 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             1219 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             1220 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             1221 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             1222 ; 114  |
                             1223 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             1224 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             1225 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             1226 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             1227 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             1228 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             1229 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             1230 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             1231 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             1232 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             1233 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             1234 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             1235 ; 127  |
                             1236 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             1237 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             1238 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             1239 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             1240 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             1241 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             1242 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             1243 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1244 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             1245 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             1246 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             1247 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             1248 ; 140  |
                             1249 ; 141  |typedef union               
                             1250 ; 142  |{
                             1251 ; 143  |    struct
                             1252 ; 144  |   {
                             1253 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             1254 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             1255 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             1256 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             1257 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             1258 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             1259 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             1260 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             1261 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             1262 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             1263 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             1264 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             1265 ; 157  |    } B;
                             1266 ; 158  |
                             1267 ; 159  |    int I;
                             1268 ; 160  |    unsigned int U;
                             1269 ; 161  |
                             1270 ; 162  |} rcr_type;
                             1271 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             1272 ; 164  |
                             1273 ; 165  |
                             1274 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             1275 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             1276 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             1277 ; 169  |
                             1278 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             1279 ; 171  |
                             1280 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             1281 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             1282 ; 174  |typedef union               
                             1283 ; 175  |{
                             1284 ; 176  |    struct
                             1285 ; 177  |   {
                             1286 ; 178  |        int LOW;
                             1287 ; 179  |    } B;
                             1288 ; 180  |
                             1289 ; 181  |    int I;
                             1290 ; 182  |    unsigned int U;
                             1291 ; 183  |
                             1292 ; 184  |} dclkcntl_type;
                             1293 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             1294 ; 186  |
                             1295 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1296 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             1297 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             1298 ; 190  |
                             1299 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             1300 ; 192  |
                             1301 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             1302 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             1303 ; 195  |typedef union               
                             1304 ; 196  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1305 ; 197  |    struct
                             1306 ; 198  |   {
                             1307 ; 199  |        int HIGH;
                             1308 ; 200  |    } B;
                             1309 ; 201  |
                             1310 ; 202  |    int I;
                             1311 ; 203  |    unsigned int U;
                             1312 ; 204  |
                             1313 ; 205  |} dclkcntu_type;
                             1314 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             1315 ; 207  |
                             1316 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             1317 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             1318 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             1319 ; 211  |
                             1320 ; 212  |// Clock count register (lower)
                             1321 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             1322 ; 214  |// Clock count register (upper)
                             1323 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             1324 ; 216  |// Cycle steal count register
                             1325 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             1326 ; 218  |
                             1327 ; 219  |#endif
                             1328 ; 220  |
                             1329 ; 221  |
                             1330 
                             1332 
                             1333 ; 18   |#include "regscore.h"
                             1334 
                             1336 
                             1337 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             1338 ; 2    |#define __REGS_STATUS_INC 1
                             1339 ; 3    |
                             1340 ; 4    |
                             1341 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1342 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             1343 ; 7    |#define HW_OMR_MA_BITPOS 0
                             1344 ; 8    |#define HW_OMR_MB_BITPOS 1
                             1345 ; 9    |#define HW_OMR_DE_BITPOS 2
                             1346 ; 10   |#define HW_OMR_YE_BITPOS 3
                             1347 ; 11   |#define HW_OMR_MC_BITPOS 4
                             1348 ; 12   |#define HW_OMR_SD_BITPOS 6
                             1349 ; 13   |
                             1350 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             1351 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             1352 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             1353 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             1354 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             1355 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             1356 ; 20   |
                             1357 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             1358 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             1359 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             1360 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             1361 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             1362 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             1363 ; 27   |
                             1364 ; 28   |
                             1365 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             1366 ; 30   |//  Status Register (HW_SR) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1367 ; 31   |#define HW_SR_C_BITPOS 0
                             1368 ; 32   |#define HW_SR_O_BITPOS 1
                             1369 ; 33   |#define HW_SR_Z_BITPOS 2
                             1370 ; 34   |#define HW_SR_N_BITPOS 3
                             1371 ; 35   |#define HW_SR_U_BITPOS 4
                             1372 ; 36   |#define HW_SR_E_BITPOS 5
                             1373 ; 37   |#define HW_SR_L_BITPOS 6
                             1374 ; 38   |#define HW_SR_IM_BITPOS 8
                             1375 ; 39   |#define HW_SR_IM0_BITPOS 8
                             1376 ; 40   |#define HW_SR_IM1_BITPOS 9
                             1377 ; 41   |#define HW_SR_SM_BITPOS 10
                             1378 ; 42   |#define HW_SR_SM0_BITPOS 10
                             1379 ; 43   |#define HW_SR_SM1_BITPOS 11
                             1380 ; 44   |#define HW_SR_TM_BITPOS 13
                             1381 ; 45   |#define HW_SR_DP_BITPOS 14
                             1382 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             1383 ; 47   |
                             1384 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             1385 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             1386 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             1387 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             1388 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             1389 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             1390 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             1391 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             1392 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             1393 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             1394 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             1395 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             1396 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             1397 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             1398 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             1399 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             1400 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             1401 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             1402 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             1403 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             1404 ; 68   |
                             1405 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             1406 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             1407 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             1408 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             1409 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             1410 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             1411 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             1412 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             1413 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             1414 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             1415 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             1416 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             1417 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             1418 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             1419 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             1420 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             1421 ; 85   |
                             1422 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             1423 ; 87   |//  RAM/ROM Config Register Bit Positions
                             1424 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             1425 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             1426 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             1427 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             1428 ; 92   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1429 ; 93   |
                             1430 ; 94   |
                             1431 
                             1433 
                             1434 ; 19   |#include "regscodec.h"
                             1435 
                             1437 
                             1438 ; 1    |#if !(defined(regscodecinc))
                             1439 ; 2    |#define regscodecinc 1
                             1440 ; 3    |
                             1441 ; 4    |
                             1442 ; 5    |
                             1443 ; 6    |#include "types.h"
                             1444 
                             1446 
                             1447 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1448 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1449 ; 3    |//
                             1450 ; 4    |// Filename: types.h
                             1451 ; 5    |// Description: Standard data types
                             1452 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1453 ; 7    |
                             1454 ; 8    |#ifndef _TYPES_H
                             1455 ; 9    |#define _TYPES_H
                             1456 ; 10   |
                             1457 ; 11   |// TODO:  move this outta here!
                             1458 ; 12   |#if !defined(NOERROR)
                             1459 ; 13   |#define NOERROR 0
                             1460 ; 14   |#define SUCCESS 0
                             1461 ; 15   |#endif 
                             1462 ; 16   |#if !defined(SUCCESS)
                             1463 ; 17   |#define SUCCESS  0
                             1464 ; 18   |#endif
                             1465 ; 19   |#if !defined(ERROR)
                             1466 ; 20   |#define ERROR   -1
                             1467 ; 21   |#endif
                             1468 ; 22   |#if !defined(FALSE)
                             1469 ; 23   |#define FALSE 0
                             1470 ; 24   |#endif
                             1471 ; 25   |#if !defined(TRUE)
                             1472 ; 26   |#define TRUE  1
                             1473 ; 27   |#endif
                             1474 ; 28   |
                             1475 ; 29   |#if !defined(NULL)
                             1476 ; 30   |#define NULL 0
                             1477 ; 31   |#endif
                             1478 ; 32   |
                             1479 ; 33   |#define MAX_INT     0x7FFFFF
                             1480 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1481 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1482 ; 36   |#define MAX_ULONG   (-1) 
                             1483 ; 37   |
                             1484 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1485 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1486 ; 40   |
                             1487 ; 41   |
                             1488 ; 42   |#define BYTE    unsigned char       // btVarName
                             1489 ; 43   |#define CHAR    signed char         // cVarName
                             1490 ; 44   |#define USHORT  unsigned short      // usVarName
                             1491 ; 45   |#define SHORT   unsigned short      // sVarName
                             1492 ; 46   |#define WORD    unsigned int        // wVarName
                             1493 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1494 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1495 ; 49   |#define LONG    signed long         // lVarName
                             1496 ; 50   |#define BOOL    unsigned int        // bVarName
                             1497 ; 51   |#define FRACT   _fract              // frVarName
                             1498 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1499 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1500 ; 54   |#define FLOAT   float               // fVarName
                             1501 ; 55   |#define DBL     double              // dVarName
                             1502 ; 56   |#define ENUM    enum                // eVarName
                             1503 ; 57   |#define CMX     _complex            // cmxVarName
                             1504 ; 58   |typedef WORD UCS3;                   // 
                             1505 ; 59   |
                             1506 ; 60   |#define UINT16  unsigned short
                             1507 ; 61   |#define UINT8   unsigned char   
                             1508 ; 62   |#define UINT32  unsigned long
                             1509 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1510 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1511 ; 65   |#define WCHAR   UINT16
                             1512 ; 66   |
                             1513 ; 67   |//UINT128 is 16 bytes or 6 words
                             1514 ; 68   |typedef struct UINT128_3500 {   
                             1515 ; 69   |    int val[6];     
                             1516 ; 70   |} UINT128_3500;
                             1517 ; 71   |
                             1518 ; 72   |#define UINT128   UINT128_3500
                             1519 ; 73   |
                             1520 ; 74   |// Little endian word packed byte strings:   
                             1521 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1522 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1523 ; 77   |// Little endian word packed byte strings:   
                             1524 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1525 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1526 ; 80   |
                             1527 ; 81   |// Declare Memory Spaces To Use When Coding
                             1528 ; 82   |// A. Sector Buffers
                             1529 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1530 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1531 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1532 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1533 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1534 ; 88   |// B. Media DDI Memory
                             1535 ; 89   |#define MEDIA_DDI_MEM _Y
                             1536 ; 90   |
                             1537 ; 91   |
                             1538 ; 92   |
                             1539 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1540 ; 94   |// Examples of circular pointers:
                             1541 ; 95   |//    INT CIRC cpiVarName
                             1542 ; 96   |//    DWORD CIRC cpdwVarName
                             1543 ; 97   |
                             1544 ; 98   |#define RETCODE INT                 // rcVarName
                             1545 ; 99   |
                             1546 ; 100  |// generic bitfield structure
                             1547 ; 101  |struct Bitfield {
                             1548 ; 102  |    unsigned int B0  :1;
                             1549 ; 103  |    unsigned int B1  :1;
                             1550 ; 104  |    unsigned int B2  :1;
                             1551 ; 105  |    unsigned int B3  :1;
                             1552 ; 106  |    unsigned int B4  :1;
                             1553 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1554 ; 108  |    unsigned int B6  :1;
                             1555 ; 109  |    unsigned int B7  :1;
                             1556 ; 110  |    unsigned int B8  :1;
                             1557 ; 111  |    unsigned int B9  :1;
                             1558 ; 112  |    unsigned int B10 :1;
                             1559 ; 113  |    unsigned int B11 :1;
                             1560 ; 114  |    unsigned int B12 :1;
                             1561 ; 115  |    unsigned int B13 :1;
                             1562 ; 116  |    unsigned int B14 :1;
                             1563 ; 117  |    unsigned int B15 :1;
                             1564 ; 118  |    unsigned int B16 :1;
                             1565 ; 119  |    unsigned int B17 :1;
                             1566 ; 120  |    unsigned int B18 :1;
                             1567 ; 121  |    unsigned int B19 :1;
                             1568 ; 122  |    unsigned int B20 :1;
                             1569 ; 123  |    unsigned int B21 :1;
                             1570 ; 124  |    unsigned int B22 :1;
                             1571 ; 125  |    unsigned int B23 :1;
                             1572 ; 126  |};
                             1573 ; 127  |
                             1574 ; 128  |union BitInt {
                             1575 ; 129  |        struct Bitfield B;
                             1576 ; 130  |        int        I;
                             1577 ; 131  |};
                             1578 ; 132  |
                             1579 ; 133  |#define MAX_MSG_LENGTH 10
                             1580 ; 134  |struct CMessage
                             1581 ; 135  |{
                             1582 ; 136  |        unsigned int m_uLength;
                             1583 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1584 ; 138  |};
                             1585 ; 139  |
                             1586 ; 140  |typedef struct {
                             1587 ; 141  |    WORD m_wLength;
                             1588 ; 142  |    WORD m_wMessage;
                             1589 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1590 ; 144  |} Message;
                             1591 ; 145  |
                             1592 ; 146  |struct MessageQueueDescriptor
                             1593 ; 147  |{
                             1594 ; 148  |        int *m_pBase;
                             1595 ; 149  |        int m_iModulo;
                             1596 ; 150  |        int m_iSize;
                             1597 ; 151  |        int *m_pHead;
                             1598 ; 152  |        int *m_pTail;
                             1599 ; 153  |};
                             1600 ; 154  |
                             1601 ; 155  |struct ModuleEntry
                             1602 ; 156  |{
                             1603 ; 157  |    int m_iSignaledEventMask;
                             1604 ; 158  |    int m_iWaitEventMask;
                             1605 ; 159  |    int m_iResourceOfCode;
                             1606 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1607 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1608 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1609 ; 163  |    int m_uTimeOutHigh;
                             1610 ; 164  |    int m_uTimeOutLow;
                             1611 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1612 ; 166  |};
                             1613 ; 167  |
                             1614 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1615 ; 169  |    struct B{
                             1616 ; 170  |        unsigned int m_bNone     :1;
                             1617 ; 171  |        unsigned int m_bMessage  :1;
                             1618 ; 172  |        unsigned int m_bTimer    :1;
                             1619 ; 173  |        unsigned int m_bButton   :1;
                             1620 ; 174  |    } B;
                             1621 ; 175  |    int I;
                             1622 ; 176  |} ;
                             1623 ; 177  |
                             1624 ; 178  |
                             1625 ; 179  |struct Button {
                             1626 ; 180  |        WORD wButtonEvent;
                             1627 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1628 ; 182  |};
                             1629 ; 183  |
                             1630 ; 184  |struct Message {
                             1631 ; 185  |        WORD wMsgLength;
                             1632 ; 186  |        WORD wMsgCommand;
                             1633 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1634 ; 188  |};
                             1635 ; 189  |
                             1636 ; 190  |union EventTypes {
                             1637 ; 191  |        struct CMessage msg;
                             1638 ; 192  |        struct Button Button ;
                             1639 ; 193  |        struct Message Message;
                             1640 ; 194  |};
                             1641 ; 195  |
                             1642 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1643 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1644 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1645 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1646 ; 200  |
                             1647 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1648 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1649 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1650 ; 204  |
                             1651 ; 205  |#if DEBUG
                             1652 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1653 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1654 ; 208  |#else 
                             1655 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1656 ; 210  |#define DebugBuildAssert(x)    
                             1657 ; 211  |#endif
                             1658 ; 212  |
                             1659 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1660 ; 214  |//  #pragma asm
                             1661 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1662 ; 216  |//  #pragma endasm
                             1663 ; 217  |
                             1664 ; 218  |
                             1665 ; 219  |#ifdef COLOR_262K
                             1666 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1667 ; 221  |#elif defined(COLOR_65K)
                             1668 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1669 ; 223  |#else
                             1670 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1671 ; 225  |#endif
                             1672 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1673 ; 227  |#endif // #ifndef _TYPES_H
                             1674 
                             1676 
                             1677 ; 7    |
                             1678 ; 8    |
                             1679 ; 9    |
                             1680 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1681 ; 11   |
                             1682 ; 12   |//   SYSTEM STMP Registers 
                             1683 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1684 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1685 ; 15   |
                             1686 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1687 ; 17   |
                             1688 ; 18   |
                             1689 ; 19   |
                             1690 ; 20   |
                             1691 ; 21   |
                             1692 ; 22   |
                             1693 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1694 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             1695 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1696 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1697 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1698 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1699 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1700 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1701 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1702 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1703 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1704 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1705 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1706 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1707 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1708 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1709 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1710 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1711 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             1712 ; 42   |
                             1713 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1714 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1715 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1716 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1717 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1718 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1719 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1720 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1721 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1722 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1723 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1724 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1725 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1726 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1727 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1728 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1729 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1730 ; 60   |
                             1731 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1732 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1733 ; 63   |
                             1734 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1735 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1736 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1737 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1738 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1739 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1740 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1741 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1742 ; 72   |
                             1743 ; 73   |#if defined(CAPLESS_HP)
                             1744 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1745 ; 75   |#else 
                             1746 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1747 ; 77   |#endif
                             1748 ; 78   |
                             1749 ; 79   |// Headphone control register
                             1750 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1751 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1752 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1753 ; 83   |typedef union               
                             1754 ; 84   |{
                             1755 ; 85   |    struct {
                             1756 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1757 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1758 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1759 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1760 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1761 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1762 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1763 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1764 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1765 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1766 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1767 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1768 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1769 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1770 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1771 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1772 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1773 ; 103  |    } B;
                             1774 ; 104  |    int I;
                             1775 ; 105  |    unsigned int U;
                             1776 ; 106  |} hpctrl_type;
                             1777 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1778 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1779 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1780 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1781 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1782 ; 112  |
                             1783 ; 113  |
                             1784 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1785 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1786 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1787 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1788 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1789 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1790 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1791 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1792 ; 122  |
                             1793 ; 123  |
                             1794 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1795 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1796 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1797 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1798 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1799 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1800 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1801 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1802 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1803 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1804 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1805 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1806 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1807 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1808 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1809 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1810 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1811 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1812 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1813 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1814 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1815 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1816 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1817 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1818 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1819 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1820 ; 150  |
                             1821 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1822 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1823 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1824 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1825 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1826 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1827 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1828 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1829 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1830 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1831 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1832 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1833 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1834 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1835 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1836 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1837 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1838 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1839 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1840 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1841 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1842 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1843 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1844 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1845 ; 175  |
                             1846 ; 176  |
                             1847 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1848 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1849 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1850 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1851 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1852 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1853 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1854 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1855 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1856 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1857 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1858 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1859 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1860 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1861 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1862 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1863 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1864 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1865 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1866 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1867 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1868 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1869 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1870 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1871 ; 201  |
                             1872 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1873 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1874 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1875 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1876 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1877 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1878 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1879 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1880 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1881 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1882 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1883 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1884 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1885 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1886 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1887 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1888 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1889 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1890 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1891 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1892 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1893 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1894 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1895 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1896 ; 226  |
                             1897 ; 227  |typedef union               
                             1898 ; 228  |{
                             1899 ; 229  |    struct {
                             1900 ; 230  |        int INV_USB_CLK            : 1;
                             1901 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1902 ; 232  |        int HOLD_GND               : 1;
                             1903 ; 233  |        int ACKI                   : 1;
                             1904 ; 234  |        int ASD2X                  : 1;
                             1905 ; 235  |        int PCPCU                  : 1;
                             1906 ; 236  |        int PCPCD                  : 1;
                             1907 ; 237  |        int DCKI                   : 1;
                             1908 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1909 ; 239  |        int PSRN                   : 1;
                             1910 ; 240  |        int FX2                    : 1;
                             1911 ; 241  |        int VCOS                   : 1;
                             1912 ; 242  |        int XBCO                   : 1;
                             1913 ; 243  |        int XBGC                   : 1;
                             1914 ; 244  |        int ADTHD                  : 1;
                             1915 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1916 ; 246  |        int PWDADC                 : 1;
                             1917 ; 247  |        int MICBIAS1               : 1;
                             1918 ; 248  |        int EZD                    : 1;
                             1919 ; 249  |        int DZCDA                  : 1;
                             1920 ; 250  |        int DZCFM                  : 1;
                             1921 ; 251  |        int DZCLI                  : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1922 ; 252  |        int DZCMI                  : 1;
                             1923 ; 253  |        int DZCMA                  : 1;
                             1924 ; 254  |    } B;
                             1925 ; 255  |    int I;
                             1926 ; 256  |    unsigned int U;
                             1927 ; 257  |} mix_tbr_type;
                             1928 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1929 ; 259  |
                             1930 ; 260  |
                             1931 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1932 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1933 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1934 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1935 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1936 ; 266  |
                             1937 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1938 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1939 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1940 ; 270  |
                             1941 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1942 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1943 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1944 ; 274  |
                             1945 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1946 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1947 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1948 ; 278  |
                             1949 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1950 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1951 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1952 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1953 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1954 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1955 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1956 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1957 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1958 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1959 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1960 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1961 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1962 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1963 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1964 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1965 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1966 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1967 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1968 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1969 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1970 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1971 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1972 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1973 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1974 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1975 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1976 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1977 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1978 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1979 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1980 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1981 ; 311  |
                             1982 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1983 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1984 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1985 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1986 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1987 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1988 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1989 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1990 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1991 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1992 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1993 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1994 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1995 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1996 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1997 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1998 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1999 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             2000 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             2001 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             2002 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             2003 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             2004 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             2005 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             2006 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             2007 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             2008 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             2009 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             2010 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             2011 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             2012 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             2013 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             2014 ; 344  |
                             2015 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             2016 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             2017 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             2018 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             2019 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             2020 ; 350  |
                             2021 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             2022 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             2023 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             2024 ; 354  |
                             2025 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             2026 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             2027 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             2028 ; 358  |
                             2029 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             2030 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             2031 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             2032 ; 362  |
                             2033 ; 363  |
                             2034 ; 364  |typedef union               
                             2035 ; 365  |{
                             2036 ; 366  |    struct
                             2037 ; 367  |    {
                             2038 ; 368  |        unsigned MR :5;
                             2039 ; 369  |        int         :3;
                             2040 ; 370  |        unsigned ML :5;
                             2041 ; 371  |        int         :2;
                             2042 ; 372  |        int MUTE    :1;
                             2043 ; 373  |    } B;
                             2044 ; 374  |    int I;
                             2045 ; 375  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2046 ; 376  |} mix_mastervr_type;
                             2047 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             2048 ; 378  |
                             2049 ; 379  |
                             2050 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             2051 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             2052 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             2053 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             2054 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             2055 ; 385  |
                             2056 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             2057 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             2058 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             2059 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             2060 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             2061 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             2062 ; 392  |
                             2063 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             2064 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             2065 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             2066 ; 396  |
                             2067 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             2068 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             2069 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             2070 ; 400  |
                             2071 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             2072 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             2073 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             2074 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             2075 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             2076 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             2077 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             2078 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             2079 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             2080 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             2081 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             2082 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             2083 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             2084 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             2085 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             2086 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             2087 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             2088 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             2089 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             2090 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             2091 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             2092 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             2093 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             2094 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             2095 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             2096 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             2097 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             2098 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             2099 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             2100 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             2101 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             2102 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             2103 ; 433  |
                             2104 ; 434  |typedef union               
                             2105 ; 435  |{
                             2106 ; 436  |    struct {
                             2107 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2108 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             2109 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             2110 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             2111 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             2112 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             2113 ; 443  |    } B;
                             2114 ; 444  |    int I;
                             2115 ; 445  |    unsigned int U;
                             2116 ; 446  |} mix_micinvr_type;
                             2117 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             2118 ; 448  |
                             2119 ; 449  |
                             2120 ; 450  |
                             2121 ; 451  |
                             2122 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             2123 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             2124 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             2125 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             2126 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             2127 ; 457  |
                             2128 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             2129 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             2130 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             2131 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             2132 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             2133 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             2134 ; 464  |
                             2135 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             2136 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             2137 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             2138 ; 468  |
                             2139 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             2140 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             2141 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             2142 ; 472  |
                             2143 ; 473  |typedef union               
                             2144 ; 474  |{
                             2145 ; 475  |    struct {
                             2146 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             2147 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             2148 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             2149 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             2150 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             2151 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             2152 ; 482  |    } B;
                             2153 ; 483  |    int I;
                             2154 ; 484  |    unsigned int U;
                             2155 ; 485  |} mix_line1invr_type;
                             2156 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             2157 ; 487  |
                             2158 ; 488  |
                             2159 ; 489  |
                             2160 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             2161 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             2162 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             2163 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             2164 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             2165 ; 495  |
                             2166 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             2167 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             2168 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             2169 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2170 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             2171 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             2172 ; 502  |
                             2173 ; 503  |
                             2174 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             2175 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             2176 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             2177 ; 507  |
                             2178 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             2179 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             2180 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             2181 ; 511  |
                             2182 ; 512  |typedef union               
                             2183 ; 513  |{
                             2184 ; 514  |    struct {
                             2185 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             2186 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             2187 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             2188 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             2189 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             2190 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             2191 ; 521  |    } B;
                             2192 ; 522  |    int I;
                             2193 ; 523  |    unsigned int U;
                             2194 ; 524  |} mix_line2invr_type;
                             2195 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             2196 ; 526  |
                             2197 ; 527  |
                             2198 ; 528  |
                             2199 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             2200 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             2201 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             2202 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             2203 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             2204 ; 534  |
                             2205 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             2206 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             2207 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             2208 ; 538  |
                             2209 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             2210 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             2211 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             2212 ; 542  |
                             2213 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             2214 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             2215 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             2216 ; 546  |
                             2217 ; 547  |typedef union               
                             2218 ; 548  |{
                             2219 ; 549  |    struct {
                             2220 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             2221 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             2222 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             2223 ; 553  |    } B;
                             2224 ; 554  |    int I;
                             2225 ; 555  |    unsigned int U;
                             2226 ; 556  |} mix_dacinvr_type;
                             2227 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             2228 ; 558  |
                             2229 ; 559  |
                             2230 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             2231 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2232 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             2233 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             2234 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             2235 ; 565  |
                             2236 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             2237 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             2238 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             2239 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             2240 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             2241 ; 571  |
                             2242 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             2243 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             2244 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             2245 ; 575  |
                             2246 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             2247 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             2248 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             2249 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             2250 ; 580  |
                             2251 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             2252 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             2253 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             2254 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             2255 ; 585  |
                             2256 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             2257 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             2258 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             2259 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             2260 ; 590  |
                             2261 ; 591  |typedef union               
                             2262 ; 592  |{
                             2263 ; 593  |    struct {
                             2264 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             2265 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             2266 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             2267 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             2268 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             2269 ; 599  |    } B;
                             2270 ; 600  |    int I;
                             2271 ; 601  |    unsigned int U;
                             2272 ; 602  |} mix_recselr_type;
                             2273 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             2274 ; 604  |
                             2275 ; 605  |
                             2276 ; 606  |
                             2277 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             2278 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             2279 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             2280 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             2281 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             2282 ; 612  |
                             2283 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             2284 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             2285 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             2286 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             2287 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             2288 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             2289 ; 619  |
                             2290 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             2291 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             2292 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2293 ; 623  |
                             2294 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             2295 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             2296 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             2297 ; 627  |
                             2298 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             2299 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             2300 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             2301 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             2302 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             2303 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             2304 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             2305 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             2306 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             2307 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             2308 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             2309 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             2310 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             2311 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             2312 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             2313 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             2314 ; 644  |
                             2315 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             2316 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             2317 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             2318 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             2319 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             2320 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             2321 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             2322 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             2323 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             2324 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             2325 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             2326 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             2327 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             2328 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             2329 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             2330 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             2331 ; 661  |
                             2332 ; 662  |typedef union               
                             2333 ; 663  |{
                             2334 ; 664  |    struct {
                             2335 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             2336 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             2337 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             2338 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             2339 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             2340 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             2341 ; 671  |    } B;
                             2342 ; 672  |    int I;
                             2343 ; 673  |    unsigned int U;
                             2344 ; 674  |} mix_adcgainr_type;
                             2345 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             2346 ; 676  |
                             2347 ; 677  |
                             2348 ; 678  |
                             2349 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             2350 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             2351 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             2352 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             2353 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             2354 ; 684  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2355 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             2356 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             2357 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             2358 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             2359 ; 689  |
                             2360 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             2361 ; 691  |
                             2362 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             2363 ; 693  |
                             2364 ; 694  |typedef union               
                             2365 ; 695  |{
                             2366 ; 696  |    struct {
                             2367 ; 697  |                int                     : 9;
                             2368 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             2369 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             2370 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             2371 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             2372 ; 702  |    } B;
                             2373 ; 703  |    int I;
                             2374 ; 704  |    unsigned int U;
                             2375 ; 705  |} mix_pwrdnr_type;
                             2376 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             2377 ; 707  |
                             2378 ; 708  |
                             2379 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             2380 ; 710  |
                             2381 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             2382 ; 712  |
                             2383 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             2384 ; 714  |
                             2385 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             2386 ; 716  |
                             2387 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             2388 ; 718  |
                             2389 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             2390 ; 720  |
                             2391 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             2392 ; 722  |
                             2393 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             2394 ; 724  |
                             2395 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             2396 ; 726  |
                             2397 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             2398 ; 728  |
                             2399 ; 729  |
                             2400 ; 730  |
                             2401 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             2402 ; 732  |
                             2403 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             2404 ; 734  |
                             2405 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             2406 ; 736  |
                             2407 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             2408 ; 738  |
                             2409 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             2410 ; 740  |
                             2411 ; 741  |
                             2412 ; 742  |
                             2413 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             2414 ; 744  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2415 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             2416 ; 746  |
                             2417 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             2418 ; 748  |
                             2419 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             2420 ; 750  |
                             2421 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             2422 ; 752  |
                             2423 ; 753  |
                             2424 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             2425 ; 755  |
                             2426 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             2427 ; 757  |
                             2428 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             2429 ; 759  |
                             2430 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             2431 ; 761  |
                             2432 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             2433 ; 763  |
                             2434 ; 764  |
                             2435 ; 765  |typedef union               
                             2436 ; 766  |{
                             2437 ; 767  |    struct {
                             2438 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             2439 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             2440 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             2441 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             2442 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             2443 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             2444 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             2445 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             2446 ; 776  |    } B;
                             2447 ; 777  |    int I;
                             2448 ; 778  |    unsigned int U;
                             2449 ; 779  |} mix_test_type;
                             2450 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             2451 ; 781  |
                             2452 ; 782  |
                             2453 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             2454 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             2455 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             2456 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             2457 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             2458 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             2459 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             2460 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             2461 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             2462 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             2463 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             2464 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             2465 ; 795  |
                             2466 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             2467 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             2468 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             2469 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             2470 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2471 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             2472 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             2473 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             2474 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             2475 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             2476 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             2477 ; 807  |
                             2478 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             2479 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             2480 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             2481 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             2482 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             2483 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             2484 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             2485 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             2486 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             2487 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             2488 ; 818  |
                             2489 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             2490 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             2491 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             2492 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             2493 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             2494 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             2495 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             2496 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             2497 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             2498 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             2499 ; 829  |
                             2500 ; 830  |typedef union               
                             2501 ; 831  |{
                             2502 ; 832  |    struct {
                             2503 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             2504 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             2505 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             2506 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             2507 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2508 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2509 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2510 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2511 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2512 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2513 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2514 ; 844  |    } B;
                             2515 ; 845  |    int I;
                             2516 ; 846  |    unsigned int U;
                             2517 ; 847  |} ref_ctrl_type;
                             2518 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             2519 ; 849  |
                             2520 ; 850  |
                             2521 ; 851  |
                             2522 ; 852  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2523 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2524 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2525 ; 855  |//////  DAC Registers
                             2526 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2527 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             2528 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2529 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2530 ; 860  |
                             2531 ; 861  |
                             2532 ; 862  |
                             2533 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2534 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2535 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2536 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             2537 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2538 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2539 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2540 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2541 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2542 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2543 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             2544 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2545 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2546 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2547 ; 877  |
                             2548 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2549 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2550 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2551 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2552 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2553 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2554 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2555 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2556 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2557 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2558 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2559 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2560 ; 890  |
                             2561 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             2562 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2563 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2564 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2565 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2566 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2567 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2568 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2569 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2570 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2571 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2572 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2573 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2574 ; 904  |
                             2575 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2576 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2577 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2578 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2579 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2580 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             2581 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2582 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2583 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2584 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2585 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2586 ; 916  |
                             2587 ; 917  |
                             2588 ; 918  |typedef union               
                             2589 ; 919  |{
                             2590 ; 920  |    struct {
                             2591 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2592 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2593 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2594 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2595 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2596 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2597 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2598 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2599 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2600 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2601 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2602 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2603 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2604 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2605 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             2606 ; 936  |    } B;
                             2607 ; 937  |    int I;
                             2608 ; 938  |    unsigned int U;
                             2609 ; 939  |} dac_csr_type;
                             2610 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2611 ; 941  |
                             2612 ; 942  |
                             2613 ; 943  |
                             2614 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2615 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2616 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2617 ; 947  |
                             2618 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2619 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2620 ; 950  |
                             2621 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2622 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2623 ; 953  |
                             2624 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2625 ; 955  |
                             2626 ; 956  |typedef union               
                             2627 ; 957  |{
                             2628 ; 958  |    struct {
                             2629 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2630 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2631 ; 961  |    } B;
                             2632 ; 962  |    int I;
                             2633 ; 963  |    unsigned int U;
                             2634 ; 964  |} dac_srr_type;
                             2635 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2636 ; 966  |
                             2637 ; 967  |
                             2638 ; 968  |
                             2639 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2640 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2641 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2642 ; 972  |
                             2643 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2644 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2645 ; 975  |
                             2646 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2647 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             2648 ; 978  |
                             2649 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2650 ; 980  |
                             2651 ; 981  |typedef union               
                             2652 ; 982  |{
                             2653 ; 983  |    struct {
                             2654 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2655 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2656 ; 986  |    } B;
                             2657 ; 987  |    int I;
                             2658 ; 988  |    unsigned int U;
                             2659 ; 989  |} dac_wcr_type;
                             2660 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2661 ; 991  |
                             2662 ; 992  |
                             2663 ; 993  |
                             2664 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2665 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2666 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             2667 ; 997  |
                             2668 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2669 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2670 ; 1000 |
                             2671 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2672 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             2673 ; 1003 |
                             2674 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2675 ; 1005 |
                             2676 ; 1006 |typedef union               
                             2677 ; 1007 |{
                             2678 ; 1008 |    struct {
                             2679 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2680 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2681 ; 1011 |    } B;
                             2682 ; 1012 |    int I;
                             2683 ; 1013 |    unsigned int U;
                             2684 ; 1014 |} dac_cpr_type;
                             2685 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2686 ; 1016 |
                             2687 ; 1017 |
                             2688 ; 1018 |
                             2689 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2690 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2691 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2692 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2693 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2694 ; 1024 |
                             2695 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2696 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2697 ; 1027 |
                             2698 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2699 ; 1029 |
                             2700 ; 1030 |typedef union               
                             2701 ; 1031 |{
                             2702 ; 1032 |    struct {
                             2703 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2704 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2705 ; 1035 |    } B;
                             2706 ; 1036 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2707 ; 1037 |    unsigned int U;
                             2708 ; 1038 |} dac_mr_type;
                             2709 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2710 ; 1040 |
                             2711 ; 1041 |
                             2712 ; 1042 |
                             2713 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2714 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2715 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2716 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2717 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2718 ; 1048 |
                             2719 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2720 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             2721 ; 1051 |
                             2722 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2723 ; 1053 |
                             2724 ; 1054 |typedef union               
                             2725 ; 1055 |{
                             2726 ; 1056 |    struct {
                             2727 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2728 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2729 ; 1059 |    } B;
                             2730 ; 1060 |    int I;
                             2731 ; 1061 |    unsigned int U;
                             2732 ; 1062 |} dac_bar_type;
                             2733 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2734 ; 1064 |
                             2735 ; 1065 |
                             2736 ; 1066 |
                             2737 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2738 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2739 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2740 ; 1070 |
                             2741 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2742 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2743 ; 1073 |
                             2744 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             2745 ; 1075 |
                             2746 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2747 ; 1077 |
                             2748 ; 1078 |typedef union               
                             2749 ; 1079 |{
                             2750 ; 1080 |    struct {
                             2751 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2752 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2753 ; 1083 |    } B;
                             2754 ; 1084 |    int I;
                             2755 ; 1085 |    unsigned int U;
                             2756 ; 1086 |} dac_icr_type;
                             2757 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2758 ; 1088 |
                             2759 ; 1089 |
                             2760 ; 1090 |
                             2761 ; 1091 |
                             2762 ; 1092 |
                             2763 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2764 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2765 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2766 ; 1096 |//////  ADC Registers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2767 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2768 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2769 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2770 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2771 ; 1101 |
                             2772 ; 1102 |
                             2773 ; 1103 |
                             2774 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2775 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2776 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2777 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2778 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2779 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2780 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2781 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2782 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2783 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2784 ; 1114 |
                             2785 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2786 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2787 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2788 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2789 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2790 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2791 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2792 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2793 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2794 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2795 ; 1125 |
                             2796 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2797 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2798 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2799 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2800 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2801 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             2802 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             2803 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2804 ; 1134 |
                             2805 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2806 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2807 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2808 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2809 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2810 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2811 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2812 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2813 ; 1143 |
                             2814 ; 1144 |typedef union               
                             2815 ; 1145 |{
                             2816 ; 1146 |    struct {
                             2817 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2818 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2819 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2820 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2821 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2822 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2823 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2824 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2825 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2826 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2827 ; 1157 |    } B;
                             2828 ; 1158 |    int I;
                             2829 ; 1159 |    unsigned int U;
                             2830 ; 1160 |} adc_csr_type;
                             2831 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2832 ; 1162 |
                             2833 ; 1163 |
                             2834 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2835 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2836 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2837 ; 1167 |
                             2838 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2839 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2840 ; 1170 |
                             2841 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             2842 ; 1172 |
                             2843 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2844 ; 1174 |
                             2845 ; 1175 |typedef union               
                             2846 ; 1176 |{
                             2847 ; 1177 |    struct {
                             2848 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2849 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2850 ; 1180 |    } B;
                             2851 ; 1181 |    int I;
                             2852 ; 1182 |    unsigned int U;
                             2853 ; 1183 |} adc_wcr_type;
                             2854 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2855 ; 1185 |
                             2856 ; 1186 |
                             2857 ; 1187 |
                             2858 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2859 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2860 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2861 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2862 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2863 ; 1193 |
                             2864 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2865 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             2866 ; 1196 |
                             2867 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2868 ; 1198 |
                             2869 ; 1199 |typedef union               
                             2870 ; 1200 |{
                             2871 ; 1201 |    struct {
                             2872 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2873 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2874 ; 1204 |    } B;
                             2875 ; 1205 |    int I;
                             2876 ; 1206 |    unsigned int U;
                             2877 ; 1207 |} adc_bar_type;
                             2878 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2879 ; 1209 |
                             2880 ; 1210 |
                             2881 ; 1211 |
                             2882 ; 1212 |
                             2883 ; 1213 |
                             2884 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2885 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2886 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2887 ; 1217 |
                             2888 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2889 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2890 ; 1220 |
                             2891 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             2892 ; 1222 |
                             2893 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2894 ; 1224 |
                             2895 ; 1225 |typedef union               
                             2896 ; 1226 |{
                             2897 ; 1227 |    struct {
                             2898 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2899 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2900 ; 1230 |    } B;
                             2901 ; 1231 |    int I;
                             2902 ; 1232 |    unsigned int U;
                             2903 ; 1233 |} adc_cpr_type;
                             2904 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2905 ; 1235 |
                             2906 ; 1236 |
                             2907 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2908 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2909 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2910 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2911 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2912 ; 1242 |
                             2913 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2914 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2915 ; 1245 |
                             2916 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2917 ; 1247 |
                             2918 ; 1248 |typedef union               
                             2919 ; 1249 |{
                             2920 ; 1250 |    struct {
                             2921 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2922 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2923 ; 1253 |    } B;
                             2924 ; 1254 |    int I;
                             2925 ; 1255 |    unsigned int U;
                             2926 ; 1256 |} adc_mr_type;
                             2927 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2928 ; 1258 |
                             2929 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2930 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2931 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2932 ; 1262 |
                             2933 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2934 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2935 ; 1265 |
                             2936 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2937 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2938 ; 1268 |
                             2939 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2940 ; 1270 |
                             2941 ; 1271 |typedef union               
                             2942 ; 1272 |{
                             2943 ; 1273 |    struct {
                             2944 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2945 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2946 ; 1276 |    } B;
                             2947 ; 1277 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2948 ; 1278 |    unsigned int U;
                             2949 ; 1279 |} adc_srr_type;
                             2950 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2951 ; 1281 |
                             2952 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2953 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2954 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2955 ; 1285 |
                             2956 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2957 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2958 ; 1288 |
                             2959 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             2960 ; 1290 |
                             2961 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2962 ; 1292 |
                             2963 ; 1293 |typedef union               
                             2964 ; 1294 |{
                             2965 ; 1295 |    struct {
                             2966 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2967 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2968 ; 1298 |    } B;
                             2969 ; 1299 |    int I;
                             2970 ; 1300 |    unsigned int U;
                             2971 ; 1301 |} adc_icr_type;
                             2972 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2973 ; 1303 |
                             2974 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             2975 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             2976 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2977 ; 1307 |
                             2978 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2979 ; 1309 |
                             2980 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2981 ; 1311 |
                             2982 ; 1312 |#endif
                             2983 ; 1313 |
                             2984 
                             2986 
                             2987 ; 20   |#include "regsdcdc.h"
                             2988 
                             2990 
                             2991 ; 1    |#if !(defined(regsdcdcinc))
                             2992 ; 2    |
                             2993 ; 3    |#define regssysteminc 1
                             2994 ; 4    |
                             2995 ; 5    |
                             2996 ; 6    |
                             2997 ; 7    |#include "types.h"
                             2998 
                             3000 
                             3001 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3002 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3003 ; 3    |//
                             3004 ; 4    |// Filename: types.h
                             3005 ; 5    |// Description: Standard data types
                             3006 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3007 ; 7    |
                             3008 ; 8    |#ifndef _TYPES_H
                             3009 ; 9    |#define _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3010 ; 10   |
                             3011 ; 11   |// TODO:  move this outta here!
                             3012 ; 12   |#if !defined(NOERROR)
                             3013 ; 13   |#define NOERROR 0
                             3014 ; 14   |#define SUCCESS 0
                             3015 ; 15   |#endif 
                             3016 ; 16   |#if !defined(SUCCESS)
                             3017 ; 17   |#define SUCCESS  0
                             3018 ; 18   |#endif
                             3019 ; 19   |#if !defined(ERROR)
                             3020 ; 20   |#define ERROR   -1
                             3021 ; 21   |#endif
                             3022 ; 22   |#if !defined(FALSE)
                             3023 ; 23   |#define FALSE 0
                             3024 ; 24   |#endif
                             3025 ; 25   |#if !defined(TRUE)
                             3026 ; 26   |#define TRUE  1
                             3027 ; 27   |#endif
                             3028 ; 28   |
                             3029 ; 29   |#if !defined(NULL)
                             3030 ; 30   |#define NULL 0
                             3031 ; 31   |#endif
                             3032 ; 32   |
                             3033 ; 33   |#define MAX_INT     0x7FFFFF
                             3034 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3035 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3036 ; 36   |#define MAX_ULONG   (-1) 
                             3037 ; 37   |
                             3038 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3039 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3040 ; 40   |
                             3041 ; 41   |
                             3042 ; 42   |#define BYTE    unsigned char       // btVarName
                             3043 ; 43   |#define CHAR    signed char         // cVarName
                             3044 ; 44   |#define USHORT  unsigned short      // usVarName
                             3045 ; 45   |#define SHORT   unsigned short      // sVarName
                             3046 ; 46   |#define WORD    unsigned int        // wVarName
                             3047 ; 47   |#define INT     signed int          // iVarName
                             3048 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3049 ; 49   |#define LONG    signed long         // lVarName
                             3050 ; 50   |#define BOOL    unsigned int        // bVarName
                             3051 ; 51   |#define FRACT   _fract              // frVarName
                             3052 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3053 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3054 ; 54   |#define FLOAT   float               // fVarName
                             3055 ; 55   |#define DBL     double              // dVarName
                             3056 ; 56   |#define ENUM    enum                // eVarName
                             3057 ; 57   |#define CMX     _complex            // cmxVarName
                             3058 ; 58   |typedef WORD UCS3;                   // 
                             3059 ; 59   |
                             3060 ; 60   |#define UINT16  unsigned short
                             3061 ; 61   |#define UINT8   unsigned char   
                             3062 ; 62   |#define UINT32  unsigned long
                             3063 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3064 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3065 ; 65   |#define WCHAR   UINT16
                             3066 ; 66   |
                             3067 ; 67   |//UINT128 is 16 bytes or 6 words
                             3068 ; 68   |typedef struct UINT128_3500 {   
                             3069 ; 69   |    int val[6];     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3070 ; 70   |} UINT128_3500;
                             3071 ; 71   |
                             3072 ; 72   |#define UINT128   UINT128_3500
                             3073 ; 73   |
                             3074 ; 74   |// Little endian word packed byte strings:   
                             3075 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3076 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3077 ; 77   |// Little endian word packed byte strings:   
                             3078 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3079 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3080 ; 80   |
                             3081 ; 81   |// Declare Memory Spaces To Use When Coding
                             3082 ; 82   |// A. Sector Buffers
                             3083 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3084 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3085 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3086 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3087 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3088 ; 88   |// B. Media DDI Memory
                             3089 ; 89   |#define MEDIA_DDI_MEM _Y
                             3090 ; 90   |
                             3091 ; 91   |
                             3092 ; 92   |
                             3093 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3094 ; 94   |// Examples of circular pointers:
                             3095 ; 95   |//    INT CIRC cpiVarName
                             3096 ; 96   |//    DWORD CIRC cpdwVarName
                             3097 ; 97   |
                             3098 ; 98   |#define RETCODE INT                 // rcVarName
                             3099 ; 99   |
                             3100 ; 100  |// generic bitfield structure
                             3101 ; 101  |struct Bitfield {
                             3102 ; 102  |    unsigned int B0  :1;
                             3103 ; 103  |    unsigned int B1  :1;
                             3104 ; 104  |    unsigned int B2  :1;
                             3105 ; 105  |    unsigned int B3  :1;
                             3106 ; 106  |    unsigned int B4  :1;
                             3107 ; 107  |    unsigned int B5  :1;
                             3108 ; 108  |    unsigned int B6  :1;
                             3109 ; 109  |    unsigned int B7  :1;
                             3110 ; 110  |    unsigned int B8  :1;
                             3111 ; 111  |    unsigned int B9  :1;
                             3112 ; 112  |    unsigned int B10 :1;
                             3113 ; 113  |    unsigned int B11 :1;
                             3114 ; 114  |    unsigned int B12 :1;
                             3115 ; 115  |    unsigned int B13 :1;
                             3116 ; 116  |    unsigned int B14 :1;
                             3117 ; 117  |    unsigned int B15 :1;
                             3118 ; 118  |    unsigned int B16 :1;
                             3119 ; 119  |    unsigned int B17 :1;
                             3120 ; 120  |    unsigned int B18 :1;
                             3121 ; 121  |    unsigned int B19 :1;
                             3122 ; 122  |    unsigned int B20 :1;
                             3123 ; 123  |    unsigned int B21 :1;
                             3124 ; 124  |    unsigned int B22 :1;
                             3125 ; 125  |    unsigned int B23 :1;
                             3126 ; 126  |};
                             3127 ; 127  |
                             3128 ; 128  |union BitInt {
                             3129 ; 129  |        struct Bitfield B;
                             3130 ; 130  |        int        I;
                             3131 ; 131  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3132 ; 132  |
                             3133 ; 133  |#define MAX_MSG_LENGTH 10
                             3134 ; 134  |struct CMessage
                             3135 ; 135  |{
                             3136 ; 136  |        unsigned int m_uLength;
                             3137 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3138 ; 138  |};
                             3139 ; 139  |
                             3140 ; 140  |typedef struct {
                             3141 ; 141  |    WORD m_wLength;
                             3142 ; 142  |    WORD m_wMessage;
                             3143 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3144 ; 144  |} Message;
                             3145 ; 145  |
                             3146 ; 146  |struct MessageQueueDescriptor
                             3147 ; 147  |{
                             3148 ; 148  |        int *m_pBase;
                             3149 ; 149  |        int m_iModulo;
                             3150 ; 150  |        int m_iSize;
                             3151 ; 151  |        int *m_pHead;
                             3152 ; 152  |        int *m_pTail;
                             3153 ; 153  |};
                             3154 ; 154  |
                             3155 ; 155  |struct ModuleEntry
                             3156 ; 156  |{
                             3157 ; 157  |    int m_iSignaledEventMask;
                             3158 ; 158  |    int m_iWaitEventMask;
                             3159 ; 159  |    int m_iResourceOfCode;
                             3160 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3161 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3162 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3163 ; 163  |    int m_uTimeOutHigh;
                             3164 ; 164  |    int m_uTimeOutLow;
                             3165 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3166 ; 166  |};
                             3167 ; 167  |
                             3168 ; 168  |union WaitMask{
                             3169 ; 169  |    struct B{
                             3170 ; 170  |        unsigned int m_bNone     :1;
                             3171 ; 171  |        unsigned int m_bMessage  :1;
                             3172 ; 172  |        unsigned int m_bTimer    :1;
                             3173 ; 173  |        unsigned int m_bButton   :1;
                             3174 ; 174  |    } B;
                             3175 ; 175  |    int I;
                             3176 ; 176  |} ;
                             3177 ; 177  |
                             3178 ; 178  |
                             3179 ; 179  |struct Button {
                             3180 ; 180  |        WORD wButtonEvent;
                             3181 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3182 ; 182  |};
                             3183 ; 183  |
                             3184 ; 184  |struct Message {
                             3185 ; 185  |        WORD wMsgLength;
                             3186 ; 186  |        WORD wMsgCommand;
                             3187 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3188 ; 188  |};
                             3189 ; 189  |
                             3190 ; 190  |union EventTypes {
                             3191 ; 191  |        struct CMessage msg;
                             3192 ; 192  |        struct Button Button ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3193 ; 193  |        struct Message Message;
                             3194 ; 194  |};
                             3195 ; 195  |
                             3196 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3197 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3198 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3199 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3200 ; 200  |
                             3201 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3202 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3203 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3204 ; 204  |
                             3205 ; 205  |#if DEBUG
                             3206 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3207 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3208 ; 208  |#else 
                             3209 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3210 ; 210  |#define DebugBuildAssert(x)    
                             3211 ; 211  |#endif
                             3212 ; 212  |
                             3213 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3214 ; 214  |//  #pragma asm
                             3215 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3216 ; 216  |//  #pragma endasm
                             3217 ; 217  |
                             3218 ; 218  |
                             3219 ; 219  |#ifdef COLOR_262K
                             3220 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3221 ; 221  |#elif defined(COLOR_65K)
                             3222 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3223 ; 223  |#else
                             3224 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3225 ; 225  |#endif
                             3226 ; 226  |    
                             3227 ; 227  |#endif // #ifndef _TYPES_H
                             3228 
                             3230 
                             3231 ; 8    |
                             3232 ; 9    |
                             3233 ; 10   |
                             3234 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3235 ; 12   |
                             3236 ; 13   |//   SYSTEM STMP Registers 
                             3237 ; 14   |//      Last Edited 2.19.2003 M. May
                             3238 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3239 ; 16   |
                             3240 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             3241 ; 18   |
                             3242 ; 19   |
                             3243 ; 20   |
                             3244 ; 21   |
                             3245 ; 22   |
                             3246 ; 23   |
                             3247 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3248 ; 25   |
                             3249 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             3250 ; 27   |
                             3251 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3252 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             3253 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             3254 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             3255 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             3256 ; 33   |
                             3257 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             3258 ; 35   |
                             3259 ; 36   |
                             3260 ; 37   |
                             3261 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             3262 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             3263 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             3264 ; 41   |
                             3265 ; 42   |
                             3266 ; 43   |
                             3267 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             3268 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             3269 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             3270 ; 47   |
                             3271 ; 48   |
                             3272 ; 49   |
                             3273 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             3274 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             3275 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             3276 ; 53   |
                             3277 ; 54   |
                             3278 ; 55   |
                             3279 ; 56   |
                             3280 ; 57   |
                             3281 ; 58   |typedef union               
                             3282 ; 59   |{
                             3283 ; 60   |    struct {
                             3284 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             3285 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             3286 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             3287 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             3288 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             3289 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             3290 ; 67   |    } B;
                             3291 ; 68   |    unsigned int I;
                             3292 ; 69   |} dcdc1_ctrl0_type;
                             3293 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             3294 ; 71   |
                             3295 ; 72   |
                             3296 ; 73   |
                             3297 ; 74   |
                             3298 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             3299 ; 76   |
                             3300 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             3301 ; 78   |
                             3302 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             3303 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             3304 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             3305 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             3306 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             3307 ; 84   |
                             3308 ; 85   |
                             3309 ; 86   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3310 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             3311 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             3312 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             3313 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             3314 ; 91   |
                             3315 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             3316 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             3317 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             3318 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             3319 ; 96   |
                             3320 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             3321 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             3322 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             3323 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             3324 ; 101  |
                             3325 ; 102  |
                             3326 ; 103  |typedef union               
                             3327 ; 104  |{
                             3328 ; 105  |    struct {
                             3329 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             3330 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             3331 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3332 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             3333 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3334 ; 111  |    } B;
                             3335 ; 112  |    unsigned int I;
                             3336 ; 113  |} dcdc1_ctrl1_type;
                             3337 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             3338 ; 115  |
                             3339 ; 116  |
                             3340 ; 117  |
                             3341 ; 118  |
                             3342 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             3343 ; 120  |
                             3344 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             3345 ; 122  |
                             3346 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             3347 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             3348 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             3349 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             3350 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             3351 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             3352 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             3353 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             3354 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             3355 ; 132  |
                             3356 ; 133  |
                             3357 ; 134  |
                             3358 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             3359 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             3360 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             3361 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             3362 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             3363 ; 140  |
                             3364 ; 141  |
                             3365 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3366 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             3367 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             3368 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             3369 ; 146  |
                             3370 ; 147  |
                             3371 ; 148  |
                             3372 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             3373 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             3374 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             3375 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             3376 ; 153  |
                             3377 ; 154  |
                             3378 ; 155  |typedef union               
                             3379 ; 156  |{
                             3380 ; 157  |    struct {
                             3381 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             3382 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             3383 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             3384 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             3385 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             3386 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             3387 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             3388 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             3389 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             3390 ; 167  |    } B;
                             3391 ; 168  |    unsigned int I;
                             3392 ; 169  |} dcdc_vddio_type;
                             3393 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             3394 ; 171  |
                             3395 ; 172  |
                             3396 ; 173  |
                             3397 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             3398 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             3399 ; 176  |
                             3400 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             3401 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             3402 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             3403 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             3404 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             3405 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             3406 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             3407 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             3408 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             3409 ; 186  |
                             3410 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             3411 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             3412 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             3413 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             3414 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             3415 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             3416 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3417 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             3418 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             3419 ; 196  |
                             3420 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3421 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             3422 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             3423 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             3424 ; 201  |
                             3425 ; 202  |typedef union               
                             3426 ; 203  |{
                             3427 ; 204  |    struct {
                             3428 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             3429 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             3430 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             3431 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             3432 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             3433 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             3434 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             3435 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             3436 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             3437 ; 214  |    } B;
                             3438 ; 215  |   unsigned int I;
                             3439 ; 216  |        unsigned U;
                             3440 ; 217  |} dcdc_vddd_type;
                             3441 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             3442 ; 219  |
                             3443 ; 220  |
                             3444 ; 221  |
                             3445 ; 222  |
                             3446 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             3447 ; 224  |
                             3448 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             3449 ; 226  |
                             3450 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             3451 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             3452 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             3453 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             3454 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             3455 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             3456 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             3457 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             3458 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             3459 ; 236  |
                             3460 ; 237  |
                             3461 ; 238  |
                             3462 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             3463 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             3464 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             3465 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             3466 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             3467 ; 244  |
                             3468 ; 245  |
                             3469 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             3470 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3471 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             3472 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             3473 ; 250  |
                             3474 ; 251  |
                             3475 ; 252  |
                             3476 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3477 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             3478 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             3479 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             3480 ; 257  |
                             3481 ; 258  |
                             3482 ; 259  |typedef union               
                             3483 ; 260  |{
                             3484 ; 261  |    struct {
                             3485 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             3486 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             3487 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             3488 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             3489 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             3490 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             3491 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             3492 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             3493 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             3494 ; 271  |    } B;
                             3495 ; 272  |    unsigned int I;
                             3496 ; 273  |} dcdc_vdda_type;
                             3497 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             3498 ; 275  |
                             3499 ; 276  |
                             3500 ; 277  |
                             3501 ; 278  |
                             3502 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             3503 ; 280  |
                             3504 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             3505 ; 282  |
                             3506 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             3507 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3508 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3509 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3510 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3511 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3512 ; 289  |
                             3513 ; 290  |
                             3514 ; 291  |
                             3515 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3516 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3517 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3518 ; 295  |
                             3519 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             3520 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             3521 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             3522 ; 299  |
                             3523 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3524 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3525 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3526 ; 303  |
                             3527 ; 304  |
                             3528 ; 305  |typedef union               
                             3529 ; 306  |{
                             3530 ; 307  |    struct {
                             3531 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3532 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3533 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3534 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3535 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             3536 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3537 ; 314  |    } B;
                             3538 ; 315  |    unsigned int I;
                             3539 ; 316  |} dcdc2_ctrl0_type; 
                             3540 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             3541 ; 318  |
                             3542 ; 319  |
                             3543 ; 320  |
                             3544 ; 321  |
                             3545 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3546 ; 323  |
                             3547 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3548 ; 325  |
                             3549 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3550 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3551 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3552 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3553 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3554 ; 331  |
                             3555 ; 332  |
                             3556 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3557 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3558 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3559 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3560 ; 337  |
                             3561 ; 338  |
                             3562 ; 339  |
                             3563 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             3564 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             3565 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             3566 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             3567 ; 344  |
                             3568 ; 345  |
                             3569 ; 346  |
                             3570 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3571 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3572 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3573 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3574 ; 351  |
                             3575 ; 352  |
                             3576 ; 353  |typedef union               
                             3577 ; 354  |{
                             3578 ; 355  |    struct {
                             3579 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3580 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3581 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3582 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3583 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3584 ; 361  |    } B;
                             3585 ; 362  |    unsigned int I;
                             3586 ; 363  |} dcdc2_ctrl1_type;
                             3587 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             3588 ; 365  |
                             3589 ; 366  |
                             3590 ; 367  |
                             3591 ; 368  |
                             3592 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3593 ; 370  |
                             3594 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3595 ; 372  |
                             3596 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3597 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3598 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3599 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3600 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3601 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             3602 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3603 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3604 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3605 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3606 ; 383  |
                             3607 ; 384  |
                             3608 ; 385  |
                             3609 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3610 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3611 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3612 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3613 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3614 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3615 ; 392  |
                             3616 ; 393  |
                             3617 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             3618 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             3619 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             3620 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             3621 ; 398  |
                             3622 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             3623 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             3624 ; 401  |
                             3625 ; 402  |
                             3626 ; 403  |
                             3627 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3628 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3629 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3630 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3631 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             3632 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3633 ; 410  |
                             3634 ; 411  |
                             3635 ; 412  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3636 ; 413  |{
                             3637 ; 414  |    struct {
                             3638 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3639 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3640 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3641 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3642 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3643 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3644 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3645 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3646 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3647 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3648 ; 425  |    } B;
                             3649 ; 426  |    unsigned int I;
                             3650 ; 427  |} speed_type;
                             3651 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             3652 ; 429  |
                             3653 ; 430  |
                             3654 ; 431  |
                             3655 ; 432  |
                             3656 ; 433  |
                             3657 ; 434  |
                             3658 ; 435  |
                             3659 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3660 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3661 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3662 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3663 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3664 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3665 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3666 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3667 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3668 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3669 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3670 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3671 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3672 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3673 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             3674 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3675 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3676 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3677 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3678 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3679 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3680 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3681 ; 458  |
                             3682 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3683 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3684 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3685 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3686 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3687 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3688 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3689 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3690 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3691 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3692 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             3693 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3694 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3695 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3696 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3697 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3698 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3699 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3700 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3701 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3702 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3703 ; 480  |
                             3704 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             3705 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3706 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3707 ; 484  |
                             3708 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3709 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3710 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             3711 ; 488  |
                             3712 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             3713 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3714 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3715 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3716 ; 493  |
                             3717 ; 494  |typedef union               
                             3718 ; 495  |{
                             3719 ; 496  |    struct {
                             3720 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3721 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3722 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3723 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3724 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3725 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3726 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             3727 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3728 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3729 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3730 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3731 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3732 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3733 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3734 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3735 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3736 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3737 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3738 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3739 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3740 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3741 ; 518  |    } B;
                             3742 ; 519  |    unsigned int I;
                             3743 ; 520  |} usb_dcdctbr_type;
                             3744 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             3745 ; 522  |
                             3746 ; 523  |
                             3747 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3748 ; 525  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3749 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3750 ; 527  |
                             3751 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3752 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3753 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3754 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3755 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3756 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3757 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3758 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3759 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3760 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3761 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3762 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3763 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3764 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3765 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3766 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3767 ; 544  |
                             3768 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3769 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3770 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3771 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3772 ; 549  |
                             3773 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3774 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3775 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3776 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3777 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3778 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3779 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3780 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3781 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3782 ; 559  |
                             3783 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3784 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             3785 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             3786 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             3787 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3788 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3789 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3790 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3791 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3792 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3793 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3794 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3795 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3796 ; 573  |
                             3797 ; 574  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3798 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             3799 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3800 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3801 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3802 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3803 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             3804 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             3805 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             3806 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             3807 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             3808 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             3809 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             3810 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             3811 ; 588  |
                             3812 ; 589  |typedef union               
                             3813 ; 590  |{
                             3814 ; 591  |    struct {
                             3815 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3816 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3817 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3818 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3819 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3820 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3821 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             3822 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             3823 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3824 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3825 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3826 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3827 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3828 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             3829 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3830 ; 607  |    } B;
                             3831 ; 608  |    unsigned int I;
                             3832 ; 609  |} usb_pwr_charge_type;
                             3833 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             3834 ; 611  |
                             3835 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3836 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3837 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3838 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3839 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3840 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3841 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3842 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3843 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3844 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3845 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3846 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3847 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3848 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3849 ; 626  |
                             3850 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3851 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3852 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3853 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3854 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3855 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3856 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3857 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3858 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3859 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3860 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3861 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3862 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3863 ; 640  |
                             3864 ; 641  |typedef union               
                             3865 ; 642  |{
                             3866 ; 643  |    struct {       
                             3867 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3868 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3869 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3870 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3871 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3872 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3873 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3874 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3875 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3876 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3877 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3878 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             3879 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3880 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3881 ; 658  |    } B;
                             3882 ; 659  |    int I;
                             3883 ; 660  |} usb_dcdcpersist_type;
                             3884 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             3885 ; 662  |
                             3886 ; 663  |
                             3887 ; 664  |
                             3888 ; 665  |#endif
                             3889 ; 666  |
                             3890 ; 667  |
                             3891 ; 668  |
                             3892 
                             3894 
                             3895 ; 21   |#include "regsemc.h"
                             3896 
                             3898 
                             3899 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3900 ; 2    |#define __REGS_EMC_INC 1
                             3901 ; 3    |
                             3902 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3903 ; 5    |//   Module base addresses
                             3904 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3905 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3906 ; 8    |
                             3907 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3908 ; 10   |//  EMC Registers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3909 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3910 ; 12   |
                             3911 ; 13   |
                             3912 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3913 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3914 ; 16   |
                             3915 ; 17   |typedef union               /*Flash Control Register*/
                             3916 ; 18   |{
                             3917 ; 19   |    struct
                             3918 ; 20   |    {
                             3919 ; 21   |    int KICK        :1;
                             3920 ; 22   |    int RW          :1;
                             3921 ; 23   |    int TCIE        :1;
                             3922 ; 24   |    int IRQP        :1;
                             3923 ; 25   |    unsigned MMD    :2;
                             3924 ; 26   |    unsigned NB     :11;
                             3925 ; 27   |    unsigned RSVD   :4;
                             3926 ; 28   |    int SRST        :1;
                             3927 ; 29   |    } B;
                             3928 ; 30   |    int I;
                             3929 ; 31   |} flcr_type;
                             3930 ; 32   |
                             3931 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3932 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3933 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3934 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3935 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3936 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3937 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3938 ; 40   |
                             3939 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3940 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3941 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3942 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3943 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3944 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3945 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3946 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3947 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3948 ; 50   |
                             3949 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3950 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3951 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3952 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3953 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3954 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3955 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3956 ; 58   |
                             3957 ; 59   |
                             3958 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3959 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3960 ; 62   |
                             3961 ; 63   |typedef union           /* Flash Start Address Low*/
                             3962 ; 64   |{
                             3963 ; 65   |    struct
                             3964 ; 66   |    {
                             3965 ; 67   |    unsigned XA     : 24;
                             3966 ; 68   |    } B;
                             3967 ; 69   |    int I;
                             3968 ; 70   |} flsalr_type;
                             3969 ; 71   |
                             3970 ; 72   |#define HW_FLSALR_XA_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3971 ; 73   |
                             3972 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3973 ; 75   |
                             3974 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3975 ; 77   |
                             3976 ; 78   |
                             3977 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3978 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3979 ; 81   |
                             3980 ; 82   |typedef union           /* Flash Start Address High*/
                             3981 ; 83   |{
                             3982 ; 84   |    struct
                             3983 ; 85   |    {
                             3984 ; 86   |    unsigned XA     :8;
                             3985 ; 87   |    unsigned DA     :16;
                             3986 ; 88   |    } B;
                             3987 ; 89   |    int I;
                             3988 ; 90   |} flsahr_type;
                             3989 ; 91   |
                             3990 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3991 ; 93   |
                             3992 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3993 ; 95   |
                             3994 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3995 ; 97   |
                             3996 ; 98   |
                             3997 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3998 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3999 ; 101  |
                             4000 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             4001 ; 103  |{
                             4002 ; 104  |    struct
                             4003 ; 105  |    {
                             4004 ; 106  |        int WP          :1;
                             4005 ; 107  |        int CDP         :1;
                             4006 ; 108  |        unsigned SM     :2;
                             4007 ; 109  |        int XATTR       :1;
                             4008 ; 110  |        int CRST        :1;
                             4009 ; 111  |        int XWT         :1;
                             4010 ; 112  |        int RI          :1;
                             4011 ; 113  |        int IFCE        :1;
                             4012 ; 114  |        int ISCE        :1;
                             4013 ; 115  |        int INCE        :1;
                             4014 ; 116  |        int IFCS        :1;
                             4015 ; 117  |        int ISCS        :1;
                             4016 ; 118  |        int INCS        :1;
                             4017 ; 119  |        unsigned CFAI   :2;
                             4018 ; 120  |        int XDDI        :1;
                             4019 ; 121  |        unsigned CS     :2;
                             4020 ; 122  |        int CRE         :1;
                             4021 ; 123  |        unsigned VS     :2;
                             4022 ; 124  |        int DASP        :1;
                             4023 ; 125  |        int MODE16      :1; 
                             4024 ; 126  |    } B;
                             4025 ; 127  |    int I;
                             4026 ; 128  |} flcfcr_type;
                             4027 ; 129  |
                             4028 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             4029 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             4030 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             4031 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             4032 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4033 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             4034 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             4035 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             4036 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             4037 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             4038 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             4039 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             4040 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             4041 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             4042 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             4043 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             4044 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             4045 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             4046 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             4047 ; 149  |
                             4048 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             4049 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             4050 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             4051 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             4052 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             4053 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             4054 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             4055 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             4056 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             4057 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             4058 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             4059 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             4060 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             4061 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             4062 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             4063 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             4064 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             4065 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             4066 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             4067 ; 169  |
                             4068 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             4069 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             4070 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             4071 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             4072 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             4073 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             4074 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             4075 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             4076 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             4077 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             4078 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             4079 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             4080 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             4081 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             4082 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             4083 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             4084 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             4085 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             4086 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             4087 ; 189  |
                             4088 ; 190  |
                             4089 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             4090 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             4091 ; 193  |
                             4092 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             4093 ; 195  |{
                             4094 ; 196  |    struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4095 ; 197  |    {
                             4096 ; 198  |        unsigned TRWSU  :5;
                             4097 ; 199  |        unsigned TRPW   :7;
                             4098 ; 200  |        unsigned TWPW   :7;
                             4099 ; 201  |        unsigned TRWH   :5;
                             4100 ; 202  |    } B;
                             4101 ; 203  |    int I;
                             4102 ; 204  |} flcftmr1r_type;
                             4103 ; 205  |
                             4104 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             4105 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             4106 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             4107 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             4108 ; 210  |
                             4109 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             4110 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             4111 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             4112 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             4113 ; 215  |
                             4114 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             4115 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             4116 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             4117 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             4118 ; 220  |
                             4119 ; 221  |
                             4120 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             4121 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             4122 ; 224  |
                             4123 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             4124 ; 226  |{
                             4125 ; 227  |    struct
                             4126 ; 228  |    {
                             4127 ; 229  |        unsigned TWW    :4;
                             4128 ; 230  |        unsigned TWTO   :10;
                             4129 ; 231  |        unsigned THW    :5; 
                             4130 ; 232  |        unsigned TRAQ   :5;
                             4131 ; 233  |    } B;
                             4132 ; 234  |    int I;
                             4133 ; 235  |} flcftmr2r_type;
                             4134 ; 236  |
                             4135 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             4136 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             4137 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             4138 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             4139 ; 241  |
                             4140 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             4141 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             4142 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             4143 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             4144 ; 246  |
                             4145 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             4146 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             4147 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             4148 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             4149 ; 251  |
                             4150 ; 252  |
                             4151 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             4152 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             4153 ; 255  |
                             4154 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             4155 ; 257  |{
                             4156 ; 258  |    struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4157 ; 259  |    {
                             4158 ; 260  |        unsigned CS     :2;
                             4159 ; 261  |        int SE          :1;
                             4160 ; 262  |        int WP          :1;
                             4161 ; 263  |        int SIZE        :1;
                             4162 ; 264  |        int ICMD        :8;
                             4163 ; 265  |        int TOIE        :1;
                             4164 ; 266  |        int BPIE        :1;
                             4165 ; 267  |        int TOIRQ       :1;
                             4166 ; 268  |        int BPIRQ       :1;
                             4167 ; 269  |    } B;
                             4168 ; 270  |    int I;
                             4169 ; 271  |} flsmcr_type;
                             4170 ; 272  |
                             4171 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             4172 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             4173 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             4174 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             4175 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             4176 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             4177 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             4178 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             4179 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             4180 ; 282  |
                             4181 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             4182 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             4183 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             4184 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             4185 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             4186 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             4187 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             4188 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             4189 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             4190 ; 292  |
                             4191 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             4192 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             4193 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             4194 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             4195 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             4196 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             4197 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             4198 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             4199 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             4200 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             4201 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             4202 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             4203 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             4204 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             4205 ; 307  |
                             4206 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             4207 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             4208 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             4209 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             4210 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             4211 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             4212 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             4213 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             4214 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             4215 ; 317  |
                             4216 ; 318  |
                             4217 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             4218 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4219 ; 321  |
                             4220 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             4221 ; 323  |{
                             4222 ; 324  |    struct
                             4223 ; 325  |    {
                             4224 ; 326  |        unsigned TRWSU  :5;
                             4225 ; 327  |        unsigned TRPW   :6;
                             4226 ; 328  |        unsigned TWPW   :6;
                             4227 ; 329  |        unsigned TRWH   :5;
                             4228 ; 330  |    } B;
                             4229 ; 331  |    int I;
                             4230 ; 332  |} flsmtmr1r_type;
                             4231 ; 333  |
                             4232 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             4233 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             4234 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             4235 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             4236 ; 338  |
                             4237 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             4238 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             4239 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             4240 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             4241 ; 343  |
                             4242 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             4243 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             4244 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             4245 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             4246 ; 348  |
                             4247 ; 349  |
                             4248 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             4249 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             4250 ; 352  |
                             4251 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             4252 ; 354  |{
                             4253 ; 355  |    struct
                             4254 ; 356  |    {
                             4255 ; 357  |        unsigned TWT    :6;
                             4256 ; 358  |        unsigned TWTO   :18;
                             4257 ; 359  |    } B;
                             4258 ; 360  |    int I;
                             4259 ; 361  |} flsmtmr2r_type;
                             4260 ; 362  |
                             4261 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             4262 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             4263 ; 365  |
                             4264 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             4265 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             4266 ; 368  |
                             4267 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             4268 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             4269 ; 371  |
                             4270 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             4271 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             4272 ; 374  |typedef union 
                             4273 ; 375  |{
                             4274 ; 376  |  struct
                             4275 ; 377  |  {
                             4276 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             4277 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             4278 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4279 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             4280 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             4281 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             4282 ; 384  |    int PAD0          :17;    
                             4283 ; 385  |  } B;
                             4284 ; 386  |  int I;
                             4285 ; 387  |} flcr2_type;
                             4286 ; 388  |
                             4287 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             4288 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             4289 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             4290 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             4291 ; 393  |
                             4292 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             4293 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             4294 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             4295 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             4296 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             4297 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             4298 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             4299 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             4300 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             4301 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             4302 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             4303 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             4304 ; 406  |
                             4305 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             4306 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             4307 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             4308 ; 410  |
                             4309 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             4310 ; 412  |
                             4311 ; 413  |#endif
                             4312 ; 414  |
                             4313 
                             4315 
                             4316 ; 22   |#include "regsgpio.h"
                             4317 
                             4319 
                             4320 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             4321 ; 2    |#define __REGS_GPIO_INC 1
                             4322 ; 3    |
                             4323 ; 4    |#include "types.h"
                             4324 
                             4326 
                             4327 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4328 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4329 ; 3    |//
                             4330 ; 4    |// Filename: types.h
                             4331 ; 5    |// Description: Standard data types
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4332 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4333 ; 7    |
                             4334 ; 8    |#ifndef _TYPES_H
                             4335 ; 9    |#define _TYPES_H
                             4336 ; 10   |
                             4337 ; 11   |// TODO:  move this outta here!
                             4338 ; 12   |#if !defined(NOERROR)
                             4339 ; 13   |#define NOERROR 0
                             4340 ; 14   |#define SUCCESS 0
                             4341 ; 15   |#endif 
                             4342 ; 16   |#if !defined(SUCCESS)
                             4343 ; 17   |#define SUCCESS  0
                             4344 ; 18   |#endif
                             4345 ; 19   |#if !defined(ERROR)
                             4346 ; 20   |#define ERROR   -1
                             4347 ; 21   |#endif
                             4348 ; 22   |#if !defined(FALSE)
                             4349 ; 23   |#define FALSE 0
                             4350 ; 24   |#endif
                             4351 ; 25   |#if !defined(TRUE)
                             4352 ; 26   |#define TRUE  1
                             4353 ; 27   |#endif
                             4354 ; 28   |
                             4355 ; 29   |#if !defined(NULL)
                             4356 ; 30   |#define NULL 0
                             4357 ; 31   |#endif
                             4358 ; 32   |
                             4359 ; 33   |#define MAX_INT     0x7FFFFF
                             4360 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4361 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4362 ; 36   |#define MAX_ULONG   (-1) 
                             4363 ; 37   |
                             4364 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4365 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4366 ; 40   |
                             4367 ; 41   |
                             4368 ; 42   |#define BYTE    unsigned char       // btVarName
                             4369 ; 43   |#define CHAR    signed char         // cVarName
                             4370 ; 44   |#define USHORT  unsigned short      // usVarName
                             4371 ; 45   |#define SHORT   unsigned short      // sVarName
                             4372 ; 46   |#define WORD    unsigned int        // wVarName
                             4373 ; 47   |#define INT     signed int          // iVarName
                             4374 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4375 ; 49   |#define LONG    signed long         // lVarName
                             4376 ; 50   |#define BOOL    unsigned int        // bVarName
                             4377 ; 51   |#define FRACT   _fract              // frVarName
                             4378 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4379 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4380 ; 54   |#define FLOAT   float               // fVarName
                             4381 ; 55   |#define DBL     double              // dVarName
                             4382 ; 56   |#define ENUM    enum                // eVarName
                             4383 ; 57   |#define CMX     _complex            // cmxVarName
                             4384 ; 58   |typedef WORD UCS3;                   // 
                             4385 ; 59   |
                             4386 ; 60   |#define UINT16  unsigned short
                             4387 ; 61   |#define UINT8   unsigned char   
                             4388 ; 62   |#define UINT32  unsigned long
                             4389 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4390 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4391 ; 65   |#define WCHAR   UINT16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4392 ; 66   |
                             4393 ; 67   |//UINT128 is 16 bytes or 6 words
                             4394 ; 68   |typedef struct UINT128_3500 {   
                             4395 ; 69   |    int val[6];     
                             4396 ; 70   |} UINT128_3500;
                             4397 ; 71   |
                             4398 ; 72   |#define UINT128   UINT128_3500
                             4399 ; 73   |
                             4400 ; 74   |// Little endian word packed byte strings:   
                             4401 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4402 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4403 ; 77   |// Little endian word packed byte strings:   
                             4404 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4405 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4406 ; 80   |
                             4407 ; 81   |// Declare Memory Spaces To Use When Coding
                             4408 ; 82   |// A. Sector Buffers
                             4409 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4410 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4411 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4412 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4413 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4414 ; 88   |// B. Media DDI Memory
                             4415 ; 89   |#define MEDIA_DDI_MEM _Y
                             4416 ; 90   |
                             4417 ; 91   |
                             4418 ; 92   |
                             4419 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4420 ; 94   |// Examples of circular pointers:
                             4421 ; 95   |//    INT CIRC cpiVarName
                             4422 ; 96   |//    DWORD CIRC cpdwVarName
                             4423 ; 97   |
                             4424 ; 98   |#define RETCODE INT                 // rcVarName
                             4425 ; 99   |
                             4426 ; 100  |// generic bitfield structure
                             4427 ; 101  |struct Bitfield {
                             4428 ; 102  |    unsigned int B0  :1;
                             4429 ; 103  |    unsigned int B1  :1;
                             4430 ; 104  |    unsigned int B2  :1;
                             4431 ; 105  |    unsigned int B3  :1;
                             4432 ; 106  |    unsigned int B4  :1;
                             4433 ; 107  |    unsigned int B5  :1;
                             4434 ; 108  |    unsigned int B6  :1;
                             4435 ; 109  |    unsigned int B7  :1;
                             4436 ; 110  |    unsigned int B8  :1;
                             4437 ; 111  |    unsigned int B9  :1;
                             4438 ; 112  |    unsigned int B10 :1;
                             4439 ; 113  |    unsigned int B11 :1;
                             4440 ; 114  |    unsigned int B12 :1;
                             4441 ; 115  |    unsigned int B13 :1;
                             4442 ; 116  |    unsigned int B14 :1;
                             4443 ; 117  |    unsigned int B15 :1;
                             4444 ; 118  |    unsigned int B16 :1;
                             4445 ; 119  |    unsigned int B17 :1;
                             4446 ; 120  |    unsigned int B18 :1;
                             4447 ; 121  |    unsigned int B19 :1;
                             4448 ; 122  |    unsigned int B20 :1;
                             4449 ; 123  |    unsigned int B21 :1;
                             4450 ; 124  |    unsigned int B22 :1;
                             4451 ; 125  |    unsigned int B23 :1;
                             4452 ; 126  |};
                             4453 ; 127  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4454 ; 128  |union BitInt {
                             4455 ; 129  |        struct Bitfield B;
                             4456 ; 130  |        int        I;
                             4457 ; 131  |};
                             4458 ; 132  |
                             4459 ; 133  |#define MAX_MSG_LENGTH 10
                             4460 ; 134  |struct CMessage
                             4461 ; 135  |{
                             4462 ; 136  |        unsigned int m_uLength;
                             4463 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4464 ; 138  |};
                             4465 ; 139  |
                             4466 ; 140  |typedef struct {
                             4467 ; 141  |    WORD m_wLength;
                             4468 ; 142  |    WORD m_wMessage;
                             4469 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4470 ; 144  |} Message;
                             4471 ; 145  |
                             4472 ; 146  |struct MessageQueueDescriptor
                             4473 ; 147  |{
                             4474 ; 148  |        int *m_pBase;
                             4475 ; 149  |        int m_iModulo;
                             4476 ; 150  |        int m_iSize;
                             4477 ; 151  |        int *m_pHead;
                             4478 ; 152  |        int *m_pTail;
                             4479 ; 153  |};
                             4480 ; 154  |
                             4481 ; 155  |struct ModuleEntry
                             4482 ; 156  |{
                             4483 ; 157  |    int m_iSignaledEventMask;
                             4484 ; 158  |    int m_iWaitEventMask;
                             4485 ; 159  |    int m_iResourceOfCode;
                             4486 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4487 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4488 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4489 ; 163  |    int m_uTimeOutHigh;
                             4490 ; 164  |    int m_uTimeOutLow;
                             4491 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4492 ; 166  |};
                             4493 ; 167  |
                             4494 ; 168  |union WaitMask{
                             4495 ; 169  |    struct B{
                             4496 ; 170  |        unsigned int m_bNone     :1;
                             4497 ; 171  |        unsigned int m_bMessage  :1;
                             4498 ; 172  |        unsigned int m_bTimer    :1;
                             4499 ; 173  |        unsigned int m_bButton   :1;
                             4500 ; 174  |    } B;
                             4501 ; 175  |    int I;
                             4502 ; 176  |} ;
                             4503 ; 177  |
                             4504 ; 178  |
                             4505 ; 179  |struct Button {
                             4506 ; 180  |        WORD wButtonEvent;
                             4507 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4508 ; 182  |};
                             4509 ; 183  |
                             4510 ; 184  |struct Message {
                             4511 ; 185  |        WORD wMsgLength;
                             4512 ; 186  |        WORD wMsgCommand;
                             4513 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4514 ; 188  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4515 ; 189  |
                             4516 ; 190  |union EventTypes {
                             4517 ; 191  |        struct CMessage msg;
                             4518 ; 192  |        struct Button Button ;
                             4519 ; 193  |        struct Message Message;
                             4520 ; 194  |};
                             4521 ; 195  |
                             4522 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4523 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4524 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4525 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4526 ; 200  |
                             4527 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4528 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4529 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4530 ; 204  |
                             4531 ; 205  |#if DEBUG
                             4532 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4533 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4534 ; 208  |#else 
                             4535 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4536 ; 210  |#define DebugBuildAssert(x)    
                             4537 ; 211  |#endif
                             4538 ; 212  |
                             4539 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4540 ; 214  |//  #pragma asm
                             4541 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4542 ; 216  |//  #pragma endasm
                             4543 ; 217  |
                             4544 ; 218  |
                             4545 ; 219  |#ifdef COLOR_262K
                             4546 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4547 ; 221  |#elif defined(COLOR_65K)
                             4548 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4549 ; 223  |#else
                             4550 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4551 ; 225  |#endif
                             4552 ; 226  |    
                             4553 ; 227  |#endif // #ifndef _TYPES_H
                             4554 
                             4556 
                             4557 ; 5    |
                             4558 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4559 ; 7    |//  Interrupt Collector Registers
                             4560 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4561 ; 9    |
                             4562 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4563 ; 11   |
                             4564 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4565 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4566 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4567 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4568 ; 16   |
                             4569 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4570 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4571 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4572 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4573 ; 21   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4574 ; 22   |#define HW_GPB_GPENR 0
                             4575 ; 23   |#define HW_GPB_GPDOR 1
                             4576 ; 24   |#define HW_GPB_GPDIR 2
                             4577 ; 25   |#define HW_GPB_GPDOER 3
                             4578 ; 26   |#define HW_GPB_GPIPENR 4
                             4579 ; 27   |#define HW_GPB_GPIENR 5
                             4580 ; 28   |#define HW_GPB_GPILVLR 6
                             4581 ; 29   |#define HW_GPB_GPIPOLR 7
                             4582 ; 30   |#define HW_GPB_GPISTATR 8
                             4583 ; 31   |#define HW_GPB_GPPWR 9
                             4584 ; 32   |#define HW_GPB_GP8MA 10
                             4585 ; 33   |
                             4586 ; 34   |
                             4587 ; 35   |
                             4588 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4589 ; 37   |//  GPIO Register Bit Positions
                             4590 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4591 ; 39   |{
                             4592 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4593 ; 41   |    unsigned int I;
                             4594 ; 42   |    unsigned int U;
                             4595 ; 43   |} gpr_type;
                             4596 ; 44   |
                             4597 ; 45   |#define HW_GP_B0_BITPOS 0
                             4598 ; 46   |#define HW_GP_B1_BITPOS 1
                             4599 ; 47   |#define HW_GP_B2_BITPOS 2
                             4600 ; 48   |#define HW_GP_B3_BITPOS 3
                             4601 ; 49   |#define HW_GP_B4_BITPOS 4
                             4602 ; 50   |#define HW_GP_B5_BITPOS 5
                             4603 ; 51   |#define HW_GP_B6_BITPOS 6
                             4604 ; 52   |#define HW_GP_B7_BITPOS 7
                             4605 ; 53   |#define HW_GP_B8_BITPOS 8
                             4606 ; 54   |#define HW_GP_B9_BITPOS 9
                             4607 ; 55   |#define HW_GP_B10_BITPOS 10
                             4608 ; 56   |#define HW_GP_B11_BITPOS 11
                             4609 ; 57   |#define HW_GP_B12_BITPOS 12
                             4610 ; 58   |#define HW_GP_B13_BITPOS 13
                             4611 ; 59   |#define HW_GP_B14_BITPOS 14
                             4612 ; 60   |#define HW_GP_B15_BITPOS 15
                             4613 ; 61   |#define HW_GP_B16_BITPOS 16
                             4614 ; 62   |#define HW_GP_B17_BITPOS 17
                             4615 ; 63   |#define HW_GP_B18_BITPOS 18
                             4616 ; 64   |#define HW_GP_B19_BITPOS 19
                             4617 ; 65   |#define HW_GP_B20_BITPOS 20
                             4618 ; 66   |#define HW_GP_B21_BITPOS 21
                             4619 ; 67   |#define HW_GP_B22_BITPOS 22
                             4620 ; 68   |#define HW_GP_B23_BITPOS 23
                             4621 ; 69   |
                             4622 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4623 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4624 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4625 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4626 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4627 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4628 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4629 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4630 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4631 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4632 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4633 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4634 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4635 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4636 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4637 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4638 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4639 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4640 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4641 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4642 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4643 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4644 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4645 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4646 ; 94   |
                             4647 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4648 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4649 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4650 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4651 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4652 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4653 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4654 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4655 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4656 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4657 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4658 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4659 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4660 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4661 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4662 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4663 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4664 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4665 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4666 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4667 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4668 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4669 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4670 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4671 ; 119  |
                             4672 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4673 ; 121  |//  GPIO 8mA Register Bit Positions
                             4674 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4675 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4676 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4677 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4678 ; 126  |
                             4679 ; 127  |
                             4680 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4681 ; 129  |//  Logical GPIO numbers
                             4682 ; 130  |#define HW_GPIO_000 0
                             4683 ; 131  |#define HW_GPIO_001 1
                             4684 ; 132  |#define HW_GPIO_002 2
                             4685 ; 133  |#define HW_GPIO_003 3
                             4686 ; 134  |#define HW_GPIO_004 4
                             4687 ; 135  |#define HW_GPIO_005 5
                             4688 ; 136  |#define HW_GPIO_006 6
                             4689 ; 137  |#define HW_GPIO_007 7
                             4690 ; 138  |#define HW_GPIO_008 8
                             4691 ; 139  |#define HW_GPIO_009 9
                             4692 ; 140  |#define HW_GPIO_010 10
                             4693 ; 141  |#define HW_GPIO_011 11
                             4694 ; 142  |#define HW_GPIO_012 12
                             4695 ; 143  |#define HW_GPIO_013 13
                             4696 ; 144  |#define HW_GPIO_014 14
                             4697 ; 145  |#define HW_GPIO_015 15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4698 ; 146  |#define HW_GPIO_016 16
                             4699 ; 147  |#define HW_GPIO_017 17
                             4700 ; 148  |#define HW_GPIO_018 18
                             4701 ; 149  |#define HW_GPIO_019 19
                             4702 ; 150  |#define HW_GPIO_020 20
                             4703 ; 151  |#define HW_GPIO_021 21
                             4704 ; 152  |#define HW_GPIO_022 22
                             4705 ; 153  |#define HW_GPIO_023 23
                             4706 ; 154  |#define HW_GPIO_024 24
                             4707 ; 155  |#define HW_GPIO_025 25
                             4708 ; 156  |#define HW_GPIO_026 26
                             4709 ; 157  |#define HW_GPIO_027 27
                             4710 ; 158  |#define HW_GPIO_028 28
                             4711 ; 159  |#define HW_GPIO_029 29
                             4712 ; 160  |#define HW_GPIO_030 30
                             4713 ; 161  |#define HW_GPIO_031 31
                             4714 ; 162  |#define HW_GPIO_032 32
                             4715 ; 163  |#define HW_GPIO_033 33
                             4716 ; 164  |#define HW_GPIO_034 34
                             4717 ; 165  |#define HW_GPIO_035 35
                             4718 ; 166  |#define HW_GPIO_036 36
                             4719 ; 167  |#define HW_GPIO_037 37
                             4720 ; 168  |#define HW_GPIO_038 38
                             4721 ; 169  |#define HW_GPIO_039 39
                             4722 ; 170  |#define HW_GPIO_040 40
                             4723 ; 171  |#define HW_GPIO_041 41
                             4724 ; 172  |#define HW_GPIO_042 42
                             4725 ; 173  |#define HW_GPIO_043 43
                             4726 ; 174  |#define HW_GPIO_044 44
                             4727 ; 175  |#define HW_GPIO_045 45
                             4728 ; 176  |#define HW_GPIO_046 46
                             4729 ; 177  |#define HW_GPIO_047 47
                             4730 ; 178  |#define HW_GPIO_048 48
                             4731 ; 179  |#define HW_GPIO_049 49
                             4732 ; 180  |#define HW_GPIO_050 50
                             4733 ; 181  |#define HW_GPIO_051 51
                             4734 ; 182  |#define HW_GPIO_052 52
                             4735 ; 183  |#define HW_GPIO_053 53
                             4736 ; 184  |#define HW_GPIO_054 54
                             4737 ; 185  |#define HW_GPIO_055 55
                             4738 ; 186  |#define HW_GPIO_056 56
                             4739 ; 187  |#define HW_GPIO_057 57
                             4740 ; 188  |#define HW_GPIO_058 58
                             4741 ; 189  |#define HW_GPIO_059 59
                             4742 ; 190  |#define HW_GPIO_060 60
                             4743 ; 191  |#define HW_GPIO_061 61
                             4744 ; 192  |#define HW_GPIO_062 62
                             4745 ; 193  |#define HW_GPIO_063 63
                             4746 ; 194  |#define HW_GPIO_064 64
                             4747 ; 195  |#define HW_GPIO_065 65
                             4748 ; 196  |#define HW_GPIO_066 66
                             4749 ; 197  |#define HW_GPIO_067 67
                             4750 ; 198  |#define HW_GPIO_068 68
                             4751 ; 199  |#define HW_GPIO_069 69
                             4752 ; 200  |#define HW_GPIO_070 70
                             4753 ; 201  |#define HW_GPIO_071 71
                             4754 ; 202  |#define HW_GPIO_072 72
                             4755 ; 203  |#define HW_GPIO_073 73
                             4756 ; 204  |#define HW_GPIO_074 74
                             4757 ; 205  |#define HW_GPIO_075 75
                             4758 ; 206  |#define HW_GPIO_076 76
                             4759 ; 207  |#define HW_GPIO_077 77
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4760 ; 208  |#define HW_GPIO_078 78
                             4761 ; 209  |#define HW_GPIO_079 79
                             4762 ; 210  |#define HW_GPIO_080 80
                             4763 ; 211  |#define HW_GPIO_081 81
                             4764 ; 212  |#define HW_GPIO_082 82
                             4765 ; 213  |#define HW_GPIO_083 83
                             4766 ; 214  |#define HW_GPIO_084 84
                             4767 ; 215  |#define HW_GPIO_085 85
                             4768 ; 216  |#define HW_GPIO_086 86
                             4769 ; 217  |#define HW_GPIO_087 87
                             4770 ; 218  |#define HW_GPIO_088 88
                             4771 ; 219  |#define HW_GPIO_089 89
                             4772 ; 220  |#define HW_GPIO_090 90
                             4773 ; 221  |#define HW_GPIO_091 91
                             4774 ; 222  |#define HW_GPIO_092 92
                             4775 ; 223  |#define HW_GPIO_093 93
                             4776 ; 224  |#define HW_GPIO_094 94
                             4777 ; 225  |#define HW_GPIO_095 95
                             4778 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4779 ; 227  |
                             4780 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4781 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4782 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4783 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4784 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4785 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             4786 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4787 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4788 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             4789 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4790 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4791 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             4792 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4793 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4794 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4795 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4796 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4797 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4798 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             4799 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4800 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4801 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4802 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4803 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4804 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4805 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4806 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4807 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4808 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4809 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4810 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4811 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4812 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4813 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4814 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4815 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4816 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4817 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4818 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4819 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4820 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4821 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4822 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4823 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4824 ; 272  |
                             4825 ; 273  |#endif
                             4826 ; 274  |
                             4827 
                             4829 
                             4830 ; 23   |#include "regsi2c.h"
                             4831 
                             4833 
                             4834 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4835 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4836 ; 3    |// Filename: regsI2C.inc
                             4837 ; 4    |// Description: Register definitions for GPFLASH interface
                             4838 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4839 ; 6    |// The following naming conventions are followed in this file.
                             4840 ; 7    |// All registers are named using the format...
                             4841 ; 8    |//     HW_<module>_<regname>
                             4842 ; 9    |// where <module> is the module name which can be any of the following...
                             4843 ; 10   |//     USB20
                             4844 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4845 ; 12   |// module name includes a number starting from 0 for the first instance of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4846 ; 13   |// that module)
                             4847 ; 14   |// <regname> is the specific register within that module
                             4848 ; 15   |// We also define the following...
                             4849 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4850 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4851 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4852 ; 19   |// which does something else, and
                             4853 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4854 ; 21   |// which does something else.
                             4855 ; 22   |// Other rules
                             4856 ; 23   |//     All caps
                             4857 ; 24   |//     Numeric identifiers start at 0
                             4858 ; 25   |#if !(defined(regsi2cinc))
                             4859 ; 26   |#define regsi2cinc 1
                             4860 ; 27   |
                             4861 ; 28   |#include "types.h"
                             4862 
                             4864 
                             4865 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4866 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4867 ; 3    |//
                             4868 ; 4    |// Filename: types.h
                             4869 ; 5    |// Description: Standard data types
                             4870 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4871 ; 7    |
                             4872 ; 8    |#ifndef _TYPES_H
                             4873 ; 9    |#define _TYPES_H
                             4874 ; 10   |
                             4875 ; 11   |// TODO:  move this outta here!
                             4876 ; 12   |#if !defined(NOERROR)
                             4877 ; 13   |#define NOERROR 0
                             4878 ; 14   |#define SUCCESS 0
                             4879 ; 15   |#endif 
                             4880 ; 16   |#if !defined(SUCCESS)
                             4881 ; 17   |#define SUCCESS  0
                             4882 ; 18   |#endif
                             4883 ; 19   |#if !defined(ERROR)
                             4884 ; 20   |#define ERROR   -1
                             4885 ; 21   |#endif
                             4886 ; 22   |#if !defined(FALSE)
                             4887 ; 23   |#define FALSE 0
                             4888 ; 24   |#endif
                             4889 ; 25   |#if !defined(TRUE)
                             4890 ; 26   |#define TRUE  1
                             4891 ; 27   |#endif
                             4892 ; 28   |
                             4893 ; 29   |#if !defined(NULL)
                             4894 ; 30   |#define NULL 0
                             4895 ; 31   |#endif
                             4896 ; 32   |
                             4897 ; 33   |#define MAX_INT     0x7FFFFF
                             4898 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4899 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4900 ; 36   |#define MAX_ULONG   (-1) 
                             4901 ; 37   |
                             4902 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4903 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4904 ; 40   |
                             4905 ; 41   |
                             4906 ; 42   |#define BYTE    unsigned char       // btVarName
                             4907 ; 43   |#define CHAR    signed char         // cVarName
                             4908 ; 44   |#define USHORT  unsigned short      // usVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4909 ; 45   |#define SHORT   unsigned short      // sVarName
                             4910 ; 46   |#define WORD    unsigned int        // wVarName
                             4911 ; 47   |#define INT     signed int          // iVarName
                             4912 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4913 ; 49   |#define LONG    signed long         // lVarName
                             4914 ; 50   |#define BOOL    unsigned int        // bVarName
                             4915 ; 51   |#define FRACT   _fract              // frVarName
                             4916 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4917 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4918 ; 54   |#define FLOAT   float               // fVarName
                             4919 ; 55   |#define DBL     double              // dVarName
                             4920 ; 56   |#define ENUM    enum                // eVarName
                             4921 ; 57   |#define CMX     _complex            // cmxVarName
                             4922 ; 58   |typedef WORD UCS3;                   // 
                             4923 ; 59   |
                             4924 ; 60   |#define UINT16  unsigned short
                             4925 ; 61   |#define UINT8   unsigned char   
                             4926 ; 62   |#define UINT32  unsigned long
                             4927 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4928 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4929 ; 65   |#define WCHAR   UINT16
                             4930 ; 66   |
                             4931 ; 67   |//UINT128 is 16 bytes or 6 words
                             4932 ; 68   |typedef struct UINT128_3500 {   
                             4933 ; 69   |    int val[6];     
                             4934 ; 70   |} UINT128_3500;
                             4935 ; 71   |
                             4936 ; 72   |#define UINT128   UINT128_3500
                             4937 ; 73   |
                             4938 ; 74   |// Little endian word packed byte strings:   
                             4939 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4940 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4941 ; 77   |// Little endian word packed byte strings:   
                             4942 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4943 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4944 ; 80   |
                             4945 ; 81   |// Declare Memory Spaces To Use When Coding
                             4946 ; 82   |// A. Sector Buffers
                             4947 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4948 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4949 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4950 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4951 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4952 ; 88   |// B. Media DDI Memory
                             4953 ; 89   |#define MEDIA_DDI_MEM _Y
                             4954 ; 90   |
                             4955 ; 91   |
                             4956 ; 92   |
                             4957 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4958 ; 94   |// Examples of circular pointers:
                             4959 ; 95   |//    INT CIRC cpiVarName
                             4960 ; 96   |//    DWORD CIRC cpdwVarName
                             4961 ; 97   |
                             4962 ; 98   |#define RETCODE INT                 // rcVarName
                             4963 ; 99   |
                             4964 ; 100  |// generic bitfield structure
                             4965 ; 101  |struct Bitfield {
                             4966 ; 102  |    unsigned int B0  :1;
                             4967 ; 103  |    unsigned int B1  :1;
                             4968 ; 104  |    unsigned int B2  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4969 ; 105  |    unsigned int B3  :1;
                             4970 ; 106  |    unsigned int B4  :1;
                             4971 ; 107  |    unsigned int B5  :1;
                             4972 ; 108  |    unsigned int B6  :1;
                             4973 ; 109  |    unsigned int B7  :1;
                             4974 ; 110  |    unsigned int B8  :1;
                             4975 ; 111  |    unsigned int B9  :1;
                             4976 ; 112  |    unsigned int B10 :1;
                             4977 ; 113  |    unsigned int B11 :1;
                             4978 ; 114  |    unsigned int B12 :1;
                             4979 ; 115  |    unsigned int B13 :1;
                             4980 ; 116  |    unsigned int B14 :1;
                             4981 ; 117  |    unsigned int B15 :1;
                             4982 ; 118  |    unsigned int B16 :1;
                             4983 ; 119  |    unsigned int B17 :1;
                             4984 ; 120  |    unsigned int B18 :1;
                             4985 ; 121  |    unsigned int B19 :1;
                             4986 ; 122  |    unsigned int B20 :1;
                             4987 ; 123  |    unsigned int B21 :1;
                             4988 ; 124  |    unsigned int B22 :1;
                             4989 ; 125  |    unsigned int B23 :1;
                             4990 ; 126  |};
                             4991 ; 127  |
                             4992 ; 128  |union BitInt {
                             4993 ; 129  |        struct Bitfield B;
                             4994 ; 130  |        int        I;
                             4995 ; 131  |};
                             4996 ; 132  |
                             4997 ; 133  |#define MAX_MSG_LENGTH 10
                             4998 ; 134  |struct CMessage
                             4999 ; 135  |{
                             5000 ; 136  |        unsigned int m_uLength;
                             5001 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5002 ; 138  |};
                             5003 ; 139  |
                             5004 ; 140  |typedef struct {
                             5005 ; 141  |    WORD m_wLength;
                             5006 ; 142  |    WORD m_wMessage;
                             5007 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5008 ; 144  |} Message;
                             5009 ; 145  |
                             5010 ; 146  |struct MessageQueueDescriptor
                             5011 ; 147  |{
                             5012 ; 148  |        int *m_pBase;
                             5013 ; 149  |        int m_iModulo;
                             5014 ; 150  |        int m_iSize;
                             5015 ; 151  |        int *m_pHead;
                             5016 ; 152  |        int *m_pTail;
                             5017 ; 153  |};
                             5018 ; 154  |
                             5019 ; 155  |struct ModuleEntry
                             5020 ; 156  |{
                             5021 ; 157  |    int m_iSignaledEventMask;
                             5022 ; 158  |    int m_iWaitEventMask;
                             5023 ; 159  |    int m_iResourceOfCode;
                             5024 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5025 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5026 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5027 ; 163  |    int m_uTimeOutHigh;
                             5028 ; 164  |    int m_uTimeOutLow;
                             5029 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5030 ; 166  |};
                             5031 ; 167  |
                             5032 ; 168  |union WaitMask{
                             5033 ; 169  |    struct B{
                             5034 ; 170  |        unsigned int m_bNone     :1;
                             5035 ; 171  |        unsigned int m_bMessage  :1;
                             5036 ; 172  |        unsigned int m_bTimer    :1;
                             5037 ; 173  |        unsigned int m_bButton   :1;
                             5038 ; 174  |    } B;
                             5039 ; 175  |    int I;
                             5040 ; 176  |} ;
                             5041 ; 177  |
                             5042 ; 178  |
                             5043 ; 179  |struct Button {
                             5044 ; 180  |        WORD wButtonEvent;
                             5045 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5046 ; 182  |};
                             5047 ; 183  |
                             5048 ; 184  |struct Message {
                             5049 ; 185  |        WORD wMsgLength;
                             5050 ; 186  |        WORD wMsgCommand;
                             5051 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5052 ; 188  |};
                             5053 ; 189  |
                             5054 ; 190  |union EventTypes {
                             5055 ; 191  |        struct CMessage msg;
                             5056 ; 192  |        struct Button Button ;
                             5057 ; 193  |        struct Message Message;
                             5058 ; 194  |};
                             5059 ; 195  |
                             5060 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5061 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5062 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5063 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5064 ; 200  |
                             5065 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5066 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5067 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5068 ; 204  |
                             5069 ; 205  |#if DEBUG
                             5070 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5071 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5072 ; 208  |#else 
                             5073 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5074 ; 210  |#define DebugBuildAssert(x)    
                             5075 ; 211  |#endif
                             5076 ; 212  |
                             5077 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5078 ; 214  |//  #pragma asm
                             5079 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5080 ; 216  |//  #pragma endasm
                             5081 ; 217  |
                             5082 ; 218  |
                             5083 ; 219  |#ifdef COLOR_262K
                             5084 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5085 ; 221  |#elif defined(COLOR_65K)
                             5086 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5087 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5088 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5089 ; 225  |#endif
                             5090 ; 226  |    
                             5091 ; 227  |#endif // #ifndef _TYPES_H
                             5092 
                             5094 
                             5095 ; 29   |
                             5096 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             5097 ; 31   |////   I2C STMP Registers
                             5098 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             5099 ; 33   |
                             5100 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             5101 ; 35   |
                             5102 ; 36   |
                             5103 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             5104 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             5105 ; 39   |
                             5106 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             5107 ; 41   |
                             5108 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             5109 ; 43   |
                             5110 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             5111 ; 45   |
                             5112 ; 46   |typedef union               /* I2C Clock Divider Register */
                             5113 ; 47   |{
                             5114 ; 48   |    struct {
                             5115 ; 49   |        int                :1; 
                             5116 ; 50   |        unsigned FACT      :8;
                             5117 ; 51   |    } B;
                             5118 ; 52   |    int I;
                             5119 ; 53   |    unsigned U;
                             5120 ; 54   |} i2cdivr_type;
                             5121 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             5122 ; 56   |
                             5123 ; 57   |
                             5124 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             5125 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             5126 ; 60   |
                             5127 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             5128 ; 62   |
                             5129 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             5130 ; 64   |
                             5131 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             5132 ; 66   |
                             5133 ; 67   |typedef union               /* I2C Data Register */
                             5134 ; 68   |{
                             5135 ; 69   |    struct {
                             5136 ; 70   |         unsigned DATA :24; 
                             5137 ; 71   |    } B;
                             5138 ; 72   |    int I;
                             5139 ; 73   |    unsigned U;
                             5140 ; 74   |} i2cdatr_type;
                             5141 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                             5142 ; 76   |
                             5143 ; 77   |
                             5144 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             5145 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             5146 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             5147 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5148 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             5149 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             5150 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             5151 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             5152 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             5153 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             5154 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             5155 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             5156 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             5157 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             5158 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             5159 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             5160 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             5161 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             5162 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             5163 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             5164 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             5165 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             5166 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             5167 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             5168 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             5169 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             5170 ; 104  |
                             5171 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             5172 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             5173 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             5174 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             5175 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             5176 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             5177 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             5178 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             5179 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             5180 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             5181 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             5182 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             5183 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             5184 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             5185 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             5186 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             5187 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             5188 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             5189 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             5190 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             5191 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             5192 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             5193 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             5194 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             5195 ; 129  |
                             5196 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             5197 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             5198 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             5199 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             5200 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             5201 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             5202 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             5203 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             5204 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             5205 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             5206 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             5207 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             5208 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             5209 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5210 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             5211 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             5212 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             5213 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             5214 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             5215 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             5216 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             5217 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             5218 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             5219 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             5220 ; 154  |
                             5221 ; 155  |typedef union               /* I2C Control Register         */
                             5222 ; 156  |{
                             5223 ; 157  |    struct {
                             5224 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             5225 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             5226 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             5227 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             5228 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             5229 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             5230 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             5231 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             5232 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             5233 ; 167  |       unsigned WL     :2; /* Word Length              */
                             5234 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             5235 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             5236 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             5237 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             5238 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             5239 ; 173  |        int LWORD       :1; /* Last Word                */
                             5240 ; 174  |        int SUBA        :1; /* Sub Address              */
                             5241 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             5242 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             5243 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             5244 ; 178  |    } B;
                             5245 ; 179  |    int I;
                             5246 ; 180  |    unsigned U;
                             5247 ; 181  |} i2ccsr_type;
                             5248 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             5249 ; 183  |
                             5250 ; 184  |#endif
                             5251 
                             5253 
                             5254 ; 24   |#include "regsi2s.h"
                             5255 
                             5257 
                             5258 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5259 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             5260 ; 3    |// Filename: regsi2s.inc
                             5261 ; 4    |// Description: Register definitions for I2S interface
                             5262 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             5263 ; 6    |// The following naming conventions are followed in this file.
                             5264 ; 7    |// All registers are named using the format...
                             5265 ; 8    |//     HW_<module>_<regname>
                             5266 ; 9    |// where <module> is the module name which can be any of the following...
                             5267 ; 10   |//     USB20
                             5268 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5269 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5270 ; 13   |// that module)
                             5271 ; 14   |// <regname> is the specific register within that module
                             5272 ; 15   |// We also define the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5273 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5274 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5275 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5276 ; 19   |// which does something else, and
                             5277 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5278 ; 21   |// which does something else.
                             5279 ; 22   |// Other rules
                             5280 ; 23   |//     All caps
                             5281 ; 24   |//     Numeric identifiers start at 0
                             5282 ; 25   |#if !(defined(regsi2sinc))
                             5283 ; 26   |#define regsi2sinc 1
                             5284 ; 27   |
                             5285 ; 28   |#include "types.h"
                             5286 
                             5288 
                             5289 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5290 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5291 ; 3    |//
                             5292 ; 4    |// Filename: types.h
                             5293 ; 5    |// Description: Standard data types
                             5294 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5295 ; 7    |
                             5296 ; 8    |#ifndef _TYPES_H
                             5297 ; 9    |#define _TYPES_H
                             5298 ; 10   |
                             5299 ; 11   |// TODO:  move this outta here!
                             5300 ; 12   |#if !defined(NOERROR)
                             5301 ; 13   |#define NOERROR 0
                             5302 ; 14   |#define SUCCESS 0
                             5303 ; 15   |#endif 
                             5304 ; 16   |#if !defined(SUCCESS)
                             5305 ; 17   |#define SUCCESS  0
                             5306 ; 18   |#endif
                             5307 ; 19   |#if !defined(ERROR)
                             5308 ; 20   |#define ERROR   -1
                             5309 ; 21   |#endif
                             5310 ; 22   |#if !defined(FALSE)
                             5311 ; 23   |#define FALSE 0
                             5312 ; 24   |#endif
                             5313 ; 25   |#if !defined(TRUE)
                             5314 ; 26   |#define TRUE  1
                             5315 ; 27   |#endif
                             5316 ; 28   |
                             5317 ; 29   |#if !defined(NULL)
                             5318 ; 30   |#define NULL 0
                             5319 ; 31   |#endif
                             5320 ; 32   |
                             5321 ; 33   |#define MAX_INT     0x7FFFFF
                             5322 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5323 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5324 ; 36   |#define MAX_ULONG   (-1) 
                             5325 ; 37   |
                             5326 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5327 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5328 ; 40   |
                             5329 ; 41   |
                             5330 ; 42   |#define BYTE    unsigned char       // btVarName
                             5331 ; 43   |#define CHAR    signed char         // cVarName
                             5332 ; 44   |#define USHORT  unsigned short      // usVarName
                             5333 ; 45   |#define SHORT   unsigned short      // sVarName
                             5334 ; 46   |#define WORD    unsigned int        // wVarName
                             5335 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5336 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5337 ; 49   |#define LONG    signed long         // lVarName
                             5338 ; 50   |#define BOOL    unsigned int        // bVarName
                             5339 ; 51   |#define FRACT   _fract              // frVarName
                             5340 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5341 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5342 ; 54   |#define FLOAT   float               // fVarName
                             5343 ; 55   |#define DBL     double              // dVarName
                             5344 ; 56   |#define ENUM    enum                // eVarName
                             5345 ; 57   |#define CMX     _complex            // cmxVarName
                             5346 ; 58   |typedef WORD UCS3;                   // 
                             5347 ; 59   |
                             5348 ; 60   |#define UINT16  unsigned short
                             5349 ; 61   |#define UINT8   unsigned char   
                             5350 ; 62   |#define UINT32  unsigned long
                             5351 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5352 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5353 ; 65   |#define WCHAR   UINT16
                             5354 ; 66   |
                             5355 ; 67   |//UINT128 is 16 bytes or 6 words
                             5356 ; 68   |typedef struct UINT128_3500 {   
                             5357 ; 69   |    int val[6];     
                             5358 ; 70   |} UINT128_3500;
                             5359 ; 71   |
                             5360 ; 72   |#define UINT128   UINT128_3500
                             5361 ; 73   |
                             5362 ; 74   |// Little endian word packed byte strings:   
                             5363 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5364 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5365 ; 77   |// Little endian word packed byte strings:   
                             5366 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5367 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5368 ; 80   |
                             5369 ; 81   |// Declare Memory Spaces To Use When Coding
                             5370 ; 82   |// A. Sector Buffers
                             5371 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5372 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5373 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5374 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5375 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5376 ; 88   |// B. Media DDI Memory
                             5377 ; 89   |#define MEDIA_DDI_MEM _Y
                             5378 ; 90   |
                             5379 ; 91   |
                             5380 ; 92   |
                             5381 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5382 ; 94   |// Examples of circular pointers:
                             5383 ; 95   |//    INT CIRC cpiVarName
                             5384 ; 96   |//    DWORD CIRC cpdwVarName
                             5385 ; 97   |
                             5386 ; 98   |#define RETCODE INT                 // rcVarName
                             5387 ; 99   |
                             5388 ; 100  |// generic bitfield structure
                             5389 ; 101  |struct Bitfield {
                             5390 ; 102  |    unsigned int B0  :1;
                             5391 ; 103  |    unsigned int B1  :1;
                             5392 ; 104  |    unsigned int B2  :1;
                             5393 ; 105  |    unsigned int B3  :1;
                             5394 ; 106  |    unsigned int B4  :1;
                             5395 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5396 ; 108  |    unsigned int B6  :1;
                             5397 ; 109  |    unsigned int B7  :1;
                             5398 ; 110  |    unsigned int B8  :1;
                             5399 ; 111  |    unsigned int B9  :1;
                             5400 ; 112  |    unsigned int B10 :1;
                             5401 ; 113  |    unsigned int B11 :1;
                             5402 ; 114  |    unsigned int B12 :1;
                             5403 ; 115  |    unsigned int B13 :1;
                             5404 ; 116  |    unsigned int B14 :1;
                             5405 ; 117  |    unsigned int B15 :1;
                             5406 ; 118  |    unsigned int B16 :1;
                             5407 ; 119  |    unsigned int B17 :1;
                             5408 ; 120  |    unsigned int B18 :1;
                             5409 ; 121  |    unsigned int B19 :1;
                             5410 ; 122  |    unsigned int B20 :1;
                             5411 ; 123  |    unsigned int B21 :1;
                             5412 ; 124  |    unsigned int B22 :1;
                             5413 ; 125  |    unsigned int B23 :1;
                             5414 ; 126  |};
                             5415 ; 127  |
                             5416 ; 128  |union BitInt {
                             5417 ; 129  |        struct Bitfield B;
                             5418 ; 130  |        int        I;
                             5419 ; 131  |};
                             5420 ; 132  |
                             5421 ; 133  |#define MAX_MSG_LENGTH 10
                             5422 ; 134  |struct CMessage
                             5423 ; 135  |{
                             5424 ; 136  |        unsigned int m_uLength;
                             5425 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5426 ; 138  |};
                             5427 ; 139  |
                             5428 ; 140  |typedef struct {
                             5429 ; 141  |    WORD m_wLength;
                             5430 ; 142  |    WORD m_wMessage;
                             5431 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5432 ; 144  |} Message;
                             5433 ; 145  |
                             5434 ; 146  |struct MessageQueueDescriptor
                             5435 ; 147  |{
                             5436 ; 148  |        int *m_pBase;
                             5437 ; 149  |        int m_iModulo;
                             5438 ; 150  |        int m_iSize;
                             5439 ; 151  |        int *m_pHead;
                             5440 ; 152  |        int *m_pTail;
                             5441 ; 153  |};
                             5442 ; 154  |
                             5443 ; 155  |struct ModuleEntry
                             5444 ; 156  |{
                             5445 ; 157  |    int m_iSignaledEventMask;
                             5446 ; 158  |    int m_iWaitEventMask;
                             5447 ; 159  |    int m_iResourceOfCode;
                             5448 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5449 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5450 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5451 ; 163  |    int m_uTimeOutHigh;
                             5452 ; 164  |    int m_uTimeOutLow;
                             5453 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5454 ; 166  |};
                             5455 ; 167  |
                             5456 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5457 ; 169  |    struct B{
                             5458 ; 170  |        unsigned int m_bNone     :1;
                             5459 ; 171  |        unsigned int m_bMessage  :1;
                             5460 ; 172  |        unsigned int m_bTimer    :1;
                             5461 ; 173  |        unsigned int m_bButton   :1;
                             5462 ; 174  |    } B;
                             5463 ; 175  |    int I;
                             5464 ; 176  |} ;
                             5465 ; 177  |
                             5466 ; 178  |
                             5467 ; 179  |struct Button {
                             5468 ; 180  |        WORD wButtonEvent;
                             5469 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5470 ; 182  |};
                             5471 ; 183  |
                             5472 ; 184  |struct Message {
                             5473 ; 185  |        WORD wMsgLength;
                             5474 ; 186  |        WORD wMsgCommand;
                             5475 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5476 ; 188  |};
                             5477 ; 189  |
                             5478 ; 190  |union EventTypes {
                             5479 ; 191  |        struct CMessage msg;
                             5480 ; 192  |        struct Button Button ;
                             5481 ; 193  |        struct Message Message;
                             5482 ; 194  |};
                             5483 ; 195  |
                             5484 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5485 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5486 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5487 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5488 ; 200  |
                             5489 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5490 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5491 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5492 ; 204  |
                             5493 ; 205  |#if DEBUG
                             5494 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5495 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5496 ; 208  |#else 
                             5497 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5498 ; 210  |#define DebugBuildAssert(x)    
                             5499 ; 211  |#endif
                             5500 ; 212  |
                             5501 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5502 ; 214  |//  #pragma asm
                             5503 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5504 ; 216  |//  #pragma endasm
                             5505 ; 217  |
                             5506 ; 218  |
                             5507 ; 219  |#ifdef COLOR_262K
                             5508 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5509 ; 221  |#elif defined(COLOR_65K)
                             5510 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5511 ; 223  |#else
                             5512 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5513 ; 225  |#endif
                             5514 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5515 ; 227  |#endif // #ifndef _TYPES_H
                             5516 
                             5518 
                             5519 ; 29   |
                             5520 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5521 ; 31   |////  I2S Registers (SAI)
                             5522 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5523 ; 33   |
                             5524 ; 34   |
                             5525 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5526 ; 36   |
                             5527 ; 37   |
                             5528 ; 38   |
                             5529 ; 39   |
                             5530 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5531 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5532 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5533 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5534 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5535 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5536 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5537 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5538 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5539 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5540 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5541 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5542 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5543 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5544 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5545 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5546 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5547 ; 57   |
                             5548 ; 58   |
                             5549 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5550 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5551 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5552 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5553 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5554 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5555 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5556 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5557 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5558 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5559 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5560 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5561 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5562 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5563 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5564 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5565 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5566 ; 76   |
                             5567 ; 77   |
                             5568 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5569 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5570 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5571 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5572 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             5573 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5574 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5575 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5576 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5577 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5578 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5579 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5580 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             5581 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5582 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5583 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             5584 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             5585 ; 95   |
                             5586 ; 96   |
                             5587 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5588 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5589 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5590 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5591 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5592 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5593 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5594 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5595 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5596 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5597 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5598 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5599 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5600 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5601 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5602 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5603 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5604 ; 114  |
                             5605 ; 115  |typedef union
                             5606 ; 116  |{
                             5607 ; 117  |    struct {
                             5608 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5609 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5610 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5611 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5612 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5613 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5614 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5615 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5616 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5617 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5618 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             5619 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5620 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5621 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5622 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5623 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5624 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5625 ; 135  |    } B;
                             5626 ; 136  |    int I;
                             5627 ; 137  |    unsigned U;
                             5628 ; 138  |} saircsr_type;
                             5629 ; 139  |
                             5630 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             5631 ; 141  |
                             5632 ; 142  |typedef union
                             5633 ; 143  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5634 ; 144  |    struct {
                             5635 ; 145  |        unsigned SAI :24;
                             5636 ; 146  |    } B;
                             5637 ; 147  |    int I;
                             5638 ; 148  |    unsigned U;
                             5639 ; 149  |} saixr_type;
                             5640 ; 150  |
                             5641 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             5642 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             5643 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                             5644 ; 154  |
                             5645 ; 155  |
                             5646 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5647 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5648 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5649 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5650 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5651 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5652 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5653 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5654 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5655 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5656 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5657 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5658 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5659 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5660 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5661 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5662 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5663 ; 173  |
                             5664 ; 174  |
                             5665 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5666 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5667 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5668 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5669 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5670 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5671 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5672 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5673 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5674 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5675 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5676 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5677 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5678 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5679 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5680 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5681 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5682 ; 192  |
                             5683 ; 193  |
                             5684 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5685 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5686 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5687 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5688 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             5689 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5690 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5691 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5692 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5693 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5694 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5695 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5696 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             5697 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5698 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5699 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             5700 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             5701 ; 211  |
                             5702 ; 212  |
                             5703 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5704 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5705 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5706 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5707 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5708 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5709 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5710 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5711 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5712 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5713 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5714 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5715 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5716 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5717 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5718 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5719 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5720 ; 230  |
                             5721 ; 231  |
                             5722 ; 232  |typedef union
                             5723 ; 233  |{
                             5724 ; 234  |    struct {
                             5725 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5726 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             5727 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5728 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5729 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5730 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5731 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             5732 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5733 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5734 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5735 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             5736 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5737 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5738 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5739 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5740 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5741 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             5742 ; 252  |    } B;
                             5743 ; 253  |    int I;
                             5744 ; 254  |    unsigned U;
                             5745 ; 255  |} saitcsr_type;
                             5746 ; 256  |
                             5747 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5748 ; 258  |
                             5749 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             5750 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             5751 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             5752 ; 262  |
                             5753 ; 263  |#endif
                             5754 
                             5756 
                             5757 ; 25   |#include "regsicoll.h"
                             5758 
                             5760 
                             5761 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5762 ; 2    |#define __REGS_ICOLL_INC 1
                             5763 ; 3    |
                             5764 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5765 ; 5    |//  Interrupt Collector Registers
                             5766 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5767 ; 7    |
                             5768 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5769 ; 9    |
                             5770 ; 10   |
                             5771 ; 11   |
                             5772 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5773 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5774 ; 14   |
                             5775 ; 15   |typedef union
                             5776 ; 16   |{
                             5777 ; 17   |    struct {
                             5778 ; 18   |        int SEN0        :1;
                             5779 ; 19   |        int SEN1        :1;
                             5780 ; 20   |        int SEN2        :1;
                             5781 ; 21   |        int SEN3        :1;
                             5782 ; 22   |        int SEN4        :1;
                             5783 ; 23   |        int SEN5        :1;
                             5784 ; 24   |        int SEN6        :1;
                             5785 ; 25   |        int SEN7        :1;
                             5786 ; 26   |        int SEN8        :1;
                             5787 ; 27   |        int SEN9        :1;
                             5788 ; 28   |        int SEN10       :1;
                             5789 ; 29   |        int SEN11       :1;
                             5790 ; 30   |        int SEN12       :1;
                             5791 ; 31   |        int SEN13       :1;
                             5792 ; 32   |        int SEN14       :1;
                             5793 ; 33   |        int SEN15       :1;
                             5794 ; 34   |        int SEN16       :1;
                             5795 ; 35   |        int SEN17       :1;
                             5796 ; 36   |        int SEN18       :1;
                             5797 ; 37   |        int SEN19       :1;
                             5798 ; 38   |        int SEN20       :1;
                             5799 ; 39   |        int SEN21       :1;
                             5800 ; 40   |        int SEN22       :1;
                             5801 ; 41   |        int SEN23       :1;
                             5802 ; 42   |    } B;
                             5803 ; 43   |    int I;
                             5804 ; 44   |} iclenable0_type;
                             5805 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             5806 ; 46   |
                             5807 ; 47   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5808 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5809 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5810 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5811 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5812 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5813 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5814 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5815 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5816 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5817 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5818 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5819 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5820 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5821 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5822 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5823 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5824 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5825 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5826 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5827 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5828 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5829 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5830 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5831 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5832 ; 72   |
                             5833 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5834 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5835 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5836 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5837 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5838 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5839 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5840 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5841 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5842 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5843 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5844 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5845 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5846 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5847 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5848 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5849 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5850 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5851 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5852 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5853 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5854 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5855 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5856 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5857 ; 97   |
                             5858 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5859 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5860 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5861 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5862 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5863 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5864 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5865 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5866 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5867 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5868 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5869 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5870 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5871 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5872 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5873 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5874 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5875 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5876 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5877 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5878 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5879 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5880 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5881 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5882 ; 122  |
                             5883 ; 123  |
                             5884 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5885 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5886 ; 126  |typedef union
                             5887 ; 127  |{
                             5888 ; 128  |    struct {
                             5889 ; 129  |        
                             5890 ; 130  |        int SEN24       :1;
                             5891 ; 131  |        int SEN25       :1;
                             5892 ; 132  |        int SEN26       :1;
                             5893 ; 133  |        int SEN27       :1;
                             5894 ; 134  |        int SEN28       :1;
                             5895 ; 135  |        int SEN29       :1;
                             5896 ; 136  |        int SEN30       :1;
                             5897 ; 137  |        int SEN31       :1;
                             5898 ; 138  |        int SEN32       :1;
                             5899 ; 139  |        int SEN33       :1;
                             5900 ; 140  |    } B;
                             5901 ; 141  |    int I;
                             5902 ; 142  |} iclenable1_type;
                             5903 ; 143  |
                             5904 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             5905 ; 145  |
                             5906 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5907 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5908 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5909 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5910 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5911 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5912 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5913 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5914 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5915 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5916 ; 156  |
                             5917 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5918 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5919 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5920 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5921 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5922 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5923 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5924 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5925 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5926 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5927 ; 167  |
                             5928 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5929 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5930 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5931 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5932 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5933 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5934 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5935 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5936 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5937 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5938 ; 178  |
                             5939 ; 179  |
                             5940 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5941 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5942 ; 182  |typedef union
                             5943 ; 183  |{
                             5944 ; 184  |    struct {
                             5945 ; 185  |        int SST0        :1;
                             5946 ; 186  |        int SST1        :1;
                             5947 ; 187  |        int SST2        :1;
                             5948 ; 188  |        int SST3        :1;
                             5949 ; 189  |        int SST4        :1;
                             5950 ; 190  |        int SST5        :1;
                             5951 ; 191  |        int SST6        :1;
                             5952 ; 192  |        int SST7        :1;
                             5953 ; 193  |        int SST8        :1;
                             5954 ; 194  |        int SST9        :1;
                             5955 ; 195  |        int SST10       :1;
                             5956 ; 196  |        int SST11       :1;
                             5957 ; 197  |        int SST12       :1;
                             5958 ; 198  |        int SST13       :1;
                             5959 ; 199  |        int SST14       :1;
                             5960 ; 200  |        int SST15       :1;
                             5961 ; 201  |        int SST16       :1;
                             5962 ; 202  |        int SST17       :1;
                             5963 ; 203  |        int SST18       :1;
                             5964 ; 204  |        int SST19       :1;
                             5965 ; 205  |        int SST20       :1;
                             5966 ; 206  |        int SST21       :1;
                             5967 ; 207  |        int SST22       :1;
                             5968 ; 208  |        int SST23       :1;
                             5969 ; 209  |    } B;
                             5970 ; 210  |    int I;
                             5971 ; 211  |} iclstatus0_type;
                             5972 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             5973 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5974 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5975 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5976 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5977 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5978 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5979 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5980 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5981 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5982 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5983 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5984 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5985 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5986 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5987 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5988 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5989 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5990 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5991 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5992 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5993 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5994 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5995 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5996 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5997 ; 237  |
                             5998 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5999 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             6000 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             6001 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             6002 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             6003 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             6004 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             6005 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             6006 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             6007 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             6008 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             6009 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             6010 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             6011 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             6012 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             6013 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             6014 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             6015 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             6016 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             6017 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             6018 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             6019 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             6020 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             6021 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             6022 ; 262  |
                             6023 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             6024 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             6025 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             6026 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             6027 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             6028 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             6029 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             6030 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             6031 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             6032 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             6033 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             6034 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             6035 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             6036 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             6037 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             6038 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             6039 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             6040 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             6041 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             6042 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             6043 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             6044 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             6045 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             6046 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             6047 ; 287  |
                             6048 ; 288  |
                             6049 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             6050 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             6051 ; 291  |typedef union
                             6052 ; 292  |{
                             6053 ; 293  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6054 ; 294  |        int SST24       :1;
                             6055 ; 295  |        int SST25       :1;
                             6056 ; 296  |        int SST26       :1;
                             6057 ; 297  |        int SST27       :1;
                             6058 ; 298  |        int SST28       :1;
                             6059 ; 299  |        int SST29       :1;
                             6060 ; 300  |        int SST30       :1;
                             6061 ; 301  |        int SST31       :1;
                             6062 ; 302  |        int SST32       :1;
                             6063 ; 303  |        int SST33       :1;
                             6064 ; 304  |    } B;
                             6065 ; 305  |    int I;
                             6066 ; 306  |} iclstatus1_type;
                             6067 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             6068 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             6069 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             6070 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             6071 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             6072 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             6073 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             6074 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             6075 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             6076 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             6077 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             6078 ; 318  |
                             6079 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             6080 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             6081 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             6082 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             6083 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             6084 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             6085 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             6086 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             6087 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             6088 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             6089 ; 329  |
                             6090 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             6091 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             6092 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             6093 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             6094 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             6095 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             6096 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             6097 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             6098 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             6099 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             6100 ; 340  |
                             6101 ; 341  |
                             6102 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             6103 ; 343  |//  Interrupt Collector Priority Defs
                             6104 ; 344  |typedef union
                             6105 ; 345  |{
                             6106 ; 346  |    struct {
                             6107 ; 347  |        unsigned S0P    :3;
                             6108 ; 348  |        unsigned S1P    :3;
                             6109 ; 349  |        unsigned S2P    :3;
                             6110 ; 350  |        unsigned S3P    :3;
                             6111 ; 351  |        unsigned S4P    :3;
                             6112 ; 352  |        unsigned S5P    :3;
                             6113 ; 353  |        unsigned S6P    :3;
                             6114 ; 354  |        unsigned S7P    :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6115 ; 355  |    } B;
                             6116 ; 356  |    int I;
                             6117 ; 357  |
                             6118 ; 358  |} iclprior0_type;
                             6119 ; 359  |
                             6120 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             6121 ; 361  |
                             6122 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             6123 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             6124 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             6125 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             6126 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             6127 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             6128 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             6129 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             6130 ; 370  |
                             6131 ; 371  |
                             6132 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             6133 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             6134 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             6135 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             6136 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             6137 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             6138 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             6139 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             6140 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             6141 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             6142 ; 382  |
                             6143 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             6144 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             6145 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             6146 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             6147 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             6148 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             6149 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             6150 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             6151 ; 391  |
                             6152 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             6153 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             6154 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             6155 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             6156 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             6157 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             6158 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             6159 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             6160 ; 400  |
                             6161 ; 401  |
                             6162 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             6163 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             6164 ; 404  |typedef union
                             6165 ; 405  |{
                             6166 ; 406  |    struct {
                             6167 ; 407  |        unsigned S8P    :3;
                             6168 ; 408  |        unsigned S9P    :3;
                             6169 ; 409  |        unsigned S10P   :3;
                             6170 ; 410  |        unsigned S11P   :3;
                             6171 ; 411  |        unsigned S12P   :3;
                             6172 ; 412  |        unsigned S13P   :3;
                             6173 ; 413  |        unsigned S14P   :3;
                             6174 ; 414  |        unsigned S15P   :3;
                             6175 ; 415  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6176 ; 416  |    int I;
                             6177 ; 417  |} iclprior1_type;
                             6178 ; 418  |
                             6179 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             6180 ; 420  |
                             6181 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             6182 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             6183 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             6184 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             6185 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             6186 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             6187 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             6188 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             6189 ; 429  |
                             6190 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             6191 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             6192 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             6193 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             6194 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             6195 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             6196 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             6197 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             6198 ; 438  |
                             6199 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             6200 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             6201 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             6202 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             6203 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             6204 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             6205 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             6206 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             6207 ; 447  |
                             6208 ; 448  |
                             6209 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             6210 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             6211 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             6212 ; 452  |{
                             6213 ; 453  |    struct {
                             6214 ; 454  |        unsigned S16P   :3;
                             6215 ; 455  |        unsigned S17P   :3;
                             6216 ; 456  |        unsigned S18P   :3;
                             6217 ; 457  |        unsigned S19P   :3;
                             6218 ; 458  |        unsigned S20P   :3;
                             6219 ; 459  |        unsigned S21P   :3;
                             6220 ; 460  |        unsigned S22P   :3;
                             6221 ; 461  |        unsigned S23P   :3;
                             6222 ; 462  |    } B;
                             6223 ; 463  |    int I;
                             6224 ; 464  |} iclprior2_type;
                             6225 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             6226 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             6227 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             6228 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             6229 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             6230 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             6231 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             6232 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             6233 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             6234 ; 474  |
                             6235 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6236 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             6237 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             6238 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             6239 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             6240 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             6241 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             6242 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             6243 ; 483  |
                             6244 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             6245 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             6246 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             6247 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             6248 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             6249 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             6250 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             6251 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             6252 ; 492  |
                             6253 ; 493  |
                             6254 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             6255 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             6256 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6257 ; 497  |{
                             6258 ; 498  |    struct {
                             6259 ; 499  |        unsigned S24P   :3;
                             6260 ; 500  |        unsigned S25P   :3;
                             6261 ; 501  |        unsigned S26P   :3;
                             6262 ; 502  |        unsigned S27P   :3;
                             6263 ; 503  |        unsigned S28P   :3;
                             6264 ; 504  |        unsigned S29P   :3;
                             6265 ; 505  |        unsigned S30P   :3;
                             6266 ; 506  |        unsigned S31P   :3;
                             6267 ; 507  |    } B;
                             6268 ; 508  |    int I;
                             6269 ; 509  |} iclprior3_type;
                             6270 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             6271 ; 511  |
                             6272 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             6273 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             6274 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             6275 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             6276 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             6277 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             6278 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             6279 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             6280 ; 520  |
                             6281 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             6282 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             6283 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             6284 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             6285 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             6286 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             6287 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             6288 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             6289 ; 529  |
                             6290 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             6291 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             6292 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             6293 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             6294 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             6295 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             6296 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6297 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             6298 ; 538  |
                             6299 ; 539  |
                             6300 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             6301 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             6302 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6303 ; 543  |{
                             6304 ; 544  |    struct {
                             6305 ; 545  |        unsigned S32P   :3;
                             6306 ; 546  |        unsigned S33P   :3;
                             6307 ; 547  |    } B;
                             6308 ; 548  |    int I;
                             6309 ; 549  |} iclprior4_type;
                             6310 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             6311 ; 551  |
                             6312 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             6313 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             6314 ; 554  |
                             6315 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             6316 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             6317 ; 557  |
                             6318 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             6319 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             6320 ; 560  |
                             6321 ; 561  |
                             6322 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             6323 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6324 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             6325 ; 565  |{
                             6326 ; 566  |    struct {
                             6327 ; 567  |        unsigned S0S    :2;
                             6328 ; 568  |        unsigned S1S    :2;
                             6329 ; 569  |        unsigned S2S    :2;
                             6330 ; 570  |        unsigned S3S    :2;
                             6331 ; 571  |        unsigned S4S    :2;
                             6332 ; 572  |        unsigned S5S    :2;
                             6333 ; 573  |        unsigned S6S    :2;
                             6334 ; 574  |        unsigned S7S    :2;
                             6335 ; 575  |        unsigned S8S    :2;
                             6336 ; 576  |        unsigned S9S    :2;
                             6337 ; 577  |        unsigned S10S   :2;
                             6338 ; 578  |        unsigned S11S   :2;
                             6339 ; 579  |    } B;
                             6340 ; 580  |    int I;
                             6341 ; 581  |} iclsteer0_type;
                             6342 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             6343 ; 583  |
                             6344 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             6345 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             6346 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             6347 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             6348 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             6349 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             6350 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             6351 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             6352 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             6353 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             6354 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             6355 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             6356 ; 596  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6357 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             6358 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             6359 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             6360 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             6361 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             6362 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             6363 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             6364 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             6365 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             6366 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             6367 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             6368 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             6369 ; 609  |
                             6370 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             6371 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             6372 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             6373 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             6374 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             6375 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             6376 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             6377 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             6378 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             6379 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             6380 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             6381 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             6382 ; 622  |
                             6383 ; 623  |
                             6384 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             6385 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             6386 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             6387 ; 627  |{
                             6388 ; 628  |    struct {
                             6389 ; 629  |        unsigned S12S   :2;
                             6390 ; 630  |        unsigned S13S   :2;
                             6391 ; 631  |        unsigned S14S   :2;
                             6392 ; 632  |        unsigned S15S   :2;
                             6393 ; 633  |        unsigned S16S   :2;
                             6394 ; 634  |        unsigned S17S   :2;
                             6395 ; 635  |        unsigned S18S   :2;
                             6396 ; 636  |        unsigned S19S   :2;
                             6397 ; 637  |        unsigned S20S   :2;
                             6398 ; 638  |        unsigned S21S   :2;
                             6399 ; 639  |        unsigned S22S   :2;
                             6400 ; 640  |        unsigned S23S   :2;
                             6401 ; 641  |    } B;
                             6402 ; 642  |    int I;
                             6403 ; 643  |} iclsteer1_type;
                             6404 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             6405 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             6406 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             6407 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             6408 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             6409 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             6410 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             6411 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             6412 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             6413 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             6414 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             6415 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             6416 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             6417 ; 657  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6418 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             6419 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             6420 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             6421 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             6422 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             6423 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             6424 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             6425 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             6426 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             6427 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             6428 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             6429 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             6430 ; 670  |
                             6431 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             6432 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             6433 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             6434 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             6435 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             6436 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             6437 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             6438 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             6439 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             6440 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             6441 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             6442 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             6443 ; 683  |
                             6444 ; 684  |
                             6445 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             6446 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             6447 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             6448 ; 688  |{
                             6449 ; 689  |    struct {
                             6450 ; 690  |        unsigned S24S   :2;
                             6451 ; 691  |        unsigned S25S   :2;
                             6452 ; 692  |        unsigned S26S   :2;
                             6453 ; 693  |        unsigned S27S   :2;
                             6454 ; 694  |        unsigned S28S   :2;
                             6455 ; 695  |        unsigned S29S   :2;
                             6456 ; 696  |        unsigned S30S   :2;
                             6457 ; 697  |        unsigned S31S   :2;
                             6458 ; 698  |        unsigned S32S   :2;
                             6459 ; 699  |        unsigned S33S   :2;
                             6460 ; 700  |    } B;
                             6461 ; 701  |    int I;
                             6462 ; 702  |} iclsteer2_type;
                             6463 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             6464 ; 704  |
                             6465 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             6466 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             6467 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             6468 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             6469 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             6470 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             6471 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             6472 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             6473 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             6474 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             6475 ; 715  |
                             6476 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             6477 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             6478 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6479 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             6480 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             6481 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             6482 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             6483 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             6484 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             6485 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             6486 ; 726  |
                             6487 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             6488 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             6489 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             6490 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             6491 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             6492 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             6493 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             6494 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             6495 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             6496 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             6497 ; 737  |
                             6498 ; 738  |
                             6499 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             6500 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6501 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6502 ; 742  |{
                             6503 ; 743  |    struct {
                             6504 ; 744  |        int S0FV        :1;
                             6505 ; 745  |        int S1FV        :1;
                             6506 ; 746  |        int S2FV        :1;
                             6507 ; 747  |        int S3FV        :1;
                             6508 ; 748  |        int S4FV        :1;
                             6509 ; 749  |        int S5FV        :1;
                             6510 ; 750  |        int S6FV        :1;
                             6511 ; 751  |        int S7FV        :1;
                             6512 ; 752  |        int S8FV        :1;
                             6513 ; 753  |        int S9FV        :1;
                             6514 ; 754  |        int S10FV       :1;
                             6515 ; 755  |        int S11FV       :1;
                             6516 ; 756  |        int S12FV       :1;
                             6517 ; 757  |        int S13FV       :1;
                             6518 ; 758  |        int S14FV       :1;
                             6519 ; 759  |        int S15FV       :1;
                             6520 ; 760  |        int S16FV       :1;
                             6521 ; 761  |        int S17FV       :1;
                             6522 ; 762  |        int S18FV       :1;
                             6523 ; 763  |        int S19FV       :1;
                             6524 ; 764  |        int S20FV       :1;
                             6525 ; 765  |        int S21FV       :1;
                             6526 ; 766  |        int S22FV       :1;
                             6527 ; 767  |        int S23FV       :1;
                             6528 ; 768  |    } B;
                             6529 ; 769  |    int I;
                             6530 ; 770  |} iclforce0_type;
                             6531 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             6532 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6533 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6534 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6535 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6536 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6537 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6538 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6539 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6540 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6541 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6542 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6543 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6544 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6545 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6546 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6547 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6548 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6549 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6550 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6551 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6552 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6553 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6554 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6555 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6556 ; 796  |
                             6557 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6558 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6559 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6560 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6561 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6562 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6563 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6564 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6565 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6566 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6567 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6568 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6569 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6570 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6571 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6572 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6573 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6574 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6575 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6576 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6577 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6578 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6579 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6580 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6581 ; 821  |
                             6582 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6583 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6584 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6585 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6586 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6587 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6588 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6589 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6590 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6591 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6592 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6593 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6594 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6595 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6596 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6597 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6598 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6599 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6600 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6601 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6602 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6603 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6604 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6605 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6606 ; 846  |
                             6607 ; 847  |
                             6608 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6609 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6610 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6611 ; 851  |{
                             6612 ; 852  |    struct {
                             6613 ; 853  |        int S24FV       :1;
                             6614 ; 854  |        int S25FV       :1;
                             6615 ; 855  |        int S26FV       :1;
                             6616 ; 856  |        int S27FV       :1;
                             6617 ; 857  |        int S28FV       :1;
                             6618 ; 858  |        int S29FV       :1;
                             6619 ; 859  |        int S30FV       :1;
                             6620 ; 860  |        int S31FV       :1;
                             6621 ; 861  |        int S32FV       :1;
                             6622 ; 862  |        int S33FV       :1;
                             6623 ; 863  |    } B;
                             6624 ; 864  |    int I;
                             6625 ; 865  |} iclforce1_type;
                             6626 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             6627 ; 867  |
                             6628 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6629 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6630 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6631 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6632 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6633 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6634 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6635 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6636 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6637 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6638 ; 878  |
                             6639 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6640 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6641 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6642 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6643 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6644 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6645 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6646 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6647 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6648 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6649 ; 889  |
                             6650 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6651 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6652 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6653 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6654 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6655 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6656 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6657 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6658 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6659 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6660 ; 900  |
                             6661 ; 901  |
                             6662 ; 902  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6663 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6664 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6665 ; 905  |{
                             6666 ; 906  |    struct {
                             6667 ; 907  |        int S0FE        :1;
                             6668 ; 908  |        int S1FE        :1;
                             6669 ; 909  |        int S2FE        :1;
                             6670 ; 910  |        int S3FE        :1;
                             6671 ; 911  |        int S4FE        :1;
                             6672 ; 912  |        int S5FE        :1;
                             6673 ; 913  |        int S6FE        :1;
                             6674 ; 914  |        int S7FE        :1;
                             6675 ; 915  |        int S8FE        :1;
                             6676 ; 916  |        int S9FE        :1;
                             6677 ; 917  |        int S10FE       :1;
                             6678 ; 918  |        int S11FE       :1;
                             6679 ; 919  |        int S12FE       :1;
                             6680 ; 920  |        int S13FE       :1;
                             6681 ; 921  |        int S14FE       :1;
                             6682 ; 922  |        int S15FE       :1;
                             6683 ; 923  |        int S16FE       :1;
                             6684 ; 924  |        int S17FE       :1;
                             6685 ; 925  |        int S18FE       :1;
                             6686 ; 926  |        int S19FE       :1;
                             6687 ; 927  |        int S20FE       :1;
                             6688 ; 928  |        int S21FE       :1;
                             6689 ; 929  |        int S22FE       :1;
                             6690 ; 930  |        int S23FE       :1;
                             6691 ; 931  |    } B;
                             6692 ; 932  |    int I;
                             6693 ; 933  |} iclfenable0_type;
                             6694 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             6695 ; 935  |
                             6696 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6697 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6698 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6699 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6700 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6701 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6702 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6703 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6704 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6705 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6706 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6707 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6708 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6709 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6710 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6711 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6712 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6713 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6714 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6715 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6716 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6717 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6718 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6719 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6720 ; 960  |
                             6721 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6722 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6723 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6724 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6725 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6726 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6727 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6728 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6729 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6730 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6731 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6732 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6733 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6734 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6735 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6736 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6737 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6738 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6739 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6740 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6741 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6742 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6743 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6744 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             6745 ; 985  |
                             6746 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6747 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6748 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6749 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6750 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6751 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6752 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6753 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6754 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6755 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6756 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6757 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6758 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6759 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6760 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6761 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6762 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6763 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6764 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6765 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6766 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6767 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6768 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6769 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6770 ; 1010 |
                             6771 ; 1011 |
                             6772 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6773 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6774 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6775 ; 1015 |{
                             6776 ; 1016 |    struct {
                             6777 ; 1017 |        int S24FE       :1;
                             6778 ; 1018 |        int S25FE       :1;
                             6779 ; 1019 |        int S26FE       :1;
                             6780 ; 1020 |        int S27FE       :1;
                             6781 ; 1021 |        int S28FE       :1;
                             6782 ; 1022 |        int S29FE       :1;
                             6783 ; 1023 |        int S30FE       :1;
                             6784 ; 1024 |        int S31FE       :1;
                             6785 ; 1025 |        int S32FE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6786 ; 1026 |        int S33FE       :1;
                             6787 ; 1027 |    } B;
                             6788 ; 1028 |    int I;
                             6789 ; 1029 |} iclfenable1_type;
                             6790 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             6791 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6792 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6793 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6794 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6795 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6796 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6797 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6798 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6799 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6800 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6801 ; 1041 |
                             6802 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6803 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6804 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6805 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6806 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6807 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6808 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6809 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6810 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6811 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6812 ; 1052 |
                             6813 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6814 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6815 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6816 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6817 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6818 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6819 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6820 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6821 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6822 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6823 ; 1063 |
                             6824 ; 1064 |
                             6825 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6826 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6827 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6828 ; 1068 |{
                             6829 ; 1069 |    struct {
                             6830 ; 1070 |        unsigned RQ     :7;
                             6831 ; 1071 |        unsigned IVA    :7;
                             6832 ; 1072 |        unsigned IVB    :7;
                             6833 ; 1073 |    } B;
                             6834 ; 1074 |    int I;
                             6835 ; 1075 |} iclobsvz0_type;
                             6836 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             6837 ; 1077 |
                             6838 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6839 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6840 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6841 ; 1081 |
                             6842 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6843 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6844 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6845 ; 1085 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6846 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6847 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6848 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6849 ; 1089 |
                             6850 ; 1090 |
                             6851 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6852 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6853 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6854 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6855 ; 1095 |
                             6856 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6857 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6858 ; 1098 |
                             6859 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6860 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6861 ; 1101 |
                             6862 ; 1102 |
                             6863 ; 1103 |
                             6864 ; 1104 |
                             6865 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6866 ; 1106 |//  Interrupt Vectors
                             6867 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6868 ; 1108 |// Reset Vector
                             6869 ; 1109 |#define HW_IVECRESET 0x0000           
                             6870 ; 1110 |// Stack Error
                             6871 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6872 ; 1112 |// Trace
                             6873 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6874 ; 1114 |// SWI
                             6875 ; 1115 |#define HW_IVECSWI 0x0006           
                             6876 ; 1116 |// ~IRQA
                             6877 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6878 ; 1118 |// ~IRQB - BROWNOUT
                             6879 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6880 ; 1120 |// Fatal Error
                             6881 ; 1121 |#define HW_IVECERROR 0x000C           
                             6882 ; 1122 |// SPI
                             6883 ; 1123 |#define HW_IVECSPI 0x000E           
                             6884 ; 1124 |// I2S TX Data Empty
                             6885 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6886 ; 1126 |// I2S TX Underflow
                             6887 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6888 ; 1128 |// I2S RX Data Full
                             6889 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6890 ; 1130 |// I2S RX Overflow
                             6891 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6892 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             6893 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             6894 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             6895 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6896 ; 1136 |// GPIO1
                             6897 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6898 ; 1138 |// GPIO2
                             6899 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6900 ; 1140 |// GPIO0
                             6901 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6902 ; 1142 |// TIMER0
                             6903 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6904 ; 1144 |// TIMER1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6905 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6906 ; 1146 |// TIMER2
                             6907 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6908 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             6909 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             6910 ; 1150 |// I2C RX Data Ready
                             6911 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6912 ; 1152 |// I2C RX Overflow
                             6913 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6914 ; 1154 |// I2C TX Data Empty
                             6915 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6916 ; 1156 |// I2C TX Underflow
                             6917 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6918 ; 1158 |// Illegal Instruction
                             6919 ; 1159 |#define HW_IVECILI 0x0038           
                             6920 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             6921 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6922 ; 1162 |#define HW_IVECDACE 0x003C           
                             6923 ; 1163 |// DAC Underflow ISR
                             6924 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6925 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             6926 ; 1166 |// ADC Full ISR
                             6927 ; 1167 |#define HW_IVECADCF 0x0042           
                             6928 ; 1168 |// ADC Overflow ISR
                             6929 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6930 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             6931 ; 1171 |// TIMER3
                             6932 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6933 ; 1173 |// GPIO3
                             6934 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6935 ; 1175 |// SDRAM
                             6936 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6937 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             6938 ; 1178 |// 5 volt power connected
                             6939 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6940 ; 1180 |// USB Controller
                             6941 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6942 ; 1182 |// USB Wakeup 
                             6943 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6944 ; 1184 |// 5 volt power disconnected
                             6945 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6946 ; 1186 |// enhanced SPI
                             6947 ; 1187 |#define HW_IVECESPI 0x0058           
                             6948 ; 1188 |// filter coprocessor
                             6949 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6950 ; 1190 |// low res ADC #1
                             6951 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6952 ; 1192 |// real time clock alarm
                             6953 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6954 ; 1194 |// low res ADC #2
                             6955 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6956 ; 1196 |// flash hardware ECC
                             6957 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6958 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             6959 ; 1199 |// CDSYNC Interrupt
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6960 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6961 ; 1201 |// CDSYNC Exception
                             6962 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6963 ; 1203 |// RS
                             6964 ; 1204 |#define HW_IVECRS 0x006A           
                             6965 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             6966 ; 1206 |// Flash Done ISR
                             6967 ; 1207 |#define HW_IVECFD 0x006E           
                             6968 ; 1208 |// CompactFlash ISR
                             6969 ; 1209 |#define HW_IVECCF 0x0070           
                             6970 ; 1210 |// SmartMedia Timeout ISR
                             6971 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6972 ; 1212 |// SmartMedia Invalid Programming
                             6973 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6974 ; 1214 |// CompactFlash No Card ISR
                             6975 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6976 ; 1216 |// CompactFlash Status Change ISR
                             6977 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6978 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             6979 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             6980 ; 1220 |// CDI
                             6981 ; 1221 |#define HW_IVECCDI 0x007E           
                             6982 ; 1222 |
                             6983 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6984 ; 1224 |//  Interrupt Vectors
                             6985 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6986 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6987 ; 1227 |#define VECTOR(address,isr) \ 
                             6988 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6989 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6990 ; 1230 |
                             6991 ; 1231 |
                             6992 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6993 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6994 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6995 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6996 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6997 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6998 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6999 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             7000 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             7001 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             7002 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             7003 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             7004 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             7005 ; 1245 |
                             7006 ; 1246 |// Interrupt Disabled
                             7007 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             7008 ; 1248 |// Interrupt Priority Level 0
                             7009 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             7010 ; 1250 |// Interrupt Priority Level 1
                             7011 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             7012 ; 1252 |// Interrupt Priority Level 2
                             7013 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             7014 ; 1254 |
                             7015 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             7016 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             7017 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             7018 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7019 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             7020 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             7021 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             7022 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             7023 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             7024 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             7025 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             7026 ; 1266 |
                             7027 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             7028 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             7029 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             7030 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             7031 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             7032 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             7033 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             7034 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             7035 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             7036 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             7037 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             7038 ; 1278 |
                             7039 ; 1279 |// Interrupt Priority register
                             7040 ; 1280 |typedef union               
                             7041 ; 1281 |{
                             7042 ; 1282 |    struct {
                             7043 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             7044 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             7045 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             7046 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             7047 ; 1287 |        int                 :4; /* Reserved */
                             7048 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             7049 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             7050 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             7051 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             7052 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             7053 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             7054 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             7055 ; 1295 |    } B;
                             7056 ; 1296 |
                             7057 ; 1297 |    int I;
                             7058 ; 1298 |
                             7059 ; 1299 |} ipr_type;
                             7060 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             7061 ; 1301 |
                             7062 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7063 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7064 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             7065 ; 1305 |
                             7066 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             7067 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             7068 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             7069 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             7070 ; 1310 |
                             7071 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             7072 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             7073 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             7074 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             7075 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             7076 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             7077 ; 1317 |
                             7078 ; 1318 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7079 ; 1319 |
                             7080 
                             7082 
                             7083 ; 26   |#include "regslradc.h"
                             7084 
                             7086 
                             7087 ; 1    |#if !(defined(regslradcinc))
                             7088 ; 2    |
                             7089 ; 3    |#define regslradcinc 1
                             7090 ; 4    |
                             7091 ; 5    |#include "types.h"
                             7092 
                             7094 
                             7095 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7096 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7097 ; 3    |//
                             7098 ; 4    |// Filename: types.h
                             7099 ; 5    |// Description: Standard data types
                             7100 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7101 ; 7    |
                             7102 ; 8    |#ifndef _TYPES_H
                             7103 ; 9    |#define _TYPES_H
                             7104 ; 10   |
                             7105 ; 11   |// TODO:  move this outta here!
                             7106 ; 12   |#if !defined(NOERROR)
                             7107 ; 13   |#define NOERROR 0
                             7108 ; 14   |#define SUCCESS 0
                             7109 ; 15   |#endif 
                             7110 ; 16   |#if !defined(SUCCESS)
                             7111 ; 17   |#define SUCCESS  0
                             7112 ; 18   |#endif
                             7113 ; 19   |#if !defined(ERROR)
                             7114 ; 20   |#define ERROR   -1
                             7115 ; 21   |#endif
                             7116 ; 22   |#if !defined(FALSE)
                             7117 ; 23   |#define FALSE 0
                             7118 ; 24   |#endif
                             7119 ; 25   |#if !defined(TRUE)
                             7120 ; 26   |#define TRUE  1
                             7121 ; 27   |#endif
                             7122 ; 28   |
                             7123 ; 29   |#if !defined(NULL)
                             7124 ; 30   |#define NULL 0
                             7125 ; 31   |#endif
                             7126 ; 32   |
                             7127 ; 33   |#define MAX_INT     0x7FFFFF
                             7128 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7129 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7130 ; 36   |#define MAX_ULONG   (-1) 
                             7131 ; 37   |
                             7132 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7133 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7134 ; 40   |
                             7135 ; 41   |
                             7136 ; 42   |#define BYTE    unsigned char       // btVarName
                             7137 ; 43   |#define CHAR    signed char         // cVarName
                             7138 ; 44   |#define USHORT  unsigned short      // usVarName
                             7139 ; 45   |#define SHORT   unsigned short      // sVarName
                             7140 ; 46   |#define WORD    unsigned int        // wVarName
                             7141 ; 47   |#define INT     signed int          // iVarName
                             7142 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7143 ; 49   |#define LONG    signed long         // lVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7144 ; 50   |#define BOOL    unsigned int        // bVarName
                             7145 ; 51   |#define FRACT   _fract              // frVarName
                             7146 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7147 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7148 ; 54   |#define FLOAT   float               // fVarName
                             7149 ; 55   |#define DBL     double              // dVarName
                             7150 ; 56   |#define ENUM    enum                // eVarName
                             7151 ; 57   |#define CMX     _complex            // cmxVarName
                             7152 ; 58   |typedef WORD UCS3;                   // 
                             7153 ; 59   |
                             7154 ; 60   |#define UINT16  unsigned short
                             7155 ; 61   |#define UINT8   unsigned char   
                             7156 ; 62   |#define UINT32  unsigned long
                             7157 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7158 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7159 ; 65   |#define WCHAR   UINT16
                             7160 ; 66   |
                             7161 ; 67   |//UINT128 is 16 bytes or 6 words
                             7162 ; 68   |typedef struct UINT128_3500 {   
                             7163 ; 69   |    int val[6];     
                             7164 ; 70   |} UINT128_3500;
                             7165 ; 71   |
                             7166 ; 72   |#define UINT128   UINT128_3500
                             7167 ; 73   |
                             7168 ; 74   |// Little endian word packed byte strings:   
                             7169 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7170 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7171 ; 77   |// Little endian word packed byte strings:   
                             7172 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7173 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7174 ; 80   |
                             7175 ; 81   |// Declare Memory Spaces To Use When Coding
                             7176 ; 82   |// A. Sector Buffers
                             7177 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7178 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7179 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7180 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7181 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7182 ; 88   |// B. Media DDI Memory
                             7183 ; 89   |#define MEDIA_DDI_MEM _Y
                             7184 ; 90   |
                             7185 ; 91   |
                             7186 ; 92   |
                             7187 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7188 ; 94   |// Examples of circular pointers:
                             7189 ; 95   |//    INT CIRC cpiVarName
                             7190 ; 96   |//    DWORD CIRC cpdwVarName
                             7191 ; 97   |
                             7192 ; 98   |#define RETCODE INT                 // rcVarName
                             7193 ; 99   |
                             7194 ; 100  |// generic bitfield structure
                             7195 ; 101  |struct Bitfield {
                             7196 ; 102  |    unsigned int B0  :1;
                             7197 ; 103  |    unsigned int B1  :1;
                             7198 ; 104  |    unsigned int B2  :1;
                             7199 ; 105  |    unsigned int B3  :1;
                             7200 ; 106  |    unsigned int B4  :1;
                             7201 ; 107  |    unsigned int B5  :1;
                             7202 ; 108  |    unsigned int B6  :1;
                             7203 ; 109  |    unsigned int B7  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7204 ; 110  |    unsigned int B8  :1;
                             7205 ; 111  |    unsigned int B9  :1;
                             7206 ; 112  |    unsigned int B10 :1;
                             7207 ; 113  |    unsigned int B11 :1;
                             7208 ; 114  |    unsigned int B12 :1;
                             7209 ; 115  |    unsigned int B13 :1;
                             7210 ; 116  |    unsigned int B14 :1;
                             7211 ; 117  |    unsigned int B15 :1;
                             7212 ; 118  |    unsigned int B16 :1;
                             7213 ; 119  |    unsigned int B17 :1;
                             7214 ; 120  |    unsigned int B18 :1;
                             7215 ; 121  |    unsigned int B19 :1;
                             7216 ; 122  |    unsigned int B20 :1;
                             7217 ; 123  |    unsigned int B21 :1;
                             7218 ; 124  |    unsigned int B22 :1;
                             7219 ; 125  |    unsigned int B23 :1;
                             7220 ; 126  |};
                             7221 ; 127  |
                             7222 ; 128  |union BitInt {
                             7223 ; 129  |        struct Bitfield B;
                             7224 ; 130  |        int        I;
                             7225 ; 131  |};
                             7226 ; 132  |
                             7227 ; 133  |#define MAX_MSG_LENGTH 10
                             7228 ; 134  |struct CMessage
                             7229 ; 135  |{
                             7230 ; 136  |        unsigned int m_uLength;
                             7231 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7232 ; 138  |};
                             7233 ; 139  |
                             7234 ; 140  |typedef struct {
                             7235 ; 141  |    WORD m_wLength;
                             7236 ; 142  |    WORD m_wMessage;
                             7237 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7238 ; 144  |} Message;
                             7239 ; 145  |
                             7240 ; 146  |struct MessageQueueDescriptor
                             7241 ; 147  |{
                             7242 ; 148  |        int *m_pBase;
                             7243 ; 149  |        int m_iModulo;
                             7244 ; 150  |        int m_iSize;
                             7245 ; 151  |        int *m_pHead;
                             7246 ; 152  |        int *m_pTail;
                             7247 ; 153  |};
                             7248 ; 154  |
                             7249 ; 155  |struct ModuleEntry
                             7250 ; 156  |{
                             7251 ; 157  |    int m_iSignaledEventMask;
                             7252 ; 158  |    int m_iWaitEventMask;
                             7253 ; 159  |    int m_iResourceOfCode;
                             7254 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7255 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7256 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7257 ; 163  |    int m_uTimeOutHigh;
                             7258 ; 164  |    int m_uTimeOutLow;
                             7259 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7260 ; 166  |};
                             7261 ; 167  |
                             7262 ; 168  |union WaitMask{
                             7263 ; 169  |    struct B{
                             7264 ; 170  |        unsigned int m_bNone     :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7265 ; 171  |        unsigned int m_bMessage  :1;
                             7266 ; 172  |        unsigned int m_bTimer    :1;
                             7267 ; 173  |        unsigned int m_bButton   :1;
                             7268 ; 174  |    } B;
                             7269 ; 175  |    int I;
                             7270 ; 176  |} ;
                             7271 ; 177  |
                             7272 ; 178  |
                             7273 ; 179  |struct Button {
                             7274 ; 180  |        WORD wButtonEvent;
                             7275 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7276 ; 182  |};
                             7277 ; 183  |
                             7278 ; 184  |struct Message {
                             7279 ; 185  |        WORD wMsgLength;
                             7280 ; 186  |        WORD wMsgCommand;
                             7281 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7282 ; 188  |};
                             7283 ; 189  |
                             7284 ; 190  |union EventTypes {
                             7285 ; 191  |        struct CMessage msg;
                             7286 ; 192  |        struct Button Button ;
                             7287 ; 193  |        struct Message Message;
                             7288 ; 194  |};
                             7289 ; 195  |
                             7290 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7291 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7292 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7293 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7294 ; 200  |
                             7295 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7296 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7297 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7298 ; 204  |
                             7299 ; 205  |#if DEBUG
                             7300 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7301 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7302 ; 208  |#else 
                             7303 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7304 ; 210  |#define DebugBuildAssert(x)    
                             7305 ; 211  |#endif
                             7306 ; 212  |
                             7307 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7308 ; 214  |//  #pragma asm
                             7309 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7310 ; 216  |//  #pragma endasm
                             7311 ; 217  |
                             7312 ; 218  |
                             7313 ; 219  |#ifdef COLOR_262K
                             7314 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7315 ; 221  |#elif defined(COLOR_65K)
                             7316 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7317 ; 223  |#else
                             7318 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7319 ; 225  |#endif
                             7320 ; 226  |    
                             7321 ; 227  |#endif // #ifndef _TYPES_H
                             7322 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7324 
                             7325 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7326 ; 7    |
                             7327 ; 8    |//   SYSTEM STMP Registers 
                             7328 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             7329 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7330 ; 11   |
                             7331 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             7332 ; 13   |
                             7333 ; 14   |
                             7334 ; 15   |
                             7335 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             7336 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             7337 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             7338 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             7339 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7340 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             7341 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             7342 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             7343 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             7344 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             7345 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             7346 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             7347 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             7348 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             7349 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             7350 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             7351 ; 32   |
                             7352 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             7353 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7354 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             7355 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             7356 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             7357 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             7358 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             7359 ; 40   |
                             7360 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             7361 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             7362 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             7363 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             7364 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             7365 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             7366 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             7367 ; 48   |
                             7368 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             7369 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             7370 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             7371 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             7372 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             7373 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             7374 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             7375 ; 56   |
                             7376 ; 57   |typedef union               
                             7377 ; 58   |{
                             7378 ; 59   |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7379 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             7380 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             7381 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             7382 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             7383 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             7384 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             7385 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             7386 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             7387 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             7388 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             7389 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             7390 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             7391 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             7392 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             7393 ; 74   |    } B;
                             7394 ; 75   |   unsigned int I;
                             7395 ; 76   |        unsigned int U;
                             7396 ; 77   |} lradc_ctrl_type;
                             7397 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             7398 ; 79   |
                             7399 ; 80   |
                             7400 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             7401 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             7402 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             7403 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             7404 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             7405 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             7406 ; 87   |
                             7407 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             7408 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             7409 ; 90   |
                             7410 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             7411 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             7412 ; 93   |
                             7413 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             7414 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             7415 ; 96   |
                             7416 ; 97   |
                             7417 ; 98   |typedef union               
                             7418 ; 99   |{
                             7419 ; 100  |    struct {
                             7420 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             7421 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             7422 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             7423 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             7424 ; 105  |    } B;
                             7425 ; 106  |    unsigned int I;
                             7426 ; 107  |} lradc_thrsh_type;
                             7427 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             7428 ; 109  |
                             7429 ; 110  |
                             7430 ; 111  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7431 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             7432 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             7433 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             7434 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             7435 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             7436 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             7437 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             7438 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             7439 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             7440 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             7441 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             7442 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             7443 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             7444 ; 125  |
                             7445 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             7446 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             7447 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             7448 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             7449 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             7450 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             7451 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             7452 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             7453 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             7454 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             7455 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             7456 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             7457 ; 138  |
                             7458 ; 139  |
                             7459 ; 140  |
                             7460 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             7461 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             7462 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             7463 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             7464 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             7465 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             7466 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             7467 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             7468 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             7469 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             7470 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             7471 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             7472 ; 153  |
                             7473 ; 154  |
                             7474 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             7475 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             7476 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             7477 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             7478 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             7479 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             7480 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7481 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             7482 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             7483 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             7484 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             7485 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             7486 ; 167  |
                             7487 ; 168  |typedef union               
                             7488 ; 169  |{
                             7489 ; 170  |    struct {
                             7490 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             7491 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             7492 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             7493 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             7494 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             7495 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             7496 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             7497 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7498 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7499 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             7500 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             7501 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             7502 ; 183  |    } B;
                             7503 ; 184  |    unsigned int I;
                             7504 ; 185  |} lradc_result_type;
                             7505 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             7506 ; 187  |
                             7507 ; 188  |
                             7508 ; 189  |
                             7509 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7510 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7511 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7512 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7513 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7514 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7515 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7516 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7517 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7518 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7519 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7520 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7521 ; 202  |
                             7522 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7523 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7524 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7525 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7526 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7527 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7528 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7529 ; 210  |
                             7530 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7531 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7532 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7533 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7534 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             7535 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             7536 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             7537 ; 218  |
                             7538 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             7539 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             7540 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7541 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7542 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7543 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7544 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7545 ; 226  |
                             7546 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             7547 ; 228  |
                             7548 ; 229  |
                             7549 ; 230  |
                             7550 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7551 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7552 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7553 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7554 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7555 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7556 ; 237  |
                             7557 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7558 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7559 ; 240  |
                             7560 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7561 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7562 ; 243  |
                             7563 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7564 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7565 ; 246  |
                             7566 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             7567 ; 248  |
                             7568 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7569 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7570 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7571 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7572 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7573 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7574 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7575 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7576 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7577 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7578 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7579 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7580 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7581 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7582 ; 263  |
                             7583 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7584 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7585 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7586 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7587 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7588 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7589 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7590 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7591 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7592 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7593 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7594 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7595 ; 276  |
                             7596 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7597 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7598 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7599 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7600 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7601 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7602 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             7603 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             7604 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             7605 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7606 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7607 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             7608 ; 289  |
                             7609 ; 290  |
                             7610 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7611 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7612 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7613 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7614 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7615 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7616 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7617 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7618 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7619 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7620 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7621 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7622 ; 303  |
                             7623 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             7624 ; 305  |
                             7625 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7626 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7627 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7628 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7629 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7630 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7631 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7632 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7633 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7634 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7635 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7636 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7637 ; 318  |
                             7638 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7639 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7640 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7641 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7642 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7643 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7644 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7645 ; 326  |
                             7646 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7647 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7648 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7649 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7650 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             7651 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7652 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7653 ; 334  |
                             7654 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             7655 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             7656 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7657 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7658 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7659 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7660 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7661 ; 342  |
                             7662 ; 343  |
                             7663 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7664 ; 345  |
                             7665 ; 346  |
                             7666 ; 347  |
                             7667 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7668 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7669 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7670 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7671 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7672 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7673 ; 354  |
                             7674 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7675 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7676 ; 357  |
                             7677 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7678 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7679 ; 360  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7680 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7681 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7682 ; 363  |
                             7683 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7684 ; 365  |
                             7685 ; 366  |
                             7686 ; 367  |
                             7687 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7688 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7689 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7690 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7691 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7692 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7693 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7694 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7695 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7696 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7697 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7698 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7699 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7700 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7701 ; 382  |
                             7702 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7703 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7704 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7705 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7706 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7707 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7708 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7709 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7710 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7711 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7712 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7713 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7714 ; 395  |
                             7715 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7716 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7717 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7718 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7719 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7720 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7721 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             7722 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             7723 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             7724 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7725 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7726 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7727 ; 408  |
                             7728 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7729 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7730 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7731 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7732 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7733 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7734 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7735 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7736 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7737 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7738 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7739 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7740 ; 421  |
                             7741 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             7742 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7743 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7744 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7745 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7746 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7747 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7748 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7749 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7750 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7751 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7752 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7753 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7754 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7755 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7756 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7757 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7758 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             7759 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             7760 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7761 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7762 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7763 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7764 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7765 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7766 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7767 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7768 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7769 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7770 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7771 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7772 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7773 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7774 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7775 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7776 ; 457  |
                             7777 ; 458  |//Needed by button.asm
                             7778 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7779 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7780 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7781 ; 462  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7782 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7783 ; 464  |
                             7784 ; 465  |#endif
                             7785 ; 466  |
                             7786 ; 467  |
                             7787 
                             7789 
                             7790 ; 27   |#include "regspwm.h"
                             7791 
                             7793 
                             7794 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7795 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7796 ; 3    |// Filename: regspwm.inc
                             7797 ; 4    |// Description: Register definitions for PWM interface
                             7798 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7799 ; 6    |// The following naming conventions are followed in this file.
                             7800 ; 7    |// All registers are named using the format...
                             7801 ; 8    |//     HW_<module>_<regname>
                             7802 ; 9    |// where <module> is the module name which can be any of the following...
                             7803 ; 10   |//     USB20
                             7804 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7805 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7806 ; 13   |// that module)
                             7807 ; 14   |// <regname> is the specific register within that module
                             7808 ; 15   |// We also define the following...
                             7809 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7810 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7811 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7812 ; 19   |// which does something else, and
                             7813 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7814 ; 21   |// which does something else.
                             7815 ; 22   |// Other rules
                             7816 ; 23   |//     All caps
                             7817 ; 24   |//     Numeric identifiers start at 0
                             7818 ; 25   |#if !(defined(regspwminc))
                             7819 ; 26   |#define regspwminc 1
                             7820 ; 27   |
                             7821 ; 28   |#include "types.h"
                             7822 
                             7824 
                             7825 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7826 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7827 ; 3    |//
                             7828 ; 4    |// Filename: types.h
                             7829 ; 5    |// Description: Standard data types
                             7830 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7831 ; 7    |
                             7832 ; 8    |#ifndef _TYPES_H
                             7833 ; 9    |#define _TYPES_H
                             7834 ; 10   |
                             7835 ; 11   |// TODO:  move this outta here!
                             7836 ; 12   |#if !defined(NOERROR)
                             7837 ; 13   |#define NOERROR 0
                             7838 ; 14   |#define SUCCESS 0
                             7839 ; 15   |#endif 
                             7840 ; 16   |#if !defined(SUCCESS)
                             7841 ; 17   |#define SUCCESS  0
                             7842 ; 18   |#endif
                             7843 ; 19   |#if !defined(ERROR)
                             7844 ; 20   |#define ERROR   -1
                             7845 ; 21   |#endif
                             7846 ; 22   |#if !defined(FALSE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7847 ; 23   |#define FALSE 0
                             7848 ; 24   |#endif
                             7849 ; 25   |#if !defined(TRUE)
                             7850 ; 26   |#define TRUE  1
                             7851 ; 27   |#endif
                             7852 ; 28   |
                             7853 ; 29   |#if !defined(NULL)
                             7854 ; 30   |#define NULL 0
                             7855 ; 31   |#endif
                             7856 ; 32   |
                             7857 ; 33   |#define MAX_INT     0x7FFFFF
                             7858 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7859 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7860 ; 36   |#define MAX_ULONG   (-1) 
                             7861 ; 37   |
                             7862 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7863 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7864 ; 40   |
                             7865 ; 41   |
                             7866 ; 42   |#define BYTE    unsigned char       // btVarName
                             7867 ; 43   |#define CHAR    signed char         // cVarName
                             7868 ; 44   |#define USHORT  unsigned short      // usVarName
                             7869 ; 45   |#define SHORT   unsigned short      // sVarName
                             7870 ; 46   |#define WORD    unsigned int        // wVarName
                             7871 ; 47   |#define INT     signed int          // iVarName
                             7872 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7873 ; 49   |#define LONG    signed long         // lVarName
                             7874 ; 50   |#define BOOL    unsigned int        // bVarName
                             7875 ; 51   |#define FRACT   _fract              // frVarName
                             7876 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7877 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7878 ; 54   |#define FLOAT   float               // fVarName
                             7879 ; 55   |#define DBL     double              // dVarName
                             7880 ; 56   |#define ENUM    enum                // eVarName
                             7881 ; 57   |#define CMX     _complex            // cmxVarName
                             7882 ; 58   |typedef WORD UCS3;                   // 
                             7883 ; 59   |
                             7884 ; 60   |#define UINT16  unsigned short
                             7885 ; 61   |#define UINT8   unsigned char   
                             7886 ; 62   |#define UINT32  unsigned long
                             7887 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7888 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7889 ; 65   |#define WCHAR   UINT16
                             7890 ; 66   |
                             7891 ; 67   |//UINT128 is 16 bytes or 6 words
                             7892 ; 68   |typedef struct UINT128_3500 {   
                             7893 ; 69   |    int val[6];     
                             7894 ; 70   |} UINT128_3500;
                             7895 ; 71   |
                             7896 ; 72   |#define UINT128   UINT128_3500
                             7897 ; 73   |
                             7898 ; 74   |// Little endian word packed byte strings:   
                             7899 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7900 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7901 ; 77   |// Little endian word packed byte strings:   
                             7902 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7903 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7904 ; 80   |
                             7905 ; 81   |// Declare Memory Spaces To Use When Coding
                             7906 ; 82   |// A. Sector Buffers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7907 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7908 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7909 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7910 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7911 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7912 ; 88   |// B. Media DDI Memory
                             7913 ; 89   |#define MEDIA_DDI_MEM _Y
                             7914 ; 90   |
                             7915 ; 91   |
                             7916 ; 92   |
                             7917 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7918 ; 94   |// Examples of circular pointers:
                             7919 ; 95   |//    INT CIRC cpiVarName
                             7920 ; 96   |//    DWORD CIRC cpdwVarName
                             7921 ; 97   |
                             7922 ; 98   |#define RETCODE INT                 // rcVarName
                             7923 ; 99   |
                             7924 ; 100  |// generic bitfield structure
                             7925 ; 101  |struct Bitfield {
                             7926 ; 102  |    unsigned int B0  :1;
                             7927 ; 103  |    unsigned int B1  :1;
                             7928 ; 104  |    unsigned int B2  :1;
                             7929 ; 105  |    unsigned int B3  :1;
                             7930 ; 106  |    unsigned int B4  :1;
                             7931 ; 107  |    unsigned int B5  :1;
                             7932 ; 108  |    unsigned int B6  :1;
                             7933 ; 109  |    unsigned int B7  :1;
                             7934 ; 110  |    unsigned int B8  :1;
                             7935 ; 111  |    unsigned int B9  :1;
                             7936 ; 112  |    unsigned int B10 :1;
                             7937 ; 113  |    unsigned int B11 :1;
                             7938 ; 114  |    unsigned int B12 :1;
                             7939 ; 115  |    unsigned int B13 :1;
                             7940 ; 116  |    unsigned int B14 :1;
                             7941 ; 117  |    unsigned int B15 :1;
                             7942 ; 118  |    unsigned int B16 :1;
                             7943 ; 119  |    unsigned int B17 :1;
                             7944 ; 120  |    unsigned int B18 :1;
                             7945 ; 121  |    unsigned int B19 :1;
                             7946 ; 122  |    unsigned int B20 :1;
                             7947 ; 123  |    unsigned int B21 :1;
                             7948 ; 124  |    unsigned int B22 :1;
                             7949 ; 125  |    unsigned int B23 :1;
                             7950 ; 126  |};
                             7951 ; 127  |
                             7952 ; 128  |union BitInt {
                             7953 ; 129  |        struct Bitfield B;
                             7954 ; 130  |        int        I;
                             7955 ; 131  |};
                             7956 ; 132  |
                             7957 ; 133  |#define MAX_MSG_LENGTH 10
                             7958 ; 134  |struct CMessage
                             7959 ; 135  |{
                             7960 ; 136  |        unsigned int m_uLength;
                             7961 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7962 ; 138  |};
                             7963 ; 139  |
                             7964 ; 140  |typedef struct {
                             7965 ; 141  |    WORD m_wLength;
                             7966 ; 142  |    WORD m_wMessage;
                             7967 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7968 ; 144  |} Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7969 ; 145  |
                             7970 ; 146  |struct MessageQueueDescriptor
                             7971 ; 147  |{
                             7972 ; 148  |        int *m_pBase;
                             7973 ; 149  |        int m_iModulo;
                             7974 ; 150  |        int m_iSize;
                             7975 ; 151  |        int *m_pHead;
                             7976 ; 152  |        int *m_pTail;
                             7977 ; 153  |};
                             7978 ; 154  |
                             7979 ; 155  |struct ModuleEntry
                             7980 ; 156  |{
                             7981 ; 157  |    int m_iSignaledEventMask;
                             7982 ; 158  |    int m_iWaitEventMask;
                             7983 ; 159  |    int m_iResourceOfCode;
                             7984 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7985 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7986 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7987 ; 163  |    int m_uTimeOutHigh;
                             7988 ; 164  |    int m_uTimeOutLow;
                             7989 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7990 ; 166  |};
                             7991 ; 167  |
                             7992 ; 168  |union WaitMask{
                             7993 ; 169  |    struct B{
                             7994 ; 170  |        unsigned int m_bNone     :1;
                             7995 ; 171  |        unsigned int m_bMessage  :1;
                             7996 ; 172  |        unsigned int m_bTimer    :1;
                             7997 ; 173  |        unsigned int m_bButton   :1;
                             7998 ; 174  |    } B;
                             7999 ; 175  |    int I;
                             8000 ; 176  |} ;
                             8001 ; 177  |
                             8002 ; 178  |
                             8003 ; 179  |struct Button {
                             8004 ; 180  |        WORD wButtonEvent;
                             8005 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8006 ; 182  |};
                             8007 ; 183  |
                             8008 ; 184  |struct Message {
                             8009 ; 185  |        WORD wMsgLength;
                             8010 ; 186  |        WORD wMsgCommand;
                             8011 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8012 ; 188  |};
                             8013 ; 189  |
                             8014 ; 190  |union EventTypes {
                             8015 ; 191  |        struct CMessage msg;
                             8016 ; 192  |        struct Button Button ;
                             8017 ; 193  |        struct Message Message;
                             8018 ; 194  |};
                             8019 ; 195  |
                             8020 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8021 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8022 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8023 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8024 ; 200  |
                             8025 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8026 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8027 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8028 ; 204  |
                             8029 ; 205  |#if DEBUG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8030 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8031 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8032 ; 208  |#else 
                             8033 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8034 ; 210  |#define DebugBuildAssert(x)    
                             8035 ; 211  |#endif
                             8036 ; 212  |
                             8037 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8038 ; 214  |//  #pragma asm
                             8039 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8040 ; 216  |//  #pragma endasm
                             8041 ; 217  |
                             8042 ; 218  |
                             8043 ; 219  |#ifdef COLOR_262K
                             8044 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8045 ; 221  |#elif defined(COLOR_65K)
                             8046 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8047 ; 223  |#else
                             8048 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8049 ; 225  |#endif
                             8050 ; 226  |    
                             8051 ; 227  |#endif // #ifndef _TYPES_H
                             8052 
                             8054 
                             8055 ; 29   |
                             8056 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8057 ; 31   |//   Pulse Width Modulator STMP Registers 
                             8058 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8059 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             8060 ; 34   |
                             8061 ; 35   |
                             8062 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8063 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             8064 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             8065 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             8066 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             8067 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             8068 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             8069 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             8070 ; 44   |
                             8071 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             8072 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             8073 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             8074 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             8075 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             8076 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             8077 ; 51   |
                             8078 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             8079 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
                             8080 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             8081 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             8082 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             8083 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8084 ; 58   |
                             8085 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             8086 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             8087 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             8088 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             8089 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             8090 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             8091 ; 65   |
                             8092 ; 66   |typedef union               
                             8093 ; 67   |{
                             8094 ; 68   |    struct {
                             8095 ; 69   |        int PWM0_EN                    :1;
                             8096 ; 70   |        int PWM1_EN                    :1;
                             8097 ; 71   |        int PWM2_EN                    :1;
                             8098 ; 72   |        int PWM3_EN                    :1;
                             8099 ; 73   |        int RSVD0                      :4;
                             8100 ; 74   |        int CDIV                       :2;
                             8101 ; 75   |        int RSVD1                      :13;
                             8102 ; 76   |        int MSTR_EN                    :1;
                             8103 ; 77   |    } B;
                             8104 ; 78   |    int I;
                             8105 ; 79   |} pwmcsr_type;
                             8106 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             8107 ; 81   |
                             8108 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             8109 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             8110 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             8111 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             8112 ; 86   |
                             8113 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             8114 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             8115 ; 89   |
                             8116 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                             8117 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             8118 ; 92   |
                             8119 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             8120 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             8121 ; 95   |
                             8122 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             8123 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             8124 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             8125 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             8126 ; 100  |
                             8127 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             8128 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             8129 ; 103  |
                             8130 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             8131 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             8132 ; 106  |
                             8133 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             8134 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             8135 ; 109  |
                             8136 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             8137 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             8138 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             8139 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             8140 ; 114  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8141 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             8142 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             8143 ; 117  |
                             8144 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             8145 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             8146 ; 120  |
                             8147 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             8148 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             8149 ; 123  |
                             8150 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8151 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             8152 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             8153 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             8154 ; 128  |
                             8155 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             8156 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             8157 ; 131  |
                             8158 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             8159 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             8160 ; 134  |
                             8161 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             8162 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             8163 ; 137  |
                             8164 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             8165 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             8166 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             8167 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             8168 ; 142  |
                             8169 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             8170 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             8171 ; 145  |
                             8172 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             8173 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             8174 ; 148  |
                             8175 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             8176 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             8177 ; 151  |
                             8178 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             8179 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             8180 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             8181 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             8182 ; 156  |
                             8183 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             8184 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             8185 ; 159  |
                             8186 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             8187 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
                             8188 ; 162  |
                             8189 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             8190 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             8191 ; 165  |
                             8192 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             8193 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             8194 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8195 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             8196 ; 170  |
                             8197 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             8198 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             8199 ; 173  |
                             8200 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             8201 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             8202 ; 176  |
                             8203 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             8204 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             8205 ; 179  |
                             8206 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             8207 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             8208 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             8209 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             8210 ; 184  |
                             8211 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             8212 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             8213 ; 187  |
                             8214 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             8215 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             8216 ; 190  |
                             8217 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             8218 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             8219 ; 193  |
                             8220 ; 194  |typedef union               
                             8221 ; 195  |{
                             8222 ; 196  |    struct {
                             8223 ; 197  |       int ACTIVE                    :12;
                             8224 ; 198  |       int INACTIVE                  :12;
                             8225 ; 199  |    } B;
                             8226 ; 200  |    int I;
                             8227 ; 201  |} pwmchan_type;
                             8228 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             8229 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             8230 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             8231 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             8232 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             8233 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                             8234 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             8235 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             8236 ; 210  |
                             8237 ; 211  |#endif
                             8238 ; 212  |
                             8239 ; 213  |
                             8240 ; 214  |
                             8241 ; 215  |
                             8242 
                             8244 
                             8245 ; 28   |#include "regsrevision.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8246 
                             8248 
                             8249 ; 1    |#if !(defined(__HW_REVR))
                             8250 ; 2    |#define __HW_REVR 1
                             8251 ; 3    |
                             8252 ; 4    |
                             8253 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             8254 ; 6    |
                             8255 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             8256 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             8257 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             8258 ; 10   |
                             8259 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             8260 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             8261 ; 13   |
                             8262 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             8263 ; 15   |
                             8264 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             8265 ; 17   |
                             8266 ; 18   |
                             8267 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             8268 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             8269 ; 21   |//  June15 2004: C struct updated to be correct: 
                             8270 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             8271 ; 23   |typedef union               
                             8272 ; 24   |{
                             8273 ; 25   |    struct {
                             8274 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             8275 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             8276 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             8277 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             8278 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             8279 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             8280 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             8281 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             8282 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             8283 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             8284 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             8285 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             8286 ; 38   |    } B;
                             8287 ; 39   |
                             8288 ; 40   |    int I;
                             8289 ; 41   |
                             8290 ; 42   |} revr_type;
                             8291 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             8292 ; 44   |
                             8293 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             8294 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             8295 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             8296 ; 48   |
                             8297 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             8298 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             8299 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             8300 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             8301 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             8302 ; 54   |
                             8303 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             8304 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8305 ; 57   |
                             8306 ; 58   |#endif //!@def(__HW_REVR)
                             8307 ; 59   |
                             8308 
                             8310 
                             8311 ; 29   |#include "regsrtc.h"
                             8312 
                             8314 
                             8315 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8316 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8317 ; 3    |// Filename: regsrtc.inc
                             8318 ; 4    |// Description: Register definitions for RTC interface
                             8319 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8320 ; 6    |// The following naming conventions are followed in this file.
                             8321 ; 7    |// All registers are named using the format...
                             8322 ; 8    |//     HW_<module>_<regname>
                             8323 ; 9    |// where <module> is the module name which can be any of the following...
                             8324 ; 10   |//     USB20
                             8325 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8326 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8327 ; 13   |// that module)
                             8328 ; 14   |// <regname> is the specific register within that module
                             8329 ; 15   |// We also define the following...
                             8330 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8331 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8332 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8333 ; 19   |// which does something else, and
                             8334 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8335 ; 21   |// which does something else.
                             8336 ; 22   |// Other rules
                             8337 ; 23   |//     All caps
                             8338 ; 24   |//     Numeric identifiers start at 0
                             8339 ; 25   |#if !(defined(regsrtcinc))
                             8340 ; 26   |#define regsrtcinc 1
                             8341 ; 27   |
                             8342 ; 28   |#include "types.h"
                             8343 
                             8345 
                             8346 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8347 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8348 ; 3    |//
                             8349 ; 4    |// Filename: types.h
                             8350 ; 5    |// Description: Standard data types
                             8351 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8352 ; 7    |
                             8353 ; 8    |#ifndef _TYPES_H
                             8354 ; 9    |#define _TYPES_H
                             8355 ; 10   |
                             8356 ; 11   |// TODO:  move this outta here!
                             8357 ; 12   |#if !defined(NOERROR)
                             8358 ; 13   |#define NOERROR 0
                             8359 ; 14   |#define SUCCESS 0
                             8360 ; 15   |#endif 
                             8361 ; 16   |#if !defined(SUCCESS)
                             8362 ; 17   |#define SUCCESS  0
                             8363 ; 18   |#endif
                             8364 ; 19   |#if !defined(ERROR)
                             8365 ; 20   |#define ERROR   -1
                             8366 ; 21   |#endif
                             8367 ; 22   |#if !defined(FALSE)
                             8368 ; 23   |#define FALSE 0
                             8369 ; 24   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8370 ; 25   |#if !defined(TRUE)
                             8371 ; 26   |#define TRUE  1
                             8372 ; 27   |#endif
                             8373 ; 28   |
                             8374 ; 29   |#if !defined(NULL)
                             8375 ; 30   |#define NULL 0
                             8376 ; 31   |#endif
                             8377 ; 32   |
                             8378 ; 33   |#define MAX_INT     0x7FFFFF
                             8379 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8380 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8381 ; 36   |#define MAX_ULONG   (-1) 
                             8382 ; 37   |
                             8383 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8384 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8385 ; 40   |
                             8386 ; 41   |
                             8387 ; 42   |#define BYTE    unsigned char       // btVarName
                             8388 ; 43   |#define CHAR    signed char         // cVarName
                             8389 ; 44   |#define USHORT  unsigned short      // usVarName
                             8390 ; 45   |#define SHORT   unsigned short      // sVarName
                             8391 ; 46   |#define WORD    unsigned int        // wVarName
                             8392 ; 47   |#define INT     signed int          // iVarName
                             8393 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8394 ; 49   |#define LONG    signed long         // lVarName
                             8395 ; 50   |#define BOOL    unsigned int        // bVarName
                             8396 ; 51   |#define FRACT   _fract              // frVarName
                             8397 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8398 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8399 ; 54   |#define FLOAT   float               // fVarName
                             8400 ; 55   |#define DBL     double              // dVarName
                             8401 ; 56   |#define ENUM    enum                // eVarName
                             8402 ; 57   |#define CMX     _complex            // cmxVarName
                             8403 ; 58   |typedef WORD UCS3;                   // 
                             8404 ; 59   |
                             8405 ; 60   |#define UINT16  unsigned short
                             8406 ; 61   |#define UINT8   unsigned char   
                             8407 ; 62   |#define UINT32  unsigned long
                             8408 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8409 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8410 ; 65   |#define WCHAR   UINT16
                             8411 ; 66   |
                             8412 ; 67   |//UINT128 is 16 bytes or 6 words
                             8413 ; 68   |typedef struct UINT128_3500 {   
                             8414 ; 69   |    int val[6];     
                             8415 ; 70   |} UINT128_3500;
                             8416 ; 71   |
                             8417 ; 72   |#define UINT128   UINT128_3500
                             8418 ; 73   |
                             8419 ; 74   |// Little endian word packed byte strings:   
                             8420 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8421 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8422 ; 77   |// Little endian word packed byte strings:   
                             8423 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8424 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8425 ; 80   |
                             8426 ; 81   |// Declare Memory Spaces To Use When Coding
                             8427 ; 82   |// A. Sector Buffers
                             8428 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8429 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8430 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8431 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8432 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8433 ; 88   |// B. Media DDI Memory
                             8434 ; 89   |#define MEDIA_DDI_MEM _Y
                             8435 ; 90   |
                             8436 ; 91   |
                             8437 ; 92   |
                             8438 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8439 ; 94   |// Examples of circular pointers:
                             8440 ; 95   |//    INT CIRC cpiVarName
                             8441 ; 96   |//    DWORD CIRC cpdwVarName
                             8442 ; 97   |
                             8443 ; 98   |#define RETCODE INT                 // rcVarName
                             8444 ; 99   |
                             8445 ; 100  |// generic bitfield structure
                             8446 ; 101  |struct Bitfield {
                             8447 ; 102  |    unsigned int B0  :1;
                             8448 ; 103  |    unsigned int B1  :1;
                             8449 ; 104  |    unsigned int B2  :1;
                             8450 ; 105  |    unsigned int B3  :1;
                             8451 ; 106  |    unsigned int B4  :1;
                             8452 ; 107  |    unsigned int B5  :1;
                             8453 ; 108  |    unsigned int B6  :1;
                             8454 ; 109  |    unsigned int B7  :1;
                             8455 ; 110  |    unsigned int B8  :1;
                             8456 ; 111  |    unsigned int B9  :1;
                             8457 ; 112  |    unsigned int B10 :1;
                             8458 ; 113  |    unsigned int B11 :1;
                             8459 ; 114  |    unsigned int B12 :1;
                             8460 ; 115  |    unsigned int B13 :1;
                             8461 ; 116  |    unsigned int B14 :1;
                             8462 ; 117  |    unsigned int B15 :1;
                             8463 ; 118  |    unsigned int B16 :1;
                             8464 ; 119  |    unsigned int B17 :1;
                             8465 ; 120  |    unsigned int B18 :1;
                             8466 ; 121  |    unsigned int B19 :1;
                             8467 ; 122  |    unsigned int B20 :1;
                             8468 ; 123  |    unsigned int B21 :1;
                             8469 ; 124  |    unsigned int B22 :1;
                             8470 ; 125  |    unsigned int B23 :1;
                             8471 ; 126  |};
                             8472 ; 127  |
                             8473 ; 128  |union BitInt {
                             8474 ; 129  |        struct Bitfield B;
                             8475 ; 130  |        int        I;
                             8476 ; 131  |};
                             8477 ; 132  |
                             8478 ; 133  |#define MAX_MSG_LENGTH 10
                             8479 ; 134  |struct CMessage
                             8480 ; 135  |{
                             8481 ; 136  |        unsigned int m_uLength;
                             8482 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8483 ; 138  |};
                             8484 ; 139  |
                             8485 ; 140  |typedef struct {
                             8486 ; 141  |    WORD m_wLength;
                             8487 ; 142  |    WORD m_wMessage;
                             8488 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8489 ; 144  |} Message;
                             8490 ; 145  |
                             8491 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8492 ; 147  |{
                             8493 ; 148  |        int *m_pBase;
                             8494 ; 149  |        int m_iModulo;
                             8495 ; 150  |        int m_iSize;
                             8496 ; 151  |        int *m_pHead;
                             8497 ; 152  |        int *m_pTail;
                             8498 ; 153  |};
                             8499 ; 154  |
                             8500 ; 155  |struct ModuleEntry
                             8501 ; 156  |{
                             8502 ; 157  |    int m_iSignaledEventMask;
                             8503 ; 158  |    int m_iWaitEventMask;
                             8504 ; 159  |    int m_iResourceOfCode;
                             8505 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8506 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8507 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8508 ; 163  |    int m_uTimeOutHigh;
                             8509 ; 164  |    int m_uTimeOutLow;
                             8510 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8511 ; 166  |};
                             8512 ; 167  |
                             8513 ; 168  |union WaitMask{
                             8514 ; 169  |    struct B{
                             8515 ; 170  |        unsigned int m_bNone     :1;
                             8516 ; 171  |        unsigned int m_bMessage  :1;
                             8517 ; 172  |        unsigned int m_bTimer    :1;
                             8518 ; 173  |        unsigned int m_bButton   :1;
                             8519 ; 174  |    } B;
                             8520 ; 175  |    int I;
                             8521 ; 176  |} ;
                             8522 ; 177  |
                             8523 ; 178  |
                             8524 ; 179  |struct Button {
                             8525 ; 180  |        WORD wButtonEvent;
                             8526 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8527 ; 182  |};
                             8528 ; 183  |
                             8529 ; 184  |struct Message {
                             8530 ; 185  |        WORD wMsgLength;
                             8531 ; 186  |        WORD wMsgCommand;
                             8532 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8533 ; 188  |};
                             8534 ; 189  |
                             8535 ; 190  |union EventTypes {
                             8536 ; 191  |        struct CMessage msg;
                             8537 ; 192  |        struct Button Button ;
                             8538 ; 193  |        struct Message Message;
                             8539 ; 194  |};
                             8540 ; 195  |
                             8541 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8542 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8543 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8544 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8545 ; 200  |
                             8546 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8547 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8548 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8549 ; 204  |
                             8550 ; 205  |#if DEBUG
                             8551 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8552 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8553 ; 208  |#else 
                             8554 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8555 ; 210  |#define DebugBuildAssert(x)    
                             8556 ; 211  |#endif
                             8557 ; 212  |
                             8558 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8559 ; 214  |//  #pragma asm
                             8560 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8561 ; 216  |//  #pragma endasm
                             8562 ; 217  |
                             8563 ; 218  |
                             8564 ; 219  |#ifdef COLOR_262K
                             8565 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8566 ; 221  |#elif defined(COLOR_65K)
                             8567 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8568 ; 223  |#else
                             8569 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8570 ; 225  |#endif
                             8571 ; 226  |    
                             8572 ; 227  |#endif // #ifndef _TYPES_H
                             8573 
                             8575 
                             8576 ; 29   |
                             8577 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8578 ; 31   |
                             8579 ; 32   |//   RTC STMP Registers 
                             8580 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8581 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8582 ; 35   |
                             8583 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8584 ; 37   |
                             8585 ; 38   |
                             8586 ; 39   |
                             8587 ; 40   |
                             8588 ; 41   |
                             8589 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8590 ; 43   |
                             8591 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8592 ; 45   |
                             8593 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8594 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8595 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8596 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8597 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8598 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8599 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8600 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8601 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8602 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8603 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8604 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8605 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8606 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8607 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8608 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8609 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8610 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8611 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8612 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8613 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8614 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8615 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8616 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8617 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8618 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8619 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8620 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8621 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8622 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8623 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8624 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8625 ; 78   |
                             8626 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8627 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             8628 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8629 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8630 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8631 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8632 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8633 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8634 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8635 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8636 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8637 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8638 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8639 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8640 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8641 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8642 ; 95   |
                             8643 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8644 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8645 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8646 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8647 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8648 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8649 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8650 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8651 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8652 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8653 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8654 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8655 ; 108  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8656 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8657 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8658 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8659 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8660 ; 113  |
                             8661 ; 114  |
                             8662 ; 115  |typedef union               
                             8663 ; 116  |{
                             8664 ; 117  |    struct {
                             8665 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8666 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8667 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8668 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8669 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8670 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8671 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8672 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8673 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8674 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8675 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8676 ; 129  |    } B;
                             8677 ; 130  |    int I;
                             8678 ; 131  |    unsigned int U;
                             8679 ; 132  |} rtc_csr_type;
                             8680 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8681 ; 134  |
                             8682 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8683 ; 136  |
                             8684 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8685 ; 138  |
                             8686 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8687 ; 140  |
                             8688 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8689 ; 142  |
                             8690 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8691 ; 144  |
                             8692 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8693 ; 146  |
                             8694 ; 147  |typedef union               
                             8695 ; 148  |{
                             8696 ; 149  |    struct {
                             8697 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8698 ; 151  |    } B;
                             8699 ; 152  |    int I;
                             8700 ; 153  |    unsigned int U;
                             8701 ; 154  |} rtc_mseconds0_type;
                             8702 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             8703 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8704 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8705 ; 158  |
                             8706 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8707 ; 160  |
                             8708 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8709 ; 162  |
                             8710 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8711 ; 164  |
                             8712 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8713 ; 166  |
                             8714 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             8715 ; 168  |
                             8716 ; 169  |typedef union               
                             8717 ; 170  |{
                             8718 ; 171  |    struct {
                             8719 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8720 ; 173  |    } B;
                             8721 ; 174  |    int I;
                             8722 ; 175  |    unsigned int U;
                             8723 ; 176  |} rtc_mseconds1_type;
                             8724 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             8725 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8726 ; 179  |
                             8727 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8728 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8729 ; 182  |
                             8730 ; 183  |
                             8731 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8732 ; 185  |
                             8733 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8734 ; 187  |
                             8735 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8736 ; 189  |
                             8737 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8738 ; 191  |
                             8739 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8740 ; 193  |
                             8741 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8742 ; 195  |
                             8743 ; 196  |typedef union               
                             8744 ; 197  |{
                             8745 ; 198  |    struct {
                             8746 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8747 ; 200  |    } B;
                             8748 ; 201  |    int I;
                             8749 ; 202  |    unsigned int U;
                             8750 ; 203  |} rtc_watchdog_type;
                             8751 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             8752 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8753 ; 206  |
                             8754 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8755 ; 208  |
                             8756 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8757 ; 210  |
                             8758 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8759 ; 212  |
                             8760 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             8761 ; 214  |
                             8762 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8763 ; 216  |
                             8764 ; 217  |typedef union               
                             8765 ; 218  |{
                             8766 ; 219  |    struct {
                             8767 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8768 ; 221  |    } B;
                             8769 ; 222  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8770 ; 223  |    unsigned int U;
                             8771 ; 224  |} rtc_alarm0_type;
                             8772 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             8773 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8774 ; 227  |
                             8775 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8776 ; 229  |
                             8777 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8778 ; 231  |
                             8779 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8780 ; 233  |
                             8781 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             8782 ; 235  |
                             8783 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8784 ; 237  |
                             8785 ; 238  |typedef union               
                             8786 ; 239  |{
                             8787 ; 240  |    struct {
                             8788 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8789 ; 242  |    } B;
                             8790 ; 243  |    int I;
                             8791 ; 244  |    unsigned int U;
                             8792 ; 245  |} rtc_alarm1_type;
                             8793 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             8794 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8795 ; 248  |
                             8796 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8797 ; 250  |
                             8798 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8799 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8800 ; 253  |
                             8801 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8802 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8803 ; 256  |
                             8804 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8805 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             8806 ; 259  |
                             8807 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8808 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8809 ; 262  |
                             8810 ; 263  |typedef union               
                             8811 ; 264  |{
                             8812 ; 265  |    struct {
                             8813 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8814 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8815 ; 268  |    } B;
                             8816 ; 269  |    int I;
                             8817 ; 270  |    unsigned int U;
                             8818 ; 271  |} rtc_xtaldivide_type;
                             8819 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             8820 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8821 ; 274  |
                             8822 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8823 ; 276  |
                             8824 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8825 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8826 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8827 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8828 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8829 ; 282  |
                             8830 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8831 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8832 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8833 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8834 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8835 ; 288  |
                             8836 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8837 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8838 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8839 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8840 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             8841 ; 294  |
                             8842 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8843 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             8844 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             8845 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             8846 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8847 ; 300  |
                             8848 ; 301  |typedef union               
                             8849 ; 302  |{
                             8850 ; 303  |   struct {
                             8851 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8852 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8853 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8854 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8855 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8856 ; 309  |   } B;
                             8857 ; 310  |    int I;
                             8858 ; 311  |    unsigned int U;
                             8859 ; 312  |} rtc_PERSISTENT0_type;
                             8860 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             8861 ; 314  |
                             8862 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8863 ; 316  |
                             8864 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8865 ; 318  |
                             8866 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8867 ; 320  |
                             8868 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8869 ; 322  |
                             8870 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             8871 ; 324  |
                             8872 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8873 ; 326  |
                             8874 ; 327  |
                             8875 ; 328  |typedef union               
                             8876 ; 329  |{
                             8877 ; 330  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8878 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8879 ; 332  |    } B;
                             8880 ; 333  |    int I;
                             8881 ; 334  |    unsigned int U;
                             8882 ; 335  |} rtc_PERSISTENT1_type;
                             8883 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             8884 ; 337  |
                             8885 ; 338  |
                             8886 ; 339  |#endif
                             8887 ; 340  |
                             8888 ; 341  |
                             8889 ; 342  |
                             8890 ; 343  |
                             8891 ; 344  |
                             8892 ; 345  |
                             8893 ; 346  |
                             8894 ; 347  |
                             8895 ; 348  |
                             8896 ; 349  |
                             8897 ; 350  |
                             8898 ; 351  |
                             8899 ; 352  |
                             8900 ; 353  |
                             8901 
                             8903 
                             8904 ; 30   |#include "regsspare.h"
                             8905 
                             8907 
                             8908 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8909 ; 2    |#define RESGSSPARE_INC 1
                             8910 ; 3    |
                             8911 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8912 ; 5    |
                             8913 ; 6    |
                             8914 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8915 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8916 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8917 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8918 ; 11   |
                             8919 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8920 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8921 ; 14   |
                             8922 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8923 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8924 ; 17   |
                             8925 ; 18   |
                             8926 ; 19   |
                             8927 ; 20   |typedef union               
                             8928 ; 21   |{
                             8929 ; 22   |    struct {
                             8930 ; 23   |        int      I2SS       :1;     
                             8931 ; 24   |        int      USBSELECT  :1;     
                             8932 ; 25   |        unsigned            :6;
                             8933 ; 26   |        int      USBPLUGIN  :1;     
                             8934 ; 27   |        int      PSWITCH    :1;     
                             8935 ; 28   |    } B;
                             8936 ; 29   |
                             8937 ; 30   |    int I;
                             8938 ; 31   |
                             8939 ; 32   |} spare_type;
                             8940 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8941 ; 34   |
                             8942 ; 35   |
                             8943 ; 36   |
                             8944 ; 37   |#endif
                             8945 
                             8947 
                             8948 ; 31   |#include "regsspi.h"
                             8949 
                             8951 
                             8952 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8953 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8954 ; 3    |//;; Filename    : regsspi.inc
                             8955 ; 4    |//;; Description : Register definitions for SPI interface
                             8956 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8957 ; 6    |
                             8958 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8959 ; 8    |// The following naming conventions are followed in this file.
                             8960 ; 9    |// All registers are named using the format...
                             8961 ; 10   |//     HW_<module>_<regname>
                             8962 ; 11   |// where <module> is the module name which can be any of the following...
                             8963 ; 12   |//     USB20
                             8964 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8965 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8966 ; 15   |// that module)
                             8967 ; 16   |// <regname> is the specific register within that module
                             8968 ; 17   |// We also define the following...
                             8969 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8970 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8971 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8972 ; 21   |// which does something else, and
                             8973 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8974 ; 23   |// which does something else.
                             8975 ; 24   |// Other rules
                             8976 ; 25   |//     All caps
                             8977 ; 26   |//     Numeric identifiers start at 0
                             8978 ; 27   |#if !(defined(regsspiinc))
                             8979 ; 28   |#define regsspiinc 1
                             8980 ; 29   |
                             8981 ; 30   |#include "types.h"
                             8982 
                             8984 
                             8985 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8986 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8987 ; 3    |//
                             8988 ; 4    |// Filename: types.h
                             8989 ; 5    |// Description: Standard data types
                             8990 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8991 ; 7    |
                             8992 ; 8    |#ifndef _TYPES_H
                             8993 ; 9    |#define _TYPES_H
                             8994 ; 10   |
                             8995 ; 11   |// TODO:  move this outta here!
                             8996 ; 12   |#if !defined(NOERROR)
                             8997 ; 13   |#define NOERROR 0
                             8998 ; 14   |#define SUCCESS 0
                             8999 ; 15   |#endif 
                             9000 ; 16   |#if !defined(SUCCESS)
                             9001 ; 17   |#define SUCCESS  0
                             9002 ; 18   |#endif
                             9003 ; 19   |#if !defined(ERROR)
                             9004 ; 20   |#define ERROR   -1
                             9005 ; 21   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9006 ; 22   |#if !defined(FALSE)
                             9007 ; 23   |#define FALSE 0
                             9008 ; 24   |#endif
                             9009 ; 25   |#if !defined(TRUE)
                             9010 ; 26   |#define TRUE  1
                             9011 ; 27   |#endif
                             9012 ; 28   |
                             9013 ; 29   |#if !defined(NULL)
                             9014 ; 30   |#define NULL 0
                             9015 ; 31   |#endif
                             9016 ; 32   |
                             9017 ; 33   |#define MAX_INT     0x7FFFFF
                             9018 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9019 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9020 ; 36   |#define MAX_ULONG   (-1) 
                             9021 ; 37   |
                             9022 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9023 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9024 ; 40   |
                             9025 ; 41   |
                             9026 ; 42   |#define BYTE    unsigned char       // btVarName
                             9027 ; 43   |#define CHAR    signed char         // cVarName
                             9028 ; 44   |#define USHORT  unsigned short      // usVarName
                             9029 ; 45   |#define SHORT   unsigned short      // sVarName
                             9030 ; 46   |#define WORD    unsigned int        // wVarName
                             9031 ; 47   |#define INT     signed int          // iVarName
                             9032 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9033 ; 49   |#define LONG    signed long         // lVarName
                             9034 ; 50   |#define BOOL    unsigned int        // bVarName
                             9035 ; 51   |#define FRACT   _fract              // frVarName
                             9036 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9037 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9038 ; 54   |#define FLOAT   float               // fVarName
                             9039 ; 55   |#define DBL     double              // dVarName
                             9040 ; 56   |#define ENUM    enum                // eVarName
                             9041 ; 57   |#define CMX     _complex            // cmxVarName
                             9042 ; 58   |typedef WORD UCS3;                   // 
                             9043 ; 59   |
                             9044 ; 60   |#define UINT16  unsigned short
                             9045 ; 61   |#define UINT8   unsigned char   
                             9046 ; 62   |#define UINT32  unsigned long
                             9047 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9048 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9049 ; 65   |#define WCHAR   UINT16
                             9050 ; 66   |
                             9051 ; 67   |//UINT128 is 16 bytes or 6 words
                             9052 ; 68   |typedef struct UINT128_3500 {   
                             9053 ; 69   |    int val[6];     
                             9054 ; 70   |} UINT128_3500;
                             9055 ; 71   |
                             9056 ; 72   |#define UINT128   UINT128_3500
                             9057 ; 73   |
                             9058 ; 74   |// Little endian word packed byte strings:   
                             9059 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9060 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9061 ; 77   |// Little endian word packed byte strings:   
                             9062 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9063 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9064 ; 80   |
                             9065 ; 81   |// Declare Memory Spaces To Use When Coding
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9066 ; 82   |// A. Sector Buffers
                             9067 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9068 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9069 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9070 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9071 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9072 ; 88   |// B. Media DDI Memory
                             9073 ; 89   |#define MEDIA_DDI_MEM _Y
                             9074 ; 90   |
                             9075 ; 91   |
                             9076 ; 92   |
                             9077 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9078 ; 94   |// Examples of circular pointers:
                             9079 ; 95   |//    INT CIRC cpiVarName
                             9080 ; 96   |//    DWORD CIRC cpdwVarName
                             9081 ; 97   |
                             9082 ; 98   |#define RETCODE INT                 // rcVarName
                             9083 ; 99   |
                             9084 ; 100  |// generic bitfield structure
                             9085 ; 101  |struct Bitfield {
                             9086 ; 102  |    unsigned int B0  :1;
                             9087 ; 103  |    unsigned int B1  :1;
                             9088 ; 104  |    unsigned int B2  :1;
                             9089 ; 105  |    unsigned int B3  :1;
                             9090 ; 106  |    unsigned int B4  :1;
                             9091 ; 107  |    unsigned int B5  :1;
                             9092 ; 108  |    unsigned int B6  :1;
                             9093 ; 109  |    unsigned int B7  :1;
                             9094 ; 110  |    unsigned int B8  :1;
                             9095 ; 111  |    unsigned int B9  :1;
                             9096 ; 112  |    unsigned int B10 :1;
                             9097 ; 113  |    unsigned int B11 :1;
                             9098 ; 114  |    unsigned int B12 :1;
                             9099 ; 115  |    unsigned int B13 :1;
                             9100 ; 116  |    unsigned int B14 :1;
                             9101 ; 117  |    unsigned int B15 :1;
                             9102 ; 118  |    unsigned int B16 :1;
                             9103 ; 119  |    unsigned int B17 :1;
                             9104 ; 120  |    unsigned int B18 :1;
                             9105 ; 121  |    unsigned int B19 :1;
                             9106 ; 122  |    unsigned int B20 :1;
                             9107 ; 123  |    unsigned int B21 :1;
                             9108 ; 124  |    unsigned int B22 :1;
                             9109 ; 125  |    unsigned int B23 :1;
                             9110 ; 126  |};
                             9111 ; 127  |
                             9112 ; 128  |union BitInt {
                             9113 ; 129  |        struct Bitfield B;
                             9114 ; 130  |        int        I;
                             9115 ; 131  |};
                             9116 ; 132  |
                             9117 ; 133  |#define MAX_MSG_LENGTH 10
                             9118 ; 134  |struct CMessage
                             9119 ; 135  |{
                             9120 ; 136  |        unsigned int m_uLength;
                             9121 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9122 ; 138  |};
                             9123 ; 139  |
                             9124 ; 140  |typedef struct {
                             9125 ; 141  |    WORD m_wLength;
                             9126 ; 142  |    WORD m_wMessage;
                             9127 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9128 ; 144  |} Message;
                             9129 ; 145  |
                             9130 ; 146  |struct MessageQueueDescriptor
                             9131 ; 147  |{
                             9132 ; 148  |        int *m_pBase;
                             9133 ; 149  |        int m_iModulo;
                             9134 ; 150  |        int m_iSize;
                             9135 ; 151  |        int *m_pHead;
                             9136 ; 152  |        int *m_pTail;
                             9137 ; 153  |};
                             9138 ; 154  |
                             9139 ; 155  |struct ModuleEntry
                             9140 ; 156  |{
                             9141 ; 157  |    int m_iSignaledEventMask;
                             9142 ; 158  |    int m_iWaitEventMask;
                             9143 ; 159  |    int m_iResourceOfCode;
                             9144 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9145 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9146 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9147 ; 163  |    int m_uTimeOutHigh;
                             9148 ; 164  |    int m_uTimeOutLow;
                             9149 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9150 ; 166  |};
                             9151 ; 167  |
                             9152 ; 168  |union WaitMask{
                             9153 ; 169  |    struct B{
                             9154 ; 170  |        unsigned int m_bNone     :1;
                             9155 ; 171  |        unsigned int m_bMessage  :1;
                             9156 ; 172  |        unsigned int m_bTimer    :1;
                             9157 ; 173  |        unsigned int m_bButton   :1;
                             9158 ; 174  |    } B;
                             9159 ; 175  |    int I;
                             9160 ; 176  |} ;
                             9161 ; 177  |
                             9162 ; 178  |
                             9163 ; 179  |struct Button {
                             9164 ; 180  |        WORD wButtonEvent;
                             9165 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9166 ; 182  |};
                             9167 ; 183  |
                             9168 ; 184  |struct Message {
                             9169 ; 185  |        WORD wMsgLength;
                             9170 ; 186  |        WORD wMsgCommand;
                             9171 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9172 ; 188  |};
                             9173 ; 189  |
                             9174 ; 190  |union EventTypes {
                             9175 ; 191  |        struct CMessage msg;
                             9176 ; 192  |        struct Button Button ;
                             9177 ; 193  |        struct Message Message;
                             9178 ; 194  |};
                             9179 ; 195  |
                             9180 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9181 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9182 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9183 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9184 ; 200  |
                             9185 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9186 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9187 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9188 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9189 ; 205  |#if DEBUG
                             9190 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9191 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9192 ; 208  |#else 
                             9193 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9194 ; 210  |#define DebugBuildAssert(x)    
                             9195 ; 211  |#endif
                             9196 ; 212  |
                             9197 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9198 ; 214  |//  #pragma asm
                             9199 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9200 ; 216  |//  #pragma endasm
                             9201 ; 217  |
                             9202 ; 218  |
                             9203 ; 219  |#ifdef COLOR_262K
                             9204 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9205 ; 221  |#elif defined(COLOR_65K)
                             9206 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9207 ; 223  |#else
                             9208 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9209 ; 225  |#endif
                             9210 ; 226  |    
                             9211 ; 227  |#endif // #ifndef _TYPES_H
                             9212 
                             9214 
                             9215 ; 31   |
                             9216 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9217 ; 33   |
                             9218 ; 34   |//   SPI STMP3500 Registers 
                             9219 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             9220 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9221 ; 37   |
                             9222 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             9223 ; 39   |
                             9224 ; 40   |
                             9225 ; 41   |
                             9226 ; 42   |// /////////////////////////////////////////////
                             9227 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             9228 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             9229 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             9230 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             9231 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             9232 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             9233 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             9234 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             9235 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             9236 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             9237 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             9238 ; 54   |
                             9239 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             9240 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             9241 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             9242 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             9243 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             9244 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             9245 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             9246 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             9247 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9248 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             9249 ; 65   |
                             9250 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             9251 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             9252 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             9253 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             9254 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             9255 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             9256 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             9257 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             9258 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             9259 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             9260 ; 76   |
                             9261 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             9262 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             9263 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             9264 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             9265 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             9266 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             9267 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             9268 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             9269 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             9270 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             9271 ; 87   |
                             9272 ; 88   |typedef union               
                             9273 ; 89   |{
                             9274 ; 90   |    struct {
                             9275 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             9276 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             9277 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             9278 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             9279 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             9280 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             9281 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             9282 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             9283 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             9284 ; 100  |    } B;
                             9285 ; 101  |
                             9286 ; 102  |    int I;
                             9287 ; 103  |    unsigned int U;
                             9288 ; 104  |} spcsr_type;
                             9289 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             9290 ; 106  |
                             9291 ; 107  |// /////////////////////////////////////////////
                             9292 ; 108  |// //  SPI Data Register Bit Definitions
                             9293 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             9294 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             9295 ; 111  |
                             9296 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             9297 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             9298 ; 114  |
                             9299 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             9300 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             9301 ; 117  |
                             9302 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             9303 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             9304 ; 120  |
                             9305 ; 121  |typedef union               
                             9306 ; 122  |{
                             9307 ; 123  |    struct {
                             9308 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9309 ; 125  |    } B;
                             9310 ; 126  |
                             9311 ; 127  |    int I;
                             9312 ; 128  |    unsigned int U;
                             9313 ; 129  |} spdr_type;
                             9314 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             9315 ; 131  |
                             9316 ; 132  |
                             9317 ; 133  |#endif
                             9318 ; 134  |
                             9319 ; 135  |
                             9320 
                             9322 
                             9323 ; 32   |#include "regsswizzle.h"
                             9324 
                             9326 
                             9327 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9328 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             9329 ; 3    |//;; Filename    : regsswizzle.inc
                             9330 ; 4    |//;; Description : Register definitions for Swizzle interface
                             9331 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9332 ; 6    |
                             9333 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             9334 ; 8    |// The following naming conventions are followed in this file.
                             9335 ; 9    |// All registers are named using the format...
                             9336 ; 10   |//     HW_<module>_<regname>
                             9337 ; 11   |// where <module> is the module name which can be any of the following...
                             9338 ; 12   |//     USB20
                             9339 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             9340 ; 14   |// module name includes a number starting from 0 for the first instance of
                             9341 ; 15   |// that module)
                             9342 ; 16   |// <regname> is the specific register within that module
                             9343 ; 17   |// We also define the following...
                             9344 ; 18   |//     HW_<module>_<regname>_BITPOS
                             9345 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9346 ; 20   |//     HW_<module>_<regname>_SETMASK
                             9347 ; 21   |// which does something else, and
                             9348 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             9349 ; 23   |// which does something else.
                             9350 ; 24   |// Other rules
                             9351 ; 25   |//     All caps
                             9352 ; 26   |//     Numeric identifiers start at 0
                             9353 ; 27   |#if !(defined(regsswizzleinc))
                             9354 ; 28   |#define regsswizzleinc 1
                             9355 ; 29   |
                             9356 ; 30   |#include "types.h"
                             9357 
                             9359 
                             9360 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9361 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9362 ; 3    |//
                             9363 ; 4    |// Filename: types.h
                             9364 ; 5    |// Description: Standard data types
                             9365 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9366 ; 7    |
                             9367 ; 8    |#ifndef _TYPES_H
                             9368 ; 9    |#define _TYPES_H
                             9369 ; 10   |
                             9370 ; 11   |// TODO:  move this outta here!
                             9371 ; 12   |#if !defined(NOERROR)
                             9372 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9373 ; 14   |#define SUCCESS 0
                             9374 ; 15   |#endif 
                             9375 ; 16   |#if !defined(SUCCESS)
                             9376 ; 17   |#define SUCCESS  0
                             9377 ; 18   |#endif
                             9378 ; 19   |#if !defined(ERROR)
                             9379 ; 20   |#define ERROR   -1
                             9380 ; 21   |#endif
                             9381 ; 22   |#if !defined(FALSE)
                             9382 ; 23   |#define FALSE 0
                             9383 ; 24   |#endif
                             9384 ; 25   |#if !defined(TRUE)
                             9385 ; 26   |#define TRUE  1
                             9386 ; 27   |#endif
                             9387 ; 28   |
                             9388 ; 29   |#if !defined(NULL)
                             9389 ; 30   |#define NULL 0
                             9390 ; 31   |#endif
                             9391 ; 32   |
                             9392 ; 33   |#define MAX_INT     0x7FFFFF
                             9393 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9394 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9395 ; 36   |#define MAX_ULONG   (-1) 
                             9396 ; 37   |
                             9397 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9398 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9399 ; 40   |
                             9400 ; 41   |
                             9401 ; 42   |#define BYTE    unsigned char       // btVarName
                             9402 ; 43   |#define CHAR    signed char         // cVarName
                             9403 ; 44   |#define USHORT  unsigned short      // usVarName
                             9404 ; 45   |#define SHORT   unsigned short      // sVarName
                             9405 ; 46   |#define WORD    unsigned int        // wVarName
                             9406 ; 47   |#define INT     signed int          // iVarName
                             9407 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9408 ; 49   |#define LONG    signed long         // lVarName
                             9409 ; 50   |#define BOOL    unsigned int        // bVarName
                             9410 ; 51   |#define FRACT   _fract              // frVarName
                             9411 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9412 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9413 ; 54   |#define FLOAT   float               // fVarName
                             9414 ; 55   |#define DBL     double              // dVarName
                             9415 ; 56   |#define ENUM    enum                // eVarName
                             9416 ; 57   |#define CMX     _complex            // cmxVarName
                             9417 ; 58   |typedef WORD UCS3;                   // 
                             9418 ; 59   |
                             9419 ; 60   |#define UINT16  unsigned short
                             9420 ; 61   |#define UINT8   unsigned char   
                             9421 ; 62   |#define UINT32  unsigned long
                             9422 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9423 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9424 ; 65   |#define WCHAR   UINT16
                             9425 ; 66   |
                             9426 ; 67   |//UINT128 is 16 bytes or 6 words
                             9427 ; 68   |typedef struct UINT128_3500 {   
                             9428 ; 69   |    int val[6];     
                             9429 ; 70   |} UINT128_3500;
                             9430 ; 71   |
                             9431 ; 72   |#define UINT128   UINT128_3500
                             9432 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9433 ; 74   |// Little endian word packed byte strings:   
                             9434 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9435 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9436 ; 77   |// Little endian word packed byte strings:   
                             9437 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9438 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9439 ; 80   |
                             9440 ; 81   |// Declare Memory Spaces To Use When Coding
                             9441 ; 82   |// A. Sector Buffers
                             9442 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9443 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9444 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9445 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9446 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9447 ; 88   |// B. Media DDI Memory
                             9448 ; 89   |#define MEDIA_DDI_MEM _Y
                             9449 ; 90   |
                             9450 ; 91   |
                             9451 ; 92   |
                             9452 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9453 ; 94   |// Examples of circular pointers:
                             9454 ; 95   |//    INT CIRC cpiVarName
                             9455 ; 96   |//    DWORD CIRC cpdwVarName
                             9456 ; 97   |
                             9457 ; 98   |#define RETCODE INT                 // rcVarName
                             9458 ; 99   |
                             9459 ; 100  |// generic bitfield structure
                             9460 ; 101  |struct Bitfield {
                             9461 ; 102  |    unsigned int B0  :1;
                             9462 ; 103  |    unsigned int B1  :1;
                             9463 ; 104  |    unsigned int B2  :1;
                             9464 ; 105  |    unsigned int B3  :1;
                             9465 ; 106  |    unsigned int B4  :1;
                             9466 ; 107  |    unsigned int B5  :1;
                             9467 ; 108  |    unsigned int B6  :1;
                             9468 ; 109  |    unsigned int B7  :1;
                             9469 ; 110  |    unsigned int B8  :1;
                             9470 ; 111  |    unsigned int B9  :1;
                             9471 ; 112  |    unsigned int B10 :1;
                             9472 ; 113  |    unsigned int B11 :1;
                             9473 ; 114  |    unsigned int B12 :1;
                             9474 ; 115  |    unsigned int B13 :1;
                             9475 ; 116  |    unsigned int B14 :1;
                             9476 ; 117  |    unsigned int B15 :1;
                             9477 ; 118  |    unsigned int B16 :1;
                             9478 ; 119  |    unsigned int B17 :1;
                             9479 ; 120  |    unsigned int B18 :1;
                             9480 ; 121  |    unsigned int B19 :1;
                             9481 ; 122  |    unsigned int B20 :1;
                             9482 ; 123  |    unsigned int B21 :1;
                             9483 ; 124  |    unsigned int B22 :1;
                             9484 ; 125  |    unsigned int B23 :1;
                             9485 ; 126  |};
                             9486 ; 127  |
                             9487 ; 128  |union BitInt {
                             9488 ; 129  |        struct Bitfield B;
                             9489 ; 130  |        int        I;
                             9490 ; 131  |};
                             9491 ; 132  |
                             9492 ; 133  |#define MAX_MSG_LENGTH 10
                             9493 ; 134  |struct CMessage
                             9494 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9495 ; 136  |        unsigned int m_uLength;
                             9496 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9497 ; 138  |};
                             9498 ; 139  |
                             9499 ; 140  |typedef struct {
                             9500 ; 141  |    WORD m_wLength;
                             9501 ; 142  |    WORD m_wMessage;
                             9502 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9503 ; 144  |} Message;
                             9504 ; 145  |
                             9505 ; 146  |struct MessageQueueDescriptor
                             9506 ; 147  |{
                             9507 ; 148  |        int *m_pBase;
                             9508 ; 149  |        int m_iModulo;
                             9509 ; 150  |        int m_iSize;
                             9510 ; 151  |        int *m_pHead;
                             9511 ; 152  |        int *m_pTail;
                             9512 ; 153  |};
                             9513 ; 154  |
                             9514 ; 155  |struct ModuleEntry
                             9515 ; 156  |{
                             9516 ; 157  |    int m_iSignaledEventMask;
                             9517 ; 158  |    int m_iWaitEventMask;
                             9518 ; 159  |    int m_iResourceOfCode;
                             9519 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9520 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9521 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9522 ; 163  |    int m_uTimeOutHigh;
                             9523 ; 164  |    int m_uTimeOutLow;
                             9524 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9525 ; 166  |};
                             9526 ; 167  |
                             9527 ; 168  |union WaitMask{
                             9528 ; 169  |    struct B{
                             9529 ; 170  |        unsigned int m_bNone     :1;
                             9530 ; 171  |        unsigned int m_bMessage  :1;
                             9531 ; 172  |        unsigned int m_bTimer    :1;
                             9532 ; 173  |        unsigned int m_bButton   :1;
                             9533 ; 174  |    } B;
                             9534 ; 175  |    int I;
                             9535 ; 176  |} ;
                             9536 ; 177  |
                             9537 ; 178  |
                             9538 ; 179  |struct Button {
                             9539 ; 180  |        WORD wButtonEvent;
                             9540 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9541 ; 182  |};
                             9542 ; 183  |
                             9543 ; 184  |struct Message {
                             9544 ; 185  |        WORD wMsgLength;
                             9545 ; 186  |        WORD wMsgCommand;
                             9546 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9547 ; 188  |};
                             9548 ; 189  |
                             9549 ; 190  |union EventTypes {
                             9550 ; 191  |        struct CMessage msg;
                             9551 ; 192  |        struct Button Button ;
                             9552 ; 193  |        struct Message Message;
                             9553 ; 194  |};
                             9554 ; 195  |
                             9555 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9556 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9557 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9558 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9559 ; 200  |
                             9560 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9561 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9562 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9563 ; 204  |
                             9564 ; 205  |#if DEBUG
                             9565 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9566 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9567 ; 208  |#else 
                             9568 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9569 ; 210  |#define DebugBuildAssert(x)    
                             9570 ; 211  |#endif
                             9571 ; 212  |
                             9572 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9573 ; 214  |//  #pragma asm
                             9574 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9575 ; 216  |//  #pragma endasm
                             9576 ; 217  |
                             9577 ; 218  |
                             9578 ; 219  |#ifdef COLOR_262K
                             9579 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9580 ; 221  |#elif defined(COLOR_65K)
                             9581 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9582 ; 223  |#else
                             9583 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9584 ; 225  |#endif
                             9585 ; 226  |    
                             9586 ; 227  |#endif // #ifndef _TYPES_H
                             9587 
                             9589 
                             9590 ; 31   |
                             9591 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9592 ; 33   |
                             9593 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9594 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9595 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9596 ; 37   |
                             9597 ; 38   |
                             9598 ; 39   |
                             9599 ; 40   |
                             9600 ; 41   |
                             9601 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9602 ; 43   |
                             9603 ; 44   |
                             9604 ; 45   |
                             9605 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9606 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9607 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9608 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9609 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9610 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9611 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9612 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9613 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9614 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9615 ; 56   |
                             9616 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9617 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9618 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9619 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9620 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9621 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9622 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9623 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9624 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9625 ; 66   |
                             9626 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                             9627 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                             9628 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                             9629 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                             9630 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                             9631 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                             9632 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                             9633 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                             9634 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                             9635 ; 76   |
                             9636 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9637 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9638 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9639 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9640 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9641 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9642 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9643 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9644 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9645 ; 86   |
                             9646 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9647 ; 88   |//  Bit Manipulation Unit Registers
                             9648 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9649 ; 90   |typedef union
                             9650 ; 91   |{
                             9651 ; 92   |    struct
                             9652 ; 93   |    {
                             9653 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9654 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9655 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9656 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9657 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9658 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9659 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9660 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9661 ; 102  |    } B;
                             9662 ; 103  |    int I;
                             9663 ; 104  |    unsigned U;
                             9664 ; 105  |} swizzlecsr1_type;
                             9665 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9666 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9667 ; 108  |
                             9668 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9669 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9670 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9671 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9672 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9673 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9674 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9675 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9676 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9677 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9678 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9679 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9680 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9681 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9682 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9683 ; 124  |
                             9684 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9685 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9686 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9687 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9688 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9689 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9690 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9691 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9692 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9693 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9694 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9695 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9696 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9697 ; 138  |
                             9698 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                             9699 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                             9700 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                             9701 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                             9702 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                             9703 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                             9704 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                             9705 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                             9706 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                             9707 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                             9708 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
                             9709 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                             9710 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                             9711 ; 152  |
                             9712 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9713 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9714 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9715 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9716 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9717 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9718 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9719 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9720 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9721 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9722 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9723 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9724 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9725 ; 166  |
                             9726 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9727 ; 168  |typedef union
                             9728 ; 169  |{
                             9729 ; 170  |    struct
                             9730 ; 171  |    {
                             9731 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9732 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9733 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9734 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9735 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9736 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9737 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9738 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9739 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9740 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9741 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9742 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9743 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9744 ; 185  |    } B;
                             9745 ; 186  |    unsigned int I;
                             9746 ; 187  |    unsigned int U;
                             9747 ; 188  |} swizzlecsr2_type;
                             9748 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9749 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                             9750 ; 191  |
                             9751 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9752 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9753 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9754 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9755 ; 196  |
                             9756 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9757 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9758 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9759 ; 200  |
                             9760 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                             9761 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                             9762 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                             9763 ; 204  |
                             9764 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9765 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9766 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9767 ; 208  |
                             9768 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9769 ; 210  |typedef union
                             9770 ; 211  |{
                             9771 ; 212  |    struct
                             9772 ; 213  |    {
                             9773 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9774 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9775 ; 216  |    } B;
                             9776 ; 217  |    int I;
                             9777 ; 218  |    unsigned U;
                             9778 ; 219  |} swizzlesizer_type;
                             9779 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9780 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                             9781 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                             9782 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                             9783 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                             9784 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                             9785 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                             9786 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                             9787 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                             9788 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                             9789 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                             9790 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                             9791 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                             9792 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                             9793 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                             9794 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                             9795 ; 236  |
                             9796 ; 237  |
                             9797 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9798 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9799 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9800 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9801 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9802 ; 243  |
                             9803 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9804 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9805 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9806 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9807 ; 248  |
                             9808 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9809 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
                             9810 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                             9811 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                             9812 ; 253  |
                             9813 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9814 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9815 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9816 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9817 ; 258  |
                             9818 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9819 ; 260  |typedef union
                             9820 ; 261  |{
                             9821 ; 262  |    struct
                             9822 ; 263  |    {
                             9823 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9824 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9825 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9826 ; 267  |    } B;
                             9827 ; 268  |    int I;
                             9828 ; 269  |    unsigned U;
                             9829 ; 270  |} swizzlediv3ur_type;
                             9830 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9831 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                             9832 ; 273  |
                             9833 ; 274  |#endif
                             9834 ; 275  |
                             9835 
                             9837 
                             9838 ; 33   |#include "regssdram.h"
                             9839 
                             9841 
                             9842 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9843 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9844 ; 3    |//;  File        : regssdram.inc
                             9845 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9846 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9847 ; 6    |
                             9848 ; 7    |// The following naming conventions are followed in this file.
                             9849 ; 8    |// All registers are named using the format...
                             9850 ; 9    |//     HW_<module>_<regname>
                             9851 ; 10   |// where <module> is the module name which can be any of the following...
                             9852 ; 11   |//     SYSTEM
                             9853 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9854 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9855 ; 14   |// that module)
                             9856 ; 15   |// <regname> is the specific register within that module
                             9857 ; 16   |// We also define the following...
                             9858 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9859 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9860 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9861 ; 20   |// which does something else, and
                             9862 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9863 ; 22   |// which does something else.
                             9864 ; 23   |// Other rules
                             9865 ; 24   |//     All caps
                             9866 ; 25   |//     Numeric identifiers start at 0
                             9867 ; 26   |
                             9868 ; 27   |#if !(defined(regssdraminc))
                             9869 ; 28   |#define regssdraminc 1
                             9870 ; 29   |
                             9871 ; 30   |#include "types.h"
                             9872 
                             9874 
                             9875 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9876 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9877 ; 3    |//
                             9878 ; 4    |// Filename: types.h
                             9879 ; 5    |// Description: Standard data types
                             9880 ; 6    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9881 ; 7    |
                             9882 ; 8    |#ifndef _TYPES_H
                             9883 ; 9    |#define _TYPES_H
                             9884 ; 10   |
                             9885 ; 11   |// TODO:  move this outta here!
                             9886 ; 12   |#if !defined(NOERROR)
                             9887 ; 13   |#define NOERROR 0
                             9888 ; 14   |#define SUCCESS 0
                             9889 ; 15   |#endif 
                             9890 ; 16   |#if !defined(SUCCESS)
                             9891 ; 17   |#define SUCCESS  0
                             9892 ; 18   |#endif
                             9893 ; 19   |#if !defined(ERROR)
                             9894 ; 20   |#define ERROR   -1
                             9895 ; 21   |#endif
                             9896 ; 22   |#if !defined(FALSE)
                             9897 ; 23   |#define FALSE 0
                             9898 ; 24   |#endif
                             9899 ; 25   |#if !defined(TRUE)
                             9900 ; 26   |#define TRUE  1
                             9901 ; 27   |#endif
                             9902 ; 28   |
                             9903 ; 29   |#if !defined(NULL)
                             9904 ; 30   |#define NULL 0
                             9905 ; 31   |#endif
                             9906 ; 32   |
                             9907 ; 33   |#define MAX_INT     0x7FFFFF
                             9908 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9909 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9910 ; 36   |#define MAX_ULONG   (-1) 
                             9911 ; 37   |
                             9912 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9913 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9914 ; 40   |
                             9915 ; 41   |
                             9916 ; 42   |#define BYTE    unsigned char       // btVarName
                             9917 ; 43   |#define CHAR    signed char         // cVarName
                             9918 ; 44   |#define USHORT  unsigned short      // usVarName
                             9919 ; 45   |#define SHORT   unsigned short      // sVarName
                             9920 ; 46   |#define WORD    unsigned int        // wVarName
                             9921 ; 47   |#define INT     signed int          // iVarName
                             9922 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9923 ; 49   |#define LONG    signed long         // lVarName
                             9924 ; 50   |#define BOOL    unsigned int        // bVarName
                             9925 ; 51   |#define FRACT   _fract              // frVarName
                             9926 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9927 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9928 ; 54   |#define FLOAT   float               // fVarName
                             9929 ; 55   |#define DBL     double              // dVarName
                             9930 ; 56   |#define ENUM    enum                // eVarName
                             9931 ; 57   |#define CMX     _complex            // cmxVarName
                             9932 ; 58   |typedef WORD UCS3;                   // 
                             9933 ; 59   |
                             9934 ; 60   |#define UINT16  unsigned short
                             9935 ; 61   |#define UINT8   unsigned char   
                             9936 ; 62   |#define UINT32  unsigned long
                             9937 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9938 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9939 ; 65   |#define WCHAR   UINT16
                             9940 ; 66   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9941 ; 67   |//UINT128 is 16 bytes or 6 words
                             9942 ; 68   |typedef struct UINT128_3500 {   
                             9943 ; 69   |    int val[6];     
                             9944 ; 70   |} UINT128_3500;
                             9945 ; 71   |
                             9946 ; 72   |#define UINT128   UINT128_3500
                             9947 ; 73   |
                             9948 ; 74   |// Little endian word packed byte strings:   
                             9949 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9950 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9951 ; 77   |// Little endian word packed byte strings:   
                             9952 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9953 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9954 ; 80   |
                             9955 ; 81   |// Declare Memory Spaces To Use When Coding
                             9956 ; 82   |// A. Sector Buffers
                             9957 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9958 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9959 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9960 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9961 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9962 ; 88   |// B. Media DDI Memory
                             9963 ; 89   |#define MEDIA_DDI_MEM _Y
                             9964 ; 90   |
                             9965 ; 91   |
                             9966 ; 92   |
                             9967 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9968 ; 94   |// Examples of circular pointers:
                             9969 ; 95   |//    INT CIRC cpiVarName
                             9970 ; 96   |//    DWORD CIRC cpdwVarName
                             9971 ; 97   |
                             9972 ; 98   |#define RETCODE INT                 // rcVarName
                             9973 ; 99   |
                             9974 ; 100  |// generic bitfield structure
                             9975 ; 101  |struct Bitfield {
                             9976 ; 102  |    unsigned int B0  :1;
                             9977 ; 103  |    unsigned int B1  :1;
                             9978 ; 104  |    unsigned int B2  :1;
                             9979 ; 105  |    unsigned int B3  :1;
                             9980 ; 106  |    unsigned int B4  :1;
                             9981 ; 107  |    unsigned int B5  :1;
                             9982 ; 108  |    unsigned int B6  :1;
                             9983 ; 109  |    unsigned int B7  :1;
                             9984 ; 110  |    unsigned int B8  :1;
                             9985 ; 111  |    unsigned int B9  :1;
                             9986 ; 112  |    unsigned int B10 :1;
                             9987 ; 113  |    unsigned int B11 :1;
                             9988 ; 114  |    unsigned int B12 :1;
                             9989 ; 115  |    unsigned int B13 :1;
                             9990 ; 116  |    unsigned int B14 :1;
                             9991 ; 117  |    unsigned int B15 :1;
                             9992 ; 118  |    unsigned int B16 :1;
                             9993 ; 119  |    unsigned int B17 :1;
                             9994 ; 120  |    unsigned int B18 :1;
                             9995 ; 121  |    unsigned int B19 :1;
                             9996 ; 122  |    unsigned int B20 :1;
                             9997 ; 123  |    unsigned int B21 :1;
                             9998 ; 124  |    unsigned int B22 :1;
                             9999 ; 125  |    unsigned int B23 :1;
                            10000 ; 126  |};
                            10001 ; 127  |
                            10002 ; 128  |union BitInt {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10003 ; 129  |        struct Bitfield B;
                            10004 ; 130  |        int        I;
                            10005 ; 131  |};
                            10006 ; 132  |
                            10007 ; 133  |#define MAX_MSG_LENGTH 10
                            10008 ; 134  |struct CMessage
                            10009 ; 135  |{
                            10010 ; 136  |        unsigned int m_uLength;
                            10011 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10012 ; 138  |};
                            10013 ; 139  |
                            10014 ; 140  |typedef struct {
                            10015 ; 141  |    WORD m_wLength;
                            10016 ; 142  |    WORD m_wMessage;
                            10017 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10018 ; 144  |} Message;
                            10019 ; 145  |
                            10020 ; 146  |struct MessageQueueDescriptor
                            10021 ; 147  |{
                            10022 ; 148  |        int *m_pBase;
                            10023 ; 149  |        int m_iModulo;
                            10024 ; 150  |        int m_iSize;
                            10025 ; 151  |        int *m_pHead;
                            10026 ; 152  |        int *m_pTail;
                            10027 ; 153  |};
                            10028 ; 154  |
                            10029 ; 155  |struct ModuleEntry
                            10030 ; 156  |{
                            10031 ; 157  |    int m_iSignaledEventMask;
                            10032 ; 158  |    int m_iWaitEventMask;
                            10033 ; 159  |    int m_iResourceOfCode;
                            10034 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10035 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10036 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10037 ; 163  |    int m_uTimeOutHigh;
                            10038 ; 164  |    int m_uTimeOutLow;
                            10039 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10040 ; 166  |};
                            10041 ; 167  |
                            10042 ; 168  |union WaitMask{
                            10043 ; 169  |    struct B{
                            10044 ; 170  |        unsigned int m_bNone     :1;
                            10045 ; 171  |        unsigned int m_bMessage  :1;
                            10046 ; 172  |        unsigned int m_bTimer    :1;
                            10047 ; 173  |        unsigned int m_bButton   :1;
                            10048 ; 174  |    } B;
                            10049 ; 175  |    int I;
                            10050 ; 176  |} ;
                            10051 ; 177  |
                            10052 ; 178  |
                            10053 ; 179  |struct Button {
                            10054 ; 180  |        WORD wButtonEvent;
                            10055 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10056 ; 182  |};
                            10057 ; 183  |
                            10058 ; 184  |struct Message {
                            10059 ; 185  |        WORD wMsgLength;
                            10060 ; 186  |        WORD wMsgCommand;
                            10061 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10062 ; 188  |};
                            10063 ; 189  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10064 ; 190  |union EventTypes {
                            10065 ; 191  |        struct CMessage msg;
                            10066 ; 192  |        struct Button Button ;
                            10067 ; 193  |        struct Message Message;
                            10068 ; 194  |};
                            10069 ; 195  |
                            10070 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10071 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10072 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10073 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10074 ; 200  |
                            10075 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10076 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10077 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10078 ; 204  |
                            10079 ; 205  |#if DEBUG
                            10080 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10081 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10082 ; 208  |#else 
                            10083 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10084 ; 210  |#define DebugBuildAssert(x)    
                            10085 ; 211  |#endif
                            10086 ; 212  |
                            10087 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10088 ; 214  |//  #pragma asm
                            10089 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10090 ; 216  |//  #pragma endasm
                            10091 ; 217  |
                            10092 ; 218  |
                            10093 ; 219  |#ifdef COLOR_262K
                            10094 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10095 ; 221  |#elif defined(COLOR_65K)
                            10096 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10097 ; 223  |#else
                            10098 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10099 ; 225  |#endif
                            10100 ; 226  |    
                            10101 ; 227  |#endif // #ifndef _TYPES_H
                            10102 
                            10104 
                            10105 ; 31   |
                            10106 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            10107 ; 33   |
                            10108 ; 34   |
                            10109 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            10110 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            10111 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            10112 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            10113 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            10114 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            10115 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            10116 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            10117 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            10118 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            10119 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            10120 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            10121 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            10122 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10123 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            10124 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            10125 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            10126 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            10127 ; 53   |
                            10128 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            10129 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            10130 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            10131 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            10132 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            10133 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            10134 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            10135 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            10136 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            10137 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            10138 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            10139 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            10140 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            10141 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            10142 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            10143 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            10144 ; 70   |
                            10145 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                            10146 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            10147 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                            10148 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                            10149 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            10150 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                            10151 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                            10152 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                            10153 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                            10154 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                            10155 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                            10156 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                            10157 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                            10158 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                            10159 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                            10160 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                            10161 ; 87   |
                            10162 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            10163 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            10164 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            10165 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            10166 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            10167 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            10168 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            10169 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            10170 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10171 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            10172 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            10173 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            10174 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            10175 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            10176 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            10177 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            10178 ; 104  |
                            10179 ; 105  |typedef union               
                            10180 ; 106  |{
                            10181 ; 107  |    struct {
                            10182 ; 108  |        int SDRAMEN                     :1;
                            10183 ; 109  |        int IE                          :1;
                            10184 ; 110  |        int RNW                         :1;
                            10185 ; 111  |        int KICK                        :1;
                            10186 ; 112  |        int LM                          :1;
                            10187 ; 113  |        int ISTAT                       :1;
                            10188 ; 114  |        int PWDN                        :1;
                            10189 ; 115  |        int RSVD                        :1;
                            10190 ; 116  |        int SBYTE                       :2;
                            10191 ; 117  |        int MEM                         :2;
                            10192 ; 118  |        int BIGE                        :1;
                            10193 ; 119  |        int ASIZE                       :3;
                            10194 ; 120  |        int UKICK                       :1;
                            10195 ; 121  |        int DIV                         :4;
                            10196 ; 122  |        int MULTI                       :1;
                            10197 ; 123  |        int SDRAM                       :1;
                            10198 ; 124  |        int SIGN                        :1;
                            10199 ; 125  |    } B;
                            10200 ; 126  |    int I;
                            10201 ; 127  |} sdramcsr_type;
                            10202 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            10203 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            10204 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            10205 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            10206 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            10207 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            10208 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            10209 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            10210 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            10211 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            10212 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            10213 ; 139  |
                            10214 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            10215 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            10216 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            10217 ; 143  |
                            10218 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            10219 ; 145  |
                            10220 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            10221 ; 147  |
                            10222 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            10223 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            10224 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            10225 ; 151  |
                            10226 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            10227 ; 153  |
                            10228 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            10229 ; 155  |
                            10230 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            10231 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            10232 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10233 ; 159  |
                            10234 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            10235 ; 161  |
                            10236 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            10237 ; 163  |
                            10238 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            10239 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            10240 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            10241 ; 167  |
                            10242 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            10243 ; 169  |
                            10244 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            10245 ; 171  |
                            10246 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            10247 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            10248 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            10249 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            10250 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            10251 ; 177  |
                            10252 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            10253 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            10254 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            10255 ; 181  |
                            10256 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                            10257 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                            10258 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                            10259 ; 185  |
                            10260 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            10261 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            10262 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            10263 ; 189  |
                            10264 ; 190  |typedef union               
                            10265 ; 191  |{
                            10266 ; 192  |    struct {
                            10267 ; 193  |        int INIT                :16;
                            10268 ; 194  |        int TRP                 :4;
                            10269 ; 195  |        int TRFC                :4;
                            10270 ; 196  |    } B;
                            10271 ; 197  |    int I;
                            10272 ; 198  |} sdramtimer1_type;
                            10273 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            10274 ; 200  |
                            10275 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            10276 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            10277 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            10278 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            10279 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            10280 ; 206  |
                            10281 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            10282 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            10283 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            10284 ; 210  |
                            10285 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                            10286 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                            10287 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                            10288 ; 214  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10289 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            10290 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            10291 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            10292 ; 218  |
                            10293 ; 219  |typedef union               
                            10294 ; 220  |{
                            10295 ; 221  |    struct {
                            10296 ; 222  |        int TXSR                :4;
                            10297 ; 223  |        int TREF                :12;
                            10298 ; 224  |        int TRCD                :4;
                            10299 ; 225  |        int RSVD                :4; 
                            10300 ; 226  |    } B;
                            10301 ; 227  |    int I;
                            10302 ; 228  |} sdramtimer2_type;
                            10303 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            10304 ; 230  |
                            10305 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            10306 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            10307 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            10308 ; 234  |
                            10309 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            10310 ; 236  |
                            10311 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            10312 ; 238  |
                            10313 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            10314 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            10315 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            10316 ; 242  |
                            10317 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            10318 ; 244  |
                            10319 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            10320 ; 246  |
                            10321 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            10322 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            10323 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            10324 ; 250  |
                            10325 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            10326 ; 252  |
                            10327 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                            10328 ; 254  |
                            10329 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            10330 ; 256  |
                            10331 ; 257  |typedef union               
                            10332 ; 258  |{
                            10333 ; 259  |    struct {
                            10334 ; 260  |        int VALUE               :14;
                            10335 ; 261  |        int RSVD                :10; 
                            10336 ; 262  |    } B;
                            10337 ; 263  |    int I;
                            10338 ; 264  |} sdrammode_type;
                            10339 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            10340 ; 266  |
                            10341 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            10342 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            10343 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            10344 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            10345 ; 271  |
                            10346 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            10347 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            10348 ; 274  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10349 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                            10350 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                            10351 ; 277  |
                            10352 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            10353 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            10354 ; 280  |
                            10355 ; 281  |typedef union               
                            10356 ; 282  |{
                            10357 ; 283  |    struct {
                            10358 ; 284  |        int COLWIDTH               :4;
                            10359 ; 285  |        int ROWWIDTH               :4; 
                            10360 ; 286  |    } B;
                            10361 ; 287  |    int I;
                            10362 ; 288  |} sdramtype_type;
                            10363 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            10364 ; 290  |
                            10365 ; 291  |#endif
                            10366 ; 292  |
                            10367 ; 293  |
                            10368 ; 294  |
                            10369 ; 295  |
                            10370 ; 296  |
                            10371 ; 297  |
                            10372 
                            10374 
                            10375 ; 34   |#include "regstb.h"
                            10376 
                            10378 
                            10379 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10380 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            10381 ; 3    |// Filename: regstb.inc
                            10382 ; 4    |// Description: Register definitions for Trace Buffer
                            10383 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10384 ; 6    |// The following naming conventions are followed in this file.
                            10385 ; 7    |// All registers are named using the format...
                            10386 ; 8    |//     HW_<module>_<regname>
                            10387 ; 9    |// where <module> is the module name which can be any of the following...
                            10388 ; 10   |//     USB20
                            10389 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10390 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10391 ; 13   |// that module)
                            10392 ; 14   |// <regname> is the specific register within that module
                            10393 ; 15   |// We also define the following...
                            10394 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10395 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10396 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10397 ; 19   |// which does something else, and
                            10398 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10399 ; 21   |// which does something else.
                            10400 ; 22   |// Other rules
                            10401 ; 23   |//     All caps
                            10402 ; 24   |//     Numeric identifiers start at 0
                            10403 ; 25   |#if !(defined(regstbinc))
                            10404 ; 26   |#define regstbinc 1
                            10405 ; 27   |
                            10406 ; 28   |#include "types.h"
                            10407 
                            10409 
                            10410 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10411 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10412 ; 3    |//
                            10413 ; 4    |// Filename: types.h
                            10414 ; 5    |// Description: Standard data types
                            10415 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10416 ; 7    |
                            10417 ; 8    |#ifndef _TYPES_H
                            10418 ; 9    |#define _TYPES_H
                            10419 ; 10   |
                            10420 ; 11   |// TODO:  move this outta here!
                            10421 ; 12   |#if !defined(NOERROR)
                            10422 ; 13   |#define NOERROR 0
                            10423 ; 14   |#define SUCCESS 0
                            10424 ; 15   |#endif 
                            10425 ; 16   |#if !defined(SUCCESS)
                            10426 ; 17   |#define SUCCESS  0
                            10427 ; 18   |#endif
                            10428 ; 19   |#if !defined(ERROR)
                            10429 ; 20   |#define ERROR   -1
                            10430 ; 21   |#endif
                            10431 ; 22   |#if !defined(FALSE)
                            10432 ; 23   |#define FALSE 0
                            10433 ; 24   |#endif
                            10434 ; 25   |#if !defined(TRUE)
                            10435 ; 26   |#define TRUE  1
                            10436 ; 27   |#endif
                            10437 ; 28   |
                            10438 ; 29   |#if !defined(NULL)
                            10439 ; 30   |#define NULL 0
                            10440 ; 31   |#endif
                            10441 ; 32   |
                            10442 ; 33   |#define MAX_INT     0x7FFFFF
                            10443 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10444 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10445 ; 36   |#define MAX_ULONG   (-1) 
                            10446 ; 37   |
                            10447 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10448 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10449 ; 40   |
                            10450 ; 41   |
                            10451 ; 42   |#define BYTE    unsigned char       // btVarName
                            10452 ; 43   |#define CHAR    signed char         // cVarName
                            10453 ; 44   |#define USHORT  unsigned short      // usVarName
                            10454 ; 45   |#define SHORT   unsigned short      // sVarName
                            10455 ; 46   |#define WORD    unsigned int        // wVarName
                            10456 ; 47   |#define INT     signed int          // iVarName
                            10457 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10458 ; 49   |#define LONG    signed long         // lVarName
                            10459 ; 50   |#define BOOL    unsigned int        // bVarName
                            10460 ; 51   |#define FRACT   _fract              // frVarName
                            10461 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10462 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10463 ; 54   |#define FLOAT   float               // fVarName
                            10464 ; 55   |#define DBL     double              // dVarName
                            10465 ; 56   |#define ENUM    enum                // eVarName
                            10466 ; 57   |#define CMX     _complex            // cmxVarName
                            10467 ; 58   |typedef WORD UCS3;                   // 
                            10468 ; 59   |
                            10469 ; 60   |#define UINT16  unsigned short
                            10470 ; 61   |#define UINT8   unsigned char   
                            10471 ; 62   |#define UINT32  unsigned long
                            10472 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10473 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10474 ; 65   |#define WCHAR   UINT16
                            10475 ; 66   |
                            10476 ; 67   |//UINT128 is 16 bytes or 6 words
                            10477 ; 68   |typedef struct UINT128_3500 {   
                            10478 ; 69   |    int val[6];     
                            10479 ; 70   |} UINT128_3500;
                            10480 ; 71   |
                            10481 ; 72   |#define UINT128   UINT128_3500
                            10482 ; 73   |
                            10483 ; 74   |// Little endian word packed byte strings:   
                            10484 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10485 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10486 ; 77   |// Little endian word packed byte strings:   
                            10487 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10488 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10489 ; 80   |
                            10490 ; 81   |// Declare Memory Spaces To Use When Coding
                            10491 ; 82   |// A. Sector Buffers
                            10492 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10493 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10494 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10495 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10496 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10497 ; 88   |// B. Media DDI Memory
                            10498 ; 89   |#define MEDIA_DDI_MEM _Y
                            10499 ; 90   |
                            10500 ; 91   |
                            10501 ; 92   |
                            10502 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10503 ; 94   |// Examples of circular pointers:
                            10504 ; 95   |//    INT CIRC cpiVarName
                            10505 ; 96   |//    DWORD CIRC cpdwVarName
                            10506 ; 97   |
                            10507 ; 98   |#define RETCODE INT                 // rcVarName
                            10508 ; 99   |
                            10509 ; 100  |// generic bitfield structure
                            10510 ; 101  |struct Bitfield {
                            10511 ; 102  |    unsigned int B0  :1;
                            10512 ; 103  |    unsigned int B1  :1;
                            10513 ; 104  |    unsigned int B2  :1;
                            10514 ; 105  |    unsigned int B3  :1;
                            10515 ; 106  |    unsigned int B4  :1;
                            10516 ; 107  |    unsigned int B5  :1;
                            10517 ; 108  |    unsigned int B6  :1;
                            10518 ; 109  |    unsigned int B7  :1;
                            10519 ; 110  |    unsigned int B8  :1;
                            10520 ; 111  |    unsigned int B9  :1;
                            10521 ; 112  |    unsigned int B10 :1;
                            10522 ; 113  |    unsigned int B11 :1;
                            10523 ; 114  |    unsigned int B12 :1;
                            10524 ; 115  |    unsigned int B13 :1;
                            10525 ; 116  |    unsigned int B14 :1;
                            10526 ; 117  |    unsigned int B15 :1;
                            10527 ; 118  |    unsigned int B16 :1;
                            10528 ; 119  |    unsigned int B17 :1;
                            10529 ; 120  |    unsigned int B18 :1;
                            10530 ; 121  |    unsigned int B19 :1;
                            10531 ; 122  |    unsigned int B20 :1;
                            10532 ; 123  |    unsigned int B21 :1;
                            10533 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10534 ; 125  |    unsigned int B23 :1;
                            10535 ; 126  |};
                            10536 ; 127  |
                            10537 ; 128  |union BitInt {
                            10538 ; 129  |        struct Bitfield B;
                            10539 ; 130  |        int        I;
                            10540 ; 131  |};
                            10541 ; 132  |
                            10542 ; 133  |#define MAX_MSG_LENGTH 10
                            10543 ; 134  |struct CMessage
                            10544 ; 135  |{
                            10545 ; 136  |        unsigned int m_uLength;
                            10546 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10547 ; 138  |};
                            10548 ; 139  |
                            10549 ; 140  |typedef struct {
                            10550 ; 141  |    WORD m_wLength;
                            10551 ; 142  |    WORD m_wMessage;
                            10552 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10553 ; 144  |} Message;
                            10554 ; 145  |
                            10555 ; 146  |struct MessageQueueDescriptor
                            10556 ; 147  |{
                            10557 ; 148  |        int *m_pBase;
                            10558 ; 149  |        int m_iModulo;
                            10559 ; 150  |        int m_iSize;
                            10560 ; 151  |        int *m_pHead;
                            10561 ; 152  |        int *m_pTail;
                            10562 ; 153  |};
                            10563 ; 154  |
                            10564 ; 155  |struct ModuleEntry
                            10565 ; 156  |{
                            10566 ; 157  |    int m_iSignaledEventMask;
                            10567 ; 158  |    int m_iWaitEventMask;
                            10568 ; 159  |    int m_iResourceOfCode;
                            10569 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10570 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10571 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10572 ; 163  |    int m_uTimeOutHigh;
                            10573 ; 164  |    int m_uTimeOutLow;
                            10574 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10575 ; 166  |};
                            10576 ; 167  |
                            10577 ; 168  |union WaitMask{
                            10578 ; 169  |    struct B{
                            10579 ; 170  |        unsigned int m_bNone     :1;
                            10580 ; 171  |        unsigned int m_bMessage  :1;
                            10581 ; 172  |        unsigned int m_bTimer    :1;
                            10582 ; 173  |        unsigned int m_bButton   :1;
                            10583 ; 174  |    } B;
                            10584 ; 175  |    int I;
                            10585 ; 176  |} ;
                            10586 ; 177  |
                            10587 ; 178  |
                            10588 ; 179  |struct Button {
                            10589 ; 180  |        WORD wButtonEvent;
                            10590 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10591 ; 182  |};
                            10592 ; 183  |
                            10593 ; 184  |struct Message {
                            10594 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10595 ; 186  |        WORD wMsgCommand;
                            10596 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10597 ; 188  |};
                            10598 ; 189  |
                            10599 ; 190  |union EventTypes {
                            10600 ; 191  |        struct CMessage msg;
                            10601 ; 192  |        struct Button Button ;
                            10602 ; 193  |        struct Message Message;
                            10603 ; 194  |};
                            10604 ; 195  |
                            10605 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10606 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10607 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10608 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10609 ; 200  |
                            10610 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10611 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10612 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10613 ; 204  |
                            10614 ; 205  |#if DEBUG
                            10615 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10616 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10617 ; 208  |#else 
                            10618 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10619 ; 210  |#define DebugBuildAssert(x)    
                            10620 ; 211  |#endif
                            10621 ; 212  |
                            10622 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10623 ; 214  |//  #pragma asm
                            10624 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10625 ; 216  |//  #pragma endasm
                            10626 ; 217  |
                            10627 ; 218  |
                            10628 ; 219  |#ifdef COLOR_262K
                            10629 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10630 ; 221  |#elif defined(COLOR_65K)
                            10631 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10632 ; 223  |#else
                            10633 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10634 ; 225  |#endif
                            10635 ; 226  |    
                            10636 ; 227  |#endif // #ifndef _TYPES_H
                            10637 
                            10639 
                            10640 ; 29   |
                            10641 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10642 ; 31   |
                            10643 ; 32   |//   Trace Buffer STMP Registers 
                            10644 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10645 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10646 ; 35   |
                            10647 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10648 ; 37   |
                            10649 ; 38   |
                            10650 ; 39   |
                            10651 ; 40   |
                            10652 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10653 ; 42   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10654 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10655 ; 44   |
                            10656 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10657 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10658 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10659 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10660 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10661 ; 50   |
                            10662 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10663 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10664 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10665 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10666 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10667 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10668 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10669 ; 58   |
                            10670 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            10671 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            10672 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10673 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            10674 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            10675 ; 64   |
                            10676 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10677 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10678 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10679 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10680 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10681 ; 70   |
                            10682 ; 71   |typedef union               
                            10683 ; 72   |{
                            10684 ; 73   |    struct {
                            10685 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10686 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10687 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10688 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10689 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10690 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10691 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10692 ; 81   |    } B;
                            10693 ; 82   |    int I;
                            10694 ; 83   |    unsigned int U;
                            10695 ; 84   |} tb_cfg_type;
                            10696 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            10697 ; 86   |
                            10698 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10699 ; 88   |
                            10700 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10701 ; 90   |
                            10702 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10703 ; 92   |
                            10704 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10705 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10706 ; 95   |
                            10707 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            10708 ; 97   |
                            10709 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10710 ; 99   |
                            10711 ; 100  |typedef union               
                            10712 ; 101  |{
                            10713 ; 102  |    struct {
                            10714 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10715 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10716 ; 105  |    } B;
                            10717 ; 106  |    int I;
                            10718 ; 107  |    unsigned int U;
                            10719 ; 108  |} tb_bar_type;
                            10720 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            10721 ; 110  |
                            10722 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10723 ; 112  |
                            10724 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10725 ; 114  |
                            10726 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10727 ; 116  |
                            10728 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10729 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10730 ; 119  |
                            10731 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            10732 ; 121  |
                            10733 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10734 ; 123  |
                            10735 ; 124  |typedef union               
                            10736 ; 125  |{
                            10737 ; 126  |    struct {
                            10738 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10739 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10740 ; 129  |    } B;
                            10741 ; 130  |    int I;
                            10742 ; 131  |    unsigned int U;
                            10743 ; 132  |} tb_mod_type;
                            10744 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            10745 ; 134  |
                            10746 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10747 ; 136  |
                            10748 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10749 ; 138  |
                            10750 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10751 ; 140  |
                            10752 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10753 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10754 ; 143  |
                            10755 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10756 ; 145  |
                            10757 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10758 ; 147  |
                            10759 ; 148  |typedef union               
                            10760 ; 149  |{
                            10761 ; 150  |    struct {
                            10762 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10763 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10764 ; 153  |    } B;
                            10765 ; 154  |    int I;
                            10766 ; 155  |    unsigned int U;
                            10767 ; 156  |} tb_cir_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10768 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            10769 ; 158  |
                            10770 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10771 ; 160  |
                            10772 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10773 ; 162  |
                            10774 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10775 ; 164  |
                            10776 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10777 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10778 ; 167  |
                            10779 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10780 ; 169  |
                            10781 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10782 ; 171  |
                            10783 ; 172  |typedef union               
                            10784 ; 173  |{
                            10785 ; 174  |    struct {
                            10786 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10787 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10788 ; 177  |    } B;
                            10789 ; 178  |    int I;
                            10790 ; 179  |    unsigned int U;
                            10791 ; 180  |} tb_obc_type;
                            10792 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            10793 ; 182  |
                            10794 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10795 ; 184  |
                            10796 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10797 ; 186  |
                            10798 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10799 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10800 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10801 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10802 ; 191  |
                            10803 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10804 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10805 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10806 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10807 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10808 ; 197  |
                            10809 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            10810 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            10811 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            10812 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            10813 ; 202  |
                            10814 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10815 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10816 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10817 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10818 ; 207  |
                            10819 ; 208  |typedef union               
                            10820 ; 209  |{
                            10821 ; 210  |    struct {
                            10822 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10823 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10824 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10825 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10826 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10827 ; 216  |    } B;
                            10828 ; 217  |    int I;
                            10829 ; 218  |    unsigned int U;
                            10830 ; 219  |} tb_tcs_type;
                            10831 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            10832 ; 221  |
                            10833 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10834 ; 223  |
                            10835 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10836 ; 225  |
                            10837 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10838 ; 227  |
                            10839 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10840 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10841 ; 230  |
                            10842 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            10843 ; 232  |
                            10844 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10845 ; 234  |
                            10846 ; 235  |typedef union               
                            10847 ; 236  |{
                            10848 ; 237  |    struct {
                            10849 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10850 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10851 ; 240  |    } B;
                            10852 ; 241  |    int I;
                            10853 ; 242  |    unsigned int U;
                            10854 ; 243  |} tb_tvr_type;
                            10855 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            10856 ; 245  |
                            10857 ; 246  |
                            10858 ; 247  |
                            10859 ; 248  |#endif
                            10860 ; 249  |
                            10861 ; 250  |
                            10862 ; 251  |
                            10863 ; 252  |
                            10864 ; 253  |
                            10865 ; 254  |
                            10866 ; 255  |
                            10867 ; 256  |
                            10868 ; 257  |
                            10869 ; 258  |
                            10870 ; 259  |
                            10871 ; 260  |
                            10872 ; 261  |
                            10873 ; 262  |
                            10874 ; 263  |
                            10875 ; 264  |
                            10876 ; 265  |
                            10877 
                            10879 
                            10880 ; 35   |#include "regstimer.h"
                            10881 
                            10883 
                            10884 ; 1    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10885 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10886 ; 3    |// Filename: regstimer.inc
                            10887 ; 4    |// Description: Register definitions for  Timers interface
                            10888 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10889 ; 6    |// The following naming conventions are followed in this file.
                            10890 ; 7    |// All registers are named using the format...
                            10891 ; 8    |//     HW_<module>_<regname>
                            10892 ; 9    |// where <module> is the module name which can be any of the following...
                            10893 ; 10   |//     USB20
                            10894 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10895 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10896 ; 13   |// that module)
                            10897 ; 14   |// <regname> is the specific register within that module
                            10898 ; 15   |// We also define the following...
                            10899 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10900 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10901 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10902 ; 19   |// which does something else, and
                            10903 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10904 ; 21   |// which does something else.
                            10905 ; 22   |// Other rules
                            10906 ; 23   |//     All caps
                            10907 ; 24   |//     Numeric identifiers start at 0
                            10908 ; 25   |#if !(defined(regstimerinc))
                            10909 ; 26   |#define regstimerinc 1
                            10910 ; 27   |
                            10911 ; 28   |#include "types.h"
                            10912 
                            10914 
                            10915 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10916 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10917 ; 3    |//
                            10918 ; 4    |// Filename: types.h
                            10919 ; 5    |// Description: Standard data types
                            10920 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10921 ; 7    |
                            10922 ; 8    |#ifndef _TYPES_H
                            10923 ; 9    |#define _TYPES_H
                            10924 ; 10   |
                            10925 ; 11   |// TODO:  move this outta here!
                            10926 ; 12   |#if !defined(NOERROR)
                            10927 ; 13   |#define NOERROR 0
                            10928 ; 14   |#define SUCCESS 0
                            10929 ; 15   |#endif 
                            10930 ; 16   |#if !defined(SUCCESS)
                            10931 ; 17   |#define SUCCESS  0
                            10932 ; 18   |#endif
                            10933 ; 19   |#if !defined(ERROR)
                            10934 ; 20   |#define ERROR   -1
                            10935 ; 21   |#endif
                            10936 ; 22   |#if !defined(FALSE)
                            10937 ; 23   |#define FALSE 0
                            10938 ; 24   |#endif
                            10939 ; 25   |#if !defined(TRUE)
                            10940 ; 26   |#define TRUE  1
                            10941 ; 27   |#endif
                            10942 ; 28   |
                            10943 ; 29   |#if !defined(NULL)
                            10944 ; 30   |#define NULL 0
                            10945 ; 31   |#endif
                            10946 ; 32   |
                            10947 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10948 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10949 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10950 ; 36   |#define MAX_ULONG   (-1) 
                            10951 ; 37   |
                            10952 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10953 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10954 ; 40   |
                            10955 ; 41   |
                            10956 ; 42   |#define BYTE    unsigned char       // btVarName
                            10957 ; 43   |#define CHAR    signed char         // cVarName
                            10958 ; 44   |#define USHORT  unsigned short      // usVarName
                            10959 ; 45   |#define SHORT   unsigned short      // sVarName
                            10960 ; 46   |#define WORD    unsigned int        // wVarName
                            10961 ; 47   |#define INT     signed int          // iVarName
                            10962 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10963 ; 49   |#define LONG    signed long         // lVarName
                            10964 ; 50   |#define BOOL    unsigned int        // bVarName
                            10965 ; 51   |#define FRACT   _fract              // frVarName
                            10966 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10967 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10968 ; 54   |#define FLOAT   float               // fVarName
                            10969 ; 55   |#define DBL     double              // dVarName
                            10970 ; 56   |#define ENUM    enum                // eVarName
                            10971 ; 57   |#define CMX     _complex            // cmxVarName
                            10972 ; 58   |typedef WORD UCS3;                   // 
                            10973 ; 59   |
                            10974 ; 60   |#define UINT16  unsigned short
                            10975 ; 61   |#define UINT8   unsigned char   
                            10976 ; 62   |#define UINT32  unsigned long
                            10977 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10978 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10979 ; 65   |#define WCHAR   UINT16
                            10980 ; 66   |
                            10981 ; 67   |//UINT128 is 16 bytes or 6 words
                            10982 ; 68   |typedef struct UINT128_3500 {   
                            10983 ; 69   |    int val[6];     
                            10984 ; 70   |} UINT128_3500;
                            10985 ; 71   |
                            10986 ; 72   |#define UINT128   UINT128_3500
                            10987 ; 73   |
                            10988 ; 74   |// Little endian word packed byte strings:   
                            10989 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10990 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10991 ; 77   |// Little endian word packed byte strings:   
                            10992 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10993 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10994 ; 80   |
                            10995 ; 81   |// Declare Memory Spaces To Use When Coding
                            10996 ; 82   |// A. Sector Buffers
                            10997 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10998 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10999 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11000 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11001 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11002 ; 88   |// B. Media DDI Memory
                            11003 ; 89   |#define MEDIA_DDI_MEM _Y
                            11004 ; 90   |
                            11005 ; 91   |
                            11006 ; 92   |
                            11007 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11008 ; 94   |// Examples of circular pointers:
                            11009 ; 95   |//    INT CIRC cpiVarName
                            11010 ; 96   |//    DWORD CIRC cpdwVarName
                            11011 ; 97   |
                            11012 ; 98   |#define RETCODE INT                 // rcVarName
                            11013 ; 99   |
                            11014 ; 100  |// generic bitfield structure
                            11015 ; 101  |struct Bitfield {
                            11016 ; 102  |    unsigned int B0  :1;
                            11017 ; 103  |    unsigned int B1  :1;
                            11018 ; 104  |    unsigned int B2  :1;
                            11019 ; 105  |    unsigned int B3  :1;
                            11020 ; 106  |    unsigned int B4  :1;
                            11021 ; 107  |    unsigned int B5  :1;
                            11022 ; 108  |    unsigned int B6  :1;
                            11023 ; 109  |    unsigned int B7  :1;
                            11024 ; 110  |    unsigned int B8  :1;
                            11025 ; 111  |    unsigned int B9  :1;
                            11026 ; 112  |    unsigned int B10 :1;
                            11027 ; 113  |    unsigned int B11 :1;
                            11028 ; 114  |    unsigned int B12 :1;
                            11029 ; 115  |    unsigned int B13 :1;
                            11030 ; 116  |    unsigned int B14 :1;
                            11031 ; 117  |    unsigned int B15 :1;
                            11032 ; 118  |    unsigned int B16 :1;
                            11033 ; 119  |    unsigned int B17 :1;
                            11034 ; 120  |    unsigned int B18 :1;
                            11035 ; 121  |    unsigned int B19 :1;
                            11036 ; 122  |    unsigned int B20 :1;
                            11037 ; 123  |    unsigned int B21 :1;
                            11038 ; 124  |    unsigned int B22 :1;
                            11039 ; 125  |    unsigned int B23 :1;
                            11040 ; 126  |};
                            11041 ; 127  |
                            11042 ; 128  |union BitInt {
                            11043 ; 129  |        struct Bitfield B;
                            11044 ; 130  |        int        I;
                            11045 ; 131  |};
                            11046 ; 132  |
                            11047 ; 133  |#define MAX_MSG_LENGTH 10
                            11048 ; 134  |struct CMessage
                            11049 ; 135  |{
                            11050 ; 136  |        unsigned int m_uLength;
                            11051 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11052 ; 138  |};
                            11053 ; 139  |
                            11054 ; 140  |typedef struct {
                            11055 ; 141  |    WORD m_wLength;
                            11056 ; 142  |    WORD m_wMessage;
                            11057 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11058 ; 144  |} Message;
                            11059 ; 145  |
                            11060 ; 146  |struct MessageQueueDescriptor
                            11061 ; 147  |{
                            11062 ; 148  |        int *m_pBase;
                            11063 ; 149  |        int m_iModulo;
                            11064 ; 150  |        int m_iSize;
                            11065 ; 151  |        int *m_pHead;
                            11066 ; 152  |        int *m_pTail;
                            11067 ; 153  |};
                            11068 ; 154  |
                            11069 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11070 ; 156  |{
                            11071 ; 157  |    int m_iSignaledEventMask;
                            11072 ; 158  |    int m_iWaitEventMask;
                            11073 ; 159  |    int m_iResourceOfCode;
                            11074 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11075 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11076 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11077 ; 163  |    int m_uTimeOutHigh;
                            11078 ; 164  |    int m_uTimeOutLow;
                            11079 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11080 ; 166  |};
                            11081 ; 167  |
                            11082 ; 168  |union WaitMask{
                            11083 ; 169  |    struct B{
                            11084 ; 170  |        unsigned int m_bNone     :1;
                            11085 ; 171  |        unsigned int m_bMessage  :1;
                            11086 ; 172  |        unsigned int m_bTimer    :1;
                            11087 ; 173  |        unsigned int m_bButton   :1;
                            11088 ; 174  |    } B;
                            11089 ; 175  |    int I;
                            11090 ; 176  |} ;
                            11091 ; 177  |
                            11092 ; 178  |
                            11093 ; 179  |struct Button {
                            11094 ; 180  |        WORD wButtonEvent;
                            11095 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11096 ; 182  |};
                            11097 ; 183  |
                            11098 ; 184  |struct Message {
                            11099 ; 185  |        WORD wMsgLength;
                            11100 ; 186  |        WORD wMsgCommand;
                            11101 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11102 ; 188  |};
                            11103 ; 189  |
                            11104 ; 190  |union EventTypes {
                            11105 ; 191  |        struct CMessage msg;
                            11106 ; 192  |        struct Button Button ;
                            11107 ; 193  |        struct Message Message;
                            11108 ; 194  |};
                            11109 ; 195  |
                            11110 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11111 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11112 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11113 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11114 ; 200  |
                            11115 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11116 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11117 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11118 ; 204  |
                            11119 ; 205  |#if DEBUG
                            11120 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11121 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11122 ; 208  |#else 
                            11123 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11124 ; 210  |#define DebugBuildAssert(x)    
                            11125 ; 211  |#endif
                            11126 ; 212  |
                            11127 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11128 ; 214  |//  #pragma asm
                            11129 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11130 ; 216  |//  #pragma endasm
                            11131 ; 217  |
                            11132 ; 218  |
                            11133 ; 219  |#ifdef COLOR_262K
                            11134 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11135 ; 221  |#elif defined(COLOR_65K)
                            11136 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11137 ; 223  |#else
                            11138 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11139 ; 225  |#endif
                            11140 ; 226  |    
                            11141 ; 227  |#endif // #ifndef _TYPES_H
                            11142 
                            11144 
                            11145 ; 29   |
                            11146 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11147 ; 31   |//   TIMER STMP Registers 
                            11148 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11149 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            11150 ; 34   |
                            11151 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            11152 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            11153 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            11154 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            11155 ; 39   |
                            11156 ; 40   |#define HW_TIMER_NUMBER_0 0
                            11157 ; 41   |#define HW_TIMER_NUMBER_1 1
                            11158 ; 42   |#define HW_TIMER_NUMBER_2 2
                            11159 ; 43   |#define HW_TIMER_NUMBER_3 3
                            11160 ; 44   |
                            11161 ; 45   |#define HW_TMRCSR 0
                            11162 ; 46   |#define HW_TMRCNTR 1
                            11163 ; 47   |
                            11164 ; 48   |
                            11165 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            11166 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            11167 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            11168 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            11169 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            11170 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            11171 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            11172 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            11173 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            11174 ; 58   |
                            11175 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            11176 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            11177 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            11178 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            11179 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            11180 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            11181 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            11182 ; 66   |
                            11183 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            11184 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            11185 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11186 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            11187 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            11188 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            11189 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            11190 ; 74   |
                            11191 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            11192 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            11193 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            11194 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            11195 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            11196 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            11197 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            11198 ; 82   |
                            11199 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            11200 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            11201 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            11202 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            11203 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            11204 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            11205 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            11206 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            11207 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            11208 ; 92   |
                            11209 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            11210 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            11211 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            11212 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            11213 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            11214 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            11215 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            11216 ; 100  |
                            11217 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            11218 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            11219 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            11220 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            11221 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            11222 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            11223 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            11224 ; 108  |
                            11225 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            11226 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            11227 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            11228 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            11229 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            11230 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            11231 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            11232 ; 116  |
                            11233 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            11234 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            11235 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            11236 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11237 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            11238 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            11239 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            11240 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            11241 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            11242 ; 126  |
                            11243 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            11244 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            11245 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            11246 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            11247 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            11248 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            11249 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            11250 ; 134  |
                            11251 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            11252 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            11253 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            11254 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            11255 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            11256 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            11257 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            11258 ; 142  |
                            11259 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            11260 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            11261 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            11262 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            11263 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            11264 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            11265 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            11266 ; 150  |
                            11267 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            11268 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            11269 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            11270 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            11271 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            11272 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            11273 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            11274 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            11275 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            11276 ; 160  |
                            11277 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            11278 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            11279 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            11280 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            11281 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            11282 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            11283 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            11284 ; 168  |
                            11285 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            11286 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            11287 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11288 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            11289 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            11290 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            11291 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            11292 ; 176  |
                            11293 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            11294 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            11295 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            11296 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            11297 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            11298 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            11299 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            11300 ; 184  |
                            11301 ; 185  |typedef union               
                            11302 ; 186  |{
                            11303 ; 187  |    struct {
                            11304 ; 188  |       int TIMER_ENABLE              :1;
                            11305 ; 189  |       int TIMER_INT_EN              :1;
                            11306 ; 190  |       int INVERT                    :1;
                            11307 ; 191  |       int TIMER_CONTROL             :3;
                            11308 ; 192  |       int RSVD0                     :1;
                            11309 ; 193  |       int TIMER_STATUS              :1;
                            11310 ; 194  |       int TIMER_MODE                :2;
                            11311 ; 195  |       int RSVD1                     :13;
                            11312 ; 196  |       int CLKGT                     :1;
                            11313 ; 197  |    } B;
                            11314 ; 198  |    int I;
                            11315 ; 199  |} timercsr_type;
                            11316 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            11317 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            11318 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            11319 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            11320 ; 204  |
                            11321 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            11322 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            11323 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            11324 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            11325 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            11326 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            11327 ; 211  |
                            11328 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            11329 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            11330 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            11331 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            11332 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            11333 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            11334 ; 218  |
                            11335 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            11336 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            11337 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            11338 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11339 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            11340 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            11341 ; 225  |
                            11342 ; 226  |typedef union               
                            11343 ; 227  |{
                            11344 ; 228  |    struct {
                            11345 ; 229  |       int COUNT                    :24;
                            11346 ; 230  |    } B;
                            11347 ; 231  |    int I;
                            11348 ; 232  |} tmrcntr_type;
                            11349 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            11350 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            11351 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            11352 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            11353 ; 237  |
                            11354 ; 238  |
                            11355 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            11356 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            11357 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            11358 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            11359 ; 243  |
                            11360 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            11361 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            11362 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            11363 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            11364 ; 248  |
                            11365 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            11366 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            11367 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            11368 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            11369 ; 253  |
                            11370 ; 254  |// Timer enable
                            11371 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            11372 ; 256  |// Timer clock gating control
                            11373 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            11374 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            11375 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            11376 ; 260  |#endif
                            11377 ; 261  |
                            11378 ; 262  |
                            11379 ; 263  |
                            11380 ; 264  |
                            11381 
                            11383 
                            11384 ; 36   |#include "regsusb20.h"
                            11385 
                            11387 
                            11388 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11389 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            11390 ; 3    |//;  File        : regsusb20ip.inc
                            11391 ; 4    |//;  Description : USB20 IP Register definition
                            11392 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11393 ; 6    |
                            11394 ; 7    |// The following naming conventions are followed in this file.
                            11395 ; 8    |// All registers are named using the format...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11396 ; 9    |//     HW_<module>_<regname>
                            11397 ; 10   |// where <module> is the module name which can be any of the following...
                            11398 ; 11   |//     USB20
                            11399 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            11400 ; 13   |// module name includes a number starting from 0 for the first instance of
                            11401 ; 14   |// that module)
                            11402 ; 15   |// <regname> is the specific register within that module
                            11403 ; 16   |// We also define the following...
                            11404 ; 17   |//     HW_<module>_<regname>_BITPOS
                            11405 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11406 ; 19   |//     HW_<module>_<regname>_SETMASK
                            11407 ; 20   |// which does something else, and
                            11408 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            11409 ; 22   |// which does something else.
                            11410 ; 23   |// Other rules
                            11411 ; 24   |//     All caps
                            11412 ; 25   |//     Numeric identifiers start at 0
                            11413 ; 26   |
                            11414 ; 27   |#if !(defined(regsusb20inc))
                            11415 ; 28   |#define regsusb20inc 1
                            11416 ; 29   |
                            11417 ; 30   |#include "types.h"
                            11418 
                            11420 
                            11421 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11422 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11423 ; 3    |//
                            11424 ; 4    |// Filename: types.h
                            11425 ; 5    |// Description: Standard data types
                            11426 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11427 ; 7    |
                            11428 ; 8    |#ifndef _TYPES_H
                            11429 ; 9    |#define _TYPES_H
                            11430 ; 10   |
                            11431 ; 11   |// TODO:  move this outta here!
                            11432 ; 12   |#if !defined(NOERROR)
                            11433 ; 13   |#define NOERROR 0
                            11434 ; 14   |#define SUCCESS 0
                            11435 ; 15   |#endif 
                            11436 ; 16   |#if !defined(SUCCESS)
                            11437 ; 17   |#define SUCCESS  0
                            11438 ; 18   |#endif
                            11439 ; 19   |#if !defined(ERROR)
                            11440 ; 20   |#define ERROR   -1
                            11441 ; 21   |#endif
                            11442 ; 22   |#if !defined(FALSE)
                            11443 ; 23   |#define FALSE 0
                            11444 ; 24   |#endif
                            11445 ; 25   |#if !defined(TRUE)
                            11446 ; 26   |#define TRUE  1
                            11447 ; 27   |#endif
                            11448 ; 28   |
                            11449 ; 29   |#if !defined(NULL)
                            11450 ; 30   |#define NULL 0
                            11451 ; 31   |#endif
                            11452 ; 32   |
                            11453 ; 33   |#define MAX_INT     0x7FFFFF
                            11454 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11455 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11456 ; 36   |#define MAX_ULONG   (-1) 
                            11457 ; 37   |
                            11458 ; 38   |#define WORD_SIZE   24              // word size in bits
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11459 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11460 ; 40   |
                            11461 ; 41   |
                            11462 ; 42   |#define BYTE    unsigned char       // btVarName
                            11463 ; 43   |#define CHAR    signed char         // cVarName
                            11464 ; 44   |#define USHORT  unsigned short      // usVarName
                            11465 ; 45   |#define SHORT   unsigned short      // sVarName
                            11466 ; 46   |#define WORD    unsigned int        // wVarName
                            11467 ; 47   |#define INT     signed int          // iVarName
                            11468 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11469 ; 49   |#define LONG    signed long         // lVarName
                            11470 ; 50   |#define BOOL    unsigned int        // bVarName
                            11471 ; 51   |#define FRACT   _fract              // frVarName
                            11472 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11473 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11474 ; 54   |#define FLOAT   float               // fVarName
                            11475 ; 55   |#define DBL     double              // dVarName
                            11476 ; 56   |#define ENUM    enum                // eVarName
                            11477 ; 57   |#define CMX     _complex            // cmxVarName
                            11478 ; 58   |typedef WORD UCS3;                   // 
                            11479 ; 59   |
                            11480 ; 60   |#define UINT16  unsigned short
                            11481 ; 61   |#define UINT8   unsigned char   
                            11482 ; 62   |#define UINT32  unsigned long
                            11483 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11484 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11485 ; 65   |#define WCHAR   UINT16
                            11486 ; 66   |
                            11487 ; 67   |//UINT128 is 16 bytes or 6 words
                            11488 ; 68   |typedef struct UINT128_3500 {   
                            11489 ; 69   |    int val[6];     
                            11490 ; 70   |} UINT128_3500;
                            11491 ; 71   |
                            11492 ; 72   |#define UINT128   UINT128_3500
                            11493 ; 73   |
                            11494 ; 74   |// Little endian word packed byte strings:   
                            11495 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11496 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11497 ; 77   |// Little endian word packed byte strings:   
                            11498 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11499 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11500 ; 80   |
                            11501 ; 81   |// Declare Memory Spaces To Use When Coding
                            11502 ; 82   |// A. Sector Buffers
                            11503 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11504 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11505 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11506 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11507 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11508 ; 88   |// B. Media DDI Memory
                            11509 ; 89   |#define MEDIA_DDI_MEM _Y
                            11510 ; 90   |
                            11511 ; 91   |
                            11512 ; 92   |
                            11513 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11514 ; 94   |// Examples of circular pointers:
                            11515 ; 95   |//    INT CIRC cpiVarName
                            11516 ; 96   |//    DWORD CIRC cpdwVarName
                            11517 ; 97   |
                            11518 ; 98   |#define RETCODE INT                 // rcVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11519 ; 99   |
                            11520 ; 100  |// generic bitfield structure
                            11521 ; 101  |struct Bitfield {
                            11522 ; 102  |    unsigned int B0  :1;
                            11523 ; 103  |    unsigned int B1  :1;
                            11524 ; 104  |    unsigned int B2  :1;
                            11525 ; 105  |    unsigned int B3  :1;
                            11526 ; 106  |    unsigned int B4  :1;
                            11527 ; 107  |    unsigned int B5  :1;
                            11528 ; 108  |    unsigned int B6  :1;
                            11529 ; 109  |    unsigned int B7  :1;
                            11530 ; 110  |    unsigned int B8  :1;
                            11531 ; 111  |    unsigned int B9  :1;
                            11532 ; 112  |    unsigned int B10 :1;
                            11533 ; 113  |    unsigned int B11 :1;
                            11534 ; 114  |    unsigned int B12 :1;
                            11535 ; 115  |    unsigned int B13 :1;
                            11536 ; 116  |    unsigned int B14 :1;
                            11537 ; 117  |    unsigned int B15 :1;
                            11538 ; 118  |    unsigned int B16 :1;
                            11539 ; 119  |    unsigned int B17 :1;
                            11540 ; 120  |    unsigned int B18 :1;
                            11541 ; 121  |    unsigned int B19 :1;
                            11542 ; 122  |    unsigned int B20 :1;
                            11543 ; 123  |    unsigned int B21 :1;
                            11544 ; 124  |    unsigned int B22 :1;
                            11545 ; 125  |    unsigned int B23 :1;
                            11546 ; 126  |};
                            11547 ; 127  |
                            11548 ; 128  |union BitInt {
                            11549 ; 129  |        struct Bitfield B;
                            11550 ; 130  |        int        I;
                            11551 ; 131  |};
                            11552 ; 132  |
                            11553 ; 133  |#define MAX_MSG_LENGTH 10
                            11554 ; 134  |struct CMessage
                            11555 ; 135  |{
                            11556 ; 136  |        unsigned int m_uLength;
                            11557 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11558 ; 138  |};
                            11559 ; 139  |
                            11560 ; 140  |typedef struct {
                            11561 ; 141  |    WORD m_wLength;
                            11562 ; 142  |    WORD m_wMessage;
                            11563 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11564 ; 144  |} Message;
                            11565 ; 145  |
                            11566 ; 146  |struct MessageQueueDescriptor
                            11567 ; 147  |{
                            11568 ; 148  |        int *m_pBase;
                            11569 ; 149  |        int m_iModulo;
                            11570 ; 150  |        int m_iSize;
                            11571 ; 151  |        int *m_pHead;
                            11572 ; 152  |        int *m_pTail;
                            11573 ; 153  |};
                            11574 ; 154  |
                            11575 ; 155  |struct ModuleEntry
                            11576 ; 156  |{
                            11577 ; 157  |    int m_iSignaledEventMask;
                            11578 ; 158  |    int m_iWaitEventMask;
                            11579 ; 159  |    int m_iResourceOfCode;
                            11580 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11581 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11582 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11583 ; 163  |    int m_uTimeOutHigh;
                            11584 ; 164  |    int m_uTimeOutLow;
                            11585 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11586 ; 166  |};
                            11587 ; 167  |
                            11588 ; 168  |union WaitMask{
                            11589 ; 169  |    struct B{
                            11590 ; 170  |        unsigned int m_bNone     :1;
                            11591 ; 171  |        unsigned int m_bMessage  :1;
                            11592 ; 172  |        unsigned int m_bTimer    :1;
                            11593 ; 173  |        unsigned int m_bButton   :1;
                            11594 ; 174  |    } B;
                            11595 ; 175  |    int I;
                            11596 ; 176  |} ;
                            11597 ; 177  |
                            11598 ; 178  |
                            11599 ; 179  |struct Button {
                            11600 ; 180  |        WORD wButtonEvent;
                            11601 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11602 ; 182  |};
                            11603 ; 183  |
                            11604 ; 184  |struct Message {
                            11605 ; 185  |        WORD wMsgLength;
                            11606 ; 186  |        WORD wMsgCommand;
                            11607 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11608 ; 188  |};
                            11609 ; 189  |
                            11610 ; 190  |union EventTypes {
                            11611 ; 191  |        struct CMessage msg;
                            11612 ; 192  |        struct Button Button ;
                            11613 ; 193  |        struct Message Message;
                            11614 ; 194  |};
                            11615 ; 195  |
                            11616 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11617 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11618 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11619 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11620 ; 200  |
                            11621 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11622 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11623 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11624 ; 204  |
                            11625 ; 205  |#if DEBUG
                            11626 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11627 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11628 ; 208  |#else 
                            11629 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11630 ; 210  |#define DebugBuildAssert(x)    
                            11631 ; 211  |#endif
                            11632 ; 212  |
                            11633 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11634 ; 214  |//  #pragma asm
                            11635 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11636 ; 216  |//  #pragma endasm
                            11637 ; 217  |
                            11638 ; 218  |
                            11639 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11640 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11641 ; 221  |#elif defined(COLOR_65K)
                            11642 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11643 ; 223  |#else
                            11644 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11645 ; 225  |#endif
                            11646 ; 226  |    
                            11647 ; 227  |#endif // #ifndef _TYPES_H
                            11648 
                            11650 
                            11651 ; 31   |
                            11652 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11653 ; 33   |//   USB2.0 STMP Registers 
                            11654 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11655 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11656 ; 36   |
                            11657 ; 37   |
                            11658 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11659 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11660 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11661 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11662 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11663 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11664 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11665 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11666 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11667 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11668 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11669 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11670 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11671 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11672 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11673 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11674 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11675 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11676 ; 56   |
                            11677 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11678 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11679 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11680 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11681 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11682 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11683 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11684 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11685 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11686 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11687 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11688 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11689 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11690 ; 70   |
                            11691 ; 71   |
                            11692 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11693 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11694 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11695 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11696 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11697 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11698 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11699 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11700 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11701 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11702 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11703 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11704 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11705 ; 85   |
                            11706 ; 86   |typedef union               
                            11707 ; 87   |{
                            11708 ; 88   |    struct {
                            11709 ; 89   |        int USBEN          :1;
                            11710 ; 90   |        int WAKEUPIRQ      :1;
                            11711 ; 91   |        int WAKEUPIE       :1;
                            11712 ; 92   |        int VBUSCXIRQ      :1;
                            11713 ; 93   |        int VBUSCXIE       :1;
                            11714 ; 94   |        int VBUSDISCXIRQ   :1;
                            11715 ; 95   |        int VBUSDISCXIE    :1;
                            11716 ; 96   |        int CLKOFF         :1;
                            11717 ; 97   |        int SUSP           :1;
                            11718 ; 98   |        int SUSPF          :1;
                            11719 ; 99   |        int UTMITST        :1;
                            11720 ; 100  |        int ARCCONNECT     :1;
                            11721 ; 101  |        int PLUGGEDIN_EN   :1;
                            11722 ; 102  |        int PLUGGEDIN      :1;
                            11723 ; 103  |        int                :8;
                            11724 ; 104  |        int HOSTDISCONNECT :1;
                            11725 ; 105  |        int VBUSSENSE      :1;
                            11726 ; 106  |    } B;
                            11727 ; 107  |    int I;
                            11728 ; 108  |} usbcsr_type;
                            11729 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            11730 ; 110  |
                            11731 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11732 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11733 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11734 ; 114  |
                            11735 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11736 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11737 ; 117  |
                            11738 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            11739 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11740 ; 120  |
                            11741 ; 121  |typedef union               
                            11742 ; 122  |{
                            11743 ; 123  |    struct {
                            11744 ; 124  |        int ADD            :16;
                            11745 ; 125  |        int MEM            :2;
                            11746 ; 126  |        int                :6;
                            11747 ; 127  |    } B;
                            11748 ; 128  |    int I;
                            11749 ; 129  |} usbdmaoff_type;
                            11750 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11751 ; 131  |
                            11752 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11753 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11754 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11755 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11756 ; 136  |
                            11757 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11758 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11759 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11760 ; 140  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11761 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11762 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11763 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11764 ; 144  |
                            11765 ; 145  |typedef union               
                            11766 ; 146  |{
                            11767 ; 147  |    struct {
                            11768 ; 148  |        int ADD            :9;
                            11769 ; 149  |        int                :7;
                            11770 ; 150  |        int RWB            :1;
                            11771 ; 151  |        int                :14;
                            11772 ; 152  |        int KICK           :1;
                            11773 ; 153  |    } B;
                            11774 ; 154  |    int I;
                            11775 ; 155  |} usbarcaccess_type;
                            11776 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11777 ; 157  |
                            11778 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11779 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11780 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11781 ; 161  |
                            11782 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11783 ; 163  |
                            11784 ; 164  |typedef union               
                            11785 ; 165  |{
                            11786 ; 166  |    struct {
                            11787 ; 167  |        int DATA           :16;
                            11788 ; 168  |        int                :8;
                            11789 ; 169  |    } B;
                            11790 ; 170  |    int I;
                            11791 ; 171  |} usbarcdatalow_type;
                            11792 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            11793 ; 173  |
                            11794 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11795 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11796 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11797 ; 177  |
                            11798 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11799 ; 179  |
                            11800 ; 180  |typedef union               
                            11801 ; 181  |{
                            11802 ; 182  |    struct {
                            11803 ; 183  |        int DATA           :16;
                            11804 ; 184  |        int                :8;
                            11805 ; 185  |    } B;
                            11806 ; 186  |    int I;
                            11807 ; 187  |} usbarcdatahigh_type;
                            11808 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            11809 ; 189  |
                            11810 ; 190  |
                            11811 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11812 ; 192  |//   USB2.0 ARC Registers 
                            11813 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11814 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11815 ; 195  |
                            11816 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11817 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11818 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11819 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11820 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11821 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11822 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11823 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11824 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11825 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11826 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11827 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11828 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11829 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11830 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11831 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11832 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11833 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11834 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11835 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11836 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11837 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11838 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11839 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11840 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11841 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11842 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11843 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11844 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11845 ; 225  |
                            11846 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11847 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11848 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11849 ; 229  |
                            11850 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11851 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11852 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11853 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11854 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11855 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11856 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11857 ; 237  |
                            11858 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11859 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11860 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11861 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11862 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11863 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11864 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11865 ; 245  |
                            11866 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11867 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11868 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11869 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11870 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11871 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11872 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11873 ; 253  |
                            11874 ; 254  |typedef union               
                            11875 ; 255  |{
                            11876 ; 256  |    struct {
                            11877 ; 257  |        int N_PORTS         :4;
                            11878 ; 258  |        int PPC             :1;
                            11879 ; 259  |        int                 :3;
                            11880 ; 260  |        int N_PCC           :4;
                            11881 ; 261  |        int N_CC            :4;
                            11882 ; 262  |        int PI              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11883 ; 263  |        int                 :3;
                            11884 ; 264  |        int N_PTT           :4;
                            11885 ; 265  |        int N_TT            :4;
                            11886 ; 266  |        int                 :20;
                            11887 ; 267  |    } B;
                            11888 ; 268  |    DWORD I;
                            11889 ; 269  |} hcsparams_type;
                            11890 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11891 ; 271  |
                            11892 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11893 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11894 ; 274  |
                            11895 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11896 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11897 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11898 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11899 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11900 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11901 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11902 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11903 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11904 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11905 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11906 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11907 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11908 ; 288  |
                            11909 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11910 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11911 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11912 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11913 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11914 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11915 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11916 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11917 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11918 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11919 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11920 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11921 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11922 ; 302  |
                            11923 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11924 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11925 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11926 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11927 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11928 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11929 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11930 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11931 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11932 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11933 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11934 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11935 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11936 ; 316  |
                            11937 ; 317  |typedef union               
                            11938 ; 318  |{
                            11939 ; 319  |    struct {
                            11940 ; 320  |        int RS              :1;
                            11941 ; 321  |        int RST             :1;
                            11942 ; 322  |        int FS0             :1;
                            11943 ; 323  |        int FS1             :1;
                            11944 ; 324  |        int PSE             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11945 ; 325  |        int ASE             :1;
                            11946 ; 326  |        int IAA             :1;
                            11947 ; 327  |        int LR              :1;
                            11948 ; 328  |        int ASP0            :1;
                            11949 ; 329  |        int ASP1            :1;
                            11950 ; 330  |        int                 :1;
                            11951 ; 331  |        int ASPE            :1;
                            11952 ; 332  |        int                 :3;
                            11953 ; 333  |        int FS2             :1;
                            11954 ; 334  |        int ITC             :8;
                            11955 ; 335  |        int                 :24;
                            11956 ; 336  |    } B;
                            11957 ; 337  |    DWORD I;
                            11958 ; 338  |} usbcmd_type;
                            11959 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11960 ; 340  |
                            11961 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11962 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11963 ; 343  |
                            11964 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11965 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11966 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11967 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11968 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11969 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11970 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11971 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11972 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11973 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11974 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11975 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11976 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11977 ; 357  |
                            11978 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11979 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11980 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11981 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11982 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11983 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11984 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11985 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11986 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11987 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11988 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11989 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11990 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11991 ; 371  |
                            11992 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11993 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11994 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11995 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11996 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11997 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11998 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11999 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            12000 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            12001 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            12002 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            12003 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            12004 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            12005 ; 385  |
                            12006 ; 386  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12007 ; 387  |typedef union               
                            12008 ; 388  |{
                            12009 ; 389  |    struct {
                            12010 ; 390  |        int UI              :1;
                            12011 ; 391  |        int UEI             :1;
                            12012 ; 392  |        int PCI             :1;
                            12013 ; 393  |        int FRI             :1;
                            12014 ; 394  |        int SEI             :1;
                            12015 ; 395  |        int AAI             :1;
                            12016 ; 396  |        int URI             :1;
                            12017 ; 397  |        int STI             :1;
                            12018 ; 398  |        int SLI             :1;
                            12019 ; 399  |        int                 :3;
                            12020 ; 400  |        int HCH             :1;
                            12021 ; 401  |        int RCL             :1;
                            12022 ; 402  |        int PS              :1;
                            12023 ; 403  |        int AS              :1;
                            12024 ; 404  |        int                 :24;
                            12025 ; 405  |    } B;
                            12026 ; 406  |    DWORD I;
                            12027 ; 407  |} usbsts_type;
                            12028 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            12029 ; 409  |
                            12030 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            12031 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            12032 ; 412  |
                            12033 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            12034 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            12035 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            12036 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            12037 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            12038 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            12039 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            12040 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            12041 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            12042 ; 422  |
                            12043 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            12044 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            12045 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            12046 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            12047 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            12048 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            12049 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            12050 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            12051 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            12052 ; 432  |
                            12053 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            12054 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            12055 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            12056 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            12057 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            12058 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            12059 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            12060 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            12061 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            12062 ; 442  |
                            12063 ; 443  |
                            12064 ; 444  |typedef union               
                            12065 ; 445  |{
                            12066 ; 446  |    struct {
                            12067 ; 447  |        int UE              :1;
                            12068 ; 448  |        int UEE             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12069 ; 449  |        int PCE             :1;
                            12070 ; 450  |        int FRE             :1;
                            12071 ; 451  |        int SEE             :1;
                            12072 ; 452  |        int AAE             :1;
                            12073 ; 453  |        int URE             :1;
                            12074 ; 454  |        int STE             :1;
                            12075 ; 455  |        int SLE             :1;
                            12076 ; 456  |        int                 :39;
                            12077 ; 457  |    } B;
                            12078 ; 458  |    DWORD I;
                            12079 ; 459  |} usbintr_type;
                            12080 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            12081 ; 461  |
                            12082 ; 462  |
                            12083 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            12084 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            12085 ; 465  |
                            12086 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            12087 ; 467  |
                            12088 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            12089 ; 469  |
                            12090 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            12091 ; 471  |
                            12092 ; 472  |typedef union               
                            12093 ; 473  |{
                            12094 ; 474  |    struct {
                            12095 ; 475  |        int                 :25;
                            12096 ; 476  |        int ADD             :7;
                            12097 ; 477  |        int                 :16;
                            12098 ; 478  |    } B;
                            12099 ; 479  |    DWORD I;
                            12100 ; 480  |} devaddr_type;
                            12101 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            12102 ; 482  |
                            12103 ; 483  |
                            12104 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            12105 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            12106 ; 486  |
                            12107 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            12108 ; 488  |
                            12109 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            12110 ; 490  |
                            12111 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            12112 ; 492  |
                            12113 ; 493  |typedef union               
                            12114 ; 494  |{
                            12115 ; 495  |    struct {
                            12116 ; 496  |        int                 :10;
                            12117 ; 497  |        int ADD             :22;
                            12118 ; 498  |        int                 :16;
                            12119 ; 499  |    } B;
                            12120 ; 500  |    DWORD I;
                            12121 ; 501  |} endptlistaddr_type;
                            12122 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            12123 ; 503  |
                            12124 ; 504  |
                            12125 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            12126 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            12127 ; 507  |
                            12128 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            12129 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12130 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            12131 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            12132 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            12133 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            12134 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            12135 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            12136 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            12137 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            12138 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            12139 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            12140 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            12141 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            12142 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            12143 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            12144 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            12145 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            12146 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            12147 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            12148 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            12149 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            12150 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            12151 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            12152 ; 532  |
                            12153 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            12154 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            12155 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            12156 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            12157 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            12158 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            12159 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            12160 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            12161 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            12162 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            12163 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            12164 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            12165 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            12166 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            12167 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            12168 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            12169 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            12170 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            12171 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            12172 ; 552  |
                            12173 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            12174 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            12175 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            12176 ; 556  |
                            12177 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            12178 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            12179 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            12180 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            12181 ; 561  |
                            12182 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            12183 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            12184 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            12185 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            12186 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            12187 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            12188 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            12189 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            12190 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            12191 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12192 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            12193 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            12194 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            12195 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            12196 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            12197 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            12198 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            12199 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            12200 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            12201 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            12202 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            12203 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            12204 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            12205 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            12206 ; 586  |
                            12207 ; 587  |typedef union               
                            12208 ; 588  |{
                            12209 ; 589  |    struct {
                            12210 ; 590  |        int CCS             :1;
                            12211 ; 591  |        int CSC             :1;
                            12212 ; 592  |        int PE              :1;
                            12213 ; 593  |        int PEC             :1;
                            12214 ; 594  |        int OCA             :1;
                            12215 ; 595  |        int OCC             :1;
                            12216 ; 596  |        int FPR             :1;
                            12217 ; 597  |        int SUSP            :1;
                            12218 ; 598  |        int PR              :1;
                            12219 ; 599  |        int HSP             :1;
                            12220 ; 600  |        int LS              :2;
                            12221 ; 601  |        int PP              :1;
                            12222 ; 602  |        int PO              :1;
                            12223 ; 603  |        int PIC             :2;
                            12224 ; 604  |        int PTC             :4;
                            12225 ; 605  |        int WKCN            :1;
                            12226 ; 606  |        int WKDS            :1;
                            12227 ; 607  |        int WKOC            :1;
                            12228 ; 608  |        int PHCD            :1;
                            12229 ; 609  |        int PFSC            :1;
                            12230 ; 610  |        int                 :1;
                            12231 ; 611  |        int PSPD            :2;
                            12232 ; 612  |        int                 :1;
                            12233 ; 613  |        int PTW             :1;
                            12234 ; 614  |        int STS             :1;
                            12235 ; 615  |        int PTS             :1;
                            12236 ; 616  |        int                 :16;
                            12237 ; 617  |    } B;
                            12238 ; 618  |    DWORD I;
                            12239 ; 619  |} portsc1_type;
                            12240 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            12241 ; 621  |
                            12242 ; 622  |
                            12243 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            12244 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            12245 ; 625  |
                            12246 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            12247 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            12248 ; 628  |
                            12249 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            12250 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            12251 ; 631  |
                            12252 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            12253 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12254 ; 634  |
                            12255 ; 635  |typedef union               
                            12256 ; 636  |{
                            12257 ; 637  |    struct {
                            12258 ; 638  |        int CM              :2;
                            12259 ; 639  |        int ES              :1;
                            12260 ; 640  |        int                 :46;
                            12261 ; 641  |    } B;
                            12262 ; 642  |    DWORD I;
                            12263 ; 643  |} usbmode_type;
                            12264 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            12265 ; 645  |
                            12266 ; 646  |
                            12267 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            12268 ; 648  |//  The following endpoint equates are common for the following registers
                            12269 ; 649  |
                            12270 ; 650  |#define ENDPOINT0_BITPOS (0)
                            12271 ; 651  |#define ENDPOINT1_BITPOS (1)
                            12272 ; 652  |#define ENDPOINT2_BITPOS (2)
                            12273 ; 653  |#define ENDPOINT3_BITPOS (3)
                            12274 ; 654  |#define ENDPOINT4_BITPOS (4)
                            12275 ; 655  |#define ENDPOINT5_BITPOS (5)
                            12276 ; 656  |#define ENDPOINT6_BITPOS (6)
                            12277 ; 657  |#define ENDPOINT7_BITPOS (7)
                            12278 ; 658  |#define ENDPOINT8_BITPOS (8)
                            12279 ; 659  |#define ENDPOINT9_BITPOS (9)
                            12280 ; 660  |#define ENDPOINT10_BITPOS (10)
                            12281 ; 661  |#define ENDPOINT11_BITPOS (11)
                            12282 ; 662  |#define ENDPOINT12_BITPOS (12)
                            12283 ; 663  |#define ENDPOINT13_BITPOS (13)
                            12284 ; 664  |#define ENDPOINT14_BITPOS (14)
                            12285 ; 665  |#define ENDPOINT15_BITPOS (15)
                            12286 ; 666  |
                            12287 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            12288 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            12289 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            12290 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            12291 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            12292 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            12293 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            12294 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            12295 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            12296 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            12297 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            12298 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            12299 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            12300 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            12301 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            12302 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            12303 ; 683  |
                            12304 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            12305 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            12306 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            12307 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            12308 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            12309 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            12310 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            12311 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            12312 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            12313 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            12314 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            12315 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12316 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            12317 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            12318 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            12319 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            12320 ; 700  |
                            12321 ; 701  |typedef union               
                            12322 ; 702  |{
                            12323 ; 703  |    struct {
                            12324 ; 704  |        int EP0              :1;
                            12325 ; 705  |        int EP1              :1;
                            12326 ; 706  |        int EP2              :1;
                            12327 ; 707  |        int EP3              :1;
                            12328 ; 708  |        int EP4              :1;
                            12329 ; 709  |        int EP5              :1;
                            12330 ; 710  |        int EP6              :1;
                            12331 ; 711  |        int EP7              :1;
                            12332 ; 712  |        int EP8              :1;
                            12333 ; 713  |        int EP9              :1;
                            12334 ; 714  |        int EP10             :1;
                            12335 ; 715  |        int EP11             :1;
                            12336 ; 716  |        int EP12             :1;
                            12337 ; 717  |        int EP13             :1;
                            12338 ; 718  |        int EP14             :1;
                            12339 ; 719  |        int EP15             :1;
                            12340 ; 720  |        int                  :32;
                            12341 ; 721  |    } B;
                            12342 ; 722  |    DWORD I;
                            12343 ; 723  |} endpsetupstat_type;
                            12344 ; 724  |
                            12345 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            12346 ; 726  |
                            12347 ; 727  |typedef union               
                            12348 ; 728  |{
                            12349 ; 729  |    struct {
                            12350 ; 730  |        int EP0              :1;
                            12351 ; 731  |        int EP1              :1;
                            12352 ; 732  |        int EP2              :1;
                            12353 ; 733  |        int EP3              :1;
                            12354 ; 734  |        int EP4              :1;
                            12355 ; 735  |        int EP5              :1;
                            12356 ; 736  |        int EP6              :1;
                            12357 ; 737  |        int EP7              :1;
                            12358 ; 738  |        int EP8              :1;
                            12359 ; 739  |        int EP9              :1;
                            12360 ; 740  |        int EP10             :1;
                            12361 ; 741  |        int EP11             :1;
                            12362 ; 742  |        int EP12             :1;
                            12363 ; 743  |        int EP13             :1;
                            12364 ; 744  |        int EP14             :1;
                            12365 ; 745  |        int EP15             :1;
                            12366 ; 746  |        int                  :8;
                            12367 ; 747  |    } B;
                            12368 ; 748  |    WORD I;
                            12369 ; 749  |} endpt_type;
                            12370 
                            12408 
                            12409 ; 750  |
                            12410 ; 751  |typedef union
                            12411 ; 752  |{
                            12412 ; 753  |   struct {
                            12413 ; 754  |       endpt_type  RX;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12414 ; 755  |       endpt_type  TX;
                            12415 ; 756  |   } W;
                            12416 ; 757  |   DWORD DW;
                            12417 ; 758  |} endptrxtx_type;
                            12418 ; 759  |
                            12419 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            12420 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            12421 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            12422 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            12423 ; 764  |
                            12424 ; 765  |
                            12425 ; 766  |
                            12426 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            12427 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            12428 ; 769  |
                            12429 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            12430 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            12431 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            12432 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            12433 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            12434 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            12435 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            12436 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            12437 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            12438 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            12439 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            12440 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            12441 ; 782  |
                            12442 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            12443 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            12444 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            12445 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            12446 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            12447 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            12448 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            12449 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            12450 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            12451 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            12452 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            12453 ; 794  |
                            12454 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            12455 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            12456 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            12457 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            12458 ; 799  |
                            12459 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            12460 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            12461 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            12462 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            12463 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            12464 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            12465 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            12466 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            12467 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            12468 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            12469 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            12470 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            12471 ; 812  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12472 ; 813  |
                            12473 ; 814  |typedef union               
                            12474 ; 815  |{
                            12475 ; 816  |    struct {
                            12476 ; 817  |        int RXS             :1;
                            12477 ; 818  |        int RXD             :1;
                            12478 ; 819  |        int RXT             :2;
                            12479 ; 820  |        int                 :1;
                            12480 ; 821  |        int RXI             :1;
                            12481 ; 822  |        int RXR             :1;
                            12482 ; 823  |        int RXE             :1;
                            12483 ; 824  |        int                 :8;
                            12484 ; 825  |        int TXS             :1;
                            12485 ; 826  |        int TXD             :1;
                            12486 ; 827  |        int TXT             :2;
                            12487 ; 828  |        int                 :1;
                            12488 ; 829  |        int TXI             :1;
                            12489 ; 830  |        int TXR             :1;
                            12490 ; 831  |        int TXE             :1;
                            12491 ; 832  |        int                 :24;
                            12492 ; 833  |    } B;
                            12493 ; 834  |    DWORD I;
                            12494 ; 835  |} endptctrl_type;
                            12495 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            12496 ; 837  |
                            12497 ; 838  |#endif
                            12498 ; 839  |
                            12499 ; 840  |
                            12500 
                            12502 
                            12503 ; 37   |#include "regsusb20phy.h"
                            12504 
                            12506 
                            12507 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12508 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12509 ; 3    |//;  File        : regsusbphy.inc
                            12510 ; 4    |//;  Description : USB20 PHY Register definition
                            12511 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12512 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12513 ; 7    |
                            12514 ; 8    |// The following naming conventions are followed in this file.
                            12515 ; 9    |// All registers are named using the format...
                            12516 ; 10   |//     HW_<module>_<regname>
                            12517 ; 11   |// where <module> is the module name which can be any of the following...
                            12518 ; 12   |//     USB20
                            12519 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12520 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12521 ; 15   |// that module)
                            12522 ; 16   |// <regname> is the specific register within that module
                            12523 ; 17   |// We also define the following...
                            12524 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12525 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12526 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12527 ; 21   |// which does something else, and
                            12528 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12529 ; 23   |// which does something else.
                            12530 ; 24   |// Other rules
                            12531 ; 25   |//     All caps
                            12532 ; 26   |//     Numeric identifiers start at 0
                            12533 ; 27   |
                            12534 ; 28   |#if !(defined(regsusbphyinc))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12535 ; 29   |#define regsusbphyinc 1
                            12536 ; 30   |
                            12537 ; 31   |#include "types.h"
                            12538 
                            12540 
                            12541 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12542 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12543 ; 3    |//
                            12544 ; 4    |// Filename: types.h
                            12545 ; 5    |// Description: Standard data types
                            12546 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12547 ; 7    |
                            12548 ; 8    |#ifndef _TYPES_H
                            12549 ; 9    |#define _TYPES_H
                            12550 ; 10   |
                            12551 ; 11   |// TODO:  move this outta here!
                            12552 ; 12   |#if !defined(NOERROR)
                            12553 ; 13   |#define NOERROR 0
                            12554 ; 14   |#define SUCCESS 0
                            12555 ; 15   |#endif 
                            12556 ; 16   |#if !defined(SUCCESS)
                            12557 ; 17   |#define SUCCESS  0
                            12558 ; 18   |#endif
                            12559 ; 19   |#if !defined(ERROR)
                            12560 ; 20   |#define ERROR   -1
                            12561 ; 21   |#endif
                            12562 ; 22   |#if !defined(FALSE)
                            12563 ; 23   |#define FALSE 0
                            12564 ; 24   |#endif
                            12565 ; 25   |#if !defined(TRUE)
                            12566 ; 26   |#define TRUE  1
                            12567 ; 27   |#endif
                            12568 ; 28   |
                            12569 ; 29   |#if !defined(NULL)
                            12570 ; 30   |#define NULL 0
                            12571 ; 31   |#endif
                            12572 ; 32   |
                            12573 ; 33   |#define MAX_INT     0x7FFFFF
                            12574 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12575 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12576 ; 36   |#define MAX_ULONG   (-1) 
                            12577 ; 37   |
                            12578 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12579 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12580 ; 40   |
                            12581 ; 41   |
                            12582 ; 42   |#define BYTE    unsigned char       // btVarName
                            12583 ; 43   |#define CHAR    signed char         // cVarName
                            12584 ; 44   |#define USHORT  unsigned short      // usVarName
                            12585 ; 45   |#define SHORT   unsigned short      // sVarName
                            12586 ; 46   |#define WORD    unsigned int        // wVarName
                            12587 ; 47   |#define INT     signed int          // iVarName
                            12588 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12589 ; 49   |#define LONG    signed long         // lVarName
                            12590 ; 50   |#define BOOL    unsigned int        // bVarName
                            12591 ; 51   |#define FRACT   _fract              // frVarName
                            12592 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12593 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12594 ; 54   |#define FLOAT   float               // fVarName
                            12595 ; 55   |#define DBL     double              // dVarName
                            12596 ; 56   |#define ENUM    enum                // eVarName
                            12597 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12598 ; 58   |typedef WORD UCS3;                   // 
                            12599 ; 59   |
                            12600 ; 60   |#define UINT16  unsigned short
                            12601 ; 61   |#define UINT8   unsigned char   
                            12602 ; 62   |#define UINT32  unsigned long
                            12603 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12604 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12605 ; 65   |#define WCHAR   UINT16
                            12606 ; 66   |
                            12607 ; 67   |//UINT128 is 16 bytes or 6 words
                            12608 ; 68   |typedef struct UINT128_3500 {   
                            12609 ; 69   |    int val[6];     
                            12610 ; 70   |} UINT128_3500;
                            12611 ; 71   |
                            12612 ; 72   |#define UINT128   UINT128_3500
                            12613 ; 73   |
                            12614 ; 74   |// Little endian word packed byte strings:   
                            12615 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12616 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12617 ; 77   |// Little endian word packed byte strings:   
                            12618 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12619 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12620 ; 80   |
                            12621 ; 81   |// Declare Memory Spaces To Use When Coding
                            12622 ; 82   |// A. Sector Buffers
                            12623 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12624 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12625 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12626 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12627 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12628 ; 88   |// B. Media DDI Memory
                            12629 ; 89   |#define MEDIA_DDI_MEM _Y
                            12630 ; 90   |
                            12631 ; 91   |
                            12632 ; 92   |
                            12633 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12634 ; 94   |// Examples of circular pointers:
                            12635 ; 95   |//    INT CIRC cpiVarName
                            12636 ; 96   |//    DWORD CIRC cpdwVarName
                            12637 ; 97   |
                            12638 ; 98   |#define RETCODE INT                 // rcVarName
                            12639 ; 99   |
                            12640 ; 100  |// generic bitfield structure
                            12641 ; 101  |struct Bitfield {
                            12642 ; 102  |    unsigned int B0  :1;
                            12643 ; 103  |    unsigned int B1  :1;
                            12644 ; 104  |    unsigned int B2  :1;
                            12645 ; 105  |    unsigned int B3  :1;
                            12646 ; 106  |    unsigned int B4  :1;
                            12647 ; 107  |    unsigned int B5  :1;
                            12648 ; 108  |    unsigned int B6  :1;
                            12649 ; 109  |    unsigned int B7  :1;
                            12650 ; 110  |    unsigned int B8  :1;
                            12651 ; 111  |    unsigned int B9  :1;
                            12652 ; 112  |    unsigned int B10 :1;
                            12653 ; 113  |    unsigned int B11 :1;
                            12654 ; 114  |    unsigned int B12 :1;
                            12655 ; 115  |    unsigned int B13 :1;
                            12656 ; 116  |    unsigned int B14 :1;
                            12657 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12658 ; 118  |    unsigned int B16 :1;
                            12659 ; 119  |    unsigned int B17 :1;
                            12660 ; 120  |    unsigned int B18 :1;
                            12661 ; 121  |    unsigned int B19 :1;
                            12662 ; 122  |    unsigned int B20 :1;
                            12663 ; 123  |    unsigned int B21 :1;
                            12664 ; 124  |    unsigned int B22 :1;
                            12665 ; 125  |    unsigned int B23 :1;
                            12666 ; 126  |};
                            12667 ; 127  |
                            12668 ; 128  |union BitInt {
                            12669 ; 129  |        struct Bitfield B;
                            12670 ; 130  |        int        I;
                            12671 ; 131  |};
                            12672 ; 132  |
                            12673 ; 133  |#define MAX_MSG_LENGTH 10
                            12674 ; 134  |struct CMessage
                            12675 ; 135  |{
                            12676 ; 136  |        unsigned int m_uLength;
                            12677 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12678 ; 138  |};
                            12679 ; 139  |
                            12680 ; 140  |typedef struct {
                            12681 ; 141  |    WORD m_wLength;
                            12682 ; 142  |    WORD m_wMessage;
                            12683 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12684 ; 144  |} Message;
                            12685 ; 145  |
                            12686 ; 146  |struct MessageQueueDescriptor
                            12687 ; 147  |{
                            12688 ; 148  |        int *m_pBase;
                            12689 ; 149  |        int m_iModulo;
                            12690 ; 150  |        int m_iSize;
                            12691 ; 151  |        int *m_pHead;
                            12692 ; 152  |        int *m_pTail;
                            12693 ; 153  |};
                            12694 ; 154  |
                            12695 ; 155  |struct ModuleEntry
                            12696 ; 156  |{
                            12697 ; 157  |    int m_iSignaledEventMask;
                            12698 ; 158  |    int m_iWaitEventMask;
                            12699 ; 159  |    int m_iResourceOfCode;
                            12700 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12701 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12702 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12703 ; 163  |    int m_uTimeOutHigh;
                            12704 ; 164  |    int m_uTimeOutLow;
                            12705 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12706 ; 166  |};
                            12707 ; 167  |
                            12708 ; 168  |union WaitMask{
                            12709 ; 169  |    struct B{
                            12710 ; 170  |        unsigned int m_bNone     :1;
                            12711 ; 171  |        unsigned int m_bMessage  :1;
                            12712 ; 172  |        unsigned int m_bTimer    :1;
                            12713 ; 173  |        unsigned int m_bButton   :1;
                            12714 ; 174  |    } B;
                            12715 ; 175  |    int I;
                            12716 ; 176  |} ;
                            12717 ; 177  |
                            12718 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12719 ; 179  |struct Button {
                            12720 ; 180  |        WORD wButtonEvent;
                            12721 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12722 ; 182  |};
                            12723 ; 183  |
                            12724 ; 184  |struct Message {
                            12725 ; 185  |        WORD wMsgLength;
                            12726 ; 186  |        WORD wMsgCommand;
                            12727 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12728 ; 188  |};
                            12729 ; 189  |
                            12730 ; 190  |union EventTypes {
                            12731 ; 191  |        struct CMessage msg;
                            12732 ; 192  |        struct Button Button ;
                            12733 ; 193  |        struct Message Message;
                            12734 ; 194  |};
                            12735 ; 195  |
                            12736 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12737 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12738 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12739 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12740 ; 200  |
                            12741 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12742 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12743 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12744 ; 204  |
                            12745 ; 205  |#if DEBUG
                            12746 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12747 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12748 ; 208  |#else 
                            12749 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            12750 ; 210  |#define DebugBuildAssert(x)    
                            12751 ; 211  |#endif
                            12752 ; 212  |
                            12753 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12754 ; 214  |//  #pragma asm
                            12755 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12756 ; 216  |//  #pragma endasm
                            12757 ; 217  |
                            12758 ; 218  |
                            12759 ; 219  |#ifdef COLOR_262K
                            12760 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            12761 ; 221  |#elif defined(COLOR_65K)
                            12762 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            12763 ; 223  |#else
                            12764 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            12765 ; 225  |#endif
                            12766 ; 226  |    
                            12767 ; 227  |#endif // #ifndef _TYPES_H
                            12768 
                            12770 
                            12771 ; 32   |
                            12772 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12773 ; 34   |//   USB2.0 PHY STMP Registers 
                            12774 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12775 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12776 ; 37   |
                            12777 ; 38   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12778 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12779 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12780 ; 41   |
                            12781 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12782 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12783 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12784 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12785 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12786 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12787 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12788 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12789 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12790 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12791 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12792 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12793 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12794 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12795 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12796 ; 57   |
                            12797 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12798 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12799 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12800 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12801 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12802 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12803 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12804 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12805 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12806 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12807 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12808 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12809 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12810 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12811 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12812 ; 73   |
                            12813 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12814 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12815 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12816 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12817 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12818 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12819 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12820 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12821 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12822 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12823 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12824 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12825 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12826 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12827 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12828 ; 89   |
                            12829 ; 90   |typedef union               
                            12830 ; 91   |{
                            12831 ; 92   |    struct {
                            12832 ; 93   |        int RSVD0          :5;
                            12833 ; 94   |        int TXDISCON1500   :1;
                            12834 ; 95   |        int PLLVCOPWD      :1;
                            12835 ; 96   |        int PLLVCPPWD      :1;
                            12836 ; 97   |        int RSVD1          :2;
                            12837 ; 98   |        int TXPWDFS        :1;
                            12838 ; 99   |        int TXPWDIBIAS     :1;
                            12839 ; 100  |        int TXPWDV2I       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12840 ; 101  |        int TXPWDVBG       :1;
                            12841 ; 102  |        int TXPWDCOMP      :1;
                            12842 ; 103  |        int RSVD2          :1;
                            12843 ; 104  |        int RXPWDDISCONDET :1;
                            12844 ; 105  |        int RXPWDENV       :1;
                            12845 ; 106  |        int RXPWD1PT1      :1;
                            12846 ; 107  |        int RXPWDDIFF      :1;
                            12847 ; 108  |        int RXPWDRX        :1;
                            12848 ; 109  |        int RSVD3          :1;
                            12849 ; 110  |        int PWDIBIAS       :1;
                            12850 ; 111  |        int REGRESET       :1;
                            12851 ; 112  |    } B;
                            12852 ; 113  |    int I;
                            12853 ; 114  |} usbphypwd_type;
                            12854 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            12855 ; 116  |
                            12856 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12857 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12858 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12859 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12860 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12861 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12862 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12863 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12864 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12865 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12866 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12867 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12868 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12869 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12870 ; 131  |
                            12871 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12872 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12873 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12874 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12875 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12876 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12877 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12878 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12879 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12880 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12881 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12882 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12883 ; 144  |
                            12884 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            12885 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            12886 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            12887 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            12888 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            12889 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                            12890 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            12891 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12892 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            12893 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            12894 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            12895 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            12896 ; 157  |
                            12897 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12898 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12899 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12900 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12901 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12902 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12903 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12904 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12905 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12906 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12907 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12908 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12909 ; 170  |
                            12910 ; 171  |typedef union               
                            12911 ; 172  |{
                            12912 ; 173  |    struct {
                            12913 ; 174  |        int TXCAL1500          :4;
                            12914 ; 175  |        int RSVD0              :1;
                            12915 ; 176  |        int TXENCAL1500        :1;
                            12916 ; 177  |        int TXHSXCVR           :1;
                            12917 ; 178  |        int TXCALIBRATE        :1;
                            12918 ; 179  |        int TXCAL45DN          :4;
                            12919 ; 180  |        int RSVD1              :1;
                            12920 ; 181  |        int TXENCAL45DN        :1;
                            12921 ; 182  |        int TXHSTERM           :1;
                            12922 ; 183  |        int TXSKEW             :1;
                            12923 ; 184  |        int TXCAL45DP          :4;
                            12924 ; 185  |        int RSVD2              :1;
                            12925 ; 186  |        int TXENCAL45DP        :1;
                            12926 ; 187  |        int TXFSHIZ            :1;
                            12927 ; 188  |        int TXCOMPOUT          :1;
                            12928 ; 189  |    } B;
                            12929 ; 190  |    int I;
                            12930 ; 191  |} usbphytx_type;
                            12931 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12932 ; 193  |
                            12933 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12934 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12935 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12936 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12937 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12938 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12939 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12940 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12941 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12942 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12943 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12944 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12945 ; 206  |
                            12946 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12947 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12948 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12949 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12950 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12951 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12952 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12953 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12954 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12955 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12956 ; 217  |
                            12957 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            12958 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            12959 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            12960 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            12961 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            12962 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12963 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            12964 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12965 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            12966 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12967 ; 228  |
                            12968 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12969 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12970 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12971 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12972 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12973 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12974 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12975 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12976 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12977 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12978 ; 239  |
                            12979 ; 240  |typedef union               
                            12980 ; 241  |{
                            12981 ; 242  |    struct {
                            12982 ; 243  |        int PLLV2ISEL        :4;
                            12983 ; 244  |        int RSVD0            :1;
                            12984 ; 245  |        int PLLCPDBLIP       :1;
                            12985 ; 246  |        int PLLVCOCLK2       :1;
                            12986 ; 247  |        int PLLVCOCLK24      :1;
                            12987 ; 248  |        int PLLCPNSEL        :4;
                            12988 ; 249  |        int PLLCLKDIVSEL     :4;
                            12989 ; 250  |        int RSVD1            :4;
                            12990 ; 251  |        int PLLPFDRST        :1;
                            12991 ; 252  |        int PLLCPSHORTLFR    :1;
                            12992 ; 253  |        int PLLVCOKSTART     :1;
                            12993 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12994 ; 255  |    } B;
                            12995 ; 256  |    int I;
                            12996 ; 257  |} usbphypll_type;
                            12997 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12998 ; 259  |
                            12999 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            13000 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            13001 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13002 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            13003 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            13004 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            13005 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            13006 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            13007 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            13008 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            13009 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            13010 ; 271  |
                            13011 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            13012 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            13013 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            13014 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            13015 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            13016 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            13017 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            13018 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            13019 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            13020 ; 281  |
                            13021 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            13022 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            13023 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            13024 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            13025 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            13026 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            13027 ; 288  |//              480Mhz/7 =68.57Mhz
                            13028 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            13029 ; 290  |
                            13030 ; 291  |//              480Mhz/8 ~60Mhz
                            13031 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            13032 ; 293  |
                            13033 ; 294  |//              480Mhz/9 =53.3Mhz
                            13034 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            13035 ; 296  |
                            13036 ; 297  |//              480Mhz/10 =48Mhz
                            13037 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            13038 ; 299  |
                            13039 ; 300  |
                            13040 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            13041 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            13042 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            13043 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            13044 ; 305  |
                            13045 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            13046 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            13047 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            13048 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            13049 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            13050 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            13051 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            13052 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            13053 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            13054 ; 315  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13055 ; 316  |typedef union               
                            13056 ; 317  |{
                            13057 ; 318  |    struct {
                            13058 ; 319  |     int ENVADJ               :4;
                            13059 ; 320  |     int DISCONADJ            :4;
                            13060 ; 321  |     int DEBUGMODE            :4;
                            13061 ; 322  |     int PLLLKTIMECTL         :4;
                            13062 ; 323  |     int PLLCKDIVCTL          :4;
                            13063 ; 324  |     int HOSTMODETEST         :1;
                            13064 ; 325  |     int FSCKSOURCESEL        :1;
                            13065 ; 326  |     int REGRXDBYPASS         :1;
                            13066 ; 327  |     int PLLLOCKED            :1;
                            13067 ; 328  |    } B;
                            13068 ; 329  |    int I;
                            13069 ; 330  |} usbphyrx_type;
                            13070 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            13071 ; 332  |
                            13072 ; 333  |#endif
                            13073 ; 334  |
                            13074 
                            13076 
                            13077 ; 38   |
                            13078 ; 39   |
                            13079 ; 40   |#endif // if (!@def(hwequ))
                            13080 ; 41   |
                            13081 
                            13083 
                            13084 ; 12   |#else 
                            13085 ; 13   |//include "regscodec.inc"
                            13086 ; 14   |#endif
                            13087 ; 15   |
                            13088 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            13089 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            13090 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            13091 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            13092 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            13093 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            13094 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            13095 ; 23   |
                            13096 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            13097 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            13098 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            13099 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            13100 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            13101 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            13102 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            13103 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            13104 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            13105 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            13106 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            13107 ; 35   |
                            13108 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            13109 ; 37   |// MEDIA DEFINITIONS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13110 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            13111 ; 39   |
                            13112 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            13113 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            13114 ; 42   |#if defined(NAND1)
                            13115 ; 43   |#define SM_INTERNAL_CHIPS 1
                            13116 ; 44   |#else 
                            13117 ; 45   |#if defined(NAND2)
                            13118 ; 46   |#define SM_INTERNAL_CHIPS 2
                            13119 ; 47   |#else 
                            13120 ; 48   |#if defined(NAND3)
                            13121 ; 49   |#define SM_INTERNAL_CHIPS 3
                            13122 ; 50   |#else 
                            13123 ; 51   |#if defined(NAND4)
                            13124 ; 52   |#define SM_INTERNAL_CHIPS 4
                            13125 ; 53   |#else 
                            13126 ; 54   |#define SM_INTERNAL_CHIPS 1
                            13127 ; 55   |#endif
                            13128 ; 56   |#endif
                            13129 ; 57   |#endif
                            13130 ; 58   |#endif
                            13131 ; 59   |
                            13132 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            13133 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            13134 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            13135 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            13136 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            13137 ; 65   |//*** comment out if active high ****
                            13138 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            13139 ; 67   |
                            13140 ; 68   |#if defined(SMEDIA)
                            13141 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            13142 ; 70   |#define NUM_SM_EXTERNAL 1
                            13143 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13144 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            13145 ; 73   |#else 
                            13146 ; 74   |#if defined(MMC)
                            13147 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            13148 ; 76   |#define NUM_SM_EXTERNAL 0
                            13149 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            13150 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            13151 ; 79   |#else 
                            13152 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            13153 ; 81   |#define NUM_SM_EXTERNAL 0
                            13154 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13155 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            13156 ; 84   |#endif
                            13157 ; 85   |#endif
                            13158 ; 86   |
                            13159 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            13160 ; 88   |// Mass Storage Class definitions
                            13161 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            13162 ; 90   |// Set to 0 if Composite Device build is desired.    
                            13163 ; 91   |#define MULTI_LUN_BUILD 1   
                            13164 ; 92   |
                            13165 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            13166 ; 94   |//  SCSI
                            13167 ; 95   |#if (MULTI_LUN_BUILD==0)
                            13168 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13169 ; 97   |    #define SCSI_NUM_TARGETS                        2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13170 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13171 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            13172 ; 100  |  #else
                            13173 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            13174 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13175 ; 103  |  #endif
                            13176 ; 104  |#else
                            13177 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            13178 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13179 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            13180 ; 108  |  #else
                            13181 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            13182 ; 110  |  #endif
                            13183 ; 111  |#endif
                            13184 ; 112  |
                            13185 ; 113  |
                            13186 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            13187 ; 115  |
                            13188 ; 116  |
                            13189 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            13190 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            13191 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            13192 ; 120  |#ifdef MMC
                            13193 ; 121  |#ifdef MTP_BUILD
                            13194 ; 122  |// --------------------
                            13195 ; 123  |// MTP and MMC
                            13196 ; 124  |// --------------------
                            13197 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            13198 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            13199 ; 127  |#else  // ifndef MTP_BUILD
                            13200 ; 128  |#ifdef STMP_BUILD_PLAYER
                            13201 ; 129  |// --------------------
                            13202 ; 130  |// Player and MMC
                            13203 ; 131  |// --------------------
                            13204 ; 132  |#else
                            13205 ; 133  |// --------------------
                            13206 ; 134  |// USBMSC and MMC
                            13207 ; 135  |// --------------------
                            13208 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            13209 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            13210 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            13211 ; 139  |#endif // ifdef MTP_BUILD
                            13212 ; 140  |#else  // ifndef MMC
                            13213 ; 141  |#ifdef MTP_BUILD
                            13214 ; 142  |// --------------------
                            13215 ; 143  |// MTP and NAND only
                            13216 ; 144  |// --------------------
                            13217 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            13218 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            13219 ; 147  |#else  // ifndef MTP_BUILD
                            13220 ; 148  |#ifdef STMP_BUILD_PLAYER
                            13221 ; 149  |// --------------------
                            13222 ; 150  |// Player and NAND only
                            13223 ; 151  |// --------------------
                            13224 ; 152  |#else
                            13225 ; 153  |// --------------------
                            13226 ; 154  |// USBMSC and NAND only
                            13227 ; 155  |// --------------------
                            13228 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            13229 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            13230 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            13231 ; 159  |#endif // ifdef MTP_BUILD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13232 ; 160  |#endif // ifdef MMC 
                            13233 ; 161  |
                            13234 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            13235 ; 163  |#if (defined(MTP_BUILD))
                            13236 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            13237 ; 165  |
                            13238 ; 166  |////!
                            13239 ; 167  |////! This varible holds the watchdog count for the store flush.
                            13240 ; 168  |////!
                            13241 ; 169  |///
                            13242 ; 170  |#include <types.h>
                            13243 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            13244 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            13245 ; 173  |#endif
                            13246 ; 174  |
                            13247 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            13248 ; 176  |// These are needed here for Mass Storage Class
                            13249 ; 177  |// Needs to be cleaned up
                            13250 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            13251 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            13252 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            13253 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            13254 ; 182  |
                            13255 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            13256 ; 184  |
                            13257 ; 185  |#endif
                            13258 ; 186  |
                            13259 ; 187  |
                            13260 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            13261 ; 189  |// SmartMedia/NAND defs
                            13262 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13263 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            13264 ; 192  |
                            13265 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            13266 ; 194  |// Sysloadresources defs
                            13267 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13268 ; 196  |
                            13269 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            13270 ; 198  |// MMC defs
                            13271 ; 199  |#define MMC_MAX_PARTITIONS 1
                            13272 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            13273 ; 201  |
                            13274 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            13275 ; 203  |// SPI defs
                            13276 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            13277 ; 205  |
                            13278 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            13279 ; 207  |// Global media defs
                            13280 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            13281 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            13282 ; 210  |
                            13283 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            13284 ; 212  |// DO NOT CHANGE THESE!!!
                            13285 ; 213  |#define SM_MAX_PARTITIONS 4
                            13286 ; 214  |#define MAX_HANDLES 2
                            13287 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            13288 ; 216  |
                            13289 ; 217  |
                            13290 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            13291 ; 219  |// Battery LRADC Values 
                            13292 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            13293 ; 221  |// brownout trip point in mV (moved by RS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13294 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            13295 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            13296 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            13297 ; 225  |//     audio recording to media.
                            13298 ; 226  |#define BATT_SAFETY_MARGIN 10
                            13299 ; 227  |
                            13300 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            13301 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            13302 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            13303 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            13304 ; 232  |
                            13305 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            13306 ; 234  |
                            13307 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            13308 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            13309 ; 237  |#if (!defined(CLCD))
                            13310 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            13311 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            13312 ; 240  |#else 
                            13313 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            13314 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            13315 ; 243  |#endif
                            13316 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            13317 ; 245  |
                            13318 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            13319 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            13320 ; 248  |// See mp3 encoder overlay.
                            13321 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            13322 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            13323 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            13324 ; 252  |
                            13325 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            13326 ; 254  |// Voice recording filenames
                            13327 ; 255  |// number of digits in filename Vxxx.wav
                            13328 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            13329 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            13330 ; 258  |
                            13331 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            13332 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            13333 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            13334 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            13335 ; 263  |#if defined(DEVICE_3500)
                            13336 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            13337 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            13338 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            13339 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            13340 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13341 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            13342 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            13343 ; 271  |
                            13344 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            13345 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            13346 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13347 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            13348 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            13349 ; 277  |
                            13350 ; 278  |#else 
                            13351 ; 279  |// STMP3410
                            13352 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            13353 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13354 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            13355 ; 283  |#endif
                            13356 ; 284  |
                            13357 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            13358 ; 286  |// Number of available soft timers
                            13359 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            13360 ; 288  |#if defined(SYNC_LYRICS)
                            13361 ; 289  |#define SOFT_TIMERS 10
                            13362 ; 290  |#else 
                            13363 ; 291  |#if defined(JPEG_DECODER)
                            13364 ; 292  |#define SOFT_TIMERS 10
                            13365 ; 293  |#else 
                            13366 ; 294  |#define SOFT_TIMERS 9
                            13367 ; 295  |#endif
                            13368 ; 296  |#endif
                            13369 ; 297  |
                            13370 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            13371 ; 299  |//  sizes
                            13372 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            13373 ; 301  |#if defined(MMC)
                            13374 ; 302  |#if defined(USE_PLAYLIST5)
                            13375 ; 303  |#define MENU_STACK_SIZE 1500
                            13376 ; 304  |#else 
                            13377 ; 305  |#define MENU_STACK_SIZE 1250
                            13378 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            13379 ; 307  |#else 
                            13380 ; 308  |#if defined(USE_PLAYLIST5)
                            13381 ; 309  |#define MENU_STACK_SIZE 1500
                            13382 ; 310  |#else 
                            13383 ; 311  |#define MENU_STACK_SIZE 1250
                            13384 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            13385 ; 313  |#endif //if @def('MMC')
                            13386 ; 314  |
                            13387 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            13388 ; 316  |// 
                            13389 ; 317  |#define STACK_L1_SIZE 750
                            13390 ; 318  |#define STACK_L2_SIZE 100
                            13391 ; 319  |#define STACK_L3_SIZE 160
                            13392 ; 320  |
                            13393 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            13394 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            13395 ; 323  |// is ok with switching code.
                            13396 ; 324  |#if defined(MTP_BUILD)
                            13397 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            13398 ; 326  |#endif
                            13399 ; 327  |
                            13400 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            13401 ; 329  |// maximum number of nested funclets 
                            13402 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            13403 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            13404 ; 332  |
                            13405 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            13406 ; 334  |//    LCD DEFINITIONS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13407 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            13408 ; 336  |
                            13409 ; 337  |#define SPACE_CHAR 0x000020          
                            13410 ; 338  |#define ZERO_CHAR 0x000030
                            13411 ; 339  |#define COLON_CHAR 0x00003A
                            13412 ; 340  |#define PERIOD_CHAR 0x00002E
                            13413 ; 341  |
                            13414 ; 342  |#if (defined(S6B33B0A_LCD))
                            13415 ; 343  |#define LCD_X_SIZE 128
                            13416 ; 344  |#define LCD_Y_SIZE 159
                            13417 ; 345  |#endif
                            13418 ; 346  |
                            13419 ; 347  |#if (defined(SED15XX_LCD))
                            13420 ; 348  |#define LCD_X_SIZE 128
                            13421 ; 349  |#define LCD_Y_SIZE 64
                            13422 ; 350  |#endif
                            13423 ; 351  |
                            13424 ; 352  |
                            13425 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            13426 ; 354  |//   Details on Customizing Contrast
                            13427 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            13428 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            13429 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            13430 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            13431 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            13432 ; 360  |//   unless the ezact sequence is remembered.
                            13433 ; 361  |//   To find out what range your player supports: 
                            13434 ; 362  |//   change these equs to full range or comment out (full range is default)
                            13435 ; 363  |//;;;;;;
                            13436 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            13437 ; 365  |// recommended calibration using player -- uncomment 
                            13438 ; 366  |//;;;;;;
                            13439 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            13440 ; 368  |////////////////////////////
                            13441 ; 369  |#if (defined(DEMO_HW))
                            13442 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            13443 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            13444 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            13445 ; 373  |#else 
                            13446 ; 374  |
                            13447 ; 375  |#if (defined(S6B33B0A_LCD))
                            13448 ; 376  |#define LCD_MAX_CONTRAST 210
                            13449 ; 377  |#define LCD_MIN_CONTRAST 160    
                            13450 ; 378  |#endif
                            13451 ; 379  |
                            13452 ; 380  |#if (defined(SED15XX_LCD))
                            13453 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            13454 ; 382  |// Engineering board regs support range [17-37].
                            13455 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            13456 ; 384  |//   One default contrast range [24-42] works for both.
                            13457 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            13458 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            13459 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            13460 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            13461 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            13462 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            13463 ; 391  |
                            13464 ; 392  |#if (defined(NEWSHINGYIH))
                            13465 ; 393  |#define LCD_MAX_CONTRAST 250
                            13466 ; 394  |#define LCD_MIN_CONTRAST 0
                            13467 ; 395  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13468 ; 396  |//-----
                            13469 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            13470 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            13471 ; 399  |#define LCD_MAX_CONTRAST 250
                            13472 ; 400  |#define LCD_MIN_CONTRAST 0
                            13473 ; 401  |
                            13474 ; 402  |//=====
                            13475 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            13476 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            13477 ; 405  |//LCD_MAX_CONTRAST equ 42
                            13478 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            13479 ; 407  |
                            13480 ; 408  |#endif
                            13481 ; 409  |#endif
                            13482 ; 410  |
                            13483 ; 411  |#endif
                            13484 ; 412  |
                            13485 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            13486 ; 414  |// The default value of the lcd contrast in % of range
                            13487 ; 415  |//   the default value is used when no settings.dat is available
                            13488 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            13489 ; 417  |
                            13490 ; 418  |#if (defined(S6B33B0A_LCD))
                            13491 ; 419  |// 60% of range is default value
                            13492 ; 420  |#define DEFAULT_CONTRAST 50 
                            13493 ; 421  |#endif
                            13494 ; 422  |
                            13495 ; 423  |#if (defined(SED15XX_LCD))
                            13496 ; 424  |// % of range is default value (was 60%)
                            13497 ; 425  |#define DEFAULT_CONTRAST 50 
                            13498 ; 426  |#endif
                            13499 ; 427  |
                            13500 ; 428  |
                            13501 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13502 ; 430  |// make lower when doing calibration
                            13503 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13504 ; 432  |
                            13505 ; 433  |
                            13506 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13507 ; 435  |// For FFWD and RWND
                            13508 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13509 ; 437  |#define SECONDS_TO_SKIP 1
                            13510 ; 438  |#define SECONDS_TO_SKIP1 3
                            13511 ; 439  |#define SECONDS_TO_SKIP2 6
                            13512 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13513 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13514 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13515 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13516 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13517 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13518 ; 446  |
                            13519 ; 447  |// For audible FFW/RWD
                            13520 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13521 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13522 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13523 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13524 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13525 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13526 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13527 ; 455  |#define LEVEL2_BOUNDARY 33 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13528 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13529 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13530 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13531 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13532 ; 460  |// Short Song Time, songs too short to play.
                            13533 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13534 ; 462  |
                            13535 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13536 ; 464  |// MP3 Sync Values
                            13537 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13538 ; 466  |// # bytes to look for sync before marking it bad
                            13539 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13540 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13541 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13542 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13543 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13544 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13545 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13546 ; 474  |
                            13547 ; 475  |
                            13548 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13549 ; 477  |//// Multi-Stage Volume Control Definitions
                            13550 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13551 ; 479  |//// Use Multi-Stage Volume
                            13552 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13553 ; 481  |
                            13554 ; 482  |//// Master Volume definitions
                            13555 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13556 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13557 ; 485  |
                            13558 ; 486  |//// DAC-Mode definitions
                            13559 ; 487  |//// Adjusts 0dB point
                            13560 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13561 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13562 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            13563 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13564 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            13565 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            13566 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13567 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13568 ; 496  |
                            13569 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13570 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13571 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            13572 ; 500  |
                            13573 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            13574 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            13575 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13576 ; 504  |
                            13577 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            13578 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13579 ; 507  |
                            13580 ; 508  |
                            13581 ; 509  |//// Line In definitions (used for Line-In 1)
                            13582 ; 510  |//// 0dB point of the Line In
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13583 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13584 ; 512  |//// Minimum volume of Line In
                            13585 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13586 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13587 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13588 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13589 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13590 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            13591 ; 519  |
                            13592 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13593 ; 521  |//// 0dB point of the Line In
                            13594 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13595 ; 523  |//// Minimum volume of Line In
                            13596 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13597 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13598 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13599 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13600 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13601 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13602 ; 530  |
                            13603 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13604 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            13605 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13606 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13607 ; 535  |
                            13608 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13609 ; 537  |////
                            13610 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13611 ; 539  |////
                            13612 ; 540  |///
                            13613 ; 541  |#include <types.h>
                            13614 ; 542  |extern volatile WORD g_wActivityState;
                            13615 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13616 ; 544  |
                            13617 ; 545  |void _reentrant Init5VSense(void);
                            13618 ; 546  |void _reentrant ServiceDCDC(void);
                            13619 ; 547  |
                            13620 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13621 ; 549  |//// JPEG Thumbnail Mode Setting
                            13622 ; 550  |//// number of column in thumbnail mode
                            13623 ; 551  |#define THUMBNAIL_X 2           
                            13624 ; 552  |//// number of row in  thumbnail mode
                            13625 ; 553  |#define THUMBNAIL_Y 2           
                            13626 ; 554  |//// thumbnail boundary offset x
                            13627 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13628 ; 556  |//// thumbnail boundary offset y
                            13629 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13630 ; 558  |
                            13631 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13632 ; 560  |
                            13633 
                            13635 
                            13636 ; 5    |#include "stringlib.h"
                            13637 
                            13639 
                            13640 ; 1    |#ifndef STRINGLIB_H
                            13641 ; 2    |#define STRINGLIB_H
                            13642 
                            13644 
                            13645 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13646 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                            13647 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCoun
                                  t);
                            13648 ; 6    |
                            13649 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                            13650 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                            13651 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                            13652 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                            13653 ; 11   |
                            13654 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                            13655 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                            13656 ; 14   |
                            13657 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                            13658 ; 16   |
                            13659 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc, int iCount);
                            13660 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc);
                            13661 ; 19   |
                            13662 ; 20   |
                            13663 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int i
                                  Count);
                            13664 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                            13665 ; 23   |
                            13666 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int 
                                  iCount);
                            13667 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                            13668 ; 26   |
                            13669 ; 27   |
                            13670 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                            13671 ; 29   |
                            13672 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                            13673 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                            13674 ; 32   |
                            13675 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                            13676 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            13677 ; 35   |
                            13678 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                            13679 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            13680 ; 38   |
                            13681 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                            13682 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            13683 ; 41   |
                            13684 ; 42   |#endif
                            13685 
                            13687 
                            13688 ; 6    |#include "sysmem.h"
                            13689 
                            13691 
                            13692 ; 1    |//;******************************************************************************
                            13693 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            13694 ; 3    |//; File: sysmem.h
                            13695 ; 4    |//; ST System Memory Externs
                            13696 ; 5    |//;******************************************************************************
                            13697 ; 6    |
                            13698 ; 7    |#ifndef SYSMEM_XREF_C
                            13699 ; 8    |#define SYSMEM_XREF_C
                            13700 ; 9    |
                            13701 ; 10   |// Variables in X
                            13702 ; 11   |extern unsigned int _X g_wDecoderCSR;
                            13703 ; 12   |extern unsigned int _X g_wDecoderSR;
                            13704 ; 13   |extern unsigned int _X g_wDecoderCSR2;  // DECODE2EOF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13705 ; 14   |extern unsigned int _X g_wEncoderSR;
                            13706 ; 15   |extern unsigned int _X g_wEncoderCSR;
                            13707 ; 16   |extern unsigned int _X g_wRecStartTimeHigh;
                            13708 ; 17   |extern unsigned int _X g_wRecStartTimeLow;
                            13709 ; 18   |extern unsigned int _X g_wSysError;
                            13710 ; 19   |#ifdef TRACEBUF_EN
                            13711 ; 20   |extern unsigned int _X g_wTraceBuffer; //Disabled by default.   
                            13712 ; 21   |extern unsigned int _X g_wTracePointer;
                            13713 ; 22   |#endif
                            13714 ; 23   |extern unsigned int _X g_wUserScratchX[];
                            13715 ; 24   |extern unsigned int _X g_wNextVoiceNumValue;
                            13716 ; 25   |extern unsigned int _X g_wEncAdpcmSave_r7;
                            13717 ; 26   |extern unsigned int _X g_wEncAdpcmSave_m7;
                            13718 ; 27   |extern unsigned int _X g_wEncModuleState;
                            13719 ; 28   |extern unsigned int _X g_wEncoderIsrSR;
                            13720 ; 29   |extern unsigned int _X g_bAudibleNeedFileSize;          // 10/12/04 mmiu - Added for AA fi
                                  le navigation
                            13721 ; 30   |extern unsigned int _X g_bAudiblePlayThrough;           // 11/1/04 mmiu - Added for file p
                                  osition play-through indicator
                            13722 ; 31   |extern unsigned int _X g_wSongStartOffsetHigh;          // 11/1/04 mmiu - Added until conf
                                  irmed we can use g_wSongByteTotalConsumedHigh/Low
                            13723 ; 32   |extern unsigned int _X g_wSongStartOffsetLow;
                            13724 ; 33   |
                            13725 ; 34   |// Variables in Y
                            13726 ; 35   |extern int          _Y g_VolumeBias;
                            13727 ; 36   |extern unsigned int _Y g_wCurrentRoutinePtr;
                            13728 ; 37   |extern unsigned int _Y g_wSystemFileHandle;
                            13729 ; 38   |extern unsigned int _Y g_wSongByteTotalHigh;
                            13730 ; 39   |extern unsigned int _Y g_wSongByteTotalLow; 
                            13731 ; 40   |extern unsigned int _Y g_wSongByteLengthHigh;
                            13732 ; 41   |extern unsigned int _Y g_wSongByteLengthLow;
                            13733 ; 42   |extern unsigned int _Y g_wInvSampleRate;
                            13734 ; 43   |extern unsigned int _Y g_wCurrentSongBad;
                            13735 ; 44   |extern unsigned int _Y g_iSongType;
                            13736 ; 45   |extern _packed BYTE _Y g_CurrentSongName[];
                            13737 ; 46   |extern unsigned int _Y g_wCurrentDirDevId;
                            13738 ; 47   |extern unsigned int _Y g_wSongInvBitRatePtr;
                            13739 ; 48   |extern unsigned int _Y g_wUserScratchXDescriptor;
                            13740 ; 49   |extern unsigned int _Y g_wUserScratchYDescriptor;
                            13741 ; 50   |extern _packed BYTE _Y g_EncFileNameString[];
                            13742 ; 51   |extern unsigned int _Y g_wEncFileHandle;
                            13743 ; 52   |extern unsigned int _Y g_wEncAdpcmOvlSave_sp;
                            13744 ; 53   |extern unsigned int _Y g_wRootDirectory;
                            13745 ; 54   |extern unsigned int _Y g_wUserScratchY[];
                            13746 ; 55   |extern unsigned int _Y g_wPrevInvBitRatePtr;
                            13747 ; 56   |
                            13748 ; 57   |#endif  // SYSMEM_XREF_C
                            13749 
                            13751 
                            13752 ; 7    |#include "sysequ.h"
                            13753 
                            13755 
                            13756 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            13757 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                            13758 ; 3    |// System defs
                            13759 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            13760 ; 5    |
                            13761 ; 6    |#if (!defined(SYSEQU_INC))
                            13762 ; 7    |#define SYSEQU_INC 1
                            13763 ; 8    |
                            13764 ; 9    |#define SOFTTIMER_CONTINUOUS_EVENT 0
                            13765 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13766 ; 11   |
                            13767 ; 12   |#define HOLD_BUTTON_REPORTED_BITMASK 4
                            13768 ; 13   |
                            13769 ; 14   |
                            13770 ; 15   |// Decoder types
                            13771 ; 16   |#define DECODER_TYPE_MP3 0
                            13772 ; 17   |#define DECODER_TYPE_WMA 1
                            13773 ; 18   |#define DECODER_TYPE_AAC 2
                            13774 ; 19   |#define DECODER_TYPE_ADPCM_IMA 3
                            13775 ; 20   |#define DECODER_TYPE_ADPCM_MS 4
                            13776 ; 21   |#define DECODER_TYPE_PCM 5
                            13777 ; 22   |#define DECODER_TYPE_STFM 6
                            13778 ; 23   |
                            13779 ; 24   |// Encoder types
                            13780 ; 25   |#define ENCODER_TYPE_ADPCM_IMA 0
                            13781 ; 26   |#define ENCODER_TYPE_PCM 1
                            13782 ; 27   |#define ENCODER_TYPE_MP3 2
                            13783 ; 28   |
                            13784 ; 29   |// EncoderSR/EncoderCSR bit equates.  Also uses Stop & Play below.
                            13785 ; 30   |#define EncNotEnoughSpace 0
                            13786 ; 31   |#define EncRanOutOfSpace 1
                            13787 ; 32   |#define EncRecordError 2
                            13788 ; 33   |#define EncToldToStop 3
                            13789 ; 34   |#define EncAlreadyRecording 4
                            13790 ; 35   |// ENCODER_STOPPED       equ     6   ; As RecorderStateMachine.h
                            13791 ; 36   |#define EncWarnLowSpace 7
                            13792 ; 37   |#define EncWarningSent 8
                            13793 ; 38   |// ENCODER_RECORDING     equ     12
                            13794 ; 39   |
                            13795 ; 40   |// DecoderSR/DecoderCSR bit equates
                            13796 ; 41   |//  This bit is set when the decoder sends a message to the parser and is 
                            13797 ; 42   |#define DecoderIgnoreMessages 0   
                            13798 ; 43   |//  waiting for a response.
                            13799 ; 44   |#define VBRFlag 1
                            13800 ; 45   |#define RepeatSong 2
                            13801 ; 46   |#define RepeatAll 3
                            13802 ; 47   |#define Random 4
                            13803 ; 48   |#define Pause 5
                            13804 ; 49   |#define Stop 6
                            13805 ; 50   |#define Rwnd 7
                            13806 ; 51   |#define Ffwd 8
                            13807 ; 52   |#define TimeMode 9
                            13808 ; 53   |// set when Fstatus_o = 1 for mp3 
                            13809 ; 54   |#define DecSync 10    
                            13810 ; 55   |#define Play 12
                            13811 ; 56   |// starting with sdk2.105: changed to set when decoder done instead of when file reads don
                                  e 
                            13812 ; 57   |#define EndOfSong 13    
                            13813 ; 58   |#define EndOfList 14
                            13814 ; 59   |#define SongInfo 15
                            13815 ; 60   |// set when a song file is currently opened by the decoder
                            13816 ; 61   |#define FileIsOpen 16    
                            13817 ; 62   |// used by parser
                            13818 ; 63   |#define SkipBlockHeader 17    
                            13819 ; 64   |#define ABMode_A 18
                            13820 ; 65   |#define ABMode_B 19
                            13821 ; 66   |#define ABQuiet 20
                            13822 ; 67   |// set if bad file encountered
                            13823 ; 68   |#define BadFile 21    
                            13824 ; 69   |// mp3 decoder looking for sync
                            13825 ; 70   |#define SyncWait 22    
                            13826 ; 71   |// error reading file, duh
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13827 ; 72   |#define FileReadError 23    
                            13828 ; 73   |
                            13829 ; 74   |// DecoderCSR2 bit equates
                            13830 ; 75   |//Set when EOF reached, prevent freads beyond EOF 
                            13831 ; 76   |#define EndOfFileReached 0  
                            13832 ; 77   |// Set when need to allow LCD to update time
                            13833 ; 78   |#define TimeNeedsUpdate 1  
                            13834 ; 79   |
                            13835 ; 80   |
                            13836 ; 81   |// ParserVoiceCSR bits (specific to voice files)
                            13837 ; 82   |// repeat playing current file
                            13838 ; 83   |#define RepeatOneFile 0     
                            13839 ; 84   |// continuously loop through files
                            13840 ; 85   |#define RepeatAllFiles 1     
                            13841 ; 86   |// start at current file, play all files, then stop
                            13842 ; 87   |#define LoopOnce 2     
                            13843 ; 88   |
                            13844 ; 89   |// DecAdpcmFlags bits (used by ADPCM decoders)
                            13845 ; 90   |// Set to '1' when header unpacked, cleared during StopCurrentSong
                            13846 ; 91   |#define WaveHeaderFound 0       
                            13847 ; 92   |
                            13848 ; 93   |#if (defined(TRACEBUF_EN))
                            13849 ; 94   |// Trace buffer words.  Not ENabled by default.
                            13850 ; 95   |#define TRACE_BUFF_SIZE 256
                            13851 ; 96   |#define TRACE_BUFF_MODULO TRACE_BUFF_SIZE-1 
                            13852 ; 97   |#endif
                            13853 ; 98   |
                            13854 ; 99   |// Scratch area stuff
                            13855 ; 100  |#if defined(STMP_BUILD_PLAYER)
                            13856 ; 101  |#define SCRATCH_USER_Y_SIZE 512
                            13857 ; 102  |#define SCRATCH_USER_X_SIZE 256
                            13858 ; 103  |#else 
                            13859 ; 104  |#if defined(FAT32TEST)
                            13860 ; 105  |#define SCRATCH_USER_Y_SIZE 683
                            13861 ; 106  |#define SCRATCH_USER_X_SIZE 128
                            13862 ; 107  |#else 
                            13863 ; 108  |#define SCRATCH_USER_Y_SIZE 128
                            13864 ; 109  |#define SCRATCH_USER_X_SIZE 128
                            13865 ; 110  |#endif
                            13866 ; 111  |#endif
                            13867 ; 112  |
                            13868 ; 113  |#define SCRATCH_USER_X_SIZE_BYTES SCRATCH_USER_X_SIZE*3
                            13869 ; 114  |#define SCRATCH_USER_X_MODULO SCRATCH_USER_X_SIZE-1
                            13870 ; 115  |#define SCRATCH_USER_Y_SIZE_BYTES SCRATCH_USER_Y_SIZE*3
                            13871 ; 116  |#define SCRATCH_USER_Y_MODULO SCRATCH_USER_Y_SIZE-1
                            13872 ; 117  |
                            13873 ; 118  |// Boot ROM execute location
                            13874 ; 119  |#define BootExecuteCommand 0x012B
                            13875 ; 120  |
                            13876 ; 121  |#define BOOT_USB 0x000002
                            13877 ; 122  |#define BOOT_SMARTMEDIA 0x000004
                            13878 ; 123  |#define BOOT_COMPACTFLASH 0x000005
                            13879 ; 124  |#define BOOT_I2C_SLAVE 0x000009
                            13880 ; 125  |#define BOOT_I2C_MASTER 0x00000A
                            13881 ; 126  |#define BOOT_SPI_SLAVE 0x00000B
                            13882 ; 127  |#define BOOT_SPI_MASTER 0x00000C
                            13883 ; 128  |#define BOOT_HOSTPORT 0x00000D
                            13884 ; 129  |#define BOOT_BURNIN 0x00000F
                            13885 ; 130  |
                            13886 ; 131  |// Numerical constants
                            13887 ; 132  |//PI              equ     3.141592654
                            13888 ; 133  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13889 ; 134  |// Buffer Descriptor offsets
                            13890 ; 135  |#define BD_BufferBaseAddress 0
                            13891 ; 136  |#define BD_BufferModulo 1
                            13892 ; 137  |#define BD_BufferSize 2
                            13893 ; 138  |#define BD_HdPtr 3
                            13894 ; 139  |#define BD_TailPtr 4
                            13895 ; 140  |
                            13896 ; 141  |// Size of a buffer descriptor
                            13897 ; 142  |#define BUFF_DESC_SIZE 5
                            13898 ; 143  |
                            13899 ; 144  |// Mp3 Song Table Descriptor Offsets
                            13900 ; 145  |// number of elements for each song
                            13901 ; 146  |#define MST_ELEMENT_COUNT 7        
                            13902 ; 147  |#define MST_CARD_NUMBER 0
                            13903 ; 148  |#define MST_ADDR_LOW 1
                            13904 ; 149  |#define MST_ADDR_HIGH 2
                            13905 ; 150  |#define MST_BYTES_LOW 3
                            13906 ; 151  |#define MST_BYTES_HIGH 4
                            13907 ; 152  |#define MST_SAMPLE_RATE 5
                            13908 ; 153  |#define MST_SONG_TYPE 6
                            13909 ; 154  |
                            13910 ; 155  |// Data Format Descriptor offsets
                            13911 ; 156  |#define DF_NumChannels 0
                            13912 ; 157  |#define DF_SampleRate 1
                            13913 ; 158  |#define DF_BitsPerSample 2
                            13914 ; 159  |
                            13915 ; 160  |
                            13916 ; 161  |// Timer Descriptor Offset
                            13917 ; 162  |#define TD_TimerNumber 0
                            13918 ; 163  |#define TD_ControlValue 1
                            13919 ; 164  |#define TD_CountValue 2
                            13920 ; 165  |#define TD_ControlRegister 3
                            13921 ; 166  |#define TD_CountRegister 4
                            13922 ; 167  |
                            13923 ; 168  |
                            13924 ; 169  |// File IO defines
                            13925 ; 170  |#define FileInPort 0x8000
                            13926 ; 171  |#define FileOutPort 0x8001
                            13927 ; 172  |#define OnceInPort 0x8000
                            13928 ; 173  |#define OnceOutPort 0x8001
                            13929 ; 174  |#define SmFakeInPort 0x8002
                            13930 ; 175  |#define SmFakeOutPort 0x8003
                            13931 ; 176  |#define UsbFakeInPort 0x8004
                            13932 ; 177  |#define UsbFakeOutPort 0x8005
                            13933 ; 178  |
                            13934 ; 179  |// Target memory stuff
                            13935 ; 180  |#define TARGET_MEM_MASK 0xF00000
                            13936 ; 181  |#define TARGET_MEM_X 0x800000
                            13937 ; 182  |#define TARGET_MEM_Y 0x400000
                            13938 ; 183  |#define TARGET_MEM_L 0x200000
                            13939 ; 184  |#define TARGET_MEM_P 0x100000
                            13940 ; 185  |
                            13941 ; 186  |#define TARGET_MEM_X_BITPOS 23
                            13942 ; 187  |#define TARGET_MEM_Y_BITPOS 22
                            13943 ; 188  |#define TARGET_MEM_L_BITPOS 21
                            13944 ; 189  |#define TARGET_MEM_P_BITPOS 20
                            13945 ; 190  |
                            13946 ; 191  |
                            13947 ; 192  |// File System Stuff
                            13948 ; 193  |// assume 3 deep max with 8.3 format (38 bytes inc. /'s)
                            13949 ; 194  |#define MaxDirCount 13         
                            13950 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13951 ; 196  |// Error Codes
                            13952 ; 197  |//      Value           Error
                            13953 ; 198  |//      --------------------------------------------
                            13954 ; 199  |//      $000000         Reserved - no error
                            13955 ; 200  |//      $000001         SmartMedia Bad Programming Error
                            13956 ; 201  |//      $000002         SmartMedia Read Timeout
                            13957 ; 202  |//      $000003         USB PLL Lock Timeout
                            13958 ; 203  |//       $000010         GetNumSongs returned an error
                            13959 ; 204  |//       $000011         fopen failed to open file number (in x:TrackNum)
                            13960 ; 205  |//       $000012         fread failed when attempting to read page
                            13961 ; 206  |//       $000013         fread failed to read correct number of bytes
                            13962 ; 207  |#define NO_ERROR 0x000000
                            13963 ; 208  |#define ERROR_PLL_LOCK_TIMEOUT 0x000001
                            13964 ; 209  |
                            13965 ; 210  |#define ERROR_SM_BADP 0x000100
                            13966 ; 211  |#define ERROR_SM_TIMEOUT 0x000101
                            13967 ; 212  |#define ERROR_SM_INVALID_BLOCK 0x000102
                            13968 ; 213  |#define ERROR_SM_INVALID_DATA 0x000103
                            13969 ; 214  |#define ERROR_SM_ECC 0x000104
                            13970 ; 215  |#define ERROR_SM_BLOCK_ERASE_FAILED 0x000105
                            13971 ; 216  |#define ERROR_SM_CARD_NOT_FOUND 0x000106
                            13972 ; 217  |#define ERROR_SM_BUSY_TIMEOUT 0x000107
                            13973 ; 218  |#define ERROR_SM_WRITE_FAILED 0x000108
                            13974 ; 219  |#define ERROR_SM_DEVICE_ID 0x000109
                            13975 ; 220  |
                            13976 ; 221  |#define ERROR_NUM_SONGS 0x000200
                            13977 ; 222  |#define ERROR_FOPEN_FILENUM 0x000201
                            13978 ; 223  |#define ERROR_FREAD_PAGE 0x000202
                            13979 ; 224  |#define ERROR_FREAD_BYTE_COUNT 0x000203
                            13980 ; 225  |#define ERROR_CREATING_VOICE_DIR 0x000204 
                            13981 ; 226  |
                            13982 ; 227  |#define ERROR_USB_DISCONNECTED 0x000300
                            13983 ; 228  |
                            13984 ; 229  |#define ERROR_DECODER_PLAYING 0x000400
                            13985 ; 230  |// Attempted to set position past the end of file
                            13986 ; 231  |#define ERROR_DECODER_SETPOS 0x000401             
                            13987 ; 232  |
                            13988 ; 233  |// PLL defs
                            13989 ; 234  |// According to Mike May, the PLL takes about 200us to stabalize, worst-case.
                            13990 ; 235  |//   PLL lock delay is $000000001388 = 5000. We're always using the xtal at
                            13991 ; 236  |//   24.576MHz, so this delay is 5000/(24.576MHz) = 203.5us.  We'll do this 5000
                            13992 ; 237  |//   times for a total of 1.017s.
                            13993 ; 238  |#define PLL_LOCK_DELAY_HIGH 0x000000
                            13994 ; 239  |#define PLL_LOCK_DELAY_LOW 0x001388
                            13995 ; 240  |#define PLL_TIMEOUT 0x001388
                            13996 ; 241  |
                            13997 ; 242  |// Generic wait defs
                            13998 ; 243  |#define WAIT_10_MS 245760/2
                            13999 ; 244  |
                            14000 ; 245  |//Those equates are used in the DCC/USBMSC
                            14001 ; 246  |//Low battery detection bit
                            14002 ; 247  |#define LOW_BATTERY_DETECTED_BITPOS 0
                            14003 ; 248  |
                            14004 ; 249  |#endif // IF (!@def(SYSEQU_INC))
                            14005 ; 250  |
                            14006 ; 251  |
                            14007 
                            14009 
                            14010 ; 8    |#include "sysresourceapi.h"
                            14011 
                            14013 
                            14014 ; 1    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14015 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                            14016 ; 3    |//
                            14017 ; 4    |// File : SysResourceApi.h
                            14018 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                            14019 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14020 ; 7    |
                            14021 ; 8    |#ifndef __SysResourceApi_h__
                            14022 ; 9    |#define __SysResourceApi_h__ 1
                            14023 ; 10   |
                            14024 ; 11   |#include "types.h"
                            14025 
                            14027 
                            14028 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14029 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14030 ; 3    |//
                            14031 ; 4    |// Filename: types.h
                            14032 ; 5    |// Description: Standard data types
                            14033 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14034 ; 7    |
                            14035 ; 8    |#ifndef _TYPES_H
                            14036 ; 9    |#define _TYPES_H
                            14037 ; 10   |
                            14038 ; 11   |// TODO:  move this outta here!
                            14039 ; 12   |#if !defined(NOERROR)
                            14040 ; 13   |#define NOERROR 0
                            14041 ; 14   |#define SUCCESS 0
                            14042 ; 15   |#endif 
                            14043 ; 16   |#if !defined(SUCCESS)
                            14044 ; 17   |#define SUCCESS  0
                            14045 ; 18   |#endif
                            14046 ; 19   |#if !defined(ERROR)
                            14047 ; 20   |#define ERROR   -1
                            14048 ; 21   |#endif
                            14049 ; 22   |#if !defined(FALSE)
                            14050 ; 23   |#define FALSE 0
                            14051 ; 24   |#endif
                            14052 ; 25   |#if !defined(TRUE)
                            14053 ; 26   |#define TRUE  1
                            14054 ; 27   |#endif
                            14055 ; 28   |
                            14056 ; 29   |#if !defined(NULL)
                            14057 ; 30   |#define NULL 0
                            14058 ; 31   |#endif
                            14059 ; 32   |
                            14060 ; 33   |#define MAX_INT     0x7FFFFF
                            14061 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14062 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14063 ; 36   |#define MAX_ULONG   (-1) 
                            14064 ; 37   |
                            14065 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14066 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14067 ; 40   |
                            14068 ; 41   |
                            14069 ; 42   |#define BYTE    unsigned char       // btVarName
                            14070 ; 43   |#define CHAR    signed char         // cVarName
                            14071 ; 44   |#define USHORT  unsigned short      // usVarName
                            14072 ; 45   |#define SHORT   unsigned short      // sVarName
                            14073 ; 46   |#define WORD    unsigned int        // wVarName
                            14074 ; 47   |#define INT     signed int          // iVarName
                            14075 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14076 ; 49   |#define LONG    signed long         // lVarName
                            14077 ; 50   |#define BOOL    unsigned int        // bVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14078 ; 51   |#define FRACT   _fract              // frVarName
                            14079 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14080 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14081 ; 54   |#define FLOAT   float               // fVarName
                            14082 ; 55   |#define DBL     double              // dVarName
                            14083 ; 56   |#define ENUM    enum                // eVarName
                            14084 ; 57   |#define CMX     _complex            // cmxVarName
                            14085 ; 58   |typedef WORD UCS3;                   // 
                            14086 ; 59   |
                            14087 ; 60   |#define UINT16  unsigned short
                            14088 ; 61   |#define UINT8   unsigned char   
                            14089 ; 62   |#define UINT32  unsigned long
                            14090 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14091 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14092 ; 65   |#define WCHAR   UINT16
                            14093 ; 66   |
                            14094 ; 67   |//UINT128 is 16 bytes or 6 words
                            14095 ; 68   |typedef struct UINT128_3500 {   
                            14096 ; 69   |    int val[6];     
                            14097 ; 70   |} UINT128_3500;
                            14098 ; 71   |
                            14099 ; 72   |#define UINT128   UINT128_3500
                            14100 ; 73   |
                            14101 ; 74   |// Little endian word packed byte strings:   
                            14102 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14103 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14104 ; 77   |// Little endian word packed byte strings:   
                            14105 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14106 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14107 ; 80   |
                            14108 ; 81   |// Declare Memory Spaces To Use When Coding
                            14109 ; 82   |// A. Sector Buffers
                            14110 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14111 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14112 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14113 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14114 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14115 ; 88   |// B. Media DDI Memory
                            14116 ; 89   |#define MEDIA_DDI_MEM _Y
                            14117 ; 90   |
                            14118 ; 91   |
                            14119 ; 92   |
                            14120 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14121 ; 94   |// Examples of circular pointers:
                            14122 ; 95   |//    INT CIRC cpiVarName
                            14123 ; 96   |//    DWORD CIRC cpdwVarName
                            14124 ; 97   |
                            14125 ; 98   |#define RETCODE INT                 // rcVarName
                            14126 ; 99   |
                            14127 ; 100  |// generic bitfield structure
                            14128 ; 101  |struct Bitfield {
                            14129 ; 102  |    unsigned int B0  :1;
                            14130 ; 103  |    unsigned int B1  :1;
                            14131 ; 104  |    unsigned int B2  :1;
                            14132 ; 105  |    unsigned int B3  :1;
                            14133 ; 106  |    unsigned int B4  :1;
                            14134 ; 107  |    unsigned int B5  :1;
                            14135 ; 108  |    unsigned int B6  :1;
                            14136 ; 109  |    unsigned int B7  :1;
                            14137 ; 110  |    unsigned int B8  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14138 ; 111  |    unsigned int B9  :1;
                            14139 ; 112  |    unsigned int B10 :1;
                            14140 ; 113  |    unsigned int B11 :1;
                            14141 ; 114  |    unsigned int B12 :1;
                            14142 ; 115  |    unsigned int B13 :1;
                            14143 ; 116  |    unsigned int B14 :1;
                            14144 ; 117  |    unsigned int B15 :1;
                            14145 ; 118  |    unsigned int B16 :1;
                            14146 ; 119  |    unsigned int B17 :1;
                            14147 ; 120  |    unsigned int B18 :1;
                            14148 ; 121  |    unsigned int B19 :1;
                            14149 ; 122  |    unsigned int B20 :1;
                            14150 ; 123  |    unsigned int B21 :1;
                            14151 ; 124  |    unsigned int B22 :1;
                            14152 ; 125  |    unsigned int B23 :1;
                            14153 ; 126  |};
                            14154 ; 127  |
                            14155 ; 128  |union BitInt {
                            14156 ; 129  |        struct Bitfield B;
                            14157 ; 130  |        int        I;
                            14158 ; 131  |};
                            14159 ; 132  |
                            14160 ; 133  |#define MAX_MSG_LENGTH 10
                            14161 ; 134  |struct CMessage
                            14162 ; 135  |{
                            14163 ; 136  |        unsigned int m_uLength;
                            14164 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14165 ; 138  |};
                            14166 ; 139  |
                            14167 ; 140  |typedef struct {
                            14168 ; 141  |    WORD m_wLength;
                            14169 ; 142  |    WORD m_wMessage;
                            14170 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14171 ; 144  |} Message;
                            14172 ; 145  |
                            14173 ; 146  |struct MessageQueueDescriptor
                            14174 ; 147  |{
                            14175 ; 148  |        int *m_pBase;
                            14176 ; 149  |        int m_iModulo;
                            14177 ; 150  |        int m_iSize;
                            14178 ; 151  |        int *m_pHead;
                            14179 ; 152  |        int *m_pTail;
                            14180 ; 153  |};
                            14181 ; 154  |
                            14182 ; 155  |struct ModuleEntry
                            14183 ; 156  |{
                            14184 ; 157  |    int m_iSignaledEventMask;
                            14185 ; 158  |    int m_iWaitEventMask;
                            14186 ; 159  |    int m_iResourceOfCode;
                            14187 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14188 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            14189 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14190 ; 163  |    int m_uTimeOutHigh;
                            14191 ; 164  |    int m_uTimeOutLow;
                            14192 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14193 ; 166  |};
                            14194 ; 167  |
                            14195 ; 168  |union WaitMask{
                            14196 ; 169  |    struct B{
                            14197 ; 170  |        unsigned int m_bNone     :1;
                            14198 ; 171  |        unsigned int m_bMessage  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14199 ; 172  |        unsigned int m_bTimer    :1;
                            14200 ; 173  |        unsigned int m_bButton   :1;
                            14201 ; 174  |    } B;
                            14202 ; 175  |    int I;
                            14203 ; 176  |} ;
                            14204 ; 177  |
                            14205 ; 178  |
                            14206 ; 179  |struct Button {
                            14207 ; 180  |        WORD wButtonEvent;
                            14208 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14209 ; 182  |};
                            14210 ; 183  |
                            14211 ; 184  |struct Message {
                            14212 ; 185  |        WORD wMsgLength;
                            14213 ; 186  |        WORD wMsgCommand;
                            14214 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14215 ; 188  |};
                            14216 ; 189  |
                            14217 ; 190  |union EventTypes {
                            14218 ; 191  |        struct CMessage msg;
                            14219 ; 192  |        struct Button Button ;
                            14220 ; 193  |        struct Message Message;
                            14221 ; 194  |};
                            14222 ; 195  |
                            14223 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14224 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14225 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14226 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14227 ; 200  |
                            14228 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14229 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14230 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14231 ; 204  |
                            14232 ; 205  |#if DEBUG
                            14233 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14234 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14235 ; 208  |#else 
                            14236 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            14237 ; 210  |#define DebugBuildAssert(x)    
                            14238 ; 211  |#endif
                            14239 ; 212  |
                            14240 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14241 ; 214  |//  #pragma asm
                            14242 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14243 ; 216  |//  #pragma endasm
                            14244 ; 217  |
                            14245 ; 218  |
                            14246 ; 219  |#ifdef COLOR_262K
                            14247 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            14248 ; 221  |#elif defined(COLOR_65K)
                            14249 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            14250 ; 223  |#else
                            14251 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            14252 ; 225  |#endif
                            14253 ; 226  |    
                            14254 ; 227  |#endif // #ifndef _TYPES_H
                            14255 
                            14257 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14258 ; 12   |
                            14259 ; 13   |#define RSRC_TYPE_STRING                1
                            14260 ; 14   |#define RSRC_TYPE_DATA                  2
                            14261 ; 15   |#define RSRC_TYPE_BITMAP                3
                            14262 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                            14263 ; 17   |
                            14264 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                            14265 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                            14266 ; 20   |
                            14267 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                            14268 ; 22   |                                                        // from the root.
                            14269 ; 23   |
                            14270 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                            14271 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                            14272 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                            14273 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                            14274 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                            14275 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                            14276 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                            14277 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                            14278 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                            14279 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                            14280 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                            14281 ; 35   |
                            14282 ; 36   |#define TARGET_MEM_X                        0x800000
                            14283 ; 37   |#define TARGET_MEM_Y                        0x400000
                            14284 ; 38   |#define TARGET_MEM_L                        0x200000
                            14285 ; 39   |#define TARGET_MEM_P                        0x100000
                            14286 ; 40   |
                            14287 ; 41   |typedef struct {
                            14288 ; 42   |    WORD    wRscNumber;             // Nested resource number
                            14289 ; 43   |                                    // 0x00 = Root Resource
                            14290 ; 44   |                                    // 0xffff = Free Handle
                            14291 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                            14292 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                            14293 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                            14294 ; 48   |
                            14295 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                            14296 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                            14297 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                            14298 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                            14299 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                            14300 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                            14301 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                            14302 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                            14303 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                            14304 ; 58   |                   
                            14305 ; 59   |extern WORD wResourceTag;
                            14306 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                            14307 ; 61   |
                            14308 ; 62   |extern void EnterNonReentrantSection(void);
                            14309 ; 63   |extern void LeaveNonReentrantSection(void);
                            14310 ; 64   |
                            14311 ; 65   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14312 
                            14314 
                            14315 ; 9    |#include "exec.h"
                            14316 
                            14318 
                            14319 ; 1    |#ifndef EXEC_H
                            14320 ; 2    |#define EXEC_H
                            14321 ; 3    |
                            14322 ; 4    |
                            14323 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                            14324 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                            14325 ; 7    |long _asmfunc SysGetCurrentTime(void);
                            14326 ; 8    |
                            14327 ; 9    |
                            14328 ; 10   |#endif
                            14329 
                            14331 
                            14332 ; 10   |#include "displaymodule.h"
                            14333 
                            14335 
                            14336 ; 1    |#ifndef _DISPLAY_MODULE_H
                            14337 ; 2    |#define _DISPLAY_MODULE_H
                            14338 ; 3    |
                            14339 ; 4    |
                            14340 ; 5    |#define SIMPLE_RESOURCE 0
                            14341 ; 6    |#define NESTED_RESOURCE 1
                            14342 ; 7    |
                            14343 ; 8    |#include "project.h"
                            14344 
                            14346 
                            14347 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14348 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            14349 ; 3    |//  Filename: project.inc
                            14350 ; 4    |//  Description: 
                            14351 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            14352 ; 6    |
                            14353 ; 7    |#if (!defined(_PROJECT_INC))
                            14354 ; 8    |#define _PROJECT_INC 1
                            14355 ; 9    |
                            14356 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            14357 ; 11   |#include "hwequ.h"
                            14358 ; 12   |#else 
                            14359 ; 13   |//include "regscodec.inc"
                            14360 ; 14   |#endif
                            14361 ; 15   |
                            14362 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            14363 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            14364 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            14365 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            14366 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            14367 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            14368 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            14369 ; 23   |
                            14370 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            14371 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            14372 ; 26   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14373 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            14374 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            14375 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            14376 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            14377 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            14378 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            14379 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            14380 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            14381 ; 35   |
                            14382 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            14383 ; 37   |// MEDIA DEFINITIONS
                            14384 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            14385 ; 39   |
                            14386 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            14387 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            14388 ; 42   |#if defined(NAND1)
                            14389 ; 43   |#define SM_INTERNAL_CHIPS 1
                            14390 ; 44   |#else 
                            14391 ; 45   |#if defined(NAND2)
                            14392 ; 46   |#define SM_INTERNAL_CHIPS 2
                            14393 ; 47   |#else 
                            14394 ; 48   |#if defined(NAND3)
                            14395 ; 49   |#define SM_INTERNAL_CHIPS 3
                            14396 ; 50   |#else 
                            14397 ; 51   |#if defined(NAND4)
                            14398 ; 52   |#define SM_INTERNAL_CHIPS 4
                            14399 ; 53   |#else 
                            14400 ; 54   |#define SM_INTERNAL_CHIPS 1
                            14401 ; 55   |#endif
                            14402 ; 56   |#endif
                            14403 ; 57   |#endif
                            14404 ; 58   |#endif
                            14405 ; 59   |
                            14406 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            14407 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            14408 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            14409 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            14410 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            14411 ; 65   |//*** comment out if active high ****
                            14412 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            14413 ; 67   |
                            14414 ; 68   |#if defined(SMEDIA)
                            14415 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            14416 ; 70   |#define NUM_SM_EXTERNAL 1
                            14417 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            14418 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            14419 ; 73   |#else 
                            14420 ; 74   |#if defined(MMC)
                            14421 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            14422 ; 76   |#define NUM_SM_EXTERNAL 0
                            14423 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            14424 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            14425 ; 79   |#else 
                            14426 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            14427 ; 81   |#define NUM_SM_EXTERNAL 0
                            14428 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14429 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            14430 ; 84   |#endif
                            14431 ; 85   |#endif
                            14432 ; 86   |
                            14433 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            14434 ; 88   |// Mass Storage Class definitions
                            14435 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            14436 ; 90   |// Set to 0 if Composite Device build is desired.    
                            14437 ; 91   |#define MULTI_LUN_BUILD 1   
                            14438 ; 92   |
                            14439 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            14440 ; 94   |//  SCSI
                            14441 ; 95   |#if (MULTI_LUN_BUILD==0)
                            14442 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            14443 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            14444 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            14445 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            14446 ; 100  |  #else
                            14447 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            14448 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            14449 ; 103  |  #endif
                            14450 ; 104  |#else
                            14451 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            14452 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            14453 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            14454 ; 108  |  #else
                            14455 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            14456 ; 110  |  #endif
                            14457 ; 111  |#endif
                            14458 ; 112  |
                            14459 ; 113  |
                            14460 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            14461 ; 115  |
                            14462 ; 116  |
                            14463 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            14464 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            14465 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            14466 ; 120  |#ifdef MMC
                            14467 ; 121  |#ifdef MTP_BUILD
                            14468 ; 122  |// --------------------
                            14469 ; 123  |// MTP and MMC
                            14470 ; 124  |// --------------------
                            14471 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            14472 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            14473 ; 127  |#else  // ifndef MTP_BUILD
                            14474 ; 128  |#ifdef STMP_BUILD_PLAYER
                            14475 ; 129  |// --------------------
                            14476 ; 130  |// Player and MMC
                            14477 ; 131  |// --------------------
                            14478 ; 132  |#else
                            14479 ; 133  |// --------------------
                            14480 ; 134  |// USBMSC and MMC
                            14481 ; 135  |// --------------------
                            14482 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            14483 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            14484 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            14485 ; 139  |#endif // ifdef MTP_BUILD
                            14486 ; 140  |#else  // ifndef MMC
                            14487 ; 141  |#ifdef MTP_BUILD
                            14488 ; 142  |// --------------------
                            14489 ; 143  |// MTP and NAND only
                            14490 ; 144  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14491 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            14492 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            14493 ; 147  |#else  // ifndef MTP_BUILD
                            14494 ; 148  |#ifdef STMP_BUILD_PLAYER
                            14495 ; 149  |// --------------------
                            14496 ; 150  |// Player and NAND only
                            14497 ; 151  |// --------------------
                            14498 ; 152  |#else
                            14499 ; 153  |// --------------------
                            14500 ; 154  |// USBMSC and NAND only
                            14501 ; 155  |// --------------------
                            14502 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            14503 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            14504 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            14505 ; 159  |#endif // ifdef MTP_BUILD
                            14506 ; 160  |#endif // ifdef MMC 
                            14507 ; 161  |
                            14508 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            14509 ; 163  |#if (defined(MTP_BUILD))
                            14510 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            14511 ; 165  |
                            14512 ; 166  |////!
                            14513 ; 167  |////! This varible holds the watchdog count for the store flush.
                            14514 ; 168  |////!
                            14515 ; 169  |///
                            14516 ; 170  |#include <types.h>
                            14517 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            14518 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            14519 ; 173  |#endif
                            14520 ; 174  |
                            14521 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            14522 ; 176  |// These are needed here for Mass Storage Class
                            14523 ; 177  |// Needs to be cleaned up
                            14524 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            14525 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            14526 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            14527 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            14528 ; 182  |
                            14529 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            14530 ; 184  |
                            14531 ; 185  |#endif
                            14532 ; 186  |
                            14533 ; 187  |
                            14534 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            14535 ; 189  |// SmartMedia/NAND defs
                            14536 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            14537 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            14538 ; 192  |
                            14539 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            14540 ; 194  |// Sysloadresources defs
                            14541 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            14542 ; 196  |
                            14543 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            14544 ; 198  |// MMC defs
                            14545 ; 199  |#define MMC_MAX_PARTITIONS 1
                            14546 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            14547 ; 201  |
                            14548 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            14549 ; 203  |// SPI defs
                            14550 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            14551 ; 205  |
                            14552 ; 206  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14553 ; 207  |// Global media defs
                            14554 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            14555 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            14556 ; 210  |
                            14557 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            14558 ; 212  |// DO NOT CHANGE THESE!!!
                            14559 ; 213  |#define SM_MAX_PARTITIONS 4
                            14560 ; 214  |#define MAX_HANDLES 2
                            14561 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            14562 ; 216  |
                            14563 ; 217  |
                            14564 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            14565 ; 219  |// Battery LRADC Values 
                            14566 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            14567 ; 221  |// brownout trip point in mV (moved by RS)
                            14568 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            14569 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            14570 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            14571 ; 225  |//     audio recording to media.
                            14572 ; 226  |#define BATT_SAFETY_MARGIN 10
                            14573 ; 227  |
                            14574 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            14575 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            14576 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            14577 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            14578 ; 232  |
                            14579 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            14580 ; 234  |
                            14581 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            14582 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            14583 ; 237  |#if (!defined(CLCD))
                            14584 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            14585 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            14586 ; 240  |#else 
                            14587 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            14588 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            14589 ; 243  |#endif
                            14590 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            14591 ; 245  |
                            14592 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            14593 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            14594 ; 248  |// See mp3 encoder overlay.
                            14595 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            14596 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            14597 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            14598 ; 252  |
                            14599 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            14600 ; 254  |// Voice recording filenames
                            14601 ; 255  |// number of digits in filename Vxxx.wav
                            14602 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            14603 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            14604 ; 258  |
                            14605 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            14606 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            14607 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            14608 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            14609 ; 263  |#if defined(DEVICE_3500)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14610 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            14611 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            14612 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            14613 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            14614 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            14615 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            14616 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            14617 ; 271  |
                            14618 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            14619 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            14620 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            14621 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            14622 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            14623 ; 277  |
                            14624 ; 278  |#else 
                            14625 ; 279  |// STMP3410
                            14626 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            14627 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            14628 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            14629 ; 283  |#endif
                            14630 ; 284  |
                            14631 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            14632 ; 286  |// Number of available soft timers
                            14633 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            14634 ; 288  |#if defined(SYNC_LYRICS)
                            14635 ; 289  |#define SOFT_TIMERS 10
                            14636 ; 290  |#else 
                            14637 ; 291  |#if defined(JPEG_DECODER)
                            14638 ; 292  |#define SOFT_TIMERS 10
                            14639 ; 293  |#else 
                            14640 ; 294  |#define SOFT_TIMERS 9
                            14641 ; 295  |#endif
                            14642 ; 296  |#endif
                            14643 ; 297  |
                            14644 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            14645 ; 299  |//  sizes
                            14646 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            14647 ; 301  |#if defined(MMC)
                            14648 ; 302  |#if defined(USE_PLAYLIST5)
                            14649 ; 303  |#define MENU_STACK_SIZE 1500
                            14650 ; 304  |#else 
                            14651 ; 305  |#define MENU_STACK_SIZE 1250
                            14652 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            14653 ; 307  |#else 
                            14654 ; 308  |#if defined(USE_PLAYLIST5)
                            14655 ; 309  |#define MENU_STACK_SIZE 1500
                            14656 ; 310  |#else 
                            14657 ; 311  |#define MENU_STACK_SIZE 1250
                            14658 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            14659 ; 313  |#endif //if @def('MMC')
                            14660 ; 314  |
                            14661 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            14662 ; 316  |// 
                            14663 ; 317  |#define STACK_L1_SIZE 750
                            14664 ; 318  |#define STACK_L2_SIZE 100
                            14665 ; 319  |#define STACK_L3_SIZE 160
                            14666 ; 320  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14667 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            14668 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            14669 ; 323  |// is ok with switching code.
                            14670 ; 324  |#if defined(MTP_BUILD)
                            14671 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            14672 ; 326  |#endif
                            14673 ; 327  |
                            14674 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            14675 ; 329  |// maximum number of nested funclets 
                            14676 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            14677 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            14678 ; 332  |
                            14679 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            14680 ; 334  |//    LCD DEFINITIONS
                            14681 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            14682 ; 336  |
                            14683 ; 337  |#define SPACE_CHAR 0x000020          
                            14684 ; 338  |#define ZERO_CHAR 0x000030
                            14685 ; 339  |#define COLON_CHAR 0x00003A
                            14686 ; 340  |#define PERIOD_CHAR 0x00002E
                            14687 ; 341  |
                            14688 ; 342  |#if (defined(S6B33B0A_LCD))
                            14689 ; 343  |#define LCD_X_SIZE 128
                            14690 ; 344  |#define LCD_Y_SIZE 159
                            14691 ; 345  |#endif
                            14692 ; 346  |
                            14693 ; 347  |#if (defined(SED15XX_LCD))
                            14694 ; 348  |#define LCD_X_SIZE 128
                            14695 ; 349  |#define LCD_Y_SIZE 64
                            14696 ; 350  |#endif
                            14697 ; 351  |
                            14698 ; 352  |
                            14699 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            14700 ; 354  |//   Details on Customizing Contrast
                            14701 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            14702 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            14703 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            14704 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            14705 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            14706 ; 360  |//   unless the ezact sequence is remembered.
                            14707 ; 361  |//   To find out what range your player supports: 
                            14708 ; 362  |//   change these equs to full range or comment out (full range is default)
                            14709 ; 363  |//;;;;;;
                            14710 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            14711 ; 365  |// recommended calibration using player -- uncomment 
                            14712 ; 366  |//;;;;;;
                            14713 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            14714 ; 368  |////////////////////////////
                            14715 ; 369  |#if (defined(DEMO_HW))
                            14716 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            14717 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            14718 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            14719 ; 373  |#else 
                            14720 ; 374  |
                            14721 ; 375  |#if (defined(S6B33B0A_LCD))
                            14722 ; 376  |#define LCD_MAX_CONTRAST 210
                            14723 ; 377  |#define LCD_MIN_CONTRAST 160    
                            14724 ; 378  |#endif
                            14725 ; 379  |
                            14726 ; 380  |#if (defined(SED15XX_LCD))
                            14727 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14728 ; 382  |// Engineering board regs support range [17-37].
                            14729 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            14730 ; 384  |//   One default contrast range [24-42] works for both.
                            14731 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            14732 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            14733 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            14734 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            14735 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            14736 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            14737 ; 391  |
                            14738 ; 392  |#if (defined(NEWSHINGYIH))
                            14739 ; 393  |#define LCD_MAX_CONTRAST 250
                            14740 ; 394  |#define LCD_MIN_CONTRAST 0
                            14741 ; 395  |#else 
                            14742 ; 396  |//-----
                            14743 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            14744 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            14745 ; 399  |#define LCD_MAX_CONTRAST 250
                            14746 ; 400  |#define LCD_MIN_CONTRAST 0
                            14747 ; 401  |
                            14748 ; 402  |//=====
                            14749 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            14750 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            14751 ; 405  |//LCD_MAX_CONTRAST equ 42
                            14752 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            14753 ; 407  |
                            14754 ; 408  |#endif
                            14755 ; 409  |#endif
                            14756 ; 410  |
                            14757 ; 411  |#endif
                            14758 ; 412  |
                            14759 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            14760 ; 414  |// The default value of the lcd contrast in % of range
                            14761 ; 415  |//   the default value is used when no settings.dat is available
                            14762 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            14763 ; 417  |
                            14764 ; 418  |#if (defined(S6B33B0A_LCD))
                            14765 ; 419  |// 60% of range is default value
                            14766 ; 420  |#define DEFAULT_CONTRAST 50 
                            14767 ; 421  |#endif
                            14768 ; 422  |
                            14769 ; 423  |#if (defined(SED15XX_LCD))
                            14770 ; 424  |// % of range is default value (was 60%)
                            14771 ; 425  |#define DEFAULT_CONTRAST 50 
                            14772 ; 426  |#endif
                            14773 ; 427  |
                            14774 ; 428  |
                            14775 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            14776 ; 430  |// make lower when doing calibration
                            14777 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            14778 ; 432  |
                            14779 ; 433  |
                            14780 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            14781 ; 435  |// For FFWD and RWND
                            14782 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            14783 ; 437  |#define SECONDS_TO_SKIP 1
                            14784 ; 438  |#define SECONDS_TO_SKIP1 3
                            14785 ; 439  |#define SECONDS_TO_SKIP2 6
                            14786 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            14787 ; 441  |#define PREV_SONG_THRESHOLD 5  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14788 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14789 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            14790 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14791 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            14792 ; 446  |
                            14793 ; 447  |// For audible FFW/RWD
                            14794 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            14795 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            14796 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            14797 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            14798 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14799 ; 453  |#define LEVEL1_BOUNDARY 17 
                            14800 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14801 ; 455  |#define LEVEL2_BOUNDARY 33 
                            14802 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14803 ; 457  |#define LEVEL3_BOUNDARY 50 
                            14804 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            14805 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            14806 ; 460  |// Short Song Time, songs too short to play.
                            14807 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            14808 ; 462  |
                            14809 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            14810 ; 464  |// MP3 Sync Values
                            14811 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            14812 ; 466  |// # bytes to look for sync before marking it bad
                            14813 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            14814 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            14815 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            14816 ; 470  |// once we have sync'd, the isr should be called this frequently
                            14817 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            14818 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            14819 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            14820 ; 474  |
                            14821 ; 475  |
                            14822 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            14823 ; 477  |//// Multi-Stage Volume Control Definitions
                            14824 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            14825 ; 479  |//// Use Multi-Stage Volume
                            14826 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            14827 ; 481  |
                            14828 ; 482  |//// Master Volume definitions
                            14829 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            14830 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            14831 ; 485  |
                            14832 ; 486  |//// DAC-Mode definitions
                            14833 ; 487  |//// Adjusts 0dB point
                            14834 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            14835 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            14836 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            14837 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            14838 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            14839 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            14840 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            14841 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            14842 ; 496  |
                            14843 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            14844 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            14845 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14846 ; 500  |
                            14847 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            14848 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            14849 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            14850 ; 504  |
                            14851 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            14852 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            14853 ; 507  |
                            14854 ; 508  |
                            14855 ; 509  |//// Line In definitions (used for Line-In 1)
                            14856 ; 510  |//// 0dB point of the Line In
                            14857 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            14858 ; 512  |//// Minimum volume of Line In
                            14859 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            14860 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            14861 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            14862 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            14863 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            14864 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            14865 ; 519  |
                            14866 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            14867 ; 521  |//// 0dB point of the Line In
                            14868 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            14869 ; 523  |//// Minimum volume of Line In
                            14870 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            14871 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            14872 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            14873 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            14874 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            14875 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            14876 ; 530  |
                            14877 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            14878 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            14879 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            14880 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            14881 ; 535  |
                            14882 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            14883 ; 537  |////
                            14884 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            14885 ; 539  |////
                            14886 ; 540  |///
                            14887 ; 541  |#include <types.h>
                            14888 ; 542  |extern volatile WORD g_wActivityState;
                            14889 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            14890 ; 544  |
                            14891 ; 545  |void _reentrant Init5VSense(void);
                            14892 ; 546  |void _reentrant ServiceDCDC(void);
                            14893 ; 547  |
                            14894 ; 548  |////////////////////////////////////////////////////////////////////////////
                            14895 ; 549  |//// JPEG Thumbnail Mode Setting
                            14896 ; 550  |//// number of column in thumbnail mode
                            14897 ; 551  |#define THUMBNAIL_X 2           
                            14898 ; 552  |//// number of row in  thumbnail mode
                            14899 ; 553  |#define THUMBNAIL_Y 2           
                            14900 ; 554  |//// thumbnail boundary offset x
                            14901 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            14902 ; 556  |//// thumbnail boundary offset y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14903 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            14904 ; 558  |
                            14905 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            14906 ; 560  |
                            14907 
                            14909 
                            14910 ; 9    |#include "sysresourceapi.h"
                            14911 
                            14913 
                            14914 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14915 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                            14916 ; 3    |//
                            14917 ; 4    |// File : SysResourceApi.h
                            14918 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                            14919 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14920 ; 7    |
                            14921 ; 8    |#ifndef __SysResourceApi_h__
                            14922 ; 9    |#define __SysResourceApi_h__ 1
                            14923 ; 10   |
                            14924 ; 11   |#include "types.h"
                            14925 ; 12   |
                            14926 ; 13   |#define RSRC_TYPE_STRING                1
                            14927 ; 14   |#define RSRC_TYPE_DATA                  2
                            14928 ; 15   |#define RSRC_TYPE_BITMAP                3
                            14929 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                            14930 ; 17   |
                            14931 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                            14932 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                            14933 ; 20   |
                            14934 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                            14935 ; 22   |                                                        // from the root.
                            14936 ; 23   |
                            14937 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                            14938 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                            14939 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                            14940 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                            14941 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                            14942 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                            14943 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                            14944 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                            14945 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                            14946 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                            14947 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                            14948 ; 35   |
                            14949 ; 36   |#define TARGET_MEM_X                        0x800000
                            14950 ; 37   |#define TARGET_MEM_Y                        0x400000
                            14951 ; 38   |#define TARGET_MEM_L                        0x200000
                            14952 ; 39   |#define TARGET_MEM_P                        0x100000
                            14953 ; 40   |
                            14954 ; 41   |typedef struct {
                            14955 ; 42   |    WORD    wRscNumber;             // Nested resource number
                            14956 ; 43   |                                    // 0x00 = Root Resource
                            14957 ; 44   |                                    // 0xffff = Free Handle
                            14958 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                            14959 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14960 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                            14961 ; 48   |
                            14962 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                            14963 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                            14964 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                            14965 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                            14966 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                            14967 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                            14968 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                            14969 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                            14970 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                            14971 ; 58   |                   
                            14972 ; 59   |extern WORD wResourceTag;
                            14973 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                            14974 ; 61   |
                            14975 ; 62   |extern void EnterNonReentrantSection(void);
                            14976 ; 63   |extern void LeaveNonReentrantSection(void);
                            14977 ; 64   |
                            14978 ; 65   |#endif
                            14979 
                            14981 
                            14982 ; 10   |
                            14983 ; 11   |//comment this out to put the frame buffer in Y
                            14984 ; 12   |
                            14985 ; 13   |#ifndef BITMAP_MEMORY_SPACE
                            14986 ; 14   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                            14987 ; 15   |#endif
                            14988 ; 16   |
                            14989 ; 17   |
                            14990 ; 18   |#if  BITMAP_MEMORY_SPACE==TARGET_MEM_X
                            14991 ; 19   |#define BITMAP_MEMORY_C _X
                            14992 ; 20   |#else 
                            14993 ; 21   |#define BITMAP_MEMORY_C _Y
                            14994 ; 22   |#endif 
                            14995 ; 23   |
                            14996 ; 24   |#ifndef LCD_X_SIZE     
                            14997 ; 25   |#define LCD_X_SIZE          98
                            14998 ; 26   |#endif
                            14999 ; 27   |
                            15000 ; 28   |#ifndef LCD_Y_SIZE
                            15001 ; 29   |#define LCD_Y_SIZE          64
                            15002 ; 30   |#endif
                            15003 ; 31   |
                            15004 ; 32   |#define MAX_BITMAP_SIZE 10000
                            15005 ; 33   |
                            15006 ; 34   |#define DISPLAY_NORMAL  0
                            15007 ; 35   |#define DISPLAY_INVERT  1
                            15008 ; 36   |#define DISPLAY_CLEAR   2 
                            15009 ; 37   |
                            15010 ; 38   |typedef struct 
                            15011 ; 39   |{
                            15012 ; 40   |    INT m_iMaskLeft;
                            15013 ; 41   |    INT m_iMaskTop;
                            15014 ; 42   |    INT m_iMaskRight;
                            15015 ; 43   |    INT m_iMaskBottom;
                            15016 ; 44   |}   MASK;
                            15017 ; 45   |
                            15018 ; 46   |typedef struct 
                            15019 ; 47   |{
                            15020 ; 48   |    INT m_iWidth;
                            15021 ; 49   |    INT m_iHeight;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15022 ; 50   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                            15023 ; 51   |} BITMAP_TYPEDEF;
                            15024 ; 52   |
                            15025 ; 53   |#define BITMAP BITMAP_TYPEDEF BITMAP_MEMORY_C
                            15026 ; 54   |
                            15027 ; 55   |typedef struct 
                            15028 ; 56   |{
                            15029 ; 57   |    INT m_iWidth;
                            15030 ; 58   |    INT m_iHeight;
                            15031 ; 59   |} BITMAPHEADER_TYPEDEF;
                            15032 ; 60   |
                            15033 ; 61   |#define BITMAPHEADER BITMAPHEADER_TYPEDEF BITMAP_MEMORY_C
                            15034 ; 62   |
                            15035 ; 63   |typedef union
                            15036 ; 64   |{
                            15037 ; 65   |    struct
                            15038 ; 66   |    {
                            15039 ; 67   |        INT m_Resource:21;
                            15040 ; 68   |        INT m_Type :3;
                            15041 ; 69   |    } Complex;
                            15042 ; 70   |    WORD I;
                            15043 ; 71   |} COMPLEX_RESOURCE;
                            15044 ; 72   |
                            15045 ; 73   |#define RESOURCE_TYPE_SIMPLE    0
                            15046 ; 74   |#define RESOURCE_TYPE_NESTED    1
                            15047 ; 75   |#define RESOURCE_TYPE_UNICODE   2
                            15048 ; 76   |
                            15049 ; 77   |
                            15050 ; 78   |extern INT g_iMaskLeft;
                            15051 ; 79   |extern INT g_iMaskRight;
                            15052 ; 80   |extern INT g_iMaskTop;
                            15053 ; 81   |extern INT g_iMaskBottom;
                            15054 ; 82   |
                            15055 ; 83   |
                            15056 ; 84   |_reentrant void SALDisplayClearRange(INT x,INT y,WORD iSourceWidth,WORD iSourceHeight);
                            15057 ; 85   |_reentrant void SALDisplayPrintBitmapAddress   (INT x,INT y,void _Y *pAddress ,INT bInvert
                                  );
                            15058 
                            15065 
                            15066 ; 86   |_reentrant void SALHandleMessage(Message  *pMsg);
                            15067 ; 87   |_reentrant void SALUpdateDisplay(void);
                            15068 ; 88   |_reentrant void SALDisplayInit(void );
                            15069 ; 89   |
                            15070 ; 90   |_reentrant INT SALDisplayGetWidth(void);
                            15071 ; 91   |_reentrant INT SALDisplayGetHeight(void);
                            15072 ; 92   |
                            15073 ; 93   |_reentrant void PushMask(INT left, INT top, INT right, INT bottom);
                            15074 ; 94   |_reentrant void PopMask(void);
                            15075 ; 95   |
                            15076 ; 96   |
                            15077 ; 97   |#endif
                            15078 
                            15080 
                            15081 ; 11   |
                            15082 ; 12   |#ifdef SPECTRUM_ANAL 
                            15083 ; 13   |#include "spectrogram.h"
                            15084 ; 14   |#include "display.h"
                            15085 ; 15   |#endif
                            15086 ; 16   |
                            15087 ; 17   |
                            15088 ; 18   |
                            15089 ; 19   |#pragma optimize 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15091 ; 20   |
                            15092 ; 21   |#include "displaydriver.h"
                            15093 
                            15095 
                            15096 ; 1    |#ifndef _DISPLAY_DRIVER_H
                            15097 ; 2    |#define _DISPLAY_DRIVER_H
                            15098 ; 3    |
                            15099 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                            15100 ; 5    |#include "types.h"
                            15101 
                            15103 
                            15104 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15105 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15106 ; 3    |//
                            15107 ; 4    |// Filename: types.h
                            15108 ; 5    |// Description: Standard data types
                            15109 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15110 ; 7    |
                            15111 ; 8    |#ifndef _TYPES_H
                            15112 ; 9    |#define _TYPES_H
                            15113 ; 10   |
                            15114 ; 11   |// TODO:  move this outta here!
                            15115 ; 12   |#if !defined(NOERROR)
                            15116 ; 13   |#define NOERROR 0
                            15117 ; 14   |#define SUCCESS 0
                            15118 ; 15   |#endif 
                            15119 ; 16   |#if !defined(SUCCESS)
                            15120 ; 17   |#define SUCCESS  0
                            15121 ; 18   |#endif
                            15122 ; 19   |#if !defined(ERROR)
                            15123 ; 20   |#define ERROR   -1
                            15124 ; 21   |#endif
                            15125 ; 22   |#if !defined(FALSE)
                            15126 ; 23   |#define FALSE 0
                            15127 ; 24   |#endif
                            15128 ; 25   |#if !defined(TRUE)
                            15129 ; 26   |#define TRUE  1
                            15130 ; 27   |#endif
                            15131 ; 28   |
                            15132 ; 29   |#if !defined(NULL)
                            15133 ; 30   |#define NULL 0
                            15134 ; 31   |#endif
                            15135 ; 32   |
                            15136 ; 33   |#define MAX_INT     0x7FFFFF
                            15137 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15138 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15139 ; 36   |#define MAX_ULONG   (-1) 
                            15140 ; 37   |
                            15141 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15142 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15143 ; 40   |
                            15144 ; 41   |
                            15145 ; 42   |#define BYTE    unsigned char       // btVarName
                            15146 ; 43   |#define CHAR    signed char         // cVarName
                            15147 ; 44   |#define USHORT  unsigned short      // usVarName
                            15148 ; 45   |#define SHORT   unsigned short      // sVarName
                            15149 ; 46   |#define WORD    unsigned int        // wVarName
                            15150 ; 47   |#define INT     signed int          // iVarName
                            15151 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15152 ; 49   |#define LONG    signed long         // lVarName
                            15153 ; 50   |#define BOOL    unsigned int        // bVarName
                            15154 ; 51   |#define FRACT   _fract              // frVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15155 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15156 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15157 ; 54   |#define FLOAT   float               // fVarName
                            15158 ; 55   |#define DBL     double              // dVarName
                            15159 ; 56   |#define ENUM    enum                // eVarName
                            15160 ; 57   |#define CMX     _complex            // cmxVarName
                            15161 ; 58   |typedef WORD UCS3;                   // 
                            15162 ; 59   |
                            15163 ; 60   |#define UINT16  unsigned short
                            15164 ; 61   |#define UINT8   unsigned char   
                            15165 ; 62   |#define UINT32  unsigned long
                            15166 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            15167 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            15168 ; 65   |#define WCHAR   UINT16
                            15169 ; 66   |
                            15170 ; 67   |//UINT128 is 16 bytes or 6 words
                            15171 ; 68   |typedef struct UINT128_3500 {   
                            15172 ; 69   |    int val[6];     
                            15173 ; 70   |} UINT128_3500;
                            15174 ; 71   |
                            15175 ; 72   |#define UINT128   UINT128_3500
                            15176 ; 73   |
                            15177 ; 74   |// Little endian word packed byte strings:   
                            15178 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15179 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15180 ; 77   |// Little endian word packed byte strings:   
                            15181 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15182 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15183 ; 80   |
                            15184 ; 81   |// Declare Memory Spaces To Use When Coding
                            15185 ; 82   |// A. Sector Buffers
                            15186 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15187 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15188 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15189 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15190 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15191 ; 88   |// B. Media DDI Memory
                            15192 ; 89   |#define MEDIA_DDI_MEM _Y
                            15193 ; 90   |
                            15194 ; 91   |
                            15195 ; 92   |
                            15196 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15197 ; 94   |// Examples of circular pointers:
                            15198 ; 95   |//    INT CIRC cpiVarName
                            15199 ; 96   |//    DWORD CIRC cpdwVarName
                            15200 ; 97   |
                            15201 ; 98   |#define RETCODE INT                 // rcVarName
                            15202 ; 99   |
                            15203 ; 100  |// generic bitfield structure
                            15204 ; 101  |struct Bitfield {
                            15205 ; 102  |    unsigned int B0  :1;
                            15206 ; 103  |    unsigned int B1  :1;
                            15207 ; 104  |    unsigned int B2  :1;
                            15208 ; 105  |    unsigned int B3  :1;
                            15209 ; 106  |    unsigned int B4  :1;
                            15210 ; 107  |    unsigned int B5  :1;
                            15211 ; 108  |    unsigned int B6  :1;
                            15212 ; 109  |    unsigned int B7  :1;
                            15213 ; 110  |    unsigned int B8  :1;
                            15214 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15215 ; 112  |    unsigned int B10 :1;
                            15216 ; 113  |    unsigned int B11 :1;
                            15217 ; 114  |    unsigned int B12 :1;
                            15218 ; 115  |    unsigned int B13 :1;
                            15219 ; 116  |    unsigned int B14 :1;
                            15220 ; 117  |    unsigned int B15 :1;
                            15221 ; 118  |    unsigned int B16 :1;
                            15222 ; 119  |    unsigned int B17 :1;
                            15223 ; 120  |    unsigned int B18 :1;
                            15224 ; 121  |    unsigned int B19 :1;
                            15225 ; 122  |    unsigned int B20 :1;
                            15226 ; 123  |    unsigned int B21 :1;
                            15227 ; 124  |    unsigned int B22 :1;
                            15228 ; 125  |    unsigned int B23 :1;
                            15229 ; 126  |};
                            15230 ; 127  |
                            15231 ; 128  |union BitInt {
                            15232 ; 129  |        struct Bitfield B;
                            15233 ; 130  |        int        I;
                            15234 ; 131  |};
                            15235 ; 132  |
                            15236 ; 133  |#define MAX_MSG_LENGTH 10
                            15237 ; 134  |struct CMessage
                            15238 ; 135  |{
                            15239 ; 136  |        unsigned int m_uLength;
                            15240 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15241 ; 138  |};
                            15242 ; 139  |
                            15243 ; 140  |typedef struct {
                            15244 ; 141  |    WORD m_wLength;
                            15245 ; 142  |    WORD m_wMessage;
                            15246 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15247 ; 144  |} Message;
                            15248 ; 145  |
                            15249 ; 146  |struct MessageQueueDescriptor
                            15250 ; 147  |{
                            15251 ; 148  |        int *m_pBase;
                            15252 ; 149  |        int m_iModulo;
                            15253 ; 150  |        int m_iSize;
                            15254 ; 151  |        int *m_pHead;
                            15255 ; 152  |        int *m_pTail;
                            15256 ; 153  |};
                            15257 ; 154  |
                            15258 ; 155  |struct ModuleEntry
                            15259 ; 156  |{
                            15260 ; 157  |    int m_iSignaledEventMask;
                            15261 ; 158  |    int m_iWaitEventMask;
                            15262 ; 159  |    int m_iResourceOfCode;
                            15263 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15264 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            15265 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15266 ; 163  |    int m_uTimeOutHigh;
                            15267 ; 164  |    int m_uTimeOutLow;
                            15268 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15269 ; 166  |};
                            15270 ; 167  |
                            15271 ; 168  |union WaitMask{
                            15272 ; 169  |    struct B{
                            15273 ; 170  |        unsigned int m_bNone     :1;
                            15274 ; 171  |        unsigned int m_bMessage  :1;
                            15275 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15276 ; 173  |        unsigned int m_bButton   :1;
                            15277 ; 174  |    } B;
                            15278 ; 175  |    int I;
                            15279 ; 176  |} ;
                            15280 ; 177  |
                            15281 ; 178  |
                            15282 ; 179  |struct Button {
                            15283 ; 180  |        WORD wButtonEvent;
                            15284 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15285 ; 182  |};
                            15286 ; 183  |
                            15287 ; 184  |struct Message {
                            15288 ; 185  |        WORD wMsgLength;
                            15289 ; 186  |        WORD wMsgCommand;
                            15290 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            15291 ; 188  |};
                            15292 ; 189  |
                            15293 ; 190  |union EventTypes {
                            15294 ; 191  |        struct CMessage msg;
                            15295 ; 192  |        struct Button Button ;
                            15296 ; 193  |        struct Message Message;
                            15297 ; 194  |};
                            15298 ; 195  |
                            15299 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15300 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15301 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15302 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15303 ; 200  |
                            15304 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            15305 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            15306 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            15307 ; 204  |
                            15308 ; 205  |#if DEBUG
                            15309 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            15310 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            15311 ; 208  |#else 
                            15312 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            15313 ; 210  |#define DebugBuildAssert(x)    
                            15314 ; 211  |#endif
                            15315 ; 212  |
                            15316 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            15317 ; 214  |//  #pragma asm
                            15318 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            15319 ; 216  |//  #pragma endasm
                            15320 ; 217  |
                            15321 ; 218  |
                            15322 ; 219  |#ifdef COLOR_262K
                            15323 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            15324 ; 221  |#elif defined(COLOR_65K)
                            15325 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            15326 ; 223  |#else
                            15327 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            15328 ; 225  |#endif
                            15329 ; 226  |    
                            15330 ; 227  |#endif // #ifndef _TYPES_H
                            15331 
                            15333 
                            15334 ; 6    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15335 ; 7    |_reentrant void HALDisplayInit(void);
                            15336 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                            15337 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                            15338 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                            15339 ; 11   |_reentrant void HALDisplayDecContrast(void);
                            15340 ; 12   |_reentrant void HALDisplayIncContrast(void);
                            15341 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                            15342 ; 14   |
                            15343 ; 15   |
                            15344 ; 16   |
                            15345 ; 17   |
                            15346 ; 18   |#endif
                            15347 
                            15349 
                            15350 ; 22   |#include "unicode.h"
                            15351 
                            15353 
                            15354 ; 1    |#ifndef UNICODE_H
                            15355 ; 2    |#define UNICODE_H
                            15356 ; 3    |
                            15357 ; 4    |//#include "displaydrv.h"
                            15358 ; 5    |
                            15359 ; 6    |// Exported functions
                            15360 ; 7    |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) ;
                            15361 
                            15368 
                            15369 ; 8    |
                            15370 ; 9    |void _reentrant CLcdPrintStringAddress(WORD x, WORD y, WORD *string, WORD bInverted);
                            15371 ; 10   |#ifndef USBMSC_BUILD
                            15372 ; 11   |void _reentrant LCDSetFont(WORD fontNum);
                            15373 ; 12   |#else
                            15374 ; 13   |void LCDSetFont(WORD fontNum);
                            15375 ; 14   |#endif
                            15376 ; 15   |
                            15377 ; 16   |#endif
                            15378 
                            15380 
                            15381 ; 23   |#include "dbcs.h"
                            15382 
                            15384 
                            15385 ; 1    |#ifndef DBCS_H
                            15386 ; 2    |#define DBCS_H
                            15387 ; 3    |
                            15388 ; 4    |
                            15389 ; 5    |_reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLength);
                            15390 ; 6    |_reentrant void DBCSToUnicodeDstXSrcY(_packed unsigned char *pDBCS, WORD _X * _X pUnicode,
                                   INT iLength);
                            15391 ; 7    |
                            15392 ; 8    |#endif
                            15393 
                            15395 
                            15396 ; 24   |
                            15397 ; 25   |#define MAX_MASKS 5
                            15398 ; 26   |#define MAX_DIGITS 10
                            15399 ; 27   |
                            15400 ; 28   |//#include "display.h"
                            15401 ; 29   |
                            15402 ; 30   |struct ModuleEntry *g_pDisplayModuleEntry = NULL;
                            15403 
                            15404 
Y:0000                      15405         org     y,".ydatadisplaymodule",init:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15406 Fg_pDisplayModuleEntry:
Y:0000 000000               15407         dc      $000000
                            15453 
                            15454 ; 31   |
                            15455 ; 32   |
                            15456 ; 33   |_reentrant BITMAP *DisplayLoadBitmap(WORD iResource);
                            15457 ; 34   |
                            15458 ; 35   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                            15459 ; 36   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                            15460 ; 37   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                            15461 ; 38   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                            15462 ; 39   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                            15463 ; 40   |_reentrant void DisplaySetFont(INT iFont);
                            15464 ; 41   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                            15465 ; 42   |_reentrant void DisplayUpdateDisplay(void);
                            15466 ; 43   |_reentrant void DisplayPrint1DigitHourTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT
                                   iSeconds   ,INT bInvert);
                            15467 ; 44   |_reentrant void DisplayHandleMessage(Message *pMsg);
                            15468 ; 45   |
                            15469 ; 46   |
                            15470 ; 47   |
                            15471 ; 48   |_reentrant void DisplayPrint1DigitHourTime(INT x,INT y,INT iHours, INT iMinutes ,INT iSeco
                                  nds   ,INT bInvert); //Stmp002970
                            15472 ; 49   |
                            15473 ; 50   |//****************************************************************************************
                                  *******
                            15474 ; 51   |// Function: DisplayModuleInit()
                            15475 ; 52   |// Inputs:   pointer to module table entry for this module
                            15476 ; 53   |// Outputs:  Returns EventWait value specifying when to call this module's process functio
                                  n next.
                            15477 ; 54   |// Notes:  
                            15478 ; 55   |//****************************************************************************************
                                  *******
                            15479 ; 56   |int _reentrant DisplayModuleInit(struct ModuleEntry *pEntry)
                            15480 ; 57   |{
                            15481 
P:0000                      15482         org     p,".ptextdisplaymodule":
                            15487 FDisplayModuleInit:
                            15496 
                            15497 ; 58   |    union WaitMask returnMask;  
                            15498 ; 59   |
                            15499 ; 60   |    g_pDisplayModuleEntry=pEntry;
                            15500 
                            15503 
                            15504 ; 61   |
                            15505 ; 62   |    SALDisplayInit();
                            15506 
P:0000 055F7C         2    215488         movec   ssh,y:(r7)+
P:0001 205F00         2    415491         move    (r7)+
P:0002 687000 rrrrrr  3    715502         move    r0,y:Fg_pDisplayModuleEntry
P:0004 0BF080 rrrrrr  6   1315508         jsr     FSALDisplayInit
                            15510 
                            15511 ; 63   |    HALDisplayInit();
                            15512 
P:0006 0BF080 rrrrrr  6   1915514         jsr     FHALDisplayInit
                            15515 
                            15516 ; 64   |    DisplaySetFont(0);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15517 
P:0008 200013         2   2115519         clr     a   
P:0009 0BF080 rrrrrr  6   2715520         jsr     FDisplaySetFont
                            15521 
                            15522 ; 65   |
                            15523 ; 66   |    //Tell ModuleTableEntry.wait to call this module's process function next when it has a
                                   msg
                            15524 ; 67   |    returnMask.I=0x000000 | 2; // EVENT_MESSAGE
                            15525 
                            15531 
                            15532 ; 68   |    return returnMask.I;  
                            15533 ; 69   |}
                            15534 
P:000B 045FA0         2   2915528         movec   m0,n7
P:000C 56F400 000002  3   3215527         move    #>2,a
P:000E 5E6F00         4   3615530         move    a,y:(r7+n7)
P:000F 204F00         2   3815536         move    (r7)+n7
P:0010 05FF7C         4   4215538         movec   y:-(r7),ssh
P:0011 000000         2   4415538         nop             ; (inserted)
P:0012 00000C         4   4815542         rts
                            15544 
                            15545 ; 70   |
                            15546 ; 71   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                            15547 ; 72   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            15548 ; 73   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            15549 ; 74   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                            15550 ; 75   | 
                            15551 ; 76   |_reentrant void DisplaySetFont(INT);
                            15552 ; 77   |
                            15553 ; 78   |//****************************************************************************************
                                  ********
                            15554 ; 79   |// Function:  DisplayProcessQueue
                            15555 ; 80   |// Inputs:    
                            15556 ; 81   |// Outputs:   
                            15557 ; 82   |// Notes
                            15558 ; 83   |//****************************************************************************************
                                  ********
                            15559 ; 84   |int _reentrant DisplayProcessQueue(union WaitMask Signals,struct MessageQueueDescriptor * 
                                  pQueue)
                            15560 ; 85   |{
                            15561 
                            15566 FDisplayProcessQueue:
                            15603 
                            15604 ; 86   |    union WaitMask returnMask; 
                            15605 ; 87   |    struct CMessage  Msg;
                            15606 ; 88   |    unsigned long    lTimeout;
                            15607 ; 89   |    INT              error;
                            15608 ; 90   |    int i;
                            15609 ; 91   |    INT Param1,Param2,Param3,Param4,Param5;//these are here as code optimizations
                            15610 ; 92   |        int *SpectrumAddr;
                            15611 ; 93   |    int bInvert;
                            15612 
                            15624 
                            15625 ; 94   |
                            15626 ; 95   |    returnMask.I=0x000000 | 2;//Initialize it to signal us if we have a message
                            15627 
                            15633 
                            15634 ; 96   |
                            15635 ; 97   |    if(Signals.B.m_bTimer)
                            15636 ; 98   |    {
                            15637 ; 99   |    }
                            15638 ; 100  |    if(Signals.B.m_bMessage)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15639 
P:0013 055F7C         2   5015567         movec   ssh,y:(r7)+
P:0014 3F1000         2   5215570         move    #16,n7
P:0015 000000         2   5415570         nop             ; (inserted)
P:0016 204F00         2   5615572         move    (r7)+n7
P:0017 77F400 FFFFFC  3   5915614         move    #-4,n7
P:0019 000000         2   6115614         nop             ; (inserted)
P:001A 5C6F00         4   6515616         move    a1,y:(r7+n7)
P:001B 77F400 FFFFFD  3   6815619         move    #-3,n7
P:001D 56F400 000002  3   7115629         move    #>2,a
P:001F 686F00         4   7515621         move    r0,y:(r7+n7)
P:0020 77F400 FFFFFB  3   7815630         move    #-5,n7
P:0022 000000         2   8015630         nop             ; (inserted)
P:0023 5E6F00         4   8415632         move    a,y:(r7+n7)
P:0024 77F400 FFFFFC  3   8715641         move    #-4,n7
P:0026 000000         2   8915641         nop             ; (inserted)
P:0027 4EEF00         4   9315643         move    y:(r7+n7),y0
P:0028 0AC601 rrrrrr  6   9915644         jclr    #1,y0,L42
                            15645 
                            15646 ; 101  |    {
                            15647 ; 102  |        while(GetMessage(pQueue,&Msg))
                            15648 
P:002A 0AF080 rrrrrr  6  10515650         jmp     L41
                            15651 
                            15652 ; 103  |        {
                            15653 ; 104  |
                            15654 ; 105  |            Param1 = Msg.m_uMsg[1];
                            15655 
                            15657 L3:
                            15666 
                            15667 ; 106  |            Param2 = Msg.m_uMsg[2];
                            15668 
                            15679 
                            15680 ; 107  |            Param3 = Msg.m_uMsg[3];    
                            15681 
                            15687 
                            15688 ; 108  |            Param4 = Msg.m_uMsg[4];    
                            15689 
                            15695 
                            15696 ; 109  |            Param5 = Msg.m_uMsg[5];    
                            15697 
                            15703 
                            15704 ; 110  |            bInvert = 0;
                            15705 
                            15709 
                            15710 ; 111  |            switch(Msg.m_uMsg[0])
                            15711 
P:002C 77F400 FFFFF2  3  10815657         move    #-14,n7
P:002E 270000         2  11015707         move    #0,y1
P:002F 2E0300         2  11215716         move    #<3,a
P:0030 4DEF00         4  11615659         move    y:(r7+n7),x1
P:0031 77F400 FFFFFE  3  11915661         move    #-2,n7
P:0033 000000         2  12115661         nop             ; (inserted)
P:0034 4D6F00         4  12515663         move    x1,y:(r7+n7)
P:0035 77F400 FFFFF3  3  12815670         move    #-13,n7
P:0037 000000         2  13015670         nop             ; (inserted)
P:0038 59EF00         4  13415672         move    y:(r7+n7),b0
P:0039 045FA0         2  13615674         movec   m0,n7
P:003A 000000         2  13815674         nop             ; (inserted)
P:003B 596F00         4  14215676         move    b0,y:(r7+n7)
P:003C 77F400 FFFFF4  3  14515683         move    #-12,n7
P:003E 000000         2  14715683         nop             ; (inserted)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
P:003F 4CEF00         4  15115685         move    y:(r7+n7),x0
P:0040 77F400 FFFFF5  3  15415691         move    #-11,n7
P:0042 000000         2  15615691         nop             ; (inserted)
P:0043 4EEF00         4  16015693         move    y:(r7+n7),y0
P:0044 77F400 FFFFF6  3  16315699         move    #-10,n7
P:0046 000000         2  16515699         nop             ; (inserted)
P:0047 4DEF00         4  16915701         move    y:(r7+n7),x1
P:0048 77F400 FFFFF1  3  17215713         move    #-15,n7
P:004A 000000         2  17415713         nop             ; (inserted)
P:004B 5FEF00         4  17815715         move    y:(r7+n7),b
P:004C 2B0000         2  18015717         move    #0,b2
P:004D 66F41C rrrrrr  3  18315718         sub     a,b     #L43,r6
P:004F 0AF0A8 rrrrrr  6  18915719         jcs     L27
P:0051 56F400 000025  3  19215720         move    #>37,a
P:0053 21FE0D         2  19415721         cmp     a,b     b,n6
P:0054 0AF0A7 rrrrrr  6  20015722         jgt     L27
P:0056 07EE96         8  20815723         movem   p:(r6+n6),r6
P:0057 000000         2  21015723         nop             ; (inserted)
P:0058 0AE680         4  21415725         jmp     (r6)
                            15726 
P:0059 rrrrrr               15727 L43:    dc      L4      ; case 196608:
P:005A rrrrrr               15728         dc      L6      ; case 196609:
P:005B rrrrrr               15729         dc      L8      ; case 196610:
P:005C rrrrrr               15730         dc      L5      ; case 196611:
P:005D rrrrrr               15731         dc      L7      ; case 196612:
P:005E rrrrrr               15732         dc      L27     ; default:
P:005F rrrrrr               15733         dc      L27     ; default:
P:0060 rrrrrr               15734         dc      L10     ; case 196615:
P:0061 rrrrrr               15735         dc      L12     ; case 196616:
P:0062 rrrrrr               15736         dc      L9      ; case 196617:
P:0063 rrrrrr               15737         dc      L11     ; case 196618:
P:0064 rrrrrr               15738         dc      L27     ; default:
P:0065 rrrrrr               15739         dc      L27     ; default:
P:0066 rrrrrr               15740         dc      L27     ; default:
P:0067 rrrrrr               15741         dc      L27     ; default:
P:0068 rrrrrr               15742         dc      L27     ; default:
P:0069 rrrrrr               15743         dc      L27     ; default:
P:006A rrrrrr               15744         dc      L27     ; default:
P:006B rrrrrr               15745         dc      L13     ; case 196626:
P:006C rrrrrr               15746         dc      L15     ; case 196627:
P:006D rrrrrr               15747         dc      L17     ; case 196628:
P:006E rrrrrr               15748         dc      L19     ; case 196629:
P:006F rrrrrr               15749         dc      L20     ; case 196630:
P:0070 rrrrrr               15750         dc      L21     ; case 196631:
P:0071 rrrrrr               15751         dc      L22     ; case 196632:
P:0072 rrrrrr               15752         dc      L23     ; case 196633:
P:0073 rrrrrr               15753         dc      L27     ; default:
P:0074 rrrrrr               15754         dc      L27     ; default:
P:0075 rrrrrr               15755         dc      L14     ; case 196636:
P:0076 rrrrrr               15756         dc      L16     ; case 196637:
P:0077 rrrrrr               15757         dc      L18     ; case 196638:
P:0078 rrrrrr               15758         dc      L27     ; default:
P:0079 rrrrrr               15759         dc      L27     ; default:
P:007A rrrrrr               15760         dc      L27     ; default:
P:007B rrrrrr               15761         dc      L25     ; case 196642:
P:007C rrrrrr               15762         dc      L24     ; case 196643:
P:007D rrrrrr               15763         dc      L27     ; default:
P:007E rrrrrr               15764         dc      L26     ; case 196645:
                            15765 
                            15766 
                            15767 ; 112  |            {
                            15768 ; 113  |            case LCD_CLEAR_RANGE:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15769 ; 114  |                SALDisplayClearRange(Param1,Param2,Param3,Param4);
                            15770 
                            15772 L4:
P:007F 045FA0         2  21615775         movec   m0,n7
P:0080 000000         2  21815775         nop             ; (inserted)
P:0081 5FEF00         4  22215777         move    y:(r7+n7),b
P:0082 77F400 FFFFFE  3  22515778         move    #-2,n7
P:0084 000000         2  22715778         nop             ; (inserted)
P:0085 5EEF00         4  23115780         move    y:(r7+n7),a
P:0086 0BF080 rrrrrr  6  23715781         jsr     FSALDisplayClearRange
                            15790 
                            15791 ; 115  |                break;
                            15792 
P:0088 0AF080 rrrrrr  6  24315794         jmp     L41
                            15795 
                            15796 ; 116  |            case LCD_PRINT_RANGE_INV_RSRC:
                            15797 ; 117  |#define DISPLAY_NORMAL  0
                            15798 ; 118  |#define DISPLAY_INVERT  1
                            15799 ; 119  |#define DISPLAY_CLEAR   2 
                            15800 ; 120  |
                            15801 ; 121  |                bInvert=DISPLAY_INVERT;
                            15802 
                            15804 L5:
                            15810 
                            15811 ; 122  |            case LCD_PRINT_RANGE_RSRC:
                            15812 ; 123  |                DisplayPrintBitmapResource(Param1,Param2,Param3,bInvert);
                            15813 
P:008A 47F400 000001  3  24615808         move    #>1,y1
                            15815 L6:
P:008C 045FA0         2  24815817         movec   m0,n7
P:008D 20E600         2  25015823         move    y1,y0
P:008E 5FEF00         4  25415819         move    y:(r7+n7),b
P:008F 77F400 FFFFFE  3  25715820         move    #-2,n7
P:0091 000000         2  25915820         nop             ; (inserted)
P:0092 5EEF00         4  26315822         move    y:(r7+n7),a
P:0093 0BF080 rrrrrr  6  26915824         jsr     FDisplayPrintBitmapResource
                            15834 
                            15835 ; 124  |                break;
                            15836 
P:0095 0AF080 rrrrrr  6  27515838         jmp     L41
                            15839 
                            15840 ; 125  |            case LCD_PRINT_RANGE_INV_ADDR:
                            15841 ; 126  |                bInvert=DISPLAY_INVERT;
                            15842 
                            15844 L7:
                            15850 
                            15851 ; 127  |            case LCD_PRINT_RANGE_ADDR:
                            15852 ; 128  |                SALDisplayPrintBitmapAddress(Param1,Param2,(void*)Param3,bInvert);
                            15853 
P:0097 47F400 000001  3  27815848         move    #>1,y1
P:0099 209000         2  28015855 L8:     move    x0,r0
P:009A 045FA0         2  28215856         movec   m0,n7
P:009B 20E400         2  28415862         move    y1,x0
P:009C 5FEF00         4  28815858         move    y:(r7+n7),b
P:009D 77F400 FFFFFE  3  29115859         move    #-2,n7
P:009F 000000         2  29315859         nop             ; (inserted)
P:00A0 5EEF00         4  29715861         move    y:(r7+n7),a
P:00A1 0BF080 rrrrrr  6  30315863         jsr     FSALDisplayPrintBitmapAddress
                            15874 
                            15875 ; 129  |                break;
                            15876 
P:00A3 0AF080 rrrrrr  6  30915878         jmp     L41
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15879 
                            15880 ; 130  |            case LCD_PRINT_STRING_INV_RSRC:
                            15881 ; 131  |                bInvert=DISPLAY_INVERT;
                            15882 
                            15884 L9:
                            15890 
                            15891 ; 132  |            case LCD_PRINT_STRING_RSRC:
                            15892 ; 133  |                DisplayPrintStringResource(Param1,Param2,Param3,bInvert);
                            15893 
P:00A5 47F400 000001  3  31215888         move    #>1,y1
                            15895 L10:
P:00A7 045FA0         2  31415897         movec   m0,n7
P:00A8 20E600         2  31615903         move    y1,y0
P:00A9 5FEF00         4  32015899         move    y:(r7+n7),b
P:00AA 77F400 FFFFFE  3  32315900         move    #-2,n7
P:00AC 000000         2  32515900         nop             ; (inserted)
P:00AD 5EEF00         4  32915902         move    y:(r7+n7),a
P:00AE 0BF080 rrrrrr  6  33515904         jsr     FDisplayPrintStringResource
                            15914 
                            15915 ; 134  |                break;
                            15916 
P:00B0 0AF080 rrrrrr  6  34115918         jmp     L41
                            15919 
                            15920 ; 135  |            case LCD_PRINT_STRING_INV_ADDR:
                            15921 ; 136  |                bInvert=DISPLAY_INVERT;
                            15922 
                            15924 L11:
                            15930 
                            15931 ; 137  |            case LCD_PRINT_STRING_ADDR:
                            15932 ; 138  |                DisplayPrintStringAddress(Param1,Param2,(void*)Param3,bInvert);
                            15933 
P:00B2 47F400 000001  3  34415928         move    #>1,y1
P:00B4 209000         2  34615935 L12:    move    x0,r0
P:00B5 045FA0         2  34815936         movec   m0,n7
P:00B6 20E400         2  35015942         move    y1,x0
P:00B7 5FEF00         4  35415938         move    y:(r7+n7),b
P:00B8 77F400 FFFFFE  3  35715939         move    #-2,n7
P:00BA 000000         2  35915939         nop             ; (inserted)
P:00BB 5EEF00         4  36315941         move    y:(r7+n7),a
P:00BC 0BF080 rrrrrr  6  36915943         jsr     FDisplayPrintStringAddress
                            15954 
                            15955 ; 139  |                break;
                            15956 
P:00BE 0AF080 rrrrrr  6  37515958         jmp     L41
                            15959 
                            15960 ; 140  |//LCD_SCROLL_DISPLAY       equ     MSG_TYPE_LCD+9
                            15961 ; 141  |//LCD_READ_LCD_ADDR        equ     MSG_TYPE_LCD+10
                            15962 ; 142  |            case LCD_SET_FONT:
                            15963 ; 143  |                DisplaySetFont(Param1);
                            15964 
                            15966 L13:
P:00C0 77F400 FFFFFE  3  37815968         move    #-2,n7
P:00C2 000000         2  38015968         nop             ; (inserted)
P:00C3 5EEF00         4  38415970         move    y:(r7+n7),a
P:00C4 0BF080 rrrrrr  6  39015971         jsr     FDisplaySetFont
                            15975 
                            15976 ; 144  |                break;
                            15977 
P:00C6 0AF080 rrrrrr  6  39615979         jmp     L41
                            15980 
                            15981 ; 145  |            case LCD_PRINT_NUMBER_INV:
                            15982 ; 146  |                bInvert=DISPLAY_INVERT;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15983 
                            15985 L14:
                            15993 
                            15994 ; 147  |            case LCD_PRINT_NUMBER:
                            15995 ; 148  |                DisplayPrintNumber(Param1/*x*/,Param2/*y*/,Param3/*number*/,Param4/*digits
                                   */,Param5/*filler character*/,bInvert);
                            15996 
P:00C8 47F400 000001  3  39915991         move    #>1,y1
P:00CA 045FA0         2  40115998 L15:    movec   m0,n7
P:00CB 000000         2  40315998         nop             ; (inserted)
P:00CC 5FEF00         4  40716000         move    y:(r7+n7),b
P:00CD 77F400 FFFFFE  3  41016001         move    #-2,n7
P:00CF 000000         2  41216001         nop             ; (inserted)
P:00D0 5EEF00         4  41616003         move    y:(r7+n7),a
P:00D1 0BF080 rrrrrr  6  42216004         jsr     FDisplayPrintNumber
                            16015 
                            16016 ; 149  |                break;
                            16017 
P:00D3 0AF080 rrrrrr  6  42816019         jmp     L41
                            16020 
                            16021 ; 150  |            case LCD_PRINT_TIME_INV:
                            16022 ; 151  |                bInvert=DISPLAY_INVERT;
                            16023 
                            16025 L16:
                            16032 
                            16033 ; 152  |            case LCD_PRINT_TIME:
                            16034 ; 153  |#ifndef FAT32TEST
                            16035 ; 154  |                DisplayPrintTime(Param1/*x*/,Param2/*y*/,Param3/*minutes*/,Param4/*seconds
                                  */,bInvert);
                            16036 
P:00D5 47F400 000001  3  43116030         move    #>1,y1
P:00D7 045FA0         2  43316038 L17:    movec   m0,n7
P:00D8 20E500         2  43516044         move    y1,x1
P:00D9 5FEF00         4  43916040         move    y:(r7+n7),b
P:00DA 77F400 FFFFFE  3  44216041         move    #-2,n7
P:00DC 000000         2  44416041         nop             ; (inserted)
P:00DD 5EEF00         4  44816043         move    y:(r7+n7),a
P:00DE 0BF080 rrrrrr  6  45416045         jsr     FDisplayPrintTime
                            16057 
                            16058 ; 155  |#endif
                            16059 ; 156  |                break;
                            16060 
P:00E0 0AF080 rrrrrr  6  46016062         jmp     L41
                            16063 
                            16064 ; 157  |            case LCD_PRINT_TIME_LONG_INV:
                            16065 ; 158  |                bInvert=DISPLAY_INVERT;
                            16066 
                            16068 L18:
                            16076 
                            16077 ; 159  |            case LCD_PRINT_TIME_LONG:
                            16078 ; 160  |#ifndef FAT32TEST
                            16079 ; 161  |                DisplayPrintLongTime(Param1/*x*/,Param2/*y*/,Param3/*hours*/,Param4/*minut
                                  es*/,Param5/*seconds*/,bInvert);
                            16080 
P:00E2 47F400 000001  3  46316074         move    #>1,y1
P:00E4 045FA0         2  46516082 L19:    movec   m0,n7
P:00E5 000000         2  46716082         nop             ; (inserted)
P:00E6 5FEF00         4  47116084         move    y:(r7+n7),b
P:00E7 77F400 FFFFFE  3  47416085         move    #-2,n7
P:00E9 000000         2  47616085         nop             ; (inserted)
P:00EA 5EEF00         4  48016087         move    y:(r7+n7),a
P:00EB 0BF080 rrrrrr  6  48616088         jsr     FDisplayPrintLongTime
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16099 
                            16100 ; 162  |#endif
                            16101 ; 163  |                break;
                            16102 
P:00ED 0AF080 rrrrrr  6  49216104         jmp     L41
                            16105 
                            16106 ; 164  |            case LCD_PRINT_STRING_UNICODE_INV_ADDR:
                            16107 ; 165  |                bInvert=DISPLAY_INVERT;
                            16108 
                            16110 L20:
                            16116 
                            16117 ; 166  |            case LCD_PRINT_STRING_UNICODE_ADDR:
                            16118 ; 167  |                DisplayPrintStringAddressUnicode(Param1,Param2,(void*)Param3,bInvert);
                            16119 
P:00EF 47F400 000001  3  49516114         move    #>1,y1
P:00F1 209000         2  49716121 L21:    move    x0,r0
P:00F2 045FA0         2  49916122         movec   m0,n7
P:00F3 20E400         2  50116128         move    y1,x0
P:00F4 5FEF00         4  50516124         move    y:(r7+n7),b
P:00F5 77F400 FFFFFE  3  50816125         move    #-2,n7
P:00F7 000000         2  51016125         nop             ; (inserted)
P:00F8 5EEF00         4  51416127         move    y:(r7+n7),a
P:00F9 0BF080 rrrrrr  6  52016129         jsr     FDisplayPrintStringAddressUnicode
                            16140 
                            16141 ; 168  |                break;
                            16142 
P:00FB 0AF080 rrrrrr  6  52616144         jmp     L41
                            16145 
                            16146 ; 169  |            case LCD_PRINT_STRING_UNICODE_INV_RSRC:
                            16147 ; 170  |                bInvert=DISPLAY_INVERT;
                            16148 
                            16150 L22:
                            16156 
                            16157 ; 171  |            case LCD_PRINT_STRING_UNICODE_RSRC:
                            16158 ; 172  |                DisplayPrintStringResourceUnicode(Param1,Param2,Param3,bInvert);
                            16159 
P:00FD 47F400 000001  3  52916154         move    #>1,y1
                            16161 L23:
P:00FF 045FA0         2  53116163         movec   m0,n7
P:0100 20E600         2  53316169         move    y1,y0
P:0101 5FEF00         4  53716165         move    y:(r7+n7),b
P:0102 77F400 FFFFFE  3  54016166         move    #-2,n7
P:0104 000000         2  54216166         nop             ; (inserted)
P:0105 5EEF00         4  54616168         move    y:(r7+n7),a
P:0106 0BF080 rrrrrr  6  55216170         jsr     FDisplayPrintStringResourceUnicode
                            16180 
                            16181 ; 173  |                break;
                            16182 
P:0108 0AF080 rrrrrr  6  55816184         jmp     L41
                            16185 
                            16186 ; 174  |
                            16187 ; 175  |            case LCD_PRINT_UNICODE_CHAR_INV:
                            16188 ; 176  |                bInvert=DISPLAY_INVERT;
                            16189 
                            16191 L24:
                            16197 
                            16198 ; 177  |            case LCD_PRINT_UNICODE_CHAR:
                            16199 ; 178  |                DisplayPrintCharUnicode   (Param1,Param2,Param3,bInvert);
                            16200 
P:010A 47F400 000001  3  56116195         move    #>1,y1
                            16202 L25:
P:010C 045FA0         2  56316204         movec   m0,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
P:010D 20E600         2  56516210         move    y1,y0
P:010E 5FEF00         4  56916206         move    y:(r7+n7),b
P:010F 77F400 FFFFFE  3  57216207         move    #-2,n7
P:0111 000000         2  57416207         nop             ; (inserted)
P:0112 5EEF00         4  57816209         move    y:(r7+n7),a
P:0113 0BF080 rrrrrr  6  58416211         jsr     FDisplayPrintCharUnicode
                            16221 
                            16222 ; 179  |                break;
                            16223 
P:0115 0AF080 rrrrrr  6  59016225         jmp     L41
                            16226 
                            16227 ; 180  |            case LCD_PRINT_TIME_L_1DIG_HR:
                            16228 ; 181  |                DisplayPrint1DigitHourTime(Param1/*x*/,Param2/*y*/,Param3/*hours*/,Param4/
                                  *minutes*/,Param5/*seconds*/,bInvert);
                            16229 
                            16231 L26:
P:0117 045FA0         2  59216238         movec   m0,n7
P:0118 270000         2  59416237         move    #0,y1
P:0119 5FEF00         4  59816240         move    y:(r7+n7),b
P:011A 77F400 FFFFFE  3  60116241         move    #-2,n7
P:011C 000000         2  60316241         nop             ; (inserted)
P:011D 5EEF00         4  60716243         move    y:(r7+n7),a
P:011E 0BF080 rrrrrr  6  61316244         jsr     FDisplayPrint1DigitHourTime
                            16254 
                            16255 ; 182  |                break;
                            16256 
P:0120 0AF080 rrrrrr  6  61916258         jmp     L41
                            16259 
                            16260 ; 183  |#ifdef SPECTRUM_ANAL            
                            16261 ; 184  |            case LCD_DISPLAY_HISTOGRAM:
                            16262 ; 185  |                                SpectrumAddr = (int *)Param1;
                            16263 ; 186  |                                 for(i=0;i<Param2;i++)
                            16264 ; 187  |                                 {
                            16265 ; 188  |                                         histolength = SpectrumAddr[i];
                            16266 ; 189  |                                         histolength =  histolength - 16;
                            16267 ; 190  |                                         if (histolength < 0)
                            16268 ; 191  |                                                 histolength = 0;
                            16269 ; 192  |                                 SALDisplayPrintBitmapAddress( Param3+(i<<1), LCD_SIZE_Y -
                                   histolength,(void*)histo,0);
                            16270 ; 193  |                                 }
                            16271 ; 194  |                break;
                            16272 ; 195  |#endif
                            16273 ; 196  |            default://any unhandled messages are sent to the SAL
                            16274 ; 197  |                DisplayHandleMessage((Message*)&Msg);
                            16275 
P:0122 77F400 FFFFF0  3  62216277 L27:    move    #-16,n7
P:0124 000000         2  62416277         nop             ; (inserted)
P:0125 044F10         4  62816279         lua     (r7)+n7,r0
P:0126 0BF080 rrrrrr  6  63416280         jsr     FDisplayHandleMessage
                            16282 L41:
P:0128 77F400 FFFFF0  3  63716282         move    #-16,n7
P:012A 000000         2  63916282         nop             ; (inserted)
P:012B 044F14         4  64316284         lua     (r7)+n7,r4
P:012C 77F400 FFFFFD  3  64616285         move    #-3,n7
P:012E 000000         2  64816285         nop             ; (inserted)
P:012F 68EF00         4  65216287         move    y:(r7+n7),r0
P:0130 0BF080 rrrrrr  6  65816290         jsr     GetMessage
P:0132 200003         2  66016293         tst     a
P:0133 0AF0A2 rrrrrr  6  66616294         jne     L3
                            16295 
                            16296 ; 198  |                break;
                            16297 ; 199  |            }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16298 ; 200  |        }
                            16299 ; 201  |    }
                            16300 ; 202  |    DisplayUpdateDisplay();
                            16301 
P:0135 0BF080 rrrrrr  6  67216303 L42:    jsr     FDisplayUpdateDisplay
                            16304 
                            16305 ; 203  |    return returnMask.I;
                            16306 
                            16311 
                            16312 ; 204  |}
                            16313 
P:0137 77F400 FFFFFB  3  67516308         move    #-5,n7
P:0139 000000         2  67716308         nop             ; (inserted)
P:013A 5EEF00         4  68116310         move    y:(r7+n7),a
P:013B 77F400 FFFFEF  3  68416315         move    #-17,n7
P:013D 000000         2  68616315         nop             ; (inserted)
P:013E 05EF7C         4  69016317         movec   y:(r7+n7),ssh
P:013F 204F00         2  69216319         move    (r7)+n7
P:0140 00000C         4  69616321         rts
                            16364 
                            16365         extern  GetMessage, FDisplayHandleMessage
                            16366         extern  FDisplayPrint1DigitHourTime, FDisplayPrintBitmapResource
                            16367         extern  FDisplayPrintCharUnicode, FDisplayPrintLongTime
                            16368         extern  FDisplayPrintNumber, FDisplayPrintStringAddress
                            16369         extern  FDisplayPrintStringAddressUnicode
                            16370         extern  FDisplayPrintStringResource
                            16371         extern  FDisplayPrintStringResourceUnicode, FDisplayPrintTime
                            16372         extern  FDisplaySetFont, FDisplayUpdateDisplay, FHALDisplayInit
                            16373         extern  FSALDisplayClearRange, FSALDisplayInit
                            16374         extern  FSALDisplayPrintBitmapAddress
                            16375 
                            16376         global  FDisplayModuleInit, FDisplayProcessQueue
                            16377         global  Fg_pDisplayModuleEntry
                            16378 
                            16379         local   L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
                            16380         local   L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27
                            16381         local   L41, L42, L43
                            16382 
                            16383         calls   "DisplayModuleInit", "DisplaySetFont", "HALDisplayInit"
                            16384         calls   "DisplayModuleInit", "SALDisplayInit"
                            16385         calls   "DisplayProcessQueue", "DisplayHandleMessage"
                            16386         calls   "DisplayProcessQueue", "DisplayPrint1DigitHourTime"
                            16387         calls   "DisplayProcessQueue", "DisplayPrintBitmapResource"
                            16388         calls   "DisplayProcessQueue", "DisplayPrintCharUnicode"
                            16389         calls   "DisplayProcessQueue", "DisplayPrintLongTime"
                            16390         calls   "DisplayProcessQueue", "DisplayPrintNumber"
                            16391         calls   "DisplayProcessQueue", "DisplayPrintStringAddress"
                            16392         calls   "DisplayProcessQueue", "DisplayPrintStringAddressUnicode"
                            16393         calls   "DisplayProcessQueue", "DisplayPrintStringResource"
                            16394         calls   "DisplayProcessQueue", "DisplayPrintStringResourceUnicode"
                            16395         calls   "DisplayProcessQueue", "DisplayPrintTime", "DisplaySetFont"
                            16396         calls   "DisplayProcessQueue", "DisplayUpdateDisplay", "GetMessage"
                            16397         calls   "DisplayProcessQueue", "SALDisplayClearRange"
                            16398         calls   "DisplayProcessQueue", "SALDisplayPrintBitmapAddress"
                            16399 
