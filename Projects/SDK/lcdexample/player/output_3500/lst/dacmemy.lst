TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\system\fgndmodules\dacmemy.asm
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; STMP DAC Driver Module YMEM
                                5 ;******************************************************************************
                                6         
                                7 ;*******************************************************************************
                                8 ;  Include files
                                9 ;*******************************************************************************
                               10                 include "hwequ.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ;  Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ;  File        : hwequ.inc
                                5 ;  Description : STMP Hardware Constants
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                8 ; ////////////////////////////////////////////////////////////////////////////////
                                9 ; hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                               10 ; local folder instead of ..\inc.  All register includes are converted to .h by 
                               11 ; registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                               12 ; ////////////////////////////////////////////////////////////////////////////////
                               15 HWEQU_INC equ 1
                               16 ;ASM Only
                               17         include "regscd.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;  File        : regscd.inc
                                4 ;;  Description : CD-DSP Interface Registers (CDI, CDSync, CD Reed-Solomon)
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               34 regscdinc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               41 ;/////////////////////////////////////////////////////////////////////////////////
                               42 ;// CD Sync Registers
                               43 ;/////////////////////////////////////////////////////////////////////////////////
                               44 HW_CDSYNC_BASEADDR      equ     ($F600)
                               46 ;ASM Only
                               48 HW_CDSYNCCSR            equ     (HW_CDSYNC_BASEADDR)
                               49 HW_CDSYNCDR             equ     (HW_CDSYNC_BASEADDR+1)
                               50 HW_CDSYNCWCR            equ     (HW_CDSYNC_BASEADDR+2)  
                               51 HW_CDSYNCCPR            equ     (HW_CDSYNC_BASEADDR+3)  
                               52 HW_CDSYNCMR             equ     (HW_CDSYNC_BASEADDR+4)
                               53 HW_CDSYNCBAR            equ     (HW_CDSYNC_BASEADDR+5)
                               55 ;endasm
                               57 ;/////////////////////////////////////////////////////////////////////////////////
                               58 ;  CD Sync Control Status Register (HW_CDSYNCCSR) Bit Definitions
                               60 HW_CDSYNCCSR_EN_BITPOS          equ     (0)
                               61 HW_CDSYNCCSR_CRC_BITPOS         equ     (1)
                               62 HW_CDSYNCCSR_DSCRAM_BITPOS          equ     (2)
                               63 HW_CDSYNCCSR_SYNCEN_BITPOS      equ     (3)
                               64 HW_CDSYNCCSR_DMAIRQEN_BITPOS    equ     (4)
                               65 HW_CDSYNCCSR_EDCIRQEN_BITPOS    equ     (5)
                               66 HW_CDSYNCCSR_LOSIRQEN_BITPOS    equ     (6)
                               67 HW_CDSYNCCSR_SYNCIRQEN_BITPOS   equ     (7)
                               68 HW_CDSYNCCSR_DMADONE_BITPOS     equ     (8)
                               69 HW_CDSYNCCSR_EDC_BITPOS         equ     (9)
                               70 HW_CDSYNCCSR_LOS_BITPOS         equ     (10)
                               71 HW_CDSYNCCSR_SYNC_BITPOS        equ     (11)
                               72 HW_CDSYNCCSR_DMAOF_BITPOS       equ         (12)
                               73 HW_CDSYNCCSR_MODE1_BITPOS       equ     (18)
                               74 HW_CDSYNCCSR_INPUTMSB_BITPOS    equ     (19)
                               75 HW_CDSYNCCSR_OUTWRDLEN_BITPOS   equ     (20)
                               76 HW_CDSYNCCSR_OUTWRDLEN0_BITPOS  equ     (20)
                               77 HW_CDSYNCCSR_OUTWRDLEN1_BITPOS  equ     (21)
                               78 HW_CDSYNCCSR_INWRDLEN_BITPOS    equ     (22)
                               79 HW_CDSYNCCSR_RESET_BITPOS       equ     (23)
                               81 HW_CDSYNCCSR_EN_SETMASK         equ     (1<<HW_CDSYNCCSR_EN_BITPOS)  
                               82 HW_CDSYNCCSR_CRC_SETMASK        equ     (1<<HW_CDSYNCCSR_CRC_BITPOS) 
                               83 HW_CDSYNCCSR_DSCRAM_SETMASK     equ     (1<<HW_CDSYNCCSR_DSCRAM_BITPOS)    
                               84 HW_CDSYNCCSR_SYNCEN_SETMASK     equ     (1<<HW_CDSYNCCSR_SYNCEN_BITPOS)  
                               85 HW_CDSYNCCSR_DMAIRQEN_SETMASK   equ     (1<<HW_CDSYNCCSR_DMAIRQEN_BITPOS)  
                               86 HW_CDSYNCCSR_EDCIRQEN_SETMASK   equ     (1<<HW_CDSYNCCSR_EDCIRQEN_BITPOS)  
                               87 HW_CDSYNCCSR_LOSIRQEN_SETMASK   equ     (1<<HW_CDSYNCCSR_LOSIRQEN_BITPOS)  
                               88 HW_CDSYNCCSR_SYNCIRQEN_SETMASK  equ     (1<<HW_CDSYNCCSR_SYNCIRQEN_BITPOS)  
                               89 HW_CDSYNCCSR_DMADONE_SETMASK    equ     (1<<HW_CDSYNCCSR_DMADONE_BITPOS)  
                               90 HW_CDSYNCCSR_EDC_SETMASK        equ     (1<<HW_CDSYNCCSR_EDC_BITPOS)  
                               91 HW_CDSYNCCSR_LOS_SETMASK        equ     (1<<HW_CDSYNCCSR_LOS_BITPOS)  
                               92 HW_CDSYNCCSR_SYNC_SETMASK       equ     (1<<HW_CDSYNCCSR_SYNC_BITPOS)  
                               93 HW_CDSYNCCSR_DMAOF_SETMASK      equ     (1<<HW_CDSYNCCSR_DMAOF_BITPOS)  
                               94 HW_CDSYNCCSR_MODE1_SETMASK      equ     (1<<HW_CDSYNCCSR_MODE1_BITPOS) 
                               95 HW_CDSYNCCSR_INPUTMSB_SETMASK   equ     (1<<HW_CDSYNCCSR_INPUTMSB_BITPOS)  
                               96 HW_CDSYNCCSR_OUTWRDLEN_SETMASK  equ     (3<<HW_CDSYNCCSR_OUTWRDLEN_BITPOS) 
                               97 HW_CDSYNCCSR_INWRDLEN_SETMASK   equ     (1<<HW_CDSYNCCSR_INWRDLEN_BITPOS)       
                               98 HW_CDSYNCCSR_RESET_SETMASK      equ     (1<<HW_CDSYNCCSR_RESET_BITPOS)  
                              100 HW_CDSYNCCSR_EN_CLRMASK         equ     (~HW_CDSYNCCSR_EN_SETMASK)
                              101 HW_CDSYNCCSR_CRC_CLRMASK        equ     (~HW_CDSYNCCSR_CRC_SETMASK)
                              102 HW_CDSYNCCSR_DSCRAM_CLRMASK     equ     (~HW_CDSYNCCSR_DSCRAM_SETMASK)
                              103 HW_CDSYNCCSR_SYNCEN_CLRMASK     equ     (~HW_CDSYNCCSR_SYNCEN_SETMASK)
                              104 HW_CDSYNCCSR_DMAIRQEN_CLRMASK   equ     (~HW_CDSYNCCSR_DMAIRQEN_SETMASK)
                              105 HW_CDSYNCCSR_EDCIRQEN_CLRMASK   equ     (~HW_CDSYNCCSR_EDCIRQEN_SETMASK)
                              106 HW_CDSYNCCSR_LOSIRQEN_CLRMASK   equ     (~HW_CDSYNCCSR_LOSIRQEN_SETMASK)
                              107 HW_CDSYNCCSR_SYNCIRQEN_CLRMASK  equ     (~HW_CDSYNCCSR_SYNCIRQEN_SETMASK)
                              108 HW_CDSYNCCSR_DMADONE_CLRMASK    equ     (~HW_CDSYNCCSR_DMADONE_SETMASK)
                              109 HW_CDSYNCCSR_EDC_CLRMASK        equ     (~HW_CDSYNCCSR_EDC_SETMASK)
                              110 HW_CDSYNCCSR_LOS_CLRMASK        equ     (~HW_CDSYNCCSR_LOS_SETMASK)
                              111 HW_CDSYNCCSR_SYNC_CLRMASK       equ     (~HW_CDSYNCCSR_SYNC_SETMASK)
                              112 HW_CDSYNCCSR_DMAOF_CLRMASK      equ     (~HW_CDSYNCCSR_DMAOF_SETMASK)
                              113 HW_CDSYNCCSR_MODE1_CLRMASK      equ     (~HW_CDSYNCCSR_MODE1_SETMASK)
                              114 HW_CDSYNCCSR_INPUTMSB_CLRMASK   equ     (~HW_CDSYNCCSR_INPUTMSB_SETMASK)
                              115 HW_CDSYNCCSR_OUTWRDLEN_CLRMASK  equ     (~HW_CDSYNCCSR_OUTWRDLEN_SETMASK)
                              116 HW_CDSYNCCSR_INWRDLEN_CLRMASK   equ     (~HW_CDSYNCCSR_INWRDLEN_SETMASK)
                              117 HW_CDSYNCCSR_RESET_CLRMASK      equ     (~HW_CDSYNCCSR_RESET_SETMASK)
                              120 ;C insert
                              121 ;typedef union               /* SPI Control/Status Register (SPCSR)  */
                              122 ;{
                              123 ;    struct {
                              124 ;       int             EN                      :1;     // CDSync Enable
                              125 ;               int     CRC                     :1;     // CRC checking Enable
                              126 ;               int             DSCRAM          :1;     // Enable Descrambling
                              127 ;               int     SYNCEN          :1;     // Enable Sync Detection
                              128 ;               int             DMAIRQEN        :1; // Enable IRQ on DMA complete
                              129 ;               int             EDCIRQEN        :1;     // Enable IRQ on EDC errors
                              130 ;               int             LOSIRQEN        :1;     // Enable IRQ on Loss of Sync
                              131 ;               int     SYNCIRQEN       :1;     // Enable IRQ on CD-ROM Frame Start
                              132 ;               int             DMADONE         :1;     // DMA is completed Status Bit
                              133 ;               int             EDC                     :1;     // EDC status bit
                              134 ;               int             LOS                     :1;     // Loss of Sync Indicator bit
                              135 ;               int     SYNC            :1;     // Sync Found Flag
                              136 ;               int             DMAOF           :1;     // Indicates a DMA Overflow Exists
                              137 ;               unsigned                        :5;     // Reserved
                              138 ;               int     MODE1           :1;     // Force Mode1 Sectors
                              139 ;               int             INPUTMSB        :1;     // Indicates which input MSB to use
                              140 ;               unsigned OUTWRLEN       :2;     // Number of bytes to write in each output word
                              141 ;               unsigned INWRDLEN       :1;     // Number of bytes in each input word (2 or 3)
                              142 ;               int             RESET           :1;     // Soft Reset and Low Power Enable
                              143 ;            } B;
                              144 ;    unsigned int I;
                              145 ;} cdsync_csr_type;
                              147 ;#define HW_CDSYNCCSR   (*(volatile cdsync_csr_type _X*) (HW_CDSYNC_BASEADDR))          /* CDSync Control/Status Register (SPCSR)  */
                              148 ;endc
                              152 ;///////////////////////////////////////////////////////
                              153 ;//  CDSync Input Word Register (CDSYNCDR) bit definitions
                              156 HW_CDSYNCDR_DATA_BITPOS     equ     (0)
                              157 HW_CDSYNCDR_DATA_SETMASK    equ         ($FFFFFF<<HW_CDSYNCDR_DATA_BITPOS)
                              158 HW_CDSYNCDR_DATA_CLRMASK    equ         (~HW_CDSYNCDR_DATA_SETMASK)  
                              160 ;C insert
                              162 ;typedef union     // CDSync Input Data Word Register
                              163 ;{
                              164 ;    struct { 
                              165 ;               unsigned DATA   :24;    // Data for Input 
                              166 ;               } B;
                              167 ;    unsigned int I;
                              168 ;} cdsync_datar_type;
                              170 ;#define HW_CDSYNCDR    (*(volatile cdsync_datar_type _X*) (HW_CDSYNC_BASEADDR+1))      
                              171 ;endc
                              173 ;///////////////////////////////////////////////////////
                              174 ;//  CDSync Word Count Register (CDSYNCWCR) bit definitions
                              176 HW_CDSYNCWCR_COUNT_BITPOS   equ         (0)
                              177 HW_CDSYNCWCR_COUNT_SETMASK  equ         ($1FFF<<HW_CDSYNCWCR_COUNT_BITPOS)
                              178 HW_CDSYNCWCR_COUNT_CLRMASK  equ         (~HW_CDSYNCWCR_COUNT_SETMASK)  
                              181 ;C insert
                              182 ;typedef union     // CDSync Word Count Register
                              183 ;{
                              184 ;    struct { 
                              185 ;               unsigned COUNT  :13;    // Word Count
                              186 ;               unsigned                :11;    // Reserved
                              187 ;               } B;
                              188 ;    unsigned int I;
                              189 ;} cdsync_wcr_type;
                              190 ;#define HW_CDSYNCWCR   (*(volatile cdsync_wcr_type _X*) (HW_CDSYNC_BASEADDR+2))        /* CDSync Word Count Register */
                              191 ;endc
                              194 ;///////////////////////////////////////////////////////
                              195 ;//  CDSync Current Position Register (CDSYNCCPR) bit definitions
                              197 HW_CDSYNCCPR_POS_BITPOS     equ         (0)
                              198 HW_CDSYNCCPR_POS_SETMASK        equ     ($FFF<<HW_CDSYNCCPR_POS_BITPOS)
                              199 HW_CDSYNCCPR_POS_CLRMASK    equ         (~HW_CDSYNCCPR_POS_SETMASK)
                              201 ;C insert
                              202 ;typedef union     // CDSync Current Position Register
                              203 ;{
                              204 ;    struct { 
                              205 ;               unsigned POS    :12;    // Current Position 
                              206 ;               unsigned                :12;    // Reserved
                              207 ;               } B;
                              208 ;    unsigned int I;
                              209 ;} cdsync_cpr_type;
                              210 ;#define HW_CDSYNCCPR   (*(volatile cdsync_cpr_type _X*) (HW_CDSYNC_BASEADDR+3))        /* CDSync Current Position Register */
                              211 ;endc
                              213 ;///////////////////////////////////////////////////////
                              214 ;//  CDSync Modulo Register (CDSYNCMODR) bit definitions
                              216 HW_CDSYNCMR_MOD_BITPOS      equ         (0)
                              217 HW_CDSYNCMR_MOD_SETMASK         equ     ($1FFF<<HW_CDSYNCMR_MOD_BITPOS)
                              218 HW_CDSYNCMR_MOD_CLRMASK     equ         (~HW_CDSYNCMR_MOD_SETMASK)
                              220 ;C insert
                              221 ;typedef union     // CDSync Modulo Register
                              222 ;{
                              223 ;    struct { 
                              224 ;               unsigned MOD    :13;    // Modulo
                              225 ;               unsigned                :11;    // Reserved
                              226 ;               } B;
                              227 ;    unsigned int I;
                              228 ;} cdsync_modr_type;
                              229 ;#define HW_CDSYNCMR    (*(volatile cdsync_modr_type _X*) (HW_CDSYNC_BASEADDR+4))   /* CDSync Modulo Register */
                              230 ;endc
                              232 ;///////////////////////////////////////////////////////
                              233 ;//  CDSync Base Address Register (CDSYNCBAR) bit definitions
                              235 HW_CDSYNCBAR_BASE_BITPOS    equ         (0)
                              236 HW_CDSYNCBAR_BASE_SETMASK   equ         ($FFFF<<HW_CDSYNCBAR_BASE_BITPOS)
                              237 HW_CDSYNCBAR_BASE_CLRMASK   equ         (~HW_CDSYNCBAR_BASE_SETMASK)
                              239 ;C insert
                              240 ;typedef union     // CDSync Base Address Register
                              241 ;{
                              242 ;    struct { 
                              243 ;               unsigned BASE   :16;    // Base Address
                              244 ;               unsigned                :8;             // Reserved
                              245 ;               } B;
                              246 ;    unsigned int I;
                              247 ;} cdsync_bar_type;
                              249 ;#define HW_CDSYNCBAR   (*(volatile cdsync_bar_type _X*) (HW_CDSYNC_BASEADDR+5))        /* CDSync Base Address Register */
                              250 ;endc
                              255 ;/////////////////////////////////////////////////////////////////////////////////
                              256 ;// Reed Solomon Registers
                              257 ;/////////////////////////////////////////////////////////////////////////////////
                              258 HW_RS_BASEADDR          equ     ($F700)
                              259 ;ASM only
                              260 HW_RSCSR                        equ     (HW_RS_BASEADDR)                        
                              261 HW_RSOFFSETR            equ     (HW_RS_BASEADDR+1)
                              262 HW_RSWRDCNTR            equ     (HW_RS_BASEADDR+2)
                              263 HW_RSCPR                        equ     (HW_RS_BASEADDR+3)
                              264 HW_RSMODR                       equ     (HW_RS_BASEADDR+4)
                              265 HW_RSBAR                        equ     (HW_RS_BASEADDR+5)
                              266 HW_RSPBAR                       equ     (HW_RS_BASEADDR+6)
                              267 HW_RSSPANR                      equ     (HW_RS_BASEADDR+7)
                              268 ;endasm
                              269 ;/////////////////////////////////////////////////////////////////////////////////
                              270 ;//  Reed Solomon Control Status Register (HW_RSCSR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              272 HW_RSCSR_KICK_BITPOS            equ     (0)
                              273 HW_RSCSR_AUTOCORCT_BITPOS   equ     (1)   
                              274 HW_RSCSR_EVENEN_BITPOS      equ     (2)
                              275 HW_RSCSR_ODDEN_BITPOS       equ     (3)
                              276 HW_RSCSR_DONEIRQEN_BITPOS   equ     (4)   
                              277 HW_RSCSR_CORCTIRQEN_BITPOS  equ     (5)    
                              278 HW_RSCSR_ERRIRQEN_BITPOS    equ     (6)  
                              279 HW_RSCSR_DONE_BITPOS            equ     (8)
                              280 HW_RSCSR_CORRECT_BITPOS     equ     (9) 
                              281 HW_RSCSR_ERR_BITPOS         equ     (10)
                              282 HW_RSCSR_EVENCORCT_BITPOS   equ     (12)   
                              283 HW_RSCSR_EVENERROR_BITPOS   equ     (13)   
                              284 HW_RSCSR_ODDCORCT_BITPOS    equ     (14)  
                              285 HW_RSCSR_ODDERROR_BITPOS    equ     (15)  
                              286 HW_RSCSR_DMAWAIT_BITPOS     equ         (16)
                              287 HW_RSCSR_RESET_BITPOS       equ         (23)
                              289 HW_RSCSR_KICK_LENGTH            equ     (1)
                              290 HW_RSCSR_AUTOCORCT_LENGTH   equ     (1)   
                              291 HW_RSCSR_EVENEN_LENGTH      equ     (1)
                              292 HW_RSCSR_ODDEN_LENGTH       equ     (1)
                              293 HW_RSCSR_DONEIRQEN_LENGTH   equ     (1)   
                              294 HW_RSCSR_CORCTIRQEN_LENGTH  equ     (1)    
                              295 HW_RSCSR_ERRIRQEN_LENGTH    equ     (1)  
                              296 HW_RSCSR_DONE_LENGTH            equ     (1)
                              297 HW_RSCSR_CORRECT_LENGTH     equ     (1) 
                              298 HW_RSCSR_ERR_LENGTH         equ     (1)
                              299 HW_RSCSR_EVENCORCT_LENGTH   equ     (1)    
                              300 HW_RSCSR_EVENERROR_LENGTH   equ     (1)    
                              301 HW_RSCSR_ODDCORCT_LENGTH    equ     (1)   
                              302 HW_RSCSR_ODDERROR_LENGTH    equ     (1)   
                              303 HW_RSCSR_DMAWAIT_LENGTH     equ         (4) 
                              304 HW_RSCSR_RESET_LENGTH       equ         (1) 
                              305                                             
                              306 HW_RSCSR_KICK_SETMASK           equ     (((1<<HW_RSCSR_KICK_LENGTH)-1)<<HW_RSCSR_KICK_BITPOS)
                              307 HW_RSCSR_AUTOCORCT_SETMASK  equ         (((1<<HW_RSCSR_AUTOCORCT_LENGTH)-1)<<HW_RSCSR_AUTOCORCT_BITPOS)
                              308 HW_RSCSR_EVENEN_SETMASK     equ         (((1<<HW_RSCSR_EVENEN_LENGTH)-1)<<HW_RSCSR_EVENEN_BITPOS)
                              309 HW_RSCSR_ODDEN_SETMASK      equ         (((1<<HW_RSCSR_ODDEN_LENGTH)-1)<<HW_RSCSR_ODDEN_BITPOS)
                              310 HW_RSCSR_DONEIRQEN_SETMASK  equ         (((1<<HW_RSCSR_DONEIRQEN_LENGTH)-1)<<HW_RSCSR_DONEIRQEN_BITPOS)
                              311 HW_RSCSR_CORCTIRQEN_SETMASK equ         (((1<<HW_RSCSR_CORCTIRQEN_LENGTH)-1)<<HW_RSCSR_CORCTIRQEN_BITPOS)
                              312 HW_RSCSR_ERRIRQEN_SETMASK   equ         (((1<<HW_RSCSR_ERRIRQEN_LENGTH)-1)<<HW_RSCSR_ERRIRQEN_BITPOS)
                              313 HW_RSCSR_DONE_SETMASK           equ     (((1<<HW_RSCSR_DONE_LENGTH)-1)<<HW_RSCSR_DONE_BITPOS)
                              314 HW_RSCSR_CORRECT_SETMASK    equ         (((1<<HW_RSCSR_CORRECT_LENGTH)-1)<<HW_RSCSR_CORRECT_BITPOS)
                              315 HW_RSCSR_ERR_SETMASK            equ     (((1<<HW_RSCSR_ERR_LENGTH)-1)<<HW_RSCSR_ERR_BITPOS)
                              316 HW_RSCSR_EVENCORCT_SETMASK  equ         (((1<<HW_RSCSR_EVENCORCT_LENGTH)-1)<<HW_RSCSR_EVENCORCT_BITPOS)
                              317 HW_RSCSR_EVENERROR_SETMASK  equ         (((1<<HW_RSCSR_EVENERROR_LENGTH)-1)<<HW_RSCSR_EVENERROR_BITPOS)
                              318 HW_RSCSR_ODDCORCT_SETMASK   equ         (((1<<HW_RSCSR_ODDCORCT_LENGTH)-1)<<HW_RSCSR_ODDCORCT_BITPOS)
                              319 HW_RSCSR_ODDERROR_SETMASK   equ         (((1<<HW_RSCSR_ODDERROR_LENGTH)-1)<<HW_RSCSR_ODDERROR_BITPOS)
                              320 HW_RSCSR_DMAWAIT_SETMASK    equ         (((1<<HW_RSCSR_DMAWAIT_LENGTH)-1)<<HW_RSCSR_DMAWAIT_BITPOS)
                              321 HW_RSCSR_RESET_SETMASK      equ         (((1<<HW_RSCSR_RESET_LENGTH)-1)<<HW_RSCSR_RESET_BITPOS)
                              324 HW_RSCSR_KICK_CLRMASK           equ     (~HW_RSCSR_KICK_SETMASK)
                              325 HW_RSCSR_AUTOCORCT_CLRMASK  equ     (~HW_RSCSR_AUTOCORCT_SETMASK)
                              326 HW_RSCSR_EVENEN_CLRMASK     equ     (~HW_RSCSR_EVENEN_SETMASK)
                              327 HW_RSCSR_ODDEN_CLRMASK      equ     (~HW_RSCSR_ODDEN_SETMASK)
                              328 HW_RSCSR_DONEIRQEN_CLRMASK  equ     (~HW_RSCSR_DONEIRQEN_SETMASK)
                              329 HW_RSCSR_CORCTIRQEN_CLRMASK equ     (~HW_RSCSR_CORCTIRQEN_SETMASK)
                              330 HW_RSCSR_ERRIRQEN_CLRMASK   equ     (~HW_RSCSR_ERRIRQEN_SETMASK)
                              331 HW_RSCSR_DONE_CLRMASK           equ     (~HW_RSCSR_DONE_SETMASK)
                              332 HW_RSCSR_CORRECT_CLRMASK    equ     (~HW_RSCSR_CORRECT_SETMASK)
                              333 HW_RSCSR_ERR_CLRMASK            equ     (~HW_RSCSR_ERR_SETMASK)
                              334 HW_RSCSR_EVENCORCT_CLRMASK  equ     (~HW_RSCSR_EVENCORCT_SETMASK)
                              335 HW_RSCSR_EVENERROR_CLRMASK  equ     (~HW_RSCSR_EVENERROR_SETMASK)
                              336 HW_RSCSR_ODDCORCT_CLRMASK   equ     (~HW_RSCSR_ODDCORCT_SETMASK)
                              337 HW_RSCSR_ODDERROR_CLRMASK   equ     (~HW_RSCSR_ODDERROR_SETMASK)
                              338 HW_RSCSR_DMAWAIT_CLRMASK    equ     (~HW_RSCSR_DMAWAIT_SETMASK)
                              339 HW_RSCSR_RESET_CLRMASK      equ     (~HW_RSCSR_RESET_SETMASK)
                              343 ;C insert
                              344 ;typedef union               
                              345 ;{
                              346 ;    struct {
                              347 ;       int             KICK            :1;     // Start processing
                              348 ;               int             AUTOCORCT       :1;     // Auto Correct errors
                              349 ;               int     EVENEN          :1;     // Enable calculation of even codewords
                              350 ;               int     ODDEN           :1;     // Enable calculation of odd codewords
                              351 ;               int     DONEIRQEN       :1;     // Enable Done IRQ
                              352 ;               int             CORCTIRQEN      :1;     // Enable IRQ on correctable errors
                              353 ;               int             ERRIRQEN        :1;     // Enable IRQ for non-correctable errors
                              354 ;               int                                     :1;     // Reserved
                              355 ;               int             DONE            :1;     // Done Flag
                              356 ;               int             CORRECT         :1;     // Corrected errors Flag
                              357 ;               int             ERR                     :1;     // Non-Corrected errors Flag
                              358 ;               int                                     :1;     // Reserved
                              359 ;               int             EVENCORCT       :1;     // Flag for Even error corrected
                              360 ;               int             EVENERROR       :1;     // Flag For Even error non-corrected
                              361 ;               int             ODDCORCT        :1;     // Flag for Odd error corrected
                              362 ;               int             ODDERROR        :1;     // Flag For Odd error non-corrected
                              363 ;               unsigned DMAWAIT        :4;     // Number of cycles to wait between DMA cycles
                              364 ;               int                                     :3;     // Reserved
                              365 ;               int     RESET           :1;     // Reset /  Power Down                  
                              366 ;    } B;
                              367 ;    unsigned int I;
                              368 ;} rs_csr_type;
                              369 ;#define HW_RSCSR               (*(volatile RS_csr_type _X*) (HW_RS_BASEADDR))                  /* RS Control/Status Register */
                              370 ;endc
                              375 ;/////////////////////////////////////////////////////////////////////////////////
                              376 ;//  Reed Solomon Error Offset Register (HW_RSOFFSETR) Bit Definitions
                              378 HW_RSOFFSETR_EVEN_BITPOS        equ     (0)
                              379 HW_RSOFFSETR_ODD_BITPOS         equ     (12)
                              381 HW_RSOFFSETR_EVEN_SETMASK       equ     ($FFF<<HW_RSOFFSETR_EVEN_BITPOS)
                              382 HW_RSOFFSETR_ODD_SETMASK        equ     ($FFF<<HW_RSOFFSETR_ODD_BITPOS)
                              384 HW_RSOFFSETR_EVEN_CLRMASK       equ     (~HW_RSOFFSETR_EVEN_SETMASK)
                              385 HW_RSOFFSETR_ODD_CLRMASK        equ     (~HW_RSOFFSETR_ODD_SETMASK)
                              387 ;C insert
                              388 ;typedef union{ 
                              389 ;    struct { 
                              390 ;               unsigned EVEN           :12;    // Location of even error
                              391 ;               unsigned ODD            :12;    // Location of odd error
                              392 ;               } B;
                              393 ;    unsigned int I;
                              394 ;} rs_offsetr_type;
                              395 ;#define HW_RSOFFSETR   (*(volatile RS_offsetr_type _X*) (HW_RS_BASEADDR+1))    /* RS Error Offset Register */
                              396 ;endc
                              400 ;/////////////////////////////////////////////////////////////////////////////////
                              401 ;//  Reed Solomon Word Count Register (HW_RSWRDCNTR) Bit Definitions
                              403 HW_RSWRDCNTR_WORDCNT_BITPOS         equ     (0)
                              404 HW_RSWRDCNTR_BLOCKCNT_BITPOS        equ     (12)
                              406 HW_RSWRDCNTR_WORDCNT_SETMASK            equ     ($FFF<<HW_RSWRDCNTR_WORDCNT_BITPOS)
                              407 HW_RSWRDCNTR_BLOCKCNT_SETMASK           equ     ($FFF<<HW_RSWRDCNTR_BLOCKCNT_BITPOS)
                              409 HW_RSWRDCNTR_WORDCNT_CLRMASK            equ     (~HW_RSWRDCNTR_WORDCNT_SETMASK)
                              410 HW_RSWRDCNTR_BLOCKCNT_CLRMASK           equ     (~HW_RSWRDCNTR_BLOCKCNT_SETMASK)
                              412 ;C insert
                              413 ;typedef union{ 
                              414 ;    struct { 
                              415 ;               unsigned WORDCNT        :12;    // Number of bytes per codeword
                              416 ;               unsigned BLOCKCNT       :12;    // Number of codewords to process
                              417 ;               } B;
                              418 ;   unsigned int I;
                              419 ;} rs_wrdcntr_type;
                              420 ;#define HW_RSWRDCNTR   (*(volatile RS_wrdcntr_type _X*) (HW_RS_BASEADDR+2))    /* RS Word Count Register */
                              421 ;endc
                              426 ;/////////////////////////////////////////////////////////////////////////////////
                              427 ;//  Reed Solomon Current Position Register (HW_RSCPR) Bit Definitions
                              429 HW_RSCPR_POS_BITPOS         equ     (0)
                              431 HW_RSCPR_POS_SETMASK        equ     ($FFFF<<HW_RSCPR_POS_BITPOS)
                              433 HW_RSCPR_POS_CLRMASK            equ     (~HW_RSCPR_POS_SETMASK)
                              435 ;C insert
                              436 ;typedef union{ 
                              437 ;    struct { 
                              438 ;               unsigned POS            :16;    // Current offset within the DMA buffer
                              439 ;               unsigned                        :8;             // Reserved
                              440 ;               } B;
                              441 ;    unsigned int I;
                              442 ;} rs_cpr_type;
                              443 ;#define HW_RSCPR               (*(volatile RS_cpr_type _X*) (HW_RS_BASEADDR+3))                /* RS Current Position Register */
                              444 ;endc
                              449 ;/////////////////////////////////////////////////////////////////////////////////
                              450 ;//  Reed Solomon Modulo Register (HW_RSMODR) Bit Definitions
                              452 HW_RSMODR_MOD_BITPOS        equ     (0)
                              454 HW_RSMODR_MOD_SETMASK           equ     ($FFFF<<HW_RSMODR_MOD_BITPOS)
                              456 HW_RSMODR_MOD_CLRMASK           equ     (~HW_RSMODR_MOD_SETMASK)
                              458 ;C insert
                              459 ;typedef union{ 
                              460 ;    struct { 
                              461 ;               unsigned MOD            :16;    // Modulo offset
                              462 ;               unsigned                        :8;             // Reserved
                              463 ;               } B;
                              464 ;    unsigned int I;
                              465 ;} rs_modr_type;
                              466 ;#define HW_RSMODR              (*(volatile RS_modr_type _X*) (HW_RS_BASEADDR+4))               /* RS Modulo Register */
                              467 ;endc
                              471 ;/////////////////////////////////////////////////////////////////////////////////
                              472 ;//  Reed Solomon Base Addr Register (HW_RSBAR) Bit Definitions
                              474 HW_RSBAR_ADDR_BITPOS        equ     (0)
                              476 HW_RSBAR_ADDR_SETMASK           equ     ($FFFF<<HW_RSBAR_ADDR_BITPOS)
                              478 HW_RSBAR_ADDR_CLRMASK           equ     (~HW_RSBAR_ADDR_SETMASK)
                              480 ;C insert
                              481 ;typedef union{ 
                              482 ;    struct { 
                              483 ;               unsigned ADDR           :16;    // Base Address of non-parity portion of codeword
                              484 ;               unsigned                        :8;             // Reserved
                              485 ;               } B;
                              486 ;    unsigned int I;
                              487 ;} rs_bar_type;
                              488 ;#define HW_RSBAR               (*(volatile RS_bar_type _X*) (HW_RS_BASEADDR+5))                /* RS Base Address Register */
                              489 ;endc
                              491 ;/////////////////////////////////////////////////////////////////////////////////
                              492 ;//  Reed Solomon Parity Base Addr Register (HW_RSPBAR) Bit Definitions
                              494 HW_RSPBAR_ADDR_BITPOS           equ     (0)
                              496 HW_RSPBAR_ADDR_SETMASK          equ     ($FFFF<<HW_RSPBAR_ADDR_BITPOS)
                              498 HW_RSPBAR_ADDR_CLRMASK          equ     (~HW_RSPBAR_ADDR_SETMASK)
                              500 ;C insert
                              501 ;typedef union{ 
                              502 ;    struct { 
                              503 ;               unsigned ADDR           :16;    // Parity offset
                              504 ;               unsigned                        :8;             // Reserved
                              505 ;               } B;
                              506 ;    unsigned int I;
                              507 ;} rs_pbar_type;
                              508 ;#define HW_RSPBAR              (*(volatile RS_pbar_type _X*) (HW_RS_BASEADDR+6))               /* RS Parity Base Address Register */
                              509 ;endc
                              512 ;/////////////////////////////////////////////////////////////////////////////////
                              513 ;//  Reed Solomon Span Register (HW_RSSPANR) Bit Definitions
                              515 HW_RSSPANR_WORDSPAN_BITPOS       equ     (0)
                              516 HW_RSSPANR_PARITYSPAN_BITPOS     equ     (8)
                              517 HW_RSSPANR_BLOCKSPAN_BITPOS      equ     (16)
                              519 HW_RSSPANR_WORDSPAN_SETMASK      equ     ($FF<<HW_RSSPANR_WORDSPAN_BITPOS)
                              520 HW_RSSPANR_PARITYSPAN_SETMASK    equ     ($FF<<HW_RSSPANR_PARITYSPAN_BITPOS)
                              521 HW_RSSPANR_BLOCKSPAN_SETMASK     equ     ($FF<<HW_RSSPANR_BLOCKSPAN_BITPOS)
                              523 HW_RSSPANR_WORDSPAN_CLRMASK      equ     (~HW_RSSPANR_WORDSPAN_SETMASK)
                              524 HW_RSSPANR_PARITYSPAN_CLRMASK    equ     (~HW_RSSPANR_PARITYSPAN_SETMASK)
                              525 HW_RSSPANR_BLOCKSPAN_CLRMASK     equ     (~HW_RSSPANR_BLOCKSPAN_SETMASK)
                              527 ;C insert
                              528 ;typedef union{ 
                              529 ;    struct { 
                              530 ;               unsigned WORDSPAN       :8;     // Word Address Increment
                              531 ;               unsigned PARITYSPAN     :8;     // Parity Address Increment
                              532 ;               unsigned BLOCKSPAN  :8; // Block Address Increment
                              533 ;               } B;
                              534 ;    unsigned int I;
                              535 ;} rs_spanr_type;
                              536 ;#define HW_RSSPANR             (*(volatile RS_spanr_type _X*) (HW_RS_BASEADDR+7))              /* RS Span Register */
                              537 ;endc
                              543 ;/////////////////////////////////////////////////////////////////////////////////
                              544 ;//  CD-DSP Interface (CDI) Registers
                              545 ;/////////////////////////////////////////////////////////////////////////////////
                              547 HW_CDI_BASEADDR         equ     $F280
                              549 ;ASM only
                              550 HW_CDICTRLCSR   equ     (HW_CDI_BASEADDR)
                              551 HW_CDICTRLTMRR  equ     (HW_CDI_BASEADDR+1)
                              552 HW_CDICTRLTBR   equ     (HW_CDI_BASEADDR+2)
                              553 HW_CDICTRLDATAR equ     (HW_CDI_BASEADDR+3)
                              554 HW_CDIPINCFGR   equ     (HW_CDI_BASEADDR+4)
                              555 HW_CDISI0CSR    equ     (HW_CDI_BASEADDR+8)
                              556 HW_CDISI0TMRR   equ     (HW_CDI_BASEADDR+9)
                              557 HW_CDISI0TBR    equ     (HW_CDI_BASEADDR+10)
                              558 HW_CDISI0DATAR  equ     (HW_CDI_BASEADDR+11)     
                              559 HW_CDISI1CSR    equ     (HW_CDI_BASEADDR+12)
                              560 HW_CDISI1TMRR   equ     (HW_CDI_BASEADDR+13)
                              561 HW_CDISI1TBR    equ     (HW_CDI_BASEADDR+14)
                              562 HW_CDISI1DATAR  equ     (HW_CDI_BASEADDR+15)
                              563 ;endasm
                              564 ;/////////////////////////////////////////////////////////////////////////////////
                              565 ;//  CD-DSP Interface Control Unit Control Status Register (HW_CDI_CTLCSR) Bit Definitions
                              567 HW_CDICTRLCSR_KICK_BITPOS       equ    (0)
                              568 HW_CDICTRLCSR_CLKPOL_BITPOS     equ    (1)
                              569 HW_CDICTRLCSR_CLKRZ_BITPOS      equ    (2)
                              570 HW_CDICTRLCSR_LSBFIRST_BITPOS   equ    (3)
                              571 HW_CDICTRLCSR_LENGTH_BITPOS     equ    (4)
                              572 HW_CDICTRLCSR_MSBJUSTIFY_BITPOS equ    (9)
                              573 HW_CDICTRLCSR_LATCHEN_BITPOS    equ    (10)
                              574 HW_CDICTRLCSR_LATCHPOL_BITPOS   equ    (11)
                              575 HW_CDICTRLCSR_RSVD_BITPOS       equ    (12)
                              576 HW_CDICTRLCSR_IRQEN_BITPOS      equ    (20)
                              577 HW_CDICTRLCSR_TFRDONE_BITPOS    equ    (21)
                              578 HW_CDICTRLCSR_RESET_BITPOS      equ    (23)
                              580 HW_CDICTRLCSR_KICK_SETMASK      equ     (1<<HW_CDICTRLCSR_KICK_BITPOS)
                              581 HW_CDICTRLCSR_CLKPOL_SETMASK    equ     (1<<HW_CDICTRLCSR_CLKPOL_BITPOS)
                              582 HW_CDICTRLCSR_CLKRZ_SETMASK     equ     (1<<HW_CDICTRLCSR_CLKRZ_BITPOS)
                              583 HW_CDICTRLCSR_LSBFIRST_SETMASK  equ     (1<<HW_CDICTRLCSR_LSBFIRST_BITPOS)
                              584 HW_CDICTRLCSR_LENGTH_SETMASK    equ     ($1F<<HW_CDICTRLCSR_LENGTH_BITPOS)
                              585 HW_CDICTRLCSR_MSBJUSTIFY_SETMASK equ    (1<<HW_CDICTRLCSR_MSBJUSTIFY_BITPOS)
                              586 HW_CDICTRLCSR_LATCHEN_SETMASK   equ     (1<<HW_CDICTRLCSR_LATCHEN_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              587 HW_CDICTRLCSR_LATCHPOL_SETMASK  equ     (1<<HW_CDICTRLCSR_LATCHPOL_BITPOS)
                              588 HW_CDICTRLCSR_IRQEN_SETMASK     equ     (1<<HW_CDICTRLCSR_IRQEN_BITPOS)
                              589 HW_CDICTRLCSR_TFRDONE_SETMASK   equ     (1<<HW_CDICTRLCSR_TFRDONE_BITPOS)
                              590 HW_CDICTRLCSR_RESET_SETMASK     equ     (1<<HW_CDICTRLCSR_RESET_BITPOS)
                              592 HW_CDICTRLCSR_KICK_CLRMASK              equ     (~HW_CDICTRLCSR_KICK_SETMASK)
                              593 HW_CDICTRLCSR_CLKPOL_CLRMASK            equ     (~HW_CDICTRLCSR_CLKPOL_SETMASK)
                              594 HW_CDICTRLCSR_CLKRZ_CLRMASK             equ     (~HW_CDICTRLCSR_CLKRZ_SETMASK)
                              595 HW_CDICTRLCSR_LSBFIRST_CLRMASK      equ     (~HW_CDICTRLCSR_LSBFIRST_SETMASK)
                              596 HW_CDICTRLCSR_LENGTH_CLRMASK            equ     (~HW_CDICTRLCSR_LENGTH_SETMASK)
                              597 HW_CDICTRLCSR_MSBJUSTIFY_CLRMASK    equ     (~HW_CDICTRLCSR_MSBJUSTIFY_SETMASK)
                              598 HW_CDICTRLCSR_LATCHEN_CLRMASK           equ     (~HW_CDICTRLCSR_LATCHEN_SETMASK)
                              599 HW_CDICTRLCSR_LATCHPOL_CLRMASK      equ     (~HW_CDICTRLCSR_LATCHPOL_SETMASK)
                              600 HW_CDICTRLCSR_IRQEN_CLRMASK             equ     (~HW_CDICTRLCSR_IRQEN_SETMASK)
                              601 HW_CDICTRLCSR_TFRDONE_CLRMASK           equ     (~HW_CDICTRLCSR_TFRDONE_SETMASK)
                              602 HW_CDICTRLCSR_RESET_CLRMASK             equ     (~HW_CDICTRLCSR_RESET_SETMASK)
                              605 ;C insert
                              606 ;typedef union               /* CD-DSP Interface  Control Unit Control/Status Register  */
                              607 ;{
                              608 ;    struct {
                              609 ;               int KICK                :1;     /* Start Transaction */
                              610 ;               int CLKPOL              :1;     /* Control Clock Polarity */
                              611 ;               int CLKRZ               :1; /* Control Clock RZ */
                              612 ;               int LSBFIRST    :1;     /* Send Data LSB First */
                              613 ;               unsigned LENGTH :5; /* Number of Bits to Transfer */
                              614 ;               int MSBJUSTIFY  :1;     /* Selects if valid data is Right or Left Justified */
                              615 ;               int LATCHEN             :1;     /* Enable Latch at end of transfer */
                              616 ;               int LATCHPOL    :1; /* Selects Latch Polarity */
                              617 ;               int                     :8;     /* Reserved */
                              618 ;               int IRQEN               :1;     /* Enable the Done IRQ */
                              619 ;               int TFRDONE             :1;     /* Transfer Complete Flag */
                              620 ;               int                             :1;     /* Reserved */
                              621 ;               int RESET               :1;     /* Reset and Low Power */
                              622 ;               } B;
                              623 ;    unsigned int I;
                              624 ;} cdi_ctrlcsr_type;
                              626 ;#define HW_CDICTRLCSR  (*(volatile cdi_ctrlcsr_type _X*) (HW_CDI_BASEADDR))            /* CDI Control Port Control/Status Register */
                              627 ;endc
                              629 ;/////////////////////////////////////////////////////////////////////////////////
                              630 ;//  CDI Time Base Register bitfields
                              632 ;// CDI Control Port Time Base Register Bit Defs
                              633 HW_CDICTRLTBR_DIVIDE_BITPOS     equ     (0)
                              635 HW_CDICTRLTBR_DIVIDE_SETMASK    equ     ($3FF<<HW_CDICTRLTBR_DIVIDE_BITPOS)
                              637 HW_CDICTRLTBR_DIVIDE_CLRMASK    equ     (~HW_CDICTRLTBR_DIVIDE_SETMASK)
                              640 ;// CDI Serial Input Unit 0 Time Base Register Bit Defs
                              641 HW_CDISI0TBR_DIVIDE_BITPOS       equ     (0)
                              643 HW_CDISI0TBR_DIVIDE_SETMASK      equ     ($3FF<<HW_CDISI0TBR_DIVIDE_BITPOS)
                              645 HW_CDISI0TBR_DIVIDE_CLRMASK      equ     (~HW_CDISI0TBR_DIVIDE_SETMASK)
                              647 ;// CDI Serial Input Unit 1 Time Base Register Bit Defs
                              648 HW_CDISI1TBR_DIVIDE_BITPOS       equ     (0)
                              650 HW_CDISI1TBR_DIVIDE_SETMASK      equ     ($3FF<<HW_CDISI1TBR_DIVIDE_BITPOS)
                              652 HW_CDISI1TBR_DIVIDE_CLRMASK      equ     (~HW_CDISI1TBR_DIVIDE_SETMASK)
                              654 ;C insert
                              655 ;typedef union
                              656 ;{
                              657 ;    struct { 
                              658 ;               unsigned DIVIDE :10;    // Clock Divide Value for generating the bit Clock
                              659 ;               int                             :14;    // Reserved
                              660 ;               } B;
                              661 ;    unsigned int I;
                              662 ;} cdi_tbr_type;
                              664 ;#define HW_CDICTRLTBR  (*(volatile cdi_tbr_type _X*) (HW_CDI_BASEADDR+2))              /* CDI Control Port Time Base Register  */
                              665 ;#define HW_CDISI0TBR   (*(volatile cdi_tbr_type _X*) (HW_CDI_BASEADDR+10))             /* CDI Serial Input Unit 0 Time Base Register  */
                              666 ;#define HW_CDISI1TBR   (*(volatile cdi_tbr_type _X*) (HW_CDI_BASEADDR+14))             /* CDI Serial Input Unit 1 Time Base Register  */
                              669 ;endc
                              672 ;/////////////////////////////////////////////////////////////////////////////////
                              673 ;//  CDI Control Port Timer Register
                              676 HW_CDICTRLTMRR_LATCHSTART_BITPOS    equ     (0)
                              677 HW_CDICTRLTMRR_LATCHWIDTH_BITPOS    equ     (8)
                              678 HW_CDICTRLTMRR_FINALDELAY_BITPOS    equ     (16)
                              680 HW_CDICTRLTMRR_LATCHSTART_SETMASK   equ     ($FF<<HW_CDICTRLTMRR_LATCHSTART_BITPOS)
                              681 HW_CDICTRLTMRR_LATCHWIDTH_SETMASK   equ     ($FF<<HW_CDICTRLTMRR_LATCHWIDTH_BITPOS)
                              682 HW_CDICTRLTMRR_FINALDELAY_SETMASK   equ     ($FF<<HW_CDICTRLTMRR_FINALDELAY_BITPOS)
                              684 HW_CDICTRLTMRR_LATCHSTART_CLRMASK       equ     (~HW_CDICTRLTMRR_LATCHSTART_SETMASK)
                              685 HW_CDICTRLTMRR_LATCHWIDTH_CLRMASK       equ     (~HW_CDICTRLTMRR_LATCHWIDTH_SETMASK)
                              686 HW_CDICTRLTMRR_FINALDELAY_CLRMASK       equ     (~HW_CDICTRLTMRR_FINALDELAY_SETMASK)
                              688 ;C insert
                              689 ;typedef union      
                              690 ;{
                              691 ;    struct { 
                              692 ;               unsigned LATCHSTART     :8;     // Clock Divide Value for generating the bit Clock
                              693 ;               unsigned LATCHWIDTH     :8;     // Number of bit Clocks to hold the latch asserted
                              694 ;               unsigned FINALDELAY :8; // Number of bit clocks to wait before generating a done IRQ
                              695 ;               } B;
                              696 ;    unsigned int I;
                              697 ;} cdi_ctrltmrr_type;
                              698 ;#define HW_CDICTRLTMRR         (*(volatile cdi_ctrltmrr_type _X*) (HW_CDI_BASEADDR+1)) /* CDI Control Port Timer Register */
                              699 ;endc
                              702 ;/////////////////////////////////////////////////////////////////////////////////
                              703 ;//// Bit Defs for CDI Serial Input Units 0 and 1
                              705 HW_CDISI0TMRR_LATCHSTART_BITPOS         equ     (0)
                              706 HW_CDISI0TMRR_FINALDELAY_BITPOS         equ     (16)
                              708 HW_CDISI0TMRR_LATCHSTART_SETMASK        equ     ($FF<<HW_CDISI0TMRR_LATCHSTART_BITPOS)
                              709 HW_CDISI0TMRR_FINALDELAY_SETMASK        equ     ($FF<<HW_CDISI0TMRR_FINALDELAY_BITPOS)
                              711 HW_CDISI0TMRR_LATCHSTART_CLRMASK        equ     (~HW_CDISI0TMRR_LATCHSTART_SETMASK)
                              712 HW_CDISI0TMRR_FINALDELAY_CLRMASK        equ     (~HW_CDISI0TMRR_FINALDELAY_SETMASK)
                              715 HW_CDISI1TMRR_LATCHSTART_BITPOS         equ     (0)
                              716 HW_CDISI1TMRR_FINALDELAY_BITPOS         equ     (16)
                              718 HW_CDISI1TMRR_LATCHSTART_SETMASK        equ     ($FF<<HW_CDISI1TMRR_LATCHSTART_BITPOS)
                              719 HW_CDISI1TMRR_FINALDELAY_SETMASK        equ     ($FF<<HW_CDISI1TMRR_FINALDELAY_BITPOS)
                              721 HW_CDISI1TMRR_LATCHSTART_CLRMASK        equ     (~HW_CDISI1TMRR_LATCHSTART_SETMASK)
                              722 HW_CDISI1TMRR_FINALDELAY_CLRMASK        equ     (~HW_CDISI1TMRR_FINALDELAY_SETMASK)
                              724 ;C insert
                              725 ;typedef union     // CDI Serial Input Unit Timer Register
                              726 ;{
                              727 ;    struct { 
                              728 ;               unsigned LATCHSTART     :8;     // Clock Divide Value for generating the bit Clock
                              729 ;               unsigned                        :8;     // Reserved
                              730 ;               unsigned FINALDELAY :8; // Number of bit clocks to wait before generating a done IRQ
                              731 ;               } B;
                              732 ;    unsigned int I;
                              733 ;} cdi_sitmrr_type;
                              735 ;#define HW_CDISI0TMRR  (*(volatile cdi_sitmrr_type _X*) (HW_CDI_BASEADDR+9))   /* CDI Serial Input Unit 0 Timer Register */
                              736 ;#define HW_CDISI1TMRR  (*(volatile cdi_sitmrr_type _X*) (HW_CDI_BASEADDR+13))  /* CDI Serial Input Unit 1 Timer Register */
                              737 ;endc
                              740 ;/////////////////////////////////////////////////////////////////////////////////
                              741 ;//  CDI Data Registers (Control, Serial in 0,1)
                              744 HW_CDICTRLDATAR_DATA_BITPOS             equ     (0)
                              746 HW_CDICTRLDATAR_DATA_SETMASK                equ     ($FFFFFF<<HW_CDICTRLDATAR_DATA_BITPOS)
                              748 HW_CDICTRLDATAR_DATA_CLRMASK                equ     (~HW_CDICTRLDATAR_DATA_SETMASK)
                              751 ;// Bit Defs for CDI Serial Input Unit 0
                              752 HW_CDISI0DATAR_DATA_BITPOS              equ     (0)
                              754 HW_CDISI0DATAR_DATA_SETMASK                 equ     ($FFFFFF<<HW_CDISI0DATAR_DATA_BITPOS)
                              756 HW_CDISI0DATAR_DATA_CLRMASK                 equ     (~HW_CDISI0DATAR_DATA_SETMASK)
                              759 ;// Bit Defs for CDI Serial Input Unit 1
                              760 HW_CDISI1DATAR_DATA_BITPOS              equ     (0)
                              762 HW_CDISI1DATAR_DATA_SETMASK                 equ     ($FFFFFF<<HW_CDISI1DATAR_DATA_BITPOS)
                              764 HW_CDISI1DATAR_DATA_CLRMASK                 equ     (~HW_CDISI1DATAR_DATA_SETMASK)
                              766 ;C insert
                              767 ;typedef union     
                              768 ;{
                              769 ;    struct { 
                              770 ;               unsigned DATA   :24;    // Data for Input or Output
                              771 ;               } B;
                              772 ;    unsigned int I;
                              773 ;} cdi_datar_type;
                              775 ;#define HW_CDICTRLDATAR (*(volatile cdi_datar_type _X*) (HW_CDI_BASEADDR+3))   /* CDI Control Unit Data Register  */
                              776 ;#define HW_CDISI0DATAR         (*(volatile cdi_datar_type _X*) (HW_CDI_BASEADDR+11))   /* CDI Serial Input Unit 0 Data Register */              
                              777 ;#define HW_CDISI1DATAR         (*(volatile cdi_datar_type _X*) (HW_CDI_BASEADDR+15))   /* CDI Serial Input Unit 1 Data Register */
                              779 ;endc
                              782 ;/////////////////////////////////////////////////////////////////////////////////
                              783 ;// CDI Pin Configuration Register Bit defs
                              785 HW_CDIPINCFGR_ENABLE_BITPOS                 equ     (0)
                              786 HW_CDIPINCFGR_CTL_BITPOS            equ     (1)
                              787 HW_CDIPINCFGR_SCLK_BITPOS           equ     (2)
                              788 HW_CDIPINCFGR_CTLSO_BITPOS          equ     (4)
                              789 HW_CDIPINCFGR_SYNCA_BITPOS          equ     (5)
                              790 HW_CDIPINCFGR_SENSE_BITPOS          equ     (6)
                              791 HW_CDIPINCFGR_CTRLSCLK_BITPOS       equ     (7)
                              792 HW_CDIPINCFGR_CCLK_BITPOS           equ     (8)
                              793 HW_CDIPINCFGR_CTLOUTEN_BITPOS       equ     (10)
                              794 HW_CDIPINCFGR_SCLKOUTEN_BITPOS      equ     (11)
                              796 HW_CDIPINCFGR_ENABLE_SETMASK        equ     (1<<HW_CDIPINCFGR_ENABLE_BITPOS)
                              797 HW_CDIPINCFGR_CTL_SETMASK           equ     (1<<HW_CDIPINCFGR_CTL_BITPOS)
                              798 HW_CDIPINCFGR_SCLK_SETMASK          equ     (3<<HW_CDIPINCFGR_SCLK_BITPOS)
                              799 HW_CDIPINCFGR_CTLSO_SETMASK         equ     (1<<HW_CDIPINCFGR_CTLSO_BITPOS)
                              800 HW_CDIPINCFGR_SYNCA_SETMASK         equ     (1<<HW_CDIPINCFGR_SYNCA_BITPOS)
                              801 HW_CDIPINCFGR_SENSE_SETMASK         equ     (1<<HW_CDIPINCFGR_SENSE_BITPOS)
                              802 HW_CDIPINCFGR_CTRLSCLK_SETMASK      equ     (1<<HW_CDIPINCFGR_CTRLSCLK_BITPOS)
                              803 HW_CDIPINCFGR_CCLK_SETMASK          equ     (3<<HW_CDIPINCFGR_CCLK_BITPOS)
                              804 HW_CDIPINCFGR_CTLOUTEN_SETMASK      equ     (1<<HW_CDIPINCFGR_CTLOUTEN_BITPOS)
                              805 HW_CDIPINCFGR_SCLKOUTEN_SETMASK     equ     (1<<HW_CDIPINCFGR_SCLKOUTEN_BITPOS)
                              807 HW_CDIPINCFGR_ENABLE_CLRMASK    equ     (~HW_CDIPINCFGR_ENABLE_SETMASK)
                              808 HW_CDIPINCFGR_CTL_CLRMASK       equ     (~HW_CDIPINCFGR_CTL_SETMASK)
                              809 HW_CDIPINCFGR_SCLK_CLRMASK      equ     (~HW_CDIPINCFGR_SCLK_SETMASK)
                              810 HW_CDIPINCFGR_CTLSO_CLRMASK     equ     (~HW_CDIPINCFGR_CTLSO_SETMASK)
                              811 HW_CDIPINCFGR_SYNCA_CLRMASK     equ     (~HW_CDIPINCFGR_SYNCA_SETMASK)
                              812 HW_CDIPINCFGR_SENSE_CLRMASK     equ     (~HW_CDIPINCFGR_SENSE_SETMASK)
                              813 HW_CDIPINCFGR_CTRLSCLK_CLRMASK  equ     (~HW_CDIPINCFGR_CTRLSCLK_SETMASK)
                              814 HW_CDIPINCFGR_CCLK_CLRMASK      equ     (~HW_CDIPINCFGR_CCLK_SETMASK)
                              815 HW_CDIPINCFGR_CTLOUTEN_CLRMASK  equ     (~HW_CDIPINCFGR_CTLOUTEN_SETMASK)
                              816 HW_CDIPINCFGR_SCLKOUTEN_CLRMASK equ     (~HW_CDIPINCFGR_SCLKOUTEN_SETMASK)
                              818 ;C insert
                              819 ;typedef union     // CDI Pin Configuration Register
                              820 ;{
                              821 ;    struct { 
                              822 ;               int ENABLE              :1;     // CDI Pin Enable
                              823 ;               int     CTL                     :1;     // CDI Control Unit Pin Select
                              824 ;               unsigned SCLK   :2;     // Pin select for CTL_SCLK
                              825 ;               int CTLSO               :1;     // CTL SO Pin Select
                              826 ;               int SYNCA               :1;     // SI SYNCa pin select
                              827 ;               int SENSE               :1;     // CTRL SENSE Pin select
                              828 ;               int CTRLSCLK    :1;     // CTRL SCLK source select
                              829 ;               unsigned CCLK   :2;     // Control Clock Select
                              830 ;               int CTLOUTEN    :1;     // Enable output drivers on Control
                              831 ;               int SCLKOUTEN   :1;     // Enable output drivers on SCLK
                              832 ;               int                             :12; // Reserved           
                              833 ;               } B;
                              834 ;    unsigned int I;
                              835 ;} cdi_pincfgr_type;
                              837 ;#define HW_CDIPINCFGR  (*(volatile cdi_pincfgr_type _X*) (HW_CDI_BASEADDR+4))  /* CDI Pin Configuration Register  */
                              838 ;endc
                              840 ;/////////////////////////////////////////////////////////////////////////////////
                              841 ;//  CD-DSP Interface Serial Input Unit Control Status Register (HW_CDI_SIxCSR) Bit Definitions
                              843 ;// Serial Input Unit 0 CSR Bit Defs
                              844 HW_CDISI0CSR_KICK_BITPOS                    equ     (0)
                              845 HW_CDISI0CSR_CLKPOL_BITPOS                  equ     (1)
                              846 HW_CDISI0CSR_CLKRZ_BITPOS                   equ     (2)
                              847 HW_CDISI0CSR_LSBFIRST_BITPOS        equ     (3)
                              848 HW_CDISI0CSR_LENGTH_BITPOS                  equ     (4)
                              849 HW_CDISI0CSR_MSBJUSTIFY_BITPOS      equ     (9)
                              850 HW_CDISI0CSR_SCLKRZ_BITPOS                  equ     (10)
                              851 HW_CDISI0CSR_SYNCEN_BITPOS                  equ     (11)
                              852 HW_CDISI0CSR_SYNCPOL_BITPOS                 equ     (12)
                              853 HW_CDISI0CSR_CRCEN_BITPOS                   equ     (13)
                              854 HW_CDISI0CSR_CRCPOL_BITPOS                  equ     (14)
                              855 HW_CDISI0CSR_CLKSEL_BITPOS                  equ     (15)
                              856 HW_CDISI0CSR_DATASEL_BITPOS                 equ     (16)
                              857 HW_CDISI0CSR_SYNCSEL_BITPOS                 equ     (17)
                              858 HW_CDISI0CSR_IRQEN_BITPOS                   equ     (20)
                              859 HW_CDISI0CSR_DONE_BITPOS                    equ     (21)
                              860 HW_CDISI0CSR_RESET_BITPOS                   equ     (23)
                              862 HW_CDISI0CSR_KICK_SETMASK                   equ     (1<<HW_CDISI0CSR_KICK_BITPOS)
                              863 HW_CDISI0CSR_CLKPOL_SETMASK         equ     (1<<HW_CDISI0CSR_CLKPOL_BITPOS)
                              864 HW_CDISI0CSR_CLKRZ_SETMASK          equ     (1<<HW_CDISI0CSR_CLKRZ_BITPOS)
                              865 HW_CDISI0CSR_LSBFIRST_SETMASK               equ     (1<<HW_CDISI0CSR_LSBFIRST_BITPOS)
                              866 HW_CDISI0CSR_LENGTH_SETMASK         equ     ($1F<<HW_CDISI0CSR_LENGTH_BITPOS)
                              867 HW_CDISI0CSR_MSBJUSTIFY_SETMASK      equ     (1<<HW_CDISI0CSR_MSBJUSTIFY_BITPOS)
                              868 HW_CDISI0CSR_SCLKRZ_SETMASK         equ     (1<<HW_CDISI0CSR_SCLKRZ_BITPOS)
                              869 HW_CDISI0CSR_SYNCEN_SETMASK         equ     (1<<HW_CDISI0CSR_SYNCEN_BITPOS)
                              870 HW_CDISI0CSR_SYNCPOL_SETMASK        equ     (1<<HW_CDISI0CSR_SYNCPOL_BITPOS)
                              871 HW_CDISI0CSR_CRCEN_SETMASK          equ     (1<<HW_CDISI0CSR_CRCEN_BITPOS)
                              872 HW_CDISI0CSR_CRCPOL_SETMASK         equ     (1<<HW_CDISI0CSR_CRCPOL_BITPOS)
                              873 HW_CDISI0CSR_CLKSEL_SETMASK         equ     (1<<HW_CDISI0CSR_CLKSEL_BITPOS)
                              874 HW_CDISI0CSR_DATASEL_SETMASK        equ     (1<<HW_CDISI0CSR_DATASEL_BITPOS)
                              875 HW_CDISI0CSR_SYNCSEL_SETMASK        equ     (3<<HW_CDISI0CSR_SYNCSEL_BITPOS)
                              876 HW_CDISI0CSR_IRQEN_SETMASK          equ     (1<<HW_CDISI0CSR_IRQEN_BITPOS)
                              877 HW_CDISI0CSR_DONE_SETMASK                   equ     (1<<HW_CDISI0CSR_DONE_BITPOS)
                              878 HW_CDISI0CSR_RESET_SETMASK          equ     (1<<HW_CDISI0CSR_RESET_BITPOS)                                                                              
                              879 HW_CDISI0CSR_KICK_CLRMASK               equ     (~HW_CDISI0CSR_KICK_SETMASK)
                              880 HW_CDISI0CSR_CLKPOL_CLRMASK     equ     (~HW_CDISI0CSR_CLKPOL_SETMASK)
                              881 HW_CDISI0CSR_CLKRZ_CLRMASK      equ     (~HW_CDISI0CSR_CLKRZ_SETMASK)
                              882 HW_CDISI0CSR_LSBFIRST_CLRMASK           equ     (~HW_CDISI0CSR_LSBFIRST_SETMASK)
                              883 HW_CDISI0CSR_LENGTH_CLRMASK     equ     (~HW_CDISI0CSR_LENGTH_SETMASK)
                              884 HW_CDISI0CSR_MSBJUSTIFY_CLRMASK  equ     (~HW_CDISI0CSR_MSBJUSTIFY_SETMASK)
                              885 HW_CDISI0CSR_SCLKRZ_CLRMASK     equ     (~HW_CDISI0CSR_SCLKRZ_SETMASK)
                              886 HW_CDISI0CSR_SYNCEN_CLRMASK     equ     (~HW_CDISI0CSR_SYNCEN_SETMASK)
                              887 HW_CDISI0CSR_SYNCPOL_CLRMASK    equ     (~HW_CDISI0CSR_SYNCPOL_SETMASK)
                              888 HW_CDISI0CSR_CRCEN_CLRMASK      equ     (~HW_CDISI0CSR_CRCEN_SETMASK)
                              889 HW_CDISI0CSR_CRCPOL_CLRMASK     equ     (~HW_CDISI0CSR_CRCPOL_SETMASK)
                              890 HW_CDISI0CSR_CLKSEL_CLRMASK     equ     (~HW_CDISI0CSR_CLKSEL_SETMASK)
                              891 HW_CDISI0CSR_DATASEL_CLRMASK    equ     (~HW_CDISI0CSR_DATASEL_SETMASK)
                              892 HW_CDISI0CSR_SYNCSEL_CLRMASK    equ     (~HW_CDISI0CSR_SYNCSEL_SETMASK)
                              893 HW_CDISI0CSR_IRQEN_CLRMASK      equ     (~HW_CDISI0CSR_IRQEN_SETMASK)
                              894 HW_CDISI0CSR_DONE_CLRMASK               equ     (~HW_CDISI0CSR_DONE_SETMASK)
                              895 HW_CDISI0CSR_RESET_CLRMASK      equ     (~HW_CDISI0CSR_RESET_SETMASK)
                              897 ;// Serial Input Unit 1 CSR Bit Defs
                              898 HW_CDISI1CSR_KICK_BITPOS                equ     (0)
                              899 HW_CDISI1CSR_CLKPOL_BITPOS              equ     (1)
                              900 HW_CDISI1CSR_CLKRZ_BITPOS               equ     (2)
                              901 HW_CDISI1CSR_LSBFIRST_BITPOS    equ     (3)
                              902 HW_CDISI1CSR_LENGTH_BITPOS              equ     (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              903 HW_CDISI1CSR_MSBJUSTIFY_BITPOS  equ     (9)
                              904 HW_CDISI1CSR_SCLKRZ_BITPOS              equ     (10)
                              905 HW_CDISI1CSR_SYNCEN_BITPOS              equ     (11)
                              906 HW_CDISI1CSR_SYNCPOL_BITPOS             equ     (12)
                              907 HW_CDISI1CSR_CRCEN_BITPOS               equ     (13)
                              908 HW_CDISI1CSR_CRCPOL_BITPOS              equ     (14)
                              909 HW_CDISI1CSR_CLKSEL_BITPOS              equ     (15)
                              910 HW_CDISI1CSR_DATASEL_BITPOS             equ     (16)
                              911 HW_CDISI1CSR_SYNCSEL_BITPOS             equ     (17)
                              912 HW_CDISI1CSR_IRQEN_BITPOS               equ     (20)
                              913 HW_CDISI1CSR_DONE_BITPOS                equ     (21)
                              914 HW_CDISI1CSR_RESET_BITPOS               equ     (23)
                              916 HW_CDISI1CSR_KICK_SETMASK       equ     (1<<HW_CDISI1CSR_KICK_BITPOS)
                              917 HW_CDISI1CSR_CLKPOL_SETMASK     equ     (1<<HW_CDISI1CSR_CLKPOL_BITPOS)
                              918 HW_CDISI1CSR_CLKRZ_SETMASK      equ     (1<<HW_CDISI1CSR_CLKRZ_BITPOS)
                              919 HW_CDISI1CSR_LSBFIRST_SETMASK   equ     (1<<HW_CDISI1CSR_LSBFIRST_BITPOS)
                              920 HW_CDISI1CSR_LENGTH_SETMASK     equ     ($1F<<HW_CDISI1CSR_LENGTH_BITPOS)
                              921 HW_CDISI1CSR_MSBJUSTIFY_SETMASK equ     (1<<HW_CDISI1CSR_MSBJUSTIFY_BITPOS)
                              922 HW_CDISI1CSR_SCLKRZ_SETMASK     equ     (1<<HW_CDISI1CSR_SCLKRZ_BITPOS)
                              923 HW_CDISI1CSR_SYNCEN_SETMASK     equ     (1<<HW_CDISI1CSR_SYNCEN_BITPOS)
                              924 HW_CDISI1CSR_SYNCPOL_SETMASK    equ     (1<<HW_CDISI1CSR_SYNCPOL_BITPOS)
                              925 HW_CDISI1CSR_CRCEN_SETMASK      equ     (1<<HW_CDISI1CSR_CRCEN_BITPOS)
                              926 HW_CDISI1CSR_CRCPOL_SETMASK     equ     (1<<HW_CDISI1CSR_CRCPOL_BITPOS)
                              927 HW_CDISI1CSR_CLKSEL_SETMASK     equ     (1<<HW_CDISI1CSR_CLKSEL_BITPOS)
                              928 HW_CDISI1CSR_DATASEL_SETMASK    equ     (1<<HW_CDISI1CSR_DATASEL_BITPOS)
                              929 HW_CDISI1CSR_SYNCSEL_SETMASK    equ     (3<<HW_CDISI1CSR_SYNCSEL_BITPOS)
                              930 HW_CDISI1CSR_IRQEN_SETMASK      equ     (1<<HW_CDISI1CSR_IRQEN_BITPOS)
                              931 HW_CDISI1CSR_DONE_SETMASK       equ     (1<<HW_CDISI1CSR_DONE_BITPOS)
                              932 HW_CDISI1CSR_RESET_SETMASK      equ     (1<<HW_CDISI1CSR_RESET_BITPOS)
                              934 HW_CDISI1CSR_KICK_CLRMASK       equ     (~HW_CDISI1CSR_KICK_SETMASK)
                              935 HW_CDISI1CSR_CLKPOL_CLRMASK     equ     (~HW_CDISI1CSR_CLKPOL_SETMASK)
                              936 HW_CDISI1CSR_CLKRZ_CLRMASK      equ     (~HW_CDISI1CSR_CLKRZ_SETMASK)
                              937 HW_CDISI1CSR_LSBFIRST_CLRMASK   equ     (~HW_CDISI1CSR_LSBFIRST_SETMASK)
                              938 HW_CDISI1CSR_LENGTH_CLRMASK     equ     (~HW_CDISI1CSR_LENGTH_SETMASK)
                              939 HW_CDISI1CSR_MSBJUSTIFY_CLRMASK equ     (~HW_CDISI1CSR_MSBJUSTIFY_SETMASK)
                              940 HW_CDISI1CSR_SCLKRZ_CLRMASK     equ     (~HW_CDISI1CSR_SCLKRZ_SETMASK)
                              941 HW_CDISI1CSR_SYNCEN_CLRMASK     equ     (~HW_CDISI1CSR_SYNCEN_SETMASK)
                              942 HW_CDISI1CSR_SYNCPOL_CLRMASK    equ     (~HW_CDISI1CSR_SYNCPOL_SETMASK)
                              943 HW_CDISI1CSR_CRCEN_CLRMASK      equ     (~HW_CDISI1CSR_CRCEN_SETMASK)
                              944 HW_CDISI1CSR_CRCPOL_CLRMASK     equ     (~HW_CDISI1CSR_CRCPOL_SETMASK)
                              945 HW_CDISI1CSR_CLKSEL_CLRMASK     equ     (~HW_CDISI1CSR_CLKSEL_SETMASK)
                              946 HW_CDISI1CSR_DATASEL_CLRMASK    equ     (~HW_CDISI1CSR_DATASEL_SETMASK)
                              947 HW_CDISI1CSR_SYNCSEL_CLRMASK    equ     (~HW_CDISI1CSR_SYNCSEL_SETMASK)
                              948 HW_CDISI1CSR_IRQEN_CLRMASK      equ     (~HW_CDISI1CSR_IRQEN_SETMASK)
                              949 HW_CDISI1CSR_DONE_CLRMASK       equ     (~HW_CDISI1CSR_DONE_SETMASK)
                              950 HW_CDISI1CSR_RESET_CLRMASK      equ     (~HW_CDISI1CSR_RESET_SETMASK)
                              952 ;C insert
                              953 ;typedef union       
                              954 ;{
                              955 ;    struct {
                              956 ;               int KICK                :1;     /* Start Transaction */
                              957 ;               int CLKPOL              :1;     /* Clock Polarity */
                              958 ;               int CLKRZ               :1; /* Clock Return to Zero select */
                              959 ;               int LSBFIRST    :1;     /* Send Data LSB First */
                              960 ;               unsigned LENGTH :5; /* Nubber of Bits to Transfer */
                              961 ;               int MSBJUSTIFY  :1;     /* Selects if valid data is Right or Left Justified */
                              962 ;               int SCLKRZ              :1;     /* SClock Return to Zero select */
                              963 ;               int SYNCEN              :1; /* Sync Enable */
                              964 ;               int SYNCPOL             :1;     /* Sync Polarity */
                              965 ;               int CRCEN               :1;     /* Enable the CRC */
                              966 ;               int CRCPOL              :1;     /* CRC Polarity */
                              967 ;               int CLKSEL              :1;     /* Clock Select */
                              968 ;               int DATASEL             :1;     /* Data input selector */
                              969 ;               unsigned SYNCSEL :2;/* Sync Signal Selector */
                              970 ;               int                             :1;     /* Reserved */
                              971 ;               int IRQEN               :1;     /* Interrupt Enable */
                              972 ;               int DONE                :1; /* Transfer Done Flag */
                              973 ;               int                             :1;     /* Reserved */
                              974 ;               int RESET               :1;     /* Reset and Low Power */
                              975 ;               } B;
                              976 ;    unsigned int I;
                              977 ;} cdi_sicsr_type;
                              979 ;#define HW_CDISI0CSR   (*(volatile cdi_sicsr_type _X*) (HW_CDI_BASEADDR+8))    /* CDI Serial Input Unit 0 Control/Status Register  */
                              980 ;#define HW_CDISI1CSR   (*(volatile cdi_sicsr_type _X*) (HW_CDI_BASEADDR+12))   /* CDI Serial Input Unit 1 Control/Status Register  */
                              981 ;endc
                               18         include "regsclkctrl.inc"
                                2 __REGS_CLK_CONTROL_INC equ 1
                                4 ;ASM Only
                                5 HW_CCR                                  equ     $FA00      ; Clock control register
                                6 HW_RCR                                  equ     $FA01      ; Reset control register
                                7 HW_DCLKCNTL                             equ     $FFEA      ; DCLK counter LOW
                                8 HW_DCLKCNTU                             equ     $FFEB      ; DCLK counter HIGH
                                9 ;endasm
                               11 ;///////////////////////////////////////////////////////////////////////////////
                               12 ;  Clock Control Register (HW_CCR) Bit Positions
                               13 HW_CCR_CKRST_BITPOS                     equ     0
                               14 HW_CCR_LTC_BITPOS                       equ     1
                               15 HW_CCR_PLLEN_BITPOS                     equ     2
                               16 HW_CCR_XTLEN_BITPOS                     equ     3
                               17 HW_CCR_PLL_SOURCE_SEL_BITPOS            equ     4
                               18 HW_CCR_ADIV_B0_BITPOS                   equ     5
                               19 HW_CCR_ADIV_B1_BITPOS                   equ     6
                               20 HW_CCR_ADIV_B2_BITPOS                   equ     7
                               21 HW_CCR_CKSRC_BITPOS                     equ     8
                               22 HW_CCR_DDIV_BITPOS                      equ     9
                               23 HW_CCR_DDIV_B0_BITPOS                   equ     9
                               24 HW_CCR_DDIV_B1_BITPOS                   equ     10
                               25 HW_CCR_DDIV_B2_BITPOS                   equ     11
                               26 HW_CCR_PDIV_BITPOS                      equ     12
                               27 HW_CCR_PDIV_B0_BITPOS                   equ     12
                               28 HW_CCR_PDIV_B1_BITPOS                   equ     13
                               29 HW_CCR_PDIV_B2_BITPOS                   equ     14
                               30 HW_CCR_PDIV_B3_BITPOS                   equ     15
                               31 HW_CCR_PDIV_B4_BITPOS                   equ     16
                               32 HW_CCR_PWDN_BITPOS                      equ     17
                               33 HW_CCR_ACKEN_BITPOS                     equ     18
                               34 HW_CCR_LOCK_BITPOS                      equ     19
                               35 HW_CCR_DACDIV_BITPOS                    equ     20
                               36 HW_CCR_ADIV1_B0_BITPOS                  equ     20
                               37 HW_CCR_ADIV1_B1_BITPOS                  equ     21
                               38 HW_CCR_ADIV1_B2_BITPOS                  equ     22
                               39 HW_CCR_DDIV_MSB_BITPOS                  equ     23
                               41 HW_CCR_CKRST_SETMASK                    equ     1<<HW_CCR_CKRST_BITPOS
                               42 HW_CCR_LTC_SETMASK                      equ     1<<HW_CCR_LTC_BITPOS
                               43 HW_CCR_PLLEN_SETMASK                    equ     1<<HW_CCR_PLLEN_BITPOS
                               44 HW_CCR_XTLEN_SETMASK                    equ     1<<HW_CCR_XTLEN_BITPOS
                               45 HW_CCR_ADCDIV_SETMASK                   equ     $7<<HW_CCR_ADIV_B0_BITPOS
                               46 HW_CCR_CKSRC_SETMASK                    equ     1<<HW_CCR_CKSRC_BITPOS
                               47 HW_CCR_DDIV_SETMASK                     equ     $7<<HW_CCR_DDIV_BITPOS
                               48 HW_CCR_PDIV_SETMASK                     equ     $1F<<HW_CCR_PDIV_BITPOS
                               49 HW_CCR_PWDN_SETMASK                     equ     1<<HW_CCR_PWDN_BITPOS
                               50 HW_CCR_ACKEN_SETMASK                    equ     1<<HW_CCR_ACKEN_BITPOS
                               51 HW_CCR_LOCK_SETMASK                     equ     1<<HW_CCR_LOCK_BITPOS
                               52 HW_CCR_DACDIV_SETMASK                   equ     $7<<HW_CCR_DACDIV_BITPOS
                               54 HW_CCR_CKRST_CLRMASK                    equ     ~HW_CCR_CKRST_SETMASK
                               55 HW_CCR_LTC_CLRMASK                      equ     ~HW_CCR_LTC_SETMASK
                               56 HW_CCR_PLLEN_CLRMASK                    equ     ~HW_CCR_PLLEN_SETMASK
                               57 HW_CCR_XTLEN_CLRMASK                    equ     ~HW_CCR_XTLEN_SETMASK
                               58 HW_CCR_ADCDIV_CLRMASK                   equ     ~HW_CCR_ADCDIV_SETMASK
                               59 HW_CCR_CKSRC_CLRMASK                    equ     ~HW_CCR_CKSRC_SETMASK
                               60 HW_CCR_DDIV_CLRMASK                     equ     ~HW_CCR_DDIV_SETMASK
                               61 HW_CCR_PDIV_CLRMASK                     equ     ~HW_CCR_PDIV_SETMASK
                               62 HW_CCR_PWDN_CLRMASK                     equ     ~HW_CCR_PWDN_SETMASK
                               63 HW_CCR_ACKEN_CLRMASK                    equ     ~HW_CCR_ACKEN_SETMASK
                               64 HW_CCR_LOCK_CLRMASK                     equ     ~HW_CCR_LOCK_SETMASK
                               65 HW_CCR_DACDIV_CLRMASK                   equ     ~HW_CCR_DACDIV_SETMASK
                               67 ;C insert
                               68 ;typedef union               
                               69 ;{
                               70 ;    struct
                               71 ;    {
                               72 ;        int CKRST       :1; // Clock Reset
                               73 ;        int LTC         :1;
                               74 ;        int PLLEN       :1;
                               75 ;        int XTLEN       :1;
                               76 ;        int FLB         :1;
                               77 ;        unsigned ADIV   :3;
                               78 ;        int CKSRC       :1;
                               79 ;        unsigned DDIV   :3;
                               80 ;        unsigned PDIV   :5;
                               81 ;        int PWDN        :1;
                               82 ;        int ACKEN       :1;
                               83 ;        int LOCK        :1;
                               84 ;        unsigned ADIV1  :3;
                               85 ;        unsigned DDIV_MSB:1;
                               86 ;    } B;
                               87 ;
                               88 ;    int I;
                               89 ;    unsigned int U;
                               90 ;
                               91 ;} ccr_type;
                               92 ;#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                               93 ;endc
                               95 ;///////////////////////////////////////////////////////////////////////////////
                               96 ;  Reset Control Register (HW_RCR) Bit Positions
                               97 HW_RCR_STKLVL_BITPOS                    equ     0
                               98 HW_RCR_SRST_BITPOS                      equ     4
                               99 HW_RCR_IRQA_BITPOS                      equ     8
                              100 HW_RCR_IRQB_BITPOS                      equ     9
                              101 HW_RCR_NMI_BITPOS                       equ     10
                              102 HW_RCR_SUNFLLVL_BITPOS                  equ     11
                              103 HW_RCR_SUNFLEN_BITPOS                   equ     15
                              104 HW_RCR_SOVFLLVL_BITPOS                  equ     16
                              105 HW_RCR_SOVFLEN_BITPOS                   equ     20
                              106 HW_RCR_IRQB2NMI_BITPOS                  equ     21
                              107 HW_RCR_SUNFL_BITPOS                     equ     22
                              108 HW_RCR_SOVFL_BITPOS                     equ     23
                              110 HW_RCR_STKLVL_WIDTH                     equ     (4)
                              111 HW_RCR_SRST_WIDTH                       equ     (4)
                              112 HW_RCR_IRQA_WIDTH                       equ     (1)
                              113 HW_RCR_IRQB_WIDTH                       equ     (1)
                              114 HW_RCR_NMI_WIDTH                        equ     (1)
                              115 HW_RCR_SUNFLLVL_WIDTH                   equ     (4)
                              116 HW_RCR_SUNFLEN_WIDTH                    equ     (1)
                              117 HW_RCR_SOVFLLVL_WIDTH                   equ     (4)
                              118 HW_RCR_SOVFLEN_WIDTH                    equ     (1)
                              119 HW_RCR_IRQB2NMI_WIDTH                   equ     (1)
                              120 HW_RCR_SUNFL_WIDTH                      equ     (1)
                              121 HW_RCR_SOVFL_WIDTH                      equ     (1)
                              123 HW_RCR_STKLVL_SETMASK                   equ     (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              124 HW_RCR_SRST_SETMASK                     equ     (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              125 HW_RCR_IRQA_SETMASK                     equ     (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              126 HW_RCR_IRQB_SETMASK                     equ     (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              127 HW_RCR_NMI_SETMASK                      equ     (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              128 HW_RCR_SUNFLLVL_SETMASK                 equ     (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              129 HW_RCR_SUNFLEN_SETMASK                  equ     (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              130 HW_RCR_SOVFLLVL_SETMASK                 equ     (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              131 HW_RCR_SOVFLEN_SETMASK                  equ     (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              132 HW_RCR_IRQB2NMI_SETMASK                 equ     (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              133 HW_RCR_SUNFL_SETMASK                    equ     (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              134 HW_RCR_SOVFL_SETMASK                    equ     (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              136 HW_RCR_STKLVL_CLRMASK                   equ     ~HW_RCR_STKLVL_SETMASK
                              137 HW_RCR_SRST_CLRMASK                     equ     ~HW_RCR_SRST_SETMASK
                              138 HW_RCR_IRQA_CLRMASK                     equ     ~HW_RCR_IRQA_SETMASK
                              139 HW_RCR_IRQB_CLRMASK                     equ     ~HW_RCR_IRQB_SETMASK
                              140 HW_RCR_NMI_CLRMASK                      equ     ~HW_RCR_NMI_SETMASK
                              141 HW_RCR_SUNFLLVL_CLRMASK                 equ     ~HW_RCR_SUNFLLVL_SETMASK
                              142 HW_RCR_SUNFLEN_CLRMASK                  equ     ~HW_RCR_SUNFLEN_SETMASK
                              143 HW_RCR_SOVFLLVL_CLRMASK                 equ     ~HW_RCR_SOVFLLVL_SETMASK
                              144 HW_RCR_SOVFLEN_CLRMASK                   equ    ~HW_RCR_SOVFLEN_SETMASK
                              145 HW_RCR_IRQB2NMI_CLRMASK                 equ     ~HW_RCR_IRQB2NMI_SETMASK
                              146 HW_RCR_SUNFL_CLRMASK                    equ     ~HW_RCR_SUNFL_SETMASK
                              147 HW_RCR_SOVFL_CLRMASK                    equ     ~HW_RCR_SOVFL_SETMASK
                              149 ;C insert
                              150 ;typedef union               
                              151 ;{
                              152 ;    struct
                              153 ;   {
                              154 ;        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              155 ;        int SRST     : HW_RCR_SRST_WIDTH;
                              156 ;        int IRQA     : HW_RCR_IRQA_WIDTH;
                              157 ;        int IRQB     : HW_RCR_IRQB_WIDTH;
                              158 ;        int NMI      : HW_RCR_NMI_WIDTH;
                              159 ;        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              160 ;        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              161 ;        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              162 ;        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              163 ;        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              164 ;        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              165 ;        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              166 ;    } B;
                              167 ;
                              168 ;    int I;
                              169 ;    unsigned int U;
                              170 ;
                              171 ;} rcr_type;
                              172 ;#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              173 ;endc
                              176 ;///////////////////////////////////////////////////////////////////////////////
                              177 ;  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              178 HW_DCLKCNTL_LOW_BITPOS                    equ     0
                              180 HW_DCLKCNTL_LOW_WIDTH                     equ     (24)        
                              182 HW_DCLKCNTL_LOW_SETMASK              equ     (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              183 HW_DCLKCNTL_LOW_CLRMASK              equ     ~HW_DCLKCNTL_LOW_SETMASK
                              184 ;C insert
                              185 ;typedef union               
                              186 ;{
                              187 ;    struct
                              188 ;   {
                              189 ;        int LOW;
                              190 ;    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              191 ;
                              192 ;    int I;
                              193 ;    unsigned int U;
                              194 ;
                              195 ;} dclkcntl_type;
                              196 ;#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              197 ;endc
                              199 ;///////////////////////////////////////////////////////////////////////////////
                              200 ;  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              201 HW_DCLKCNTU_HIGH_BITPOS                    equ     0
                              203 HW_DCLKCNTU_HIGH_WIDTH                     equ     (24)        
                              205 HW_DCLKCNTU_HIGH_SETMASK              equ     (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                              206 HW_DCLKCNTU_HIGH_CLRMASK              equ     ~HW_DCLKCNTU_HIGH_SETMASK
                              207 ;C insert
                              208 ;typedef union               
                              209 ;{
                              210 ;    struct
                              211 ;   {
                              212 ;        int HIGH;
                              213 ;    } B;
                              214 ;
                              215 ;    int I;
                              216 ;    unsigned int U;
                              217 ;
                              218 ;} dclkcntu_type;
                              219 ;#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              220 ;endc
                              222  ;*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              223  ;
                              224  ; The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              225  ; to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              227 HW_CLK_CNT_L                            equ     $00FFEA         ; Clock count register (lower)
                              228 HW_CLK_CNT_U                            equ     $00FFEB         ; Clock count register (upper)
                              229 HW_CYC_STEAL                            equ     $00FFEC         ; Cycle steal count register
                              232     
                               19         include "regscodec.inc"
                                2 regscodecinc            equ         1
                                4  
                                6 ;C insert
                                8 ;#include "types.h"
                               10 ;endc
                               12  
                               14 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               16 ;   SYSTEM STMP Registers 
                               17 ;       Last Edited 7.17.2003 M. Henson
                               18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               20 HW_CODEC_BASEADDR             equ     ($FA00)
                               22  
                               24 ;ASM Only
                               26 HW_MIXTBR                     equ     (HW_CODEC_BASEADDR+3)     ; Codec/Mixer test bit register
                               27 HW_MIXMASTERVR                equ     (HW_CODEC_BASEADDR+4)     ; Mixer master volume register
                               28 HW_MIXMICINVR                 equ     (HW_CODEC_BASEADDR+5)     ; Mixer mic-in volume register
                               29 HW_MIXLINE1INVR               equ     (HW_CODEC_BASEADDR+6)     ; Mixer line-in volume register
                               30 HW_MIXLINE2INVR               equ     (HW_CODEC_BASEADDR+7)     ; Mixer fm-in volume register
                               31 HW_MIXDACINVR                 equ     (HW_CODEC_BASEADDR+8)     ; Mixer DAC volume register
                               32 HW_MIXRECSELR                 equ     (HW_CODEC_BASEADDR+9)     ; Mixer ADC select register
                               33 HW_MIXADCGAINR                equ     (HW_CODEC_BASEADDR+10)    ; Mixer ADC gain register
                               34 HW_MIXPWRDNR                  equ     (HW_CODEC_BASEADDR+11)    ; Mixer power down register
                               35 HW_HPCTRL                     equ     (HW_CODEC_BASEADDR+21)
                               36 HW_REF_CTRL                   equ     (HW_CODEC_BASEADDR+25)    ; Reference Control Register
                               37 HW_PERSIST_CFG                equ     (HW_CODEC_BASEADDR+27)
                               38 HW_MIX_TEST                   equ     (HW_CODEC_BASEADDR+28)
                               39 ;endasm
                               41  
                               43 ;///////////////////////////////////////////////////////////////////////////////
                               44 ;   Headphone Control Register (HW_HPCTRL) Bit Definitions
                               45 HW_HPCTRL_TESTIALL_BITPOS           equ     0
                               46 HW_HPCTRL_TESTI1_BITPOS             equ     2
                               47 HW_HPCTRL_POP0_BITPOS               equ     4
                               48 HW_HPCTRL_POP1_BITPOS               equ     5
                               49 HW_HPCTRL_POP2_BITPOS               equ     6
                               50 HW_HPCTRL_RSVD0_BITPOS                  equ         7
                               51 HW_HPCTRL_HPPWD_BITPOS              equ     8
                               52 HW_HPCTRL_HPCLASSAB_BITPOS          equ     9
                               53 HW_HPCTRL_CAPLESS_BITPOS            equ     10
                               54 HW_HPCTRL_RSRVD1_BITPOS             equ     11
                               55 HW_HPCTRL_SHORTMODE_LR_BITPOS       equ     12
                               56 HW_HPCTRL_SHORTMODE_CM_BITPOS       equ     14
                               57 HW_HPCTRL_SHORT_LVLADJ_BITPOS       equ     16
                               58 HW_HPCTRL_RSRVD2_BITPOS                 equ         19
                               59 HW_HPCTRL_CHOP_CLK_BITPOS               equ         20
                               60 HW_HPCTRL_SHORT_LR_BITPOS               equ         22
                               61 HW_HPCTRL_SHORT_CM_BITPOS               equ         23
                               63 HW_HPCTRL_TESTIALL_WIDTH            equ     2
                               64 HW_HPCTRL_TESTI1_WIDTH              equ     2
                               65 HW_HPCTRL_POP0_WIDTH                equ     1
                               66 HW_HPCTRL_POP1_WIDTH                equ     1
                               67 HW_HPCTRL_POP2_WIDTH                equ     1
                               68 HW_HPCTRL_RSVD0_WIDTH                   equ         1
                               69 HW_HPCTRL_HPPWD_WIDTH               equ     1
                               70 HW_HPCTRL_HPCLASSAB_WIDTH           equ     1
                               71 HW_HPCTRL_CAPLESS_WIDTH             equ     1
                               72 HW_HPCTRL_RSRVD1_WIDTH              equ     1
                               73 HW_HPCTRL_SHORTMODE_LR_WIDTH        equ     2
                               74 HW_HPCTRL_SHORTMODE_CM_WIDTH        equ     2
                               75 HW_HPCTRL_SHORT_LVLADJ_WIDTH        equ     3
                               76 HW_HPCTRL_RSRVD2_WIDTH              equ     1
                               77 HW_HPCTRL_CHOP_CLK_WIDTH            equ     2
                               78 HW_HPCTRL_SHORT_LR_WIDTH            equ     1
                               79 HW_HPCTRL_SHORT_CM_WIDTH            equ     1
                               81 HW_HPCTRL_POP_SETMASK              equ     $7<<HW_HPCTRL_POP0_BITPOS
                               82 HW_HPCTRL_POP_CLRMASK                      equ     ~HW_HPCTRL_POP_SETMASK
                               84 HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK      equ   $3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               85 HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK      equ   $2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               86 HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK      equ   $1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               87 HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK      equ   $0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               88 HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK      equ   $4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               89 HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK      equ   $5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               90 HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK      equ   $6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               91 HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK      equ   $7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                               96 HP_SHORT_TRIP_POINT   equ       HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                               99 ;
                              100 ;C insert
                              101 ;// Headphone control register
                              102 ;#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                              103 ;/////////////////////////////////////////////////////////////////////////////////
                              104 ;//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                              105 ;typedef union               
                              106 ;{
                              107 ;    struct {
                              108 ;        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                              109 ;        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                              110 ;        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                              111 ;        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                              112 ;        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                              113 ;        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                              114 ;        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                              115 ;        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                              116 ;        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                              117 ;        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                              118 ;        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                              119 ;        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                              120 ;        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                              121 ;        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                              122 ;        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                              123 ;        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                              124 ;        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                              125 ;    } B;
                              126 ;    int I;
                              127 ;    unsigned int U;
                              128 ;} hpctrl_type;
                              129 ;// Headphone control short mode 2 bit values for above short bitfield.
                              130 ;#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                              131 ;#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1        
                              132 ;#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                              133 ;#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                              134 ;endc
                              136  
                              137 ;///////////////////////////////////////////////////////////////////////////////
                              138 ;///////////////////////////////////////////////////////////////////////////////
                              139 ;///////////////////////////////////////////////////////////////////////////////
                              140 ;///////////////////////////////////////////////////////////////////////////////
                              141 ;/////   MIXER REGISTERS ///////////////////////////////////////////////////////
                              142 ;///////////////////////////////////////////////////////////////////////////////
                              143 ;///////////////////////////////////////////////////////////////////////////////
                              144 ;///////////////////////////////////////////////////////////////////////////////
                              147 ;///////////////////////////////////////////////////////////////////////////////
                              148 ;   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                              149 HW_MIXTBR_INV_USB_CLK_BITPOS           equ     0
                              150 HW_MIXTBR_USB_DFF_BYPASS_BITPOS        equ     1
                              151 HW_MIXTBR_HOLD_GND_BITPOS              equ     2
                              152 HW_MIXTBR_ACKI_BITPOS                  equ     3
                              153 HW_MIXTBR_ASD2X_BITPOS                 equ     4
                              154 HW_MIXTBR_PCPCU_BITPOS                 equ     5
                              155 HW_MIXTBR_PCPCD_BITPOS                 equ     6
                              156 HW_MIXTBR_DCKI_BITPOS                  equ     7
                              157 HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS      equ     8
                              158 HW_MIXTBR_PSRN_BITPOS                  equ     9
                              159 HW_MIXTBR_FX2_BITPOS                   equ     10
                              160 HW_MIXTBR_VCOS_BITPOS                  equ     11
                              161 HW_MIXTBR_XBCO_BITPOS                  equ     12
                              162 HW_MIXTBR_XBGC_BITPOS                  equ     13
                              163 HW_MIXTBR_ADTHD_BITPOS                 equ     14
                              164 HW_MIXTBR_MICBIAS_LSBITPOS             equ     15
                              165 HW_MIXTBR_PWDADC_BITPOS                equ     16
                              166 HW_MIXTBR_MICBIAS1_BITPOS              equ     17
                              167 HW_MIXTBR_EZD_BITPOS                   equ     18
                              168 HW_MIXTBR_DZCDA_BITPOS                 equ     19
                              169 HW_MIXTBR_DZCFM_BITPOS                 equ     20
                              170 HW_MIXTBR_DZCLI_BITPOS                 equ     21
                              171 HW_MIXTBR_DZCMI_BITPOS                 equ     22
                              172 HW_MIXTBR_DZCMA_BITPOS                 equ     23
                              174 HW_MIXTBR_INV_USB_CLK_WIDTH           equ     (1)
                              175 HW_MIXTBR_USB_DFF_BYPASS_WIDTH        equ     (1)
                              176 HW_MIXTBR_HOLD_GND_WIDTH              equ     (1)
                              177 HW_MIXTBR_ACKI_WIDTH                  equ     (1)
                              178 HW_MIXTBR_ASD2X_WIDTH                 equ     (1)
                              179 HW_MIXTBR_PCPCU_WIDTH                 equ     (1)
                              180 HW_MIXTBR_PCPCD_WIDTH                 equ     (1)
                              181 HW_MIXTBR_DCKI_WIDTH                  equ     (1)
                              182 HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH      equ     (1)
                              183 HW_MIXTBR_PSRN_WIDTH                  equ     (1)
                              184 HW_MIXTBR_FX2_WIDTH                   equ     (1)
                              185 HW_MIXTBR_VCOS_WIDTH                  equ     (1)
                              186 HW_MIXTBR_XBCO_WIDTH                  equ     (1)
                              187 HW_MIXTBR_XBGC_WIDTH                  equ     (1)
                              188 HW_MIXTBR_ADTHD_WIDTH                 equ     (1)
                              189 HW_MIXTBR_MICBIAS_LSWIDTH             equ     (1)
                              190 HW_MIXTBR_PWDADC_WIDTH                equ     (1)
                              191 HW_MIXTBR_MICBIAS1_WIDTH              equ     (1)
                              192 HW_MIXTBR_EZD_WIDTH                   equ     (1)
                              193 HW_MIXTBR_DZCDA_WIDTH                 equ     (1)
                              194 HW_MIXTBR_DZCFM_WIDTH                 equ     (1)
                              195 HW_MIXTBR_DZCLI_WIDTH                 equ     (1)
                              196 HW_MIXTBR_DZCMI_WIDTH                 equ     (1)
                              197 HW_MIXTBR_DZCMA_WIDTH                 equ     (1)
                              200 HW_MIXTBR_INV_USB_CLK_SETMASK           equ     1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                              201 HW_MIXTBR_USB_DFF_BYPASS_SETMASK        equ     1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                              202 HW_MIXTBR_HOLD_GND_SETMASK              equ     1<<HW_MIXTBR_HOLD_GND_BITPOS
                              203 HW_MIXTBR_ACKI_SETMASK                  equ     1<<HW_MIXTBR_ACKI_BITPOS
                              204 HW_MIXTBR_ASD2X_SETMASK                 equ     1<<HW_MIXTBR_ASD2X_BITPOS
                              205 HW_MIXTBR_PCPCU_SETMASK                 equ     1<<HW_MIXTBR_PCPCU_BITPOS
                              206 HW_MIXTBR_PCPCD_SETMASK                 equ     1<<HW_MIXTBR_PCPCD_BITPOS
                              207 HW_MIXTBR_DCKI_SETMASK                  equ     1<<HW_MIXTBR_DCKI_BITPOS
                              208 HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK      equ     1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                              209 HW_MIXTBR_PSRN_SETMASK                  equ     1<<HW_MIXTBR_PSRN_BITPOS
                              210 HW_MIXTBR_FX2_SETMASK                   equ     1<<HW_MIXTBR_FX2_BITPOS
                              211 HW_MIXTBR_VCOS_SETMASK                  equ     1<<HW_MIXTBR_VCOS_BITPOS
                              212 HW_MIXTBR_XBCO_SETMASK                  equ     1<<HW_MIXTBR_XBCO_BITPOS
                              213 HW_MIXTBR_XBGC_SETMASK                  equ     1<<HW_MIXTBR_XBGC_BITPOS
                              214 HW_MIXTBR_ADTHD_SETMASK                 equ     1<<HW_MIXTBR_ADTHD_BITPOS
                              215 HW_MIXTBR_MICBIAS_LSSETMASK             equ     1<<HW_MIXTBR_MICBIAS_LSBITPOS
                              216 HW_MIXTBR_PWDADC_SETMASK                equ     1<<HW_MIXTBR_PWDADC_BITPOS
                              217 HW_MIXTBR_MICBIAS1_SETMASK              equ     1<<HW_MIXTBR_MICBIAS1_BITPOS
                              218 HW_MIXTBR_EZD_SETMASK                   equ     1<<HW_MIXTBR_EZD_BITPOS
                              219 HW_MIXTBR_DZCDA_SETMASK                 equ     1<<HW_MIXTBR_DZCDA_BITPOS
                              220 HW_MIXTBR_DZCFM_SETMASK                 equ     1<<HW_MIXTBR_DZCFM_BITPOS
                              221 HW_MIXTBR_DZCLI_SETMASK                 equ     1<<HW_MIXTBR_DZCLI_BITPOS
                              222 HW_MIXTBR_DZCMI_SETMASK                 equ     1<<HW_MIXTBR_DZCMI_BITPOS
                              223 HW_MIXTBR_DZCMA_SETMASK                 equ     1<<HW_MIXTBR_DZCMA_BITPOS
                              225 HW_MIXTBR_INV_USB_CLK_CLRMASK           equ     ~HW_MIXTBR_INV_USB_CLK_SETMASK
                              226 HW_MIXTBR_USB_DFF_BYPASS_CLRMASK        equ     ~HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                              227 HW_MIXTBR_HOLD_GND_CLRMASK              equ     ~HW_MIXTBR_HOLD_GND_SETMASK
                              228 HW_MIXTBR_ACKI_CLRMASK                  equ     ~HW_MIXTBR_ACKI_SETMASK
                              229 HW_MIXTBR_ASD2X_CLRMASK                 equ     ~HW_MIXTBR_ASD2X_SETMASK
                              230 HW_MIXTBR_PCPCU_CLRMASK                 equ     ~HW_MIXTBR_PCPCU_SETMASK
                              231 HW_MIXTBR_PCPCD_CLRMASK                 equ     ~HW_MIXTBR_PCPCD_SETMASK
                              232 HW_MIXTBR_DCKI_CLRMASK                  equ     ~HW_MIXTBR_DCKI_SETMASK
                              233 HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK      equ     ~HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                              234 HW_MIXTBR_PSRN_CLRMASK                  equ     ~HW_MIXTBR_PSRN_SETMASK
                              235 HW_MIXTBR_FX2_CLRMASK                   equ     ~HW_MIXTBR_FX2_SETMASK
                              236 HW_MIXTBR_VCOS_CLRMASK                  equ     ~HW_MIXTBR_VCOS_SETMASK
                              237 HW_MIXTBR_XBCO_CLRMASK                  equ     ~HW_MIXTBR_XBCO_SETMASK
                              238 HW_MIXTBR_XBGC_CLRMASK                  equ     ~HW_MIXTBR_XBGC_SETMASK
                              239 HW_MIXTBR_ADTHD_CLRMASK                 equ     ~HW_MIXTBR_ADTHD_SETMASK
                              240 HW_MIXTBR_MICBIAS_LSCLRMASK             equ     ~HW_MIXTBR_MICBIAS_LSSETMASK
                              241 HW_MIXTBR_PWDADC_CLRMASK                equ     ~HW_MIXTBR_PWDADC_SETMASK
                              242 HW_MIXTBR_MICBIAS1_CLRMASK              equ     ~HW_MIXTBR_MICBIAS1_SETMASK
                              243 HW_MIXTBR_EZD_CLRMASK                   equ     ~HW_MIXTBR_EZD_SETMASK
                              244 HW_MIXTBR_DZCDA_CLRMASK                 equ     ~HW_MIXTBR_DZCDA_SETMASK
                              245 HW_MIXTBR_DZCFM_CLRMASK                 equ     ~HW_MIXTBR_DZCFM_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              246 HW_MIXTBR_DZCLI_CLRMASK                 equ     ~HW_MIXTBR_DZCLI_SETMASK
                              247 HW_MIXTBR_DZCMI_CLRMASK                 equ     ~HW_MIXTBR_DZCMI_SETMASK
                              248 HW_MIXTBR_DZCMA_CLRMASK                 equ     ~HW_MIXTBR_DZCMA_SETMASK
                              250 ;C insert
                              251 ;typedef union               
                              252 ;{
                              253 ;    struct {
                              254 ;        int INV_USB_CLK            : 1;
                              255 ;        int USB_DFF_BYPASS         : 1;
                              256 ;        int HOLD_GND               : 1;
                              257 ;        int ACKI                   : 1;
                              258 ;        int ASD2X                  : 1;
                              259 ;        int PCPCU                  : 1;
                              260 ;        int PCPCD                  : 1;
                              261 ;        int DCKI                   : 1;
                              262 ;        int MIC_BIAS_OUT_SEL       : 1;
                              263 ;        int PSRN                   : 1;
                              264 ;        int FX2                    : 1;
                              265 ;        int VCOS                   : 1;
                              266 ;        int XBCO                   : 1;
                              267 ;        int XBGC                   : 1;
                              268 ;        int ADTHD                  : 1;
                              269 ;        int MICBIAS_LSBITPOS       : 1;
                              270 ;        int PWDADC                 : 1;
                              271 ;        int MICBIAS1               : 1;
                              272 ;        int EZD                    : 1;
                              273 ;        int DZCDA                  : 1;
                              274 ;        int DZCFM                  : 1;
                              275 ;        int DZCLI                  : 1;
                              276 ;        int DZCMI                  : 1;
                              277 ;        int DZCMA                  : 1;
                              278 ;    } B;
                              279 ;    int I;
                              280 ;    unsigned int U;
                              281 ;} mix_tbr_type;
                              283 ;#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                              285 ;endc
                              288 ;///////////////////////////////////////////////////////////////////////////////
                              289 ;   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                              290 HW_MIXVOLUMER_MR_BITPOS                 equ     0
                              291 HW_MIXVOLUMER_ML_BITPOS                 equ     8
                              292 HW_MIXVOLUMER_MUTE_BITPOS               equ     15
                              294 HW_MIXVOLUMER_MR_WIDTH                  equ     (5)
                              295 HW_MIXVOLUMER_ML_WIDTH                  equ     (5)
                              296 HW_MIXVOLUMER_MUTE_WIDTH                equ     1
                              298 HW_MIXVOLUMER_MR_SETMASK                equ     $1F<<HW_MIXVOLUMER_MR_BITPOS
                              299 HW_MIXVOLUMER_ML_SETMASK                equ     $1F<<HW_MIXVOLUMER_ML_BITPOS
                              300 HW_MIXVOLUMER_MUTE_SETMASK              equ     1<<HW_MIXVOLUMER_MUTE_BITPOS
                              302 HW_MIXVOLUMER_MR_CLRMASK                equ     ~HW_MIXVOLUMER_MR_SETMASK
                              303 HW_MIXVOLUMER_ML_CLRMASK                equ     ~HW_MIXVOLUMER_ML_SETMASK
                              304 HW_MIXVOLUMER_MUTE_CLRMASK              equ     ~HW_MIXVOLUMER_MUTE_SETMASK
                              306 HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK      equ     0<<HW_MIXVOLUMER_ML_BITPOS
                              307 HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK      equ     1<<HW_MIXVOLUMER_ML_BITPOS
                              308 HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK      equ     2<<HW_MIXVOLUMER_ML_BITPOS
                              309 HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK      equ     3<<HW_MIXVOLUMER_ML_BITPOS
                              310 HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK      equ     4<<HW_MIXVOLUMER_ML_BITPOS
                              311 HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK      equ     5<<HW_MIXVOLUMER_ML_BITPOS
                              312 HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK      equ     6<<HW_MIXVOLUMER_ML_BITPOS
                              313 HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK      equ     7<<HW_MIXVOLUMER_ML_BITPOS
                              314 HW_MIXVOLUMER_ML_ZERO_SETMASK           equ     8<<HW_MIXVOLUMER_ML_BITPOS
                              315 HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK     equ     9<<HW_MIXVOLUMER_ML_BITPOS
                              316 HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK     equ     10<<HW_MIXVOLUMER_ML_BITPOS
                              317 HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK     equ     11<<HW_MIXVOLUMER_ML_BITPOS
                              318 HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK     equ     12<<HW_MIXVOLUMER_ML_BITPOS
                              319 HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK     equ     13<<HW_MIXVOLUMER_ML_BITPOS
                              320 HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK     equ     14<<HW_MIXVOLUMER_ML_BITPOS
                              321 HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK     equ     15<<HW_MIXVOLUMER_ML_BITPOS
                              322 HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK     equ     16<<HW_MIXVOLUMER_ML_BITPOS
                              323 HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK     equ     17<<HW_MIXVOLUMER_ML_BITPOS
                              324 HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK     equ     18<<HW_MIXVOLUMER_ML_BITPOS
                              325 HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK     equ     19<<HW_MIXVOLUMER_ML_BITPOS
                              326 HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK     equ     20<<HW_MIXVOLUMER_ML_BITPOS
                              327 HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK     equ     21<<HW_MIXVOLUMER_ML_BITPOS
                              328 HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK     equ     22<<HW_MIXVOLUMER_ML_BITPOS
                              329 HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK     equ     23<<HW_MIXVOLUMER_ML_BITPOS
                              330 HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK     equ     24<<HW_MIXVOLUMER_ML_BITPOS
                              331 HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK     equ     25<<HW_MIXVOLUMER_ML_BITPOS
                              332 HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK     equ     26<<HW_MIXVOLUMER_ML_BITPOS
                              333 HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK     equ     27<<HW_MIXVOLUMER_ML_BITPOS
                              334 HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK     equ     28<<HW_MIXVOLUMER_ML_BITPOS
                              335 HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK     equ     29<<HW_MIXVOLUMER_ML_BITPOS
                              336 HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK     equ     30<<HW_MIXVOLUMER_ML_BITPOS
                              337 HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK     equ     31<<HW_MIXVOLUMER_ML_BITPOS
                              339 HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK      equ     0
                              340 HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK      equ     1
                              341 HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK      equ     2
                              342 HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK      equ     3
                              343 HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK      equ     4
                              344 HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK      equ     5
                              345 HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK      equ     6
                              346 HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK      equ     7
                              347 HW_MIXVOLUMER_MR_ZERO_SETMASK           equ     8
                              348 HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK     equ     9
                              349 HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK     equ     10
                              350 HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK     equ     11
                              351 HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK     equ     12
                              352 HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK     equ     13
                              353 HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK     equ     14
                              354 HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK     equ     15
                              355 HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK     equ     16
                              356 HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK     equ     17
                              357 HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK     equ     18
                              358 HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK     equ     19
                              359 HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK     equ     20
                              360 HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK     equ     21
                              361 HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK     equ     22
                              362 HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK     equ     23
                              363 HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK     equ     24
                              364 HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK     equ     25
                              365 HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK     equ     26
                              366 HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK     equ     27
                              367 HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK     equ     28
                              368 HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK     equ     29
                              369 HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK     equ     30
                              370 HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK     equ     31
                              372 ;///////////////////////////////////////////////////////////////////////////////
                              373 ;   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                              374 HW_MIXMASTERVR_MR_BITPOS                equ      0
                              375 HW_MIXMASTERVR_ML_BITPOS                equ      8
                              376 HW_MIXMASTERVR_MUTE_BITPOS              equ      15
                              378 HW_MIXMASTERVR_MR_WIDTH                 equ      (5)
                              379 HW_MIXMASTERVR_ML_WIDTH                 equ      (5)
                              380 HW_MIXMASTERVR_MUTE_WIDTH               equ      (1)
                              382 HW_MIXMASTERVR_MR_SETMASK               equ      $1F<<HW_MIXMASTERVR_MR_BITPOS
                              383 HW_MIXMASTERVR_ML_SETMASK               equ      $1F<<HW_MIXMASTERVR_ML_BITPOS
                              384 HW_MIXMASTERVR_MUTE_SETMASK             equ      1<<HW_MIXMASTERVR_MUTE_BITPOS
                              386 HW_MIXMASTERVR_MR_CLRMASK               equ      ~HW_MIXMASTERVR_MR_SETMASK
                              387 HW_MIXMASTERVR_ML_CLRMASK               equ      ~HW_MIXMASTERVR_ML_SETMASK
                              388 HW_MIXMASTERVR_MUTE_CLRMASK             equ      ~HW_MIXMASTERVR_MUTE_SETMASK
                              391 ;C insert
                              392 ;typedef union               
                              393 ;{
                              394 ;    struct
                              395 ;    {
                              396 ;        unsigned MR :5;
                              397 ;        int         :3;
                              398 ;        unsigned ML :5;
                              399 ;        int         :2;
                              400 ;        int MUTE    :1;
                              401 ;    } B;
                              402 ;    int I;
                              403 ;    unsigned int U;
                              404 ;} mix_mastervr_type;
                              406 ;#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                              408 ;endc
                              411 ;///////////////////////////////////////////////////////////////////////////////
                              412 ;   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                              413 HW_MIXMICINVR_GN_BITPOS                 equ       0
                              414 HW_MIXMICINVR_P20DB_BITPOS              equ       6
                              415 HW_MIXMICINVR_MUTE_BITPOS               equ       15
                              417 HW_MIXMICINVR_GN_WIDTH                  equ       5
                              418 HW_MIXMICINVR_RSVD1_WIDTH               equ       1
                              419 HW_MIXMICINVR_P20DB_WIDTH               equ       1
                              420 HW_MIXMICINVR_RSVD2_WIDTH               equ       8
                              421 HW_MIXMICINVR_MUTE_WIDTH                equ       1
                              422 HW_MIXMICINVR_RSVD3_WIDTH               equ       8
                              424 HW_MIXMICINVR_GN_SETMASK                equ       $1F<<HW_MIXMICINVR_GN_BITPOS
                              425 HW_MIXMICINVR_P20DB_SETMASK             equ       1<<HW_MIXMICINVR_P20DB_BITPOS
                              426 HW_MIXMICINVR_MUTE_SETMASK              equ       1<<HW_MIXMICINVR_MUTE_BITPOS
                              428 HW_MIXMICINVR_GN_CLRMASK                equ       ~HW_MIXMICINVR_GN_SETMASK
                              429 HW_MIXMICINVR_P20DB_CLRMASK             equ       ~HW_MIXMICINVR_P20DB_SETMASK
                              430 HW_MIXMICINVR_MUTE_CLRMASK              equ       ~HW_MIXMICINVR_MUTE_SETMASK
                              432 HW_MIXMICINVR_GN_PLUS_12P0_SETMASK      equ     0
                              433 HW_MIXMICINVR_GN_PLUS_10P5_SETMASK      equ     1
                              434 HW_MIXMICINVR_GN_PLUS_09P0_SETMASK      equ     2
                              435 HW_MIXMICINVR_GN_PLUS_07P5_SETMASK      equ     3
                              436 HW_MIXMICINVR_GN_PLUS_06P0_SETMASK      equ     4
                              437 HW_MIXMICINVR_GN_PLUS_04P5_SETMASK      equ     5
                              438 HW_MIXMICINVR_GN_PLUS_03P0_SETMASK      equ     6
                              439 HW_MIXMICINVR_GN_PLUS_01P5_SETMASK      equ     7
                              440 HW_MIXMICINVR_GN_ZERO_SETMASK           equ     8
                              441 HW_MIXMICINVR_GN_MINUS_01P5_SETMASK     equ     9
                              442 HW_MIXMICINVR_GN_MINUS_03P0_SETMASK     equ     10
                              443 HW_MIXMICINVR_GN_MINUS_04P5_SETMASK     equ     11
                              444 HW_MIXMICINVR_GN_MINUS_06P0_SETMASK     equ     12
                              445 HW_MIXMICINVR_GN_MINUS_07P5_SETMASK     equ     13
                              446 HW_MIXMICINVR_GN_MINUS_09P0_SETMASK     equ     14
                              447 HW_MIXMICINVR_GN_MINUS_10P5_SETMASK     equ     15
                              448 HW_MIXMICINVR_GN_MINUS_12P0_SETMASK     equ     16
                              449 HW_MIXMICINVR_GN_MINUS_13P5_SETMASK     equ     17
                              450 HW_MIXMICINVR_GN_MINUS_15P0_SETMASK     equ     18
                              451 HW_MIXMICINVR_GN_MINUS_16P5_SETMASK     equ     19
                              452 HW_MIXMICINVR_GN_MINUS_18P0_SETMASK     equ     20
                              453 HW_MIXMICINVR_GN_MINUS_19P5_SETMASK     equ     21
                              454 HW_MIXMICINVR_GN_MINUS_21P0_SETMASK     equ     22
                              455 HW_MIXMICINVR_GN_MINUS_22P5_SETMASK     equ     23
                              456 HW_MIXMICINVR_GN_MINUS_24P0_SETMASK     equ     24
                              457 HW_MIXMICINVR_GN_MINUS_25P5_SETMASK     equ     25
                              458 HW_MIXMICINVR_GN_MINUS_27P0_SETMASK     equ     26
                              459 HW_MIXMICINVR_GN_MINUS_28P5_SETMASK     equ     27
                              460 HW_MIXMICINVR_GN_MINUS_30P0_SETMASK     equ     28
                              461 HW_MIXMICINVR_GN_MINUS_31P5_SETMASK     equ     29
                              462 HW_MIXMICINVR_GN_MINUS_33P0_SETMASK     equ     30
                              463 HW_MIXMICINVR_GN_MINUS_34P5_SETMASK     equ     31
                              465 ;C insert
                              466 ;typedef union               
                              467 ;{
                              468 ;    struct {
                              469 ;        int GN          : HW_MIXMICINVR_GN_WIDTH;
                              470 ;        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                              471 ;        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                              472 ;        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                              473 ;        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                              474 ;        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                              475 ;    } B;
                              476 ;    int I;
                              477 ;    unsigned int U;
                              478 ;} mix_micinvr_type;
                              480 ;#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                              482 ;endc
                              487 ;///////////////////////////////////////////////////////////////////////////////
                              488 ;   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                              489 HW_MIXLINE1INVR_GR_BITPOS               equ     0
                              490 HW_MIXLINE1INVR_GL_BITPOS               equ     8
                              491 HW_MIXLINE1INVR_MUTE_BITPOS             equ     15
                              493 HW_MIXLINE1INVR_GR_WIDTH                equ     5
                              494 HW_MIXLINE1INVR_RSVD1_WIDTH             equ     3
                              495 HW_MIXLINE1INVR_GL_WIDTH                equ     5
                              496 HW_MIXLINE1INVR_RSVD2_WIDTH             equ     2
                              497 HW_MIXLINE1INVR_MUTE_WIDTH              equ     1
                              498 HW_MIXLINE1INVR_RSVD3_WIDTH             equ     8
                              500 HW_MIXLINE1INVR_GR_SETMASK              equ     $1F<<HW_MIXLINE1INVR_GR_BITPOS
                              501 HW_MIXLINE1INVR_GL_SETMASK              equ     $1F<<HW_MIXLINE1INVR_GL_BITPOS
                              502 HW_MIXLINE1INVR_MUTE_SETMASK            equ     1<<HW_MIXLINE1INVR_MUTE_BITPOS
                              504 HW_MIXLINE1INVR_GR_CLRMASK              equ     ~HW_MIXLINE1INVR_GR_SETMASK
                              505 HW_MIXLINE1INVR_GL_CLRMASK              equ     ~HW_MIXLINE1INVR_GL_SETMASK
                              506 HW_MIXLINE1INVR_MUTE_CLRMASK            equ     ~HW_MIXLINE1INVR_MUTE_SETMASK
                              508 ;C insert
                              509 ;typedef union               
                              510 ;{
                              511 ;    struct {
                              512 ;        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                              513 ;        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                              514 ;        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                              515 ;        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                              516 ;        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                              517 ;        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                              518 ;    } B;
                              519 ;    int I;
                              520 ;    unsigned int U;
                              521 ;} mix_line1invr_type;
                              523 ;#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                              525 ;endc
                              529 ;///////////////////////////////////////////////////////////////////////////////
                              530 ;   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                              531 HW_MIXLINE2INVR_GR_BITPOS               equ     0
                              532 HW_MIXLINE2INVR_GL_BITPOS               equ     8
                              533 HW_MIXLINE2INVR_MUTE_BITPOS             equ     15
                              535 HW_MIXLINE2INVR_GR_WIDTH                equ     5
                              536 HW_MIXLINE2INVR_RSVD1_WIDTH             equ     3
                              537 HW_MIXLINE2INVR_GL_WIDTH                equ     5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              538 HW_MIXLINE2INVR_RSVD2_WIDTH             equ     2
                              539 HW_MIXLINE2INVR_MUTE_WIDTH              equ     1
                              540 HW_MIXLINE2INVR_RSVD3_WIDTH             equ     8
                              543 HW_MIXLINE2INVR_GR_SETMASK              equ     $1F<<HW_MIXLINE2INVR_GR_BITPOS
                              544 HW_MIXLINE2INVR_GL_SETMASK              equ     $1F<<HW_MIXLINE2INVR_GL_BITPOS
                              545 HW_MIXLINE2INVR_MUTE_SETMASK            equ     1<<HW_MIXLINE2INVR_MUTE_BITPOS
                              547 HW_MIXLINE2INVR_GR_CLRMASK              equ     ~HW_MIXLINE2INVR_GR_SETMASK
                              548 HW_MIXLINE2INVR_GL_CLRMASK              equ     ~HW_MIXLINE2INVR_GL_SETMASK
                              549 HW_MIXLINE2INVR_MUTE_CLRMASK            equ     ~HW_MIXLINE2INVR_MUTE_SETMASK
                              551 ;C insert
                              552 ;typedef union               
                              553 ;{
                              554 ;    struct {
                              555 ;        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                              556 ;        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                              557 ;        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                              558 ;        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                              559 ;        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                              560 ;        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                              561 ;    } B;
                              562 ;    int I;
                              563 ;    unsigned int U;
                              564 ;} mix_line2invr_type;
                              566 ;#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                              568 ;endc
                              572 ;///////////////////////////////////////////////////////////////////////////////
                              573 ;   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                              574 HW_MIXDACINVR_MR_BITPOS                 equ     0
                              575 HW_MIXDACINVR_ML_BITPOS                 equ     8
                              576 HW_MIXDACINVR_MUTE_BITPOS               equ     15
                              578 HW_MIXDACINVR_MR_WIDTH                  equ     (5)
                              579 HW_MIXDACINVR_ML_WIDTH                  equ     (5)
                              580 HW_MIXDACINVR_MUTE_WIDTH                equ     (1)
                              582 HW_MIXDACINVR_MR_SETMASK                equ     $1F<<HW_MIXDACINVR_MR_BITPOS
                              583 HW_MIXDACINVR_ML_SETMASK                equ     $1F<<HW_MIXDACINVR_ML_BITPOS
                              584 HW_MIXDACINVR_MUTE_SETMASK              equ     1<<HW_MIXDACINVR_MUTE_BITPOS
                              586 HW_MIXDACINVR_MR_CLRMASK                equ     ~HW_MIXDACINVR_MR_SETMASK
                              587 HW_MIXDACINVR_ML_CLRMASK                equ     ~HW_MIXDACINVR_ML_SETMASK
                              588 HW_MIXDACINVR_MUTE_CLRMASK              equ     ~HW_MIXDACINVR_MUTE_SETMASK
                              590 ;C insert
                              591 ;typedef union               
                              592 ;{
                              593 ;    struct {
                              594 ;        int MR   : HW_MIXDACINVR_MR_WIDTH;
                              595 ;        int ML   : HW_MIXDACINVR_ML_WIDTH;
                              596 ;        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                              597 ;    } B;
                              598 ;    int I;
                              599 ;    unsigned int U;
                              600 ;} mix_dacinvr_type;
                              602 ;#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                              604 ;endc
                              607 ;///////////////////////////////////////////////////////////////////////////////
                              608 ;   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                              609 HW_MIXRECSELR_SR_BITPOS                 equ     0
                              610 HW_MIXRECSELR_SL_BITPOS                 equ     8
                              611 HW_MIXRECSELR_X_BITPOS                  equ     11
                              613 HW_MIXRECSELR_SR_WIDTH                  equ     3
                              614 HW_MIXRECSELR_RSVD1_WIDTH               equ     5
                              615 HW_MIXRECSELR_SL_WIDTH                  equ     3
                              616 HW_MIXRECSELR_X_WIDTH                   equ     1
                              617 HW_MIXRECSELR_RSVD2_WIDTH               equ     12
                              619 HW_MIXRECSELR_SR_SETMASK                equ     7<<HW_MIXRECSELR_SR_BITPOS
                              620 HW_MIXRECSELR_SL_SETMASK                equ     7<<HW_MIXRECSELR_SL_BITPOS
                              621 HW_MIXRECSELR_X_SETMASK                 equ     1<<HW_MIXRECSELR_X_BITPOS
                              623 HW_MIXRECSELR_SR_MIC_SETMASK            equ     0<<HW_MIXRECSELR_SR_BITPOS
                              624 HW_MIXRECSELR_SR_LINEIN2_SETMASK        equ     3<<HW_MIXRECSELR_SR_BITPOS
                              625 HW_MIXRECSELR_SR_LINEIN1_SETMASK        equ     4<<HW_MIXRECSELR_SR_BITPOS
                              626 HW_MIXRECSELR_SR_MIX_SETMASK            equ     5<<HW_MIXRECSELR_SR_BITPOS
                              628 HW_MIXRECSELR_SL_MIC_SETMASK            equ     0<<HW_MIXRECSELR_SL_BITPOS
                              629 HW_MIXRECSELR_SL_LINEIN2_SETMASK        equ     3<<HW_MIXRECSELR_SL_BITPOS
                              630 HW_MIXRECSELR_SL_LINEIN1_SETMASK        equ     4<<HW_MIXRECSELR_SL_BITPOS
                              631 HW_MIXRECSELR_SL_MIX_SETMASK            equ     5<<HW_MIXRECSELR_SL_BITPOS
                              633 HW_MIXRECSELR_SR_CLRMASK                equ     ~HW_MIXRECSELR_SR_SETMASK
                              634 HW_MIXRECSELR_SL_CLRMASK                equ     ~HW_MIXRECSELR_SL_SETMASK
                              635 HW_MIXRECSELR_SR_SL_CLRMASK             equ     ~(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                              636 HW_MIXRECSELR_X_CLRMASK                 equ     ~HW_MIXRECSELR_X_SETMASK
                              638 ;C insert
                              639 ;typedef union               
                              640 ;{
                              641 ;    struct {
                              642 ;        int SR          : HW_MIXRECSELR_SR_WIDTH;
                              643 ;        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                              644 ;        int SL          : HW_MIXRECSELR_SL_WIDTH;
                              645 ;        int X           : HW_MIXRECSELR_X_WIDTH;
                              646 ;        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                              647 ;    } B;
                              648 ;    int I;
                              649 ;    unsigned int U;
                              650 ;} mix_recselr_type;
                              652 ;#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                              654 ;endc
                              658 ;///////////////////////////////////////////////////////////////////////////////
                              659 ;   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                              660 HW_MIXADCGAINR_GR_BITPOS                equ     0
                              661 HW_MIXADCGAINR_GL_BITPOS                equ     8
                              662 HW_MIXADCGAINR_MUTE_BITPOS              equ     15
                              664 HW_MIXADCGAINR_GR_WIDTH                 equ     4
                              665 HW_MIXADCGAINR_RSVD1_WIDTH              equ     4
                              666 HW_MIXADCGAINR_GL_WIDTH                 equ     4
                              667 HW_MIXADCGAINR_RSVD2_WIDTH              equ     3
                              668 HW_MIXADCGAINR_MUTE_WIDTH               equ     1
                              669 HW_MIXADCGAINR_RSVD3_WIDTH              equ     8
                              671 HW_MIXADCGAINR_GR_SETMASK               equ     $1F<<HW_MIXADCGAINR_GR_BITPOS
                              672 HW_MIXADCGAINR_GL_SETMASK               equ     $1F<<HW_MIXADCGAINR_GL_BITPOS
                              673 HW_MIXADCGAINR_MUTE_SETMASK             equ     1<<HW_MIXADCGAINR_MUTE_BITPOS
                              675 HW_MIXADCGAINR_GR_CLRMASK               equ     ~HW_MIXADCGAINR_GR_SETMASK
                              676 HW_MIXADCGAINR_GL_CLRMASK               equ     ~HW_MIXADCGAINR_GL_SETMASK
                              677 HW_MIXADCGAINR_MUTE_CLRMASK             equ     ~HW_MIXADCGAINR_MUTE_SETMASK
                              679 HW_MIXADCGAINR_GL_00P0_SETMASK          equ     0<<HW_MIXADCGAINR_GL_BITPOS
                              680 HW_MIXADCGAINR_GL_01P5_SETMASK          equ     1<<HW_MIXADCGAINR_GL_BITPOS
                              681 HW_MIXADCGAINR_GL_03P0_SETMASK          equ     2<<HW_MIXADCGAINR_GL_BITPOS
                              682 HW_MIXADCGAINR_GL_04P5_SETMASK          equ     3<<HW_MIXADCGAINR_GL_BITPOS
                              683 HW_MIXADCGAINR_GL_06P0_SETMASK          equ     4<<HW_MIXADCGAINR_GL_BITPOS
                              684 HW_MIXADCGAINR_GL_07P5_SETMASK          equ     5<<HW_MIXADCGAINR_GL_BITPOS
                              685 HW_MIXADCGAINR_GL_09P0_SETMASK          equ     6<<HW_MIXADCGAINR_GL_BITPOS
                              686 HW_MIXADCGAINR_GL_10P5_SETMASK          equ     7<<HW_MIXADCGAINR_GL_BITPOS
                              687 HW_MIXADCGAINR_GL_12P0_SETMASK          equ     8<<HW_MIXADCGAINR_GL_BITPOS
                              688 HW_MIXADCGAINR_GL_13P5_SETMASK          equ     9<<HW_MIXADCGAINR_GL_BITPOS
                              689 HW_MIXADCGAINR_GL_15P0_SETMASK          equ     10<<HW_MIXADCGAINR_GL_BITPOS
                              690 HW_MIXADCGAINR_GL_16P5_SETMASK          equ     11<<HW_MIXADCGAINR_GL_BITPOS
                              691 HW_MIXADCGAINR_GL_18P0_SETMASK          equ     12<<HW_MIXADCGAINR_GL_BITPOS
                              692 HW_MIXADCGAINR_GL_19P5_SETMASK          equ     13<<HW_MIXADCGAINR_GL_BITPOS
                              693 HW_MIXADCGAINR_GL_21P0_SETMASK          equ     14<<HW_MIXADCGAINR_GL_BITPOS
                              694 HW_MIXADCGAINR_GL_22P5_SETMASK          equ     15<<HW_MIXADCGAINR_GL_BITPOS
                              696 HW_MIXADCGAINR_GR_00P0_SETMASK          equ     0
                              697 HW_MIXADCGAINR_GR_01P5_SETMASK          equ     1
                              698 HW_MIXADCGAINR_GR_03P0_SETMASK          equ     2
                              699 HW_MIXADCGAINR_GR_04P5_SETMASK          equ     3
                              700 HW_MIXADCGAINR_GR_06P0_SETMASK          equ     4
                              701 HW_MIXADCGAINR_GR_07P5_SETMASK          equ     5
                              702 HW_MIXADCGAINR_GR_09P0_SETMASK          equ     6
                              703 HW_MIXADCGAINR_GR_10P5_SETMASK          equ     7
                              704 HW_MIXADCGAINR_GR_12P0_SETMASK          equ     8
                              705 HW_MIXADCGAINR_GR_13P5_SETMASK          equ     9
                              706 HW_MIXADCGAINR_GR_15P0_SETMASK          equ     10
                              707 HW_MIXADCGAINR_GR_16P5_SETMASK          equ     11
                              708 HW_MIXADCGAINR_GR_18P0_SETMASK          equ     12
                              709 HW_MIXADCGAINR_GR_19P5_SETMASK          equ     13
                              710 HW_MIXADCGAINR_GR_21P0_SETMASK          equ     14
                              711 HW_MIXADCGAINR_GR_22P5_SETMASK          equ     15
                              713 ;C insert
                              714 ;typedef union               
                              715 ;{
                              716 ;    struct {
                              717 ;        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                              718 ;        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                              719 ;        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                              720 ;        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                              721 ;        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                              722 ;        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                              723 ;    } B;
                              724 ;    int I;
                              725 ;    unsigned int U;
                              726 ;} mix_adcgainr_type;
                              728 ;#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                              730 ;endc
                              734 ;///////////////////////////////////////////////////////////////////////////////
                              735 ;   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                              736 HW_MIXPWRDNR_PR0_BITPOS                  equ     9
                              737 HW_MIXPWRDNR_PR1_BITPOS                 equ     10
                              738 HW_MIXPWRDNR_PR2_BITPOS                 equ     11
                              740 HW_MIXPWRDNR_PR0_WIDTH                   equ     (1)
                              741 HW_MIXPWRDNR_PR1_WIDTH                  equ     (1)
                              742 HW_MIXPWRDNR_PR2_WIDTH                  equ     (1)
                              743 HW_MIXPWRDNR_RSVD_WIDTH                 equ     (12)
                              745 HW_MIXPWRDNR_PR_SETMASK                 equ     7<<HW_MIXPWRDNR_PR0_BITPOS
                              747 HW_MIXPWRDNR_PR_CLRMASK                 equ     ~HW_MIXPWRDNR_PR_SETMASK
                              749 ;C insert
                              750 ;typedef union               
                              751 ;{
                              752 ;    struct {
                              753 ;               int                     : 9;
                              754 ;       int PR0         : HW_MIXPWRDNR_PR0_WIDTH;
                              755 ;       int PR1         : HW_MIXPWRDNR_PR1_WIDTH;
                              756 ;       int PR2         : HW_MIXPWRDNR_PR2_WIDTH;
                              757 ;       int RSVD        : HW_MIXPWRDNR_RSVD_WIDTH;
                              758 ;    } B;
                              759 ;    int I;
                              760 ;    unsigned int U;
                              761 ;} mix_pwrdnr_type;
                              763 ;#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                              765 ;endc
                              768 ;///////////////////////////////////////////////////////////////////////////////
                              770 ;  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                              772 HW_MIX_TEST_DAC_CHOP_CLK_WIDTH           equ     (2)
                              774 HW_MIX_TEST_RSVD0_WIDTH                  equ     (2)
                              776 HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH        equ     (1)
                              778 HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH         equ     (1)
                              780 HW_MIX_TEST_RSVD1_WIDTH                  equ     (2)
                              782 HW_MIX_TEST_TMP_CFG_WIDTH                equ     (4)
                              784 HW_MIX_TEST_TMPPWD_WIDTH                 equ     (1)
                              786 HW_MIX_TEST_RSVD2_WIDTH                  equ     (11)
                              790 HW_MIX_TEST_DAC_CHOP_CLK_BITPOS          equ     (0)
                              792 HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS       equ     (4)
                              794 HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS        equ     (5)
                              796 HW_MIX_TEST_TMP_CFG_BITPOS               equ     (8)
                              798 HW_MIX_TEST_TMPPWD_BITPOS                equ     (12)
                              802 HW_MIX_TEST_DAC_CHOP_CLK_SETMASK         equ     (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                              804 HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK      equ     (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                              806 HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK       equ     (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                              808 HW_MIX_TEST_TMP_CFG_SETMASK              equ     (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                              810 HW_MIX_TEST_TMPPWD_SETMASK               equ     (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                              813 HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK         equ    (~HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                              815 HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK      equ    (~HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                              817 HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK       equ    (~HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                              819 HW_MIX_TEST_TMP_CFG_CLRMASK              equ    (~HW_MIX_TEST_TMP_CFG_SETMASK) 
                              821 HW_MIX_TEST_TMPPWD_CLRMASK               equ    (~HW_MIX_TEST_TMPPWD_SETMASK) 
                              823  
                              824 ;C insert
                              826 ;typedef union               
                              828 ;{
                              830 ;    struct {
                              832 ;        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                              834 ;        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                              836 ;        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                              838 ;        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                              840 ;        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                              842 ;        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                              844 ;        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                              846 ;        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                              849 ;    } B;
                              851 ;    int I;
                              852 ;    unsigned int U;
                              854 ;} mix_test_type;
                              856  
                              858 ;#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                              860 ;endc
                              863 ;///////////////////////////////////////////////////////////////////////////////
                              864 ;   Reference Control Register (HW_REF_CTRL) Bit Definitions
                              865 HW_REF_CTRL_DACVBGVAL_BITPOS           equ     0
                              866 HW_REF_CTRL_ADJDAC_BITPOS              equ     4
                              867 HW_REF_CTRL_VAGVAL_BITPOS              equ     5
                              868 HW_REF_CTRL_ADJV_BITPOS                equ     9
                              869 HW_REF_CTRL_ADCREFV_BITPOS             equ     10
                              870 HW_REF_CTRL_ADJADC_BITPOS              equ     14
                              871 HW_REF_CTRL_PWRDWNS_BITPOS             equ     15
                              872 HW_REF_CTRL_BIASC_BITPOS               equ     16
                              873 HW_REF_CTRL_LWREF_BITPOS               equ     18
                              874 HW_REF_CTRL_LOW_PWR_BITPOS             equ     19 
                              876 HW_REF_CTRL_DACVBGVAL_WIDTH            equ     (4)
                              877 HW_REF_CTRL_ADJDAC_WIDTH               equ     (1)
                              878 HW_REF_CTRL_VAGVAL_WIDTH               equ     (4)
                              879 HW_REF_CTRL_ADJV_WIDTH                 equ     (1)
                              880 HW_REF_CTRL_ADCREFV_WIDTH              equ     (4)
                              881 HW_REF_CTRL_ADJADC_WIDTH               equ     (1)
                              882 HW_REF_CTRL_PWRDWNS_WIDTH              equ     (1)
                              883 HW_REF_CTRL_BIASC_WIDTH                equ     (2)
                              884 HW_REF_CTRL_LWREF_WIDTH                equ     (1)
                              885 HW_REF_CTRL_LOW_PWR_WIDTH              equ     (1) 
                              886 HW_REF_CTRL_RSVD_WIDTH                 equ     (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              888 HW_REF_CTRL_DACVBGVAL_SETMASK          equ     (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                              889 HW_REF_CTRL_ADJDAC_SETMASK             equ     (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                              890 HW_REF_CTRL_VAGVAL_SETMASK             equ     (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                              891 HW_REF_CTRL_ADJV_SETMASK               equ     (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                              892 HW_REF_CTRL_ADCREFV_SETMASK            equ     (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                              893 HW_REF_CTRL_ADJADC_SETMASK             equ     (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                              894 HW_REF_CTRL_PWRDWNS_SETMASK            equ     (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                              895 HW_REF_CTRL_BIASC_SETMASK              equ     (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                              896 HW_REF_CTRL_LWREF_SETMASK              equ     (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                              897 HW_REF_CTRL_LOW_PWR_SETMASK            equ     (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                              899 HW_REF_CTRL_DACVBGVAL_CLRMASK          equ     ~HW_REF_CTRL_DACVBGVAL_SETMASK
                              900 HW_REF_CTRL_ADJDAC_CLRMASK             equ     ~HW_REF_CTRL_ADJDAC_SETMASK
                              901 HW_REF_CTRL_VAGVAL_CLRMASK             equ     ~HW_REF_CTRL_VAGVAL_SETMASK
                              902 HW_REF_CTRL_ADJV_CLRMASK               equ     ~HW_REF_CTRL_ADJV_SETMASK
                              903 HW_REF_CTRL_ADCREFV_CLRMASK            equ     ~HW_REF_CTRL_ADCREFV_SETMASK
                              904 HW_REF_CTRL_ADJADC_CLRMASK             equ     ~HW_REF_CTRL_ADJADC_SETMASK
                              905 HW_REF_CTRL_PWRDWNS_CLRMASK            equ     ~HW_REF_CTRL_PWRDWNS_SETMASK
                              906 HW_REF_CTRL_BIASC_CLRMASK              equ     ~HW_REF_CTRL_BIASC_SETMASK
                              907 HW_REF_CTRL_LWREF_CLRMASK              equ     ~HW_REF_CTRL_LWREF_SETMASK
                              908 HW_REF_CTRL_LOW_PWR_CLRMASK            equ     ~HW_REF_CTRL_LOW_PWR_SETMASK
                              910 ;C insert
                              911 ;typedef union               
                              912 ;{
                              913 ;    struct {
                              915 ;        int DACVBGVAL     : HW_REF_CTRL_DACVBGVAL_WIDTH;
                              916 ;        int ADJDAC                : HW_REF_CTRL_ADJDAC_WIDTH;
                              917 ;        int VAGVAL                : HW_REF_CTRL_VAGVAL_WIDTH;
                              918 ;        int ADJV                  : HW_REF_CTRL_ADJV_WIDTH;
                              919 ;        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                              920 ;        int ADJADC                : HW_REF_CTRL_ADJADC_WIDTH;
                              921 ;        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                              922 ;        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                              923 ;        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                              924 ;        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                              925 ;        int RSVD              : HW_REF_CTRL_RSVD_WIDTH;
                              926 ;    } B;
                              927 ;    int I;
                              928 ;    unsigned int U;
                              929 ;} ref_ctrl_type;
                              931 ;#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                              933 ;endc
                              934  
                              937 ;///////////////////////////////////////////////////////////////////////////////
                              938 ;///////////////////////////////////////////////////////////////////////////////
                              939 ;///////////////////////////////////////////////////////////////////////////////
                              940 ;////  DAC Registers
                              941 ;///////////////////////////////////////////////////////////////////////////////
                              942 ;///////////////////////////////////////////////////////////////////////////////
                              943 ;///////////////////////////////////////////////////////////////////////////////
                              944 HW_DAC_BASEADDR                         equ     $F800
                              946 ;ASM Only
                              947 HW_DACCSR                               equ     HW_DAC_BASEADDR
                              948 HW_DACSRR                               equ     HW_DAC_BASEADDR+1
                              949 HW_DACWCR                               equ     HW_DAC_BASEADDR+2
                              950 HW_DACCPR                               equ     HW_DAC_BASEADDR+3
                              951 HW_DACMR                                equ     HW_DAC_BASEADDR+4
                              952 HW_DACBAR                               equ     HW_DAC_BASEADDR+5
                              953 HW_DACICR                               equ     HW_DAC_BASEADDR+6
                              954 ;endasm
                              957 ;///////////////////////////////////////////////////////////////////////////////
                              958 ;  DAC Control Status Register (HW_DACCSR) Bit Definitions
                              959 HW_DACCSR_TXEN_BITPOS                   equ     0
                              960 HW_DACCSR_TXIEN_BITPOS                  equ     1
                              961 HW_DACCSR_TXI_BITPOS                    equ     2
                              962 HW_DACCSR_TXEXC_BITPOS                  equ     3
                              963 HW_DACCSR_LPBK_BITPOS                   equ     4
                              964 HW_DACCSR_DMASEL_BITPOS                 equ     5
                              965 HW_DACCSR_DAC_HIPPOP_EN_BITPOS          equ     7
                              966 HW_DACCSR_LVUP_BITPOS               equ     8
                              967 HW_DACCSR_RVUP_BITPOS                   equ     9
                              968 HW_DACCSR_VUP_BITPOS                    equ     10
                              969 HW_DACCSR_RSRVD_BITPOS                  equ     11
                              970 HW_DACCSR_CLKGT_BITPOS                  equ     23
                              972 HW_DACCSR_TXEN_WIDTH                    equ     (1)
                              973 HW_DACCSR_TXIEN_WIDTH                   equ     (1)
                              974 HW_DACCSR_TXI_WIDTH                     equ     (1)
                              975 HW_DACCSR_TXEXC_WIDTH                   equ     (1)
                              976 HW_DACCSR_LPBK_WIDTH                    equ     (1)
                              977 HW_DACCSR_DMASEL_WIDTH                  equ     (2)
                              978 HW_DACCSR_DAC_HIPPOP_EN_WIDTH           equ     (1)
                              979 HW_DACCSR_LVUP_WIDTH                    equ     (1)
                              980 HW_DACCSR_RVUP_WIDTH                    equ     (1)
                              981 HW_DACCSR_VUP_WIDTH                     equ     (1)
                              982 HW_DACCSR_RSRVD_WIDTH                   equ     (12)
                              983 HW_DACCSR_CLKGT_WIDTH                   equ     (1)
                              985 HW_DACCSR_TXEN_SETMASK                  equ     1<<HW_DACCSR_TXEN_BITPOS
                              986 HW_DACCSR_TXIEN_SETMASK                 equ     1<<HW_DACCSR_TXIEN_BITPOS
                              987 HW_DACCSR_TXI_SETMASK                   equ     1<<HW_DACCSR_TXI_BITPOS
                              988 HW_DACCSR_TXEXC_SETMASK                 equ     1<<HW_DACCSR_TXEXC_BITPOS
                              989 HW_DACCSR_LPBK_SETMASK                  equ     1<<HW_DACCSR_LPBK_BITPOS
                              990 HW_DACCSR_DMASEL_P_SETMASK              equ     ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                              991 HW_DACCSR_DMASEL_Y_SETMASK              equ     (1<<(HW_DACCSR_DMASEL_BITPOS))
                              992 ;         DMASEL_X has no asm setmask since X config value is 00 binary.
                              993 HW_DACCSR_DAC_HIPPOP_EN_SETMASK         equ     (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                              994 HW_DACCSR_LVUP_SETMASK                  equ     (1<<HW_DACCSR_LVUP_BITPOS)
                              995 HW_DACCSR_RVUP_SETMASK                  equ     (1<<HW_DACCSR_RVUP_BITPOS)
                              996 HW_DACCSR_VUP_SETMASK                   equ     (1<<HW_DACCSR_VUP_BITPOS)
                              997 HW_DACCSR_CLKGT_SETMASK                 equ     (1<<HW_DACCSR_CLKGT_BITPOS)
                              999 HW_DACCSR_TXEN_CLRMASK                  equ     ~HW_DACCSR_TXEN_SETMASK
                             1000 HW_DACCSR_TXIEN_CLRMASK                 equ     ~HW_DACCSR_TXIEN_SETMASK
                             1001 HW_DACCSR_TXI_CLRMASK                   equ     ~HW_DACCSR_TXI_SETMASK
                             1002 HW_DACCSR_TXEXC_CLRMASK                 equ     ~HW_DACCSR_TXEXC_SETMASK
                             1003 HW_DACCSR_LPBK_CLRMASK                  equ     ~HW_DACCSR_LPBK_SETMASK
                             1004 ; No asm clrmask for 2 bit bitfield DMASEL
                             1005 HW_DACCSR_DAC_HIPPOP_EN_CLRMASK         equ     ~HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             1006 HW_DACCSR_LVUP_CLRMASK                  equ     ~HW_DACCSR_LVUP_SETMASK
                             1007 HW_DACCSR_RVUP_CLRMASK                  equ     ~HW_DACCSR_RVUP_SETMASK
                             1008 HW_DACCSR_VUP_CLRMASK                   equ     ~HW_DACCSR_VUP_SETMASK
                             1009 HW_DACCSR_CLKGT_CLRMASK                 equ     ~HW_DACCSR_CLKGT_SETMASK 
                             1011  
                             1012 ;C insert
                             1013 ;typedef union               
                             1014 ;{
                             1015 ;    struct {
                             1016 ;        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             1017 ;        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             1018 ;        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             1019 ;        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             1020 ;        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             1021 ;        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             1022 ;             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             1023 ;             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             1024 ;             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             1025 ;        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             1026 ;        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             1027 ;        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             1028 ;        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             1029 ;        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             1030 ;        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             1031 ;    } B;
                             1032 ;    int I;
                             1033 ;    unsigned int U;
                             1034 ;} dac_csr_type;
                             1036 ;#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             1038 ;endc
                             1042 ;///////////////////////////////////////////////////////////////////////////////
                             1043 ;  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             1044 HW_DACSRR_SR_BITPOS                     equ     0
                             1046 HW_DACSRR_SR_WIDTH                      equ     (23)
                             1047 HW_DACSRR_RSVD_WIDTH                    equ     (1)
                             1049 ;HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             1050 HW_DACSRR_SR_SETMASK                   equ     (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             1052 HW_DACSRR_SR_CLRMASK                    equ     ~HW_DACSRR_SR_SETMASK
                             1053  
                             1054 ;C insert
                             1055 ;typedef union               
                             1056 ;{
                             1057 ;    struct {
                             1058 ;        int SR                          : HW_DACSRR_SR_WIDTH;
                             1059 ;        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             1060 ;    } B;
                             1061 ;    int I;
                             1062 ;    unsigned int U;
                             1063 ;} dac_srr_type;
                             1065 ;#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             1067 ;endc
                             1071 ;///////////////////////////////////////////////////////////////////////////////
                             1072 ;  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             1073 HW_DACWCR_WCR_BITPOS                    equ     0
                             1075 HW_DACWCR_WCR_WIDTH                     equ     (10)
                             1076 HW_DACWCR_RSVD_WIDTH                    equ     (12)
                             1078 ;HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             1079 HW_DACWCR_WCR_SETMASK                   equ     (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             1081 HW_DACWCR_WCR_CLRMASK                   equ     ~HW_DACWCR_WCR_SETMASK
                             1082  
                             1083 ;C insert
                             1084 ;typedef union               
                             1085 ;{
                             1086 ;    struct {
                             1087 ;        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             1088 ;        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             1089 ;    } B;
                             1090 ;    int I;
                             1091 ;    unsigned int U;
                             1092 ;} dac_wcr_type;
                             1094 ;#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             1096 ;endc
                             1100 ;///////////////////////////////////////////////////////////////////////////////
                             1101 ;  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             1102 HW_DACCPR_CPR_BITPOS                    equ     0
                             1104 HW_DACCPR_CPR_WIDTH                     equ     (10)
                             1105 HW_DACCPR_RSVD_WIDTH                    equ     (14)
                             1107 ;HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             1108 HW_DACCPR_CPR_SETMASK                   equ     (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             1110 HW_DACCPR_CPR_CLRMASK                   equ     ~HW_DACCPR_CPR_SETMASK
                             1111  
                             1112 ;C insert
                             1113 ;typedef union               
                             1114 ;{
                             1115 ;    struct {
                             1116 ;        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             1117 ;        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             1118 ;    } B;
                             1119 ;    int I;
                             1120 ;    unsigned int U;
                             1121 ;} dac_cpr_type;
                             1123 ;#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             1125 ;endc
                             1129 ;///////////////////////////////////////////////////////////////////////////////
                             1130 ;  DAC Modulo Register (HW_DACMR) Bit Definitions
                             1131 HW_DACMR_MR_BITPOS                      equ     0
                             1132 HW_DACMR_MR_WIDTH                       equ     (10)
                             1133 HW_DACMR_RSVD_WIDTH                     equ     (14)
                             1135 ;HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             1136 HW_DACMR_MR_SETMASK                    equ     (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             1138 HW_DACMR_MR_CLRMASK                     equ     ~HW_DACMR_MR_SETMASK
                             1139  
                             1140 ;C insert
                             1141 ;typedef union               
                             1142 ;{
                             1143 ;    struct {
                             1144 ;        int MR                         : HW_DACMR_MR_WIDTH;
                             1145 ;        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             1146 ;    } B;
                             1147 ;    int I;
                             1148 ;    unsigned int U;
                             1149 ;} dac_mr_type;
                             1151 ;#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             1153 ;endc
                             1157 ;///////////////////////////////////////////////////////////////////////////////
                             1158 ;   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             1159 HW_DACBAR_BAR_BITPOS                    equ     0
                             1160 HW_DACBAR_BAR_WIDTH                     equ     (16)
                             1161 HW_DACBAR_RSVD_WIDTH                    equ     (8)
                             1163 ;HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             1164 HW_DACBAR_BAR_SETMASK                    equ     (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             1166 HW_DACBAR_BAR_CLRMASK                   equ     ~HW_DACBAR_BAR_SETMASK
                             1168 ;C insert
                             1169 ;typedef union               
                             1170 ;{
                             1171 ;    struct {
                             1172 ;        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             1173 ;        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             1174 ;    } B;
                             1175 ;    int I;
                             1176 ;    unsigned int U;
                             1177 ;} dac_bar_type;
                             1179 ;#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             1181 ;endc
                             1185 ;///////////////////////////////////////////////////////////////////////////////
                             1186 ;  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             1187 HW_DACICR_IPT_BITPOS                    equ     0
                             1189 HW_DACICR_IPT_WIDTH                     equ     (10)
                             1190 HW_DACICR_RSVD_WIDTH                    equ     (12)
                             1192 HW_DACICR_IPT_SETMASK                   equ     (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             1194 HW_DACICR_IPT_CLRMASK                   equ     ~HW_DACICR_IPT_SETMASK
                             1195  
                             1196 ;C insert
                             1197 ;typedef union               
                             1198 ;{
                             1199 ;    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1200 ;        int IPT                         : HW_DACICR_IPT_WIDTH;
                             1201 ;        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             1202 ;    } B;
                             1203 ;    int I;
                             1204 ;    unsigned int U;
                             1205 ;} dac_icr_type;
                             1207 ;#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             1209 ;endc
                             1215 ;///////////////////////////////////////////////////////////////////////////////
                             1216 ;///////////////////////////////////////////////////////////////////////////////
                             1217 ;///////////////////////////////////////////////////////////////////////////////
                             1218 ;////  ADC Registers
                             1219 ;///////////////////////////////////////////////////////////////////////////////
                             1220 ;///////////////////////////////////////////////////////////////////////////////
                             1221 ;///////////////////////////////////////////////////////////////////////////////
                             1222 HW_ADC_BASEADDR                         equ     $FB00
                             1224 ;ASM Only
                             1225 HW_ADCCSR                               equ     HW_ADC_BASEADDR
                             1226 HW_ADCSRR                               equ     HW_ADC_BASEADDR+1
                             1227 HW_ADCWCR                               equ     HW_ADC_BASEADDR+2
                             1228 HW_ADCCPR                               equ     HW_ADC_BASEADDR+3
                             1229 HW_ADCMR                                equ     HW_ADC_BASEADDR+4
                             1230 HW_ADCBAR                               equ     HW_ADC_BASEADDR+5
                             1231 HW_ADCIPR                               equ     HW_ADC_BASEADDR+6
                             1232 ;endasm
                             1235 ;///////////////////////////////////////////////////////////////////////////////
                             1236 ;  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             1237 HW_ADCCSR_TXEN_BITPOS                   equ     0
                             1238 HW_ADCCSR_TXIEN_BITPOS                  equ     1
                             1239 HW_ADCCSR_TXI_BITPOS                    equ     2
                             1240 HW_ADCCSR_TXEXC_BITPOS                  equ     3
                             1241 HW_ADCCSR_LPBK_BITPOS                   equ     4
                             1242 HW_ADCCSR_DMASEL_BITPOS                 equ     5
                             1243 HW_ADCCSR_LPFMODE_BITPOS                equ     8
                             1244 HW_ADCCSR_CLKGT_BITPOS                  equ     23
                             1246 HW_ADCCSR_TXEN_WIDTH                    equ     (1)
                             1247 HW_ADCCSR_TXIEN_WIDTH                   equ     (1)
                             1248 HW_ADCCSR_TXI_WIDTH                     equ     (1)
                             1249 HW_ADCCSR_TXEXC_WIDTH                   equ     (1)
                             1250 HW_ADCCSR_LPBK_WIDTH                    equ     (1)
                             1251 HW_ADCCSR_DMASEL_WIDTH                  equ     (2)
                             1252 HW_ADCCSR_RSVD1_WIDTH                   equ     (1)
                             1253 HW_ADCCSR_LPFMODE_WIDTH                 equ     (4)
                             1254 HW_ADCCSR_RSVD2_WIDTH                   equ     (11)
                             1255 HW_ADCCSR_CLKGT_WIDTH                   equ     (1)
                             1257 HW_ADCCSR_TXEN_SETMASK                  equ     1<<HW_ADCCSR_TXEN_BITPOS
                             1258 HW_ADCCSR_TXIEN_SETMASK                 equ     1<<HW_ADCCSR_TXIEN_BITPOS
                             1259 HW_ADCCSR_TXI_SETMASK                   equ     1<<HW_ADCCSR_TXI_BITPOS
                             1260 HW_ADCCSR_TXEXC_SETMASK                 equ     1<<HW_ADCCSR_TXEXC_BITPOS
                             1261 HW_ADCCSR_LPBK_SETMASK                  equ     1<<HW_ADCCSR_LPBK_BITPOS
                             1262 HW_ADCCSR_DMASEL_SETMASK                equ     (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             1263 HW_ADCCSR_LPFMODE_SETMASK                equ     (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             1264 HW_ADCCSR_CLKGT_SETMASK                 equ     1<<HW_ADCCSR_CLKGT_BITPOS
                             1266 HW_ADCCSR_TXEN_CLRMASK                  equ     ~HW_ADCCSR_TXEN_SETMASK
                             1267 HW_ADCCSR_TXIEN_CLRMASK                 equ     ~HW_ADCCSR_TXIEN_SETMASK
                             1268 HW_ADCCSR_TXI_CLRMASK                   equ     ~HW_ADCCSR_TXI_SETMASK
                             1269 HW_ADCCSR_TXEXC_CLRMASK                 equ     ~HW_ADCCSR_TXEXC_SETMASK
                             1270 HW_ADCCSR_LPBK_CLRMASK                  equ     ~HW_ADCCSR_LPBK_SETMASK
                             1271 HW_ADCCSR_DMASEL_CLRMASK                equ     ~HW_ADCCSR_DMASEL_SETMASK
                             1272 HW_ADCCSR_LPFMODE_CLRMASK               equ     ~HW_ADCCSR_LPFMODE_SETMASK
                             1273 HW_ADCCSR_CLKGT_CLRMASK                 equ     ~HW_ADCCSR_CLKGT_SETMASK
                             1274  
                             1275 ;C insert
                             1276 ;typedef union               
                             1277 ;{
                             1278 ;    struct {
                             1279 ;        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             1280 ;        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             1281 ;        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             1282 ;        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             1283 ;        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             1284 ;        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             1285 ;        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             1286 ;        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             1287 ;        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             1288 ;        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             1289 ;    } B;
                             1290 ;    int I;
                             1291 ;    unsigned int U;
                             1292 ;} adc_csr_type;
                             1294 ;#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             1296 ;endc
                             1299 ;///////////////////////////////////////////////////////////////////////////////
                             1300 ;  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             1301 HW_ADCWCR_WCR_BITPOS                    equ     0
                             1303 HW_ADCWCR_WCR_WIDTH                     equ     (10)
                             1304 HW_ADCWCR_RSVD_WIDTH                    equ     (14)
                             1306 HW_ADCWCR_WCR_SETMASK                   equ     (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             1308 HW_ADCWCR_WCR_CLRMASK                   equ     ~HW_ADCWCR_WCR_SETMASK
                             1309  
                             1310 ;C insert
                             1311 ;typedef union               
                             1312 ;{
                             1313 ;    struct {
                             1314 ;        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             1315 ;        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             1316 ;    } B;
                             1317 ;    int I;
                             1318 ;    unsigned int U;
                             1319 ;} adc_wcr_type;
                             1321 ;#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             1323 ;endc
                             1327 ;///////////////////////////////////////////////////////////////////////////////
                             1328 ;   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             1329 HW_ADCBAR_BAR_BITPOS                    equ     0
                             1330 HW_ADCBAR_BAR_WIDTH                     equ     (16)
                             1331 HW_ADCBAR_RSVD_WIDTH                    equ     (8)
                             1333 ;HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             1334 HW_ADCBAR_BAR_SETMASK                    equ     (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             1336 HW_ADCBAR_BAR_CLRMASK                   equ     ~HW_ADCBAR_BAR_SETMASK
                             1338 ;C insert
                             1339 ;typedef union               
                             1340 ;{
                             1341 ;    struct {
                             1342 ;        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             1343 ;        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             1344 ;    } B;
                             1345 ;    int I;
                             1346 ;    unsigned int U;
                             1347 ;} adc_bar_type;
                             1349 ;#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             1351 ;endc
                             1355  
                             1357 ;///////////////////////////////////////////////////////////////////////////////
                             1358 ;  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             1359 HW_ADCCPR_CPR_BITPOS                    equ     0
                             1361 HW_ADCCPR_CPR_WIDTH                     equ     (10)
                             1362 HW_ADCCPR_RSVD_WIDTH                    equ     (14)
                             1364 HW_ADCCPR_CPR_SETMASK                   equ     (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             1366 HW_ADCCPR_CPR_CLRMASK                   equ     ~HW_ADCCPR_CPR_SETMASK
                             1367  
                             1368 ;C insert
                             1369 ;typedef union               
                             1370 ;{
                             1371 ;    struct {
                             1372 ;        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             1373 ;        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             1374 ;    } B;
                             1375 ;    int I;
                             1376 ;    unsigned int U;
                             1377 ;} adc_cpr_type;
                             1379 ;#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             1381 ;endc
                             1384 ;///////////////////////////////////////////////////////////////////////////////
                             1385 ;  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             1386 HW_ADCMR_MR_BITPOS                      equ     0
                             1387 HW_ADCMR_MR_WIDTH                       equ     (10)
                             1388 HW_ADCMR_RSVD_WIDTH                     equ     (14)
                             1390 ;HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             1391 HW_ADCMR_MR_SETMASK                    equ     (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             1393 HW_ADCMR_MR_CLRMASK                     equ     ~HW_ADCMR_MR_SETMASK
                             1394  
                             1395 ;C insert
                             1396 ;typedef union               
                             1397 ;{
                             1398 ;    struct {
                             1399 ;        int MR                         : HW_ADCMR_MR_WIDTH;
                             1400 ;        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             1401 ;    } B;
                             1402 ;    int I;
                             1403 ;    unsigned int U;
                             1404 ;} adc_mr_type;
                             1406 ;#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             1408 ;endc
                             1410 ;///////////////////////////////////////////////////////////////////////////////
                             1411 ;  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             1412 HW_ADCSRR_SR_BITPOS                     equ     0
                             1414 HW_ADCSRR_SR_WIDTH                      equ     (23)
                             1415 HW_ADCSRR_RSVD_WIDTH                    equ     (1)
                             1417 ;HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             1418 HW_ADCSRR_SR_SETMASK                   equ     (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             1420 HW_ADCSRR_SR_CLRMASK                    equ     ~HW_ADCSRR_SR_SETMASK
                             1421  
                             1422 ;C insert
                             1423 ;typedef union               
                             1424 ;{
                             1425 ;    struct {
                             1426 ;        int SR                          : HW_ADCSRR_SR_WIDTH;
                             1427 ;        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             1428 ;    } B;
                             1429 ;    int I;
                             1430 ;    unsigned int U;
                             1431 ;} adc_srr_type;
                             1433 ;#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             1435 ;endc
                             1437 ;///////////////////////////////////////////////////////////////////////////////
                             1438 ;  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             1439 HW_ADCICR_IPT_BITPOS                    equ     0
                             1441 HW_ADCICR_IPT_WIDTH                     equ     (10)
                             1442 HW_ADCICR_RSVD_WIDTH                    equ     (12)
                             1444 HW_ADCICR_IPT_SETMASK                   equ     (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             1446 HW_ADCICR_IPT_CLRMASK                   equ     ~HW_ADCICR_IPT_SETMASK
                             1447  
                             1448 ;C insert
                             1449 ;typedef union               
                             1450 ;{
                             1451 ;    struct {
                             1452 ;        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             1453 ;        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             1454 ;    } B;
                             1455 ;    int I;
                             1456 ;    unsigned int U;
                             1457 ;} adc_icr_type;
                             1459 ;#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             1461 ;endc
                             1463  ;*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             1464  ;
                             1465  ; The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             1466  ; to update the actual files. Only the defines needed to build SDK2.400 were added.
                             1468 HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS        equ     16
                             1470 HW_MIXLINE1INVR_GN_ZERO_SETMASK         equ     $808
                               20         include "regscore.inc"
                                2 __REGS_STATUS_INC equ 1
                                4 ;Asm only
                                5 HW_PXRAM_CFG                            equ     $00FFE8         ; PXRAM Memory Config register
                                6 HW_PYRAM_CFG                            equ     $00FFE9         ; PXRAM Memory Config register
                                7 HW_ETRX_CFG                             equ     $00FFEE         ; ETRX Config register
                                8 HW_ETRY_CFG                             equ     $00FFEF         ; ETRY Config register
                                9 HW_ETR_SHIFT                            equ     $00FFF0         ; ETR Shift register
                               10 HW_ETR_RESULT                           equ     $00FFF1         ; ETR Result register
                               11 HW_RAM_ROM_CFG                          equ     $00FFED         ; RAM/ROM Config register
                               12 ;endasm
                               14 ;///////////////////////////////////////////////////////////////////////////////
                               15 ;  OMR Register (HW_OMR) Bit Positions
                               16 HW_OMR_MA_BITPOS                        equ     0
                               17 HW_OMR_MB_BITPOS                        equ     1
                               18 HW_OMR_DE_BITPOS                        equ     2
                               19 HW_OMR_YE_BITPOS                        equ     3
                               20 HW_OMR_MC_BITPOS                        equ     4
                               21 HW_OMR_SD_BITPOS                        equ     6
                               23 HW_OMR_MA_SETMASK                       equ     1<<HW_OMR_MA_BITPOS
                               24 HW_OMR_MB_SETMASK                       equ     1<<HW_OMR_MB_BITPOS
                               25 HW_OMR_DE_SETMASK                       equ     1<<HW_OMR_DE_BITPOS
                               26 HW_OMR_YE_SETMASK                       equ     1<<HW_OMR_YE_BITPOS
                               27 HW_OMR_MC_SETMASK                       equ     1<<HW_OMR_MC_BITPOS
                               28 HW_OMR_SD_SETMASK                       equ     1<<HW_OMR_SD_BITPOS
                               30 HW_OMR_MA_CLRMASK                       equ     ~HW_OMR_MA_SETMASK
                               31 HW_OMR_MB_CLRMASK                       equ     ~HW_OMR_MB_SETMASK
                               32 HW_OMR_DE_CLRMASK                       equ     ~HW_OMR_DE_SETMASK
                               33 HW_OMR_YE_CLRMASK                       equ     ~HW_OMR_YE_SETMASK
                               34 HW_OMR_MC_CLRMASK                       equ     ~HW_OMR_MC_SETMASK
                               35 HW_OMR_SD_CLRMASK                       equ     ~HW_OMR_SD_SETMASK
                               38 ;///////////////////////////////////////////////////////////////////////////////
                               39 ;  Status Register (HW_SR) Bit Positions
                               40 HW_SR_C_BITPOS                          equ     0
                               41 HW_SR_O_BITPOS                          equ     1
                               42 HW_SR_Z_BITPOS                          equ     2
                               43 HW_SR_N_BITPOS                          equ     3
                               44 HW_SR_U_BITPOS                          equ     4
                               45 HW_SR_E_BITPOS                          equ     5
                               46 HW_SR_L_BITPOS                          equ     6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                               47 HW_SR_IM_BITPOS                         equ     8
                               48 HW_SR_IM0_BITPOS                        equ     8
                               49 HW_SR_IM1_BITPOS                        equ     9
                               50 HW_SR_SM_BITPOS                         equ     10
                               51 HW_SR_SM0_BITPOS                        equ     10
                               52 HW_SR_SM1_BITPOS                        equ     11
                               53 HW_SR_TM_BITPOS                         equ     13
                               54 HW_SR_DP_BITPOS                         equ     14
                               55 HW_SR_LOOP_BITPOS                       equ     15
                               57 HW_SR_C_SETMASK                         equ     1<<HW_SR_C_BITPOS
                               58 HW_SR_O_SETMASK                         equ     1<<HW_SR_O_BITPOS
                               59 HW_SR_Z_SETMASK                         equ     1<<HW_SR_Z_BITPOS
                               60 HW_SR_N_SETMASK                         equ     1<<HW_SR_N_BITPOS
                               61 HW_SR_U_SETMASK                         equ     1<<HW_SR_U_BITPOS
                               62 HW_SR_E_SETMASK                         equ     1<<HW_SR_E_BITPOS
                               63 HW_SR_L_SETMASK                         equ     1<<HW_SR_L_BITPOS
                               64 HW_SR_IM_SETMASK                        equ     3<<HW_SR_IM_BITPOS
                               65 HW_SR_IM0_SETMASK                       equ     1<<HW_SR_IM0_BITPOS
                               66 HW_SR_IM1_SETMASK                       equ     1<<HW_SR_IM1_BITPOS
                               67 HW_SR_IM_L0_SETMASK                     equ     0<<HW_SR_IM_BITPOS
                               68 HW_SR_IM_L1_SETMASK                     equ     1<<HW_SR_IM_BITPOS
                               69 HW_SR_IM_L2_SETMASK                     equ     2<<HW_SR_IM_BITPOS
                               70 HW_SR_IM_L3_SETMASK                     equ     3<<HW_SR_IM_BITPOS
                               71 HW_SR_SM_SETMASK                        equ     3<<HW_SR_SM_BITPOS
                               72 HW_SR_SM0_SETMASK                       equ     1<<HW_SR_SM0_BITPOS
                               73 HW_SR_SM1_SETMASK                       equ     1<<HW_SR_SM1_BITPOS
                               74 HW_SR_TM_SETMASK                        equ     1<<HW_SR_TM_BITPOS
                               75 HW_SR_DP_SETMASK                        equ     1<<HW_SR_DP_BITPOS
                               76 HW_SR_LOOP_SETMASK                      equ     1<<HW_SR_LOOP_BITPOS
                               78 HW_SR_C_CLRMASK                         equ     ~HW_SR_C_SETMASK
                               79 HW_SR_O_CLRMASK                         equ     ~HW_SR_O_SETMASK
                               80 HW_SR_Z_CLRMASK                         equ     ~HW_SR_Z_SETMASK
                               81 HW_SR_N_CLRMASK                         equ     ~HW_SR_N_SETMASK
                               82 HW_SR_U_CLRMASK                         equ     ~HW_SR_U_SETMASK
                               83 HW_SR_E_CLRMASK                         equ     ~HW_SR_E_SETMASK
                               84 HW_SR_L_CLRMASK                         equ     ~HW_SR_L_SETMASK
                               85 HW_SR_IM_CLRMASK                        equ     ($00FFFF)&(~HW_SR_IM_SETMASK)
                               86 HW_SR_IM0_CLRMASK                       equ     ~HW_SR_IM0_SETMASK
                               87 HW_SR_IM1_CLRMASK                       equ     ~HW_SR_IM1_SETMASK
                               88 HW_SR_SM_CLRMASK                        equ     ~HW_SR_SM_SETMASK
                               89 HW_SR_SM0_CLRMASK                       equ     ~HW_SR_SM0_SETMASK
                               90 HW_SR_SM1_CLRMASK                       equ     ~HW_SR_SM1_SETMASK
                               91 HW_SR_TM_CLRMASK                        equ     ~HW_SR_TM_SETMASK
                               92 HW_SR_DP_CLRMASK                        equ     ~HW_SR_DP_SETMASK
                               93 HW_SR_LOOP_CLRMASK                      equ     ~HW_SR_LOOP_SETMASK
                               95 ;///////////////////////////////////////////////////////////////////////////////
                               96 ;  RAM/ROM Config Register Bit Positions
                               97 HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS      equ     18
                               98 HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS        equ     19
                               99 HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS      equ     20
                              100 HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS      equ     21
                               21         include "regsdcdc.inc"
                                3 regssysteminc            equ         1
                                5  
                                7 ;C insert
                                9 ;#include "types.h"
                               11 ;endc
                               13  
                               15 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               17 ;   SYSTEM STMP Registers 
                               18 ;       Last Edited 2.19.2003 M. May
                               19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               21 HW_DCDC_BASEADDR             equ     ($FA0C)
                               23  
                               25 ;ASM Only
                               26 HW_DCDC1_CTRL0                   equ     (HW_DCDC_BASEADDR)                      ;FA0C
                               27 HW_DCDC1_CTRL1                   equ     (HW_DCDC_BASEADDR+1)
                               28 HW_DCDC_VDDIO                    equ     (HW_DCDC_BASEADDR+2)
                               29 HW_DCDC_VDDD                     equ     (HW_DCDC_BASEADDR+3)
                               30 HW_DCDC_VDDA                     equ     (HW_DCDC_BASEADDR+4)
                               31 HW_DCDC2_CTRL0                   equ     (HW_DCDC_BASEADDR+5)
                               32 HW_DCDC2_CTRL1                   equ     (HW_DCDC_BASEADDR+6)
                               33 HW_SPEED                         equ     (HW_DCDC_BASEADDR+7)
                               34 HW_DCDC_TBR                      equ     (HW_DCDC_BASEADDR+8)
                               35 HW_DCDC_PERSIST                                  equ     (HW_DCDC_BASEADDR+15)
                               36 HW_VDD5V_PWR_CHARGE                              equ     (HW_DCDC_BASEADDR+17)          ;FA1D
                               38 ;endasm
                               40  
                               42 ;///////////////////////////////////////////////////////////////////////////////
                               44 ;  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                               46 HW_DCDC1_CTRL0_PLEVBU_WIDTH                 equ     (5)
                               47 HW_DCDC1_CTRL0_RSVD0_WIDTH                  equ     (3)
                               48 HW_DCDC1_CTRL0_PLEVBO_WIDTH                 equ     (5)
                               49 HW_DCDC1_CTRL0_RSVD1_WIDTH                  equ     (3)
                               50 HW_DCDC1_CTRL0_NLEV_WIDTH                   equ     (5)
                               52 HW_DCDC1_CTRL0_RSVD2_WIDTH                  equ     (3)
                               56 HW_DCDC1_CTRL0_PLEVBU_BITPOS                equ     (0)
                               57 HW_DCDC1_CTRL0_PLEVBO_BITPOS                equ     (8)
                               58 HW_DCDC1_CTRL0_NLEV_BITPOS                  equ     (16)
                               60  
                               62 HW_DCDC1_CTRL0_PLEVBU_SETMASK               equ     (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                               63 HW_DCDC1_CTRL0_PLEVBO_SETMASK               equ     (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                               64 HW_DCDC1_CTRL0_NLEV_SETMASK                 equ     (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                               66  
                               68 HW_DCDC1_CTRL0_PLEVBU_CLRMASK               equ    (~HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                               69 HW_DCDC1_CTRL0_PLEVBO_CLRMASK               equ    (~HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                               70 HW_DCDC1_CTRL0_NLEV_CLRMASK                 equ    (~HW_DCDC1_CTRL0_NLEV_SETMASK)  
                               72  
                               74  
                               76 ;C insert
                               77 ;typedef union               
                               78 ;{
                               79 ;    struct {
                               80 ;        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                               81 ;        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                               82 ;        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                               83 ;        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                               84 ;        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                               85 ;        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                               86 ;    } B;
                               87 ;    unsigned int I;
                               88 ;} dcdc1_ctrl0_type;
                               90  
                               91 ;#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                               93 ;endc
                               95  
                               97  
                               98 ;///////////////////////////////////////////////////////////////////////////////
                              100 ;  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                              102 HW_DCDC1_CTRL1_C_WIDTH                      equ     (4)
                              103 HW_DCDC1_CTRL1_R_WIDTH                      equ     (4)
                              104 HW_DCDC1_CTRL1_FFOR_WIDTH                   equ     (3)
                              105 HW_DCDC1_CTRL1_RSVD0_WIDTH                  equ     (1)
                              106 HW_DCDC1_CTRL1_PFMCTRL_WIDTH                equ     (12)
                              110 HW_DCDC1_CTRL1_C_BITPOS                     equ     (0)
                              111 HW_DCDC1_CTRL1_R_BITPOS                     equ     (4)
                              112 HW_DCDC1_CTRL1_FFOR_BITPOS                  equ     (8)
                              113 HW_DCDC1_CTRL1_PFMCTRL_BITPOS               equ     (12) 
                              115 HW_DCDC1_CTRL1_C_SETMASK                    equ     (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                              116 HW_DCDC1_CTRL1_R_SETMASK                    equ     (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                              117 HW_DCDC1_CTRL1_FFOR_SETMASK                 equ     (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                              118 HW_DCDC1_CTRL1_PFMCTRL_SETMASK              equ     (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                              120 HW_DCDC1_CTRL1_C_CLRMASK                    equ    (~HW_DCDC1_CTRL1_C_SETMASK)     
                              121 HW_DCDC1_CTRL1_R_CLRMASK                    equ    (~HW_DCDC1_CTRL1_R_SETMASK) 
                              122 HW_DCDC1_CTRL1_FFOR_CLRMASK                 equ    (~HW_DCDC1_CTRL1_FFOR_SETMASK)  
                              123 HW_DCDC1_CTRL1_PFMCTRL_CLRMASK              equ    (~HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                              125  
                              126 ;C insert
                              127 ;typedef union               
                              128 ;{
                              129 ;    struct {
                              130 ;        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                              131 ;        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                              132 ;        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              133 ;        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                              134 ;        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              135 ;    } B;
                              136 ;    unsigned int I;
                              137 ;} dcdc1_ctrl1_type;
                              138 ;#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                              140 ;endc
                              142  
                              144  
                              145 ;///////////////////////////////////////////////////////////////////////////////
                              147 ;  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                              149 HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH          equ     (5)
                              150 HW_DCDC_VDDIO_RSVD0_WIDTH                  equ     (3)
                              151 HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH         equ     (5)
                              152 HW_DCDC_VDDIO_RSVD1_WIDTH                  equ     (3)
                              153 HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH        equ     (1)
                              154 HW_DCDC_VDDIO_RSVD2_WIDTH                  equ     (3)
                              155 HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH        equ     (1)
                              156 HW_DCDC_VDDIO_OK_WIDTH                                     equ     (1)
                              157 HW_DCDC_VDDIO_RSVD3_WIDTH                  equ     (2)
                              161 HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS         equ     (0)
                              162 HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS        equ     (8)
                              163 HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS       equ     (16)
                              164 HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS       equ     (20)
                              165 HW_DCDC_VDDIO_OK_BITPOS                                    equ     (21)
                              166  
                              168 HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK        equ     (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                              169 HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK       equ     (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                              170 HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK      equ     (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                              171 HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK      equ     (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                              173  
                              175 HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK        equ    (~HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                              176 HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK       equ    (~HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                              177 HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK      equ    (~HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                              178 HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK      equ    (~HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                              180  
                              181 ;C insert
                              183 ;typedef union               
                              184 ;{
                              185 ;    struct {
                              186 ;        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                              187 ;        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                              188 ;        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                              189 ;        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                              190 ;        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                              191 ;        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                              192 ;        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                              193 ;                unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                              194 ;        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                              195 ;    } B;
                              196 ;    unsigned int I;
                              197 ;} dcdc_vddio_type;
                              199  
                              201 ;#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                              203 ;endc
                              204  
                              206  
                              207 ;///////////////////////////////////////////////////////////////////////////////
                              208 ;  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                              210 HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH          equ     (5)
                              211 HW_DCDC_VDDD_RSVD0_WIDTH                  equ     (3)
                              212 HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH         equ     (5)
                              213 HW_DCDC_VDDD_RSVD1_WIDTH                  equ     (3)
                              214 HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH        equ     (1)
                              215 HW_DCDC_VDDD_RSVD2_WIDTH                  equ     (3)
                              216 HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH        equ     (1)
                              217 HW_DCDC_VDDD_OK_WIDTH                             equ     (1)
                              218 HW_DCDC_VDDD_RSVD3_WIDTH                  equ     (2)
                              220 HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS         equ     (0)
                              221 HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS        equ     (8)
                              222 HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS       equ     (16)
                              223 HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS       equ     (20)
                              224 HW_DCDC_VDDD_OK_BITPOS                                    equ     (21)
                              225 HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK        equ     (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                              226 HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK       equ     (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                              227 HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK      equ     (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                              228 HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK      equ     (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                              229  
                              230 HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK        equ    (~HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                              231 HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK       equ    (~HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                              232 HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK      equ    (~HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                              233 HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK      equ    (~HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                              234  
                              235 ;C insert
                              236 ;typedef union               
                              237 ;{
                              238 ;    struct {
                              239 ;        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                              240 ;        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                              241 ;        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                              242 ;        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                              243 ;        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                              244 ;        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                              245 ;        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                              246 ;                unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                              247 ;        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                              248 ;    } B;
                              249 ;   unsigned int I;
                              250 ;       unsigned U;
                              251 ;} dcdc_vddd_type;
                              253 ;#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                              254 ;endc
                              256  
                              258  
                              259 ;///////////////////////////////////////////////////////////////////////////////
                              261 ;  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                              263 HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH          equ     (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              264 HW_DCDC_VDDA_RSVD0_WIDTH                  equ     (3)
                              265 HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH         equ     (5)
                              266 HW_DCDC_VDDA_RSVD1_WIDTH                  equ     (3)
                              267 HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH        equ     (1)
                              268 HW_DCDC_VDDA_RSVD2_WIDTH                  equ     (3)
                              269 HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH        equ     (1)
                              270 HW_DCDC_VDDA_OK_WIDTH                                     equ     (1)
                              271 HW_DCDC_VDDA_RSVD3_WIDTH                  equ     (2)
                              275 HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS         equ     (0)
                              276 HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS        equ     (8)
                              277 HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS       equ     (16)
                              278 HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS       equ     (20)
                              279 HW_DCDC_VDDA_OK_BITPOS                                    equ     (21)
                              280  
                              282 HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK        equ     (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                              283 HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK       equ     (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                              284 HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK      equ     (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                              285 HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK      equ     (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                              287  
                              289 HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK        equ    (~HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                              290 HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK       equ    (~HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                              291 HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK      equ    (~HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                              292 HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK      equ    (~HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                              294  
                              295 ;C insert
                              296 ;typedef union               
                              297 ;{
                              298 ;    struct {
                              299 ;        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                              300 ;        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                              301 ;        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                              302 ;        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                              303 ;        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                              304 ;        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                              305 ;        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                              306 ;            unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                              307 ;        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                              308 ;    } B;
                              309 ;    unsigned int I;
                              310 ;} dcdc_vdda_type;
                              312 ;#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                              314 ;endc
                              316  
                              318  
                              319 ;///////////////////////////////////////////////////////////////////////////////
                              321 ;  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                              323 HW_DCDC2_CTRL0_PLEVBU_WIDTH                 equ     (5)
                              324 HW_DCDC2_CTRL0_RSVD0_WIDTH                  equ     (3)
                              325 HW_DCDC2_CTRL0_PLEVBO_WIDTH                 equ     (5)
                              326 HW_DCDC2_CTRL0_RSVD1_WIDTH                  equ     (3)
                              327 HW_DCDC2_CTRL0_NLEV_WIDTH                   equ     (5)
                              328 HW_DCDC2_CTRL0_RSVD2_WIDTH                  equ     (3)
                              332 HW_DCDC2_CTRL0_PLEVBU_BITPOS                equ     (0)
                              333 HW_DCDC2_CTRL0_PLEVBO_BITPOS                equ     (8)
                              334 HW_DCDC2_CTRL0_NLEV_BITPOS                  equ     (16)
                              336 HW_DCDC2_CTRL0_PLEVBU_SETMASK               equ     (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                              337 HW_DCDC2_CTRL0_PLEVBO_SETMASK               equ     (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                              338 HW_DCDC2_CTRL0_NLEV_SETMASK                 equ     (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                              340 HW_DCDC2_CTRL0_PLEVBU_CLRMASK               equ    (~HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                              341 HW_DCDC2_CTRL0_PLEVBO_CLRMASK               equ    (~HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                              342 HW_DCDC2_CTRL0_NLEV_CLRMASK                 equ    (~HW_DCDC2_CTRL0_NLEV_SETMASK)  
                              345 ;C insert
                              346 ;typedef union               
                              347 ;{
                              348 ;    struct {
                              349 ;        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                              350 ;        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                              351 ;        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                              352 ;        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                              353 ;        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                              354 ;        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                              355 ;    } B;
                              356 ;    unsigned int I;
                              357 ;} dcdc2_ctrl0_type; 
                              359 ;#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                              361 ;endc
                              363  
                              365  
                              366 ;///////////////////////////////////////////////////////////////////////////////
                              368 ;  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                              370 HW_DCDC2_CTRL1_C_WIDTH                      equ     (4)
                              371 HW_DCDC2_CTRL1_R_WIDTH                      equ     (4)
                              372 HW_DCDC2_CTRL1_FFOR_WIDTH                   equ     (3)
                              373 HW_DCDC2_CTRL1_RSVD0_WIDTH                  equ     (1)
                              374 HW_DCDC2_CTRL1_PFMCTRL_WIDTH                equ     (12)
                              377 HW_DCDC2_CTRL1_C_BITPOS                     equ     (0)
                              378 HW_DCDC2_CTRL1_R_BITPOS                     equ     (4)
                              379 HW_DCDC2_CTRL1_FFOR_BITPOS                  equ     (8)
                              380 HW_DCDC2_CTRL1_PFMCTRL_BITPOS               equ     (12)
                              382  
                              384 HW_DCDC2_CTRL1_C_SETMASK                    equ     (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                              385 HW_DCDC2_CTRL1_R_SETMASK                    equ     (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                              386 HW_DCDC2_CTRL1_FFOR_SETMASK                 equ     (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                              387 HW_DCDC2_CTRL1_PFMCTRL_SETMASK              equ     (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                              389  
                              391 HW_DCDC2_CTRL1_C_CLRMASK                    equ    (~HW_DCDC2_CTRL1_C_SETMASK)     
                              392 HW_DCDC2_CTRL1_R_CLRMASK                    equ    (~HW_DCDC2_CTRL1_R_SETMASK) 
                              393 HW_DCDC2_CTRL1_FFOR_CLRMASK                 equ    (~HW_DCDC2_CTRL1_FFOR_SETMASK)  
                              394 HW_DCDC2_CTRL1_PFMCTRL_CLRMASK              equ    (~HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                              396  
                              397 ;C insert
                              398 ;typedef union               
                              399 ;{
                              400 ;    struct {
                              401 ;        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                              402 ;        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                              403 ;        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              404 ;        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                              405 ;        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              406 ;    } B;
                              407 ;    unsigned int I;
                              408 ;} dcdc2_ctrl1_type;
                              410 ;#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                              412 ;endc
                              414  
                              416  
                              417 ;///////////////////////////////////////////////////////////////////////////////
                              419 ;  Speed Monitoring Register (HW_SPEED) Bit Definitions
                              421 HW_SPEED_OSC1_PWRUP_WIDTH             equ     (1)
                              422 HW_SPEED_OSC1_START_COUNT_WIDTH       equ     (1)
                              423 HW_SPEED_RSVD0_WIDTH                  equ     (2)
                              424 HW_SPEED_RINGOSC1_WIDTH               equ     (7)
                              425 HW_SPEED_RSVD1_WIDTH                  equ     (1)
                              426 HW_SPEED_OSC2_PWRUP_WIDTH             equ     (1)
                              427 HW_SPEED_OSC2_START_COUNT_WIDTH       equ     (1)
                              428 HW_SPEED_RSVD2_WIDTH                  equ     (2)
                              429 HW_SPEED_RINGOSC2_WIDTH               equ     (7)
                              430 HW_SPEED_RSVD3_WIDTH                  equ     (1)
                              434 HW_SPEED_OSC1_PWRUP_BITPOS            equ     (0)
                              435 HW_SPEED_OSC1_START_COUNT_BITPOS      equ     (1)
                              436 HW_SPEED_RINGOSC1_BITPOS              equ     (4)
                              437 HW_SPEED_OSC2_PWRUP_BITPOS            equ     (12)
                              438 HW_SPEED_OSC2_START_COUNT_BITPOS      equ     (13)
                              439 HW_SPEED_RINGOSC2_BITPOS              equ     (16)
                              442 HW_SPEED_OSC1_PWRUP_SETMASK           equ     (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                              443 HW_SPEED_OSC1_START_COUNT_SETMASK     equ     (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                              444 HW_SPEED_RINGOSC1_SETMASK             equ     (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                              445 HW_SPEED_OSC2_PWRUP_SETMASK           equ     (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                              447 HW_SPEED_OSC2_START_COUNT_SETMASK     equ     (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                              448 HW_SPEED_RINGOSC2_SETMASK             equ     (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                              452 HW_SPEED_OSC1_PWRUP_CLRMASK        equ    (~HW_SPEED_OSC1_PWRUP_SETMASK)     
                              453 HW_SPEED_OSC1_START_COUNT_CLRMASK  equ    (~HW_SPEED_OSC1_START_COUNT_SETMASK)     
                              454 HW_SPEED_RINGOSC1_CLRMASK          equ    (~HW_SPEED_RINGOSC1_SETMASK) 
                              455 HW_SPEED_OSC2_PWRUP_CLRMASK        equ    (~HW_SPEED_OSC2_PWRUP_SETMASK)   
                              456 HW_SPEED_OSC2_START_COUNT_CLRMASK  equ    (~HW_SPEED_OSC2_START_COUNT_SETMASK)     
                              457 HW_SPEED_RINGOSC2_CLRMASK          equ    (~HW_SPEED_RINGOSC2_SETMASK) 
                              459  
                              460 ;C insert
                              461 ;typedef union               
                              462 ;{
                              463 ;    struct {
                              464 ;        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                              465 ;        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                              466 ;        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                              467 ;        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                              468 ;        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                              469 ;        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                              470 ;        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                              471 ;        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                              472 ;        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                              473 ;        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                              474 ;    } B;
                              475 ;    unsigned int I;
                              476 ;} speed_type;
                              477 ;#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                              478 ;endc
                              480  
                              482  
                              484  
                              486 ; DC DC Test Bit Register (HW_DCDCTBR) Definitions
                              487 HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH                   equ 4
                              488 HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH                 equ 1
                              489 HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH                  equ 1
                              490 HW_DCDC_TBR_DCDC1_CLK4X_WIDTH                    equ 1
                              491 HW_DCDC_TBR_DCDC1_CLK2X_WIDTH                    equ 1
                              492 HW_DCDC_TBR_DCDC1_NOZERO_WIDTH                   equ 1
                              493 HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH             equ 1
                              494 HW_DCDC_TBR_DCDC1_PFM_WIDTH                      equ 1
                              495 HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH                  equ 1
                              496 HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH             equ 1
                              497 HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH                 equ 1
                              498 HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH                  equ 1
                              499 HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH              equ 1
                              500 HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH               equ 1
                              501 HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH                equ 1
                              502 HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH                 equ 1
                              503 HW_DCDC_TBR_DCDC2_CLK4X_WIDTH                    equ 1
                              504 HW_DCDC_TBR_DCDC2_CLK2X_WIDTH                    equ 1
                              505 HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH             equ 1
                              506 HW_DCDC_TBR_DCDC2_PFM_WIDTH                      equ 1
                              507 HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH                  equ 1
                              509 HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS              equ    (0)
                              510 HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS            equ        (4)
                              511 HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS             equ    (5)
                              512 HW_DCDC_TBR_DCDC1_CLK4X_BITPOS               equ        (6)
                              513 HW_DCDC_TBR_DCDC1_CLK2X_BITPOS               equ        (7)
                              514 HW_DCDC_TBR_DCDC1_NOZERO_BITPOS              equ        (8)
                              515 HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS        equ        (9)
                              516 HW_DCDC_TBR_DCDC1_PFM_BITPOS                 equ        (10)
                              517 HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS             equ        (11)
                              518 HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS        equ        (12)
                              519 HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS            equ        (13)
                              520 HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS             equ        (14)
                              521 HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS    equ    (15)
                              522 HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS          equ        (16)
                              523 HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS           equ        (17)
                              524 HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS            equ        (18)
                              525 HW_DCDC_TBR_DCDC2_CLK4X_BITPOS               equ        (19)
                              526 HW_DCDC_TBR_DCDC2_CLK2X_BITPOS               equ        (20)
                              527 HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS        equ        (21)
                              528 HW_DCDC_TBR_DCDC2_PFM_BITPOS                 equ        (22)
                              529 HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS             equ        (23)
                              531 HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK             equ    (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                              532 HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK            equ    (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                              533 HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK   equ    (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                              535 HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK             equ    (~HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                              536 HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK            equ    (~HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                              537 HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK   equ    (~HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                              539 ; Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                              540 HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE         equ    ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                              541 HW_DCDC_TBR_VDDD_HI_VALUE                    equ    ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                              542 HW_DCDC_TBR_VDDD_LO_VALUE                    equ    (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_D
                                  CDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                              544 ;C insert
                              545 ;typedef union               
                              546 ;{
                              547 ;    struct {
                              548 ;        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                              549 ;        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                              550 ;        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                              551 ;        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                              552 ;        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                              553 ;        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                              554 ;        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                              555 ;        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                              556 ;        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                              557 ;        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                              558 ;        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                              559 ;        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                              560 ;        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                              561 ;        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                              562 ;        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                              563 ;        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                              564 ;        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                              565 ;        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                              566 ;        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                              567 ;        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                              568 ;        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                              569 ;    } B;
                              570 ;    unsigned int I;
                              571 ;} usb_dcdctbr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              573 ;#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                              574 ;endc
                              577 ;///////////////////////////////////////////////////////////////////////////////
                              579 ;  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                              581 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH       equ     (6)
                              582 HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH              equ     (2)
                              583 HW_VDD5V_PWR_CHARGE_PWD_WIDTH                equ     (1)
                              584 HW_VDD5V_PWR_CHARGE_RES_WIDTH                equ     (1)
                              585 HW_VDD5V_PWR_CHARGE_NIMH_WIDTH               equ     (1)
                              586 HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH            equ     (1)
                              587 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH     equ     (1)
                              588 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH   equ     (1)
                              589 HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH           equ     (1)
                              590 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH       equ     (1)
                              591 HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH           equ     (1)
                              592 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH         equ     (1)
                              593 HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH              equ     (2)
                              594 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH      equ     (1)
                              595 HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH          equ     (2)
                              596 HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH              equ     (3)
                              598 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS      equ     (0)
                              599 HW_VDD5V_PWR_CHARGE_PWD_BITPOS               equ     (8)
                              600 HW_VDD5V_PWR_CHARGE_RES_BITPOS               equ     (9)
                              601 HW_VDD5V_PWR_CHARGE_NIMH_BITPOS              equ     (10)
                              603 HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS           equ     (11)
                              604 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS    equ     (12)
                              605 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS  equ     (13)
                              606 HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS          equ     (14)
                              607 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS      equ     (15)
                              608 HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS          equ     (16)
                              609 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS        equ     (17)
                              610 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS     equ     (20)
                              611 HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS         equ     (21)
                              613 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK     equ     (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                              614 HW_VDD5V_PWR_CHARGE_PWD_SETMASK              equ     (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                              615 HW_VDD5V_PWR_CHARGE_RES_SETMASK              equ     (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                              616 HW_VDD5V_PWR_CHARGE_NIMH_SETMASK             equ     (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                              617 HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK          equ     (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                              618 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK   equ     (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                              619 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK equ     (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                              620 HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK         equ     (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                              621 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK     equ     (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                              622 HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK         equ     (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                              623 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK       equ     (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                              624 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK    equ     (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                              625 HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK        equ     (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                              628 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK     equ    (~HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                              629 HW_VDD5V_PWR_CHARGE_PWD_CLRMASK              equ    (~HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                              630 HW_VDD5V_PWR_CHARGE_RES_CLRMASK              equ    (~HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                              631 HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK             equ    (~HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                              632 HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK          equ    (~HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                              633 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK   equ    (~HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                              634 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK equ    (~HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                              635 HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK         equ    (~HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                              636 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK     equ    (~HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                              637 HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK         equ    (~HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                              638 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK       equ    (~HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                              639 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK    equ    (~HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                              640 HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK        equ    (~HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                              641  
                              642 ;C insert
                              643 ;typedef union               
                              644 ;{
                              645 ;    struct {
                              646 ;        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                              647 ;        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                              648 ;        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                              649 ;        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                              650 ;        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                              651 ;        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                              652 ;        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                              653 ;        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                              654 ;        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                              655 ;        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                              656 ;        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                              657 ;        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                              658 ;        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                              659 ;        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                              660 ;        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                              661 ;    } B;
                              662 ;    unsigned int I;
                              663 ;} usb_pwr_charge_type;
                              664  
                              665 ;#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                              666 ;endc
                              668 HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH             equ 1
                              669 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH    equ 1
                              670 HW_DCDC_PERSIST_UPDATE_WIDTH                        equ 1
                              671 HW_DCDC_PERSIST_AUTO_RESTART_WIDTH                  equ 1
                              672 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH         equ 1
                              673 HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH                 equ 1
                              674 HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH            equ 1
                              675 HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH             equ 1
                              676 HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH                    equ 1
                              677 HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH                    equ 1
                              678 HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH               equ 1
                              679 HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH               equ 1
                              680 HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH               equ 1
                              681 HW_DCDC_PERSIST_RSRVD_WIDTH                         equ 2
                              683 HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS             equ 12
                              684 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS    equ 11
                              685 HW_DCDC_PERSIST_UPDATE_BITPOS                        equ 10
                              686 HW_DCDC_PERSIST_AUTO_RESTART_BITPOS                  equ 9
                              687 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS         equ 8 
                              688 HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS                 equ 7
                              689 HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS            equ 6
                              690 HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS             equ 5
                              691 HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS                    equ 4
                              692 HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS                    equ 3
                              693 HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS               equ 2
                              694 HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS               equ 1
                              695 HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS               equ 0
                              696  
                              697 ;C insert
                              698 ;typedef union               
                              699 ;{
                              700 ;    struct {       
                              701 ;       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                              702 ;       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                              703 ;       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                              704 ;       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                              705 ;       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                              706 ;       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                              707 ;       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                              708 ;       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                              709 ;       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                              710 ;       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                              711 ;       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                              712 ;       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                              713 ;       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                              714 ;       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                              715 ;    } B;
                              716 ;    int I;
                              717 ;} usb_dcdcpersist_type;
                              720 ;#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                              721 ;endc
                              727  
                               22         include "regsecc.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ; Filename: regsecc.inc
                                5 ; Description: Register definitions for ECC interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regseccinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               41 ;   ECC STMP Registers 
                               42 ;   Last Updated 2.26.2003 J. Ferrara
                               43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               45 HW_ECC_BASEADDR             equ     ($F780)
                               47  
                               49 ;ASM Only
                               51  
                               52 HW_ECC_CSR0                  equ     (HW_ECC_BASEADDR+0)
                               53 HW_ECC_CSR1                  equ     (HW_ECC_BASEADDR+1)
                               54 HW_ECC_RSCFG                 equ     (HW_ECC_BASEADDR+2)
                               55 HW_ECC_SSFDCCFG              equ     (HW_ECC_BASEADDR+3)
                               56 HW_ECC_BLKSTRTADDR           equ     (HW_ECC_BASEADDR+4)
                               57 HW_ECC_BLKSTRTINDEX          equ     (HW_ECC_BASEADDR+5)
                               58 HW_ECC_PARSTRTADDR           equ     (HW_ECC_BASEADDR+6)
                               59 HW_ECC_PARSTRTINDEX          equ     (HW_ECC_BASEADDR+7)
                               60 HW_ECC_LOCADDR               equ     (HW_ECC_BASEADDR+8)
                               61 HW_ECC_LOCINDEX              equ     (HW_ECC_BASEADDR+9)
                               62 HW_ECC_ERRVAL                equ     (HW_ECC_BASEADDR+10)
                               64 ;endasm
                               66 ;///////////////////////////////////////////////////////////////////////////////
                               68 ;  ECC Control Status Register0 (HW_ECC_CSR0) Bit Definitions
                               70 HW_ECC_CSR0_ECCKICK_BITPOS              equ     (0)
                               71 HW_ECC_CSR0_AUTOCORR_BITPOS             equ     (1)
                               72 HW_ECC_CSR0_RSVD0_BITPOS                equ     (2)
                               73 HW_ECC_CSR0_DONEINTEN_BITPOS            equ     (3)
                               74 HW_ECC_CSR0_KESINTEN_BITPOS             equ     (5)
                               75 HW_ECC_CSR0_CORRINTEN_BITPOS            equ     (6)
                               76 HW_ECC_CSR0_UNCORRINTEN_BITPOS          equ     (7)
                               77 HW_ECC_CSR0_ERRINTEN_BITPOS             equ     (8)
                               78 HW_ECC_CSR0_RSVD1_BITPOS                equ     (9)
                               79 HW_ECC_CSR0_DMAWAIT_BITPOS              equ     (12)
                               80 HW_ECC_CSR0_ECCSEL_BITPOS               equ     (16)
                               81 HW_ECC_CSR0_RSVD2_BITPOS                equ     (19)
                               82 HW_ECC_CSR0_SFTRST_BITPOS               equ     (23)
                               84 HW_ECC_CSR0_ECCKICK_WIDTH               equ     (1)        
                               85 HW_ECC_CSR0_AUTOCORR_WIDTH              equ     (1)
                               86 HW_ECC_CSR0_RSVD0_WIDTH                 equ     (2)
                               87 HW_ECC_CSR0_DONEINTEN_WIDTH             equ     (1)
                               88 HW_ECC_CSR0_KESINTEN_WIDTH              equ     (1)
                               89 HW_ECC_CSR0_CORRINTEN_WIDTH             equ     (1)
                               90 HW_ECC_CSR0_UNCORRINTEN_WIDTH           equ     (1)
                               91 HW_ECC_CSR0_ERRINTEN_WIDTH              equ     (1)
                               92 HW_ECC_CSR0_RSVD1_WIDTH                 equ     (3)
                               93 HW_ECC_CSR0_DMAWAIT_WIDTH               equ     (4)
                               94 HW_ECC_CSR0_ECCSEL_WIDTH                equ     (3)
                               95 HW_ECC_CSR0_RSVD2_WIDTH                 equ     (4)
                               96 HW_ECC_CSR0_SFTRST_WIDTH                equ     (1)
                               97    
                               98 HW_ECC_CSR0_ECCKICK_SETMASK              equ     (((1<<HW_ECC_CSR0_ECCKICK_WIDTH)-1)<<HW_ECC_CSR0_ECCKICK_BITPOS) 
                               99 HW_ECC_CSR0_AUTOCORR_SETMASK             equ     (((1<<HW_ECC_CSR0_AUTOCORR_WIDTH)-1)<<HW_ECC_CSR0_AUTOCORR_BITPOS)
                              100 HW_ECC_CSR0_RSVD0_SETMASK                equ     (((1<<HW_ECC_CSR0_RSVD0_WIDTH)-1)<<HW_ECC_CSR0_RSVD0_BITPOS) 
                              101 HW_ECC_CSR0_DONEINTEN_SETMASK            equ     (((1<<HW_ECC_CSR0_DONEINTEN_WIDTH)-1)<<HW_ECC_CSR0_DONEINTEN_BITPOS) 
                              102 HW_ECC_CSR0_KESINTEN_SETMASK             equ     (((1<<HW_ECC_CSR0_KESINTEN_WIDTH)-1)<<HW_ECC_CSR0_KESINTEN_BITPOS) 
                              103 HW_ECC_CSR0_CORRINTEN_SETMASK            equ     (((1<<HW_ECC_CSR0_CORRINTEN_WIDTH)-1)<<HW_ECC_CSR0_CORRINTEN_BITPOS) 
                              104 HW_ECC_CSR0_UNCORRINTEN_SETMASK          equ     (((1<<HW_ECC_CSR0_UNCORRINTEN_WIDTH)-1)<<HW_ECC_CSR0_UNCORRINTEN_BITPOS) 
                              105 HW_ECC_CSR0_ERRINTEN_SETMASK             equ     (((1<<HW_ECC_CSR0_ERRINTEN_WIDTH)-1)<<HW_ECC_CSR0_ERRINTEN_BITPOS) 
                              106 HW_ECC_CSR0_RSVD1_SETMASK                equ     (((1<<HW_ECC_CSR0_RSVD1_WIDTH)-1)<<HW_ECC_CSR0_RSVD1_BITPOS) 
                              107 HW_ECC_CSR0_DMAWAIT_SETMASK              equ     (((1<<HW_ECC_CSR0_DMAWAIT_WIDTH)-1)<<HW_ECC_CSR0_DMAWAIT_BITPOS) 
                              108 HW_ECC_CSR0_ECCSEL_SETMASK               equ     (((1<<HW_ECC_CSR0_ECCSEL_WIDTH)-1)<<HW_ECC_CSR0_ECCSEL_BITPOS) 
                              109 HW_ECC_CSR0_RSVD2_SETMASK                equ     (((1<<HW_ECC_CSR0_RSVD2_WIDTH)-1)<<HW_ECC_CSR0_RSVD2_BITPOS) 
                              110 HW_ECC_CSR0_SFTRST_SETMASK               equ     (((1<<HW_ECC_CSR0_SFTRST_WIDTH)-1)<<HW_ECC_CSR0_SFTRST_BITPOS) 
                              111   
                              112 HW_ECC_CSR0_ECCKICK_CLRMASK              equ     (~HW_ECC_CSR0_ECCKICK_SETMASK)
                              113 HW_ECC_CSR0_AUTOCORR_CLRMASK             equ     (~HW_ECC_CSR0_AUTOCORR_SETMASK)
                              114 HW_ECC_CSR0_RSVD0_CLRMASK                equ     (~HW_ECC_CSR0_RSVD0_SETMASK)
                              115 HW_ECC_CSR0_DONEINTEN_CLRMASK            equ     (~HW_ECC_CSR0_DONEINTEN_SETMASK)
                              116 HW_ECC_CSR0_KESINTEN_CLRMASK             equ     (~HW_ECC_CSR0_KESINTEN_SETMASK)
                              117 HW_ECC_CSR0_CORRINTEN_CLRMASK            equ     (~HW_ECC_CSR0_CORRINTEN_SETMASK)
                              118 HW_ECC_CSR0_UNCORRINTEN_CLRMASK          equ     (~HW_ECC_CSR0_UNCORRINTEN_SETMASK)
                              119 HW_ECC_CSR0_ERRINTEN_CLRMASK             equ     (~HW_ECC_CSR0_ERRINTEN_SETMASK)
                              120 HW_ECC_CSR0_RSVD1_CLRMASK                equ     (~HW_ECC_CSR0_RSVD1_SETMASK)
                              121 HW_ECC_CSR0_DMAWAIT_CLRMASK              equ     (~HW_ECC_CSR0_DMAWAIT_SETMASK)
                              122 HW_ECC_CSR0_ECCSEL_CLRMASK               equ     (~HW_ECC_CSR0_ECCSEL_SETMASK)
                              123 HW_ECC_CSR0_RSVD2_CLRMASK                equ     (~HW_ECC_CSR0_RSVD2_SETMASK)
                              124 HW_ECC_CSR0_SFTRST_CLRMASK               equ     (~HW_ECC_CSR0_SFTRST_SETMASK)
                              125  
                              126 ;C insert
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              128 ;typedef union               
                              130 ;{
                              132 ;    struct {
                              133 ;        int ECCKICK         : HW_ECC_CSR0_ECCKICK_WIDTH;
                              134 ;        int AUTOCORR        : HW_ECC_CSR0_AUTOCORR_WIDTH;
                              135 ;        int RSVD0           : HW_ECC_CSR0_RSVD0_WIDTH;
                              136 ;        int DONEINTEN       : HW_ECC_CSR0_DONEINTEN_WIDTH;
                              137 ;        int KESINTEN        : HW_ECC_CSR0_KESINTEN_WIDTH;
                              138 ;        int CORRINTEN       : HW_ECC_CSR0_CORRINTEN_WIDTH;
                              139 ;        int UNCORRINTEN     : HW_ECC_CSR0_UNCORRINTEN_WIDTH;
                              140 ;        int ERRINTEN        : HW_ECC_CSR0_ERRINTEN_WIDTH;
                              141 ;        int RSVD1           : HW_ECC_CSR0_RSVD1_WIDTH;
                              142 ;        int DMAWAIT         : HW_ECC_CSR0_DMAWAIT_WIDTH;
                              143 ;        int ECCSEL          : HW_ECC_CSR0_ECCSEL_WIDTH;
                              144 ;        int RSVD2           : HW_ECC_CSR0_RSVD2_WIDTH;
                              145 ;        int SFTRST          : HW_ECC_CSR0_SFTRST_WIDTH;
                              146 ;    } B;
                              148 ;    int I;
                              149 ;    unsigned int U;
                              151 ;} ecc_csr0_type;
                              153  
                              155 ;#define HW_ECC_CSR0      (*(volatile ecc_csr0_type _X*) (HW_ECC_BASEADDR+0))    /* ECC Control / Status Register0 */
                              157 ;endc
                              158  
                              159 ;//////////////////////////////////////////////////////////////////////////
                              160 ;  ECC Control Status Register1 (HW_ECC_CSR1) Bit Definitions
                              162 HW_ECC_CSR1_RSVD0_BITPOS                equ     (0)
                              163 HW_ECC_CSR1_DONEINT_BITPOS              equ     (4)
                              164 HW_ECC_CSR1_KESINT_BITPOS               equ     (5)
                              165 HW_ECC_CSR1_CORRINT_BITPOS              equ     (6)
                              166 HW_ECC_CSR1_UNCORRINT_BITPOS            equ     (7)
                              167 HW_ECC_CSR1_ERRINT_BITPOS               equ     (8)
                              168 HW_ECC_CSR1_RSVD1_BITPOS                equ     (9)
                              169 HW_ECC_CSR1_ECCEXCEPTION_BITPOS         equ     (12)
                              170 HW_ECC_CSR1_ECCERRORS_BITPOS            equ     (16)
                              171 HW_ECC_CSR1_RSVD2_BITPOS                equ     (19)
                              173 HW_ECC_CSR1_RSVD0_WIDTH                 equ     (4)
                              174 HW_ECC_CSR1_DONEINT_WIDTH               equ     (1)
                              175 HW_ECC_CSR1_KESINT_WIDTH                equ     (1)
                              176 HW_ECC_CSR1_CORRINT_WIDTH               equ     (1)
                              177 HW_ECC_CSR1_UNCORRINT_WIDTH             equ     (1)
                              178 HW_ECC_CSR1_ERRINT_WIDTH                equ     (1)
                              179 HW_ECC_CSR1_RSVD1_WIDTH                 equ     (3)
                              180 HW_ECC_CSR1_ECCEXCEPTION_WIDTH          equ     (4)
                              181 HW_ECC_CSR1_ECCERRORS_WIDTH             equ     (3)
                              182 HW_ECC_CSR1_RSVD2_WIDTH                 equ     (5)
                              183                         
                              184 HW_ECC_CSR1_RSVD0_SETMASK                equ     (((1<<HW_ECC_CSR1_RSVD0_WIDTH)-1)<<HW_ECC_CSR1_RSVD0_BITPOS) 
                              185 HW_ECC_CSR1_DONEINT_SETMASK              equ     (((1<<HW_ECC_CSR1_DONEINT_WIDTH)-1)<<HW_ECC_CSR1_DONEINT_BITPOS) 
                              186 HW_ECC_CSR1_KESINT_SETMASK               equ     (((1<<HW_ECC_CSR1_KESINT_WIDTH)-1)<<HW_ECC_CSR1_KESINT_BITPOS) 
                              187 HW_ECC_CSR1_CORRINT_SETMASK              equ     (((1<<HW_ECC_CSR1_CORRINT_WIDTH)-1)<<HW_ECC_CSR1_CORRINT_BITPOS) 
                              188 HW_ECC_CSR1_UNCORRINT_SETMASK            equ     (((1<<HW_ECC_CSR1_UNCORRINT_WIDTH)-1)<<HW_ECC_CSR1_UNCORRINT_BITPOS) 
                              189 HW_ECC_CSR1_ERRINT_SETMASK               equ     (((1<<HW_ECC_CSR1_ERRINT_WIDTH)-1)<<HW_ECC_CSR1_ERRINT_BITPOS) 
                              190 HW_ECC_CSR1_RSVD1_SETMASK                equ     (((1<<HW_ECC_CSR1_RSVD1_WIDTH)-1)<<HW_ECC_CSR1_RSVD1_BITPOS) 
                              191 HW_ECC_CSR1_ECCEXCEPTION_SETMASK         equ     (((1<<HW_ECC_CSR1_ECCEXCEPTION_WIDTH)-1)<<HW_ECC_CSR1_ECCEXCEPTION_BITPOS) 
                              192 HW_ECC_CSR1_ECCERRORS_SETMASK            equ     (((1<<HW_ECC_CSR1_ECCERRORS_WIDTH)-1)<<HW_ECC_CSR1_ECCERRORS_BITPOS) 
                              193 HW_ECC_CSR1_RSVD2_SETMASK                equ     (((1<<HW_ECC_CSR1_RSVD2_WIDTH)-1)<<HW_ECC_CSR1_RSVD2_BITPOS) 
                              194   
                              195 HW_ECC_CSR1_RSVD0_CLRMASK                equ     (~HW_ECC_CSR1_RSVD0_SETMASK)
                              196 HW_ECC_CSR1_DONEINT_CLRMASK              equ     (~HW_ECC_CSR1_DONEINT_SETMASK)
                              197 HW_ECC_CSR1_KESINT_CLRMASK               equ     (~HW_ECC_CSR1_KESINT_SETMASK)
                              198 HW_ECC_CSR1_CORRINT_CLRMASK              equ     (~HW_ECC_CSR1_CORRINT_SETMASK)
                              199 HW_ECC_CSR1_UNCORRINT_CLRMASK            equ     (~HW_ECC_CSR1_UNCORRINT_SETMASK)
                              200 HW_ECC_CSR1_ERRINT_CLRMASK               equ     (~HW_ECC_CSR1_ERRINT_SETMASK)
                              201 HW_ECC_CSR1_RSVD1_CLRMASK                equ     (~HW_ECC_CSR1_RSVD1_SETMASK)
                              202 HW_ECC_CSR1_ECCEXCEPTION_CLRMASK         equ     (~HW_ECC_CSR1_ECCEXCEPTION_SETMASK)
                              203 HW_ECC_CSR1_ECCERRORS_CLRMASK            equ     (~HW_ECC_CSR1_ECCERRORS_SETMASK)
                              204 HW_ECC_CSR1_RSVD2_CLRMASK                equ     (~HW_ECC_CSR1_RSVD2_SETMASK)
                              205  
                              206 ;C insert
                              208 ;typedef union               
                              210 ;{
                              212 ;    struct {
                              213 ;        int RSVD0           : HW_ECC_CSR1_RSVD0_WIDTH;
                              214 ;        int DONEINT         : HW_ECC_CSR1_DONEINT_WIDTH;
                              215 ;        int KESINT          : HW_ECC_CSR1_KESINT_WIDTH;
                              216 ;        int CORRINT         : HW_ECC_CSR1_CORRINT_WIDTH;
                              217 ;        int UNCORRIN        : HW_ECC_CSR1_UNCORRINT_WIDTH;
                              218 ;        int ERRINT          : HW_ECC_CSR1_ERRINT_WIDTH;
                              219 ;        int RSVD1           : HW_ECC_CSR1_RSVD1_WIDTH;
                              220 ;        int ECCEXCEPTION    : HW_ECC_CSR1_ECCEXCEPTION_WIDTH;
                              221 ;        int ECCERRORS       : HW_ECC_CSR1_ECCERRORS_WIDTH;
                              222 ;        int RSVD2           : HW_ECC_CSR1_RSVD2_WIDTH;
                              223 ;    } B;
                              225 ;    int I;
                              226 ;    unsigned int U;
                              228 ;} ecc_csr1_type;
                              230 ;#define HW_ECC_CSR1      (*(volatile ecc_csr1_type _X*) (HW_ECC_BASEADDR+1))    /* ECC Control / Status Register1 */
                              232 ;endc
                              234 ;//////////////////////////////////////////////////////////////////////////
                              235 ;  ECC Reed_solomon Control Status Register (HW_ECC_RSCFG) Bit Definitions
                              237 HW_ECC_RSCFG_SYMBOLSIZE_BITPOS          equ     (0)
                              238 HW_ECC_RSCFG_BLOCKSIZE_BITPOS           equ     (4)
                              239 HW_ECC_RSCFG_RSVD0_BITPOS               equ     (13)
                              240 HW_ECC_RSCFG_BYTEEN_BITPOS              equ     (20)
                              241 HW_ECC_RSCFG_RSCFGERR_BITPOS            equ     (21)
                              242 HW_ECC_RSCFG_DECSFTRST_BITPOS           equ     (22)
                              243 HW_ECC_RSCFG_ENCSFTRST_BITPOS           equ     (23)
                              245 HW_ECC_RSCFG_SYMBOLSIZE_WIDTH           equ     (4)
                              246 HW_ECC_RSCFG_BLOCKSIZE_WIDTH            equ     (9)
                              247 HW_ECC_RSCFG_RSVD0_WIDTH                equ     (7)
                              248 HW_ECC_RSCFG_BYTEEN_WIDTH               equ     (1)
                              249 HW_ECC_RSCFG_RSCFGERR_WIDTH             equ     (1)
                              250 HW_ECC_RSCFG_DECSFTRST_WIDTH            equ     (1)
                              251 HW_ECC_RSCFG_ENCSFTRST_WIDTH            equ     (1)
                              252                         
                              253 HW_ECC_RSCFG_SYMBOLSIZE_SETMASK         equ     (((1<<HW_ECC_RSCFG_SYMBOLSIZE_WIDTH)-1)<<HW_ECC_RSCFG_SYMBOLSIZE_BITPOS) 
                              254 HW_ECC_RSCFG_BLOCKSIZE_SETMASK          equ     (((1<<HW_ECC_RSCFG_BLOCKSIZE_WIDTH)-1)<<HW_ECC_RSCFG_BLOCKSIZE_BITPOS) 
                              255 HW_ECC_RSCFG_RSVD0_SETMASK              equ     (((1<<HW_ECC_RSCFG_RSVD0_WIDTH)-1)<<HW_ECC_RSCFG_RSVD0_BITPOS) 
                              256 HW_ECC_RSCFG_BYTEEN_SETMASK             equ     (((1<<HW_ECC_RSCFG_BYTEEN_WIDTH)-1)<<HW_ECC_RSCFG_BYTEEN_BITPOS) 
                              257 HW_ECC_RSCFG_RSCFGERR_SETMASK           equ     (((1<<HW_ECC_RSCFG_RSCFGERR_WIDTH)-1)<<HW_ECC_RSCFG_RSCFGERR_BITPOS) 
                              258 HW_ECC_RSCFG_DECSFTRST_SETMASK          equ     (((1<<HW_ECC_RSCFG_DECSFTRST_WIDTH)-1)<<HW_ECC_RSCFG_DECSFTRST_BITPOS) 
                              259 HW_ECC_RSCFG_ENCSFTRST_SETMASK          equ     (((1<<HW_ECC_RSCFG_ENCSFTRST_WIDTH)-1)<<HW_ECC_RSCFG_ENCSFTRST_BITPOS) 
                              260   
                              261 HW_ECC_RSCFG_SYMBOLSIZE_CLRMASK         equ     (~HW_ECC_RSCFG_SYMBOLSIZE_SETMASK)
                              262 HW_ECC_RSCFG_BLOCKSIZE_CLRMASK          equ     (~HW_ECC_RSCFG_BLOCKSIZE_SETMASK)
                              263 HW_ECC_RSCFG_RSVD0_CLRMASK              equ     (~HW_ECC_RSCFG_RSVD0_SETMASK)
                              264 HW_ECC_RSCFG_BYTEEN_CLRMASK             equ     (~HW_ECC_RSCFG_BYTEEN_SETMASK)
                              265 HW_ECC_RSCFG_RSCFGERR_CLRMASK           equ     (~HW_ECC_RSCFG_RSCFGERR_SETMASK)
                              266 HW_ECC_RSCFG_DECSFTRST_CLRMASK          equ     (~HW_ECC_RSCFG_DECSFTRST_SETMASK)
                              267 HW_ECC_RSCFG_ENCSFTRST_CLRMASK          equ     (~HW_ECC_RSCFG_ENCSFTRST_SETMASK)
                              269 ;C insert
                              271 ;typedef union               
                              273 ;{
                              275 ;    struct {
                              276 ;        int SYMBOLSIZE      : HW_ECC_RSCFG_SYMBOLSIZE_WIDTH;
                              277 ;        int BLOCKSIZE       : HW_ECC_RSCFG_BLOCKSIZE_WIDTH;
                              278 ;        int RSVD0           : HW_ECC_RSCFG_RSVD0_WIDTH;
                              279 ;        int BYTEEN          : HW_ECC_RSCFG_BYTEEN_WIDTH;
                              280 ;        int RSCFGERR        : HW_ECC_RSCFG_RSCFGERR_WIDTH;
                              281 ;        int DECSFTRST       : HW_ECC_RSCFG_DECSFTRST_WIDTH;
                              282 ;        int ENCSFTRST       : HW_ECC_RSCFG_ENCSFTRST_WIDTH;
                              283 ;    } B;
                              285 ;    int I;
                              286 ;    unsigned int U;
                              288 ;} ecc_rscfg_type;
                              290 ;#define HW_ECC_RSCFG      (*(volatile ecc_rscfg_type _X*) (HW_ECC_BASEADDR+2))    /* ECC Reed-Solomon Control Register */
                              292 ;endc
                              294 ;//////////////////////////////////////////////////////////////////////////
                              295 ;  ECC SSFDC Control Status Register (HW_ECC_SSFDCCFG) Bit Definitions
                              297 HW_ECC_SSFDCCFG_SYMBOLSIZE_BITPOS          equ     (0)
                              298 HW_ECC_SSFDCCFG_BLOCKSIZE_BITPOS           equ     (4)
                              299 HW_ECC_SSFDCCFG_RSVD0_BITPOS               equ     (13)
                              300 HW_ECC_SSFDCCFG_SFTRST_BITPOS              equ     (23)
                              302 HW_ECC_SSFDCCFG_SYMBOLSIZE_WIDTH           equ     (4)
                              303 HW_ECC_SSFDCCFG_BLOCKSIZE_WIDTH            equ     (9)
                              304 HW_ECC_SSFDCCFG_RSVD0_WIDTH                equ     (7)
                              305 HW_ECC_SSFDCCFG_SFTRST_WIDTH               equ     (1)
                              306                         
                              307 HW_ECC_SSFDCCFG_SYMBOLSIZE_SETMASK         equ     (((1<<HW_ECC_SSFDCCFG_SYMBOLSIZE_WIDTH)-1)<<HW_ECC_SSFDCCFG_SYMBOLSIZE_BITPOS) 
                              308 HW_ECC_SSFDCCFG_BLOCKSIZE_SETMASK          equ     (((1<<HW_ECC_SSFDCCFG_BLOCKSIZE_WIDTH)-1)<<HW_ECC_SSFDCCFG_BLOCKSIZE_BITPOS) 
                              309 HW_ECC_SSFDCCFG_RSVD0_SETMASK              equ     (((1<<HW_ECC_SSFDCCFG_RSVD0_WIDTH)-1)<<HW_ECC_SSFDCCFG_RSVD0_BITPOS) 
                              310 HW_ECC_SSFDCCFG_SFTRST_SETMASK             equ     (((1<<HW_ECC_SSFDCCFG_SFTRST_WIDTH)-1)<<HW_ECC_SSFDCCFG_SFTRST_BITPOS) 
                              312 HW_ECC_SSFDCCFG_SYMBOLSIZE_CLRMASK         equ     (~HW_ECC_SSFDCCFG_SYMBOLSIZE_SETMASK)
                              313 HW_ECC_SSFDCCFG_BLOCKSIZE_CLRMASK          equ     (~HW_ECC_SSFDCCFG_BLOCKSIZE_SETMASK)
                              314 HW_ECC_SSFDCCFG_RSVD0_CLRMASK              equ     (~HW_ECC_SSFDCCFG_RSVD0_SETMASK)
                              315 HW_ECC_SSFDCCFG_ESFTRST_CLRMASK            equ     (~HW_ECC_SSFDCCFG_SFTRST_SETMASK)
                              317 ;C insert
                              319 ;typedef union               
                              321 ;{
                              323 ;    struct {
                              324 ;        int SYMBOLSIZE      : HW_ECC_SSFDCCFG_SYMBOLSIZE_WIDTH;
                              325 ;        int BLOCKSIZE       : HW_ECC_SSFDCCFG_BLOCKSIZE_WIDTH;
                              326 ;        int RSVD0           : HW_ECC_SSFDCCFG_RSVD0_WIDTH;
                              327 ;        int ESFTRST         : HW_ECC_SSFDCCFG_SFTRST_WIDTH;
                              328 ;    } B;
                              330 ;    int I;
                              331 ;    unsigned int U;
                              333 ;} ecc_ssfdccfg_type;
                              335 ;#define HW_ECC_SSFDCCFG      (*(volatile ecc_ssfdccfg_type _X*) (HW_ECC_BASEADDR+3))    /* ECC SSFDC Control Register */
                              337 ;endc
                              339 ;//////////////////////////////////////////////////////////////////////////
                              340 ;  ECC Data Block Start Address Register (HW_ECC_BLKSTRTADDR) Bit Definitions
                              342 HW_ECC_BLKSTRTADDR_ADDR_BITPOS                equ     (0)
                              343 HW_ECC_BLKSTRTADDR_RSVD0_BITPOS               equ     (16)
                              345 HW_ECC_BLKSTRTADDR_ADDR_WIDTH                 equ     (16)
                              346 HW_ECC_BLKSTRTADDR_RSVD0_WIDTH                equ     (8)
                              348 HW_ECC_BLKSTRTADDR_ADDR_SETMASK               equ     (((1<<HW_ECC_BLKSTRTADDR_ADDR_WIDTH)-1)<<HW_ECC_BLKSTRTADDR_ADDR_BITPOS)
                              349 HW_ECC_BLKSTRTADDR_RSVD0_SETMASK              equ     (((1<<HW_ECC_BLKSTRTADDR_RSVD0_WIDTH)-1)<<HW_ECC_BLKSTRTADDR_RSVD0_BITPOS) 
                              351 HW_ECC_BLKSTRTADDR_ADDR_CLRMASK               equ     (~HW_ECC_BLKSTRTADDR_ADDR_SETMASK)
                              352 HW_ECC_BLKSTRTADDR_RSVD0_CLRMASK              equ     (~HW_ECC_BLKSTRTADDR_RSVD0_SETMASK)
                              354 ;C insert
                              356 ;typedef union               
                              358 ;{
                              360 ;    struct {
                              361 ;        int ADDR            : HW_ECC_BLKSTRTADDR_ADDR_WIDTH;
                              362 ;        int RSVD0           : HW_ECC_BLKSTRTADDR_RSVD0_WIDTH;
                              364 ;    } B;
                              366 ;    int I;
                              367 ;    unsigned int U;
                              369 ;} ecc_blkstrtaddr_type;
                              371 ;#define HW_ECC_BLKSTRTADDR      (*(volatile ecc_blkstrtaddr_type _X*) (HW_ECC_BASEADDR+4))    /* ECC Block-Start Address */
                              373 ;endc
                              375 ;//////////////////////////////////////////////////////////////////////////
                              376 ;  ECC Block Start Index Register (HW_ECC_BLKSTRTINDEX) Bit Definitions
                              378 HW_ECC_BLKSTRTINDEX_INDEX_BITPOS               equ     (0)
                              379 HW_ECC_BLKSTRTINDEX_RSVD0_BITPOS               equ     (5)
                              380 HW_ECC_BLKSTRTINDEX_MEMSPACE_BITPOS            equ     (8)
                              381 HW_ECC_BLKSTRTINDEX_RSVD1_BITPOS               equ     (10)
                              383 HW_ECC_BLKSTRTINDEX_INDEX_WIDTH                equ     (5)
                              384 HW_ECC_BLKSTRTINDEX_RSVD0_WIDTH                equ     (3)             
                              385 HW_ECC_BLKSTRTINDEX_MEMSPACE_WIDTH             equ     (2)
                              386 HW_ECC_BLKSTRTINDEX_RSVD1_WIDTH                equ     (14)
                              388 HW_ECC_BLKSTRTINDEX_INDEX_SETMASK              equ     (((1<<HW_ECC_BLKSTRTINDEX_INDEX_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_INDEX_BITPOS)
                              389 HW_ECC_BLKSTRTINDEX_RSVD0_SETMASK              equ     (((1<<HW_ECC_BLKSTRTINDEX_RSVD0_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_RSVD0_BITPOS)            
                              390 HW_ECC_BLKSTRTINDEX_MEMSPACE_SETMASK           equ     (((1<<HW_ECC_BLKSTRTINDEX_MEMSPACE_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_MEMSPACE_BITPOS) 
                              391 HW_ECC_BLKSTRTINDEX_RSVD1_SETMASK              equ     (((1<<HW_ECC_BLKSTRTINDEX_RSVD1_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_RSVD1_BITPOS) 
                              393 HW_ECC_BLKSTRTINDEX_INDEX_CLRMASK              equ     (~HW_ECC_BLKSTRTINDEX_INDEX_SETMASK)
                              394 HW_ECC_BLKSTRTINDEX_RSVD0_CLRMASK              equ     (~HW_ECC_BLKSTRTINDEX_RSVD0_SETMASK)
                              395 HW_ECC_BLKSTRTINDEX_MEMSPACE_CLRMASK           equ     (~HW_ECC_BLKSTRTINDEX_MEMSPACE_SETMASK)
                              396 HW_ECC_BLKSTRTINDEX_RSVD1_CLRMASK              equ     (~HW_ECC_BLKSTRTINDEX_RSVD1_SETMASK)
                              398 ;C insert
                              400 ;typedef union               
                              402 ;{
                              404 ;    struct {
                              405 ;        int INDEX           : HW_ECC_BLKSTRTINDEX_INDEX_WIDTH;
                              406 ;        int RSVD1           : HW_ECC_BLKSTRTINDEX_RSVD1_WIDTH;
                              407 ;        int MEMSPACE        : HW_ECC_BLKSTRTINDEX_MEMSPACE_WIDTH;
                              408 ;        int RSVD0           : HW_ECC_BLKSTRTINDEX_RSVD0_WIDTH;
                              409 ;    } B;
                              411 ;    int I;
                              412 ;    unsigned int U;
                              414 ;} ecc_blkstrtindex_type;
                              416 ;#define HW_ECC_BLKSTRTINDEX      (*(volatile ecc_blkstrtindex_type _X*) (HW_ECC_BASEADDR+5))    /* ECC Block-Start Bit-Index */
                              418 ;endc
                              420 ;//////////////////////////////////////////////////////////////////////////
                              421 ;  ECC Parity Start Address Register (HW_ECC_PARSTRTADDR) Bit Definitions
                              423 HW_ECC_PARSTRTADDR_ADDR_BITPOS                equ     (0)
                              424 HW_ECC_PARSTRTADDR_RSVD0_BITPOS               equ     (16)
                              426 HW_ECC_PARSTRTADDR_ADDR_WIDTH                 equ     (16)
                              427 HW_ECC_PARSTRTADDR_RSVD0_WIDTH                equ     (8)
                              429 HW_ECC_PARSTRTADDR_ADDR_SETMASK               equ     (((1<<HW_ECC_PARSTRTADDR_ADDR_WIDTH)-1)<<HW_ECC_PARSTRTADDR_ADDR_BITPOS)  
                              430 HW_ECC_PARSTRTADDR_RSVD0_SETMASK              equ     (((1<<HW_ECC_PARSTRTADDR_RSVD0_WIDTH)-1)<<HW_ECC_PARSTRTADDR_RSVD0_BITPOS) 
                              432 HW_ECC_PARSTRTADDR_ADDR_CLRMASK               equ     (~HW_ECC_PARSTRTADDR_ADDR_SETMASK)
                              433 HW_ECC_PARSTRTADDR_RSVD0_CLRMASK              equ     (~HW_ECC_PARSTRTADDR_RSVD0_SETMASK)
                              435 ;C insert
                              437 ;typedef union               
                              439 ;{
                              441 ;    struct {
                              442 ;        int ADDR            : HW_ECC_PARSTRTADDR_ADDR_WIDTH;
                              443 ;        int RSVD0           : HW_ECC_PARSTRTADDR_RSVD0_WIDTH;
                              444 ;    } B;
                              446 ;    int I;
                              447 ;    unsigned int U;
                              449 ;} ecc_parstrtaddr_type;
                              451 ;#define HW_ECC_PARSTRTADDR      (*(volatile ecc_parstrtaddr_type _X*) (HW_ECC_BASEADDR+6))    /* ECC Parity-Start Address */
                              453 ;endc
                              455 ;//////////////////////////////////////////////////////////////////////////
                              456 ;  ECC Parity Start Index Register (HW_ECC_PARSTRTINDEX) Bit Definitions
                              458 HW_ECC_PARSTRTINDEX_INDEX_BITPOS               equ     (0)
                              459 HW_ECC_PARSTRTINDEX_RSVD0_BITPOS               equ     (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              460 HW_ECC_PARSTRTINDEX_MEMSPACE_BITPOS            equ     (8)
                              461 HW_ECC_PARSTRTINDEX_RSVD1_BITPOS               equ     (10)
                              463 HW_ECC_PARSTRTINDEX_INDEX_WIDTH                equ     (5)
                              464 HW_ECC_PARSTRTINDEX_RSVD0_WIDTH                equ     (3)             
                              465 HW_ECC_PARSTRTINDEX_MEMSPACE_WIDTH             equ     (2)
                              466 HW_ECC_PARSTRTINDEX_RSVD1_WIDTH                equ     (14)
                              467            
                              468 HW_ECC_PARSTRTINDEX_INDEX_SETMASK              equ     (((1<<HW_ECC_PARSTRTINDEX_INDEX_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_INDEX_BITPOS)
                              469 HW_ECC_PARSTRTINDEX_RSVD0_SETMASK              equ     (((1<<HW_ECC_PARSTRTINDEX_RSVD0_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_RSVD0_BITPOS)
                              470 HW_ECC_PARSTRTINDEX_MEMSPACE_SETMASK           equ     (((1<<HW_ECC_PARSTRTINDEX_MEMSPACE_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_MEMSPACE_BITPOS) 
                              471 HW_ECC_PARSTRTINDEX_RSVD1_SETMASK              equ     (((1<<HW_ECC_PARSTRTINDEX_RSVD1_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_RSVD1_BITPOS) 
                              473 HW_ECC_PARSTRTINDEX_INDEX_CLRMASK              equ     (~HW_ECC_PARSTRTINDEX_INDEX_SETMASK)
                              474 HW_ECC_PARSTRTINDEX_RSVD0_CLRMASK              equ     (~HW_ECC_PARSTRTINDEX_RSVD0_SETMASK)
                              475 HW_ECC_PARSTRTINDEX_MEMSPACE_CLRMASK           equ     (~HW_ECC_PARSTRTINDEX_MEMSPACE_SETMASK)
                              476 HW_ECC_PARSTRTINDEX_RSVD1_CLRMASK              equ     (~HW_ECC_PARSTRTINDEX_RSVD1_SETMASK)
                              478 ;C insert
                              480 ;typedef union               
                              482 ;{
                              484 ;    struct {
                              485 ;        int INDEX           : HW_ECC_PARSTRTINDEX_INDEX_WIDTH;
                              486 ;        int RSVD0           : HW_ECC_PARSTRTINDEX_RSVD0_WIDTH;
                              487 ;        int MEMSPACE        : HW_ECC_PARSTRTINDEX_MEMSPACE_WIDTH;
                              488 ;        int RSVD1           : HW_ECC_PARSTRTINDEX_RSVD1_WIDTH;
                              489 ;    } B;
                              491 ;    int I;
                              492 ;    unsigned int U;
                              494 ;} ecc_parstrtindex_type;
                              496 ;#define HW_ECC_PARSTRTINDEX      (*(volatile ecc_parstrtindex_type _X*) (HW_ECC_BASEADDR+7))    /* ECC Block-Start Bit-Index */
                              498 ;endc
                              500 ;//////////////////////////////////////////////////////////////////////////
                              501 ;  ECC Error-Location Address Register (HW_ECC_LOCADDR) Bit Definitions
                              503 HW_ECC_LOCADDR_ADDR_BITPOS                equ     (0)
                              504 HW_ECC_LOCADDR_RSVD0_BITPOS               equ     (16)
                              506 HW_ECC_LOCADDR_ADDR_WIDTH                 equ     (16)
                              507 HW_ECC_LOCADDR_RSVD0_WIDTH                equ     (8)
                              509 HW_ECC_LOCADDR_ADDR_SETMASK               equ     (((1<<HW_ECC_LOCADDR_ADDR_WIDTH)-1)<<HW_ECC_LOCADDR_ADDR_BITPOS)               
                              510 HW_ECC_LOCADDR_RSVD0_SETMASK              equ     (((1<<HW_ECC_LOCADDR_RSVD0_WIDTH)-1)<<HW_ECC_LOCADDR_RSVD0_BITPOS) 
                              512 HW_ECC_LOCADDR_ADDR_CLRMASK               equ     (~HW_ECC_LOCADDR_ADDR_SETMASK)
                              513 HW_ECC_LOCADDR_RSVD0_CLRMASK              equ     (~HW_ECC_LOCADDR_RSVD0_SETMASK)
                              515 ;C insert
                              517 ;typedef union               
                              519 ;{
                              521 ;    struct {
                              522 ;        int ADDR            : HW_ECC_LOCADDR_ADDR_WIDTH;
                              523 ;        int RSVD0           : HW_ECC_LOCADDR_RSVD0_WIDTH;
                              524 ;    } B;
                              526 ;    int I;
                              527 ;    unsigned int U;
                              529 ;} ecc_locaddr_type;
                              531 ;#define HW_ECC_LOCADDR      (*(volatile ecc_locaddr_type _X*) (HW_ECC_BASEADDR+8))    /* ECC Parity-Start Address */
                              533 ;endc
                              535 ;//////////////////////////////////////////////////////////////////////////
                              536 ;  ECC Error-Location Index Register (HW_ECC_LOCINDEX) Bit Definitions
                              538 HW_ECC_LOCINDEX_INDEX_BITPOS               equ     (0)
                              539 HW_ECC_LOCINDEX_RSVD0_BITPOS               equ     (5)
                              540 HW_ECC_LOCINDEX_MEMSPACE_BITPOS            equ     (8)
                              541 HW_ECC_LOCINDEX_RSVD1_BITPOS               equ     (10)
                              543 HW_ECC_LOCINDEX_INDEX_WIDTH                equ     (5)
                              544 HW_ECC_LOCINDEX_RSVD0_WIDTH                equ     (3)             
                              545 HW_ECC_LOCINDEX_MEMSPACE_WIDTH             equ     (2)
                              546 HW_ECC_LOCINDEX_RSVD1_WIDTH                equ     (14)
                              547            
                              548 HW_ECC_LOCINDEX_INDEX_SETMASK              equ     (((1<<HW_ECC_LOCINDEX_INDEX_WIDTH)-1)<<HW_ECC_LOCINDEX_INDEX_BITPOS)
                              549 HW_ECC_LOCINDEX_RSVD0_SETMASK              equ     (((1<<HW_ECC_LOCINDEX_RSVD0_WIDTH)-1)<<HW_ECC_LOCINDEX_RSVD0_BITPOS)            
                              550 HW_ECC_LOCINDEX_MEMSPACE_SETMASK           equ     (((1<<HW_ECC_LOCINDEX_MEMSPACE_WIDTH)-1)<<HW_ECC_LOCINDEX_MEMSPACE_BITPOS) 
                              551 HW_ECC_LOCINDEX_RSVD1_SETMASK              equ     (((1<<HW_ECC_LOCINDEX_RSVD1_WIDTH)-1)<<HW_ECC_LOCINDEX_RSVD1_BITPOS) 
                              553 HW_ECC_LOCINDEX_INDEX_CLRMASK              equ     (~HW_ECC_LOCINDEX_INDEX_SETMASK)
                              554 HW_ECC_LOCINDEX_RSVD0_CLRMASK              equ     (~HW_ECC_LOCINDEX_RSVD0_SETMASK)
                              555 HW_ECC_LOCINDEX_MEMSPACE_CLRMASK           equ     (~HW_ECC_LOCINDEX_MEMSPACE_SETMASK)
                              556 HW_ECC_LOCINDEX_RSVD1_CLRMASK              equ     (~HW_ECC_LOCINDEX_RSVD1_SETMASK)
                              558 ;C insert
                              560 ;typedef union               
                              562 ;{
                              564 ;    struct {
                              565 ;        int INDEX           : HW_ECC_LOCINDEX_INDEX_WIDTH;
                              566 ;        int RSVD0           : HW_ECC_LOCINDEX_RSVD0_WIDTH;
                              567 ;        int MEMSPACE        : HW_ECC_LOCINDEX_MEMSPACE_WIDTH;
                              568 ;        int RSVD1           : HW_ECC_LOCINDEX_RSVD1_WIDTH;
                              569 ;    } B;
                              571 ;    int I;
                              572 ;    unsigned int U;
                              574 ;} ecc_locindex_type;
                              576 ;#define HW_ECC_LOCINDEX      (*(volatile ecc_locindex_type _X*) (HW_ECC_BASEADDR+9))    /* ECC Block-Start Bit-Index */
                              578 ;endc
                              580 ;//////////////////////////////////////////////////////////////////////////
                              581 ;  ECC Error-Location Index Register (HW_ECC_ERRVAL) Bit Definitions
                              583 HW_ECC_ERRVAL_ERRORVALUE_BITPOS          equ     (0)
                              584 HW_ECC_ERRVAL_RSVD0_BITPOS               equ     (9)
                              585 HW_ECC_ERRVAL_BLOCKLOC_BITPOS            equ     (12)
                              586 HW_ECC_ERRVAL_RSVD1_BITPOS               equ     (21)
                              588 HW_ECC_ERRVAL_ERRORVALUE_WIDTH           equ     (9)
                              589 HW_ECC_ERRVAL_RSVD0_WIDTH                equ     (3)             
                              590 HW_ECC_ERRVAL_BLOCKLOC_WIDTH             equ     (9)
                              591 HW_ECC_ERRVAL_RSVD1_WIDTH                equ     (3)
                              592            
                              593 HW_ECC_ERRVAL_ERRORVALUE_SETMASK         equ     (((1<<HW_ECC_ERRVAL_ERRORVALUE_WIDTH)-1)<<HW_ECC_ERRVAL_ERRORVALUE_BITPOS)
                              594 HW_ECC_ERRVAL_RSVD0_SETMASK              equ     (((1<<HW_ECC_ERRVAL_RSVD0_WIDTH)-1)<<HW_ECC_ERRVAL_RSVD0_BITPOS)            
                              595 HW_ECC_ERRVAL_BLOCKLOC_SETMASK           equ     (((1<<HW_ECC_ERRVAL_BLOCKLOC_WIDTH)-1)<<HW_ECC_ERRVAL_BLOCKLOC_BITPOS) 
                              596 HW_ECC_ERRVAL_RSVD1_SETMASK              equ     (((1<<HW_ECC_ERRVAL_RSVD1_WIDTH)-1)<<HW_ECC_ERRVAL_RSVD1_BITPOS) 
                              598 HW_ECC_ERRVAL_ERRORVALUE_CLRMASK         equ     (~HW_ECC_ERRVAL_ERRORVALUE_SETMASK)
                              599 HW_ECC_ERRVAL_RSVD0_CLRMASK              equ     (~HW_ECC_ERRVAL_RSVD0_SETMASK)
                              600 HW_ECC_ERRVAL_BLOCKLOC_CLRMASK           equ     (~HW_ECC_ERRVAL_BLOCKLOC_SETMASK)
                              601 HW_ECC_ERRVAL_RSVD1_CLRMASK              equ     (~HW_ECC_ERRVAL_RSVD1_SETMASK)
                              603 ;C insert
                              605 ;typedef union               
                              607 ;{
                              609 ;    struct {
                              610 ;        int INDEX           : HW_ECC_ERRVAL_ERRORVALUE_WIDTH;
                              611 ;        int RSVD0           : HW_ECC_ERRVAL_RSVD0_WIDTH;
                              612 ;        int MEMSPACE        : HW_ECC_ERRVAL_BLOCKLOC_WIDTH;
                              613 ;        int RSVD1           : HW_ECC_ERRVAL_RSVD1_WIDTH;
                              614 ;    } B;
                              616 ;    int I;
                              617 ;    unsigned int U;
                              619 ;} ecc_errval_type;
                              621 ;#define HW_ECC_ERRVAL      (*(volatile ecc_errval_type _X*) (HW_ECC_BASEADDR+10))    /* ECC Block-Start Bit-Index */
                              623 ;endc
                               23         include "regsemc.inc"
                                2 __REGS_EMC_INC equ 1
                                4 ;///////////////////////////////////////////////////////////////////////////////
                                5 ;   Module base addresses
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 HW_EMC_BASEADDR                         equ     $F000
                                9 ;///////////////////////////////////////////////////////////////////////////////
                               10 ;  EMC Registers
                               11 ;///////////////////////////////////////////////////////////////////////////////
                               13 ;ASM Only
                               14 HW_FLCR                                 equ     HW_EMC_BASEADDR
                               15 HW_FLSALR                               equ     HW_EMC_BASEADDR+1
                               16 HW_FLSAHR                               equ     HW_EMC_BASEADDR+2
                               17 HW_FLSSMPR                              equ     HW_EMC_BASEADDR+3
                               18 HW_FLCR2                                equ     HW_EMC_BASEADDR+4
                               19 HW_FLCFCR                               equ     HW_EMC_BASEADDR+8
                               20 HW_FLCFTMR1R                            equ     HW_EMC_BASEADDR+9
                               21 HW_FLCFTMR2R                            equ     HW_EMC_BASEADDR+10
                               22 HW_FLSMCR                               equ     HW_EMC_BASEADDR+16
                               23 HW_FLSMTMR1R                            equ     HW_EMC_BASEADDR+17
                               24 HW_FLSMTMR2R                            equ     HW_EMC_BASEADDR+18
                               25 HW_FLSMSR                               equ     HW_EMC_BASEADDR+19
                               26 ;endasm
                               28 ;///////////////////////////////////////////////////////////////////////////////
                               29 ;  Flash Control Register (HW_FLCR) Bit Definitions
                               31 ;C Insert
                               32 ;typedef union               /*Flash Control Register*/
                               33 ;{
                               34 ;    struct
                               35 ;    {
                               36 ;    int KICK        :1;
                               37 ;    int RW          :1;
                               38 ;    int TCIE        :1;
                               39 ;    int IRQP        :1;
                               40 ;    unsigned MMD    :2;
                               41 ;    unsigned NB     :11;
                               42 ;    unsigned RSVD   :4;
                               43 ;    int SRST        :1;
                               44 ;    } B;
                               45 ;    int I;
                               46 ;} flcr_type;
                               47 ;endc
                               49 HW_FLCR_KICK_BITPOS                     equ     0
                               50 HW_FLCR_RW_BITPOS                       equ     1
                               51 HW_FLCR_TCIE_BITPOS                     equ     2
                               52 HW_FLCR_IRQP_BITPOS                     equ     3
                               53 HW_FLCR_MMD_BITPOS                      equ     4
                               54 HW_FLCR_NB_BITPOS                       equ     6
                               55 HW_FLCR_SRST_BITPOS                     equ     21
                               57 HW_FLCR_KICK_SETMASK                    equ     1<<HW_FLCR_KICK_BITPOS
                               58 HW_FLCR_RW_SETMASK                      equ     1<<HW_FLCR_RW_BITPOS
                               59 HW_FLCR_READ_KICK_SETMASK               equ     HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                               60 HW_FLCR_WRITE_KICK_SETMASK              equ     HW_FLCR_KICK_SETMASK
                               61 HW_FLCR_TCIE_SETMASK                    equ     1<<HW_FLCR_TCIE_BITPOS
                               62 HW_FLCR_IRQP_SETMASK                    equ     1<<HW_FLCR_IRQP_BITPOS
                               63 HW_FLCR_MMD_SETMASK                     equ     3<<HW_FLCR_MMD_BITPOS
                               64 HW_FLCR_NB_SETMASK                      equ     $7FF<<HW_FLCR_NB_BITPOS
                               65 HW_FLCR_SRST_SETMASK                    equ     1<<HW_FLCR_SRST_BITPOS
                               67 HW_FLCR_KICK_CLRMASK                    equ     ~HW_FLCR_KICK_SETMASK
                               68 HW_FLCR_RW_CLRMASK                      equ     ~HW_FLCR_RW_SETMASK
                               69 HW_FLCR_TCIE_CLRMASK                    equ     ~HW_FLCR_TCIE_SETMASK
                               70 HW_FLCR_IRQP_CLRMASK                    equ     ~HW_FLCR_IRQP_SETMASK
                               71 HW_FLCR_MMD_CLRMASK                     equ     ~HW_FLCR_MMD_SETMASK
                               72 HW_FLCR_NB_CLRMASK                      equ     ~HW_FLCR_NB_SETMASK
                               73 HW_FLCR_SRST_CLRMASK                    equ     ~HW_FLCR_SRST_SETMASK
                               76 ;///////////////////////////////////////////////////////////////////////////////
                               77 ;  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                               79 ;C Insert
                               80 ;typedef union           /* Flash Start Address Low*/
                               81 ;{
                               82 ;    struct
                               83 ;    {
                               84 ;    unsigned XA     : 24;
                               85 ;    } B;
                               86 ;    int I;
                               87 ;} flsalr_type;
                               88 ;endc
                               90 HW_FLSALR_XA_BITPOS                     equ     0
                               92 HW_FLSALR_XA_SETMASK                    equ     $FFFFFF<<HW_FLSALR_XA_BITPOS
                               94 HW_FLSALR_XA_CLRMASK                    equ     ~HW_FLSALR_XA_SETMASK
                               97 ;///////////////////////////////////////////////////////////////////////////////
                               98 ;  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                              100 ;C Insert
                              101 ;typedef union           /* Flash Start Address High*/
                              102 ;{
                              103 ;    struct
                              104 ;    {
                              105 ;    unsigned XA     :8;
                              106 ;    unsigned DA     :16;
                              107 ;    } B;
                              108 ;    int I;
                              109 ;} flsahr_type;
                              110 ;endc
                              112 HW_FLSAHR_XA_BITPOS                     equ     0
                              114 HW_FLSAHR_XA_SETMASK                    equ     $FFFFFF<<HW_FLSAHR_XA_BITPOS
                              116 HW_FLSAHR_XA_CLRMASK                    equ     ~HW_FLSAHR_XA_SETMASK
                              119 ;///////////////////////////////////////////////////////////////////////////////
                              120 ;  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                              122 ;C Insert
                              123 ;typedef union           /* Flash CompactFlash Control Register*/
                              124 ;{
                              125 ;    struct
                              126 ;    {
                              127 ;        int WP          :1;
                              128 ;        int CDP         :1;
                              129 ;        unsigned SM     :2;
                              130 ;        int XATTR       :1;
                              131 ;        int CRST        :1;
                              132 ;        int XWT         :1;
                              133 ;        int RI          :1;
                              134 ;        int IFCE        :1;
                              135 ;        int ISCE        :1;
                              136 ;        int INCE        :1;
                              137 ;        int IFCS        :1;
                              138 ;        int ISCS        :1;
                              139 ;        int INCS        :1;
                              140 ;        unsigned CFAI   :2;
                              141 ;        int XDDI        :1;
                              142 ;        unsigned CS     :2;
                              143 ;        int CRE         :1;
                              144 ;        unsigned VS     :2;
                              145 ;        int DASP        :1;
                              146 ;        int MODE16      :1; 
                              147 ;    } B;
                              148 ;    int I;
                              149 ;} flcfcr_type;
                              150 ;endc
                              152 HW_FLCFCR_WP_BITPOS                     equ     0
                              153 HW_FLCFCR_CDP_BITPOS                    equ     1
                              154 HW_FLCFCR_SM_BITPOS                     equ     2
                              155 HW_FLCFCR_XATTR_BITPOS                  equ     4
                              156 HW_FLCFCR_CRST_BITPOS                   equ     5
                              157 HW_FLCFCR_XWT_BITPOS                    equ     6
                              158 HW_FLCFCR_RI_BITPOS                     equ     7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              159 HW_FLCFCR_IFCE_BITPOS                   equ     8
                              160 HW_FLCFCR_ISCE_BITPOS                   equ     9
                              161 HW_FLCFCR_INCE_BITPOS                   equ     10
                              162 HW_FLCFCR_IFCS_BITPOS                   equ     11
                              163 HW_FLCFCR_ISCS_BITPOS                   equ     12
                              164 HW_FLCFCR_INCS_BITPOS                   equ     13
                              165 HW_FLCFCR_CFAI_BITPOS                   equ     14
                              166 HW_FLCFCR_XDDI_BITPOS                   equ     16
                              167 HW_FLCFCR_CS_BITPOS                     equ     17
                              168 HW_FLCFCR_CRE_BITPOS                    equ     19
                              169 HW_FLCFCR_VS_BITPOS                     equ     20
                              170 HW_FLCFCR_DASP_BITPOS                   equ     22
                              172 HW_FLCFCR_WP_SETMASK                    equ     1<<HW_FLCFCR_WP_BITPOS
                              173 HW_FLCFCR_CDP_SETMASK                   equ     1<<HW_FLCFCR_CDP_BITPOS
                              174 HW_FLCFCR_SM_SETMASK                    equ     3<<HW_FLCFCR_SM_BITPOS
                              175 HW_FLCFCR_XATTR_SETMASK                 equ     1<<HW_FLCFCR_XATTR_BITPOS
                              176 HW_FLCFCR_CRST_SETMASK                  equ     1<<HW_FLCFCR_CRST_BITPOS
                              177 HW_FLCFCR_XWT_SETMASK                   equ     1<<HW_FLCFCR_XWT_BITPOS
                              178 HW_FLCFCR_RI_SETMASK                    equ     1<<HW_FLCFCR_RI_BITPOS
                              179 HW_FLCFCR_IFCE_SETMASK                  equ     1<<HW_FLCFCR_IFCE_BITPOS
                              180 HW_FLCFCR_ISCE_SETMASK                  equ     1<<HW_FLCFCR_ISCE_BITPOS
                              181 HW_FLCFCR_INCE_SETMASK                  equ     1<<HW_FLCFCR_INCE_BITPOS
                              182 HW_FLCFCR_IFCS_SETMASK                  equ     1<<HW_FLCFCR_IFCS_BITPOS
                              183 HW_FLCFCR_ISCS_SETMASK                  equ     1<<HW_FLCFCR_ISCS_BITPOS
                              184 HW_FLCFCR_INCS_SETMASK                  equ     1<<HW_FLCFCR_INCS_BITPOS
                              185 HW_FLCFCR_CFAI_SETMASK                  equ     3<<HW_FLCFCR_CFAI_BITPOS
                              186 HW_FLCFCR_XDDI_SETMASK                  equ     1<<HW_FLCFCR_XDDI_BITPOS
                              187 HW_FLCFCR_CS_SETMASK                    equ     3<<HW_FLCFCR_CS_BITPOS
                              188 HW_FLCFCR_CRE_SETMASK                   equ     1<<HW_FLCFCR_CRE_BITPOS
                              189 HW_FLCFCR_VS_SETMASK                    equ     3<<HW_FLCFCR_VS_BITPOS
                              190 HW_FLCFCR_DASP_SETMASK                  equ     1<<HW_FLCFCR_DASP_BITPOS
                              192 HW_FLCFCR_WP_CLRMASK                    equ     ~HW_FLCFCR_WP_SETMASK
                              193 HW_FLCFCR_CDP_CLRMASK                   equ     ~HW_FLCFCR_CDP_SETMASK
                              194 HW_FLCFCR_SM_CLRMASK                    equ     ~HW_FLCFCR_SM_SETMASK
                              195 HW_FLCFCR_XATTR_CLRMASK                 equ     ~HW_FLCFCR_XATTR_SETMASK
                              196 HW_FLCFCR_CRST_CLRMASK                  equ     ~HW_FLCFCR_CRST_SETMASK
                              197 HW_FLCFCR_XWT_CLRMASK                   equ     ~HW_FLCFCR_XWT_SETMASK
                              198 HW_FLCFCR_RI_CLRMASK                    equ     ~HW_FLCFCR_RI_SETMASK
                              199 HW_FLCFCR_IFCE_CLRMASK                  equ     ~HW_FLCFCR_IFCE_SETMASK
                              200 HW_FLCFCR_ISCE_CLRMASK                  equ     ~HW_FLCFCR_ISCE_SETMASK
                              201 HW_FLCFCR_INCE_CLRMASK                  equ     ~HW_FLCFCR_INCE_SETMASK
                              202 HW_FLCFCR_IFCS_CLRMASK                  equ     ~HW_FLCFCR_IFCS_SETMASK
                              203 HW_FLCFCR_ISCS_CLRMASK                  equ     ~HW_FLCFCR_ISCS_SETMASK
                              204 HW_FLCFCR_INCS_CLRMASK                  equ     ~HW_FLCFCR_INCS_SETMASK
                              205 HW_FLCFCR_CFAI_CLRMASK                  equ     ~HW_FLCFCR_CFAI_SETMASK
                              206 HW_FLCFCR_XDDI_CLRMASK                  equ     ~HW_FLCFCR_XDDI_SETMASK
                              207 HW_FLCFCR_CS_CLRMASK                    equ     ~HW_FLCFCR_CS_SETMASK
                              208 HW_FLCFCR_CRE_CLRMASK                   equ     ~HW_FLCFCR_CRE_SETMASK
                              209 HW_FLCFCR_VS_CLRMASK                    equ     ~HW_FLCFCR_VS_SETMASK
                              210 HW_FLCFCR_DASP_CLRMASK                  equ     ~HW_FLCFCR_DASP_SETMASK
                              213 ;///////////////////////////////////////////////////////////////////////////////
                              214 ;  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                              216 ;C Insert
                              217 ;typedef union           /* Flash CompactFlash Timer1 Register*/
                              218 ;{
                              219 ;    struct
                              220 ;    {
                              221 ;        unsigned TRWSU  :5;
                              222 ;        unsigned TRPW   :7;
                              223 ;        unsigned TWPW   :7;
                              224 ;        unsigned TRWH   :5;
                              225 ;    } B;
                              226 ;    int I;
                              227 ;} flcftmr1r_type;
                              228 ;endc
                              230 HW_FLCFTMR1R_TRWSU_BITPOS               equ     0
                              231 HW_FLCFTMR1R_TRPW_BITPOS                equ     5
                              232 HW_FLCFTMR1R_TWPW_BITPOS                equ     12
                              233 HW_FLCFTMR1R_TRWH_BITPOS                equ     19
                              235 HW_FLCFTMR1R_TRWSU_SETMASK              equ     $1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                              236 HW_FLCFTMR1R_TRPW_SETMASK               equ     $7F<<HW_FLCFTMR1R_TRPW_BITPOS
                              237 HW_FLCFTMR1R_TWPW_SETMASK               equ     $7F<<HW_FLCFTMR1R_TWPW_BITPOS
                              238 HW_FLCFTMR1R_TRWH_SETMASK               equ     $1F<<HW_FLCFTMR1R_TRWH_BITPOS
                              240 HW_FLCFTMR1R_TRWSU_CLRMASK              equ     ~HW_FLCFTMR1R_TRWSU_SETMASK
                              241 HW_FLCFTMR1R_TRPW_CLRMASK               equ     ~HW_FLCFTMR1R_TRPW_SETMASK
                              242 HW_FLCFTMR1R_TWPW_CLRMASK               equ     ~HW_FLCFTMR1R_TWPW_SETMASK
                              243 HW_FLCFTMR1R_TRWH_CLRMASK               equ     ~HW_FLCFTMR1R_TRWH_SETMASK
                              246 ;///////////////////////////////////////////////////////////////////////////////
                              247 ;  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                              249 ;C Insert
                              250 ;typedef union           /* Flash CompactFlash Timer2 Register*/
                              251 ;{
                              252 ;    struct
                              253 ;    {
                              254 ;        unsigned TWW    :4;
                              255 ;        unsigned TWTO   :10;
                              256 ;        unsigned THW    :5; 
                              257 ;        unsigned TRAQ   :5;
                              258 ;    } B;
                              259 ;    int I;
                              260 ;} flcftmr2r_type;
                              261 ;endc
                              263 HW_FLCFTMR2R_TWW_BITPOS                 equ      0
                              264 HW_FLCFTMR2R_TWTO_BITPOS                equ      4
                              265 HW_FLCFTMR2R_THW_BITPOS                 equ      14
                              266 HW_FLCFTMR2R_TRAQ_BITPOS                equ      19
                              268 HW_FLCFTMR2R_TWW_SETMASK                equ      $F<<HW_FLCFTMR2R_TWW_BITPOS
                              269 HW_FLCFTMR2R_TWTO_SETMASK               equ      $3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                              270 HW_FLCFTMR2R_THW_SETMASK                equ      $1F<<HW_FLCFTMR2R_THW_BITPOS
                              271 HW_FLCFTMR2R_TRAQ_SETMASK               equ      $1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                              273 HW_FLCFTMR2R_TWW_CLRMASK                equ      ~HW_FLCFTMR2R_TWW_SETMASK
                              274 HW_FLCFTMR2R_TWTO_CLRMASK               equ      ~HW_FLCFTMR2R_TWTO_SETMASK
                              275 HW_FLCFTMR2R_THW_CLRMASK                equ      ~HW_FLCFTMR2R_THW_SETMASK
                              276 HW_FLCFTMR2R_TRAQ_CLRMASK               equ      ~HW_FLCFTMR2R_TRAQ_SETMASK
                              279 ;///////////////////////////////////////////////////////////////////////////////
                              280 ;  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                              282 ;C Insert
                              283 ;typedef union           /* Flash SmartMedia Control Register*/
                              284 ;{
                              285 ;    struct
                              286 ;    {
                              287 ;        unsigned CS     :2;
                              288 ;        int SE          :1;
                              289 ;        int WP          :1;
                              290 ;        int SIZE        :1;
                              291 ;        int ICMD        :8;
                              292 ;        int TOIE        :1;
                              293 ;        int BPIE        :1;
                              294 ;        int TOIRQ       :1;
                              295 ;        int BPIRQ       :1;
                              296 ;    } B;
                              297 ;    int I;
                              298 ;} flsmcr_type;
                              299 ;endc
                              301 HW_FLSMCR_CS_BITPOS                     equ      0
                              302 HW_FLSMCR_SE_BITPOS                     equ      2
                              303 HW_FLSMCR_WP_BITPOS                     equ      3
                              304 HW_FLSMCR_SIZE_BITPOS                   equ      4
                              305 HW_FLSMCR_ICMD_BITPOS                   equ      5
                              306 HW_FLSMCR_TOIE_BITPOS                   equ      13
                              307 HW_FLSMCR_BPIE_BITPOS                   equ      14
                              308 HW_FLSMCR_TOIRQ_BITPOS                  equ      15
                              309 HW_FLSMCR_BPIRQ_BITPOS                  equ      16
                              311 HW_FLSMCR_CS_SETMASK                    equ      1<<HW_FLSMCR_CS_BITPOS
                              312 HW_FLSMCR_SE_SETMASK                    equ      1<<HW_FLSMCR_SE_BITPOS
                              313 HW_FLSMCR_WP_SETMASK                    equ      1<<HW_FLSMCR_WP_BITPOS
                              314 HW_FLSMCR_SIZE_SETMASK                  equ      1<<HW_FLSMCR_SIZE_BITPOS
                              315 HW_FLSMCR_ICMD_SETMASK                  equ      ($FF)<<HW_FLSMCR_ICMD_BITPOS
                              316 HW_FLSMCR_TOIE_SETMASK                  equ      1<<HW_FLSMCR_TOIE_BITPOS
                              317 HW_FLSMCR_BPIE_SETMASK                  equ      1<<HW_FLSMCR_BPIE_BITPOS
                              318 HW_FLSMCR_TOIRQ_SETMASK                 equ      1<<HW_FLSMCR_TOIRQ_BITPOS
                              319 HW_FLSMCR_BPIRQ_SETMASK                 equ      1<<HW_FLSMCR_BPIRQ_BITPOS
                              321 HW_FLSMCR_SE_ASSERT_SETMASK             equ      $000000
                              322 HW_FLSMCR_SE_DEASSERT_SETMASK           equ      $000004
                              323 HW_FLSMCR_WP_ASSERT_SETMASK             equ      $000000
                              324 HW_FLSMCR_WP_DEASSERT_SETMASK           equ      $000008
                              325 HW_FLSMCR_SIZE_SMALL_SETMASK            equ      $000000
                              326 HW_FLSMCR_SIZE_LARGE_SETMASK            equ      $000010
                              327 HW_FLSMCR_ICMD_RESET_SETMASK            equ      $001FE0
                              328 HW_FLSMCR_ICMD_READ_STATUS_SETMASK      equ      $000E00
                              329 HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK      equ      $000C00
                              330 HW_FLSMCR_ICMD_ERASE_SETMASK            equ      $001A00
                              331 HW_FLSMCR_ICMD_RP_FIRST_SETMASK         equ      $000000
                              332 HW_FLSMCR_ICMD_RP_SECOND_SETMASK        equ      $000020
                              333 HW_FLSMCR_ICMD_RP_SPARE_SETMASK         equ      $000A00
                              334 HW_FLSMCR_ICMD_READ_ID_SETMASK          equ      $001200
                              336 HW_FLSMCR_CS_CLRMASK                    equ      ~HW_FLSMCR_CS_SETMASK
                              337 HW_FLSMCR_SE_CLRMASK                    equ      ~HW_FLSMCR_SE_SETMASK
                              338 HW_FLSMCR_WP_CLRMASK                    equ      ~HW_FLSMCR_WP_SETMASK
                              339 HW_FLSMCR_SIZE_CLRMASK                  equ      ~HW_FLSMCR_SIZE_SETMASK
                              340 HW_FLSMCR_ICMD_CLRMASK                  equ      ~HW_FLSMCR_ICMD_SETMASK
                              341 HW_FLSMCR_TOIE_CLRMASK                  equ      ~HW_FLSMCR_TOIE_SETMASK
                              342 HW_FLSMCR_BPIE_CLRMASK                  equ      ~HW_FLSMCR_BPIE_SETMASK
                              343 HW_FLSMCR_TOIRQ_CLRMASK                 equ      ~HW_FLSMCR_TOIRQ_SETMASK
                              344 HW_FLSMCR_BPIRQ_CLRMASK                 equ      ~HW_FLSMCR_BPIRQ_SETMASK
                              347 ;///////////////////////////////////////////////////////////////////////////////
                              348 ;  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                              350 ;C Insert
                              351 ;typedef union           /* Flash SmartMedia Timer1 Register*/
                              352 ;{
                              353 ;    struct
                              354 ;    {
                              355 ;        unsigned TRWSU  :5;
                              356 ;        unsigned TRPW   :6;
                              357 ;        unsigned TWPW   :6;
                              358 ;        unsigned TRWH   :5;
                              359 ;    } B;
                              360 ;    int I;
                              361 ;} flsmtmr1r_type;
                              362 ;endc
                              364 HW_FLSMTMR1R_TRWSU_BITPOS               equ      0
                              365 HW_FLSMTMR1R_TRPW_BITPOS                equ      5
                              366 HW_FLSMTMR1R_TWPW_BITPOS                equ      11
                              367 HW_FLSMTMR1R_TRWH_BITPOS                equ      17
                              369 HW_FLSMTMR1R_TRWSU_SETMASK              equ      $1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                              370 HW_FLSMTMR1R_TRPW_SETMASK               equ      $3F<<HW_FLSMTMR1R_TRPW_BITPOS
                              371 HW_FLSMTMR1R_TWPW_SETMASK               equ      $3F<<HW_FLSMTMR1R_TWPW_BITPOS
                              372 HW_FLSMTMR1R_TRWH_SETMASK               equ      $1F<<HW_FLSMTMR1R_TRWH_BITPOS
                              374 HW_FLSMTMR1R_TRWSU_CLRMASK              equ      ~HW_FLSMTMR1R_TRWSU_SETMASK
                              375 HW_FLSMTMR1R_TRPW_CLRMASK               equ      ~HW_FLSMTMR1R_TRPW_SETMASK
                              376 HW_FLSMTMR1R_TWPW_CLRMASK               equ      ~HW_FLSMTMR1R_TWPW_SETMASK
                              377 HW_FLSMTMR1R_TRWH_CLRMASK               equ      ~HW_FLSMTMR1R_TRWH_SETMASK
                              380 ;///////////////////////////////////////////////////////////////////////////////
                              381 ;  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                              383 ;C Insert
                              384 ;typedef union           /* Flash SmartMedia Timer2 Register*/
                              385 ;{
                              386 ;    struct
                              387 ;    {
                              388 ;        unsigned TWT    :6;
                              389 ;        unsigned TWTO   :18;
                              390 ;    } B;
                              391 ;    int I;
                              392 ;} flsmtmr2r_type;
                              393 ;endc
                              395 HW_FLSMTMR2R_TWT_BITPOS                 equ     0
                              396 HW_FLSMTMR2R_TWTO_BITPOS                equ     6
                              398 HW_FLSMTMR2R_TWT_SETMASK                equ     $3F<<HW_FLSMTMR2R_TWT_BITPOS
                              399 HW_FLSMTMR2R_TWTO_SETMASK               equ     $3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                              401 HW_FLSMTMR2R_TWT_CLRMASK                equ     ~HW_FLSMTMR2R_TWT_SETMASK
                              402 HW_FLSMTMR2R_TWTO_CLRMASK               equ     ~HW_FLSMTMR2R_TWTO_SETMASK
                              404 ;C Insert
                              405 ;/*//////////////////////////////////////////////////////////////////////////////
                              406 ;  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                              407 ;typedef union 
                              408 ;{
                              409 ;  struct
                              410 ;  {
                              411 ;    unsigned ASEL     :2;        /* Memory Select */
                              412 ;    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                              413 ;    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                              414 ;    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                              415 ;    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                              416 ;    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                              417 ;    int PAD0          :17;    
                              418 ;  } B;
                              419 ;  int I;
                              420 ;} flcr2_type;
                              421 ;endc
                              423 ;///////////////////////////////////////////////////////////////////////////////
                              424 ;  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                              425 HW_FLSMSR_RDY_BITPOS                    equ     0
                              426 HW_FLSMSR_BUSY_BITPOS                   equ     7
                              428 ;C Insert
                              429 ;#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                              430 ;#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                              431 ;#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                              432 ;#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                              433 ;#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                              434 ;#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                              435 ;#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                              436 ;#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                              437 ;#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                              438 ;#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                              439 ;#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                              440 ;#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                              441 ;endc
                              443  ;*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              444  ;
                              445  ; The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              446  ; to update the actual files. Only the defines needed to build SDK2.400 were added.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              448 HW_FLC2R                                equ     HW_EMC_BASEADDR+4
                               24         include "regsespi.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;; Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;; Filename    : regsespi.inc
                                4 ;;; Description : Register definitions for ESPI interface
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ;///////////////////////////////////////////////////////////////////////////////
                                8 ; The following naming conventions are followed in this file.
                                9 ; All registers are named using the format...
                               10 ;     HW_<module>_<regname>
                               11 ; where <module> is the module name which can be any of the following...
                               12 ;     USB20
                               13 ; (Note that when there is more than one copy of a particular module, the
                               14 ; module name includes a number starting from 0 for the first instance of
                               15 ; that module)
                               16 ;
                               17 ; <regname> is the specific register within that module
                               18 ;
                               19 ; We also define the following...
                               20 ;
                               21 ;     HW_<module>_<regname>_BITPOS
                               22 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               23 ;
                               24 ;     HW_<module>_<regname>_SETMASK
                               25 ; which does something else, and
                               26 ;
                               27 ;     HW_<module>_<regname>_CLRMASK
                               28 ; which does something else.
                               29 ;
                               30 ; Other rules
                               31 ;     All caps
                               32 ;     Numeric identifiers start at 0
                               34 regsespiinc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 ;   ESPI STMP Registers 
                               43 ;   Last Updated 7.1.2003 M. Henson
                               44 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               46 HW_ESPI_BASEADDR             equ     ($FF00)
                               49 ;ASM Only 
                               51 HW_ESPI_CSR                     equ     (HW_ESPI_BASEADDR+0)
                               52 HW_ESPI_CNFG                    equ     (HW_ESPI_BASEADDR+1)
                               53 HW_ESPI_CLKCNTRL                equ     (HW_ESPI_BASEADDR+2)
                               54 HW_ESPI_PIODATA                 equ     (HW_ESPI_BASEADDR+3)
                               55 HW_ESPI_ADDR                    equ     (HW_ESPI_BASEADDR+4)
                               56 HW_ESPI_INDEX                   equ     (HW_ESPI_BASEADDR+5)
                               58 ;endasm
                               60 ; /////////////////////////////////////////////
                               61 ; //  ESPI Control/Status Register Bit Definitions
                               62 HW_ESPI_CSR_KICK_BITPOS         equ     (0)
                               63 HW_ESPI_CSR_RSVD0_BITPOS        equ     (1)
                               64 HW_ESPI_CSR_DONE_INT_BITPOS     equ     (4)
                               65 HW_ESPI_CSR_PIOMATCH_INT_BITPOS equ     (5)
                               66 HW_ESPI_CSR_RSVD1_BITPOS        equ     (6)
                               67 HW_ESPI_CSR_DONE_INTEN_BITPOS   equ     (8)
                               68 HW_ESPI_CSR_PIOMATCH_INTEN_BITPOS equ     (9)
                               69 HW_ESPI_CSR_RSVD2_BITPOS        equ     (10)
                               70 HW_ESPI_CSR_DMAWAIT_BITPOS      equ     (12)
                               71 HW_ESPI_CSR_RSVD3_BITPOS        equ     (16)
                               72 HW_ESPI_CSR_MPSPSEL_BITPOS      equ     (20)
                               73 HW_ESPI_CSR_RSVD4_BITPOS        equ     (22)
                               74 HW_ESPI_CSR_SFTRST_BITPOS       equ     (23)
                               76 HW_ESPI_CSR_KICK_WIDTH          equ     (1)
                               77 HW_ESPI_CSR_RSVD0_WIDTH         equ     (3)
                               78 HW_ESPI_CSR_DONE_INT_WIDTH      equ     (1)
                               79 HW_ESPI_CSR_PIOMATCH_INT_WIDTH  equ     (1)
                               80 HW_ESPI_CSR_RSVD1_WIDTH         equ     (2)
                               81 HW_ESPI_CSR_DONE_INTEN_WIDTH    equ     (1)
                               82 HW_ESPI_CSR_PIOMATCH_INTEN_WIDTH equ    (1)
                               83 HW_ESPI_CSR_RSVD2_WIDTH         equ     (2)
                               84 HW_ESPI_CSR_DMAWAIT_WIDTH       equ     (4)
                               85 HW_ESPI_CSR_RSVD3_WIDTH         equ     (4)
                               86 HW_ESPI_CSR_MPSPSEL_WIDTH       equ     (2)
                               87 HW_ESPI_CSR_RSVD4_WIDTH         equ     (1)
                               88 HW_ESPI_CSR_SFTRST_WIDTH        equ     (1)
                               90 HW_ESPI_CSR_KICK_SETMASK                equ     (((1<<HW_ESPI_CSR_KICK_WIDTH)-1)<<HW_ESPI_CSR_KICK_BITPOS)
                               91 HW_ESPI_CSR_RSVD0_SETMASK               equ     (((1<<HW_ESPI_CSR_RSVD0_WIDTH)-1)<<HW_ESPI_CSR_RSVD0_BITPOS)
                               92 HW_ESPI_CSR_DONE_INT_SETMASK            equ     (((1<<HW_ESPI_CSR_DONE_INT_WIDTH)-1)<<HW_ESPI_CSR_DONE_INT_BITPOS)
                               93 HW_ESPI_CSR_PIOMATCH_INT_SETMASK        equ     (((1<<HW_ESPI_CSR_PIOMATCH_INT_WIDTH)-1)<<HW_ESPI_CSR_PIOMATCH_INT_BITPOS)
                               94 HW_ESPI_CSR_RSVD1_SETMASK               equ     (((1<<HW_ESPI_CSR_RSVD1_WIDTH)-1)<<HW_ESPI_CSR_RSVD1_BITPOS)
                               95 HW_ESPI_CSR_DONE_INTEN_SETMASK          equ     (((1<<HW_ESPI_CSR_DONE_INTEN_WIDTH)-1)<<HW_ESPI_CSR_DONE_INTEN_BITPOS)
                               96 HW_ESPI_CSR_PIOMATCH_INTEN_SETMASK      equ     (((1<<HW_ESPI_CSR_PIOMATCH_INTEN_WIDTH)-1)<<HW_ESPI_CSR_PIOMATCH_INTEN_BITPOS)
                               97 HW_ESPI_CSR_RSVD2_SETMASK               equ     (((1<<HW_ESPI_CSR_RSVD2_WIDTH)-1)<<HW_ESPI_CSR_RSVD2_BITPOS)
                               98 HW_ESPI_CSR_DMAWAIT_SETMASK             equ     (((1<<HW_ESPI_CSR_DMAWAIT_WIDTH)-1)<<HW_ESPI_CSR_DMAWAIT_BITPOS)
                               99 HW_ESPI_CSR_RSVD3_SETMASK               equ     (((1<<HW_ESPI_CSR_RSVD3_WIDTH)-1)<<HW_ESPI_CSR_RSVD3_BITPOS)
                              100 HW_ESPI_CSR_MPSPSEL_SETMASK             equ     (((1<<HW_ESPI_CSR_MPSPSEL_WIDTH)-1)<<HW_ESPI_CSR_MPSPSEL_BITPOS)
                              101 HW_ESPI_CSR_RSVD4_SETMASK               equ     (((1<<HW_ESPI_CSR_RSVD4_WIDTH)-1)<<HW_ESPI_CSR_RSVD4_BITPOS)
                              102 HW_ESPI_CSR_SFTRST_SETMASK              equ     (((1<<HW_ESPI_CSR_SFTRST_WIDTH)-1)<<HW_ESPI_CSR_SFTRST_BITPOS)
                              104 HW_ESPI_CSR_KICK_CLRMASK                equ     (~HW_ESPI_CSR_KICK_SETMASK)
                              105 HW_ESPI_CSR_DONE_INT_CLRMASK            equ     (~HW_ESPI_CSR_DONE_INT_SETMASK)
                              106 HW_ESPI_CSR_PIOMATCH_INT_CLRMASK        equ     (~HW_ESPI_CSR_PIOMATCH_INT_SETMASK)
                              107 HW_ESPI_CSR_DONE_INTEN_CLRMASK          equ     (~HW_ESPI_CSR_DONE_INTEN_SETMASK)
                              108 HW_ESPI_CSR_PIOMATCH_INTEN_CLRMASK      equ     (~HW_ESPI_CSR_PIOMATCH_INTEN_SETMASK)
                              109 HW_ESPI_CSR_DMAWAIT_CLRMASK             equ     (~HW_ESPI_CSR_DMAWAIT_SETMASK)
                              110 HW_ESPI_CSR_MPSPSEL_CLRMASK             equ     (~HW_ESPI_CSR_MPSPSEL_SETMASK)
                              111 HW_ESPI_CSR_SFTRST_CLRMASK              equ     (~HW_ESPI_CSR_SFTRST_SETMASK)
                              113 ;C insert
                              114 ;typedef union               
                              115 ;{
                              116 ;    struct {
                              117 ;       int KICK                : HW_ESPI_CSR_KICK_WIDTH;        
                              118 ;       int RSVD0               : HW_ESPI_CSR_RSVD0_WIDTH;
                              119 ;       int DONE_INT            : HW_ESPI_CSR_DONE_INT_WIDTH;
                              120 ;       int PIOMATCH_INT        : HW_ESPI_CSR_PIOMATCH_INT_WIDTH;
                              121 ;       int RSVD1               : HW_ESPI_CSR_RSVD1_WIDTH;
                              122 ;       int DONE_INTEN          : HW_ESPI_CSR_DONE_INTEN_WIDTH;
                              123 ;       int PIOMATCH_INTEN      : HW_ESPI_CSR_PIOMATCH_INTEN_WIDTH;
                              124 ;       int RSVD2               : HW_ESPI_CSR_RSVD2_WIDTH;
                              125 ;       int DMAWAIT             : HW_ESPI_CSR_DMAWAIT_WIDTH;
                              126 ;       int RSVD3               : HW_ESPI_CSR_RSVD3_WIDTH;
                              127 ;       int MPSPSEL             : HW_ESPI_CSR_MPSPSEL_WIDTH;
                              128 ;       int RSVD4               : HW_ESPI_CSR_RSVD4_WIDTH;
                              129 ;       int SFTRST              : HW_ESPI_CSR_SFTRST_WIDTH;
                              130 ;    } B;
                              131 ;
                              132 ;    int I;
                              133 ;    unsigned int U;
                              135 ;} espi_csr_type;
                              136 ;#define HW_ESPI_CSR      (*(volatile espi_csr_type _X*) (HW_ESPI_BASEADDR+0))    /* ESPI Control / Status Register */
                              137 ;endc
                              139 ; /////////////////////////////////////////////
                              140 ; //  ESPI Configuration Register 1 Bit Definitions
                              141 HW_ESPI_CNFG_ESPI_EN_BITPOS             equ     (0)
                              142 HW_ESPI_CNFG_READ_RAM_BITPOS            equ     (1)
                              143 HW_ESPI_CNFG_SS_BITPOS                  equ     (2)
                              144 HW_ESPI_CNFG_MSB_FIRST_BITPOS           equ     (3)
                              145 HW_ESPI_CNFG_XFER_SIZE_BITPOS           equ     (4)
                              146 HW_ESPI_CNFG_SPI_MODE_BITPOS            equ     (20)
                              148 HW_ESPI_CNFG_ESPI_EN_WIDTH              equ     (1)
                              149 HW_ESPI_CNFG_READ_RAM_WIDTH             equ     (1)
                              150 HW_ESPI_CNFG_SS_WIDTH                   equ     (1)
                              151 HW_ESPI_CNFG_MSB_FIRST_WIDTH            equ     (1)
                              152 HW_ESPI_CNFG_XFER_SIZE_WIDTH            equ     (16)
                              153 HW_ESPI_CNFG_SPI_MODE_WIDTH             equ     (4)
                              155 HW_ESPI_CNFG_ESPI_EN_SETMASK            equ     (((1<<HW_ESPI_CNFG_ESPI_EN_WIDTH)-1)<<HW_ESPI_CNFG_ESPI_EN_BITPOS)
                              156 HW_ESPI_CNFG_READ_RAM_SETMASK           equ     (((1<<HW_ESPI_CNFG_READ_RAM_WIDTH)-1)<<HW_ESPI_CNFG_READ_RAM_BITPOS)
                              157 HW_ESPI_CNFG_SS_SETMASK                 equ     (((1<<HW_ESPI_CNFG_SS_WIDTH)-1)<<HW_ESPI_CNFG_SS_BITPOS)
                              158 HW_ESPI_CNFG_MSB_FIRST_SETMASK          equ     (((1<<HW_ESPI_CNFG_MSB_FIRST_WIDTH)-1)<<HW_ESPI_CNFG_MSB_FIRST_BITPOS)
                              159 HW_ESPI_CNFG_XFER_SIZE_SETMASK          equ     (((1<<HW_ESPI_CNFG_XFER_SIZE_WIDTH)-1)<<HW_ESPI_CNFG_XFER_SIZE_BITPOS)
                              160 HW_ESPI_CNFG_SPI_MODE_SETMASK           equ     (((1<<HW_ESPI_CNFG_SPI_MODE_WIDTH)-1)<<HW_ESPI_CNFG_SPI_MODE_BITPOS)
                              162 HW_ESPI_CNFG_ESPI_EN_CLRMASK            equ     (~HW_ESPI_CNFG_ESPI_EN_SETMASK) 
                              163 HW_ESPI_CNFG_READ_RAM_CLRMASK           equ     (~HW_ESPI_CNFG_READ_RAM_SETMASK)
                              164 HW_ESPI_CNFG_SS_CLRMASK                 equ     (~HW_ESPI_CNFG_SS_SETMASK)
                              165 HW_ESPI_CNFG_MSB_FIRST_CLRMASK          equ     (~HW_ESPI_CNFG_MSB_FIRST_SETMASK)
                              166 HW_ESPI_CNFG_XFER_SIZE_CLRMASK          equ     (~HW_ESPI_CNFG_XFER_SIZE_SETMASK)
                              167 HW_ESPI_CNFG_SPI_MODE_CLRMASK           equ     (~HW_ESPI_CNFG_SPI_MODE_SETMASK)
                              169 ;C insert
                              170 ;typedef union               
                              171 ;{
                              172 ;    struct {
                              173 ;       int ESPI_EN                     : HW_ESPI_CNFG_ESPI_EN_WIDTH;
                              174 ;       int READ_RAM                    : HW_ESPI_CNFG_READ_RAM_WIDTH;
                              175 ;       int SS                          : HW_ESPI_CNFG_SS_WIDTH;
                              176 ;       int MSB_FIRST                   : HW_ESPI_CNFG_MSB_FIRST_WIDTH;
                              177 ;       int XFER_SIZE                   : HW_ESPI_CNFG_XFER_SIZE_WIDTH;
                              178 ;       int SPI_MODE                    : HW_ESPI_CNFG_SPI_MODE_WIDTH;
                              179 ;    } B;
                              180 ;
                              181 ;    int I;
                              182 ;    unsigned int U;
                              184 ;} espi_cnfg_type;
                              185 ;#define HW_ESPI_CNFG      (*(volatile espi_cnfg_type _X*) (HW_ESPI_BASEADDR+1))    /* ESPI Config Register 1 */
                              186 ;endc
                              188 ; /////////////////////////////////////////////
                              189 ; //  ESPI Clock Control Register Bit Definitions
                              190 HW_ESPI_CLKCNTRL_CLKPHA_BITPOS          equ     (0)
                              191 HW_ESPI_CLKCNTRL_CLKPOL_BITPOS          equ     (1)
                              192 HW_ESPI_CLKCNTRL_RSRVD0_BITPOS          equ     (2)
                              193 HW_ESPI_CLKCNTRL_CLKDIV_BITPOS          equ     (4)
                              194 HW_ESPI_CLKCNTRL_RSRVD1_BITPOS          equ     (12)
                              196 HW_ESPI_CLKCNTRL_CLKPHA_WIDTH           equ     (1)
                              197 HW_ESPI_CLKCNTRL_CLKPOL_WIDTH           equ     (1)
                              198 HW_ESPI_CLKCNTRL_RSRVD0_WIDTH           equ     (2)
                              199 HW_ESPI_CLKCNTRL_CLKDIV_WIDTH           equ     (8)
                              200 HW_ESPI_CLKCNTRL_RSRVD1_WIDTH           equ     (12)
                              202 HW_ESPI_CLKCNTRL_CLKPHA_SETMASK         equ     (((1<<HW_ESPI_CLKCNTRL_CLKPHA_WIDTH)-1)<<HW_ESPI_CLKCNTRL_CLKPHA_BITPOS)
                              203 HW_ESPI_CLKCNTRL_CLKPOL_SETMASK         equ     (((1<<HW_ESPI_CLKCNTRL_CLKPOL_WIDTH)-1)<<HW_ESPI_CLKCNTRL_CLKPOL_BITPOS)
                              204 HW_ESPI_CLKCNTRL_RSRVD0_SETMASK         equ     (((1<<HW_ESPI_CLKCNTRL_RSRVD0_WIDTH)-1)<<HW_ESPI_CLKCNTRL_RSRVD0_BITPOS)
                              205 HW_ESPI_CLKCNTRL_CLKDIV_SETMASK         equ     (((1<<HW_ESPI_CLKCNTRL_CLKDIV_WIDTH)-1)<<HW_ESPI_CLKCNTRL_CLKDIV_BITPOS)
                              206 HW_ESPI_CLKCNTRL_RSRVD1_SETMASK         equ     (((1<<HW_ESPI_CLKCNTRL_RSRVD1_WIDTH)-1)<<HW_ESPI_CLKCNTRL_RSRVD1_BITPOS)
                              208 HW_ESPI_CLKCNTRL_CLKPHA_CLRMASK         equ     (~HW_ESPI_CLKCNTRL_CLKPHA_SETMASK)
                              209 HW_ESPI_CLKCNTRL_CLKPOL_CLRMASK         equ     (~HW_ESPI_CLKCNTRL_CLKPOL_SETMASK)
                              210 HW_ESPI_CLKCNTRL_RSRVD0_CLRMASK         equ     (~HW_ESPI_CLKCNTRL_RSRVD0_SETMASK)
                              211 HW_ESPI_CLKCNTRL_CLKDIV_CLRMASK         equ     (~HW_ESPI_CLKCNTRL_CLKDIV_SETMASK)
                              212 HW_ESPI_CLKCNTRL_RSRVD1_CLRMASK         equ     (~HW_ESPI_CLKCNTRL_RSRVD1_SETMASK)
                              214 ;C insert
                              215 ;typedef union               
                              216 ;{
                              217 ;    struct {
                              218 ;       int CLKPHA              : HW_ESPI_CLKCNTRL_CLKPHA_WIDTH;
                              219 ;       int CLKPOL              : HW_ESPI_CLKCNTRL_CLKPOL_WIDTH;
                              220 ;       int RSRVD0              : HW_ESPI_CLKCNTRL_RSRVD0_WIDTH;
                              221 ;       int CLKDIV              : HW_ESPI_CLKCNTRL_CLKDIV_BITPOS;
                              222 ;       int RSRVD1              : HW_ESPI_CLKCNTRL_RSRVD1_WIDTH;
                              223 ;    } B;
                              224 ;
                              225 ;    int I;
                              226 ;    unsigned int U;
                              228 ;} espi_clkcntrl_type;
                              229 ;#define HW_ESPI_CLKCNTRL      (*(volatile espi_clkcntrl_type _X*) (HW_ESPI_BASEADDR+2))    /* ESPI Clock Control Register */
                              230 ;endc
                              232 ; /////////////////////////////////////////////
                              233 ; //  ESPI PIO Data Register Bit Definitions
                              234 HW_ESPI_PIODATA_MATCH_BITPOS            equ     (0)
                              235 HW_ESPI_PIODATA_IN_BITPOS               equ     (8)
                              236 HW_ESPI_PIODATA_OUT_BITPOS              equ     (16)
                              238 HW_ESPI_PIODATA_MATCH_WIDTH             equ     (8)
                              239 HW_ESPI_PIODATA_IN_WIDTH                equ     (8)
                              240 HW_ESPI_PIODATA_OUT_WIDTH               equ     (8)
                              242 HW_ESPI_PIODATA_MATCH_SETMASK           equ     (((1<<HW_ESPI_PIODATA_MATCH_WIDTH)-1)<<HW_ESPI_PIODATA_MATCH_BITPOS)
                              243 HW_ESPI_PIODATA_IN_SETMASK              equ     (((1<<HW_ESPI_PIODATA_IN_WIDTH)-1)<<HW_ESPI_PIODATA_IN_BITPOS)
                              244 HW_ESPI_PIODATA_OUT_SETMASK             equ     (((1<<HW_ESPI_PIODATA_OUT_WIDTH)-1)<<HW_ESPI_PIODATA_OUT_BITPOS)
                              246 HW_ESPI_PIODATA_MATCH_CLRMASK           equ     (~HW_ESPI_PIODATA_MATCH_SETMASK)
                              247 HW_ESPI_PIODATA_IN_CLRMASK              equ     (~HW_ESPI_PIODATA_IN_SETMASK)
                              248 HW_ESPI_PIODATA_OUT_CLRMASK             equ     (~HW_ESPI_PIODATA_OUT_SETMASK)
                              249 ;C insert
                              250 ;typedef union               
                              251 ;{
                              252 ;    struct {
                              253 ;       int MATCH               : HW_ESPI_PIODATA_MATCH_WIDTH;
                              254 ;       int IN                  : HW_ESPI_PIODATA_IN_WIDTH;
                              255 ;       int OUT                 : HW_ESPI_PIODATA_OUT_WIDTH;
                              256 ;    } B;
                              257 ;
                              258 ;    int I;
                              259 ;    unsigned int U;
                              261 ;} espi_piodata_type;
                              262 ;#define HW_ESPI_PIODATA      (*(volatile espi_piodata_type _X*) (HW_ESPI_BASEADDR+3))    /* ESPI Clock Control Register */
                              263 ;endc
                              265 ; /////////////////////////////////////////////
                              266 ; //  ESPI DMA Address Register Bit Definitions
                              267 HW_ESPI_ADDR_ADDR_BITPOS                equ     (0)
                              268 HW_ESPI_ADDR_ADDR_WIDTH                 equ     (16)
                              269 HW_ESPI_ADDR_ADDR_SETMASK               equ     (((1<<HW_ESPI_ADDR_ADDR_WIDTH)-1)<<HW_ESPI_ADDR_ADDR_BITPOS)
                              270 HW_ESPI_ADDR_ADDR_CLRMASK               equ     (~HW_ESPI_ADDR_ADDR_SETMASK)
                              272 ;C insert
                              273 ;typedef union               
                              274 ;{
                              275 ;    struct {
                              276 ;       int ADDR                : HW_ESPI_ADDR_ADDR_WIDTH;
                              277 ;    } B;
                              278 ;
                              279 ;    int I;
                              280 ;    unsigned int U;
                              282 ;} espi_addr_type;
                              283 ;#define HW_ESPI_ADDR      (*(volatile espi_addr_type _X*) (HW_ESPI_BASEADDR+4))    /* ESPI DMA Address Register */
                              284 ;endc
                              286 ; /////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              287 ; //  ESPI DMA Index Register Bit Definitions
                              288 HW_ESPI_INDEX_BYTE_BITPOS               equ     (0)
                              289 HW_ESPI_INDEX_RSVD0_BITPOS              equ     (2)
                              290 HW_ESPI_INDEX_MEM_SPACE_BITPOS          equ     (4)
                              292 HW_ESPI_INDEX_BYTE_WIDTH                equ     (2)
                              293 HW_ESPI_INDEX_RSVD0_WIDTH               equ     (2)
                              294 HW_ESPI_INDEX_MEM_SPACE_WIDTH           equ     (2)
                              296 HW_ESPI_INDEX_BYTE_SETMASK              equ     (((1<<HW_ESPI_INDEX_BYTE_WIDTH)-1)<<HW_ESPI_INDEX_BYTE_BITPOS)
                              297 HW_ESPI_INDEX_RSVD0_SETMASK             equ     (((1<<HW_ESPI_INDEX_RSVD0_WIDTH)-1)<<HW_ESPI_INDEX_RSVD0_BITPOS)
                              298 HW_ESPI_INDEX_MEM_SPACE_SETMASK         equ     (((1<<HW_ESPI_INDEX_MEM_SPACE_WIDTH)-1)<<HW_ESPI_INDEX_MEM_SPACE_BITPOS)
                              300 HW_ESPI_INDEX_BYTE_CLRMASK              equ     (~HW_ESPI_INDEX_BYTE_SETMASK)
                              301 HW_ESPI_INDEX_RSVD0_CLRMASK             equ     (~HW_ESPI_INDEX_RSVD0_SETMASK)
                              302 HW_ESPI_INDEX_MEM_SPACE_CLRMASK         equ     (~HW_ESPI_INDEX_MEM_SPACE_SETMASK)
                              304 ;C insert
                              305 ;typedef union               
                              306 ;{
                              307 ;    struct {
                              308 ;       int OFFSET              : HW_ESPI_INDEX_BYTE_WIDTH;
                              309 ;       int RSVD0               : HW_ESPI_INDEX_RSVD0_WIDTH;
                              310 ;       int MEM_SPACE           : HW_ESPI_INDEX_MEM_SPACE_WIDTH;
                              311 ;    } B;
                              312 ;
                              313 ;    int I;
                              314 ;    unsigned int U;
                              316 ;} espi_index_type;
                              317 ;#define HW_ESPI_INDEX      (*(volatile espi_index_type _X*) (HW_ESPI_BASEADDR+5))    /* ESPI DMA Index Register */
                              318 ;endc
                               25         include "regsfilco.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;  File        : regsfilco.inc
                                4 ;;  Description : FILCO IP Register definition
                                5 ;; Last Edited 2.26.2003 Rod Holley
                                6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                8 ; The following naming conventions are followed in this file.
                                9 ; All registers are named using the format...
                               10 ;     HW_<module>_<regname>
                               11 ; where <module> is the module name which can be any of the following...
                               12 ;     FILCO
                               13 ; (Note that when there is more than one copy of a particular module, the
                               14 ; module name includes a number starting from 0 for the first instance of
                               15 ; that module)
                               16 ;
                               17 ; <regname> is the specific register within that module
                               18 ;
                               19 ; We also define the following...
                               20 ;
                               21 ;     HW_<module>_<regname>_BITPOS
                               22 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               23 ;
                               24 ;     HW_<module>_<regname>_SETMASK
                               25 ; which does something else, and
                               26 ;
                               27 ;     HW_<module>_<regname>_CLRMASK
                               28 ; which does something else.
                               29 ;
                               30 ; Other rules
                               31 ;     All caps
                               32 ;     Numeric identifiers start at 0
                               35 regsfilcoinc            equ         1
                               37 ;C insert
                               38 ;#include "types.h"
                               39 ;endc
                               41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 ;   FILCO STMP Registers 
                               43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               44 HW_FILCO_BASEADDR                       equ     ($FB80)
                               46 ;///////////////////////////////////////////////////////////////////////////////
                               47 ;  FILCO Registers
                               48 ;///////////////////////////////////////////////////////////////////////////////
                               50 ;ASM Only
                               51 HW_FILCO_CSR                            equ     (HW_FILCO_BASEADDR)
                               52 HW_FILCO_SAT                            equ     (HW_FILCO_BASEADDR+1)
                               53 HW_FILCO_CBAR                           equ     (HW_FILCO_BASEADDR+2)
                               54 HW_FILCO_CMR                            equ     (HW_FILCO_BASEADDR+3)
                               55 HW_FILCO_CCPR                           equ     (HW_FILCO_BASEADDR+4)
                               56 HW_FILCO_INTR                           equ     (HW_FILCO_BASEADDR+11)
                               57 HW_FILCO_KICK                           equ     (HW_FILCO_BASEADDR+12)
                               58 HW_FILCO_DBAR                           equ     (HW_FILCO_BASEADDR+13)
                               59 HW_FILCO_DMR                            equ     (HW_FILCO_BASEADDR+14)
                               60 HW_FILCO_DCPR                           equ     (HW_FILCO_BASEADDR+15)
                               61 HW_FILCO_SBAR                           equ     (HW_FILCO_BASEADDR+16)
                               62 HW_FILCO_SMR                            equ     (HW_FILCO_BASEADDR+17)
                               63 HW_FILCO_SCPR                           equ     (HW_FILCO_BASEADDR+18)
                               64 HW_FILCO_IIRGAIN                        equ     (HW_FILCO_BASEADDR+24)
                               65 HW_FILCO_WCNT                           equ     (HW_FILCO_BASEADDR+27)
                               66 HW_FILCO_ZC_STATUS                      equ     (HW_FILCO_BASEADDR+28)
                               67 HW_FILCO_ZC_GAIN                        equ     (HW_FILCO_BASEADDR+29)
                               68 ;endasm
                               70 ;///////////////////////////////////////////////////////////////////////////////
                               71 ;  FILCO Control Status Register (HW_FILCO_CSR) Bit Definitions
                               72 HW_FILCO_CSR_DISABLE_BITPOS             equ     (0)
                               73 HW_FILCO_CSR_DMAOUT_BITPOS              equ     (2)
                               74 HW_FILCO_CSR_DMASAMP_BITPOS             equ     (3)
                               75 HW_FILCO_CSR_DMACOEF_BITPOS             equ     (6)
                               76 HW_FILCO_CSR_FILCOSEL_BITPOS            equ     (11)
                               77 HW_FILCO_CSR_IIRMODE_BITPOS             equ     (12)
                               78 HW_FILCO_CSR_IIRSCALE_BITPOS            equ     (13)
                               79 HW_FILCO_CSR_FIRMODE_BITPOS             equ     (14)
                               80 HW_FILCO_CSR_CLKDIV_BITPOS              equ     (16)
                               81 HW_FILCO_CSR_CLKGT_BITPOS               equ     (23)
                               83 HW_FILCO_CSR_DISABLE_WIDTH              equ     (1)
                               84 HW_FILCO_CSR_DMAOUT_WIDTH               equ     (2)
                               85 HW_FILCO_CSR_DMASAMP_WIDTH              equ     (2)
                               86 HW_FILCO_CSR_DMACOEF_WIDTH              equ     (2)
                               87 HW_FILCO_CSR_FILCOSEL_WIDTH             equ     (1)
                               88 HW_FILCO_CSR_IIRMODE_WIDTH              equ     (1)
                               89 HW_FILCO_CSR_IIRSCALE_WIDTH             equ     (1)
                               90 HW_FILCO_CSR_FIRMODE_WIDTH              equ     (2)
                               91 HW_FILCO_CSR_CLKDIV_WIDTH               equ     (4)
                               92 HW_FILCO_CSR_CLKGT_WIDTH                equ     (1)
                               94 HW_FILCO_CSR_DISABLE_SETMASK            equ     (((1<<HW_FILCO_CSR_DISABLE_WIDTH)-1)<<HW_FILCO_CSR_DISABLE_BITPOS)
                               95 HW_FILCO_CSR_DMAOUT_SETMASK             equ     (((1<<HW_FILCO_CSR_DMAOUT_WIDTH)-1)<<HW_FILCO_CSR_DMAOUT_BITPOS)
                               96 HW_FILCO_CSR_DMASAMP_SETMASK            equ     (((1<<HW_FILCO_CSR_DMASAMP_WIDTH)-1)<<HW_FILCO_CSR_DMASAMP_BITPOS)
                               97 HW_FILCO_CSR_DMACOEF_SETMASK            equ     (((1<<HW_FILCO_CSR_DMACOEF_WIDTH)-1)<<HW_FILCO_CSR_DMACOEF_BITPOS)
                               98 HW_FILCO_CSR_FILCOSEL_SETMASK           equ     (((1<<HW_FILCO_CSR_FILCOSEL_WIDTH)-1)<<HW_FILCO_CSR_FILCOSEL_BITPOS)
                               99 HW_FILCO_CSR_IIRMODE_SETMASK            equ     (((1<<HW_FILCO_CSR_IIRMODE_WIDTH)-1)<<HW_FILCO_CSR_IIRMODE_BITPOS)
                              100 HW_FILCO_CSR_IIRSCALE_SETMASK           equ     (((1<<HW_FILCO_CSR_IIRSCALE_WIDTH)-1)<<HW_FILCO_CSR_IIRSCALE_BITPOS)
                              101 HW_FILCO_CSR_FIRMODE_SETMASK            equ     (((1<<HW_FILCO_CSR_FIRMODE_WIDTH)-1)<<HW_FILCO_CSR_FIRMODE_BITPOS)
                              102 HW_FILCO_CSR_CLKDIV_SETMASK             equ     (((1<<HW_FILCO_CSR_CLKDIV_WIDTH)-1)<<HW_FILCO_CSR_CLKDIV_BITPOS)
                              103 HW_FILCO_CSR_CLKGT_SETMASK              equ     (((1<<HW_FILCO_CSR_CLKGT_WIDTH)-1)<<HW_FILCO_CSR_CLKGT_BITPOS)
                              105 HW_FILCO_CSR_DISABLE_CLRMASK            equ     (~HW_FILCO_CSR_DISABLE_SETMASK)
                              106 HW_FILCO_CSR_DMAOUT_CLRMASK             equ     (~HW_FILCO_CSR_DMAOUT_SETMASK)
                              107 HW_FILCO_CSR_DMASAMP_CLRMASK            equ     (~HW_FILCO_CSR_DMASAMP_SETMASK)
                              108 HW_FILCO_CSR_DMACOEF_CLRMASK            equ     (~HW_FILCO_CSR_DMACOEF_SETMASK)
                              109 HW_FILCO_CSR_FILCOSEL_CLRMASK           equ     (~HW_FILCO_CSR_FILCOSEL_SETMASK)
                              110 HW_FILCO_CSR_IIRMODE_CLRMASK            equ     (~HW_FILCO_CSR_IIRMODE_SETMASK)
                              111 HW_FILCO_CSR_IIRSCALE_CLRMASK           equ     (~HW_FILCO_CSR_IIRSCALE_SETMASK)
                              112 HW_FILCO_CSR_FIRMODE_CLRMASK            equ     (~HW_FILCO_CSR_FIRMODE_SETMASK)
                              113 HW_FILCO_CSR_CLKDIV_CLRMASK             equ     (~HW_FILCO_CSR_CLKDIV_SETMASK)
                              114 HW_FILCO_CSR_CLKGT_CLRMASK              equ     (~HW_FILCO_CSR_CLKGT_SETMASK)
                              116 ;C insert
                              117 ;typedef union               
                              118 ;{
                              119 ;    struct {
                              120 ;        int DISABLE    : HW_FILCO_CSR_DISABLE_WIDTH ;
                              121 ;        int DMAOUT     : HW_FILCO_CSR_DMAOUT_WIDTH ;
                              122 ;        int DMASAMP    : HW_FILCO_CSR_DMASAMP_WIDTH ;  
                              123 ;        int DMACOEF    : HW_FILCO_CSR_DMACOEF_WIDTH ;   
                              124 ;        int FILCOSEL   : HW_FILCO_CSR_FILCOSEL_WIDTH ;  
                              125 ;        int IIRMODE    : HW_FILCO_CSR_IIRMODE_WIDTH ;   
                              126 ;        int IIRSCALE   : HW_FILCO_CSR_IIRSCALE_WIDTH ;  
                              127 ;        int FIRMODE    : HW_FILCO_CSR_FIRMODE_WIDTH ;   
                              128 ;        int CLKDIV     : HW_FILCO_CSR_CLKDIV_WIDTH ;    
                              129 ;        int CLKGT      : HW_FILCO_CSR_CLKGT_WIDTH ;     
                              130 ;    } B;
                              131 ;    int I;
                              132 ;} filcocsr_type;
                              134 ;#define HW_FILCO_CSR      (*(volatile filcocsr_type _X*) (HW_FILCO_BASEADDR))    /* FILCO Control / Status Register */
                              135 ;endc
                              137 ;///////////////////////////////////////////////////////////////////////////////
                              138 ;  FILCO  (HW_FILCO_SAT) Bit Definitions
                              139 HW_FILCO_SAT_BITPOS             equ     (0)
                              141 HW_FILCO_SAT_WIDTH              equ     (8)
                              143 HW_FILCO_SAT_SETMASK            equ     (((1<<HW_FILCO_SAT_WIDTH)-1)<<HW_FILCO_SAT_BITPOS)
                              145 HW_FILCO_SAT_CLRMASK            equ     (~HW_FILCO_SAT_SETMASK)
                              147 ;C insert
                              148 ;typedef union               
                              149 ;{
                              150 ;    struct {
                              151 ;        int SAT        : HW_FILCO_SAT_WIDTH ;
                              152 ;    } B;
                              153 ;    int I;
                              154 ;} filcosat_type;
                              156 ;#define HW_FILCOSAT      (*(volatile filcosat_type _X*) (HW_FILCO_BASEADDR+1))    /* FILCO Saturation Register */
                              157 ;endc
                              159 ;///////////////////////////////////////////////////////////////////////////////
                              160 ;  FILCO  (HW_FILCO_CBAR) Bit Definitions
                              161 HW_FILCO_CBAR_BITPOS             equ     (0)
                              163 HW_FILCO_CBAR_WIDTH              equ     (16)
                              165 HW_FILCO_CBAR_SETMASK            equ     (((1<<HW_FILCO_CBAR_WIDTH)-1)<<HW_FILCO_CBAR_BITPOS)
                              167 HW_FILCO_CBAR_CLRMASK            equ     (~HW_FILCO_CBAR_SETMASK)
                              169 ;C insert
                              170 ;typedef union               
                              171 ;{
                              172 ;    struct {
                              173 ;        int CBAR       : HW_FILCO_CBAR_WIDTH;
                              174 ;    } B;
                              175 ;    int I;
                              176 ;} filcocbar_type;
                              178 ;#define HW_FILCO_CBAR      (*(volatile filcocbar_type _X*) (HW_FILCO_BASEADDR+2))    /* FILCO Coef Base Address */
                              179 ;endc
                              181 ;///////////////////////////////////////////////////////////////////////////////
                              182 ;  FILCO  (HW_FILCO_CMR) Bit Definitions
                              183 HW_FILCO_CMR_BITPOS             equ     (0)
                              185 HW_FILCO_CMR_WIDTH              equ     (8)
                              187 HW_FILCO_CMR_SETMASK            equ     (((1<<HW_FILCO_CMR_WIDTH)-1)<<HW_FILCO_CMR_BITPOS)
                              189 HW_FILCO_CMR_CLRMASK            equ     (~HW_FILCO_CMR_SETMASK)
                              191 ;C insert
                              192 ;typedef union               
                              193 ;{
                              194 ;    struct {
                              195 ;        int CMR        : HW_FILCO_CMR_WIDTH;
                              196 ;    } B;
                              197 ;    int I;
                              198 ;} filcocmr_type;
                              200 ;#define HW_FILCO_CMR      (*(volatile filcocmr_type _X*) (HW_FILCO_BASEADDR+3))    /* FILCO Coef Modulus Register */
                              201 ;endc
                              203 ;///////////////////////////////////////////////////////////////////////////////
                              204 ;  FILCO  (HW_FILCO_CCPR) Bit Definitions
                              205 HW_FILCO_CCPR_BITPOS             equ     (0)
                              207 HW_FILCO_CCPR_WIDTH              equ     (8)
                              209 HW_FILCO_CCPR_SETMASK            equ     (((1<<HW_FILCO_CCPR_WIDTH-1)<<HW_FILCO_CCPR_BITPOS))
                              211 HW_FILCO_CCPR_CLRMASK            equ     (~HW_FILCO_CCPR_SETMASK)
                              213 ;C insert
                              214 ;typedef union               
                              215 ;{
                              216 ;    struct {
                              217 ;        int CCPR       : HW_FILCO_CCPR_WIDTH;
                              218 ;    } B;
                              219 ;    int I;
                              220 ;} filcoccpr_type;
                              222 ;#define HW_FILCO_CCPR      (*(volatile filcoccpr_type _X*) (HW_FILCO_BASEADDR+4))    /* FILCO Coef Current Position Register */
                              223 ;endc
                              226 ;///////////////////////////////////////////////////////////////////////////////
                              227 ;  FILCO  (HW_FILCO_S0) Bit Definitions
                              228 HW_FILCO_S0_BITPOS             equ     (0)
                              230 HW_FILCO_S0_WIDTH              equ     (24)
                              232 HW_FILCO_S0_SETMASK            equ     (((1<<HW_FILCO_S0_WIDTH-1)<<HW_FILCO_S0_BITPOS))
                              234 HW_FILCO_S0_CLRMASK            equ     (~HW_FILCO_S0_SETMASK)
                              236 ;C insert
                              237 ;typedef union               
                              238 ;{
                              239 ;    struct {
                              240 ;        int S0         : HW_FILCO_S0_WIDTH;
                              241 ;    } B;
                              242 ;    int I;
                              243 ;} filcos0_type;
                              245 ;#define HW_FILCO_S0      (*(volatile filcos0_type _X*) (HW_FILCO_BASEADDR+5))    /* FILCO Sample addr S0 Register */
                              246 ;endc
                              249 ;///////////////////////////////////////////////////////////////////////////////
                              250 ;  FILCO  (HW_FILCO_S1) Bit Definitions
                              251 HW_FILCO_S1_BITPOS             equ     (0)
                              253 HW_FILCO_S1_WIDTH              equ     (24)
                              255 HW_FILCO_S1_SETMASK            equ     (((1<<HW_FILCO_S1_WIDTH-1)<<HW_FILCO_S1_BITPOS))
                              257 HW_FILCO_S1_CLRMASK            equ     (~HW_FILCO_S1_SETMASK)
                              259 ;C insert
                              260 ;typedef union               
                              261 ;{
                              262 ;    struct {
                              263 ;        int S1         : HW_FILCO_S1_WIDTH;
                              264 ;    } B;
                              265 ;    int I;
                              266 ;} filcos1_type;
                              268 ;#define HW_FILCO_S1      (*(volatile filcos1_type _X*) (HW_FILCO_BASEADDR+6))    /* FILCO Sample addr S1 Register */
                              269 ;endc
                              271 ;///////////////////////////////////////////////////////////////////////////////
                              272 ;  FILCO  (HW_FILCO_S2) Bit Definitions
                              273 HW_FILCO_S2_BITPOS             equ     (0)
                              275 HW_FILCO_S2_WIDTH              equ     (24)
                              277 HW_FILCO_S2_SETMASK            equ     (((1<<HW_FILCO_S2_WIDTH-1)<<HW_FILCO_S2_BITPOS))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                              279 HW_FILCO_S2_CLRMASK            equ     (~HW_FILCO_S2_SETMASK)
                              281 ;C insert
                              282 ;typedef union               
                              283 ;{
                              284 ;    struct {
                              285 ;        int S2         : HW_FILCO_S2_WIDTH;
                              286 ;    } B;
                              287 ;    int I;
                              288 ;} filcos2_type;
                              290 ;#define HW_FILCO_S2      (*(volatile filcos2_type _X*) (HW_FILCO_BASEADDR+7))    /* FILCO Sample addr S2 Register */
                              291 ;endc
                              293 ;///////////////////////////////////////////////////////////////////////////////
                              294 ;  FILCO  (HW_FILCO_S3) Bit Definitions
                              295 HW_FILCO_S3_BITPOS             equ     (0)
                              297 HW_FILCO_S3_WIDTH              equ     (24)
                              299 HW_FILCO_S3_SETMASK            equ     (((1<<HW_FILCO_S3_WIDTH-1)<<HW_FILCO_S3_BITPOS))
                              301 HW_FILCO_S3_CLRMASK            equ     (~HW_FILCO_S3_SETMASK)
                              303 ;C insert
                              304 ;typedef union               
                              305 ;{
                              306 ;    struct {
                              307 ;        int S3         : HW_FILCO_S3_WIDTH;
                              308 ;    } B;
                              309 ;    int I;
                              310 ;} filcos3_type;
                              312 ;#define HW_FILCO_S3      (*(volatile filcos3_type _X*) (HW_FILCO_BASEADDR+8))    /* FILCO Sample addr S3 Register */
                              313 ;endc
                              315 ;///////////////////////////////////////////////////////////////////////////////
                              316 ;  FILCO  (HW_FILCO_S4) Bit Definitions
                              317 HW_FILCO_S4_BITPOS             equ     (0)
                              319 HW_FILCO_S4_WIDTH              equ     (24)
                              321 HW_FILCO_S4_SETMASK            equ     (((1<<HW_FILCO_S4_WIDTH-1)<<HW_FILCO_S4_BITPOS))
                              323 HW_FILCO_S4_CLRMASK            equ     (~HW_FILCO_S4_SETMASK)
                              325 ;C insert
                              326 ;typedef union               
                              327 ;{
                              328 ;    struct {
                              329 ;        int S4         : HW_FILCO_S4_WIDTH;
                              330 ;    } B;
                              331 ;    int I;
                              332 ;} filcos4_type;
                              334 ;#define HW_FILCO_S4      (*(volatile filcos4_type _X*) (HW_FILCO_BASEADDR+9))    /* FILCO Sample addr S4 Register */
                              335 ;endc
                              337 ;///////////////////////////////////////////////////////////////////////////////
                              338 ;  FILCO  (HW_FILCO_S5) Bit Definitions
                              339 HW_FILCO_S5_BITPOS             equ     (0)
                              341 HW_FILCO_S5_WIDTH              equ     (24)
                              343 HW_FILCO_S5_SETMASK            equ     (((1<<HW_FILCO_S5_WIDTH)-1)<<HW_FILCO_S5_BITPOS)
                              345 HW_FILCO_S5_CLRMASK            equ     (~HW_FILCO_S5_SETMASK)
                              347 ;C insert
                              348 ;typedef union               
                              349 ;{
                              350 ;    struct {
                              351 ;        int S5         : HW_FILCO_S5_WIDTH;
                              352 ;    } B;
                              353 ;    int I;
                              354 ;} filcos5_type;
                              356 ;#define HW_FILCO_S5      (*(volatile filcos5_type _X*) (HW_FILCO_BASEADDR+10))    /* FILCO Sample addr S5 Register */
                              357 ;endc
                              360 ;///////////////////////////////////////////////////////////////////////////////
                              361 ;  FILCO  (HW_FILCO_INTR) Bit Definitions
                              362 HW_FILCO_INTR_IRQEN_BITPOS       equ     (0)
                              363 HW_FILCO_INTR_IRQ_BITPOS         equ     (1)
                              365 HW_FILCO_INTR_IRQEN_WIDTH        equ     (1)
                              366 HW_FILCO_INTR_IRQ_WIDTH          equ     (1)
                              368 HW_FILCO_INTR_IRQEN_SETMASK      equ     (((1<<HW_FILCO_INTR_IRQEN_WIDTH)-1)<<HW_FILCO_INTR_IRQEN_BITPOS)
                              369 HW_FILCO_INTR_IRQ_SETMASK        equ     (((1<<HW_FILCO_INTR_IRQ_WIDTH)-1)<<HW_FILCO_INTR_IRQ_BITPOS)
                              370                                  
                              371 HW_FILCO_INTR_IRQEN_CLRMASK      equ     (~HW_FILCO_INTR_IRQEN_SETMASK)
                              372 HW_FILCO_INTR_IRQ_CLRMASK        equ     (~HW_FILCO_INTR_IRQ_SETMASK)
                              374 ;C insert
                              375 ;typedef union               
                              376 ;{
                              377 ;    struct {
                              378 ;        int IRQEN      : HW_FILCO_INTR_IRQEN_WIDTH;
                              379 ;        int IRQ        : HW_FILCO_INTR_IRQ_WIDTH;
                              380 ;    } B;
                              381 ;    int I;
                              382 ;} filcointr_type;
                              384 ;#define HW_FILCO_INTR      (*(volatile filcokick_type _X*) (HW_FILCO_BASEADDR+11))    /* FILCO Interupt Register */
                              385 ;endc
                              387 ;///////////////////////////////////////////////////////////////////////////////
                              388 ;  FILCO  (HW_FILCO_KICK) Bit Definitions
                              389 HW_FILCO_KICK_KICK_BITPOS       equ     (0)
                              390 HW_FILCO_KICK_UNKICK_BITPOS     equ     (1)
                              392 HW_FILCO_KICK_KICK_WIDTH        equ     (1)
                              393 HW_FILCO_KICK_UNKICK_WIDTH      equ     (1)
                              395 HW_FILCO_KICK_KICK_SETMASK      equ     (((1<<HW_FILCO_KICK_KICK_WIDTH)-1)<<HW_FILCO_KICK_KICK_BITPOS)
                              396 HW_FILCO_KICK_UNKICK_SETMASK    equ     (((1<<HW_FILCO_KICK_UNKICK_WIDTH)-1)<<HW_FILCO_KICK_UNKICK_BITPOS)
                              397                                  
                              398 HW_FILCO_KICK_KICK_CLRMASK      equ     (~HW_FILCO_KICK_KICK_SETMASK)
                              399 HW_FILCO_KICK_UNKICK_CLRMASK    equ     (~HW_FILCO_KICK_UNKICK_SETMASK)
                              401 ;C insert
                              402 ;typedef union               
                              403 ;{
                              404 ;    struct {
                              405 ;        int KICK               : HW_FILCO_KICK_KICK_WIDTH;
                              406 ;        int UNKICK             : HW_FILCO_KICK_UNKICK_WIDTH;
                              407 ;    } B;
                              408 ;    int I;
                              409 ;} filcoKICK_type;
                              411 ;#define HW_FILCO_KICK      (*(volatile filcoKICK_type _X*) (HW_FILCO_BASEADDR+12))    /* FILCO Sample addr KICK Register */
                              412 ;endc
                              417 ;///////////////////////////////////////////////////////////////////////////////
                              418 ;  FILCO  (HW_FILCO_DBAR) Bit Definitions
                              419 HW_FILCO_DBAR_BITPOS             equ     (0)
                              421 HW_FILCO_DBAR_WIDTH              equ     (16)
                              423 HW_FILCO_DBAR_SETMASK            equ     (((1<<HW_FILCO_DBAR_WIDTH)-1)<<HW_FILCO_DBAR_BITPOS)
                              425 HW_FILCO_DBAR_CLRMASK            equ     (~HW_FILCO_DBAR_SETMASK)
                              427 ;C insert
                              428 ;typedef union               
                              429 ;{
                              430 ;    struct {
                              431 ;        int DBAR       : HW_FILCO_DBAR_WIDTH;
                              432 ;    } B;
                              433 ;    int I;
                              434 ;} filcodbar_type;
                              436 ;#define HW_FILCO_DBAR      (*(volatile filcodbar_type _X*) (HW_FILCO_BASEADDR+13))    /* FILCO Input Sample Base Address */
                              437 ;endc
                              439 ;///////////////////////////////////////////////////////////////////////////////
                              440 ;  FILCO  (HW_FILCO_DMR) Bit Definitions
                              441 HW_FILCO_DMR_BITPOS             equ     (0)
                              443 HW_FILCO_DMR_WIDTH              equ     (13)
                              445 HW_FILCO_DMR_SETMASK            equ     (((1<<HW_FILCO_DMR_WIDTH)-1)<<HW_FILCO_DMR_BITPOS)
                              447 HW_FILCO_DMR_CLRMASK            equ     (~HW_FILCO_DMR_SETMASK)
                              449 ;C insert
                              450 ;typedef union               
                              451 ;{
                              452 ;    struct {
                              453 ;        int DMR                : HW_FILCO_DMR_WIDTH;
                              454 ;    } B;
                              455 ;    int I;
                              456 ;} filcodmr_type;
                              458 ;#define HW_FILCO_DMR      (*(volatile filcodmr_type _X*) (HW_FILCO_BASEADDR+14))    /* FILCO Input Sample Modulus Register */
                              459 ;endc
                              461 ;///////////////////////////////////////////////////////////////////////////////
                              462 ;  FILCO  (HW_FILCO_DCPR) Bit Definitions
                              463 HW_FILCO_DCPR_BITPOS             equ     (0)
                              465 HW_FILCO_DCPR_WIDTH              equ     (13)
                              467 HW_FILCO_DCPR_SETMASK            equ     (((1<<HW_FILCO_DCPR_WIDTH)-1)<<HW_FILCO_DCPR_BITPOS)
                              469 HW_FILCO_DCPR_CLRMASK            equ     (~HW_FILCO_DCPR_SETMASK)
                              471 ;C insert
                              472 ;typedef union               
                              473 ;{
                              474 ;    struct {
                              475 ;        int DCPR               : HW_FILCO_DCPR_WIDTH;
                              476 ;    } B;
                              477 ;    int I;
                              478 ;} filcodcpr_type;
                              480 ;#define HW_FILCO_DCPR      (*(volatile filcodcpr_type _X*) (HW_FILCO_BASEADDR+15))    /* FILCO Input Sample Current Position Register */
                              481 ;endc
                              484 ;///////////////////////////////////////////////////////////////////////////////
                              485 ;  FILCO  (HW_FILCO_SBAR) Bit Definitions
                              486 HW_FILCO_SBAR_BITPOS             equ     (0)
                              488 HW_FILCO_SBAR_WIDTH              equ     (16)
                              490 HW_FILCO_SBAR_SETMASK            equ     (((1<<HW_FILCO_SBAR_WIDTH)-1)<<HW_FILCO_SBAR_BITPOS)
                              492 HW_FILCO_SBAR_CLRMASK            equ     (~HW_FILCO_SBAR_SETMASK)
                              494 ;C insert
                              495 ;typedef union               
                              496 ;{
                              497 ;    struct {
                              498 ;        int SBAR               : HW_FILCO_SBAR_WIDTH;
                              499 ;    } B;
                              500 ;    int I;
                              501 ;} filcosbar_type;
                              503 ;#define HW_FILCO_SBAR      (*(volatile filcosbar_type _X*) (HW_FILCO_BASEADDR+16))    /* FILCO Output Sample Base Address */
                              504 ;endc
                              506 ;///////////////////////////////////////////////////////////////////////////////
                              507 ;  FILCO  (HW_FILCO_SMR) Bit Definitions
                              508 HW_FILCO_SMR_BITPOS             equ     (0)
                              510 HW_FILCO_SMR_WIDTH              equ     (13)
                              512 HW_FILCO_SMR_SETMASK            equ     (((1<<HW_FILCO_SMR_WIDTH)-1)<<HW_FILCO_SMR_BITPOS)
                              514 HW_FILCO_SMR_CLRMASK            equ     (~HW_FILCO_SMR_SETMASK)
                              516 ;C insert
                              517 ;typedef union               
                              518 ;{
                              519 ;    struct {
                              520 ;        int SMR                : HW_FILCO_SMR_WIDTH;
                              521 ;    } B;
                              522 ;    int I;
                              523 ;} filcosmr_type;
                              525 ;#define HW_FILCO_SMR      (*(volatile filcosmr_type _X*) (HW_FILCO_BASEADDR+17))    /* FILCO Output Sample Modulus Register */
                              526 ;endc
                              528 ;///////////////////////////////////////////////////////////////////////////////
                              529 ;  FILCO  (HW_FILCO_SCPR) Bit Definitions
                              530 HW_FILCO_SCPR_BITPOS             equ     (0)
                              532 HW_FILCO_SCPR_WIDTH              equ     (13)
                              534 HW_FILCO_SCPR_SETMASK            equ     (((1<<HW_FILCO_SCPR_WIDTH)-1)<<HW_FILCO_SCPR_BITPOS)
                              536 HW_FILCO_SCPR_CLRMASK            equ     (~HW_FILCO_SCPR_SETMASK)
                              538 ;C insert
                              539 ;typedef union               
                              540 ;{
                              541 ;    struct {
                              542 ;        int SCPR               : HW_FILCO_SCPR_WIDTH;
                              543 ;    } B;
                              544 ;    int I;
                              545 ;} filcoscpr_type;
                              547 ;#define HW_FILCO_SCPR      (*(volatile filcoscpr_type _X*) (HW_FILCO_BASEADDR+18))    /* FILCO Output Sample Current Position Register */
                              548 ;endc
                              553 ;///////////////////////////////////////////////////////////////////////////////
                              554 ;  FILCO  (HW_FILCO_IIRGAIN) Bit Definitions
                              555 HW_FILCO_IIRGAIN_BITPOS             equ     (0)
                              557 HW_FILCO_IIRGAIN_WIDTH              equ     (24)
                              559 HW_FILCO_IIRGAIN_SETMASK            equ     (((1<<HW_FILCO_IIRGAIN_WIDTH)-1)<<HW_FILCO_IIRGAIN_BITPOS)
                              561 HW_FILCO_IIRGAIN_CLRMASK            equ     (~HW_FILCO_IIRGAIN_SETMASK)
                              563 ;C insert
                              564 ;typedef union               
                              565 ;{
                              566 ;    struct {
                              567 ;        int C5                 :HW_FILCO_IIRGAIN_WIDTH;
                              568 ;    } B;
                              569 ;    int I;
                              570 ;} filcoc5_type;
                              572 ;#define HW_FILCO_IIRGAIN      (*(volatile filcoc5_type _X*) (HW_FILCO_BASEADDR+24))    /* FILCO Coef addr C5 Register */
                              573 ;endc
                              576 ;///////////////////////////////////////////////////////////////////////////////
                              577 ;  FILCO  (HW_FILCO_WCNT) Bit Definitions
                              578 HW_FILCO_WCNT_BITPOS             equ     (0)
                              580 HW_FILCO_WCNT_WIDTH              equ     (13)
                              582 HW_FILCO_WCNT_SETMASK            equ     (((1<<HW_FILCO_WCNT_WIDTH)-1)<<HW_FILCO_WCNT_BITPOS)
                              584 HW_FILCO_WCNT_CLRMASK            equ     (~HW_FILCO_WCNT_SETMASK)
                              586 ;C insert
                              587 ;typedef union               
                              588 ;{
                              589 ;    struct {
                              590 ;        int WCNT               : HW_FILCO_WCNT_WIDTH;
                              591 ;    } B;
                              592 ;    int I;
                              593 ;} filcowcnt_type;
                              595 ;#define HW_FILCO_WCNT      (*(volatile filcowcnt_type _X*) (HW_FILCO_BASEADDR+27))    /* FILCO Word Count Register */
                              596 ;endc
                              599 ;///////////////////////////////////////////////////////////////////////////////
                              600 ;  FILCO  (HW_FILCO_ZC_STATUS) Bit Definitions
                              601 HW_FILCO_ZC_STATUS_EN_BITPOS          equ     (0)
                              602 HW_FILCO_ZC_STATUS_BITPOS             equ     (2)
                              604 HW_FILCO_ZC_STATUS_EN_WIDTH           equ     (2)
                              605 HW_FILCO_ZC_STATUS_WIDTH              equ     (2)
                              607 HW_FILCO_ZC_STATUS_EN_SETMASK         equ     (((1<<HW_FILCO_ZC_STATUS_EN_WIDTH)-1)<<HW_FILCO_ZC_STATUS_EN_BITPOS)
                              608 HW_FILCO_ZC_STATUS_SETMASK            equ     (((1<<HW_FILCO_ZC_STATUS_WIDTH)-1)<<HW_FILCO_ZC_STATUS_BITPOS)
                              610 HW_FILCO_ZC_STATUS_EN_CLRMASK         equ     (((~HW_FILCO_ZC_STATUS_EN_WIDTH)-1)<<HW_FILCO_ZC_STATUS_EN_SETMASK)
                              611 HW_FILCO_ZC_STATUS_CLRMASK            equ     (((~HW_FILCO_ZC_STATUS_WIDTH)-1)<<HW_FILCO_ZC_STATUS_SETMASK)
                              613 ;C insert
                              614 ;typedef union               
                              615 ;{
                              616 ;    struct {
                              617 ;        int ZC_STATUS_EN               : HW_FILCO_ZC_STATUS_EN_WIDTH;
                              618 ;        int ZC_STATUS                  : HW_FILCO_ZC_STATUS_WIDTH;
                              619 ;    } B;
                              620 ;    int I;
                              621 ;} filcozc_status_type;
                              623 ;#define HW_FILCO_ZC_STATUS      (*(volatile filcozc_status_type _X*) (HW_FILCO_BASEADDR+28))    /* FILCO Zero Cross Detect Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                              624 ;endc
                              626 ;///////////////////////////////////////////////////////////////////////////////
                              627 ;  FILCO  (HW_FILCO_ZC_GAIN) Bit Definitions
                              628 HW_FILCO_ZC_GAIN_BITPOS             equ     (0)
                              630 HW_FILCO_ZC_GAIN_WIDTH              equ     (24)
                              632 HW_FILCO_ZC_GAIN_SETMASK            equ     (((1<<HW_FILCO_ZC_GAIN_WIDTH)-1)<<HW_FILCO_ZC_GAIN_BITPOS)
                              634 HW_FILCO_ZC_GAIN_CLRMASK            equ     (~HW_FILCO_ZC_GAIN_SETMASK)
                              636 ;C insert
                              637 ;typedef union               
                              638 ;{
                              639 ;    struct {
                              640 ;        int ZC_GAIN            : HW_FILCO_ZC_GAIN_WIDTH;
                              641 ;    } B;
                              642 ;    int I;
                              643 ;} filcozc_gain_type;
                              645 ;#define HW_FILCO_ZC_GAIN      (*(volatile filcozc_gain_type _X*) (HW_FILCO_BASEADDR+29))    /* FILCO Word Count Register */
                              646 ;endc
                               26         include "regsgpflash.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ; Filename: regsgpflash.inc
                                5 ; Description: Register definitions for GPFLASH interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regsgpflashinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               40 ;   GPFLASH STMP Registers 
                               41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 HW_GPFLASH_BASEADDR                 equ     $F0C0
                               44 ;ASM Only
                               45 HW_GPFLASH_CSR0R                    equ     HW_GPFLASH_BASEADDR
                               46 HW_GPFLASH_CSR1R                    equ     (HW_GPFLASH_BASEADDR+1)
                               47 HW_GPFLASH_DMA_ADDR                 equ     (HW_GPFLASH_BASEADDR+2)
                               48 HW_GPFLASH_XFER_SIZER               equ     (HW_GPFLASH_BASEADDR+3)
                               49 HW_GPFLASH_TIMING1R                 equ     (HW_GPFLASH_BASEADDR+4)
                               50 HW_GPFLASH_TIMING2R                 equ     (HW_GPFLASH_BASEADDR+5)
                               51 HW_GPFLASH_TIMINGBUSYR              equ     (HW_GPFLASH_BASEADDR+6)
                               52 ;endasm
                               54 ;///////////////////////////////////////////////////////////////////////////////
                               55 ;  GPFLASH Control Status Register (HW_GPFLASH_CSR0R) Bit Definitions
                               56 HW_GPFLASH_CSR0_KICK_BITPOS                     equ     (0)
                               57 HW_GPFLASH_CSR0_RW_BITPOS                       equ     (1)
                               58 HW_GPFLASH_CSR0_INT_ENA_BITPOS                  equ     (2)
                               59 HW_GPFLASH_CSR0_INT_STATUS_BITPOS               equ     (3)
                               60 HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS            equ     (4)
                               61 HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS             equ     (8)
                               62 HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS     equ     (9)
                               63 HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS          equ     (10)
                               64 HW_GPFLASH_CSR0_SOFT_RESET_BITPOS               equ     (11)
                               65 HW_GPFLASH_CSR0_CEB_CTRL_BITPOS                 equ     (12)
                               66 HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS              equ     (13)
                               67 HW_GPFLASH_CSR0_XFER_TYPE_BITPOS                equ     (16)
                               68 HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS             equ     (20)
                               70 HW_GPFLASH_CSR0_KICK_WIDTH                      equ     (1)
                               71 HW_GPFLASH_CSR0_RW_WIDTH                        equ     (1)
                               72 HW_GPFLASH_CSR0_INT_ENA_WIDTH                   equ     (1)
                               73 HW_GPFLASH_CSR0_INT_STATUS_WIDTH                equ     (1)
                               74 HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH             equ     (4)
                               75 HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH              equ     (1)
                               76 HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_WIDTH      equ     (1)
                               77 HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDTH           equ     (1)
                               78 HW_GPFLASH_CSR0_SOFT_RESET_WIDTH                equ     (1)
                               79 HW_GPFLASH_CSR0_CEB_CTRL_WIDTH                  equ     (1)
                               80 HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH               equ     (1)
                               81 HW_GPFLASH_CSR0_XFER_TYPE_WIDTH                 equ     (4)
                               82 HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH              equ     (1)
                               84 HW_GPFLASH_CSR0_KICK_SETMASK                    equ     (((1<<HW_GPFLASH_CSR0_KICK_WIDTH)-1)<<HW_GPFLASH_CSR0_KICK_BITPOS)
                               85 HW_GPFLASH_CSR0_RW_SETMASK                      equ     (((1<<HW_GPFLASH_CSR0_RW_WIDTH)-1)<<HW_GPFLASH_CSR0_RW_BITPOS)
                               86 HW_GPFLASH_CSR0_INT_ENA_SETMASK                 equ     (((1<<HW_GPFLASH_CSR0_INT_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_INT_ENA_BITPOS)
                               87 HW_GPFLASH_CSR0_INT_STATUS_SETMASK              equ     (((1<<HW_GPFLASH_CSR0_INT_STATUS_WIDTH)-1)<<HW_GPFLASH_CSR0_INT_STATUS_BITPOS)
                               88 HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMASK           equ     (((1<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS)
                               89 HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK            equ     (((1<<HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS)
                               90 HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_SETMASK    equ     (((1<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS)
                               91 HW_GPFLASH_CSR0_BUSY_INT_STATUS_SETMASK         equ     (((1<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS)
                               92 HW_GPFLASH_CSR0_SOFT_RESET_SETMASK              equ     (((1<<HW_GPFLASH_CSR0_SOFT_RESET_WIDTH)-1)<<HW_GPFLASH_CSR0_SOFT_RESET_BITPOS)
                               93 HW_GPFLASH_CSR0_CEB_CTRL_SETMASK                equ     (((1<<HW_GPFLASH_CSR0_CEB_CTRL_WIDTH)-1)<<HW_GPFLASH_CSR0_CEB_CTRL_BITPOS)
                               94 HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK             equ     (((1<<HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH)-1)<<HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS)
                               95 HW_GPFLASH_CSR0_XFER_TYPE_SETMASK               equ     (((1<<HW_GPFLASH_CSR0_XFER_TYPE_WIDTH)-1)<<HW_GPFLASH_CSR0_XFER_TYPE_BITPOS)
                               96 HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK            equ     (((1<<HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH)-1)<<HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS)
                               98 HW_GPFLASH_CSR0_KICK_CLRMASK                    equ     (~HW_GPFLASH_CSR0_KICK_SETMASK)
                               99 HW_GPFLASH_CSR0_RW_CLRMASK                      equ     (~HW_GPFLASH_CSR0_RW_SETMASK)
                              100 HW_GPFLASH_CSR0_INT_ENA_CLRMASK                 equ     (~HW_GPFLASH_CSR0_INT_ENA_SETMASK)
                              101 HW_GPFLASH_CSR0_INT_STATUS_CLRMASK              equ     (~HW_GPFLASH_CSR0_INT_STATUS_SETMASK)
                              102 HW_GPFLASH_CSR0_BUSY_INT_TYPE_CLRMASK           equ     (~HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMASK)
                              103 HW_GPFLASH_CSR0_BUSY_INT_ENA_CLRMASK            equ     (~HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK)
                              104 HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_CLRMASK    equ     (~HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_SETMASK)
                              105 HW_GPFLASH_CSR0_BUSY_INT_STATUS_CLRMASK         equ     (~HW_GPFLASH_CSR0_BUSY_INT_STATUS_SETMASK)
                              106 HW_GPFLASH_CSR0_SOFT_RESET_CLRMASK              equ     (~HW_GPFLASH_CSR0_SOFT_RESET_SETMASK)
                              107 HW_GPFLASH_CSR0_CEB_CTRL_CLRMASK                equ     (~HW_GPFLASH_CSR0_CEB_CTRL_SETMASK)
                              108 HW_GPFLASH_CSR0_CLK_DISABLE_CLRMASK             equ     (~HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK)
                              109 HW_GPFLASH_CSR0_XFER_TYPE_CLRMASK               equ     (~HW_GPFLASH_CSR0_XFER_TYPE_SETMASK)
                              110 HW_GPFLASH_CSR0_EXT_BUSY_VAL_CLRMASK            equ     (~HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK)
                              112 ;Asm Only
                              113 HW_GPFLASH_CSR0_READ                equ     1<<HW_GPFLASH_CSR0_RW_BITPOS
                              114 HW_GPFLASH_CSR0_WRITE               equ     0
                              115 HW_GPFLASH_CSR0_CLEAR_INT           equ     1<<HW_GPFLASH_CSR0_INT_STATUS_BITPOS
                              116 HW_GPFLASH_CSR0_CEB_CTRL_RETURN_TO_HIGH equ 1<<HW_GPFLASH_CSR0_CEB_CTRL_BITPOS
                              117 HW_GPFLASH_CSR0_CMD_XFER            equ     0
                              118 HW_GPFLASH_CSR0_ADDR_XFER           equ     1<<HW_GPFLASH_CSR0_XFER_TYPE_BITPOS
                              119 HW_GPFLASH_CSR0_DATA_XFER           equ     2<<HW_GPFLASH_CSR0_XFER_TYPE_BITPOS
                              120 HW_GPFLASH_CLOCK_ENABLE             equ     $0
                              121 HW_GPFLASH_CLOCK_DISABLE            equ     $1<<HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS
                              122 ;endasm
                              124 ;C insert
                              125 ;typedef union               
                              126 ;{
                              127 ;    struct {
                              128 ;        unsigned int KICK                 :1;
                              129 ;        unsigned int RW                   :1;
                              130 ;        unsigned int INT_XFERDONE_ENA     :1;
                              131 ;        unsigned int INT_XFERDONE_STATUS  :1;
                              132 ;        unsigned int BUSY_INT_TYPE        :2;
                              133 ;        unsigned int BUSY_TIMEOUT_EDGE    :2;
                              134 ;        unsigned int BUSY_INT_ENA         :1;
                              135 ;        unsigned int BUSY_TIMEOUT_INT_ENA :1;
                              136 ;        unsigned int BUSY_INT_STATUS     :1;
                              137 ;        unsigned int SOFT_RESET           :1;
                              138 ;        unsigned int CEB_CTRL                  :1;
                              139 ;        unsigned int CLK_DISABLE               :1;
                              140 ;        unsigned int BUSY_TIMEOUT_INT_STAT     :1;
                              141 ;        unsigned int                           :1;
                              142 ;        unsigned int XFER_TYPE            :2;
                              143 ;        unsigned int SPARE                :2;
                              144 ;        unsigned int EXT_BUSY_VAL              :1;
                              145 ;        unsigned int                           :3;
                              146 ;    } B;
                              147 ;    int I;
                              148 ;} gpflashcsr0_type;
                              150 ;#define HW_GPFLASH_CSR0R     (*(volatile gpflashcsr0_type _X*) (HW_GPFLASH_BASEADDR))    /* GPFLASH Control 0 / Status Register */
                              151 ;endc
                              153 ;///////////////////////////////////////////////////////////////////////////////
                              154 ;  GPFLASH Control Status Register (HW_GPFLASH_CSR1R) Bit Definitions
                              155 HW_GPFLASH_CSR1_MEM_BITPOS                  equ     (0)
                              156 HW_GPFLASH_CSR1_START_BYTE_BITPOS           equ     (4)
                              157 HW_GPFLASH_CSR1_CEB_BITPOS                  equ     (8)
                              158 HW_GPFLASH_CSR1_WP0_BITPOS                  equ     (12)
                              159 HW_GPFLASH_CSR1_WP1_BITPOS                  equ     (13)
                              160 HW_GPFLASH_CSR1_MODE16_BITPOS               equ     (16)
                              161 HW_GPFLASH_CSR1_MUX_BITPOS                  equ     (17)
                              162 HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS     equ     (18)
                              163 HW_GPFLASH_CSR1_WP_CTL_BITPOS               equ     (19)
                              165 HW_GPFLASH_CSR1_MEM_WIDTH                  equ     (2)
                              166 HW_GPFLASH_CSR1_START_BYTE_WIDTH           equ     (2)
                              167 HW_GPFLASH_CSR1_CEB_WIDTH                  equ     (2)
                              168 HW_GPFLASH_CSR1_WP0_WIDTH                  equ     (1)
                              169 HW_GPFLASH_CSR1_WP1_WIDTH                  equ     (1)
                              170 HW_GPFLASH_CSR1_MODE16_WIDTH               equ     (1)
                              171 HW_GPFLASH_CSR1_MUX_WIDTH                  equ     (1)
                              172 HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WIDTH     equ     (1)
                              173 HW_GPFLASH_CSR1_WP_CTL_WIDTH               equ     (1)
                              175 HW_GPFLASH_CSR1_MEM_SETMASK                  equ   (((1<<HW_GPFLASH_CSR1_MEM_WIDTH)-1)<<HW_GPFLASH_CSR1_MEM_BITPOS)
                              176 HW_GPFLASH_CSR1_START_BYTE_SETMASK           equ   (((1<<HW_GPFLASH_CSR1_START_BYTE_WIDTH)-1)<<HW_GPFLASH_CSR1_START_BYTE_BITPOS)
                              177 HW_GPFLASH_CSR1_CEB_SETMASK                  equ   (((1<<HW_GPFLASH_CSR1_CEB_WIDTH)-1)<<HW_GPFLASH_CSR1_CEB_BITPOS)
                              178 HW_GPFLASH_CSR1_WP0_SETMASK                  equ   (((1<<HW_GPFLASH_CSR1_WP0_WIDTH)-1)<<HW_GPFLASH_CSR1_WP0_BITPOS)
                              179 HW_GPFLASH_CSR1_WP1_SETMASK                  equ   (((1<<HW_GPFLASH_CSR1_WP1_WIDTH)-1)<<HW_GPFLASH_CSR1_WP1_BITPOS)
                              180 HW_GPFLASH_CSR1_MODE16_SETMASK               equ   (((1<<HW_GPFLASH_CSR1_MODE16_WIDTH)-1)<<HW_GPFLASH_CSR1_MODE16_BITPOS)
                              181 HW_GPFLASH_CSR1_MUX_SETMASK                  equ   (((1<<HW_GPFLASH_CSR1_MUX_WIDTH)-1)<<HW_GPFLASH_CSR1_MUX_BITPOS)
                              182 HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_SETMASK     equ   (((1<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WIDTH)-1)<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS)
                              183 HW_GPFLASH_CSR1_WP_CTL_SETMASK               equ   (((1<<HW_GPFLASH_CSR1_WP_CTL_WIDTH)-1)<<HW_GPFLASH_CSR1_WP_CTL_BITPOS)
                              185 HW_GPFLASH_CSR1_MEM_CLRMASK                  equ (~HW_GPFLASH_CSR1_MEM_SETMASK)
                              186 HW_GPFLASH_CSR1_START_BYTE_CLRMASK           equ (~HW_GPFLASH_CSR1_START_BYTE_SETMASK)
                              187 HW_GPFLASH_CSR1_CEB_CLRMASK                  equ (~HW_GPFLASH_CSR1_CEB_SETMASK)
                              188 HW_GPFLASH_CSR1_WP0_CLRMASK                  equ (~HW_GPFLASH_CSR1_WP0_SETMASK)
                              189 HW_GPFLASH_CSR1_WP1_CLRMASK                  equ (~HW_GPFLASH_CSR1_WP1_SETMASK)
                              190 HW_GPFLASH_CSR1_MODE16_CLRMASK               equ (~HW_GPFLASH_CSR1_MODE16_SETMASK)
                              191 HW_GPFLASH_CSR1_MUX_CLRMASK                  equ (~HW_GPFLASH_CSR1_MUX_SETMASK)
                              192 HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_CLRMASK     equ (~HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_SETMASK)
                              193 HW_GPFLASH_CSR1_WP_CTL_CLRMASK               equ (~HW_GPFLASH_CSR1_WP_CTL_SETMASK)
                              195 ;ASM Only
                              196 HW_GPFLASH_USE_X_MEMORY             equ     $0
                              197 HW_GPFLASH_USE_Y_MEMORY             equ     $1
                              198 HW_GPFLASH_USE_P_MEMORY             equ     $2
                              200 HW_GPFLASH_8BIT_ACCESS              equ     $0
                              201 HW_GPFLASH_16BIT_ACCESS             equ     $1<<HW_GPFLASH_CSR1_MODE16_BITPOS
                              203 HW_GPFLASH_START_BYTE_LSB           equ     $0
                              204 HW_GPFLASH_START_BYTE_ISB           equ     $1<<HW_GPFLASH_CSR1_START_BYTE_BITPOS
                              205 HW_GPFLASH_START_BYTE_MSB           equ     $2<<HW_GPFLASH_CSR1_START_BYTE_BITPOS
                              207 ;  Use the following mask to clear all bits but the WPn ones
                              208 ;  This will typically be used to protect the WPn bits from change when changing the rest of CSR1 
                              209 HW_GPFLASH_WPn_MASK                 equ     ($1<<HW_GPFLASH_CSR1_WP0_BITPOS)+($1<<HW_GPFLASH_CSR1_WP1_BITPOS)+($1<<HW_GPFLASH_CSR1_WP_CTL_BITPOS)
                              212 HW_GPFLASH_MUX_EMC_ACCESS           equ     $0
                              213 HW_GPFLASH_MUX_GPFLASH_ACCESS       equ     $1<<HW_GPFLASH_CSR1_MUX_BITPOS
                              214 ;endasm
                              216 ;C insert
                              217 ;typedef union               
                              218 ;{
                              219 ;    struct {
                              220 ;        int MEM                  :2;
                              221 ;        int RSVD0                :2;
                              222 ;        int START_BYTE           :2;
                              223 ;        int RSVD1                :2;
                              224 ;        int CEB                  :2;
                              225 ;        int RSVD2                :2;
                              226 ;        int WP0                  :1;
                              227 ;        int WP1                  :1;
                              228 ;        int RSVD3                :2;
                              229 ;        int MODE16               :1;
                              230 ;        int MUX                  :1;
                              231 ;        int SECTOR_ERASE_CTL     :1;
                              232 ;        int WP_CTL               :1;
                              233 ;        int RSVD4                :4;
                              234 ;    } B;
                              235 ;    int I;
                              236 ;} gpflashcsr1_type;
                              238 ;#define HW_GPFLASH_CSR1R     (*(volatile gpflashcsr1_type _X*) (HW_GPFLASH_BASEADDR+1))    /* GPFLASH Control 1 / Status Register */
                              239 ;endc
                              241 ;///////////////////////////////////////////////////////////////////////////////
                              242 ; GPFLASH DMA ADDRESS register (HW_GPFLASH_DMA_ADDR) Bit Definitions
                              243 HW_GPFLASH_DMA_ADD_SETMASK            equ  ($00FFFF)
                              245 HW_GPFLASH_DMA_ADD_CLRMASK            equ  (~HW_GPFLASH_DMA_ADD_SETMASK)
                              247 ;C insert
                              248 ;typedef union               
                              249 ;{
                              250 ;    struct {
                              251 ;        int ADD            :16;
                              252 ;        int RSVD           :8;
                              253 ;    } B;
                              254 ;    int I;
                              255 ;} gpflashdmaadd_type;
                              257 ;#define HW_GPFLASH_DMA_ADDR      (*(volatile gpflashdmaadd_type _X*) (HW_GPFLASH_BASEADDR+2))    
                              258 ;endc
                              260 ;///////////////////////////////////////////////////////////////////////////////
                              261 ; GPFLASH XFER SIZE register (HW_GPFLASH_XFER_SIZE) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                              262 HW_GPFLASH_XFER_SIZER_SETMASK          equ  ($001FFF)
                              264 HW_GPFLASH_XFER_SIZER_CLRMASK          equ  (~HW_GPFLASH_XFER_SIZER_SETMASK)
                              266 ;C insert
                              267 ;typedef union               
                              268 ;{
                              269 ;    struct {
                              270 ;        unsigned NUM_BYTES          :13;
                              271 ;        int RSVD          :11;
                              272 ;    } B;
                              273 ;    int I;
                              274 ;} gpflashxfersizer_type;
                              276 ;#define HW_GPFLASH_XFER_SIZER      (*(volatile gpflashxfersizer_type _X*) (HW_GPFLASH_BASEADDR+3))    
                              277 ;endc
                              279 ;///////////////////////////////////////////////////////////////////////////////
                              280 ; GPFLASH TIMING 1 register (HW_GPFLASH_TIMING1) Bit Definitions
                              281 HW_GPFLASH_TSU_BITPOS                equ  (0)
                              282 HW_GPFLASH_THOLD_BITPOS              equ  (8)
                              284 HW_GPFLASH_TSU_WIDTH                 equ  (5)
                              285 HW_GPFLASH_THOLD_WIDTH               equ  (5)
                              287 HW_GPFLASH_TSU_SETMASK               equ  (((1<<HW_GPFLASH_TSU_WIDTH)-1)<<HW_GPFLASH_TSU_BITPOS)
                              288 HW_GPFLASH_THOLD_SETMASK             equ  (((1<<HW_GPFLASH_THOLD_WIDTH)-1)<<HW_GPFLASH_THOLD_BITPOS)
                              290 HW_GPFLASH_TSU_CLRMASK               equ (~HW_GPFLASH_TSU_SETMASK)
                              291 HW_GPFLASH_THOLD_CLRMASK             equ (~HW_GPFLASH_THOLD_SETMASK)
                              293 ;C insert
                              294 ;typedef union               
                              295 ;{
                              296 ;    struct {
                              297 ;        int TSU          :5;
                              298 ;        int RSVD0          :3;       
                              299 ;        int THOLD           :5;
                              300 ;        int RSVD1          :11;
                              301 ;    } B;
                              302 ;    int I;
                              303 ;} gpflashtiming1_type;
                              305 ;#define HW_GPFLASH_TIMING1      (*(volatile gpflashtiming1_type _X*) (HW_GPFLASH_BASEADDR+4))    
                              306 ;endc
                              308 ;///////////////////////////////////////////////////////////////////////////////
                              309 ; GPFLASH TIMING 2 register (HW_GPFLASH_TIMING2) Bit Definitions
                              310 HW_GPFLASH_TDS_BITPOS                 equ  (0)
                              311 HW_GPFLASH_TDH_BITPOS                 equ  (8)
                              313 HW_GPFLASH_TDS_WIDTH                  equ  (6)
                              314 HW_GPFLASH_TDH_WIDTH                  equ  (6)
                              316 HW_GPFLASH_TDS_SETMASK                equ  (((1<<HW_GPFLASH_TDS_WIDTH)-1)<<HW_GPFLASH_TDS_BITPOS)
                              317 HW_GPFLASH_TDH_SETMASK                equ  (((1<<HW_GPFLASH_TDH_WIDTH)-1)<<HW_GPFLASH_TDH_BITPOS)
                              319 HW_GPFLASH_TDS_CLRMASK                equ (~HW_GPFLASH_TDS_SETMASK)
                              320 HW_GPFLASH_TDH_CLRMASK                equ (~HW_GPFLASH_TDH_SETMASK)
                              322 ;C insert
                              323 ;typedef union               
                              324 ;{
                              325 ;    struct {
                              326 ;        int TDS           :6;
                              327 ;        int RSVD0          :2;       
                              328 ;        int TDH           :6;
                              329 ;        int RSVD1          :10;
                              330 ;    } B;
                              331 ;    int I;
                              332 ;} gpflashtiming2_type;
                              334 ;#define HW_GPFLASH_TIMING2      (*(volatile gpflashtiming2_type _X*) (HW_GPFLASH_BASEADDR+5))    
                              335 ;endc
                              337 ;///////////////////////////////////////////////////////////////////////////////
                              338 ; GPFLASH TIMING 2 register (HW_GPFLASH_TIMINGBUSY) Bit Definitions
                              339 HW_GPFLASH_TWTO_SETMASK                equ  ($01FFFF)
                              341 HW_GPFLASH_TWTO_CLRMASK                equ (~HW_GPFLASH_TWTO_SETMASK)
                              344 ;C insert
                              345 ;typedef union               
                              346 ;{
                              347 ;    struct {
                              348 ;        int TWTO           :18;
                              349 ;        int RSVD           :6;       
                              350 ;    } B;
                              351 ;    int I;
                              352 ;} gpflashtimingbusy_type;
                              354 ;#define HW_GPFLASH_TIMINGBUSY      (*(volatile gpflashtimingbusy _X*) (HW_GPFLASH_BASEADDR+6))    
                              355 ;endc
                               27         include "regsgpio.inc"
                                2 __REGS_GPIO_INC equ 1
                                4 ;C Insert
                                5 ;#include "types.h"
                                6 ;endc
                                8 ;///////////////////////////////////////////////////////////////////////////////
                                9 ;  Interrupt Collector Registers
                               10 ;///////////////////////////////////////////////////////////////////////////////
                               12 HW_GPIO_BASEADDR                        equ     $F400
                               14 HW_GPB0_BASEADDR                        equ     HW_GPIO_BASEADDR
                               15 HW_GPB1_BASEADDR                        equ     HW_GPIO_BASEADDR+$10
                               16 HW_GPB2_BASEADDR                        equ     HW_GPIO_BASEADDR+$20
                               17 HW_GPB3_BASEADDR                        equ     HW_GPIO_BASEADDR+$30
                               19 HW_GPB0_BLOCKNUM                        equ     0
                               20 HW_GPB1_BLOCKNUM                        equ     1
                               21 HW_GPB2_BLOCKNUM                        equ     2
                               22 HW_GPB3_BLOCKNUM                        equ     3
                               24 HW_GPB_GPENR                            equ     0
                               25 HW_GPB_GPDOR                            equ     1
                               26 HW_GPB_GPDIR                            equ     2
                               27 HW_GPB_GPDOER                           equ     3
                               28 HW_GPB_GPIPENR                          equ     4
                               29 HW_GPB_GPIENR                           equ     5
                               30 HW_GPB_GPILVLR                          equ     6
                               31 HW_GPB_GPIPOLR                          equ     7
                               32 HW_GPB_GPISTATR                         equ     8
                               33 HW_GPB_GPPWR                            equ     9
                               34 HW_GPB_GP8MA                            equ     10
                               36 ;ASM Only
                               37 HW_GP0ENR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPENR
                               38 HW_GP0DOR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPDOR
                               39 HW_GP0DIR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPDIR
                               40 HW_GP0DOER                              equ     HW_GPB0_BASEADDR+HW_GPB_GPDOER
                               41 HW_GP0IPENR                             equ     HW_GPB0_BASEADDR+HW_GPB_GPIPENR
                               42 HW_GP0IENR                              equ     HW_GPB0_BASEADDR+HW_GPB_GPIENR
                               43 HW_GP0ILVLR                             equ     HW_GPB0_BASEADDR+HW_GPB_GPILVLR
                               44 HW_GP0IPOLR                             equ     HW_GPB0_BASEADDR+HW_GPB_GPIPOLR
                               45 HW_GP0ISTATR                            equ     HW_GPB0_BASEADDR+HW_GPB_GPISTATR
                               46 HW_GP0PWR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPPWR
                               47 HW_GP08MA                               equ     HW_GPB0_BASEADDR+HW_GPB_GP8MA
                               49 HW_GP1ENR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPENR
                               50 HW_GP1DOR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPDOR
                               51 HW_GP1DIR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPDIR
                               52 HW_GP1DOER                              equ     HW_GPB1_BASEADDR+HW_GPB_GPDOER
                               53 HW_GP1IPENR                             equ     HW_GPB1_BASEADDR+HW_GPB_GPIPENR
                               54 HW_GP1IENR                              equ     HW_GPB1_BASEADDR+HW_GPB_GPIENR
                               55 HW_GP1ILVLR                             equ     HW_GPB1_BASEADDR+HW_GPB_GPILVLR
                               56 HW_GP1IPOLR                             equ     HW_GPB1_BASEADDR+HW_GPB_GPIPOLR
                               57 HW_GP1ISTATR                            equ     HW_GPB1_BASEADDR+HW_GPB_GPISTATR
                               58 HW_GP1PWR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPPWR
                               59 HW_GP18MA                               equ     HW_GPB1_BASEADDR+HW_GPB_GP8MA
                               61 HW_GP2ENR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPENR
                               62 HW_GP2DOR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPDOR
                               63 HW_GP2DIR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPDIR
                               64 HW_GP2DOER                              equ     HW_GPB2_BASEADDR+HW_GPB_GPDOER
                               65 HW_GP2IPENR                             equ     HW_GPB2_BASEADDR+HW_GPB_GPIPENR
                               66 HW_GP2IENR                              equ     HW_GPB2_BASEADDR+HW_GPB_GPIENR
                               67 HW_GP2ILVLR                             equ     HW_GPB2_BASEADDR+HW_GPB_GPILVLR
                               68 HW_GP2IPOLR                             equ     HW_GPB2_BASEADDR+HW_GPB_GPIPOLR
                               69 HW_GP2ISTATR                            equ     HW_GPB2_BASEADDR+HW_GPB_GPISTATR
                               70 HW_GP2PWR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPPWR
                               71 HW_GP28MA                               equ     HW_GPB2_BASEADDR+HW_GPB_GP8MA
                               73 HW_GP3ENR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPENR
                               74 HW_GP3DOR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPDOR
                               75 HW_GP3DIR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPDIR
                               76 HW_GP3DOER                              equ     HW_GPB3_BASEADDR+HW_GPB_GPDOER
                               77 HW_GP3IPENR                             equ     HW_GPB3_BASEADDR+HW_GPB_GPIPENR
                               78 HW_GP3IENR                              equ     HW_GPB3_BASEADDR+HW_GPB_GPIENR
                               79 HW_GP3ILVLR                             equ     HW_GPB3_BASEADDR+HW_GPB_GPILVLR
                               80 HW_GP3IPOLR                             equ     HW_GPB3_BASEADDR+HW_GPB_GPIPOLR
                               81 HW_GP3ISTATR                            equ     HW_GPB3_BASEADDR+HW_GPB_GPISTATR
                               82 HW_GP3PWR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPPWR
                               83 HW_GP38MA                               equ     HW_GPB3_BASEADDR+HW_GPB_GP8MA
                               84 ;endasm
                               87 ;///////////////////////////////////////////////////////////////////////////////
                               88 ;  GPIO Register Bit Positions
                               89 ;C Insert
                               90 ;typedef union               /* GPIO Pin Register Bank 0 */
                               91 ;{
                               92 ;    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                               93 ;    unsigned int I;
                               94 ;    unsigned int U;
                               95 ;} gpr_type;
                               96 ;endc
                               98 HW_GP_B0_BITPOS                         equ     0
                               99 HW_GP_B1_BITPOS                         equ     1
                              100 HW_GP_B2_BITPOS                         equ     2
                              101 HW_GP_B3_BITPOS                         equ     3
                              102 HW_GP_B4_BITPOS                         equ     4
                              103 HW_GP_B5_BITPOS                         equ     5
                              104 HW_GP_B6_BITPOS                         equ     6
                              105 HW_GP_B7_BITPOS                         equ     7
                              106 HW_GP_B8_BITPOS                         equ     8
                              107 HW_GP_B9_BITPOS                         equ     9
                              108 HW_GP_B10_BITPOS                        equ     10
                              109 HW_GP_B11_BITPOS                        equ     11
                              110 HW_GP_B12_BITPOS                        equ     12
                              111 HW_GP_B13_BITPOS                        equ     13
                              112 HW_GP_B14_BITPOS                        equ     14
                              113 HW_GP_B15_BITPOS                        equ     15
                              114 HW_GP_B16_BITPOS                        equ     16
                              115 HW_GP_B17_BITPOS                        equ     17
                              116 HW_GP_B18_BITPOS                        equ     18
                              117 HW_GP_B19_BITPOS                        equ     19
                              118 HW_GP_B20_BITPOS                        equ     20
                              119 HW_GP_B21_BITPOS                        equ     21
                              120 HW_GP_B22_BITPOS                        equ     22
                              121 HW_GP_B23_BITPOS                        equ     23
                              123 HW_GP_B0_SETMASK                        equ     (1<<HW_GP_B0_BITPOS)
                              124 HW_GP_B1_SETMASK                        equ     (1<<HW_GP_B1_BITPOS)
                              125 HW_GP_B2_SETMASK                        equ     (1<<HW_GP_B2_BITPOS)
                              126 HW_GP_B3_SETMASK                        equ     (1<<HW_GP_B3_BITPOS)
                              127 HW_GP_B4_SETMASK                        equ     (1<<HW_GP_B4_BITPOS)
                              128 HW_GP_B5_SETMASK                        equ     (1<<HW_GP_B5_BITPOS)
                              129 HW_GP_B6_SETMASK                        equ     (1<<HW_GP_B6_BITPOS)
                              130 HW_GP_B7_SETMASK                        equ     (1<<HW_GP_B7_BITPOS)
                              131 HW_GP_B8_SETMASK                        equ     (1<<HW_GP_B8_BITPOS)
                              132 HW_GP_B9_SETMASK                        equ     (1<<HW_GP_B9_BITPOS)
                              133 HW_GP_B10_SETMASK                       equ     (1<<HW_GP_B10_BITPOS)
                              134 HW_GP_B11_SETMASK                       equ     (1<<HW_GP_B11_BITPOS)
                              135 HW_GP_B12_SETMASK                       equ     (1<<HW_GP_B12_BITPOS)
                              136 HW_GP_B13_SETMASK                       equ     (1<<HW_GP_B13_BITPOS)
                              137 HW_GP_B14_SETMASK                       equ     (1<<HW_GP_B14_BITPOS)
                              138 HW_GP_B15_SETMASK                       equ     (1<<HW_GP_B15_BITPOS)
                              139 HW_GP_B16_SETMASK                       equ     (1<<HW_GP_B16_BITPOS)
                              140 HW_GP_B17_SETMASK                       equ     (1<<HW_GP_B17_BITPOS)
                              141 HW_GP_B18_SETMASK                       equ     (1<<HW_GP_B18_BITPOS)
                              142 HW_GP_B19_SETMASK                       equ     (1<<HW_GP_B19_BITPOS)
                              143 HW_GP_B20_SETMASK                       equ     (1<<HW_GP_B20_BITPOS)
                              144 HW_GP_B21_SETMASK                       equ     (1<<HW_GP_B21_BITPOS)
                              145 HW_GP_B22_SETMASK                       equ     (1<<HW_GP_B22_BITPOS)
                              146 HW_GP_B23_SETMASK                       equ     (1<<HW_GP_B23_BITPOS)
                              148 HW_GP_B0_CLRMASK                        equ     (~HW_GP_B0_SETMASK)
                              149 HW_GP_B1_CLRMASK                        equ     (~HW_GP_B1_SETMASK)
                              150 HW_GP_B2_CLRMASK                        equ     (~HW_GP_B2_SETMASK)
                              151 HW_GP_B3_CLRMASK                        equ     (~HW_GP_B3_SETMASK)
                              152 HW_GP_B4_CLRMASK                        equ     (~HW_GP_B4_SETMASK)
                              153 HW_GP_B5_CLRMASK                        equ     (~HW_GP_B5_SETMASK)
                              154 HW_GP_B6_CLRMASK                        equ     (~HW_GP_B6_SETMASK)
                              155 HW_GP_B7_CLRMASK                        equ     (~HW_GP_B7_SETMASK)
                              156 HW_GP_B8_CLRMASK                        equ     (~HW_GP_B8_SETMASK)
                              157 HW_GP_B9_CLRMASK                        equ     (~HW_GP_B9_SETMASK)
                              158 HW_GP_B10_CLRMASK                       equ     (~HW_GP_B10_SETMASK)
                              159 HW_GP_B11_CLRMASK                       equ     (~HW_GP_B11_SETMASK)
                              160 HW_GP_B12_CLRMASK                       equ     (~HW_GP_B12_SETMASK)
                              161 HW_GP_B13_CLRMASK                       equ     (~HW_GP_B13_SETMASK)
                              162 HW_GP_B14_CLRMASK                       equ     (~HW_GP_B14_SETMASK)
                              163 HW_GP_B15_CLRMASK                       equ     (~HW_GP_B15_SETMASK)
                              164 HW_GP_B16_CLRMASK                       equ     (~HW_GP_B16_SETMASK)
                              165 HW_GP_B17_CLRMASK                       equ     (~HW_GP_B17_SETMASK)
                              166 HW_GP_B18_CLRMASK                       equ     (~HW_GP_B18_SETMASK)
                              167 HW_GP_B19_CLRMASK                       equ     (~HW_GP_B19_SETMASK)
                              168 HW_GP_B20_CLRMASK                       equ     (~HW_GP_B20_SETMASK)
                              169 HW_GP_B21_CLRMASK                       equ     (~HW_GP_B21_SETMASK)
                              170 HW_GP_B22_CLRMASK                       equ     (~HW_GP_B22_SETMASK)
                              171 HW_GP_B23_CLRMASK                       equ     (~HW_GP_B23_SETMASK)
                              173 ;///////////////////////////////////////////////////////////////////////////////
                              174 ;  GPIO 8mA Register Bit Positions
                              175 HW_GP8MA_B7_B0_BITPOS                   equ     0
                              176 HW_GP8MA_B15_B8_BITPOS                  equ     1
                              177 HW_GP8MA_B23_B16_BITPOS                 equ     2
                              178 HW_GP8MA_CLK_GATE_BITPOS                equ     23
                              181 ;///////////////////////////////////////////////////////////////////////////////
                              182 ;  Logical GPIO numbers
                              183 HW_GPIO_000                             equ     0
                              184 HW_GPIO_001                             equ     1
                              185 HW_GPIO_002                             equ     2
                              186 HW_GPIO_003                             equ     3
                              187 HW_GPIO_004                             equ     4
                              188 HW_GPIO_005                             equ     5
                              189 HW_GPIO_006                             equ     6
                              190 HW_GPIO_007                             equ     7
                              191 HW_GPIO_008                             equ     8
                              192 HW_GPIO_009                             equ     9
                              193 HW_GPIO_010                             equ     10
                              194 HW_GPIO_011                             equ     11
                              195 HW_GPIO_012                             equ     12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                              196 HW_GPIO_013                             equ     13
                              197 HW_GPIO_014                             equ     14
                              198 HW_GPIO_015                             equ     15
                              199 HW_GPIO_016                             equ     16
                              200 HW_GPIO_017                             equ     17
                              201 HW_GPIO_018                             equ     18
                              202 HW_GPIO_019                             equ     19
                              203 HW_GPIO_020                             equ     20
                              204 HW_GPIO_021                             equ     21
                              205 HW_GPIO_022                             equ     22
                              206 HW_GPIO_023                             equ     23
                              207 HW_GPIO_024                             equ     24
                              208 HW_GPIO_025                             equ     25
                              209 HW_GPIO_026                             equ     26
                              210 HW_GPIO_027                             equ     27
                              211 HW_GPIO_028                             equ     28
                              212 HW_GPIO_029                             equ     29
                              213 HW_GPIO_030                             equ     30
                              214 HW_GPIO_031                             equ     31
                              215 HW_GPIO_032                             equ     32
                              216 HW_GPIO_033                             equ     33
                              217 HW_GPIO_034                             equ     34
                              218 HW_GPIO_035                             equ     35
                              219 HW_GPIO_036                             equ     36
                              220 HW_GPIO_037                             equ     37
                              221 HW_GPIO_038                             equ     38
                              222 HW_GPIO_039                             equ     39
                              223 HW_GPIO_040                             equ     40
                              224 HW_GPIO_041                             equ     41
                              225 HW_GPIO_042                             equ     42
                              226 HW_GPIO_043                             equ     43
                              227 HW_GPIO_044                             equ     44
                              228 HW_GPIO_045                             equ     45
                              229 HW_GPIO_046                             equ     46
                              230 HW_GPIO_047                             equ     47
                              231 HW_GPIO_048                             equ     48
                              232 HW_GPIO_049                             equ     49
                              233 HW_GPIO_050                             equ     50
                              234 HW_GPIO_051                             equ     51
                              235 HW_GPIO_052                             equ     52
                              236 HW_GPIO_053                             equ     53
                              237 HW_GPIO_054                             equ     54
                              238 HW_GPIO_055                             equ     55
                              239 HW_GPIO_056                             equ     56
                              240 HW_GPIO_057                             equ     57
                              241 HW_GPIO_058                             equ     58
                              242 HW_GPIO_059                             equ     59
                              243 HW_GPIO_060                             equ     60
                              244 HW_GPIO_061                             equ     61
                              245 HW_GPIO_062                             equ     62
                              246 HW_GPIO_063                             equ     63
                              247 HW_GPIO_064                             equ     64
                              248 HW_GPIO_065                             equ     65
                              249 HW_GPIO_066                             equ     66
                              250 HW_GPIO_067                             equ     67
                              251 HW_GPIO_068                             equ     68
                              252 HW_GPIO_069                             equ     69
                              253 HW_GPIO_070                             equ     70
                              254 HW_GPIO_071                             equ     71
                              255 HW_GPIO_072                             equ     72
                              256 HW_GPIO_073                             equ     73
                              257 HW_GPIO_074                             equ     74
                              258 HW_GPIO_075                             equ     75
                              259 HW_GPIO_076                             equ     76
                              260 HW_GPIO_077                             equ     77
                              261 HW_GPIO_078                             equ     78
                              262 HW_GPIO_079                             equ     79
                              263 HW_GPIO_080                             equ     80
                              264 HW_GPIO_081                             equ     81
                              265 HW_GPIO_082                             equ     82
                              266 HW_GPIO_083                             equ     83
                              267 HW_GPIO_084                             equ     84
                              268 HW_GPIO_085                             equ     85
                              269 HW_GPIO_086                             equ     86
                              270 HW_GPIO_087                             equ     87
                              271 HW_GPIO_088                             equ     88
                              272 HW_GPIO_089                             equ     89
                              273 HW_GPIO_090                             equ     90
                              274 HW_GPIO_091                             equ     91
                              275 HW_GPIO_092                             equ     92
                              276 HW_GPIO_093                             equ     93
                              277 HW_GPIO_094                             equ     94
                              278 HW_GPIO_095                             equ     95
                              279 HW_GPIO_LAST                            equ     HW_GPIO_095
                              281 ;C Insert
                              282 ;#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                              283 ;#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                              284 ;#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                              285 ;#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                              286 ;#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                              287 ;#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                              288 ;#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                              289 ;#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                              290 ;#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                              291 ;#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                              292 ;#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                              294 ;#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                              295 ;#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                              296 ;#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                              297 ;#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                              298 ;#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                              299 ;#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                              300 ;#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                              301 ;#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                              302 ;#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                              303 ;#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                              304 ;#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                              306 ;#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                              307 ;#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                              308 ;#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                              309 ;#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                              310 ;#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                              311 ;#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                              312 ;#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                              313 ;#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                              314 ;#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                              315 ;#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                              316 ;#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                              318 ;#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                              319 ;#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                              320 ;#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                              321 ;#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                              322 ;#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                              323 ;#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                              324 ;#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                              325 ;#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                              326 ;#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                              327 ;#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                              328 ;#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                              329 ;endc
                               28         include "regsi2c.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2003
                                3 ;
                                4 ; Filename: regsI2C.inc
                                5 ; Description: Register definitions for GPFLASH interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regsi2cinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;///////////////////////////////////////////////////////////////////////////////
                               40 ;//   I2C STMP Registers
                               41 ;///////////////////////////////////////////////////////////////////////////////
                               43 HW_I2C_BASEADDR                         equ     ($FFE5)
                               45 ;ASM Only
                               46 HW_I2CDIV                               equ     (HW_I2C_BASEADDR)
                               47 HW_I2CDAT                               equ     (HW_I2C_BASEADDR+1)
                               48 HW_I2CCSR                               equ     (HW_I2C_BASEADDR+2)
                               49 ;endasm
                               51 ;///////////////////////////////////////////////////////////////////////////////
                               52 ;//  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                               54 HW_I2CDIV_FACT_BITPOS                   equ     (1)
                               56 HW_I2CDIV_FACT_SETMASK                  equ     ($FF<<HW_I2CDIV_FACT_BITPOS)
                               58 HW_I2CDIV_FACT_CLRMASK                  equ     (~HW_I2CDIV_FACT_SETMASK)
                               60 ;C insert
                               61 ;typedef union               /* I2C Clock Divider Register */
                               62 ;{
                               63 ;    struct {
                               64 ;        int                :1; 
                               65 ;        unsigned FACT      :8;
                               66 ;    } B;
                               67 ;    int I;
                               68 ;    unsigned U;
                               69 ;} i2cdivr_type;
                               70 ;#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                               71 ;endc
                               74 ;///////////////////////////////////////////////////////////////////////////////
                               75 ;//  I2C Data Register (HW_I2CDAT) Bit Definitions
                               77 HW_I2CDAT_DATA_BITPOS                   equ     (0)
                               79 HW_I2CDAT_DATA_SETMASK                  equ     ($FFFFFF)
                               81 HW_I2CDAT_DATA_CLRMASK                  equ     (~HW_I2CDAT_DATA_SETMASK)
                               83 ;C insert
                               84 ;typedef union               /* I2C Data Register */
                               85 ;{
                               86 ;    struct {
                               87 ;         unsigned DATA :24; 
                               88 ;    } B;
                               89 ;    int I;
                               90 ;    unsigned U;
                               91 ;} i2cdatr_type;
                               92 ;#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                               93 ;endc
                               96 ;///////////////////////////////////////////////////////////////////////////////
                               97 ;//  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                               98 HW_I2CCSR_I2C_EN_BITPOS                 equ     (0)
                               99 HW_I2CCSR_RIE_BITPOS                    equ     (1)
                              100 HW_I2CCSR_BUSY_BITPOS                   equ     (2)
                              101 HW_I2CCSR_ARB_LOST_BITPOS               equ     (3)
                              102 HW_I2CCSR_TIE_BITPOS                    equ     (4)
                              103 HW_I2CCSR_MODE_BITPOS                   equ     (5)
                              104 HW_I2CCSR_RDR_BITPOS                    equ     (6)
                              105 HW_I2CCSR_TDE_BITPOS                    equ     (7)
                              106 HW_I2CCSR_RWN_BITPOS                    equ     (8)
                              107 HW_I2CCSR_WL_BITPOS                     equ     (9)
                              108 HW_I2CCSR_WL0_BITPOS                    equ     (9)
                              109 HW_I2CCSR_WL1_BITPOS                    equ     (10)
                              110 HW_I2CCSR_TREQ_BITPOS                   equ     (11)
                              111 HW_I2CCSR_ROFL_BITPOS                   equ     (12)
                              112 HW_I2CCSR_TUFL_BITPOS                   equ     (13)
                              113 HW_I2CCSR_ACKF_BITPOS                   equ     (14)
                              114 HW_I2CCSR_B_CNT_BITPOS                  equ     (15)
                              115 HW_I2CCSR_B_CNT0_BITPOS                 equ     (15)
                              116 HW_I2CCSR_B_CNT1_BITPOS                 equ     (16)
                              117 HW_I2CCSR_L_WORD_BITPOS                 equ     (17)
                              118 HW_I2CCSR_SUBA_BITPOS                   equ     (18)
                              119 HW_I2CCSR_ROFLCL_BITPOS                 equ     (19)
                              120 HW_I2CCSR_TUFLCL_BITPOS                 equ     (20)
                              121 HW_I2CCSR_ONEBYTE_BITPOS                equ     (21)
                              123 HW_I2CCSR_I2C_EN_SETMASK                equ     (1<<HW_I2CCSR_I2C_EN_BITPOS)
                              124 HW_I2CCSR_RIE_SETMASK                   equ     (1<<HW_I2CCSR_RIE_BITPOS)
                              125 HW_I2CCSR_BUSY_SETMASK                  equ     (1<<HW_I2CCSR_BUSY_BITPOS)
                              126 HW_I2CCSR_ARB_LOST_SETMASK              equ     (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                              127 HW_I2CCSR_TIE_SETMASK                   equ     (1<<HW_I2CCSR_TIE_BITPOS)
                              128 HW_I2CCSR_MODE_SETMASK                  equ     (1<<HW_I2CCSR_MODE_BITPOS)
                              129 HW_I2CCSR_RDR_SETMASK                   equ     (1<<HW_I2CCSR_RDR_BITPOS)
                              130 HW_I2CCSR_TDE_SETMASK                   equ     (1<<HW_I2CCSR_TDE_BITPOS)
                              131 HW_I2CCSR_RWN_SETMASK                   equ     (1<<HW_I2CCSR_RWN_BITPOS)
                              132 HW_I2CCSR_WL_SETMASK                    equ     (3<<HW_I2CCSR_WL_BITPOS)
                              133 HW_I2CCSR_WL0_SETMASK                   equ     (1<<HW_I2CCSR_WL0_BITPOS)
                              134 HW_I2CCSR_WL1_SETMASK                   equ     (1<<HW_I2CCSR_WL1_BITPOS)
                              135 HW_I2CCSR_TREQ_SETMASK                  equ     (1<<HW_I2CCSR_TREQ_BITPOS)
                              136 HW_I2CCSR_ROFL_SETMASK                  equ     (1<<HW_I2CCSR_ROFL_BITPOS)
                              137 HW_I2CCSR_TUFL_SETMASK                  equ     (1<<HW_I2CCSR_TUFL_BITPOS)
                              138 HW_I2CCSR_ACKF_SETMASK                  equ     (1<<HW_I2CCSR_ACKF_BITPOS)
                              139 HW_I2CCSR_B_CNT_SETMASK                 equ     (3<<HW_I2CCSR_B_CNT_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                              140 HW_I2CCSR_B_CNT0_SETMASK                equ     (1<<HW_I2CCSR_B_CNT0_BITPOS)
                              141 HW_I2CCSR_B_CNT1_SETMASK                equ     (1<<HW_I2CCSR_B_CNT1_BITPOS)
                              142 HW_I2CCSR_L_WORD_SETMASK                equ     (1<<HW_I2CCSR_L_WORD_BITPOS)
                              143 HW_I2CCSR_SUBA_SETMASK                  equ     (1<<HW_I2CCSR_SUBA_BITPOS)
                              144 HW_I2CCSR_ROFLCL_SETMASK                equ     (1<<HW_I2CCSR_ROFLCL_BITPOS)
                              145 HW_I2CCSR_TUFLCL_SETMASK                equ     (1<<HW_I2CCSR_TUFLCL_BITPOS)
                              146 HW_I2CCSR_ONEBYTE_SETMASK               equ     (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                              148 HW_I2CCSR_I2C_EN_CLRMASK                equ     (~HW_I2CCSR_I2C_EN_SETMASK)
                              149 HW_I2CCSR_RIE_CLRMASK                   equ     (~HW_I2CCSR_RIE_SETMASK)
                              150 HW_I2CCSR_BUSY_CLRMASK                  equ     (~HW_I2CCSR_BUSY_SETMASK)
                              151 HW_I2CCSR_ARB_LOST_CLRMASK              equ     (~HW_I2CCSR_ARB_LOST_SETMASK)
                              152 HW_I2CCSR_TIE_CLRMASK                   equ     (~HW_I2CCSR_TIE_SETMASK)
                              153 HW_I2CCSR_MODE_CLRMASK                  equ     (~HW_I2CCSR_MODE_SETMASK)
                              154 HW_I2CCSR_RDR_CLRMASK                   equ     (~HW_I2CCSR_RDR_SETMASK)
                              155 HW_I2CCSR_TDE_CLRMASK                   equ     (~HW_I2CCSR_TDE_SETMASK)
                              156 HW_I2CCSR_RWN_CLRMASK                   equ     (~HW_I2CCSR_RWN_SETMASK)
                              157 HW_I2CCSR_WL_CLRMASK                    equ     (~HW_I2CCSR_WL_SETMASK)
                              158 HW_I2CCSR_WL0_CLRMASK                   equ     (~HW_I2CCSR_WL0_SETMASK)
                              159 HW_I2CCSR_WL1_CLRMASK                   equ     (~HW_I2CCSR_WL1_SETMASK)
                              160 HW_I2CCSR_TREQ_CLRMASK                  equ     (~HW_I2CCSR_TREQ_SETMASK)
                              161 HW_I2CCSR_ROFL_CLRMASK                  equ     (~HW_I2CCSR_ROFL_SETMASK)
                              162 HW_I2CCSR_TUFL_CLRMASK                  equ     (~HW_I2CCSR_TUFL_SETMASK)
                              163 HW_I2CCSR_ACKF_CLRMASK                  equ     (~HW_I2CCSR_ACKF_SETMASK)
                              164 HW_I2CCSR_B_CNT_CLRMASK                 equ     (~HW_I2CCSR_B_CNT_SETMASK)
                              165 HW_I2CCSR_B_CNT0_CLRMASK                equ     (~HW_I2CCSR_B_CNT0_SETMASK)
                              166 HW_I2CCSR_B_CNT1_CLRMASK                equ     (~HW_I2CCSR_B_CNT1_SETMASK)
                              167 HW_I2CCSR_L_WORD_CLRMASK                equ     (~HW_I2CCSR_L_WORD_SETMASK)
                              168 HW_I2CCSR_SUBA_CLRMASK                  equ     (~HW_I2CCSR_SUBA_SETMASK)
                              169 HW_I2CCSR_ROFLCL_CLRMASK                equ     (~HW_I2CCSR_ROFLCL_SETMASK)
                              170 HW_I2CCSR_TUFLCL_CLRMASK                equ     (~HW_I2CCSR_TUFLCL_SETMASK)
                              171 HW_I2CCSR_ONEBYTE_CLRMASK               equ     (~HW_I2CCSR_ONEBYTE_SETMASK)
                              173 ;C insert
                              174 ;typedef union               /* I2C Control Register         */
                              175 ;{
                              176 ;    struct {
                              177 ;        int I2C_EN      :1; /* Peripheral Enable            */
                              178 ;        int RIE         :1; /* Receiver Interrupt Enable        */
                              179 ;        int BUSY        :1; /* I2C Bus Busy             */
                              180 ;        int ARBLOST     :1; /* Aritration lost          */
                              181 ;        int TIE         :1; /* Transmitter Interrupt Enable     */
                              182 ;        int MODE        :1; /* Operating Mode Bit           */
                              183 ;        int RDR         :1; /* Receiver Data Ready          */
                              184 ;       int TDE         :1; /* Transmitter Data Empty       */
                              185 ;       int RWN         :1; /* Read/Not Write           */
                              186 ;       unsigned WL     :2; /* Word Length              */
                              187 ;        int TREQ        :1; /* DSP Transmit Request         */
                              188 ;        int ROFL        :1; /* Receiver Overflow            */
                              189 ;        int TUFL        :1; /* Transmitter Underflow        */
                              190 ;        int ACKF        :1; /* Acknowledge Failure          */
                              191 ;        unsigned BCNT   :2; /* Byte Count               */
                              192 ;        int LWORD       :1; /* Last Word                */
                              193 ;        int SUBA        :1; /* Sub Address              */
                              194 ;        int ROFLCL      :1; /* Receiver Overflow Clear      */
                              195 ;        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                              196 ;        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                              197 ;    } B;
                              198 ;    int I;
                              199 ;    unsigned U;
                              200 ;} i2ccsr_type;
                              201 ;#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                              202 ;endc
                               29         include "regsi2s.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2003
                                3 ;
                                4 ; Filename: regsi2s.inc
                                5 ; Description: Register definitions for I2S interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regsi2sinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;/////////////////////////////////////////////////////////////////////////////////
                               40 ;//  I2S Registers (SAI)
                               41 ;/////////////////////////////////////////////////////////////////////////////////
                               44 HW_SAI_BASEADDR     equ     ($FFF0)
                               47 ;ASM Only
                               48 HW_SAIRCSR          equ     (HW_SAI_BASEADDR)
                               49 HW_SAIRX0R          equ     (HW_SAI_BASEADDR+1)
                               50 HW_SAIRX1R          equ     (HW_SAI_BASEADDR+2)
                               51 HW_SAIRX2R          equ     (HW_SAI_BASEADDR+3)
                               52 HW_SAITCSR          equ     (HW_SAI_BASEADDR+4)
                               53 HW_SAITX0R          equ     (HW_SAI_BASEADDR+5)
                               54 HW_SAITX1R          equ     (HW_SAI_BASEADDR+6)
                               55 HW_SAITX2R          equ     (HW_SAI_BASEADDR+7)
                               56 ;endasm
                               59 HW_SAIRCSR_REN0_BITPOS          equ     (0)
                               60 HW_SAIRCSR_REN1_BITPOS          equ     (1)
                               61 HW_SAIRCSR_REN2_BITPOS          equ     (2)
                               62 HW_SAIRCSR_RMME_BITPOS          equ     (3)
                               63 HW_SAIRCSR_RSVD0_BITPOS         equ     (4)
                               64 HW_SAIRCSR_RWL_BITPOS           equ     (5)
                               65 HW_SAIRCSR_RDIR_BITPOS          equ     (7)
                               66 HW_SAIRCSR_RLRS_BITPOS          equ     (8)
                               67 HW_SAIRCSR_RCKP_BITPOS          equ     (9)
                               68 HW_SAIRCSR_RREL_BITPOS          equ     (10)
                               69 HW_SAIRCSR_RDWJ_BITPOS          equ     (11)
                               70 HW_SAIRCSR_RXIE_BITPOS          equ     (12)
                               71 HW_SAIRCSR_RSVD1_BITPOS         equ     (13)
                               72 HW_SAIRCSR_ROFL_BITPOS          equ     (14)
                               73 HW_SAIRCSR_RDR_BITPOS           equ     (15)
                               74 HW_SAIRCSR_ROFCL_BITPOS         equ     (16)
                               75 HW_SAIRCSR_RSVD2_BITPOS         equ     (17)
                               78 HW_SAIRCSR_REN0_WIDTH           equ     (1)
                               79 HW_SAIRCSR_REN1_WIDTH           equ     (1)
                               80 HW_SAIRCSR_REN2_WIDTH           equ     (1)
                               81 HW_SAIRCSR_RMME_WIDTH           equ     (1)
                               82 HW_SAIRCSR_RSVD0_WIDTH          equ     (1)
                               83 HW_SAIRCSR_RWL_WIDTH            equ     (2)
                               84 HW_SAIRCSR_RDIR_WIDTH           equ     (1)
                               85 HW_SAIRCSR_RLRS_WIDTH           equ     (1)
                               86 HW_SAIRCSR_RCKP_WIDTH           equ     (1)
                               87 HW_SAIRCSR_RREL_WIDTH           equ     (1)
                               88 HW_SAIRCSR_RDWJ_WIDTH           equ     (1)
                               89 HW_SAIRCSR_RXIE_WIDTH           equ     (1)
                               90 HW_SAIRCSR_RSVD1_WIDTH          equ     (1)
                               91 HW_SAIRCSR_ROFL_WIDTH           equ     (1)
                               92 HW_SAIRCSR_RDR_WIDTH            equ     (1)
                               93 HW_SAIRCSR_ROFCL_WIDTH          equ     (1)
                               94 HW_SAIRCSR_RSVD2_WIDTH          equ     (7)
                               97 HW_SAIRCSR_REN0_SETMASK         equ     (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                               98 HW_SAIRCSR_REN1_SETMASK         equ     (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                               99 HW_SAIRCSR_REN2_SETMASK         equ     (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                              100 HW_SAIRCSR_RMME_SETMASK         equ     (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                              101 HW_SAIRCSR_RSVD0_SETMASK        equ     (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                              102 HW_SAIRCSR_RWL_SETMASK          equ     (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                              103 HW_SAIRCSR_RDIR_SETMASK         equ     (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                              104 HW_SAIRCSR_RLRS_SETMASK         equ     (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                              105 HW_SAIRCSR_RCKP_SETMASK         equ     (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                              106 HW_SAIRCSR_RREL_SETMASK         equ     (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                              107 HW_SAIRCSR_RDWJ_SETMASK         equ     (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                              108 HW_SAIRCSR_RXIE_SETMASK         equ     (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                              109 HW_SAIRCSR_RSVD1_SETMASK        equ     (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                              110 HW_SAIRCSR_ROFL_SETMASK         equ     (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                              111 HW_SAIRCSR_RDR_SETMASK          equ     (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                              112 HW_SAIRCSR_ROFCL_SETMASK        equ     (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                              113 HW_SAIRCSR_RSVD2_SETMASK        equ     (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                              116 HW_SAIRCSR_REN0_CLRMASK         equ     (~HW_SAIRCSR_REN0_SETMASK)
                              117 HW_SAIRCSR_REN1_CLRMASK         equ     (~HW_SAIRCSR_REN1_SETMASK)
                              118 HW_SAIRCSR_REN2_CLRMASK         equ     (~HW_SAIRCSR_REN2_SETMASK)
                              119 HW_SAIRCSR_RMME_CLRMASK         equ     (~HW_SAIRCSR_RMME_SETMASK)
                              120 HW_SAIRCSR_RSVD0_CLRMASK        equ     (~HW_SAIRCSR_RSVD0_SETMASK)
                              121 HW_SAIRCSR_RWL_CLRMASK          equ     (~HW_SAIRCSR_RWL_SETMASK)
                              122 HW_SAIRCSR_RDIR_CLRMASK         equ     (~HW_SAIRCSR_RDIR_SETMASK)
                              123 HW_SAIRCSR_RLRS_CLRMASK         equ     (~HW_SAIRCSR_RLRS_SETMASK)
                              124 HW_SAIRCSR_RCKP_CLRMASK         equ     (~HW_SAIRCSR_RCKP_SETMASK)
                              125 HW_SAIRCSR_RREL_CLRMASK         equ     (~HW_SAIRCSR_RREL_SETMASK)
                              126 HW_SAIRCSR_RDWJ_CLRMASK         equ     (~HW_SAIRCSR_RDWJ_SETMASK)
                              127 HW_SAIRCSR_RXIE_CLRMASK         equ     (~HW_SAIRCSR_RXIE_SETMASK)
                              128 HW_SAIRCSR_RSVD1_CLRMASK        equ     (~HW_SAIRCSR_RSVD1_SETMASK)
                              129 HW_SAIRCSR_ROFL_CLRMASK         equ     (~HW_SAIRCSR_ROFL_SETMASK)
                              130 HW_SAIRCSR_RDR_CLRMASK          equ     (~HW_SAIRCSR_RDR_SETMASK)
                              131 HW_SAIRCSR_ROFCL_CLRMASK        equ     (~HW_SAIRCSR_ROFCL_SETMASK)
                              132 HW_SAIRCSR_RSVD2_CLRMASK        equ     (~HW_SAIRCSR_RSVD2_SETMASK)
                              134 ;C insert
                              135 ;typedef union
                              136 ;{
                              137 ;    struct {
                              138 ;        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                              139 ;        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                              140 ;        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                              141 ;        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                              142 ;        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                              143 ;        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                              144 ;        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                              145 ;        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                              146 ;        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                              147 ;        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                              148 ;        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                              149 ;        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                              150 ;        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                              151 ;        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                              152 ;        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                              153 ;        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                              154 ;        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                              155 ;    } B;
                              156 ;    int I;
                              157 ;    unsigned U;
                              158 ;} saircsr_type;
                              159 ;
                              160 ;#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                              161 ;
                              162 ;typedef union
                              163 ;{
                              164 ;    struct {
                              165 ;        unsigned SAI :24;
                              166 ;    } B;
                              167 ;    int I;
                              168 ;    unsigned U;
                              169 ;} saixr_type;
                              170 ;
                              171 ;#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                              172 ;#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                              173 ;#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                              174 ;endc
                              177 HW_SAITCSR_TEN0_BITPOS          equ     (0)
                              178 HW_SAITCSR_TEN1_BITPOS          equ     (1)
                              179 HW_SAITCSR_TEN2_BITPOS          equ     (2)
                              180 HW_SAITCSR_TMME_BITPOS          equ     (3)
                              181 HW_SAITCSR_RSVD0_BITPOS         equ     (4)
                              182 HW_SAITCSR_TWL_BITPOS           equ     (5)
                              183 HW_SAITCSR_TDIR_BITPOS          equ     (7)
                              184 HW_SAITCSR_TLRS_BITPOS          equ     (8)
                              185 HW_SAITCSR_TCKP_BITPOS          equ     (9)
                              186 HW_SAITCSR_TREL_BITPOS          equ     (10)
                              187 HW_SAITCSR_TDWE_BITPOS          equ     (11)
                              188 HW_SAITCSR_TXIE_BITPOS          equ     (12)
                              189 HW_SAITCSR_RSVD1_BITPOS         equ     (13)
                              190 HW_SAITCSR_TUFL_BITPOS          equ     (14)
                              191 HW_SAITCSR_TDE_BITPOS           equ     (15)
                              192 HW_SAITCSR_TUFCL_BITPOS         equ     (16)
                              193 HW_SAITCSR_RSVD2_BITPOS         equ     (17)
                              196 HW_SAITCSR_TEN0_WIDTH           equ     (1)
                              197 HW_SAITCSR_TEN1_WIDTH           equ     (1)
                              198 HW_SAITCSR_TEN2_WIDTH           equ     (1)
                              199 HW_SAITCSR_TMME_WIDTH           equ     (1)
                              200 HW_SAITCSR_RSVD0_WIDTH          equ     (1)
                              201 HW_SAITCSR_TWL_WIDTH            equ     (2)
                              202 HW_SAITCSR_TDIR_WIDTH           equ     (1)
                              203 HW_SAITCSR_TLRS_WIDTH           equ     (1)
                              204 HW_SAITCSR_TCKP_WIDTH           equ     (1)
                              205 HW_SAITCSR_TREL_WIDTH           equ     (1)
                              206 HW_SAITCSR_TDWE_WIDTH           equ     (1)
                              207 HW_SAITCSR_TXIE_WIDTH           equ     (1)
                              208 HW_SAITCSR_RSVD1_WIDTH          equ     (1)
                              209 HW_SAITCSR_TUFL_WIDTH           equ     (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                              210 HW_SAITCSR_TDE_WIDTH            equ     (1)
                              211 HW_SAITCSR_TUFCL_WIDTH          equ     (1)
                              212 HW_SAITCSR_RSVD2_WIDTH          equ     (7)
                              215 HW_SAITCSR_TEN0_SETMASK         equ     (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                              216 HW_SAITCSR_TEN1_SETMASK         equ     (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                              217 HW_SAITCSR_TEN2_SETMASK         equ     (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                              218 HW_SAITCSR_TMME_SETMASK         equ     (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                              219 HW_SAITCSR_RSVD0_SETMASK        equ     (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                              220 HW_SAITCSR_TWL_SETMASK          equ     (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                              221 HW_SAITCSR_TDIR_SETMASK         equ     (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                              222 HW_SAITCSR_TLRS_SETMASK         equ     (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                              223 HW_SAITCSR_TCKP_SETMASK         equ     (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                              224 HW_SAITCSR_TREL_SETMASK         equ     (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                              225 HW_SAITCSR_TDWE_SETMASK         equ     (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                              226 HW_SAITCSR_TXIE_SETMASK         equ     (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                              227 HW_SAITCSR_RSVD1_SETMASK        equ     (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                              228 HW_SAITCSR_TUFL_SETMASK         equ     (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                              229 HW_SAITCSR_TDE_SETMASK          equ     (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                              230 HW_SAITCSR_TUFCL_SETMASK        equ     (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                              231 HW_SAITCSR_RSVD2_SETMASK        equ     (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                              234 HW_SAITCSR_TEN0_CLRMASK         equ     (~HW_SAITCSR_TEN0_SETMASK)
                              235 HW_SAITCSR_TEN1_CLRMASK         equ     (~HW_SAITCSR_TEN1_SETMASK)
                              236 HW_SAITCSR_TEN2_CLRMASK         equ     (~HW_SAITCSR_TEN2_SETMASK)
                              237 HW_SAITCSR_TMME_CLRMASK         equ     (~HW_SAITCSR_TMME_SETMASK)
                              238 HW_SAITCSR_RSVD0_CLRMASK        equ     (~HW_SAITCSR_RSVD0_SETMASK)
                              239 HW_SAITCSR_TWL_CLRMASK          equ     (~HW_SAITCSR_TWL_SETMASK)
                              240 HW_SAITCSR_TDIR_CLRMASK         equ     (~HW_SAITCSR_TDIR_SETMASK)
                              241 HW_SAITCSR_TLRS_CLRMASK         equ     (~HW_SAITCSR_TLRS_SETMASK)
                              242 HW_SAITCSR_TCKP_CLRMASK         equ     (~HW_SAITCSR_TCKP_SETMASK)
                              243 HW_SAITCSR_TREL_CLRMASK         equ     (~HW_SAITCSR_TREL_SETMASK)
                              244 HW_SAITCSR_TDWE_CLRMASK         equ     (~HW_SAITCSR_TDWE_SETMASK)
                              245 HW_SAITCSR_TXIE_CLRMASK         equ     (~HW_SAITCSR_TXIE_SETMASK)
                              246 HW_SAITCSR_RSVD1_CLRMASK        equ     (~HW_SAITCSR_RSVD1_SETMASK)
                              247 HW_SAITCSR_TUFL_CLRMASK         equ     (~HW_SAITCSR_TUFL_SETMASK)
                              248 HW_SAITCSR_TDE_CLRMASK          equ     (~HW_SAITCSR_TDE_SETMASK)
                              249 HW_SAITCSR_TUFCL_CLRMASK        equ     (~HW_SAITCSR_TUFCL_SETMASK)
                              250 HW_SAITCSR_RSVD2_CLRMASK        equ     (~HW_SAITCSR_RSVD2_SETMASK)
                              253 ;C insert
                              254 ;typedef union
                              255 ;{
                              256 ;    struct {
                              257 ;        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                              258 ;        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                              259 ;        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                              260 ;        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                              261 ;        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                              262 ;        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                              263 ;        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                              264 ;        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                              265 ;        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                              266 ;        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                              267 ;        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                              268 ;        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                              269 ;        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                              270 ;        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                              271 ;        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                              272 ;        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                              273 ;        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                              274 ;    } B;
                              275 ;    int I;
                              276 ;    unsigned U;
                              277 ;} saitcsr_type;
                              278 ;
                              279 ;#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                              280 ;
                              281 ;#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                              282 ;#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                              283 ;#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                              284 ;endc
                               30         include "regsicoll.inc"
                                2 __REGS_ICOLL_INC equ 1
                                4 ;///////////////////////////////////////////////////////////////////////////////
                                5 ;  Interrupt Collector Registers
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                8 HW_ICOLL_BASEADDR                       equ     $F300
                               10 ;ASM Only
                               11 HW_ICLENABLE0R                          equ     HW_ICOLL_BASEADDR
                               12 HW_ICLENABLE1R                          equ     HW_ICOLL_BASEADDR+1
                               13 HW_ICLSTATUS0R                          equ     HW_ICOLL_BASEADDR+2
                               14 HW_ICLSTATUS1R                          equ     HW_ICOLL_BASEADDR+3
                               15 HW_ICLPRIOR0R                           equ     HW_ICOLL_BASEADDR+4
                               16 HW_ICLPRIOR1R                           equ     HW_ICOLL_BASEADDR+5
                               17 HW_ICLPRIOR2R                           equ     HW_ICOLL_BASEADDR+6
                               18 HW_ICLPRIOR3R                           equ     HW_ICOLL_BASEADDR+7
                               19 HW_ICLSTEER0R                           equ     HW_ICOLL_BASEADDR+8
                               20 HW_ICLSTEER1R                           equ     HW_ICOLL_BASEADDR+9
                               21 HW_ICLSTEER2R                           equ     HW_ICOLL_BASEADDR+10
                               22 HW_ICLFORCE0R                           equ     HW_ICOLL_BASEADDR+11
                               23 HW_ICLFORCE1R                           equ     HW_ICOLL_BASEADDR+12
                               24 HW_ICLFENABLE0R                         equ     HW_ICOLL_BASEADDR+13
                               25 HW_ICLFENABLE1R                         equ     HW_ICOLL_BASEADDR+14
                               26 HW_ICLOBSVZ0R                           equ     HW_ICOLL_BASEADDR+15
                               27 HW_ICLOBSVZ1R                           equ     HW_ICOLL_BASEADDR+16
                               28 HW_ICLPRIOR4R                           equ     HW_ICOLL_BASEADDR+17
                               29 HW_IPR                                  equ     $FFFF                 ; Interrupt Priority register
                               30 ;endasm
                               33 ;///////////////////////////////////////////////////////////////////////////////
                               34 ;  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                               36 ;C Insert
                               37 ;typedef union
                               38 ;{
                               39 ;    struct {
                               40 ;        int SEN0        :1;
                               41 ;        int SEN1        :1;
                               42 ;        int SEN2        :1;
                               43 ;        int SEN3        :1;
                               44 ;        int SEN4        :1;
                               45 ;        int SEN5        :1;
                               46 ;        int SEN6        :1;
                               47 ;        int SEN7        :1;
                               48 ;        int SEN8        :1;
                               49 ;        int SEN9        :1;
                               50 ;        int SEN10       :1;
                               51 ;        int SEN11       :1;
                               52 ;        int SEN12       :1;
                               53 ;        int SEN13       :1;
                               54 ;        int SEN14       :1;
                               55 ;        int SEN15       :1;
                               56 ;        int SEN16       :1;
                               57 ;        int SEN17       :1;
                               58 ;        int SEN18       :1;
                               59 ;        int SEN19       :1;
                               60 ;        int SEN20       :1;
                               61 ;        int SEN21       :1;
                               62 ;        int SEN22       :1;
                               63 ;        int SEN23       :1;
                               64 ;    } B;
                               65 ;    int I;
                               66 ;} iclenable0_type;
                               67 ;#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                               68 ;endc
                               71 HW_ICLENABLE0R_SEN0_BITPOS              equ     0
                               72 HW_ICLENABLE0R_SEN1_BITPOS              equ     1
                               73 HW_ICLENABLE0R_SEN2_BITPOS              equ     2
                               74 HW_ICLENABLE0R_SEN3_BITPOS              equ     3
                               75 HW_ICLENABLE0R_SEN4_BITPOS              equ     4
                               76 HW_ICLENABLE0R_SEN5_BITPOS              equ     5
                               77 HW_ICLENABLE0R_SEN6_BITPOS              equ     6
                               78 HW_ICLENABLE0R_SEN7_BITPOS              equ     7
                               79 HW_ICLENABLE0R_SEN8_BITPOS              equ     8
                               80 HW_ICLENABLE0R_SEN9_BITPOS              equ     9
                               81 HW_ICLENABLE0R_SEN10_BITPOS             equ     10
                               82 HW_ICLENABLE0R_SEN11_BITPOS             equ     11
                               83 HW_ICLENABLE0R_SEN12_BITPOS             equ     12
                               84 HW_ICLENABLE0R_SEN13_BITPOS             equ     13
                               85 HW_ICLENABLE0R_SEN14_BITPOS             equ     14
                               86 HW_ICLENABLE0R_SEN15_BITPOS             equ     15
                               87 HW_ICLENABLE0R_SEN16_BITPOS             equ     16
                               88 HW_ICLENABLE0R_SEN17_BITPOS             equ     17
                               89 HW_ICLENABLE0R_SEN18_BITPOS             equ     18
                               90 HW_ICLENABLE0R_SEN19_BITPOS             equ     19
                               91 HW_ICLENABLE0R_SEN20_BITPOS             equ     20
                               92 HW_ICLENABLE0R_SEN21_BITPOS             equ     21
                               93 HW_ICLENABLE0R_SEN22_BITPOS             equ     22
                               94 HW_ICLENABLE0R_SEN23_BITPOS             equ     23
                               96 HW_ICLENABLE0R_SEN0_SETMASK             equ     1<<HW_ICLENABLE0R_SEN0_BITPOS
                               97 HW_ICLENABLE0R_SEN1_SETMASK             equ     1<<HW_ICLENABLE0R_SEN1_BITPOS
                               98 HW_ICLENABLE0R_SEN2_SETMASK             equ     1<<HW_ICLENABLE0R_SEN2_BITPOS
                               99 HW_ICLENABLE0R_SEN3_SETMASK             equ     1<<HW_ICLENABLE0R_SEN3_BITPOS
                              100 HW_ICLENABLE0R_SEN4_SETMASK             equ     1<<HW_ICLENABLE0R_SEN4_BITPOS
                              101 HW_ICLENABLE0R_SEN5_SETMASK             equ     1<<HW_ICLENABLE0R_SEN5_BITPOS
                              102 HW_ICLENABLE0R_SEN6_SETMASK             equ     1<<HW_ICLENABLE0R_SEN6_BITPOS
                              103 HW_ICLENABLE0R_SEN7_SETMASK             equ     1<<HW_ICLENABLE0R_SEN7_BITPOS
                              104 HW_ICLENABLE0R_SEN8_SETMASK             equ     1<<HW_ICLENABLE0R_SEN8_BITPOS
                              105 HW_ICLENABLE0R_SEN9_SETMASK             equ     1<<HW_ICLENABLE0R_SEN9_BITPOS
                              106 HW_ICLENABLE0R_SEN10_SETMASK            equ     1<<HW_ICLENABLE0R_SEN10_BITPOS
                              107 HW_ICLENABLE0R_SEN11_SETMASK            equ     1<<HW_ICLENABLE0R_SEN11_BITPOS
                              108 HW_ICLENABLE0R_SEN12_SETMASK            equ     1<<HW_ICLENABLE0R_SEN12_BITPOS
                              109 HW_ICLENABLE0R_SEN13_SETMASK            equ     1<<HW_ICLENABLE0R_SEN13_BITPOS
                              110 HW_ICLENABLE0R_SEN14_SETMASK            equ     1<<HW_ICLENABLE0R_SEN14_BITPOS
                              111 HW_ICLENABLE0R_SEN15_SETMASK            equ     1<<HW_ICLENABLE0R_SEN15_BITPOS
                              112 HW_ICLENABLE0R_SEN16_SETMASK            equ     1<<HW_ICLENABLE0R_SEN16_BITPOS
                              113 HW_ICLENABLE0R_SEN17_SETMASK            equ     1<<HW_ICLENABLE0R_SEN17_BITPOS
                              114 HW_ICLENABLE0R_SEN18_SETMASK            equ     1<<HW_ICLENABLE0R_SEN18_BITPOS
                              115 HW_ICLENABLE0R_SEN19_SETMASK            equ     1<<HW_ICLENABLE0R_SEN19_BITPOS
                              116 HW_ICLENABLE0R_SEN20_SETMASK            equ     1<<HW_ICLENABLE0R_SEN20_BITPOS
                              117 HW_ICLENABLE0R_SEN21_SETMASK            equ     1<<HW_ICLENABLE0R_SEN21_BITPOS
                              118 HW_ICLENABLE0R_SEN22_SETMASK            equ     1<<HW_ICLENABLE0R_SEN22_BITPOS
                              119 HW_ICLENABLE0R_SEN23_SETMASK            equ     1<<HW_ICLENABLE0R_SEN23_BITPOS
                              121 HW_ICLENABLE0R_SEN0_CLRMASK             equ     ~HW_ICLENABLE0R_SEN0_SETMASK
                              122 HW_ICLENABLE0R_SEN1_CLRMASK             equ     ~HW_ICLENABLE0R_SEN1_SETMASK
                              123 HW_ICLENABLE0R_SEN2_CLRMASK             equ     ~HW_ICLENABLE0R_SEN2_SETMASK
                              124 HW_ICLENABLE0R_SEN3_CLRMASK             equ     ~HW_ICLENABLE0R_SEN3_SETMASK
                              125 HW_ICLENABLE0R_SEN4_CLRMASK             equ     ~HW_ICLENABLE0R_SEN4_SETMASK
                              126 HW_ICLENABLE0R_SEN5_CLRMASK             equ     ~HW_ICLENABLE0R_SEN5_SETMASK
                              127 HW_ICLENABLE0R_SEN6_CLRMASK             equ     ~HW_ICLENABLE0R_SEN6_SETMASK
                              128 HW_ICLENABLE0R_SEN7_CLRMASK             equ     ~HW_ICLENABLE0R_SEN7_SETMASK
                              129 HW_ICLENABLE0R_SEN8_CLRMASK             equ     ~HW_ICLENABLE0R_SEN8_SETMASK
                              130 HW_ICLENABLE0R_SEN9_CLRMASK             equ     ~HW_ICLENABLE0R_SEN9_SETMASK
                              131 HW_ICLENABLE0R_SEN10_CLRMASK            equ     ~HW_ICLENABLE0R_SEN10_SETMASK
                              132 HW_ICLENABLE0R_SEN11_CLRMASK            equ     ~HW_ICLENABLE0R_SEN11_SETMASK
                              133 HW_ICLENABLE0R_SEN12_CLRMASK            equ     ~HW_ICLENABLE0R_SEN12_SETMASK
                              134 HW_ICLENABLE0R_SEN13_CLRMASK            equ     ~HW_ICLENABLE0R_SEN13_SETMASK
                              135 HW_ICLENABLE0R_SEN14_CLRMASK            equ     ~HW_ICLENABLE0R_SEN14_SETMASK
                              136 HW_ICLENABLE0R_SEN15_CLRMASK            equ     ~HW_ICLENABLE0R_SEN15_SETMASK
                              137 HW_ICLENABLE0R_SEN16_CLRMASK            equ     ~HW_ICLENABLE0R_SEN16_SETMASK
                              138 HW_ICLENABLE0R_SEN17_CLRMASK            equ     ~HW_ICLENABLE0R_SEN17_SETMASK
                              139 HW_ICLENABLE0R_SEN18_CLRMASK            equ     ~HW_ICLENABLE0R_SEN18_SETMASK
                              140 HW_ICLENABLE0R_SEN19_CLRMASK            equ     ~HW_ICLENABLE0R_SEN19_SETMASK
                              141 HW_ICLENABLE0R_SEN20_CLRMASK            equ     ~HW_ICLENABLE0R_SEN20_SETMASK
                              142 HW_ICLENABLE0R_SEN21_CLRMASK            equ     ~HW_ICLENABLE0R_SEN21_SETMASK
                              143 HW_ICLENABLE0R_SEN22_CLRMASK            equ     ~HW_ICLENABLE0R_SEN22_SETMASK
                              144 HW_ICLENABLE0R_SEN23_CLRMASK            equ     ~HW_ICLENABLE0R_SEN23_SETMASK
                              147 ;///////////////////////////////////////////////////////////////////////////////
                              148 ;  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                              149 ;C Insert
                              150 ;typedef union
                              151 ;{
                              152 ;    struct {
                              153 ;        
                              154 ;        int SEN24       :1;
                              155 ;        int SEN25       :1;
                              156 ;        int SEN26       :1;
                              157 ;        int SEN27       :1;
                              158 ;        int SEN28       :1;
                              159 ;        int SEN29       :1;
                              160 ;        int SEN30       :1;
                              161 ;        int SEN31       :1;
                              162 ;        int SEN32       :1;
                              163 ;        int SEN33       :1;
                              164 ;    } B;
                              165 ;    int I;
                              166 ;} iclenable1_type;
                              167 ;
                              168 ;#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                              169 ;endC
                              171 HW_ICLENABLE1R_SEN24_BITPOS             equ     0
                              172 HW_ICLENABLE1R_SEN25_BITPOS             equ     1
                              173 HW_ICLENABLE1R_SEN26_BITPOS             equ     2
                              174 HW_ICLENABLE1R_SEN27_BITPOS             equ     3
                              175 HW_ICLENABLE1R_SEN28_BITPOS             equ     4
                              176 HW_ICLENABLE1R_SEN29_BITPOS             equ     5
                              177 HW_ICLENABLE1R_SEN30_BITPOS             equ     6
                              178 HW_ICLENABLE1R_SEN31_BITPOS             equ     7
                              179 HW_ICLENABLE1R_SEN32_BITPOS             equ     8
                              180 HW_ICLENABLE1R_SEN33_BITPOS             equ     9
                              182 HW_ICLENABLE1R_SEN24_SETMASK            equ     1<<HW_ICLENABLE1R_SEN24_BITPOS
                              183 HW_ICLENABLE1R_SEN25_SETMASK            equ     1<<HW_ICLENABLE1R_SEN25_BITPOS
                              184 HW_ICLENABLE1R_SEN26_SETMASK            equ     1<<HW_ICLENABLE1R_SEN26_BITPOS
                              185 HW_ICLENABLE1R_SEN27_SETMASK            equ     1<<HW_ICLENABLE1R_SEN27_BITPOS
                              186 HW_ICLENABLE1R_SEN28_SETMASK            equ     1<<HW_ICLENABLE1R_SEN28_BITPOS
                              187 HW_ICLENABLE1R_SEN29_SETMASK            equ     1<<HW_ICLENABLE1R_SEN29_BITPOS
                              188 HW_ICLENABLE1R_SEN30_SETMASK            equ     1<<HW_ICLENABLE1R_SEN30_BITPOS
                              189 HW_ICLENABLE1R_SEN31_SETMASK            equ     1<<HW_ICLENABLE1R_SEN31_BITPOS
                              190 HW_ICLENABLE1R_SEN32_SETMASK            equ     1<<HW_ICLENABLE1R_SEN32_BITPOS
                              191 HW_ICLENABLE1R_SEN33_SETMASK            equ     1<<HW_ICLENABLE1R_SEN33_BITPOS
                              193 HW_ICLENABLE1R_SEN24_CLRMASK            equ     ~HW_ICLENABLE1R_SEN24_SETMASK
                              194 HW_ICLENABLE1R_SEN25_CLRMASK            equ     ~HW_ICLENABLE1R_SEN25_SETMASK
                              195 HW_ICLENABLE1R_SEN26_CLRMASK            equ     ~HW_ICLENABLE1R_SEN26_SETMASK
                              196 HW_ICLENABLE1R_SEN27_CLRMASK            equ     ~HW_ICLENABLE1R_SEN27_SETMASK
                              197 HW_ICLENABLE1R_SEN28_CLRMASK            equ     ~HW_ICLENABLE1R_SEN28_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                              198 HW_ICLENABLE1R_SEN29_CLRMASK            equ     ~HW_ICLENABLE1R_SEN29_SETMASK
                              199 HW_ICLENABLE1R_SEN30_CLRMASK            equ     ~HW_ICLENABLE1R_SEN30_SETMASK
                              200 HW_ICLENABLE1R_SEN31_CLRMASK            equ     ~HW_ICLENABLE1R_SEN31_SETMASK
                              201 HW_ICLENABLE1R_SEN32_CLRMASK            equ     ~HW_ICLENABLE1R_SEN32_SETMASK
                              202 HW_ICLENABLE1R_SEN33_CLRMASK            equ     ~HW_ICLENABLE1R_SEN33_SETMASK
                              205 ;///////////////////////////////////////////////////////////////////////////////
                              206 ;  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                              207 ;C Insert
                              208 ;typedef union
                              209 ;{
                              210 ;    struct {
                              211 ;        int SST0        :1;
                              212 ;        int SST1        :1;
                              213 ;        int SST2        :1;
                              214 ;        int SST3        :1;
                              215 ;        int SST4        :1;
                              216 ;        int SST5        :1;
                              217 ;        int SST6        :1;
                              218 ;        int SST7        :1;
                              219 ;        int SST8        :1;
                              220 ;        int SST9        :1;
                              221 ;        int SST10       :1;
                              222 ;        int SST11       :1;
                              223 ;        int SST12       :1;
                              224 ;        int SST13       :1;
                              225 ;        int SST14       :1;
                              226 ;        int SST15       :1;
                              227 ;        int SST16       :1;
                              228 ;        int SST17       :1;
                              229 ;        int SST18       :1;
                              230 ;        int SST19       :1;
                              231 ;        int SST20       :1;
                              232 ;        int SST21       :1;
                              233 ;        int SST22       :1;
                              234 ;        int SST23       :1;
                              235 ;    } B;
                              236 ;    int I;
                              237 ;} iclstatus0_type;
                              238 ;#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                              239 ;endC
                              240 HW_ICLSTATUS0R_SST0_BITPOS              equ     0
                              241 HW_ICLSTATUS0R_SST1_BITPOS              equ     1
                              242 HW_ICLSTATUS0R_SST2_BITPOS              equ     2
                              243 HW_ICLSTATUS0R_SST3_BITPOS              equ     3
                              244 HW_ICLSTATUS0R_SST4_BITPOS              equ     4
                              245 HW_ICLSTATUS0R_SST5_BITPOS              equ     5
                              246 HW_ICLSTATUS0R_SST6_BITPOS              equ     6
                              247 HW_ICLSTATUS0R_SST7_BITPOS              equ     7
                              248 HW_ICLSTATUS0R_SST8_BITPOS              equ     8
                              249 HW_ICLSTATUS0R_SST9_BITPOS              equ     9
                              250 HW_ICLSTATUS0R_SST10_BITPOS             equ     10
                              251 HW_ICLSTATUS0R_SST11_BITPOS             equ     11
                              252 HW_ICLSTATUS0R_SST12_BITPOS             equ     12
                              253 HW_ICLSTATUS0R_SST13_BITPOS             equ     13
                              254 HW_ICLSTATUS0R_SST14_BITPOS             equ     14
                              255 HW_ICLSTATUS0R_SST15_BITPOS             equ     15
                              256 HW_ICLSTATUS0R_SST16_BITPOS             equ     16
                              257 HW_ICLSTATUS0R_SST17_BITPOS             equ     17
                              258 HW_ICLSTATUS0R_SST18_BITPOS             equ     18
                              259 HW_ICLSTATUS0R_SST19_BITPOS             equ     19
                              260 HW_ICLSTATUS0R_SST20_BITPOS             equ     20
                              261 HW_ICLSTATUS0R_SST21_BITPOS             equ     21
                              262 HW_ICLSTATUS0R_SST22_BITPOS             equ     22
                              263 HW_ICLSTATUS0R_SST23_BITPOS             equ     23
                              265 HW_ICLSTATUS0R_SST0_SETMASK             equ     1<<HW_ICLSTATUS0R_SST0_BITPOS
                              266 HW_ICLSTATUS0R_SST1_SETMASK             equ     1<<HW_ICLSTATUS0R_SST1_BITPOS
                              267 HW_ICLSTATUS0R_SST2_SETMASK             equ     1<<HW_ICLSTATUS0R_SST2_BITPOS
                              268 HW_ICLSTATUS0R_SST3_SETMASK             equ     1<<HW_ICLSTATUS0R_SST3_BITPOS
                              269 HW_ICLSTATUS0R_SST4_SETMASK             equ     1<<HW_ICLSTATUS0R_SST4_BITPOS
                              270 HW_ICLSTATUS0R_SST5_SETMASK             equ     1<<HW_ICLSTATUS0R_SST5_BITPOS
                              271 HW_ICLSTATUS0R_SST6_SETMASK             equ     1<<HW_ICLSTATUS0R_SST6_BITPOS
                              272 HW_ICLSTATUS0R_SST7_SETMASK             equ     1<<HW_ICLSTATUS0R_SST7_BITPOS
                              273 HW_ICLSTATUS0R_SST8_SETMASK             equ     1<<HW_ICLSTATUS0R_SST8_BITPOS
                              274 HW_ICLSTATUS0R_SST9_SETMASK             equ     1<<HW_ICLSTATUS0R_SST9_BITPOS
                              275 HW_ICLSTATUS0R_SST10_SETMASK            equ     1<<HW_ICLSTATUS0R_SST10_BITPOS
                              276 HW_ICLSTATUS0R_SST11_SETMASK            equ     1<<HW_ICLSTATUS0R_SST11_BITPOS
                              277 HW_ICLSTATUS0R_SST12_SETMASK            equ     1<<HW_ICLSTATUS0R_SST12_BITPOS
                              278 HW_ICLSTATUS0R_SST13_SETMASK            equ     1<<HW_ICLSTATUS0R_SST13_BITPOS
                              279 HW_ICLSTATUS0R_SST14_SETMASK            equ     1<<HW_ICLSTATUS0R_SST14_BITPOS
                              280 HW_ICLSTATUS0R_SST15_SETMASK            equ     1<<HW_ICLSTATUS0R_SST15_BITPOS
                              281 HW_ICLSTATUS0R_SST16_SETMASK            equ     1<<HW_ICLSTATUS0R_SST16_BITPOS
                              282 HW_ICLSTATUS0R_SST17_SETMASK            equ     1<<HW_ICLSTATUS0R_SST17_BITPOS
                              283 HW_ICLSTATUS0R_SST18_SETMASK            equ     1<<HW_ICLSTATUS0R_SST18_BITPOS
                              284 HW_ICLSTATUS0R_SST19_SETMASK            equ     1<<HW_ICLSTATUS0R_SST19_BITPOS
                              285 HW_ICLSTATUS0R_SST20_SETMASK            equ     1<<HW_ICLSTATUS0R_SST20_BITPOS
                              286 HW_ICLSTATUS0R_SST21_SETMASK            equ     1<<HW_ICLSTATUS0R_SST21_BITPOS
                              287 HW_ICLSTATUS0R_SST22_SETMASK            equ     1<<HW_ICLSTATUS0R_SST22_BITPOS
                              288 HW_ICLSTATUS0R_SST23_SETMASK            equ     1<<HW_ICLSTATUS0R_SST23_BITPOS
                              290 HW_ICLSTATUS0R_SST0_CLRMASK             equ     ~HW_ICLSTATUS0R_SST0_SETMASK
                              291 HW_ICLSTATUS0R_SST1_CLRMASK             equ     ~HW_ICLSTATUS0R_SST1_SETMASK
                              292 HW_ICLSTATUS0R_SST2_CLRMASK             equ     ~HW_ICLSTATUS0R_SST2_SETMASK
                              293 HW_ICLSTATUS0R_SST3_CLRMASK             equ     ~HW_ICLSTATUS0R_SST3_SETMASK
                              294 HW_ICLSTATUS0R_SST4_CLRMASK             equ     ~HW_ICLSTATUS0R_SST4_SETMASK
                              295 HW_ICLSTATUS0R_SST5_CLRMASK             equ     ~HW_ICLSTATUS0R_SST5_SETMASK
                              296 HW_ICLSTATUS0R_SST6_CLRMASK             equ     ~HW_ICLSTATUS0R_SST6_SETMASK
                              297 HW_ICLSTATUS0R_SST7_CLRMASK             equ     ~HW_ICLSTATUS0R_SST7_SETMASK
                              298 HW_ICLSTATUS0R_SST8_CLRMASK             equ     ~HW_ICLSTATUS0R_SST8_SETMASK
                              299 HW_ICLSTATUS0R_SST9_CLRMASK             equ     ~HW_ICLSTATUS0R_SST9_SETMASK
                              300 HW_ICLSTATUS0R_SST10_CLRMASK            equ     ~HW_ICLSTATUS0R_SST10_SETMASK
                              301 HW_ICLSTATUS0R_SST11_CLRMASK            equ     ~HW_ICLSTATUS0R_SST11_SETMASK
                              302 HW_ICLSTATUS0R_SST12_CLRMASK            equ     ~HW_ICLSTATUS0R_SST12_SETMASK
                              303 HW_ICLSTATUS0R_SST13_CLRMASK            equ     ~HW_ICLSTATUS0R_SST13_SETMASK
                              304 HW_ICLSTATUS0R_SST14_CLRMASK            equ     ~HW_ICLSTATUS0R_SST14_SETMASK
                              305 HW_ICLSTATUS0R_SST15_CLRMASK            equ     ~HW_ICLSTATUS0R_SST15_SETMASK
                              306 HW_ICLSTATUS0R_SST16_CLRMASK            equ     ~HW_ICLSTATUS0R_SST16_SETMASK
                              307 HW_ICLSTATUS0R_SST17_CLRMASK            equ     ~HW_ICLSTATUS0R_SST17_SETMASK
                              308 HW_ICLSTATUS0R_SST18_CLRMASK            equ     ~HW_ICLSTATUS0R_SST18_SETMASK
                              309 HW_ICLSTATUS0R_SST19_CLRMASK            equ     ~HW_ICLSTATUS0R_SST19_SETMASK
                              310 HW_ICLSTATUS0R_SST20_CLRMASK            equ     ~HW_ICLSTATUS0R_SST20_SETMASK
                              311 HW_ICLSTATUS0R_SST21_CLRMASK            equ     ~HW_ICLSTATUS0R_SST21_SETMASK
                              312 HW_ICLSTATUS0R_SST22_CLRMASK            equ     ~HW_ICLSTATUS0R_SST22_SETMASK
                              313 HW_ICLSTATUS0R_SST23_CLRMASK            equ     ~HW_ICLSTATUS0R_SST23_SETMASK
                              316 ;///////////////////////////////////////////////////////////////////////////////
                              317 ;  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                              318 ;C Insert
                              319 ;typedef union
                              320 ;{
                              321 ;    struct {
                              322 ;        int SST24       :1;
                              323 ;        int SST25       :1;
                              324 ;        int SST26       :1;
                              325 ;        int SST27       :1;
                              326 ;        int SST28       :1;
                              327 ;        int SST29       :1;
                              328 ;        int SST30       :1;
                              329 ;        int SST31       :1;
                              330 ;        int SST32       :1;
                              331 ;        int SST33       :1;
                              332 ;    } B;
                              333 ;    int I;
                              334 ;} iclstatus1_type;
                              335 ;#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                              336 ;endC
                              337 HW_ICLSTATUS1R_SST24_BITPOS             equ     0
                              338 HW_ICLSTATUS1R_SST25_BITPOS             equ     1
                              339 HW_ICLSTATUS1R_SST26_BITPOS             equ     2
                              340 HW_ICLSTATUS1R_SST27_BITPOS             equ     3
                              341 HW_ICLSTATUS1R_SST28_BITPOS             equ     4
                              342 HW_ICLSTATUS1R_SST29_BITPOS             equ     5
                              343 HW_ICLSTATUS1R_SST30_BITPOS             equ     6
                              344 HW_ICLSTATUS1R_SST31_BITPOS             equ     7
                              345 HW_ICLSTATUS1R_SST32_BITPOS             equ     8
                              346 HW_ICLSTATUS1R_SST33_BITPOS             equ     9
                              348 HW_ICLSTATUS1R_SST24_SETMASK            equ     1<<HW_ICLSTATUS1R_SST24_BITPOS
                              349 HW_ICLSTATUS1R_SST25_SETMASK            equ     1<<HW_ICLSTATUS1R_SST25_BITPOS
                              350 HW_ICLSTATUS1R_SST26_SETMASK            equ     1<<HW_ICLSTATUS1R_SST26_BITPOS
                              351 HW_ICLSTATUS1R_SST27_SETMASK            equ     1<<HW_ICLSTATUS1R_SST27_BITPOS
                              352 HW_ICLSTATUS1R_SST28_SETMASK            equ     1<<HW_ICLSTATUS1R_SST28_BITPOS
                              353 HW_ICLSTATUS1R_SST29_SETMASK            equ     1<<HW_ICLSTATUS1R_SST29_BITPOS
                              354 HW_ICLSTATUS1R_SST30_SETMASK            equ     1<<HW_ICLSTATUS1R_SST30_BITPOS
                              355 HW_ICLSTATUS1R_SST31_SETMASK            equ     1<<HW_ICLSTATUS1R_SST31_BITPOS
                              356 HW_ICLSTATUS1R_SST32_SETMASK            equ     1<<HW_ICLSTATUS1R_SST32_BITPOS
                              357 HW_ICLSTATUS1R_SST33_SETMASK            equ     1<<HW_ICLSTATUS1R_SST33_BITPOS
                              359 HW_ICLSTATUS1R_SST24_CLRMASK            equ     ~HW_ICLSTATUS1R_SST24_SETMASK
                              360 HW_ICLSTATUS1R_SST25_CLRMASK            equ     ~HW_ICLSTATUS1R_SST25_SETMASK
                              361 HW_ICLSTATUS1R_SST26_CLRMASK            equ     ~HW_ICLSTATUS1R_SST26_SETMASK
                              362 HW_ICLSTATUS1R_SST27_CLRMASK            equ     ~HW_ICLSTATUS1R_SST27_SETMASK
                              363 HW_ICLSTATUS1R_SST28_CLRMASK            equ     ~HW_ICLSTATUS1R_SST28_SETMASK
                              364 HW_ICLSTATUS1R_SST29_CLRMASK            equ     ~HW_ICLSTATUS1R_SST29_SETMASK
                              365 HW_ICLSTATUS1R_SST30_CLRMASK            equ     ~HW_ICLSTATUS1R_SST30_SETMASK
                              366 HW_ICLSTATUS1R_SST31_CLRMASK            equ     ~HW_ICLSTATUS1R_SST31_SETMASK
                              367 HW_ICLSTATUS1R_SST32_CLRMASK            equ     ~HW_ICLSTATUS1R_SST32_SETMASK
                              368 HW_ICLSTATUS1R_SST33_CLRMASK            equ     ~HW_ICLSTATUS1R_SST33_SETMASK
                              371 ;///////////////////////////////////////////////////////////////////////////////
                              372 ;  Interrupt Collector Priority Defs
                              373 ;C Insert
                              374 ;typedef union
                              375 ;{
                              376 ;    struct {
                              377 ;        unsigned S0P    :3;
                              378 ;        unsigned S1P    :3;
                              379 ;        unsigned S2P    :3;
                              380 ;        unsigned S3P    :3;
                              381 ;        unsigned S4P    :3;
                              382 ;        unsigned S5P    :3;
                              383 ;        unsigned S6P    :3;
                              384 ;        unsigned S7P    :3;
                              385 ;    } B;
                              386 ;    int I;
                              387 ;
                              388 ;} iclprior0_type;
                              389 ;
                              390 ;#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                              391 ;endC
                              393 HW_ICLPRIORR_SP_0                       equ     0
                              394 HW_ICLPRIORR_SP_1                       equ     1
                              395 HW_ICLPRIORR_SP_2                       equ     2
                              396 HW_ICLPRIORR_SP_3                       equ     3
                              397 HW_ICLPRIORR_SP_4                       equ     4
                              398 HW_ICLPRIORR_SP_5                       equ     5
                              399 HW_ICLPRIORR_SP_6                       equ     6
                              400 HW_ICLPRIORR_SP_7                       equ     7
                              403 ;///////////////////////////////////////////////////////////////////////////////
                              404 ;  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                              405 HW_ICLPRIOR0R_S0P_BITPOS                equ     0
                              406 HW_ICLPRIOR0R_S1P_BITPOS                equ     3
                              407 HW_ICLPRIOR0R_S2P_BITPOS                equ     6
                              408 HW_ICLPRIOR0R_S3P_BITPOS                equ     9
                              409 HW_ICLPRIOR0R_S4P_BITPOS                equ     12
                              410 HW_ICLPRIOR0R_S5P_BITPOS                equ     15
                              411 HW_ICLPRIOR0R_S6P_BITPOS                equ     18
                              412 HW_ICLPRIOR0R_S7P_BITPOS                equ     21
                              414 HW_ICLPRIOR0R_S0P_SETMASK               equ     7<<HW_ICLPRIOR0R_S0P_BITPOS
                              415 HW_ICLPRIOR0R_S1P_SETMASK               equ     7<<HW_ICLPRIOR0R_S1P_BITPOS
                              416 HW_ICLPRIOR0R_S2P_SETMASK               equ     7<<HW_ICLPRIOR0R_S2P_BITPOS
                              417 HW_ICLPRIOR0R_S3P_SETMASK               equ     7<<HW_ICLPRIOR0R_S3P_BITPOS
                              418 HW_ICLPRIOR0R_S4P_SETMASK               equ     7<<HW_ICLPRIOR0R_S4P_BITPOS
                              419 HW_ICLPRIOR0R_S5P_SETMASK               equ     7<<HW_ICLPRIOR0R_S5P_BITPOS
                              420 HW_ICLPRIOR0R_S6P_SETMASK               equ     7<<HW_ICLPRIOR0R_S6P_BITPOS
                              421 HW_ICLPRIOR0R_S7P_SETMASK               equ     7<<HW_ICLPRIOR0R_S7P_BITPOS
                              423 HW_ICLPRIOR0R_S0P_CLRMASK               equ     ~HW_ICLPRIOR0R_S0P_SETMASK
                              424 HW_ICLPRIOR0R_S1P_CLRMASK               equ     ~HW_ICLPRIOR0R_S1P_SETMASK
                              425 HW_ICLPRIOR0R_S2P_CLRMASK               equ     ~HW_ICLPRIOR0R_S2P_SETMASK
                              426 HW_ICLPRIOR0R_S3P_CLRMASK               equ     ~HW_ICLPRIOR0R_S3P_SETMASK
                              427 HW_ICLPRIOR0R_S4P_CLRMASK               equ     ~HW_ICLPRIOR0R_S4P_SETMASK
                              428 HW_ICLPRIOR0R_S5P_CLRMASK               equ     ~HW_ICLPRIOR0R_S5P_SETMASK
                              429 HW_ICLPRIOR0R_S6P_CLRMASK               equ     ~HW_ICLPRIOR0R_S6P_SETMASK
                              430 HW_ICLPRIOR0R_S7P_CLRMASK               equ     ~HW_ICLPRIOR0R_S7P_SETMASK
                              433 ;///////////////////////////////////////////////////////////////////////////////
                              434 ;  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                              435 ;C Insert
                              436 ;typedef union
                              437 ;{
                              438 ;    struct {
                              439 ;        unsigned S8P    :3;
                              440 ;        unsigned S9P    :3;
                              441 ;        unsigned S10P   :3;
                              442 ;        unsigned S11P   :3;
                              443 ;        unsigned S12P   :3;
                              444 ;        unsigned S13P   :3;
                              445 ;        unsigned S14P   :3;
                              446 ;        unsigned S15P   :3;
                              447 ;    } B;
                              448 ;    int I;
                              449 ;} iclprior1_type;
                              450 ;
                              451 ;#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                              452 ;endC
                              454 HW_ICLPRIOR1R_S8P_BITPOS                equ     0
                              455 HW_ICLPRIOR1R_S9P_BITPOS                equ     3
                              456 HW_ICLPRIOR1R_S10P_BITPOS               equ     6
                              457 HW_ICLPRIOR1R_S11P_BITPOS               equ     9
                              458 HW_ICLPRIOR1R_S12P_BITPOS               equ     12
                              459 HW_ICLPRIOR1R_S13P_BITPOS               equ     15
                              460 HW_ICLPRIOR1R_S14P_BITPOS               equ     18
                              461 HW_ICLPRIOR1R_S15P_BITPOS               equ     21
                              463 HW_ICLPRIOR1R_S8P_SETMASK               equ     7<<HW_ICLPRIOR1R_S8P_BITPOS
                              464 HW_ICLPRIOR1R_S9P_SETMASK               equ     7<<HW_ICLPRIOR1R_S9P_BITPOS
                              465 HW_ICLPRIOR1R_S10P_SETMASK              equ     7<<HW_ICLPRIOR1R_S10P_BITPOS
                              466 HW_ICLPRIOR1R_S11P_SETMASK              equ     7<<HW_ICLPRIOR1R_S11P_BITPOS
                              467 HW_ICLPRIOR1R_S12P_SETMASK              equ     7<<HW_ICLPRIOR1R_S12P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                              468 HW_ICLPRIOR1R_S13P_SETMASK              equ     7<<HW_ICLPRIOR1R_S13P_BITPOS
                              469 HW_ICLPRIOR1R_S14P_SETMASK              equ     7<<HW_ICLPRIOR1R_S14P_BITPOS
                              470 HW_ICLPRIOR1R_S15P_SETMASK              equ     7<<HW_ICLPRIOR1R_S15P_BITPOS
                              472 HW_ICLPRIOR1R_S8P_CLRMASK               equ     ~HW_ICLPRIOR1R_S8P_SETMASK
                              473 HW_ICLPRIOR1R_S9P_CLRMASK               equ     ~HW_ICLPRIOR1R_S9P_SETMASK
                              474 HW_ICLPRIOR1R_S10P_CLRMASK              equ     ~HW_ICLPRIOR1R_S10P_SETMASK
                              475 HW_ICLPRIOR1R_S11P_CLRMASK              equ     ~HW_ICLPRIOR1R_S11P_SETMASK
                              476 HW_ICLPRIOR1R_S12P_CLRMASK              equ     ~HW_ICLPRIOR1R_S12P_SETMASK
                              477 HW_ICLPRIOR1R_S13P_CLRMASK              equ     ~HW_ICLPRIOR1R_S13P_SETMASK
                              478 HW_ICLPRIOR1R_S14P_CLRMASK              equ     ~HW_ICLPRIOR1R_S14P_SETMASK
                              479 HW_ICLPRIOR1R_S15P_CLRMASK              equ     ~HW_ICLPRIOR1R_S15P_SETMASK
                              482 ;///////////////////////////////////////////////////////////////////////////////
                              483 ;  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                              484 ;C Insert
                              485 ;typedef union               /* Interrupt Collector Priority 2 Register      */
                              486 ;{
                              487 ;    struct {
                              488 ;        unsigned S16P   :3;
                              489 ;        unsigned S17P   :3;
                              490 ;        unsigned S18P   :3;
                              491 ;        unsigned S19P   :3;
                              492 ;        unsigned S20P   :3;
                              493 ;        unsigned S21P   :3;
                              494 ;        unsigned S22P   :3;
                              495 ;        unsigned S23P   :3;
                              496 ;    } B;
                              497 ;    int I;
                              498 ;} iclprior2_type;
                              499 ;#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                              500 ;endC
                              501 HW_ICLPRIOR2R_S16P_BITPOS               equ     0
                              502 HW_ICLPRIOR2R_S17P_BITPOS               equ     3
                              503 HW_ICLPRIOR2R_S18P_BITPOS               equ     6
                              504 HW_ICLPRIOR2R_S19P_BITPOS               equ     9
                              505 HW_ICLPRIOR2R_S20P_BITPOS               equ     12
                              506 HW_ICLPRIOR2R_S21P_BITPOS               equ     15
                              507 HW_ICLPRIOR2R_S22P_BITPOS               equ     18
                              508 HW_ICLPRIOR2R_S23P_BITPOS               equ     21
                              510 HW_ICLPRIOR2R_S16P_SETMASK              equ     7<<HW_ICLPRIOR2R_S16P_BITPOS
                              511 HW_ICLPRIOR2R_S17P_SETMASK              equ     7<<HW_ICLPRIOR2R_S17P_BITPOS
                              512 HW_ICLPRIOR2R_S18P_SETMASK              equ     7<<HW_ICLPRIOR2R_S18P_BITPOS
                              513 HW_ICLPRIOR2R_S19P_SETMASK              equ     7<<HW_ICLPRIOR2R_S19P_BITPOS
                              514 HW_ICLPRIOR2R_S20P_SETMASK              equ     7<<HW_ICLPRIOR2R_S20P_BITPOS
                              515 HW_ICLPRIOR2R_S21P_SETMASK              equ     7<<HW_ICLPRIOR2R_S21P_BITPOS
                              516 HW_ICLPRIOR2R_S22P_SETMASK              equ     7<<HW_ICLPRIOR2R_S22P_BITPOS
                              517 HW_ICLPRIOR2R_S23P_SETMASK              equ     7<<HW_ICLPRIOR2R_S23P_BITPOS
                              519 HW_ICLPRIOR2R_S16P_CLRMASK              equ     ~HW_ICLPRIOR2R_S16P_SETMASK
                              520 HW_ICLPRIOR2R_S17P_CLRMASK              equ     ~HW_ICLPRIOR2R_S17P_SETMASK
                              521 HW_ICLPRIOR2R_S18P_CLRMASK              equ     ~HW_ICLPRIOR2R_S18P_SETMASK
                              522 HW_ICLPRIOR2R_S19P_CLRMASK              equ     ~HW_ICLPRIOR2R_S19P_SETMASK
                              523 HW_ICLPRIOR2R_S20P_CLRMASK              equ     ~HW_ICLPRIOR2R_S20P_SETMASK
                              524 HW_ICLPRIOR2R_S21P_CLRMASK              equ     ~HW_ICLPRIOR2R_S21P_SETMASK
                              525 HW_ICLPRIOR2R_S22P_CLRMASK              equ     ~HW_ICLPRIOR2R_S22P_SETMASK
                              526 HW_ICLPRIOR2R_S23P_CLRMASK              equ     ~HW_ICLPRIOR2R_S23P_SETMASK
                              529 ;///////////////////////////////////////////////////////////////////////////////
                              530 ;  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                              531 ;C Insert
                              532 ;typedef union               /* Interrupt Collector Priority 3 Register      */
                              533 ;{
                              534 ;    struct {
                              535 ;        unsigned S24P   :3;
                              536 ;        unsigned S25P   :3;
                              537 ;        unsigned S26P   :3;
                              538 ;        unsigned S27P   :3;
                              539 ;        unsigned S28P   :3;
                              540 ;        unsigned S29P   :3;
                              541 ;        unsigned S30P   :3;
                              542 ;        unsigned S31P   :3;
                              543 ;    } B;
                              544 ;    int I;
                              545 ;} iclprior3_type;
                              546 ;#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                              547 ;endC
                              549 HW_ICLPRIOR3R_S24P_BITPOS               equ     0
                              550 HW_ICLPRIOR3R_S25P_BITPOS               equ     3
                              551 HW_ICLPRIOR3R_S26P_BITPOS               equ     6
                              552 HW_ICLPRIOR3R_S27P_BITPOS               equ     9
                              553 HW_ICLPRIOR3R_S28P_BITPOS               equ     12
                              554 HW_ICLPRIOR3R_S29P_BITPOS               equ     15
                              555 HW_ICLPRIOR3R_S30P_BITPOS               equ     18
                              556 HW_ICLPRIOR3R_S31P_BITPOS               equ     21
                              558 HW_ICLPRIOR3R_S24P_SETMASK              equ     7<<HW_ICLPRIOR3R_S24P_BITPOS
                              559 HW_ICLPRIOR3R_S25P_SETMASK              equ     7<<HW_ICLPRIOR3R_S25P_BITPOS
                              560 HW_ICLPRIOR3R_S26P_SETMASK              equ     7<<HW_ICLPRIOR3R_S26P_BITPOS
                              561 HW_ICLPRIOR3R_S27P_SETMASK              equ     7<<HW_ICLPRIOR3R_S27P_BITPOS
                              562 HW_ICLPRIOR3R_S28P_SETMASK              equ     7<<HW_ICLPRIOR3R_S28P_BITPOS
                              563 HW_ICLPRIOR3R_S29P_SETMASK              equ     7<<HW_ICLPRIOR3R_S29P_BITPOS
                              564 HW_ICLPRIOR3R_S30P_SETMASK              equ     7<<HW_ICLPRIOR3R_S30P_BITPOS
                              565 HW_ICLPRIOR3R_S31P_SETMASK              equ     7<<HW_ICLPRIOR3R_S31P_BITPOS
                              567 HW_ICLPRIOR3R_S24P_CLRMASK              equ     ~HW_ICLPRIOR3R_S24P_SETMASK
                              568 HW_ICLPRIOR3R_S25P_CLRMASK              equ     ~HW_ICLPRIOR3R_S25P_SETMASK
                              569 HW_ICLPRIOR3R_S26P_CLRMASK              equ     ~HW_ICLPRIOR3R_S26P_SETMASK
                              570 HW_ICLPRIOR3R_S27P_CLRMASK              equ     ~HW_ICLPRIOR3R_S27P_SETMASK
                              571 HW_ICLPRIOR3R_S28P_CLRMASK              equ     ~HW_ICLPRIOR3R_S28P_SETMASK
                              572 HW_ICLPRIOR3R_S29P_CLRMASK              equ     ~HW_ICLPRIOR3R_S29P_SETMASK
                              573 HW_ICLPRIOR3R_S30P_CLRMASK              equ     ~HW_ICLPRIOR3R_S30P_SETMASK
                              574 HW_ICLPRIOR3R_S31P_CLRMASK              equ     ~HW_ICLPRIOR3R_S31P_SETMASK
                              577 ;///////////////////////////////////////////////////////////////////////////////
                              578 ;  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                              579 ;C Insert
                              580 ;typedef union               /* Interrupt Collector Priority 3 Register      */
                              581 ;{
                              582 ;    struct {
                              583 ;        unsigned S32P   :3;
                              584 ;        unsigned S33P   :3;
                              585 ;    } B;
                              586 ;    int I;
                              587 ;} iclprior4_type;
                              588 ;#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                              589 ;endC
                              591 HW_ICLPRIOR4R_S32P_BITPOS               equ     0
                              592 HW_ICLPRIOR4R_S33P_BITPOS               equ     3
                              594 HW_ICLPRIOR4R_S32P_SETMASK              equ     7<<HW_ICLPRIOR4R_S32P_BITPOS
                              595 HW_ICLPRIOR4R_S33P_SETMASK              equ     7<<HW_ICLPRIOR4R_S33P_BITPOS
                              597 HW_ICLPRIOR4R_S32P_CLRMASK              equ     ~HW_ICLPRIOR4R_S32P_SETMASK
                              598 HW_ICLPRIOR4R_S33P_CLRMASK              equ     ~HW_ICLPRIOR4R_S33P_SETMASK
                              601 ;///////////////////////////////////////////////////////////////////////////////
                              602 ;  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                              603 ;C Insert
                              604 ;typedef union               /* Interrupt Collector Steering 0 Register      */
                              605 ;{
                              606 ;    struct {
                              607 ;        unsigned S0S    :2;
                              608 ;        unsigned S1S    :2;
                              609 ;        unsigned S2S    :2;
                              610 ;        unsigned S3S    :2;
                              611 ;        unsigned S4S    :2;
                              612 ;        unsigned S5S    :2;
                              613 ;        unsigned S6S    :2;
                              614 ;        unsigned S7S    :2;
                              615 ;        unsigned S8S    :2;
                              616 ;        unsigned S9S    :2;
                              617 ;        unsigned S10S   :2;
                              618 ;        unsigned S11S   :2;
                              619 ;    } B;
                              620 ;    int I;
                              621 ;} iclsteer0_type;
                              622 ;#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                              623 ;endC
                              625 HW_ICLSTEER0R_S0P_BITPOS                equ     0
                              626 HW_ICLSTEER0R_S1P_BITPOS                equ     2
                              627 HW_ICLSTEER0R_S2P_BITPOS                equ     4
                              628 HW_ICLSTEER0R_S3P_BITPOS                equ     6
                              629 HW_ICLSTEER0R_S4P_BITPOS                equ     8
                              630 HW_ICLSTEER0R_S5P_BITPOS                equ     10
                              631 HW_ICLSTEER0R_S6P_BITPOS                equ     12
                              632 HW_ICLSTEER0R_S7P_BITPOS                equ     14
                              633 HW_ICLSTEER0R_S8P_BITPOS                equ     16
                              634 HW_ICLSTEER0R_S9P_BITPOS                equ     18
                              635 HW_ICLSTEER0R_S10P_BITPOS               equ     20
                              636 HW_ICLSTEER0R_S11P_BITPOS               equ     22
                              638 HW_ICLSTEER0R_S0P_SETMASK               equ     3<<HW_ICLSTEER0R_S0P_BITPOS
                              639 HW_ICLSTEER0R_S1P_SETMASK               equ     3<<HW_ICLSTEER0R_S1P_BITPOS
                              640 HW_ICLSTEER0R_S2P_SETMASK               equ     3<<HW_ICLSTEER0R_S2P_BITPOS
                              641 HW_ICLSTEER0R_S3P_SETMASK               equ     3<<HW_ICLSTEER0R_S3P_BITPOS
                              642 HW_ICLSTEER0R_S4P_SETMASK               equ     3<<HW_ICLSTEER0R_S4P_BITPOS
                              643 HW_ICLSTEER0R_S5P_SETMASK               equ     3<<HW_ICLSTEER0R_S5P_BITPOS
                              644 HW_ICLSTEER0R_S6P_SETMASK               equ     3<<HW_ICLSTEER0R_S6P_BITPOS
                              645 HW_ICLSTEER0R_S7P_SETMASK               equ     3<<HW_ICLSTEER0R_S7P_BITPOS
                              646 HW_ICLSTEER0R_S8P_SETMASK               equ     3<<HW_ICLSTEER0R_S8P_BITPOS
                              647 HW_ICLSTEER0R_S9P_SETMASK               equ     3<<HW_ICLSTEER0R_S9P_BITPOS
                              648 HW_ICLSTEER0R_S10P_SETMASK              equ     3<<HW_ICLSTEER0R_S10P_BITPOS
                              649 HW_ICLSTEER0R_S11P_SETMASK              equ     3<<HW_ICLSTEER0R_S11P_BITPOS
                              651 HW_ICLSTEER0R_S0P_CLRMASK               equ     ~HW_ICLSTEER0R_S0P_SETMASK
                              652 HW_ICLSTEER0R_S1P_CLRMASK               equ     ~HW_ICLSTEER0R_S1P_SETMASK
                              653 HW_ICLSTEER0R_S2P_CLRMASK               equ     ~HW_ICLSTEER0R_S2P_SETMASK
                              654 HW_ICLSTEER0R_S3P_CLRMASK               equ     ~HW_ICLSTEER0R_S3P_SETMASK
                              655 HW_ICLSTEER0R_S4P_CLRMASK               equ     ~HW_ICLSTEER0R_S4P_SETMASK
                              656 HW_ICLSTEER0R_S5P_CLRMASK               equ     ~HW_ICLSTEER0R_S5P_SETMASK
                              657 HW_ICLSTEER0R_S6P_CLRMASK               equ     ~HW_ICLSTEER0R_S6P_SETMASK
                              658 HW_ICLSTEER0R_S7P_CLRMASK               equ     ~HW_ICLSTEER0R_S7P_SETMASK
                              659 HW_ICLSTEER0R_S8P_CLRMASK               equ     ~HW_ICLSTEER0R_S8P_SETMASK
                              660 HW_ICLSTEER0R_S9P_CLRMASK               equ     ~HW_ICLSTEER0R_S9P_SETMASK
                              661 HW_ICLSTEER0R_S10P_CLRMASK              equ     ~HW_ICLSTEER0R_S10P_SETMASK
                              662 HW_ICLSTEER0R_S11P_CLRMASK              equ     ~HW_ICLSTEER0R_S11P_SETMASK
                              665 ;///////////////////////////////////////////////////////////////////////////////
                              666 ;  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                              667 ;C Insert
                              668 ;typedef union               /* Interrupt Collector Steering 1 Register      */
                              669 ;{
                              670 ;    struct {
                              671 ;        unsigned S12S   :2;
                              672 ;        unsigned S13S   :2;
                              673 ;        unsigned S14S   :2;
                              674 ;        unsigned S15S   :2;
                              675 ;        unsigned S16S   :2;
                              676 ;        unsigned S17S   :2;
                              677 ;        unsigned S18S   :2;
                              678 ;        unsigned S19S   :2;
                              679 ;        unsigned S20S   :2;
                              680 ;        unsigned S21S   :2;
                              681 ;        unsigned S22S   :2;
                              682 ;        unsigned S23S   :2;
                              683 ;    } B;
                              684 ;    int I;
                              685 ;} iclsteer1_type;
                              686 ;#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                              687 ;endC
                              688 HW_ICLSTEER1R_S12P_BITPOS               equ     0
                              689 HW_ICLSTEER1R_S13P_BITPOS               equ     2
                              690 HW_ICLSTEER1R_S14P_BITPOS               equ     4
                              691 HW_ICLSTEER1R_S15P_BITPOS               equ     6
                              692 HW_ICLSTEER1R_S16P_BITPOS               equ     8
                              693 HW_ICLSTEER1R_S17P_BITPOS               equ     10
                              694 HW_ICLSTEER1R_S18P_BITPOS               equ     12
                              695 HW_ICLSTEER1R_S19P_BITPOS               equ     14
                              696 HW_ICLSTEER1R_S20P_BITPOS               equ     16
                              697 HW_ICLSTEER1R_S21P_BITPOS               equ     18
                              698 HW_ICLSTEER1R_S22P_BITPOS               equ     20
                              699 HW_ICLSTEER1R_S23P_BITPOS               equ     22
                              701 HW_ICLSTEER1R_S12P_SETMASK              equ     3<<HW_ICLSTEER1R_S12P_BITPOS
                              702 HW_ICLSTEER1R_S13P_SETMASK              equ     3<<HW_ICLSTEER1R_S13P_BITPOS
                              703 HW_ICLSTEER1R_S14P_SETMASK              equ     3<<HW_ICLSTEER1R_S14P_BITPOS
                              704 HW_ICLSTEER1R_S15P_SETMASK              equ     3<<HW_ICLSTEER1R_S15P_BITPOS
                              705 HW_ICLSTEER1R_S16P_SETMASK              equ     3<<HW_ICLSTEER1R_S16P_BITPOS
                              706 HW_ICLSTEER1R_S17P_SETMASK              equ     3<<HW_ICLSTEER1R_S17P_BITPOS
                              707 HW_ICLSTEER1R_S18P_SETMASK              equ     3<<HW_ICLSTEER1R_S18P_BITPOS
                              708 HW_ICLSTEER1R_S19P_SETMASK              equ     3<<HW_ICLSTEER1R_S19P_BITPOS
                              709 HW_ICLSTEER1R_S20P_SETMASK              equ     3<<HW_ICLSTEER1R_S20P_BITPOS
                              710 HW_ICLSTEER1R_S21P_SETMASK              equ     3<<HW_ICLSTEER1R_S21P_BITPOS
                              711 HW_ICLSTEER1R_S22P_SETMASK              equ     3<<HW_ICLSTEER1R_S22P_BITPOS
                              712 HW_ICLSTEER1R_S23P_SETMASK              equ     3<<HW_ICLSTEER1R_S23P_BITPOS
                              714 HW_ICLSTEER1R_S12P_CLRMASK              equ     ~HW_ICLSTEER1R_S12P_SETMASK
                              715 HW_ICLSTEER1R_S13P_CLRMASK              equ     ~HW_ICLSTEER1R_S13P_SETMASK
                              716 HW_ICLSTEER1R_S14P_CLRMASK              equ     ~HW_ICLSTEER1R_S14P_SETMASK
                              717 HW_ICLSTEER1R_S15P_CLRMASK              equ     ~HW_ICLSTEER1R_S15P_SETMASK
                              718 HW_ICLSTEER1R_S16P_CLRMASK              equ     ~HW_ICLSTEER1R_S16P_SETMASK
                              719 HW_ICLSTEER1R_S17P_CLRMASK              equ     ~HW_ICLSTEER1R_S17P_SETMASK
                              720 HW_ICLSTEER1R_S18P_CLRMASK              equ     ~HW_ICLSTEER1R_S18P_SETMASK
                              721 HW_ICLSTEER1R_S19P_CLRMASK              equ     ~HW_ICLSTEER1R_S19P_SETMASK
                              722 HW_ICLSTEER1R_S20P_CLRMASK              equ     ~HW_ICLSTEER1R_S20P_SETMASK
                              723 HW_ICLSTEER1R_S21P_CLRMASK              equ     ~HW_ICLSTEER1R_S21P_SETMASK
                              724 HW_ICLSTEER1R_S22P_CLRMASK              equ     ~HW_ICLSTEER1R_S22P_SETMASK
                              725 HW_ICLSTEER1R_S23P_CLRMASK              equ     ~HW_ICLSTEER1R_S23P_SETMASK
                              728 ;///////////////////////////////////////////////////////////////////////////////
                              729 ;  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                              730 ;C Insert
                              731 ;typedef union               /* Interrupt Collector Steering 2 Register      */
                              732 ;{
                              733 ;    struct {
                              734 ;        unsigned S24S   :2;
                              735 ;        unsigned S25S   :2;
                              736 ;        unsigned S26S   :2;
                              737 ;        unsigned S27S   :2;
                              738 ;        unsigned S28S   :2;
                              739 ;        unsigned S29S   :2;
                              740 ;        unsigned S30S   :2;
                              741 ;        unsigned S31S   :2;
                              742 ;        unsigned S32S   :2;
                              743 ;        unsigned S33S   :2;
                              744 ;    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                              745 ;    int I;
                              746 ;} iclsteer2_type;
                              747 ;#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                              748 ;endC
                              750 HW_ICLSTEER2R_S24P_BITPOS               equ     0
                              751 HW_ICLSTEER2R_S25P_BITPOS               equ     2
                              752 HW_ICLSTEER2R_S26P_BITPOS               equ     4
                              753 HW_ICLSTEER2R_S27P_BITPOS               equ     6
                              754 HW_ICLSTEER2R_S28P_BITPOS               equ     8
                              755 HW_ICLSTEER2R_S29P_BITPOS               equ     10
                              756 HW_ICLSTEER2R_S30P_BITPOS               equ     12
                              757 HW_ICLSTEER2R_S31P_BITPOS               equ     14
                              758 HW_ICLSTEER2R_S32P_BITPOS               equ     16
                              759 HW_ICLSTEER2R_S33P_BITPOS               equ     18
                              761 HW_ICLSTEER2R_S24P_SETMASK              equ     3<<HW_ICLSTEER2R_S24P_BITPOS
                              762 HW_ICLSTEER2R_S25P_SETMASK              equ     3<<HW_ICLSTEER2R_S25P_BITPOS
                              763 HW_ICLSTEER2R_S26P_SETMASK              equ     3<<HW_ICLSTEER2R_S26P_BITPOS
                              764 HW_ICLSTEER2R_S27P_SETMASK              equ     3<<HW_ICLSTEER2R_S27P_BITPOS
                              765 HW_ICLSTEER2R_S28P_SETMASK              equ     3<<HW_ICLSTEER2R_S28P_BITPOS
                              766 HW_ICLSTEER2R_S29P_SETMASK              equ     3<<HW_ICLSTEER2R_S29P_BITPOS
                              767 HW_ICLSTEER2R_S30P_SETMASK              equ     3<<HW_ICLSTEER2R_S30P_BITPOS
                              768 HW_ICLSTEER2R_S31P_SETMASK              equ     3<<HW_ICLSTEER2R_S31P_BITPOS
                              769 HW_ICLSTEER2R_S32P_SETMASK              equ     3<<HW_ICLSTEER2R_S32P_BITPOS
                              770 HW_ICLSTEER2R_S33P_SETMASK              equ     3<<HW_ICLSTEER2R_S33P_BITPOS
                              772 HW_ICLSTEER2R_S24P_CLRMASK              equ     ~HW_ICLSTEER2R_S24P_SETMASK
                              773 HW_ICLSTEER2R_S25P_CLRMASK              equ     ~HW_ICLSTEER2R_S25P_SETMASK
                              774 HW_ICLSTEER2R_S26P_CLRMASK              equ     ~HW_ICLSTEER2R_S26P_SETMASK
                              775 HW_ICLSTEER2R_S27P_CLRMASK              equ     ~HW_ICLSTEER2R_S27P_SETMASK
                              776 HW_ICLSTEER2R_S28P_CLRMASK              equ     ~HW_ICLSTEER2R_S28P_SETMASK
                              777 HW_ICLSTEER2R_S29P_CLRMASK              equ     ~HW_ICLSTEER2R_S29P_SETMASK
                              778 HW_ICLSTEER2R_S30P_CLRMASK              equ     ~HW_ICLSTEER2R_S30P_SETMASK
                              779 HW_ICLSTEER2R_S31P_CLRMASK              equ     ~HW_ICLSTEER2R_S31P_SETMASK
                              780 HW_ICLSTEER2R_S32P_CLRMASK              equ     ~HW_ICLSTEER2R_S32P_SETMASK
                              781 HW_ICLSTEER2R_S33P_CLRMASK              equ     ~HW_ICLSTEER2R_S33P_SETMASK
                              784 ;///////////////////////////////////////////////////////////////////////////////
                              785 ;  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                              786 ;C Insert 
                              787 ;typedef union               /* Interrupt Collector Debug Force 0 Register       */
                              788 ;{
                              789 ;    struct {
                              790 ;        int S0FV        :1;
                              791 ;        int S1FV        :1;
                              792 ;        int S2FV        :1;
                              793 ;        int S3FV        :1;
                              794 ;        int S4FV        :1;
                              795 ;        int S5FV        :1;
                              796 ;        int S6FV        :1;
                              797 ;        int S7FV        :1;
                              798 ;        int S8FV        :1;
                              799 ;        int S9FV        :1;
                              800 ;        int S10FV       :1;
                              801 ;        int S11FV       :1;
                              802 ;        int S12FV       :1;
                              803 ;        int S13FV       :1;
                              804 ;        int S14FV       :1;
                              805 ;        int S15FV       :1;
                              806 ;        int S16FV       :1;
                              807 ;        int S17FV       :1;
                              808 ;        int S18FV       :1;
                              809 ;        int S19FV       :1;
                              810 ;        int S20FV       :1;
                              811 ;        int S21FV       :1;
                              812 ;        int S22FV       :1;
                              813 ;        int S23FV       :1;
                              814 ;    } B;
                              815 ;    int I;
                              816 ;} iclforce0_type;
                              817 ;#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                              818 ;endC
                              819 HW_ICLFORCE0R_S0FV_BITPOS               equ     0
                              820 HW_ICLFORCE0R_S1FV_BITPOS               equ     1
                              821 HW_ICLFORCE0R_S2FV_BITPOS               equ     2
                              822 HW_ICLFORCE0R_S3FV_BITPOS               equ     3
                              823 HW_ICLFORCE0R_S4FV_BITPOS               equ     4
                              824 HW_ICLFORCE0R_S5FV_BITPOS               equ     5
                              825 HW_ICLFORCE0R_S6FV_BITPOS               equ     6
                              826 HW_ICLFORCE0R_S7FV_BITPOS               equ     7
                              827 HW_ICLFORCE0R_S8FV_BITPOS               equ     8
                              828 HW_ICLFORCE0R_S9FV_BITPOS               equ     9
                              829 HW_ICLFORCE0R_S10FV_BITPOS              equ     10
                              830 HW_ICLFORCE0R_S11FV_BITPOS              equ     11
                              831 HW_ICLFORCE0R_S12FV_BITPOS              equ     12
                              832 HW_ICLFORCE0R_S13FV_BITPOS              equ     13
                              833 HW_ICLFORCE0R_S14FV_BITPOS              equ     14
                              834 HW_ICLFORCE0R_S15FV_BITPOS              equ     15
                              835 HW_ICLFORCE0R_S16FV_BITPOS              equ     16
                              836 HW_ICLFORCE0R_S17FV_BITPOS              equ     17
                              837 HW_ICLFORCE0R_S18FV_BITPOS              equ     18
                              838 HW_ICLFORCE0R_S19FV_BITPOS              equ     19
                              839 HW_ICLFORCE0R_S20FV_BITPOS              equ     20
                              840 HW_ICLFORCE0R_S21FV_BITPOS              equ     21
                              841 HW_ICLFORCE0R_S22FV_BITPOS              equ     22
                              842 HW_ICLFORCE0R_S23FV_BITPOS              equ     23
                              844 HW_ICLFORCE0R_S0FV_SETMASK              equ     1<<HW_ICLFORCE0R_S0FV_BITPOS
                              845 HW_ICLFORCE0R_S1FV_SETMASK              equ     1<<HW_ICLFORCE0R_S1FV_BITPOS
                              846 HW_ICLFORCE0R_S2FV_SETMASK              equ     1<<HW_ICLFORCE0R_S2FV_BITPOS
                              847 HW_ICLFORCE0R_S3FV_SETMASK              equ     1<<HW_ICLFORCE0R_S3FV_BITPOS
                              848 HW_ICLFORCE0R_S4FV_SETMASK              equ     1<<HW_ICLFORCE0R_S4FV_BITPOS
                              849 HW_ICLFORCE0R_S5FV_SETMASK              equ     1<<HW_ICLFORCE0R_S5FV_BITPOS
                              850 HW_ICLFORCE0R_S6FV_SETMASK              equ     1<<HW_ICLFORCE0R_S6FV_BITPOS
                              851 HW_ICLFORCE0R_S7FV_SETMASK              equ     1<<HW_ICLFORCE0R_S7FV_BITPOS
                              852 HW_ICLFORCE0R_S8FV_SETMASK              equ     1<<HW_ICLFORCE0R_S8FV_BITPOS
                              853 HW_ICLFORCE0R_S9FV_SETMASK              equ     1<<HW_ICLFORCE0R_S9FV_BITPOS
                              854 HW_ICLFORCE0R_S10FV_SETMASK             equ     1<<HW_ICLFORCE0R_S10FV_BITPOS
                              855 HW_ICLFORCE0R_S11FV_SETMASK             equ     1<<HW_ICLFORCE0R_S11FV_BITPOS
                              856 HW_ICLFORCE0R_S12FV_SETMASK             equ     1<<HW_ICLFORCE0R_S12FV_BITPOS
                              857 HW_ICLFORCE0R_S13FV_SETMASK             equ     1<<HW_ICLFORCE0R_S13FV_BITPOS
                              858 HW_ICLFORCE0R_S14FV_SETMASK             equ     1<<HW_ICLFORCE0R_S14FV_BITPOS
                              859 HW_ICLFORCE0R_S15FV_SETMASK             equ     1<<HW_ICLFORCE0R_S15FV_BITPOS
                              860 HW_ICLFORCE0R_S16FV_SETMASK             equ     1<<HW_ICLFORCE0R_S16FV_BITPOS
                              861 HW_ICLFORCE0R_S17FV_SETMASK             equ     1<<HW_ICLFORCE0R_S17FV_BITPOS
                              862 HW_ICLFORCE0R_S18FV_SETMASK             equ     1<<HW_ICLFORCE0R_S18FV_BITPOS
                              863 HW_ICLFORCE0R_S19FV_SETMASK             equ     1<<HW_ICLFORCE0R_S19FV_BITPOS
                              864 HW_ICLFORCE0R_S20FV_SETMASK             equ     1<<HW_ICLFORCE0R_S20FV_BITPOS
                              865 HW_ICLFORCE0R_S21FV_SETMASK             equ     1<<HW_ICLFORCE0R_S21FV_BITPOS
                              866 HW_ICLFORCE0R_S22FV_SETMASK             equ     1<<HW_ICLFORCE0R_S22FV_BITPOS
                              867 HW_ICLFORCE0R_S23FV_SETMASK             equ     1<<HW_ICLFORCE0R_S23FV_BITPOS
                              869 HW_ICLFORCE0R_S0FV_CLRMASK              equ     ~HW_ICLFORCE0R_S0FV_SETMASK
                              870 HW_ICLFORCE0R_S1FV_CLRMASK              equ     ~HW_ICLFORCE0R_S1FV_SETMASK
                              871 HW_ICLFORCE0R_S2FV_CLRMASK              equ     ~HW_ICLFORCE0R_S2FV_SETMASK
                              872 HW_ICLFORCE0R_S3FV_CLRMASK              equ     ~HW_ICLFORCE0R_S3FV_SETMASK
                              873 HW_ICLFORCE0R_S4FV_CLRMASK              equ     ~HW_ICLFORCE0R_S4FV_SETMASK
                              874 HW_ICLFORCE0R_S5FV_CLRMASK              equ     ~HW_ICLFORCE0R_S5FV_SETMASK
                              875 HW_ICLFORCE0R_S6FV_CLRMASK              equ     ~HW_ICLFORCE0R_S6FV_SETMASK
                              876 HW_ICLFORCE0R_S7FV_CLRMASK              equ     ~HW_ICLFORCE0R_S7FV_SETMASK
                              877 HW_ICLFORCE0R_S8FV_CLRMASK              equ     ~HW_ICLFORCE0R_S8FV_SETMASK
                              878 HW_ICLFORCE0R_S9FV_CLRMASK              equ     ~HW_ICLFORCE0R_S9FV_SETMASK
                              879 HW_ICLFORCE0R_S10FV_CLRMASK             equ     ~HW_ICLFORCE0R_S10FV_SETMASK
                              880 HW_ICLFORCE0R_S11FV_CLRMASK             equ     ~HW_ICLFORCE0R_S11FV_SETMASK
                              881 HW_ICLFORCE0R_S12FV_CLRMASK             equ     ~HW_ICLFORCE0R_S12FV_SETMASK
                              882 HW_ICLFORCE0R_S13FV_CLRMASK             equ     ~HW_ICLFORCE0R_S13FV_SETMASK
                              883 HW_ICLFORCE0R_S14FV_CLRMASK             equ     ~HW_ICLFORCE0R_S14FV_SETMASK
                              884 HW_ICLFORCE0R_S15FV_CLRMASK             equ     ~HW_ICLFORCE0R_S15FV_SETMASK
                              885 HW_ICLFORCE0R_S16FV_CLRMASK             equ     ~HW_ICLFORCE0R_S16FV_SETMASK
                              886 HW_ICLFORCE0R_S17FV_CLRMASK             equ     ~HW_ICLFORCE0R_S17FV_SETMASK
                              887 HW_ICLFORCE0R_S18FV_CLRMASK             equ     ~HW_ICLFORCE0R_S18FV_SETMASK
                              888 HW_ICLFORCE0R_S19FV_CLRMASK             equ     ~HW_ICLFORCE0R_S19FV_SETMASK
                              889 HW_ICLFORCE0R_S20FV_CLRMASK             equ     ~HW_ICLFORCE0R_S20FV_SETMASK
                              890 HW_ICLFORCE0R_S21FV_CLRMASK             equ     ~HW_ICLFORCE0R_S21FV_SETMASK
                              891 HW_ICLFORCE0R_S22FV_CLRMASK             equ     ~HW_ICLFORCE0R_S22FV_SETMASK
                              892 HW_ICLFORCE0R_S23FV_CLRMASK             equ     ~HW_ICLFORCE0R_S23FV_SETMASK
                              895 ;///////////////////////////////////////////////////////////////////////////////
                              896 ;  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                              897 ;C Insert
                              898 ;typedef union               /* Interrupt Debug Force 1 Register     */
                              899 ;{
                              900 ;    struct {
                              901 ;        int S24FV       :1;
                              902 ;        int S25FV       :1;
                              903 ;        int S26FV       :1;
                              904 ;        int S27FV       :1;
                              905 ;        int S28FV       :1;
                              906 ;        int S29FV       :1;
                              907 ;        int S30FV       :1;
                              908 ;        int S31FV       :1;
                              909 ;        int S32FV       :1;
                              910 ;        int S33FV       :1;
                              911 ;    } B;
                              912 ;    int I;
                              913 ;} iclforce1_type;
                              914 ;#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                              915 ;endC
                              917 HW_ICLFORCE1R_S24FV_BITPOS              equ     0
                              918 HW_ICLFORCE1R_S25FV_BITPOS              equ     1
                              919 HW_ICLFORCE1R_S26FV_BITPOS              equ     2
                              920 HW_ICLFORCE1R_S27FV_BITPOS              equ     3
                              921 HW_ICLFORCE1R_S28FV_BITPOS              equ     4
                              922 HW_ICLFORCE1R_S29FV_BITPOS              equ     5
                              923 HW_ICLFORCE1R_S30FV_BITPOS              equ     6
                              924 HW_ICLFORCE1R_S31FV_BITPOS              equ     7
                              925 HW_ICLFORCE1R_S32FV_BITPOS              equ     8
                              926 HW_ICLFORCE1R_S33FV_BITPOS              equ     9
                              928 HW_ICLFORCE1R_S24FV_SETMASK             equ     1<<HW_ICLFORCE1R_S24FV_BITPOS
                              929 HW_ICLFORCE1R_S25FV_SETMASK             equ     1<<HW_ICLFORCE1R_S25FV_BITPOS
                              930 HW_ICLFORCE1R_S26FV_SETMASK             equ     1<<HW_ICLFORCE1R_S26FV_BITPOS
                              931 HW_ICLFORCE1R_S27FV_SETMASK             equ     1<<HW_ICLFORCE1R_S27FV_BITPOS
                              932 HW_ICLFORCE1R_S28FV_SETMASK             equ     1<<HW_ICLFORCE1R_S28FV_BITPOS
                              933 HW_ICLFORCE1R_S29FV_SETMASK             equ     1<<HW_ICLFORCE1R_S29FV_BITPOS
                              934 HW_ICLFORCE1R_S30FV_SETMASK             equ     1<<HW_ICLFORCE1R_S30FV_BITPOS
                              935 HW_ICLFORCE1R_S31FV_SETMASK             equ     1<<HW_ICLFORCE1R_S31FV_BITPOS
                              936 HW_ICLFORCE1R_S32FV_SETMASK             equ     1<<HW_ICLFORCE1R_S32FV_BITPOS
                              937 HW_ICLFORCE1R_S33FV_SETMASK             equ     1<<HW_ICLFORCE1R_S33FV_BITPOS
                              939 HW_ICLFORCE1R_S24FV_CLRMASK             equ     ~HW_ICLFORCE1R_S24FV_SETMASK
                              940 HW_ICLFORCE1R_S25FV_CLRMASK             equ     ~HW_ICLFORCE1R_S25FV_SETMASK
                              941 HW_ICLFORCE1R_S26FV_CLRMASK             equ     ~HW_ICLFORCE1R_S26FV_SETMASK
                              942 HW_ICLFORCE1R_S27FV_CLRMASK             equ     ~HW_ICLFORCE1R_S27FV_SETMASK
                              943 HW_ICLFORCE1R_S28FV_CLRMASK             equ     ~HW_ICLFORCE1R_S28FV_SETMASK
                              944 HW_ICLFORCE1R_S29FV_CLRMASK             equ     ~HW_ICLFORCE1R_S29FV_SETMASK
                              945 HW_ICLFORCE1R_S30FV_CLRMASK             equ     ~HW_ICLFORCE1R_S30FV_SETMASK
                              946 HW_ICLFORCE1R_S31FV_CLRMASK             equ     ~HW_ICLFORCE1R_S31FV_SETMASK
                              947 HW_ICLFORCE1R_S32FV_CLRMASK             equ     ~HW_ICLFORCE1R_S32FV_SETMASK
                              948 HW_ICLFORCE1R_S33FV_CLRMASK             equ     ~HW_ICLFORCE1R_S33FV_SETMASK
                              951 ;///////////////////////////////////////////////////////////////////////////////
                              952 ;  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                              953 ;C Insert
                              954 ;typedef union               /* Interrupt Collector Force Enable 0 Register      */
                              955 ;{
                              956 ;    struct {
                              957 ;        int S0FE        :1;
                              958 ;        int S1FE        :1;
                              959 ;        int S2FE        :1;
                              960 ;        int S3FE        :1;
                              961 ;        int S4FE        :1;
                              962 ;        int S5FE        :1;
                              963 ;        int S6FE        :1;
                              964 ;        int S7FE        :1;
                              965 ;        int S8FE        :1;
                              966 ;        int S9FE        :1;
                              967 ;        int S10FE       :1;
                              968 ;        int S11FE       :1;
                              969 ;        int S12FE       :1;
                              970 ;        int S13FE       :1;
                              971 ;        int S14FE       :1;
                              972 ;        int S15FE       :1;
                              973 ;        int S16FE       :1;
                              974 ;        int S17FE       :1;
                              975 ;        int S18FE       :1;
                              976 ;        int S19FE       :1;
                              977 ;        int S20FE       :1;
                              978 ;        int S21FE       :1;
                              979 ;        int S22FE       :1;
                              980 ;        int S23FE       :1;
                              981 ;    } B;
                              982 ;    int I;
                              983 ;} iclfenable0_type;
                              984 ;#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                              985 ;endC
                              987 HW_ICLFENABLE0R_S0FE_BITPOS             equ     0
                              988 HW_ICLFENABLE0R_S1FE_BITPOS             equ     1
                              989 HW_ICLFENABLE0R_S2FE_BITPOS             equ     2
                              990 HW_ICLFENABLE0R_S3FE_BITPOS             equ     3
                              991 HW_ICLFENABLE0R_S4FE_BITPOS             equ     4
                              992 HW_ICLFENABLE0R_S5FE_BITPOS             equ     5
                              993 HW_ICLFENABLE0R_S6FE_BITPOS             equ     6
                              994 HW_ICLFENABLE0R_S7FE_BITPOS             equ     7
                              995 HW_ICLFENABLE0R_S8FE_BITPOS             equ     8
                              996 HW_ICLFENABLE0R_S9FE_BITPOS             equ     9
                              997 HW_ICLFENABLE0R_S10FE_BITPOS            equ     10
                              998 HW_ICLFENABLE0R_S11FE_BITPOS            equ     11
                              999 HW_ICLFENABLE0R_S12FE_BITPOS            equ     12
                             1000 HW_ICLFENABLE0R_S13FE_BITPOS            equ     13
                             1001 HW_ICLFENABLE0R_S14FE_BITPOS            equ     14
                             1002 HW_ICLFENABLE0R_S15FE_BITPOS            equ     15
                             1003 HW_ICLFENABLE0R_S16FE_BITPOS            equ     16
                             1004 HW_ICLFENABLE0R_S17FE_BITPOS            equ     17
                             1005 HW_ICLFENABLE0R_S18FE_BITPOS            equ     18
                             1006 HW_ICLFENABLE0R_S19FE_BITPOS            equ     19
                             1007 HW_ICLFENABLE0R_S20FE_BITPOS            equ     20
                             1008 HW_ICLFENABLE0R_S21FE_BITPOS            equ     21
                             1009 HW_ICLFENABLE0R_S22FE_BITPOS            equ     22
                             1010 HW_ICLFENABLE0R_S23FE_BITPOS            equ     23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1012 HW_ICLFENABLE0R_S0FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             1013 HW_ICLFENABLE0R_S1FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             1014 HW_ICLFENABLE0R_S2FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             1015 HW_ICLFENABLE0R_S3FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             1016 HW_ICLFENABLE0R_S4FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             1017 HW_ICLFENABLE0R_S5FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             1018 HW_ICLFENABLE0R_S6FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             1019 HW_ICLFENABLE0R_S7FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             1020 HW_ICLFENABLE0R_S8FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             1021 HW_ICLFENABLE0R_S9FE_SETMASK            equ     1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             1022 HW_ICLFENABLE0R_S10FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             1023 HW_ICLFENABLE0R_S11FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             1024 HW_ICLFENABLE0R_S12FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             1025 HW_ICLFENABLE0R_S13FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             1026 HW_ICLFENABLE0R_S14FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             1027 HW_ICLFENABLE0R_S15FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             1028 HW_ICLFENABLE0R_S16FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             1029 HW_ICLFENABLE0R_S17FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             1030 HW_ICLFENABLE0R_S18FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             1031 HW_ICLFENABLE0R_S19FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             1032 HW_ICLFENABLE0R_S20FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             1033 HW_ICLFENABLE0R_S21FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             1034 HW_ICLFENABLE0R_S22FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             1035 HW_ICLFENABLE0R_S23FE_SETMASK           equ     1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             1037 HW_ICLFENABLE0R_S0FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S0FE_SETMASK
                             1038 HW_ICLFENABLE0R_S1FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S1FE_SETMASK
                             1039 HW_ICLFENABLE0R_S2FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S2FE_SETMASK
                             1040 HW_ICLFENABLE0R_S3FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S3FE_SETMASK
                             1041 HW_ICLFENABLE0R_S4FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S4FE_SETMASK
                             1042 HW_ICLFENABLE0R_S5FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S5FE_SETMASK
                             1043 HW_ICLFENABLE0R_S6FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S6FE_SETMASK
                             1044 HW_ICLFENABLE0R_S7FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S7FE_SETMASK
                             1045 HW_ICLFENABLE0R_S8FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S8FE_SETMASK
                             1046 HW_ICLFENABLE0R_S9FE_CLRMASK            equ     ~HW_ICLFENABLE0R_S9FE_SETMASK
                             1047 HW_ICLFENABLE0R_S10FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S10FE_SETMASK
                             1048 HW_ICLFENABLE0R_S11FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S11FE_SETMASK
                             1049 HW_ICLFENABLE0R_S12FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S12FE_SETMASK
                             1050 HW_ICLFENABLE0R_S13FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S13FE_SETMASK
                             1051 HW_ICLFENABLE0R_S14FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S14FE_SETMASK
                             1052 HW_ICLFENABLE0R_S15FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S15FE_SETMASK
                             1053 HW_ICLFENABLE0R_S16FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S16FE_SETMASK
                             1054 HW_ICLFENABLE0R_S17FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S17FE_SETMASK
                             1055 HW_ICLFENABLE0R_S18FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S18FE_SETMASK
                             1056 HW_ICLFENABLE0R_S19FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S19FE_SETMASK
                             1057 HW_ICLFENABLE0R_S20FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S20FE_SETMASK
                             1058 HW_ICLFENABLE0R_S21FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S21FE_SETMASK
                             1059 HW_ICLFENABLE0R_S22FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S22FE_SETMASK
                             1060 HW_ICLFENABLE0R_S23FE_CLRMASK           equ     ~HW_ICLFENABLE0R_S23FE_SETMASK
                             1063 ;///////////////////////////////////////////////////////////////////////////////
                             1064 ;  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             1065 ;C Insert
                             1066 ;typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             1067 ;{
                             1068 ;    struct {
                             1069 ;        int S24FE       :1;
                             1070 ;        int S25FE       :1;
                             1071 ;        int S26FE       :1;
                             1072 ;        int S27FE       :1;
                             1073 ;        int S28FE       :1;
                             1074 ;        int S29FE       :1;
                             1075 ;        int S30FE       :1;
                             1076 ;        int S31FE       :1;
                             1077 ;        int S32FE       :1;
                             1078 ;        int S33FE       :1;
                             1079 ;    } B;
                             1080 ;    int I;
                             1081 ;} iclfenable1_type;
                             1082 ;#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                             1083 ;endC
                             1084 HW_ICLFENABLE1R_S24FE_BITPOS            equ     0
                             1085 HW_ICLFENABLE1R_S25FE_BITPOS            equ     1
                             1086 HW_ICLFENABLE1R_S26FE_BITPOS            equ     2
                             1087 HW_ICLFENABLE1R_S27FE_BITPOS            equ     3
                             1088 HW_ICLFENABLE1R_S28FE_BITPOS            equ     4
                             1089 HW_ICLFENABLE1R_S29FE_BITPOS            equ     5
                             1090 HW_ICLFENABLE1R_S30FE_BITPOS            equ     6
                             1091 HW_ICLFENABLE1R_S31FE_BITPOS            equ     7
                             1092 HW_ICLFENABLE1R_S32FE_BITPOS            equ     8
                             1093 HW_ICLFENABLE1R_S33FE_BITPOS            equ     9
                             1095 HW_ICLFENABLE1R_S24FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             1096 HW_ICLFENABLE1R_S25FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             1097 HW_ICLFENABLE1R_S26FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             1098 HW_ICLFENABLE1R_S27FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             1099 HW_ICLFENABLE1R_S28FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             1100 HW_ICLFENABLE1R_S29FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             1101 HW_ICLFENABLE1R_S30FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             1102 HW_ICLFENABLE1R_S31FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             1103 HW_ICLFENABLE1R_S32FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             1104 HW_ICLFENABLE1R_S33FE_SETMASK           equ     1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             1106 HW_ICLFENABLE1R_S24FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S24FE_SETMASK
                             1107 HW_ICLFENABLE1R_S25FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S25FE_SETMASK
                             1108 HW_ICLFENABLE1R_S26FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S26FE_SETMASK
                             1109 HW_ICLFENABLE1R_S27FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S27FE_SETMASK
                             1110 HW_ICLFENABLE1R_S28FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S28FE_SETMASK
                             1111 HW_ICLFENABLE1R_S29FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S29FE_SETMASK
                             1112 HW_ICLFENABLE1R_S30FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S30FE_SETMASK
                             1113 HW_ICLFENABLE1R_S31FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S31FE_SETMASK
                             1114 HW_ICLFENABLE1R_S32FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S32FE_SETMASK
                             1115 HW_ICLFENABLE1R_S33FE_CLRMASK           equ     ~HW_ICLFENABLE1R_S33FE_SETMASK
                             1118 ;///////////////////////////////////////////////////////////////////////////////
                             1119 ;  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             1120 ;C Insert
                             1121 ;typedef union               /* Interrupt Collector Observation Register 0       */
                             1122 ;{
                             1123 ;    struct {
                             1124 ;        unsigned RQ     :7;
                             1125 ;        unsigned IVA    :7;
                             1126 ;        unsigned IVB    :7;
                             1127 ;    } B;
                             1128 ;    int I;
                             1129 ;} iclobsvz0_type;
                             1130 ;#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                             1131 ;endC
                             1133 HW_ICLOBSVZ0R_RQ_BITPOS                 equ     0
                             1134 HW_ICLOBSVZ0R_IVA_BITPOS                equ     7
                             1135 HW_ICLOBSVZ0R_IVB_BITPOS                equ     14
                             1137 HW_ICLOBSVZ0R_RQ_SETMASK                equ     $3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             1138 HW_ICLOBSVZ0R_IVA_SETMASK               equ     $3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             1139 HW_ICLOBSVZ0R_IVB_SETMASK               equ     $3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             1141 HW_ICLOBSVZ0R_RQ_CLRMASK                equ     ~HW_ICLOBSVZ0R_RQ_SETMASK
                             1142 HW_ICLOBSVZ0R_IVA_CLRMASK               equ     ~HW_ICLOBSVZ0R_IVA_SETMASK
                             1143 HW_ICLOBSVZ0R_IVB_CLRMASK               equ     ~HW_ICLOBSVZ0R_IVB_SETMASK
                             1146 ;///////////////////////////////////////////////////////////////////////////////
                             1147 ;  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             1148 HW_ICL1BSVZ0R_IVC_BITPOS                equ     0
                             1149 HW_ICL1BSVZ0R_IVD_BITPOS                equ     7
                             1151 HW_ICL1BSVZ0R_IVC_SETMASK               equ     $3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             1152 HW_ICL1BSVZ0R_IVD_SETMASK               equ     $3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             1154 HW_ICL1BSVZ0R_IVC_CLRMASK               equ     ~HW_ICL1BSVZ0R_IVC_SETMASK
                             1155 HW_ICL1BSVZ0R_IVD_CLRMASK               equ     ~HW_ICL1BSVZ0R_IVD_SETMASK
                             1160 ;///////////////////////////////////////////////////////////////////////////////
                             1161 ;  Interrupt Vectors
                             1162 ;///////////////////////////////////////////////////////////////////////////////
                             1163 HW_IVECRESET                            equ     $0000           ; Reset Vector
                             1164 HW_IVECSTERR                            equ     $0002           ; Stack Error
                             1165 HW_IVECTRAC                             equ     $0004           ; Trace
                             1166 HW_IVECSWI                              equ     $0006           ; SWI
                             1167 HW_IVECIRQA                             equ     $0008           ; ~IRQA
                             1168 HW_IVECIRQB                             equ     $000A           ; ~IRQB - BROWNOUT
                             1169 HW_IVECERROR                            equ     $000C           ; Fatal Error
                             1170 HW_IVECSPI                              equ     $000E           ; SPI
                             1171 HW_IVECI2STXDE                          equ     $0010           ; I2S TX Data Empty
                             1172 HW_IVECI2STXUF                          equ     $0012           ; I2S TX Underflow
                             1173 HW_IVECI2SRXDF                          equ     $0014           ; I2S RX Data Full
                             1174 HW_IVECI2SRXOF                          equ     $0016           ; I2S RX Overflow
                             1175 ;                                       equ     $0018           ; Error, nothing vectors here
                             1176 ;                                       equ     $001A           ; Error, nothing vectors here
                             1177 ;                                       equ     $001C           ; Error, nothing vectors here
                             1178 ;                                       equ     $001E           ; Non-Maskable Interrupt
                             1179 HW_IVECGPIO1                            equ     $0020           ; GPIO1
                             1180 HW_IVECGPIO2                            equ     $0022           ; GPIO2
                             1181 HW_IVECGPIO0                            equ     $0024           ; GPIO0
                             1182 HW_IVECTIMER0                           equ     $0026           ; TIMER0
                             1183 HW_IVECTIMER1                           equ     $0028           ; TIMER1
                             1184 HW_IVECTIMER2                           equ     $002A           ; TIMER2
                             1185 ;                                       equ     $002C           ; Error, nothing vectors here
                             1186 ;                                       equ     $002E           ; Error, nothing vectors here
                             1187 HW_IVECI2CRXDR                          equ     $0030           ; I2C RX Data Ready
                             1188 HW_IVECI2CRXOF                          equ     $0032           ; I2C RX Overflow
                             1189 HW_IVECI2CTXDE                          equ     $0034           ; I2C TX Data Empty
                             1190 HW_IVECI2CTXUF                          equ     $0036           ; I2C TX Underflow
                             1191 HW_IVECILI                              equ     $0038           ; Illegal Instruction
                             1192 ;                                       equ     $003A           ; Error, nothing vectors here
                             1193 HW_IVECDACE                             equ     $003C           ; DAC Empty ISR (DAC Request to Fill Buffer)
                             1194 HW_IVECDACUF                            equ     $003E           ; DAC Underflow ISR
                             1195 ;                                       equ     $0040           ; Error, nothing vectors here
                             1196 HW_IVECADCF                             equ     $0042           ; ADC Full ISR
                             1197 HW_IVECADCOF                            equ     $0044           ; ADC Overflow ISR
                             1198 ;                                       equ     $0046           ; Error, nothing vectors here
                             1199 HW_IVECTIMER3                           equ     $0048           ; TIMER3
                             1200 HW_IVECGPIO3                            equ     $004A           ; GPIO3
                             1201 HW_IVECSDRAM                            equ     $004C           ; SDRAM
                             1202 ;                                       equ     $004E           ; Error, nothing vectors here
                             1203 HW_IVECVDD5VCONN                        equ     $0050           ; 5 volt power connected
                             1204 HW_IVECUSBCTLR                          equ     $0052           ; USB Controller
                             1205 HW_IVECUSBWAKEUP                        equ     $0054           ; USB Wakeup 
                             1206 HW_IVECVDD5VDISC                        equ     $0056           ; 5 volt power disconnected
                             1207 HW_IVECESPI                             equ     $0058           ; enhanced SPI
                             1208 HW_IVECFILCO                            equ     $005A           ; filter coprocessor
                             1209 HW_IVECLRADC1                           equ     $005C           ; low res ADC #1
                             1210 HW_IVECRTCALARM                         equ     $005E           ; real time clock alarm
                             1211 HW_IVECLRADC2                           equ     $0060           ; low res ADC #2
                             1212 HW_IVECHWECC                            equ     $0062           ; flash hardware ECC
                             1213 ;                                       equ     $0064           ; Error, nothing vectors here
                             1214 HW_IVECCDSYNC                           equ     $0066           ; CDSYNC Interrupt
                             1215 HW_IVECCDSYNCEX                         equ     $0068           ; CDSYNC Exception
                             1216 HW_IVECRS                               equ     $006A           ; RS
                             1217 ;                                       equ     $006C           ; Error, nothing vectors here
                             1218 HW_IVECFD                               equ     $006E           ; Flash Done ISR
                             1219 HW_IVECCF                               equ     $0070           ; CompactFlash ISR
                             1220 HW_IVECSMTO                             equ     $0072           ; SmartMedia Timeout ISR
                             1221 HW_IVECSMIP                             equ     $0074           ; SmartMedia Invalid Programming
                             1222 HW_IVECCFNC                             equ     $0076           ; CompactFlash No Card ISR
                             1223 HW_IVECCFSC                             equ     $0078           ; CompactFlash Status Change ISR
                             1224 ;                                       equ     $007A           ; Error, nothing vectors here
                             1225 ;                                       equ     $007C           ; Error, nothing vectors here
                             1226 HW_IVECCDI                              equ     $007E           ; CDI
                             1228 ;C Insert
                             1229 ;/////////////////////////////////////////////////////////////////////////////////
                             1230 ;//  Interrupt Vectors
                             1231 ;/////////////////////////////////////////////////////////////////////////////////
                             1232 ;// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             1235 ;#define VECTOR(address,isr) ;    (*(volatile int _P *)(address))=0x0BF080; ;    (*(volatile int _P *)(address+1))=(isr)
                             1236 ;
                             1237 ;endC    
                             1239 ;///////////////////////////////////////////////////////////////////////////////
                             1240 ;  Interrupt Priority Register (HW_IPR) Bit Positions
                             1241 HW_IPR_IRQA_BITPOS                      equ     0
                             1242 HW_IPR_IRQA_ET_BITPOS                   equ     2
                             1243 HW_IPR_IRQB_BITPOS                      equ     3
                             1244 HW_IPR_IRQB_ET_BITPOS                   equ     5
                             1245 HW_IPR_L0P_BITPOS                       equ     10
                             1246 HW_IPR_L1P_BITPOS                       equ     12
                             1247 HW_IPR_L2P_BITPOS                       equ     14
                             1248 HW_IPR_L3P_BITPOS                       equ     16
                             1249 HW_IPR_L4P_BITPOS                       equ     18
                             1250 HW_IPR_L5P_BITPOS                       equ     20
                             1251 HW_IPR_L6P_BITPOS                       equ     22
                             1253 HW_IPR_LP_0_SETMASK                     equ     0   ; Interrupt Disabled
                             1254 HW_IPR_LP_1_SETMASK                     equ     1   ; Interrupt Priority Level 0
                             1255 HW_IPR_LP_2_SETMASK                     equ     2   ; Interrupt Priority Level 1
                             1256 HW_IPR_LP_3_SETMASK                     equ     3   ; Interrupt Priority Level 2
                             1258 HW_IPR_IRQA_SETMASK                     equ     3<<HW_IPR_IRQA_BITPOS
                             1259 HW_IPR_IRQA_ET_SETMASK                  equ     1<<HW_IPR_IRQA_ET_BITPOS
                             1260 HW_IPR_IRQB_SETMASK                     equ     3<<HW_IPR_IRQB_BITPOS
                             1261 HW_IPR_IRQB_ET_SETMASK                  equ     1<<HW_IPR_IRQB_ET_BITPOS
                             1262 HW_IPR_L0P_SETMASK                      equ     3<<HW_IPR_L0P_BITPOS
                             1263 HW_IPR_L1P_SETMASK                      equ     3<<HW_IPR_L1P_BITPOS
                             1264 HW_IPR_L2P_SETMASK                      equ     3<<HW_IPR_L2P_BITPOS
                             1265 HW_IPR_L3P_SETMASK                      equ     3<<HW_IPR_L3P_BITPOS
                             1266 HW_IPR_L4P_SETMASK                      equ     3<<HW_IPR_L4P_BITPOS
                             1267 HW_IPR_L5P_SETMASK                      equ     3<<HW_IPR_L5P_BITPOS
                             1268 HW_IPR_L6P_SETMASK                      equ     3<<HW_IPR_L6P_BITPOS
                             1270 HW_IPR_IRQA_CLRMASK                     equ     ~HW_IPR_IRQA_SETMASK
                             1271 HW_IPR_IRQA_ET_CLRMASK                  equ     ~HW_IPR_IRQA_ET_SETMASK
                             1272 HW_IPR_IRQB_CLRMASK                     equ     ~HW_IPR_IRQB_SETMASK
                             1273 HW_IPR_IRQB_ET_CLRMASK                  equ     ~HW_IPR_IRQB_ET_SETMASK
                             1274 HW_IPR_L0P_CLRMASK                      equ     ~HW_IPR_L0P_SETMASK
                             1275 HW_IPR_L1P_CLRMASK                      equ     ~HW_IPR_L1P_SETMASK
                             1276 HW_IPR_L2P_CLRMASK                      equ     ~HW_IPR_L2P_SETMASK
                             1277 HW_IPR_L3P_CLRMASK                      equ     ~HW_IPR_L3P_SETMASK
                             1278 HW_IPR_L4P_CLRMASK                      equ     ~HW_IPR_L4P_SETMASK
                             1279 HW_IPR_L5P_CLRMASK                      equ     ~HW_IPR_L5P_SETMASK
                             1280 HW_IPR_L6P_CLRMASK                      equ     ~HW_IPR_L6P_SETMASK
                             1282 ;C Insert
                             1283 ;// Interrupt Priority register
                             1284 ;typedef union               
                             1285 ;{
                             1286 ;    struct {
                             1287 ;        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             1288 ;        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1289 ;        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             1290 ;        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             1291 ;        int                 :4; /* Reserved */
                             1292 ;        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             1293 ;        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             1294 ;        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             1295 ;        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             1296 ;        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             1297 ;        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             1298 ;        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             1299 ;    } B;
                             1300 ;
                             1301 ;    int I;
                             1302 ;
                             1303 ;} ipr_type;
                             1304 ;#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             1305 ;endc
                             1307  ;*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             1308  ;
                             1309  ; The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             1310  ; to update the actual files. Only the defines needed to build SDK2.400 were added.
                             1312 HW_IPR_L1P0_BITPOS          equ     12
                             1313 HW_IPR_L2P0_BITPOS          equ     14
                             1314 HW_IPR_L3P0_BITPOS          equ     16
                             1315 HW_IPR_L6P0_BITPOS          equ     22
                             1317 ;///////////////////////////////////////////////////////////////////////////////
                             1318 ;  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             1319 HW_ICLSTEERR_SS_1                         equ     0
                             1320 HW_ICLSTEERR_SS_2                         equ     1
                             1321 HW_ICLSTEERR_SS_3                         equ     2
                             1322 HW_ICLSTEERR_SS_6                         equ     3
                               31         include "regslradc.inc" 
                                3 regslradcinc            equ         1
                                5 ;C insert
                                6 ;#include "types.h"
                                7 ;endc
                                8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               10 ;   SYSTEM STMP Registers 
                               11 ;  Last Edited 6.26.2003 M. Henson
                               12 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               14 HW_LRADC_BASEADDR             equ     ($FA20)
                               16 ;ASM Only
                               18 HW_BATT_CTRL                equ     (HW_LRADC_BASEADDR)
                               19 HW_BATT_THRSH               equ     (HW_LRADC_BASEADDR+1)
                               20 HW_BATT_RESULT              equ     (HW_LRADC_BASEADDR+2)
                               21 HW_LRADC1_CTRL              equ     (HW_LRADC_BASEADDR+3)
                               22 HW_LRADC1_THRSH             equ     (HW_LRADC_BASEADDR+4)
                               23 HW_LRADC1_RESULT            equ     (HW_LRADC_BASEADDR+5)
                               24 HW_LRADC2_CTRL_CTRL         equ     (HW_LRADC_BASEADDR+6)
                               25 HW_LRADC2_THRSH             equ     (HW_LRADC_BASEADDR+7)
                               26 HW_LRADC2_RESULT            equ     (HW_LRADC_BASEADDR+8)
                               28 ;endasm
                               30  
                               31 ;///////////////////////////////////////////////////////////////////////////////
                               32 ;  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                               33 HW_BATT_CTRL_INPUT_OFFSET_WIDTH           equ     (7)
                               34 HW_BATT_CTRL_RSVD0_WIDTH                  equ     (1)
                               35 HW_BATT_CTRL_HALF_CMP_PWR_WIDTH           equ     (1)
                               36 HW_BATT_CTRL_INPUT_DIV2_WIDTH             equ     (1)
                               37 HW_BATT_CTRL_CLEAR_WIDTH                  equ     (1)
                               38 HW_BATT_CTRL_PWD_WIDTH                    equ     (1)
                               39 HW_BATT_CTRL_CLK_DIV_WIDTH                equ     (2)
                               40 HW_BATT_CTRL_RSVD1_WIDTH                  equ     (2)
                               41 HW_BATT_CTRL_REF_VAL_WIDTH                equ     (2)
                               42 HW_BATT_CTRL_RSVD2_WIDTH                  equ     (2)
                               43 HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH                  equ     (1)
                               44 HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH                  equ     (1)
                               45 HW_BATT_CTRL_POLARITY_EVENT0_WIDTH                equ     (1)
                               46 HW_BATT_CTRL_POLARITY_EVENT1_WIDTH                equ     (1)
                               48 HW_BATT_CTRL_INPUT_OFFSET_BITPOS          equ     (0)
                               49 HW_BATT_CTRL_HALF_CMP_PWR_BITPOS          equ     (8)
                               50 HW_BATT_CTRL_INPUT_DIV2_BITPOS            equ     (9)
                               51 HW_BATT_CTRL_CLEAR_BITPOS                 equ     (10)
                               52 HW_BATT_CTRL_PWD_BITPOS                   equ     (11)
                               53 HW_BATT_CTRL_CLK_DIV_BITPOS               equ     (12)
                               54 HW_BATT_CTRL_REF_VAL_BITPOS               equ     (16)
                               56 HW_BATT_CTRL_INPUT_OFFSET_SETMASK         equ     (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                               57 HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         equ     (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                               58 HW_BATT_CTRL_INPUT_DIV2_SETMASK           equ     (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                               59 HW_BATT_CTRL_CLEAR_SETMASK                equ     (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                               60 HW_BATT_CTRL_PWD_SETMASK                  equ     (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                               61 HW_BATT_CTRL_CLK_DIV_SETMASK              equ     (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                               62 HW_BATT_CTRL_REF_VAL_SETMASK              equ     (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                               64 HW_BATT_CTRL_INPUT_OFFSET_CLRMASK         equ    (~HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                               65 HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK         equ    (~HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                               66 HW_BATT_CTRL_INPUT_DIV2_CLRMASK           equ    (~HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                               67 HW_BATT_CTRL_CLEAR_CLRMASK                equ    (~HW_BATT_CTRL_CLEAR_SETMASK) 
                               68 HW_BATT_CTRL_PWD_CLRMASK                  equ    (~HW_BATT_CTRL_PWD_SETMASK) 
                               69 HW_BATT_CTRL_CLK_DIV_CLRMASK              equ    (~HW_BATT_CTRL_CLK_DIV_SETMASK)     
                               70 HW_BATT_CTRL_REF_VAL_CLRMASK              equ    (~HW_BATT_CTRL_REF_VAL_SETMASK)
                               72 ;C insert
                               73 ;typedef union               
                               74 ;{
                               75 ;    struct {
                               76 ;        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                               77 ;        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                               78 ;        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                               79 ;        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                               80 ;        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                               81 ;        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                               82 ;        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                               83 ;        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                               84 ;        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                               85 ;        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                               86 ;                unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                               87 ;                unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                               88 ;            unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                               89 ;                unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                               90 ;    } B;
                               91 ;   unsigned int I;
                               92 ;       unsigned int U;
                               93 ;} lradc_ctrl_type;
                               95 ;#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                               97 ;endc
                               99  
                              100 ;///////////////////////////////////////////////////////////////////////////////
                              101 ;  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                              102 HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH        equ     (9)
                              103 HW_BATT_THRSH_RSVD0_WIDTH                   equ     (3)
                              104 HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH        equ     (9)
                              105 HW_BATT_THRSH_RSVD1_WIDTH                   equ     (3)
                              107 HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS       equ     (0)
                              108 HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS       equ     (12)
                              110 HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK      equ     (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                              111 HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK      equ     (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                              113 HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK      equ    (~HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                              114 HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK      equ    (~HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                              116  
                              117 ;C insert
                              118 ;typedef union               
                              119 ;{
                              120 ;    struct {
                              121 ;        unsigned int THRESHOLD_EVENT0          : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                              122 ;        unsigned int RSVD0                 : HW_BATT_THRSH_RSVD0_WIDTH;
                              123 ;        unsigned int THRESHOLD_EVENT1          : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                              124 ;        unsigned int RSVD1                     : HW_BATT_THRSH_RSVD1_WIDTH;
                              125 ;    } B;
                              126 ;    unsigned int I;
                              127 ;} lradc_thrsh_type;
                              129 ;#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                              131 ;endc
                              134 ;///////////////////////////////////////////////////////////////////////////////
                              135 ;  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                              136 HW_BATT_RESULT_EQ_EVENT1_WIDTH                                   equ     (1)
                              137 HW_BATT_RESULT_EQ_EVENT0_WIDTH                                   equ     (1)
                              138 HW_BATT_RESULT_GT_EVENT1_WIDTH                                   equ     (1)
                              139 HW_BATT_RESULT_GT_EVENT0_WIDTH                                   equ     (1)
                              140 HW_BATT_RESULT_LT_EVENT1_WIDTH                                   equ     (1)
                              141 HW_BATT_RESULT_LT_EVENT0_WIDTH                                   equ     (1)
                              142 HW_BATT_RESULT_RSVD0_WIDTH                           equ     (2)
                              143 HW_BATT_RESULT_DATA_OUT_WIDTH                        equ     (9)
                              144 HW_BATT_RESULT_RSVD1_WIDTH                           equ     (3)
                              145 HW_BATT_RESULT_IRQ_EVENT0_WIDTH                                          equ     (1)
                              146 HW_BATT_RESULT_IRQ_EVENT1_WIDTH                                          equ     (1)
                              147 HW_BATT_RESULT_RSVD2_WIDTH                           equ     (2)
                              149 HW_BATT_RESULT_EQ_EVENT1_BITPOS                                  equ     (0)
                              150 HW_BATT_RESULT_EQ_EVENT0_BITPOS                                  equ     (1)
                              151 HW_BATT_RESULT_GT_EVENT1_BITPOS                                  equ     (2)
                              152 HW_BATT_RESULT_GT_EVENT0_BITPOS                                  equ     (3)
                              153 HW_BATT_RESULT_LT_EVENT1_BITPOS                                  equ     (4)
                              154 HW_BATT_RESULT_LT_EVENT0_BITPOS                                  equ     (5)
                              155 HW_BATT_RESULT_RSVD0_BITPOS                                                      equ     (6)
                              156 HW_BATT_RESULT_DATA_OUT_BITPOS                       equ     (8)
                              157 HW_BATT_RESULT_RSVD1_BITPOS                                                      equ     (17)
                              158 HW_BATT_RESULT_IRQ_EVENT0_BITPOS                                         equ     (20)
                              159 HW_BATT_RESULT_IRQ_EVENT1_BITPOS                                         equ     (21)
                              160 HW_BATT_RESULT_RSVD2_BITPOS                          equ     (22)
                              164 HW_BATT_RESULT_EQ_EVENT1_SETMASK                                 equ     (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                              165 HW_BATT_RESULT_EQ_EVENT0_SETMASK                                 equ     (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                              166 HW_BATT_RESULT_GT_EVENT1_SETMASK                                 equ     (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                              167 HW_BATT_RESULT_GT_EVENT0_SETMASK                                 equ     (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                              168 HW_BATT_RESULT_LT_EVENT1_SETMASK                                 equ     (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                              169 HW_BATT_RESULT_LT_EVENT0_SETMASK                                 equ     (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                              170 HW_BATT_RESULT_RSVD0_SETMASK                         equ     (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                              171 HW_BATT_RESULT_DATA_OUT_SETMASK                      equ     (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                              172 HW_BATT_RESULT_RSVD1_SETMASK                         equ     (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                              173 HW_BATT_RESULT_IRQ_EVENT0_SETMASK                                        equ     (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                              174 HW_BATT_RESULT_IRQ_EVENT1_SETMASK                                        equ     (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                              175 HW_BATT_RESULT_RSVD2_SETMASK                         equ     (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                              178 HW_BATT_RESULT_EQ_EVENT1_CLRMASK                                 equ     (~HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                              179 HW_BATT_RESULT_EQ_EVENT0_CLRMASK                                 equ     (~HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                              180 HW_BATT_RESULT_GT_EVENT1_CLRMASK                                 equ     (~HW_BATT_RESULT_GT_EVENT1_SETMASK)
                              181 HW_BATT_RESULT_GT_EVENT0_CLRMASK                                 equ     (~HW_BATT_RESULT_GT_EVENT0_SETMASK)
                              182 HW_BATT_RESULT_LT_EVENT1_CLRMASK                                 equ     (~HW_BATT_RESULT_LT_EVENT1_SETMASK)
                              183 HW_BATT_RESULT_LT_EVENT0_CLRMASK                                 equ     (~HW_BATT_RESULT_LT_EVENT0_SETMASK)
                              184 HW_BATT_RESULT_RSVD0_CLRMASK                         equ     (~HW_BATT_RESULT_RSVD0_SETMASK)
                              185 HW_BATT_RESULT_DATA_OUT_CLRMASK                      equ     (~HW_BATT_RESULT_DATA_OUT_SETMASK)
                              186 HW_BATT_RESULT_RSVD1_CLRMASK                         equ     (~HW_BATT_RESULT_RSVD1_SETMASK)
                              187 HW_BATT_RESULT_IRQ_EVENT0_CLRMASK                                        equ     (~HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                              188 HW_BATT_RESULT_IRQ_EVENT1_CLRMASK                                        equ     (~HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                              189 HW_BATT_RESULT_RSVD2_CLRMASK                         equ     (~HW_BATT_RESULT_RSVD2_SETMASK)
                              191 ;C insert
                              192 ;typedef union               
                              193 ;{
                              194 ;    struct {
                              195 ;        unsigned int EQ_EVENT1                 : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                              196 ;        unsigned int EQ_EVENT0                 : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                              197 ;        unsigned int GT_EVENT1                 : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                              198 ;        unsigned int GT_EVENT0                 : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                              199 ;        unsigned int LT_EVENT1                 : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                              200 ;        unsigned int LT_EVENT0                 : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                              201 ;        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                              202 ;        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                              203 ;        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                              204 ;                unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                              205 ;                unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                              206 ;                unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                              207 ;    } B;
                              208 ;    unsigned int I;
                              209 ;} lradc_result_type;
                              211 ;#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                              213 ;endc
                              215  
                              217 ;///////////////////////////////////////////////////////////////////////////////
                              218 ;  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                              219 HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH           equ     (7)
                              220 HW_LRADC1_CTRL_RSVD0_WIDTH                  equ     (1)
                              221 HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH           equ     (1)
                              222 HW_LRADC1_CTRL_INPUT_DIV2_WIDTH             equ     (1)
                              223 HW_LRADC1_CTRL_CLEAR_WIDTH                  equ     (1)
                              224 HW_LRADC1_CTRL_PWD_WIDTH                    equ     (1)
                              225 HW_LRADC1_CTRL_CLK_DIV_WIDTH                equ     (2)
                              226 HW_LRADC1_CTRL_RSVD1_WIDTH                  equ     (2)
                              227 HW_LRADC1_CTRL_REF_VAL_WIDTH                equ     (2)
                              228 HW_LRADC1_CTRL_RSVD2_WIDTH                  equ     (6)
                              230 HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS          equ     (0)
                              231 HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS          equ     (8)
                              232 HW_LRADC1_CTRL_INPUT_DIV2_BITPOS            equ     (9)
                              233 HW_LRADC1_CTRL_CLEAR_BITPOS                 equ     (10)
                              234 HW_LRADC1_CTRL_PWD_BITPOS                   equ     (11)
                              235 HW_LRADC1_CTRL_CLK_DIV_BITPOS               equ     (12)
                              236 HW_LRADC1_CTRL_REF_VAL_BITPOS               equ     (16)
                              238 HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK         equ     (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                              239 HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK         equ     (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                              240 HW_LRADC1_CTRL_INPUT_DIV2_SETMASK           equ     (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                              241 HW_LRADC1_CTRL_CLEAR_SETMASK                equ     (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                              242 HW_LRADC1_CTRL_PWD_SETMASK                  equ     (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                              243 HW_LRADC1_CTRL_CLK_DIV_SETMASK              equ     (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                              244 HW_LRADC1_CTRL_REF_VAL_SETMASK              equ     (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                              246 HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK         equ    (~HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                              247 HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK         equ    (~HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                              248 HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK           equ    (~HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                              249 HW_LRADC1_CTRL_CLEAR_CLRMASK                equ    (~HW_LRADC1_CTRL_CLEAR_SETMASK) 
                              250 HW_LRADC1_CTRL_PWD_CLRMASK                  equ    (~HW_LRADC1_CTRL_PWD_SETMASK) 
                              251 HW_LRADC1_CTRL_CLK_DIV_CLRMASK              equ    (~HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                              252 HW_LRADC1_CTRL_REF_VAL_CLRMASK              equ    (~HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                              254 ;C Insert
                              255 ;#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                              257 ;endc
                              259  
                              261 ;///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                              262 ;  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                              263 HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH         equ     (9)
                              264 HW_LRADC1_THRSH_RSVD0_WIDTH                 equ     (3)
                              265 HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH         equ     (9)
                              266 HW_LRADC1_THRSH_RSVD1_WIDTH                 equ     (3)
                              268 HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS        equ     (0)
                              269 HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS        equ     (12)
                              271 HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK       equ     (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                              272 HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK       equ     (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                              274 HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK       equ    (~HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                              275 HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK       equ    (~HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                              277 ;C insert
                              278 ;#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                              279 ;endc
                              281 ;///////////////////////////////////////////////////////////////////////////////
                              282 ;  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                              283 HW_LRADC1_RESULT_EQ_EVENT1_WIDTH                equ     (1)
                              284 HW_LRADC1_RESULT_EQ_EVENT0_WIDTH                equ     (1)
                              285 HW_LRADC1_RESULT_GT_EVENT1_WIDTH                equ     (1)
                              286 HW_LRADC1_RESULT_GT_EVENT0_WIDTH                equ     (1)
                              287 HW_LRADC1_RESULT_LT_EVENT1_WIDTH                equ     (1)
                              288 HW_LRADC1_RESULT_LT_EVENT0_WIDTH                equ     (1)
                              289 HW_LRADC1_RESULT_RSVD0_WIDTH                equ     (2)
                              290 HW_LRADC1_RESULT_DATA_OUT_WIDTH             equ     (9)
                              291 HW_LRADC1_RESULT_RSVD1_WIDTH                equ     (3)
                              292 HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH                       equ             (1)
                              293 HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH                       equ     (1)
                              294 HW_LRADC1_RESULT_RSVD2_WIDTH                equ     (2)
                              296 HW_LRADC1_RESULT_EQ_EVENT1_BITPOS           equ     (0)
                              297 HW_LRADC1_RESULT_EQ_EVENT0_BITPOS           equ     (1)
                              298 HW_LRADC1_RESULT_GT_EVENT1_BITPOS               equ     (2)
                              299 HW_LRADC1_RESULT_GT_EVENT0_BITPOS               equ     (3)
                              300 HW_LRADC1_RESULT_LT_EVENT1_BITPOS               equ     (4)
                              301 HW_LRADC1_RESULT_LT_EVENT0_BITPOS               equ     (5)
                              302 HW_LRADC1_RESULT_RSVD0_BITPOS                           equ     (6)
                              303 HW_LRADC1_RESULT_DATA_OUT_BITPOS            equ     (8)
                              304 HW_LRADC1_RESULT_RSVD1_BITPOS                           equ             (17)
                              305 HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS                      equ             (20)
                              306 HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS                      equ     (21)
                              307 HW_LRADC1_RESULT_RSVD2_BITPOS               equ     (22)
                              309 HW_LRADC1_RESULT_EQ_EVENT1_SETMASK          equ     (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                              310 HW_LRADC1_RESULT_EQ_EVENT0_SETMASK          equ     (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                              311 HW_LRADC1_RESULT_GT_EVENT1_SETMASK          equ     (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                              312 HW_LRADC1_RESULT_GT_EVENT0_SETMASK          equ     (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                              313 HW_LRADC1_RESULT_LT_EVENT1_SETMASK          equ     (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                              314 HW_LRADC1_RESULT_LT_EVENT0_SETMASK          equ     (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                              315 HW_LRADC1_RESULT_RSVD0_SETMASK              equ     (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                              316 HW_LRADC1_RESULT_DATA_OUT_SETMASK           equ     (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                              317 HW_LRADC1_RESULT_RSVD1_SETMASK              equ     (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                              318 HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK                     equ     (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                              319 HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK                     equ     (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                              320 HW_LRADC1_RESULT_RSVD2_SETMASK              equ     (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                              323 HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK          equ     (~HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                              324 HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK          equ     (~HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                              325 HW_LRADC1_RESULT_GT_EVENT1_CLRMASK          equ     (~HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                              326 HW_LRADC1_RESULT_GT_EVENT0_CLRMASK          equ     (~HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                              327 HW_LRADC1_RESULT_LT_EVENT1_CLRMASK          equ     (~HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                              328 HW_LRADC1_RESULT_LT_EVENT0_CLRMASK          equ     (~HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                              329 HW_LRADC1_RESULT_RSVD0_CLRMASK              equ     (~HW_LRADC1_RESULT_RSVD0_SETMASK)
                              330 HW_LRADC1_RESULT_DATA_OUT_CLRMASK           equ     (~HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                              331 HW_LRADC1_RESULT_RSVD1_CLRMASK              equ     (~HW_LRADC1_RESULT_RSVD1_SETMASK)
                              332 HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK                     equ     (~HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                              333 HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK                     equ     (~HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                              334 HW_LRADC1_RESULT_RSVD2_CLRMASK              equ     (~HW_LRADC1_RESULT_RSVD2_SETMASK)
                              336 ;C insert
                              337 ;#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                              338 ;endc
                              340 ;///////////////////////////////////////////////////////////////////////////////
                              341 ;  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                              342 HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH           equ     (7)
                              343 HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH                  equ     (1)
                              344 HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH           equ     (1)
                              345 HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH             equ     (1)
                              346 HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH                  equ     (1)
                              347 HW_LRADC2_CTRL_CTRL_PWD_WIDTH                    equ     (1)
                              348 HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH                equ     (2)
                              349 HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH                  equ     (2)
                              350 HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH                equ     (2)
                              351 HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH                  equ     (6)
                              353 HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS          equ     (0)
                              354 HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS          equ     (8)
                              355 HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS            equ     (9)
                              356 HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS                 equ     (10)
                              357 HW_LRADC2_CTRL_CTRL_PWD_BITPOS                   equ     (11)
                              358 HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS               equ     (12)
                              359 HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS               equ     (16)
                              361 HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK         equ     (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                              362 HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK         equ     (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                              363 HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK           equ     (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                              364 HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK                equ     (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                              365 HW_LRADC2_CTRL_CTRL_PWD_SETMASK                  equ     (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                              366 HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK              equ     (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                              367 HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK              equ     (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                              369 HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK         equ    (~HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                              370 HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK         equ    (~HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                              371 HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK           equ    (~HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                              372 HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK                equ    (~HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                              373 HW_LRADC2_CTRL_CTRL_PWD_CLRMASK                  equ    (~HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                              374 HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK              equ    (~HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                              375 HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK              equ    (~HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                              378 ;C insert
                              379 ;#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                              380 ;endc
                              382  
                              384 ;///////////////////////////////////////////////////////////////////////////////
                              385 ;  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                              386 HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH           equ     (9)
                              387 HW_LRADC2_THRSH_RSVD0_WIDTH                   equ     (3)
                              388 HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH           equ     (9)
                              389 HW_LRADC2_THRSH_RSVD1_WIDTH                   equ     (3)
                              391 HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS          equ     (0)
                              392 HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS          equ     (12)
                              394 HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK         equ     (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                              395 HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK         equ     (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                              397 HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK         equ    (~HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                              398 HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK         equ    (~HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                              400 ;C insert
                              401 ;#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                              402 ;endc
                              404  
                              406 ;///////////////////////////////////////////////////////////////////////////////
                              407 ;  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                              408 HW_LRADC2_RESULT_EQ_EVENT1_WIDTH            equ     (1)
                              409 HW_LRADC2_RESULT_EQ_EVENT0_WIDTH                equ     (1)
                              410 HW_LRADC2_RESULT_GT_EVENT1_WIDTH                equ     (1)
                              411 HW_LRADC2_RESULT_GT_EVENT0_WIDTH                equ     (1)
                              412 HW_LRADC2_RESULT_LT_EVENT1_WIDTH                equ     (1)
                              413 HW_LRADC2_RESULT_LT_EVENT0_WIDTH                equ     (1)
                              414 HW_LRADC2_RESULT_RSVD0_WIDTH                equ     (2)
                              415 HW_LRADC2_RESULT_DATA_OUT_WIDTH             equ     (9)
                              416 HW_LRADC2_RESULT_RSVD1_WIDTH                equ     (3)
                              417 HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH                       equ     (1)
                              418 HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH                   equ     (1)
                              419 HW_LRADC2_RESULT_RSVD2_WIDTH                equ         (2)
                              421 HW_LRADC2_RESULT_EQ_EVENT1_BITPOS           equ     (0)
                              422 HW_LRADC2_RESULT_EQ_EVENT0_BITPOS               equ     (1)
                              423 HW_LRADC2_RESULT_GT_EVENT1_BITPOS               equ     (2)
                              424 HW_LRADC2_RESULT_GT_EVENT0_BITPOS               equ     (3)
                              425 HW_LRADC2_RESULT_LT_EVENT1_BITPOS               equ     (4)
                              426 HW_LRADC2_RESULT_LT_EVENT0_BITPOS               equ     (5)
                              427 HW_LRADC2_RESULT_RSVD0_BITPOS                           equ     (6)
                              428 HW_LRADC2_RESULT_DATA_OUT_BITPOS            equ     (8)
                              429 HW_LRADC2_RESULT_RSVD1_BITPOS                           equ             (17)
                              430 HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS                      equ             (20)
                              431 HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS                      equ     (21)
                              432 HW_LRADC2_RESULT_RSVD2_BITPOS               equ     (22)
                              434 HW_LRADC2_RESULT_EQ_EVENT1_SETMASK          equ     (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                              435 HW_LRADC2_RESULT_EQ_EVENT0_SETMASK          equ     (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                              436 HW_LRADC2_RESULT_GT_EVENT1_SETMASK          equ     (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                              437 HW_LRADC2_RESULT_GT_EVENT0_SETMASK          equ     (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                              438 HW_LRADC2_RESULT_LT_EVENT1_SETMASK          equ     (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                              439 HW_LRADC2_RESULT_LT_EVENT0_SETMASK          equ     (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                              440 HW_LRADC2_RESULT_RSVD0_SETMASK              equ     (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                              441 HW_LRADC2_RESULT_DATA_OUT_SETMASK           equ     (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                              442 HW_LRADC2_RESULT_RSVD1_SETMASK              equ     (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                              443 HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK                     equ     (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                              444 HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK                     equ     (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                              445 HW_LRADC2_RESULT_RSVD2_SETMASK              equ     (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                              447 HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK          equ     (~HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                              448 HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK          equ     (~HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                              449 HW_LRADC2_RESULT_GT_EVENT1_CLRMASK          equ     (~HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                              450 HW_LRADC2_RESULT_GT_EVENT0_CLRMASK          equ     (~HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                              451 HW_LRADC2_RESULT_LT_EVENT1_CLRMASK          equ     (~HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                              452 HW_LRADC2_RESULT_LT_EVENT0_CLRMASK          equ     (~HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                              453 HW_LRADC2_RESULT_RSVD0_CLRMASK              equ     (~HW_LRADC2_RESULT_RSVD0_SETMASK)
                              454 HW_LRADC2_RESULT_DATA_OUT_CLRMASK           equ     (~HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                              455 HW_LRADC2_RESULT_RSVD1_CLRMASK              equ     (~HW_LRADC2_RESULT_RSVD1_SETMASK)
                              456 HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK                     equ     (~HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                              457 HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK                     equ     (~HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                              458 HW_LRADC2_RESULT_RSVD2_CLRMASK              equ     (~HW_LRADC2_RESULT_RSVD2_SETMASK)
                              460 ;C insert
                              462 ;#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                              464 ;#define HW_LRADC_REF_0_SETMASK                 0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                              465 ;#define HW_LRADC_REF_1_SETMASK                 0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                              466 ;#define HW_LRADC_REF_2_SETMASK                 0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                              467 ;#define HW_LRADC_REF_3_SETMASK                 0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                              468 ;#define HW_LRADC_REF_4_SETMASK                 HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                              469 ;#define HW_LRADC_REF_5_SETMASK                 HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                              470 ;#define HW_LRADC_REF_6_SETMASK                 HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                              471 ;#define HW_LRADC_REF_7_SETMASK                 HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                              473 ;#define HW_LRADC_RES_REF_0                             80
                              474 ;#define HW_LRADC_RES_REF_1                             77
                              475 ;#define HW_LRADC_RES_REF_2                             100
                              476 ;#define HW_LRADC_RES_REF_3                             129
                              477 ;#define HW_LRADC_RES_REF_4                             160
                              478 ;#define HW_LRADC_RES_REF_5                             154
                              479 ;#define HW_LRADC_RES_REF_6                             200
                              480 ;#define HW_LRADC_RES_REF_7                             258
                              482 ;#define LRADC_HALF_POWER_SETMASK               HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                              484 ;// Translate the generic API enumerations into more meaningful labels for the implementation
                              485 ;#define REF_2700MV                     HW_LRADC_REF_0_SETMASK
                              486 ;#define REF_2600MV             HW_LRADC_REF_1_SETMASK
                              487 ;#define REF_2560MV             HW_LRADC_REF_2_SETMASK
                              488 ;#define REF_VDDIO              HW_LRADC_REF_3_SETMASK
                              489 ;#define REF_5400MV             HW_LRADC_REF_4_SETMASK
                              490 ;#define REF_5200MV             HW_LRADC_REF_5_SETMASK
                              491 ;#define REF_5120MV             HW_LRADC_REF_6_SETMASK
                              492 ;#define REF_VDDIOx2            HW_LRADC_REF_7_SETMASK
                              494 ;#define RES_REF_2700MV         HW_LRADC_RES_REF_0
                              495 ;#define RES_REF_2600MV         HW_LRADC_RES_REF_1
                              496 ;#define RES_REF_2560MV         HW_LRADC_RES_REF_2
                              497 ;#define RES_REF_VDDIO          HW_LRADC_RES_REF_3
                              498 ;#define RES_REF_5400MV         HW_LRADC_RES_REF_4
                              499 ;#define RES_REF_5200MV         HW_LRADC_RES_REF_5
                              500 ;#define RES_REF_5120MV         HW_LRADC_RES_REF_6
                              501 ;#define RES_REF_VDDIOx2        HW_LRADC_RES_REF_7
                              504 ;endc
                              506 ;Needed by button.asm
                              507 LOW_RES_ADC_BATT_READ_MASK equ $01FF00
                              508 LOW_RES_ADC_AUX_READ_MASK  equ $01FF00
                              509 LOW_RES_ADC_AUX2_READ_MASK equ $01FF00
                              511 HW_LRADC_CTRL_AUXADC_SETMASK equ 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                              514  
                               32         include "regspwm.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ; Filename: regspwm.inc
                                5 ; Description: Register definitions for PWM interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regspwminc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               40 ;   Pulse Width Modulator STMP Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                               41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 HW_PWM_BASEADDR             equ     ($FA31)
                               44 ;ASM Only
                               45 ;///////////////////////////////////////////////////////////////////////////////
                               46 ;  PWM Registers
                               47 ;///////////////////////////////////////////////////////////////////////////////
                               48 HW_PWM_CSR                  equ     HW_PWM_BASEADDR
                               49 HW_PWM_CH0AR                equ     HW_PWM_BASEADDR+$1
                               50 HW_PWM_CH0BR                equ     HW_PWM_BASEADDR+$2
                               51 HW_PWM_CH1AR                equ     HW_PWM_BASEADDR+$3
                               52 HW_PWM_CH1BR                equ     HW_PWM_BASEADDR+$4
                               53 HW_PWM_CH2AR                equ     HW_PWM_BASEADDR+$5
                               54 HW_PWM_CH2BR                equ     HW_PWM_BASEADDR+$6
                               55 HW_PWM_CH3AR                equ     HW_PWM_BASEADDR+$7
                               56 HW_PWM_CH3BR                equ     HW_PWM_BASEADDR+$8
                               57 ;endasm
                               59 ;///////////////////////////////////////////////////////////////////////////////
                               60 ;  PWM CSR register (HW_PWM_CSR) Bit Definitions
                               61 HW_PWM_CSR_PWM0_EN_BITPOS              equ     (0)
                               62 HW_PWM_CSR_PWM1_EN_BITPOS              equ     (1) 
                               63 HW_PWM_CSR_PWM2_EN_BITPOS              equ     (2)
                               64 HW_PWM_CSR_PWM3_EN_BITPOS              equ     (3)
                               65 HW_PWM_CSR_CDIV_BITPOS                 equ     (8)
                               66 HW_PWM_CSR_MSTR_EN_BITPOS              equ     (23)
                               68 HW_PWM_CSR_PWM0_EN_WIDTH               equ     (1)
                               69 HW_PWM_CSR_PWM1_EN_WIDTH               equ     (1) 
                               70 HW_PWM_CSR_PWM2_EN_WIDTH               equ     (1)
                               71 HW_PWM_CSR_PWM3_EN_WIDTH               equ     (1)
                               72 HW_PWM_CSR_CDIV_WIDTH                  equ     (2)
                               73 HW_PWM_CSR_MSTR_EN_WIDTH               equ     (1)
                               75 HW_PWM_CSR_PWM0_EN_SETMASK             equ     (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                               76 HW_PWM_CSR_PWM1_EN_SETMASK             equ     (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                               77 HW_PWM_CSR_PWM2_EN_SETMASK             equ     (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                               78 HW_PWM_CSR_PWM3_EN_SETMASK             equ     (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                               79 HW_PWM_CSR_CDIV_SETMASK                equ     (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                               80 HW_PWM_CSR_MSTR_EN_SETMASK             equ     (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                               82 HW_PWM_CSR_PWM0_EN_CLRMASK             equ     (~HW_PWM_CSR_PWM0_EN_SETMASK)
                               83 HW_PWM_CSR_PWM1_EN_CLRMASK             equ     (~HW_PWM_CSR_PWM1_EN_SETMASK)
                               84 HW_PWM_CSR_PWM2_EN_CLRMASK             equ     (~HW_PWM_CSR_PWM2_EN_SETMASK)
                               85 HW_PWM_CSR_PWM3_EN_CLRMASK             equ     (~HW_PWM_CSR_PWM3_EN_SETMASK)
                               86 HW_PWM_CSR_CDIV_CLRMASK                equ     (~HW_PWM_CSR_CDIV_SETMASK)   
                               87 HW_PWM_CSR_MSTR_EN_CLRMASK             equ     (~HW_PWM_CSR_MSTR_EN_SETMASK)
                               89 ;C insert
                               90 ;typedef union               
                               91 ;{
                               92 ;    struct {
                               93 ;        int PWM0_EN                    :1;
                               94 ;        int PWM1_EN                    :1;
                               95 ;        int PWM2_EN                    :1;
                               96 ;        int PWM3_EN                    :1;
                               97 ;        int RSVD0                      :4;
                               98 ;        int CDIV                       :2;
                               99 ;        int RSVD1                      :13;
                              100 ;        int MSTR_EN                    :1;
                              101 ;    } B;
                              102 ;    int I;
                              103 ;} pwmcsr_type;
                              104 ;#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                              105 ;endc
                              107 ;///////////////////////////////////////////////////////////////////////////////
                              108 ;  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                              109 HW_PWM_CH0AR_ACTIVE_BITPOS             equ   (0)
                              110 HW_PWM_CH0AR_INACTIVE_BITPOS           equ   (12)
                              112 HW_PWM_CH0AR_ACTIVE_WIDTH              equ   (12)
                              113 HW_PWM_CH0AR_INACTIVE_WIDTH            equ   (12)
                              115 HW_PWM_CH0AR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                              116 HW_PWM_CH0AR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                              118 HW_PWM_CH0AR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH0AR_ACTIVE_SETMASK)
                              119 HW_PWM_CH0AR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH0AR_INACTIVE_SETMASK)
                              121 ;///////////////////////////////////////////////////////////////////////////////
                              122 ;  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                              123 HW_PWM_CH0BR_ACTIVE_BITPOS             equ   (0)
                              124 HW_PWM_CH0BR_INACTIVE_BITPOS           equ   (12)
                              126 HW_PWM_CH0BR_ACTIVE_WIDTH              equ   (12)
                              127 HW_PWM_CH0BR_INACTIVE_WIDTH            equ   (12)
                              129 HW_PWM_CH0BR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                              130 HW_PWM_CH0BR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                              132 HW_PWM_CH0BR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH0BR_ACTIVE_SETMASK)
                              133 HW_PWM_CH0BR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH0BR_INACTIVE_SETMASK)
                              135 ;///////////////////////////////////////////////////////////////////////////////
                              136 ;  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                              137 HW_PWM_CH1AR_ACTIVE_BITPOS             equ   (0)
                              138 HW_PWM_CH1AR_INACTIVE_BITPOS           equ   (12)
                              140 HW_PWM_CH1AR_ACTIVE_WIDTH              equ   (12)
                              141 HW_PWM_CH1AR_INACTIVE_WIDTH            equ   (12)
                              143 HW_PWM_CH1AR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                              144 HW_PWM_CH1AR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                              146 HW_PWM_CH1AR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH1AR_ACTIVE_SETMASK)
                              147 HW_PWM_CH1AR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH1AR_INACTIVE_SETMASK)
                              149 ;///////////////////////////////////////////////////////////////////////////////
                              150 ;  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                              151 HW_PWM_CH1BR_ACTIVE_BITPOS             equ   (0)
                              152 HW_PWM_CH1BR_INACTIVE_BITPOS           equ   (12)
                              154 HW_PWM_CH1BR_ACTIVE_WIDTH              equ   (12)
                              155 HW_PWM_CH1BR_INACTIVE_WIDTH            equ   (12)
                              157 HW_PWM_CH1BR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                              158 HW_PWM_CH1BR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                              160 HW_PWM_CH1BR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH1BR_ACTIVE_SETMASK)
                              161 HW_PWM_CH1BR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH1BR_INACTIVE_SETMASK)
                              163 ;///////////////////////////////////////////////////////////////////////////////
                              164 ;  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                              165 HW_PWM_CH2AR_ACTIVE_BITPOS             equ   (0)
                              166 HW_PWM_CH2AR_INACTIVE_BITPOS           equ   (12)
                              168 HW_PWM_CH2AR_ACTIVE_WIDTH              equ   (12)
                              169 HW_PWM_CH2AR_INACTIVE_WIDTH            equ   (12)
                              171 HW_PWM_CH2AR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                              172 HW_PWM_CH2AR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                              174 HW_PWM_CH2AR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH2AR_ACTIVE_SETMASK)
                              175 HW_PWM_CH2AR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH2AR_INACTIVE_SETMASK)
                              177 ;///////////////////////////////////////////////////////////////////////////////
                              178 ;  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                              179 HW_PWM_CH2BR_ACTIVE_BITPOS             equ   (0)
                              180 HW_PWM_CH2BR_INACTIVE_BITPOS           equ   (12)
                              182 HW_PWM_CH2BR_ACTIVE_WIDTH              equ   (12)
                              183 HW_PWM_CH2BR_INACTIVE_WIDTH            equ   (12)
                              185 HW_PWM_CH2BR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                              186 HW_PWM_CH2BR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                              188 HW_PWM_CH2BR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH2BR_ACTIVE_SETMASK)
                              189 HW_PWM_CH2BR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH2BR_INACTIVE_SETMASK)
                              191 ;///////////////////////////////////////////////////////////////////////////////
                              192 ;  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                              193 HW_PWM_CH3AR_ACTIVE_BITPOS             equ   (0)
                              194 HW_PWM_CH3AR_INACTIVE_BITPOS           equ   (12)
                              196 HW_PWM_CH3AR_ACTIVE_WIDTH              equ   (12)
                              197 HW_PWM_CH3AR_INACTIVE_WIDTH            equ   (12)
                              199 HW_PWM_CH3AR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                              200 HW_PWM_CH3AR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                              202 HW_PWM_CH3AR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH3AR_ACTIVE_SETMASK)
                              203 HW_PWM_CH3AR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH3AR_INACTIVE_SETMASK)
                              205 ;///////////////////////////////////////////////////////////////////////////////
                              206 ;  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                              207 HW_PWM_CH3BR_ACTIVE_BITPOS             equ   (0)
                              208 HW_PWM_CH3BR_INACTIVE_BITPOS           equ   (12)
                              210 HW_PWM_CH3BR_ACTIVE_WIDTH              equ   (12)
                              211 HW_PWM_CH3BR_INACTIVE_WIDTH            equ   (12)
                              213 HW_PWM_CH3BR_ACTIVE_SETMASK            equ   (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                              214 HW_PWM_CH3BR_INACTIVE_SETMASK          equ   (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                              216 HW_PWM_CH3BR_ACTIVE_CLRMASK            equ   (~HW_PWM_CH3BR_ACTIVE_SETMASK)
                              217 HW_PWM_CH3BR_INACTIVE_CLRMASK          equ   (~HW_PWM_CH3BR_INACTIVE_SETMASK)
                              219 ;C insert
                              220 ;typedef union               
                              221 ;{
                              222 ;    struct {
                              223 ;       int ACTIVE                    :12;
                              224 ;       int INACTIVE                  :12;
                              225 ;    } B;
                              226 ;    int I;
                              227 ;} pwmchan_type;
                              228 ;#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                              229 ;#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                              230 ;#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                              231 ;#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                              232 ;#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                              233 ;#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                              234 ;#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                              235 ;#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                              236 ;endc
                               33         include "regsrevision.inc"
                                2 __HW_REVR equ 1
                                4 ;ASM Only
                                5 HW_REVR                                                                 equ     $FA02
                                6 ;endasm
                                8 HW_GLUE_BASEADDR                        equ     $FA00
                               10 HW_REVR_RMN_BITPOS                      equ     (0)
                               11 HW_REVR_DCDCMODE_BITPOS                 equ     (5)
                               12 HW_REVR_RMJ_BITPOS                      equ     (8)
                               14 HW_REVR_RMN_WIDTH                       equ     (5)
                               15 HW_REVR_DCDCMODE_WIDTH                  equ     (3)
                               17 HW_REVR_DCDCMODE_SETMASK                equ     (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                               19 HW_REVR_DCDCMODE_CLRMASK                equ     (~HW_REVR_DCDCMODE_SETMASK)
                               22 ;///////////////////////////////////////////////////////////////////////////////
                               23 ;  Revision Register (HW_REVR) bitfields and values. (read only)
                               24 ;  June15 2004: C struct updated to be correct: 
                               25 ;   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                               26 ;C Insert
                               27 ;typedef union               
                               28 ;{
                               29 ;    struct {
                               30 ;        unsigned RMN    :5;     //Minor Revision
                               31 ;        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                               32 ;           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                               33 ;           #define DCDCMODE_6_RESERVED                                 6
                               34 ;           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                               35 ;           #define DCDCMODE_4_RESERVED                                 4
                               36 ;           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                               37 ;           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                               38 ;           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                               39 ;           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                               40 ;           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                               41 ;        unsigned RMJ    :16;    //Major Revision
                               42 ;    } B;
                               43 ;
                               44 ;    int I;
                               45 ;
                               46 ;} revr_type;
                               47 ;#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                               48 ;endC
                               50 HW_REVR_DCDCMODE_B0_BITPOS                              equ     5
                               51 HW_REVR_DCDCMODE_B1_BITPOS                              equ     6
                               52 HW_REVR_DCDCMODE_B2_BITPOS                              equ     7
                               54 HW_REVR_DCDCMODE_BUCK_MASK_POS          equ     HW_REVR_DCDCMODE_B2_BITPOS
                               55 ; 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                               56 HW_REVR_DCDC_MODE_SETMASK               equ     $0000E0
                               57 HW_REVR_RMN_SETMASK                     equ     $FF<<HW_REVR_RMN_BITPOS
                               58 HW_REVR_RMJ_SETMASK                     equ     $FFFF<<HW_REVR_RMJ_BITPOS
                               60 HW_REVR_RMN_CLRMASK                     equ     ~HW_REVR_RMN_SETMASK
                               61 HW_REVR_RMJ_CLRMASK                     equ     ~HW_REVR_RMJ_SETMASK
                               34         include "regsrtc.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2004
                                3 ;
                                4 ; Filename: regsrtc.inc
                                5 ; Description: Register definitions for RTC interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regsrtcinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               41 ;   RTC STMP Registers 
                               42 ;   Edited 2/26/2002 J. Ferrara
                               43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               45 HW_RTC_BASEADDR             equ     ($F500)
                               47  
                               49 ;ASM Only
                               51  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                               52 HW_RTC_CSR                   equ     (HW_RTC_BASEADDR+0)
                               53 HW_RTC_MSECONDS0             equ     (HW_RTC_BASEADDR+1)
                               54 HW_RTC_MSECONDS1             equ     (HW_RTC_BASEADDR+2)
                               55 HW_RTC_WATCHDOG              equ     (HW_RTC_BASEADDR+3)
                               56 HW_RTC_ALARM0                equ     (HW_RTC_BASEADDR+4)
                               57 HW_RTC_ALARM1                equ     (HW_RTC_BASEADDR+5)
                               58 HW_RTC_DIVIDE                equ     (HW_RTC_BASEADDR+6)
                               59 HW_RTC_PERSIST0              equ     (HW_RTC_BASEADDR+7)
                               60 HW_RTC_PERSIST1              equ     (HW_RTC_BASEADDR+8)
                               62 ;endasm
                               63  
                               65 ;///////////////////////////////////////////////////////////////////////////////
                               67 ;//  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                               69 HW_RTC_CSR_ALARMINTEN_BITPOS            equ     (0)
                               70 HW_RTC_CSR_ALARMINT_BITPOS              equ     (1)
                               71 HW_RTC_CSR_WATCHDOGEN_BITPOS            equ     (2)
                               72 HW_RTC_CSR_RSVD0_BITPOS                 equ     (3)
                               73 HW_RTC_CSR_STALEREGS_BITPOS             equ     (4)
                               74 HW_RTC_CSR_RSVD1_BITPOS                 equ     (9)
                               75 HW_RTC_CSR_NEWREGS_BITPOS                               equ             (12)
                               76 HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS       equ     (12)
                               77 HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS               equ             (13)
                               78 HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS             equ             (14)
                               79 HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS              equ             (15)
                               80 HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS              equ     (16)
                               81 HW_RTC_CSR_RSVD2_BITPOS                 equ     (17)
                               82 HW_RTC_CSR_FORCE_BITPOS                 equ     (20)
                               83 HW_RTC_CSR_RSVD3_BITPOS                 equ     (21)
                               84 HW_RTC_CSR_SFTRST_BITPOS                equ     (23)                                                                            
                               85 HW_RTC_CSR_ALARMINTEN_WIDTH             equ     (1)
                               86 HW_RTC_CSR_ALARMINT_WIDTH               equ     (1)
                               87 HW_RTC_CSR_WATCHDOGEN_WIDTH             equ     (1)
                               88 HW_RTC_CSR_RSVD0_WIDTH                  equ     (1)
                               89 HW_RTC_CSR_STALEREGS_WIDTH              equ     (5)
                               90 HW_RTC_CSR_RSVD1_WIDTH                  equ     (3)
                               91 HW_RTC_CSR_NEWREGS_WIDTH                                equ             (5)
                               92 HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH        equ     (1)
                               93 HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH                equ             (1)
                               94 HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH              equ             (1)
                               95 HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH               equ             (1)
                               96 HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH               equ     (1)
                               97 HW_RTC_CSR_RSVD2_WIDTH                  equ     (3)
                               98 HW_RTC_CSR_FORCE_WIDTH                  equ     (1)
                               99 HW_RTC_CSR_RSVD3_WIDTH                  equ     (2)
                              100 HW_RTC_CSR_SFTRST_WIDTH                 equ     (1)
                              102 HW_RTC_CSR_ALARMINT_SETMASK             equ     (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                              103 HW_RTC_CSR_ALARMINTEN_SETMASK           equ     (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                              104 HW_RTC_CSR_WATCHDOGEN_SETMASK           equ     (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                              105 HW_RTC_CSR_RSVD0_SETMASK                equ     (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                              106 HW_RTC_CSR_STALEREGS_SETMASK            equ     (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                              107 HW_RTC_CSR_RSVD1_SETMASK                equ     (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                              108 HW_RTC_CSR_NEWREGS_SETMASK              equ     (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                              109 HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK      equ             (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                              110 HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK              equ             (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                              111 HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK    equ             (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                              112 HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK             equ             (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                              113 HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK             equ     (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                              114 HW_RTC_CSR_RSVD2_SETMASK                equ     (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                              115 HW_RTC_CSR_FORCE_SETMASK                equ     (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                              116 HW_RTC_CSR_RSVD3_SETMASK                equ     (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                              117 HW_RTC_CSR_SFTRST_SETMASK               equ     (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                              119 HW_RTC_CSR_ALARMINTEN_CLRMASK            equ    (~HW_RTC_CSR_ALARMINTEN_SETMASK)
                              120 HW_RTC_CSR_ALARMINT_CLRMASK              equ    (~HW_RTC_CSR_ALARMINT_SETMASK)
                              121 HW_RTC_CSR_WATCHDOGEN_CLRMASK            equ    (~HW_RTC_CSR_WATCHDOGEN_SETMASK)
                              122 HW_RTC_CSR_RSVD0_CLRMASK                 equ    (~HW_RTC_CSR_RSVD0_SETMASK)
                              123 HW_RTC_CSR_STALEREGS_CLRMASK             equ    (~HW_RTC_CSR_STALEREGS_SETMASK)
                              124 HW_RTC_CSR_RSVD1_CLRMASK                 equ    (~HW_RTC_CSR_RSVD1_SETMASK)
                              125 HW_RTC_CSR_NEWREGS_CLRMASK               equ    (~HW_RTC_CSR_NEWREGS_SETMASK)
                              126 HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK       equ    (~HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                              127 HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK               equ    (~HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                              128 HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK     equ    (~HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                              129 HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK              equ    (~HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                              130 HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK              equ    (~HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                              132 HW_RTC_CSR_RSVD2_CLRMASK                 equ     (~HW_RTC_CSR_RSVD2_SETMASK)
                              133 HW_RTC_CSR_FORCE_CLRMASK                 equ     (~HW_RTC_CSR_FORCE_SETMASK)
                              134 HW_RTC_CSR_RSVD3_CLRMASK                 equ     (~HW_RTC_CSR_RSVD3_SETMASK)
                              135 HW_RTC_CSR_SFTRST_CLRMASK                equ     (~HW_RTC_CSR_SFTRST_SETMASK)
                              138 ;C insert
                              140 ;typedef union               
                              142 ;{
                              144 ;    struct {
                              145 ;        int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                              146 ;        int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                              147 ;        int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                              148 ;        int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                              149 ;        unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                              150 ;        int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                              151 ;        unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                              152 ;        int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                              153 ;        int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                              154 ;        int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                              155 ;        unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                              156 ;    } B;
                              158 ;    int I;
                              159 ;    unsigned int U;
                              161 ;} rtc_csr_type;
                              163  
                              165 ;#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                              167 ;endc
                              169 ;///////////////////////////////////////////////////////////////////////////////
                              171 ;  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                              173 HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS      equ     (0)
                              175 HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH       equ     (24)
                              177 HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK     equ     (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                              179 HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK     equ     (~HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                              180  
                              181 ;C insert
                              183 ;typedef union               
                              185 ;{
                              187 ;    struct {
                              188 ;        int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                              189 ;    } B;
                              191 ;    int I;
                              192 ;    unsigned int U;
                              194 ;} rtc_mseconds0_type;
                              196  
                              198 ;#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                              199 ;#define HW_RTCLOWR            HW_RTC_MSECONDS0
                              200 ;endc
                              201 ;///////////////////////////////////////////////////////////////////////////////
                              203 ;  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                              205 HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS      equ     (0)
                              207 HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH       equ     (24)
                              209 HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK     equ     (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                              211 HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK     equ     (~HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                              212  
                              213 ;C insert
                              215 ;typedef union               
                              217 ;{
                              219 ;    struct {
                              220 ;        int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                              221 ;    } B;
                              223 ;    int I;
                              224 ;    unsigned int U;
                              226 ;} rtc_mseconds1_type;
                              227  
                              229 ;#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                              230 ;#define HW_RTCUPR             HW_RTC_MSECONDS1
                              231 ;endc
                              233 HW_RTC_LOWER_OFFSET                     equ     1
                              234 HW_RTC_UP_OFFSET                        equ     2
                              236 ;ASM only
                              237 HW_RTCUPR                               equ     HW_RTC_BASEADDR+HW_RTC_UP_OFFSET
                              238 HW_RTCLOWR                              equ     HW_RTC_BASEADDR+HW_RTC_LOWER_OFFSET
                              239 HW_RTCUP                                equ     HW_RTCUPR
                              240 HW_RTCLOW                               equ     HW_RTCLOWR
                              242 HW_RTC_UPPER_SETMASK                    equ     $03ffff
                              243 HW_RTC_UPPER_CLRMASK                    equ     ~HW_RTC_UPPER_SETMASK
                              244 ;endasm
                              246 ;///////////////////////////////////////////////////////////////////////////////
                              248 ;  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                              250 HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS      equ     (0)
                              252 HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH       equ     (24)
                              254 HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK     equ     (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                              256 HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK     equ     (~HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                              257  
                              258 ;C insert
                              260 ;typedef union               
                              262 ;{
                              264 ;    struct {
                              265 ;        int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                              266 ;    } B;
                              268 ;    int I;
                              269 ;    unsigned int U;
                              271 ;} rtc_watchdog_type;
                              272  
                              274 ;#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                              275 ;endc
                              276 ;///////////////////////////////////////////////////////////////////////////////
                              278 ;  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                              280 HW_RTC_ALARM0_ALARMLOW_BITPOS      equ     (0)
                              282 HW_RTC_ALARM0_ALARMLOW_WIDTH       equ     (24)
                              284 HW_RTC_ALARM0_ALARMLOW_SETMASK     equ     (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                              286 HW_RTC_ALARM0_ALARMLOW_CLRMASK     equ     (~HW_RTC_ALARM0_ALARMLOW_SETMASK)
                              287  
                              288 ;C insert
                              290 ;typedef union               
                              292 ;{
                              294 ;    struct {
                              295 ;        int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                              296 ;    } B;
                              298 ;    int I;
                              299 ;    unsigned int U;
                              301 ;} rtc_alarm0_type;
                              303  
                              305 ;#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                              306 ;endc
                              307 ;///////////////////////////////////////////////////////////////////////////////
                              309 ;  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                              311 HW_RTC_ALARM1_ALARMHIGH_BITPOS      equ     (0)
                              313 HW_RTC_ALARM1_ALARMHIGH_WIDTH       equ     (24)
                              315 HW_RTC_ALARM1_ALARMHIGH_SETMASK     equ     (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                              317 HW_RTC_ALARM1_ALARMHIGH_CLRMASK     equ     (~HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                              318  
                              319 ;C insert
                              321 ;typedef union               
                              323 ;{
                              325 ;    struct {
                              326 ;        int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                              327 ;    } B;
                              329 ;    int I;
                              330 ;    unsigned int U;
                              332 ;} rtc_alarm1_type;
                              333  
                              335 ;#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                              337 ;endc
                              338 ;///////////////////////////////////////////////////////////////////////////////
                              340 ;  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                              342 HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS      equ     (0)
                              343 HW_RTC_XTALDIVIDE_RSVD0_BITPOS         equ     (16)
                              345 HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH       equ     (16)
                              346 HW_RTC_XTALDIVIDE_RSVD0_WIDTH          equ     (8)
                              348 HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK     equ     (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                              349 HW_RTC_XTALDIVIDE_RSVD0_SETMASK        equ     (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                              351 HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK     equ     (~HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                              352 HW_RTC_XTALDIVIDE_RSVD0_CLRMASK        equ     (~HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                              353  
                              354 ;C insert
                              356 ;typedef union               
                              358 ;{
                              360 ;    struct {
                              361 ;        int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                              362 ;        int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                              363 ;    } B;
                              365 ;    int I;
                              366 ;    unsigned int U;
                              368 ;} rtc_xtaldivide_type;
                              369  
                              371 ;#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                              372 ;endc
                              373 ;///////////////////////////////////////////////////////////////////////////////
                              375 ;  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                              377 HW_RTC_PERSISTENT0_ALARMEN_BITPOS        equ     (0)
                              378 HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS   equ     (1)
                              379 HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS      equ     (2)
                              380 HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS      equ     (3)
                              381 HW_RTC_PERSISTENT0_RSVD0_BITPOS          equ     (4)
                              383 HW_RTC_PERSISTENT0_ALARMEN_WIDTH         equ     (1)
                              384 HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH    equ     (1)
                              385 HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH       equ     (1)
                              386 HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH       equ     (1)
                              387 HW_RTC_PERSISTENT0_RSVD0_WIDTH           equ     (21)
                              389 HW_RTC_PERSISTENT0_ALARMEN_SETMASK       equ     (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                              390 HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK  equ     (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                              391 HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK     equ     (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                              392 HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK     equ     (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                              393 HW_RTC_PERSISTENT0_RSVD0_SETMASK         equ     (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                              395 HW_RTC_PERSISTENT0_ALARMEN_CLRMASK       equ     (~HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                              396 HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK  equ     (~HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                              397 HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK     equ     (~HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                              398 HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK     equ     (~HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                              399 HW_RTC_PERSISTENT0_RSVD0_CLRMASK         equ     (~HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                              400  
                              401 ;C insert
                              403 ;typedef union               
                              405 ;{
                              407 ;   struct {
                              408 ;      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                              409 ;          int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                              410 ;      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                              411 ;      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                              412 ;      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                              413 ;   } B;
                              415 ;    int I;
                              416 ;    unsigned int U;
                              418 ;} rtc_PERSISTENT0_type;
                              419  
                              421 ;#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                              422 ;endc
                              424 ;///////////////////////////////////////////////////////////////////////////////
                              426 ;  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                              428 HW_RTC_PERSISTENT1_RSVD0_BITPOS          equ     (0)
                              430 HW_RTC_PERSISTENT1_RSVD0_WIDTH           equ     (24)
                              432 HW_RTC_PERSISTENT1_RSVD0_SETMASK         equ     (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                              434 HW_RTC_PERSISTENT1_RSVD0_CLRMASK         equ     (~HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                              437 ;C insert
                              439 ;typedef union               
                              441 ;{
                              443 ;    struct {
                              444 ;        int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                              445 ;    } B;
                              447 ;    int I;
                              448 ;    unsigned int U;
                              450 ;} rtc_PERSISTENT1_type;
                              451  
                              452 ;#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                              453 ;endc
                              454  
                               35         include "regssdram.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;  File        : regssdram.inc
                                4 ;;  Description : Mixed Signal IP Register definition
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     SYSTEM
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               34 regssdraminc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 HW_SDRAM_BASEADDR                       equ     $F900
                               42 ;ASM Only
                               43 HW_SDRAM_CSR                            equ (HW_SDRAM_BASEADDR)     ; mask = $ffffff
                               44 HW_SDRAM_ADDR1                          equ (HW_SDRAM_BASEADDR+1)   ; mask = $ffffff
                               45 HW_SDRAM_ADDR2                          equ (HW_SDRAM_BASEADDR+2)   ; mask = $00000f
                               46 HW_SDRAM_SYSADDR                        equ (HW_SDRAM_BASEADDR+3)   ; mask = $00ffff
                               47 HW_SDRAM_SIZE                           equ (HW_SDRAM_BASEADDR+4)   ; mask = $03ffff
                               48 HW_SDRAM_TIMER1                         equ (HW_SDRAM_BASEADDR+5)   ; mask = $ffffff
                               49 HW_SDRAM_TIMER2                         equ (HW_SDRAM_BASEADDR+6)   ; mask = $0fffff
                               50 HW_SDRAM_BAR                            equ (HW_SDRAM_BASEADDR+7)   ; mask = $00ffff
                               51 HW_SDRAM_MR                             equ (HW_SDRAM_BASEADDR+8)   ; mask = $00ffff
                               52 HW_SDRAM_DBAR1                          equ (HW_SDRAM_BASEADDR+9)   ; mask = $ffffff
                               53 HW_SDRAM_DBAR2                          equ (HW_SDRAM_BASEADDR+10)  ; mask = $00000f
                               54 HW_SDRAM_DMR1                           equ (HW_SDRAM_BASEADDR+11)  ; mask = $ffffff
                               55 HW_SDRAM_DMR2                           equ (HW_SDRAM_BASEADDR+12)  ; mask = $00000f
                               56 HW_SDRAM_MODE                           equ (HW_SDRAM_BASEADDR+14)  ; mask = $001fff
                               57 HW_SDRAM_TYPE                           equ (HW_SDRAM_BASEADDR+15)  ; mask = $00000f
                               58 ;endasm
                               60 ;///////////////////////////////////////////////////////////////////////////////
                               61 ;  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                               62 HW_SDRAM_CSR_SDRAMEN_BITPOS             equ     0
                               63 HW_SDRAM_CSR_IE_BITPOS                  equ     1
                               64 HW_SDRAM_CSR_RNW_BITPOS                 equ     2
                               65 HW_SDRAM_CSR_KICK_BITPOS                equ     3
                               66 HW_SDRAM_CSR_LM_BITPOS                  equ     4
                               67 HW_SDRAM_CSR_ISTAT_BITPOS               equ     5
                               68 HW_SDRAM_CSR_PWDN_BITPOS                equ     6
                               69 HW_SDRAM_CSR_SBYTE_BITPOS               equ     8
                               70 HW_SDRAM_CSR_MEM_BITPOS                 equ     10
                               71 HW_SDRAM_CSR_BIGE_BITPOS                equ     12
                               72 HW_SDRAM_CSR_ASIZE_BITPOS               equ     13
                               73 HW_SDRAM_CSR_UKICK_BITPOS               equ     16
                               74 HW_SDRAM_CSR_DIV_BITPOS                 equ     17
                               75 HW_SDRAM_CSR_MULTI_BITPOS               equ     21
                               76 HW_SDRAM_CSR_SDRAM_BITPOS               equ     22
                               77 HW_SDRAM_CSR_SIGN_BITPOS                equ     23
                               79 HW_SDRAM_CSR_SDRAMEN_WIDTH              equ     1
                               80 HW_SDRAM_CSR_IE_WIDTH                   equ     1
                               81 HW_SDRAM_CSR_RNW_WIDTH                  equ     1
                               82 HW_SDRAM_CSR_KICK_WIDTH                 equ     1
                               83 HW_SDRAM_CSR_LM_WIDTH                   equ     1
                               84 HW_SDRAM_CSR_ISTAT_WIDTH                equ     1
                               85 HW_SDRAM_CSR_PWDN_WIDTH                 equ     1
                               86 HW_SDRAM_CSR_SBYTE_WIDTH                equ     2
                               87 HW_SDRAM_CSR_MEM_WIDTH                  equ     2
                               88 HW_SDRAM_CSR_BIGE_WIDTH                 equ     1
                               89 HW_SDRAM_CSR_ASIZE_WIDTH                equ     3
                               90 HW_SDRAM_CSR_UKICK_WIDTH                equ     1
                               91 HW_SDRAM_CSR_DIV_WIDTH                  equ     4
                               92 HW_SDRAM_CSR_MULTI_WIDTH                equ     1
                               93 HW_SDRAM_CSR_SDRAM_WIDTH                equ     1
                               94 HW_SDRAM_CSR_SIGN_WIDTH                 equ     1
                               96 HW_SDRAM_CSR_SDRAMEN_SETMASK            equ     (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                               97 HW_SDRAM_CSR_IE_SETMASK                 equ     (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                               98 HW_SDRAM_CSR_RNW_SETMASK                equ     (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                               99 HW_SDRAM_CSR_KICK_SETMASK               equ     (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                              100 HW_SDRAM_CSR_LM_SETMASK                 equ     (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                              101 HW_SDRAM_CSR_ISTAT_SETMASK              equ     (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                              102 HW_SDRAM_CSR_PWDN_SETMASK               equ     (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                              103 HW_SDRAM_CSR_SBYTE_SETMASK              equ     (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                              104 HW_SDRAM_CSR_MEM_SETMASK                equ     (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                              105 HW_SDRAM_CSR_BIGE_SETMASK               equ     (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                              106 HW_SDRAM_CSR_ASIZE_SETMASK              equ     (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                              107 HW_SDRAM_CSR_UKICK_SETMASK              equ     (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                              108 HW_SDRAM_CSR_DIV_SETMASK                equ     (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                              109 HW_SDRAM_CSR_MULTI_SETMASK              equ     (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                              110 HW_SDRAM_CSR_SDRAM_SETMASK              equ     (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                              111 HW_SDRAM_CSR_SIGN_SETMASK               equ     (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                              113 HW_SDRAM_CSR_SDRAMEN_CLRMASK            equ     ~HW_SDRAM_CSR_SDRAMEN_SETMASK
                              114 HW_SDRAM_CSR_IE_CLRMASK                 equ     ~HW_SDRAM_CSR_IE_SETMASK
                              115 HW_SDRAM_CSR_RNW_CLRMASK                equ     ~HW_SDRAM_CSR_RNW_SETMASK
                              116 HW_SDRAM_CSR_KICK_CLRMASK               equ     ~HW_SDRAM_CSR_KICK_SETMASK
                              117 HW_SDRAM_CSR_LM_CLRMASK                 equ     ~HW_SDRAM_CSR_LM_SETMASK
                              118 HW_SDRAM_CSR_ISTAT_CLRMASK              equ     ~HW_SDRAM_CSR_ISTAT_SETMASK
                              119 HW_SDRAM_CSR_PWDN_CLRMASK               equ     ~HW_SDRAM_CSR_PWDN_SETMASK
                              120 HW_SDRAM_CSR_SBYTE_CLRMASK              equ     ~HW_SDRAM_CSR_SBYTE_SETMASK
                              121 HW_SDRAM_CSR_MEM_CLRMASK                equ     ~HW_SDRAM_CSR_MEM_SETMASK
                              122 HW_SDRAM_CSR_BIGE_CLRMASK               equ     ~HW_SDRAM_CSR_BIGE_SETMASK
                              123 HW_SDRAM_CSR_ASIZE_CLRMASK              equ     ~HW_SDRAM_CSR_ASIZE_SETMASK
                              124 HW_SDRAM_CSR_UKICK_CLRMASK              equ     ~HW_SDRAM_CSR_UKICK_SETMASK
                              125 HW_SDRAM_CSR_DIV_CLRMASK                equ     ~HW_SDRAM_CSR_DIV_SETMASK
                              126 HW_SDRAM_CSR_MULTI_CLRMASK              equ     ~HW_SDRAM_CSR_MULTI_SETMASK
                              127 HW_SDRAM_CSR_SDRAM_CLRMASK              equ     ~HW_SDRAM_CSR_SDRAM_SETMASK
                              128 HW_SDRAM_CSR_SIGN_CLRMASK               equ     ~HW_SDRAM_CSR_SIGN_SETMASK
                              130 ;C insert
                              131 ;typedef union               
                              132 ;{
                              133 ;    struct {
                              134 ;        int SDRAMEN                     :1;
                              135 ;        int IE                          :1;
                              136 ;        int RNW                         :1;
                              137 ;        int KICK                        :1;
                              138 ;        int LM                          :1;
                              139 ;        int ISTAT                       :1;
                              140 ;        int PWDN                        :1;
                              141 ;        int RSVD                        :1;
                              142 ;        int SBYTE                       :2;
                              143 ;        int MEM                         :2;
                              144 ;        int BIGE                        :1;
                              145 ;        int ASIZE                       :3;
                              146 ;        int UKICK                       :1;
                              147 ;        int DIV                         :4;
                              148 ;        int MULTI                       :1;
                              149 ;        int SDRAM                       :1;
                              150 ;        int SIGN                        :1;
                              151 ;    } B;
                              152 ;    int I;
                              153 ;} sdramcsr_type;
                              155 ;#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                              156 ;#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                              157 ;#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                              158 ;#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                              159 ;#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                              160 ;#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                              161 ;#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                              162 ;#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                              163 ;#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                              164 ;#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                              165 ;#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                              166 ;endc
                              168 ;///////////////////////////////////////////////////////////////////////////////
                              169 ;  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                              170 HW_SDRAM_ADDR1_XA_BITPOS                 equ     0
                              172 HW_SDRAM_ADDR1_XA_SETMASK                equ     $FFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                              174 HW_SDRAM_ADDR1_XA_CLRMASK                equ     ~HW_SDRAM_ADDR1_XA_SETMASK
                              176 ;///////////////////////////////////////////////////////////////////////////////
                              177 ;  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                              178 HW_SDRAM_ADDR2_XA_BITPOS                 equ     0
                              180 HW_SDRAM_ADDR2_XA_SETMASK                equ     $1F<<HW_SDRAM_ADDR2_XA_BITPOS
                              182 HW_SDRAM_ADDR2_XA_CLRMASK                equ     ~HW_SDRAM_ADDR2_XA_SETMASK
                              184 ;///////////////////////////////////////////////////////////////////////////////
                              185 ;  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                              186 HW_SDRAM_SYSADDR_XA_BITPOS                 equ     0
                              188 HW_SDRAM_SYSADDR_XA_SETMASK                equ     $FFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                              190 HW_SDRAM_SYSADDR_XA_CLRMASK                equ     ~HW_SDRAM_SYSADDR_XA_SETMASK
                              192 ;///////////////////////////////////////////////////////////////////////////////
                              193 ;  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                              194 HW_SDRAM_SIZE_XA_BITPOS                 equ     0
                              196 HW_SDRAM_SIZE_XA_SETMASK                equ     $3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                              198 HW_SDRAM_SIZE_XA_CLRMASK                equ     ~HW_SDRAM_SIZE_XA_SETMASK
                              200 ;///////////////////////////////////////////////////////////////////////////////
                              201 ;  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                              202 HW_SDRAM_TIMER1_INIT_BITPOS             equ     0
                              203 HW_SDRAM_TIMER1_TRP_BITPOS              equ     16
                              204 HW_SDRAM_TIMER1_TRFC_BITPOS             equ     20
                              206 HW_SDRAM_TIMER1_INIT_WIDTH              equ     16
                              207 HW_SDRAM_TIMER1_TRP_WIDTH               equ     4
                              208 HW_SDRAM_TIMER1_TRFC_WIDTH              equ     4
                              210 HW_SDRAM_TIMER1_INIT_SETMASK            equ     (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                              211 HW_SDRAM_TIMER1_TRP_SETMASK             equ     (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                              212 HW_SDRAM_TIMER1_TRFC_SETMASK            equ     (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                              214 HW_SDRAM_TIMER1_INIT_CLRMASK            equ     ~HW_SDRAM_TIMER1_INIT_SETMASK
                              215 HW_SDRAM_TIMER1_TRP_CLRMASK             equ     ~HW_SDRAM_TIMER1_TRP_SETMASK
                              216 HW_SDRAM_TIMER1_TRFC_CLRMASK            equ     ~HW_SDRAM_TIMER1_TRFC_SETMASK
                              218 ;C insert
                              219 ;typedef union               
                              220 ;{
                              221 ;    struct {
                              222 ;        int INIT                :16;
                              223 ;        int TRP                 :4;
                              224 ;        int TRFC                :4;
                              225 ;    } B;
                              226 ;    int I;
                              227 ;} sdramtimer1_type;
                              229 ;#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                              230 ;endc
                              232 ;///////////////////////////////////////////////////////////////////////////////
                              233 ;  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                              234 HW_SDRAM_TIMER2_TXSR_BITPOS             equ     0
                              235 HW_SDRAM_TIMER2_TREF_BITPOS             equ     4
                              236 HW_SDRAM_TIMER2_TRCD_BITPOS             equ     16
                              238 HW_SDRAM_TIMER2_TXSR_WIDTH              equ     4
                              239 HW_SDRAM_TIMER2_TREF_WIDTH              equ     12
                              240 HW_SDRAM_TIMER2_TRCD_WIDTH              equ     4
                              242 HW_SDRAM_TIMER2_TXSR_SETMASK            equ     (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                              243 HW_SDRAM_TIMER2_TREF_SETMASK            equ     (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                              244 HW_SDRAM_TIMER2_TRCD_SETMASK            equ     (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                              246 HW_SDRAM_TIMER2_TXSR_CLRMASK            equ     ~HW_SDRAM_TIMER2_TXSR_SETMASK
                              247 HW_SDRAM_TIMER2_TREF_CLRMASK            equ     ~HW_SDRAM_TIMER2_TREF_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                              248 HW_SDRAM_TIMER2_TRCD_CLRMASK            equ     ~HW_SDRAM_TIMER2_TRCD_SETMASK
                              250 ;C insert
                              251 ;typedef union               
                              252 ;{
                              253 ;    struct {
                              254 ;        int TXSR                :4;
                              255 ;        int TREF                :12;
                              256 ;        int TRCD                :4;
                              257 ;        int RSVD                :4; 
                              258 ;    } B;
                              259 ;    int I;
                              260 ;} sdramtimer2_type;
                              262 ;#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                              263 ;endc
                              265 ;///////////////////////////////////////////////////////////////////////////////
                              266 ;  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                              267 HW_SDRAM_BAR_XA_BITPOS                 equ     0
                              269 HW_SDRAM_BAR_XA_SETMASK                equ     $FFFF<<HW_SDRAM_BAR_XA_BITPOS
                              271 HW_SDRAM_BAR_XA_CLRMASK                equ     ~HW_SDRAM_BAR_XA_SETMASK
                              273 ;///////////////////////////////////////////////////////////////////////////////
                              274 ;  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                              275 HW_SDRAM_MR_XA_BITPOS                 equ     0
                              277 HW_SDRAM_MR_XA_SETMASK                equ     $FFFF<<HW_SDRAM_MR_XA_BITPOS
                              279 HW_SDRAM_MR_XA_CLRMASK                equ     ~HW_SDRAM_MR_XA_SETMASK
                              281 ;///////////////////////////////////////////////////////////////////////////////
                              282 ;  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                              283 HW_SDRAM_MODE_XA_BITPOS                 equ     0
                              285 HW_SDRAM_MODE_XA_WIDTH                  equ     14
                              287 HW_SDRAM_MODE_XA_SETMASK                equ     (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                              289 HW_SDRAM_MODE_XA_CLRMASK                equ     ~HW_SDRAM_MODE_XA_SETMASK
                              291 ;C insert
                              292 ;typedef union               
                              293 ;{
                              294 ;    struct {
                              295 ;        int VALUE               :14;
                              296 ;        int RSVD                :10; 
                              297 ;    } B;
                              298 ;    int I;
                              299 ;} sdrammode_type;
                              301 ;#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                              302 ;endc
                              304 ;///////////////////////////////////////////////////////////////////////////////
                              305 ;  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                              306 HW_SDRAM_TYPE_COLWIDTH_BITPOS                 equ     0
                              307 HW_SDRAM_TYPE_ROWWIDTH_BITPOS                 equ     4
                              309 HW_SDRAM_TYPE_COLWIDTH_WIDTH                  equ     4
                              310 HW_SDRAM_TYPE_ROWWIDTH_WIDTH                  equ     4
                              312 HW_SDRAM_TYPE_COLWIDTH_SETMASK                equ     (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                              313 HW_SDRAM_TYPE_ROWWIDTH_SETMASK                equ     (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                              315 HW_SDRAM_TYPE_COLWIDTH_CLRMASK                equ     (~HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                              316 HW_SDRAM_TYPE_ROWWIDTH_CLRMASK                equ     (~HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                              318 ;C insert
                              319 ;typedef union               
                              320 ;{
                              321 ;    struct {
                              322 ;        int COLWIDTH               :4;
                              323 ;        int ROWWIDTH               :4; 
                              324 ;    } B;
                              325 ;    int I;
                              326 ;} sdramtype_type;
                              328 ;#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                              329 ;endc
                               36         include "regsspare.inc"
                                2 RESGSSPARE_INC equ 1
                                4 HW_SPARER_BASEADDR                              equ     ($FA16)
                                6 ;ASM Only
                                7 HW_SPARER                               equ     HW_SPARER_BASEADDR     ; Spare register
                                8 ;endasm
                               10 HW_SPARER_I2SS_BITPOS                   equ     0
                               11 HW_SPARER_USB_SELECT_BITPOS             equ     1
                               12 HW_SPARER_USB_PLUGIN_BITPOS             equ     8
                               13 HW_SPARER_PSWITCH_BITPOS                equ     9
                               15 HW_SPARER_I2SS_SETMASK                  equ     1<<HW_SPARER_I2SS_BITPOS
                               16 HW_SPARER_USB_SELECT_SETMASK            equ     1<<HW_SPARER_USB_SELECT_BITPOS
                               18 HW_SPARER_I2SS_CLRMASK                  equ     ~HW_SPARER_I2SS_SETMASK
                               19 HW_SPARER_USB_SELECT_CLRMASK            equ     ~HW_SPARER_USB_SELECT_SETMASK
                               23 ;C Insert
                               24 ;typedef union               
                               25 ;{
                               26 ;    struct {
                               27 ;        int      I2SS       :1;     
                               28 ;        int      USBSELECT  :1;     
                               29 ;        unsigned            :6;
                               30 ;        int      USBPLUGIN  :1;     
                               31 ;        int      PSWITCH    :1;     
                               32 ;    } B;
                               33 ;
                               34 ;    int I;
                               35 ;
                               36 ;} spare_type;
                               37 ;#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                               38 ;endc
                               37         include "regsspi.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;; Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;; Filename    : regsspi.inc
                                4 ;;; Description : Register definitions for SPI interface
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ;///////////////////////////////////////////////////////////////////////////////
                                8 ; The following naming conventions are followed in this file.
                                9 ; All registers are named using the format...
                               10 ;     HW_<module>_<regname>
                               11 ; where <module> is the module name which can be any of the following...
                               12 ;     USB20
                               13 ; (Note that when there is more than one copy of a particular module, the
                               14 ; module name includes a number starting from 0 for the first instance of
                               15 ; that module)
                               16 ;
                               17 ; <regname> is the specific register within that module
                               18 ;
                               19 ; We also define the following...
                               20 ;
                               21 ;     HW_<module>_<regname>_BITPOS
                               22 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               23 ;
                               24 ;     HW_<module>_<regname>_SETMASK
                               25 ; which does something else, and
                               26 ;
                               27 ;     HW_<module>_<regname>_CLRMASK
                               28 ; which does something else.
                               29 ;
                               30 ; Other rules
                               31 ;     All caps
                               32 ;     Numeric identifiers start at 0
                               34 regsspiinc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 ;   SPI STMP3500 Registers 
                               43 ;   Last Updated 7.7.2003 Dave Dyches
                               44 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               46 HW_SPI_BASEADDR             equ     ($FFF9)
                               49 ;ASM Only 
                               51 HW_SPCSR                    equ     (HW_SPI_BASEADDR)
                               52 HW_SPDR                         equ     (HW_SPI_BASEADDR+1)
                               54 ;endasm
                               56 ; /////////////////////////////////////////////
                               57 ; //  SPI Control/Status Register Bit Definitions
                               58 HW_SPCSR_SPE_BITPOS         equ     (0)
                               59 HW_SPCSR_MSTR_BITPOS        equ     (1)
                               60 HW_SPCSR_SPIE_BITPOS            equ     (2)
                               61 HW_SPCSR_CPOL_BITPOS        equ     (3)
                               62 HW_SPCSR_CPHA_BITPOS        equ     (4)
                               63 HW_SPCSR_SPIF_BITPOS        equ     (5)
                               64 HW_SPCSR_WCOL_BITPOS        equ     (6)
                               65 HW_SPCSR_MODF_BITPOS        equ     (7)
                               66 HW_SPCSR_DIV_BITPOS         equ     (8)
                               67 HW_SPCSR_RSVD_BITPOS        equ     (16)
                               69 HW_SPCSR_SPE_WIDTH              equ     (1)
                               70 HW_SPCSR_MSTR_WIDTH         equ     (1)
                               71 HW_SPCSR_SPIE_WIDTH         equ     (1)
                               72 HW_SPCSR_CPOL_WIDTH             equ     (1)
                               73 HW_SPCSR_CPHA_WIDTH         equ     (1)
                               74 HW_SPCSR_SPIF_WIDTH         equ     (1)
                               75 HW_SPCSR_WCOL_WIDTH         equ     (1)
                               76 HW_SPCSR_MODF_WIDTH         equ     (1)
                               77 HW_SPCSR_DIV_WIDTH              equ     (8)
                               78 HW_SPCSR_RSVD_WIDTH         equ     (8)
                               80 HW_SPCSR_SPE_SETMASK            equ     (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                               81 HW_SPCSR_MSTR_SETMASK           equ     (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                               82 HW_SPCSR_SPIE_SETMASK           equ     (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                               83 HW_SPCSR_CPOL_SETMASK       equ     (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                               84 HW_SPCSR_CPHA_SETMASK           equ     (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                               85 HW_SPCSR_SPIF_SETMASK           equ     (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                               86 HW_SPCSR_WCOL_SETMASK       equ     (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                               87 HW_SPCSR_MODF_SETMASK           equ     (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                               88 HW_SPCSR_DIV_SETMASK            equ     (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                               89 HW_SPCSR_RSVD_SETMASK           equ     (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                               91 HW_SPCSR_SPE_CLRMASK            equ     (~HW_SPCSR_SPE_SETMASK)
                               92 HW_SPCSR_MSTR_CLRMASK           equ     (~HW_SPCSR_MSTR_SETMASK)
                               93 HW_SPCSR_SPIE_CLRMASK           equ     (~HW_SPCSR_SPIE_SETMASK)
                               94 HW_SPCSR_CPOL_CLRMASK           equ     (~HW_SPCSR_CPOL_SETMASK)
                               95 HW_SPCSR_CPHA_CLRMASK       equ     (~HW_SPCSR_CPHA_SETMASK)
                               96 HW_SPCSR_SPIF_CLRMASK           equ     (~HW_SPCSR_SPIF_SETMASK)
                               97 HW_SPCSR_WCOL_CLRMASK           equ     (~HW_SPCSR_WCOL_SETMASK)
                               98 HW_SPCSR_MODF_CLRMASK           equ     (~HW_SPCSR_MODF_SETMASK)
                               99 HW_SPCSR_DIV_CLRMASK            equ     (~HW_SPCSR_DIV_SETMASK)
                              100 HW_SPCSR_RSVD_CLRMASK       equ     (~HW_SPCSR_RSVD_SETMASK)
                              102 ;C insert
                              103 ;typedef union               
                              104 ;{
                              105 ;    struct {
                              106 ;       int SPE                 : HW_SPCSR_SPE_WIDTH;    
                              107 ;       int MSTR                : HW_SPCSR_MSTR_WIDTH;
                              108 ;       int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                              109 ;       int CPOL                : HW_SPCSR_CPOL_WIDTH;
                              110 ;       int CPHA                : HW_SPCSR_CPHA_WIDTH;
                              111 ;       int SPIF                : HW_SPCSR_SPIF_WIDTH;
                              112 ;       int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                              113 ;       int MODF                : HW_SPCSR_MODF_WIDTH;
                              114 ;       int DIV                 : HW_SPCSR_DIV_WIDTH;
                              115 ;    } B;
                              116 ;
                              117 ;    int I;
                              118 ;    unsigned int U;
                              120 ;} spcsr_type;
                              121 ;#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                              122 ;endc
                              124 ; /////////////////////////////////////////////
                              125 ; //  SPI Data Register Bit Definitions
                              126 HW_SPDR_SPIDATA_BITPOS      equ     (0)
                              127 HW_SPDR_RSVD_BITPOS         equ     (8)
                              129 HW_SPDR_SPIDATA_WIDTH       equ     (8)
                              130 HW_SPDR_RSVD_WIDTH          equ     (16)
                              132 HW_SPDR_SPIDATA_SETMASK     equ     (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                              133 HW_SPDR_RSVD_SETMASK        equ     (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                              135 HW_SPDR_SPIDATA_CLRMASK     equ         (~HW_SPDR_SPIDATA_SETMASK) 
                              136 HW_SPDR_RSVD_CLRMASK        equ     (~HW_SPDR_RSVD_SETMASK)
                              138 ;C insert
                              139 ;typedef union               
                              140 ;{
                              141 ;    struct {
                              142 ;       int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                              143 ;    } B;
                              144 ;
                              145 ;    int I;
                              146 ;    unsigned int U;
                              148 ;} spdr_type;
                              149 ;#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                              150 ;endc
                               38         include "regsswizzle.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;; Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;; Filename    : regsswizzle.inc
                                4 ;;; Description : Register definitions for Swizzle interface
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ;///////////////////////////////////////////////////////////////////////////////
                                8 ; The following naming conventions are followed in this file.
                                9 ; All registers are named using the format...
                               10 ;     HW_<module>_<regname>
                               11 ; where <module> is the module name which can be any of the following...
                               12 ;     USB20
                               13 ; (Note that when there is more than one copy of a particular module, the
                               14 ; module name includes a number starting from 0 for the first instance of
                               15 ; that module)
                               16 ;
                               17 ; <regname> is the specific register within that module
                               18 ;
                               19 ; We also define the following...
                               20 ;
                               21 ;     HW_<module>_<regname>_BITPOS
                               22 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               23 ;
                               24 ;     HW_<module>_<regname>_SETMASK
                               25 ; which does something else, and
                               26 ;
                               27 ;     HW_<module>_<regname>_CLRMASK
                               28 ; which does something else.
                               29 ;
                               30 ; Other rules
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                               31 ;     All caps
                               32 ;     Numeric identifiers start at 0
                               34 regsswizzleinc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 ;   SWIZZLE STMP3500 Registers 
                               43 ;   Last Updated 7.11.2003 Dave Dyches
                               44 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               50 HW_SWIZZLE_BASEADDR                     equ             $F380
                               53 ;ASM Only 
                               54 HW_SWIZZLECS1R                          equ     (HW_SWIZZLE_BASEADDR)       ;// Swizzle Control & Status Register 1 
                               55 HW_SWIZZLECS2R                          equ     (HW_SWIZZLE_BASEADDR+1)     ;// Swizzle Control & Status Register 2 
                               56 HW_SWIZZLESIZER                         equ             (HW_SWIZZLE_BASEADDR+2)     ;// Swizzle Transfer Size Register 
                               57 HW_SWIZZLESOURCER                       equ             (HW_SWIZZLE_BASEADDR+3)     ;// Swizzle Source Address Register 
                               58 HW_SWIZZLEDATA1R                        equ             (HW_SWIZZLE_BASEADDR+4)     ;// Swizzle Data1 Register     
                               59 HW_SWIZZLEDATA2R                        equ             (HW_SWIZZLE_BASEADDR+5)     ;// Swizzle Data2 Register 
                               60 HW_SWIZZLEDESTADDRR             equ     (HW_SWIZZLE_BASEADDR+6)     ;// Swizzle Destination Address Register 
                               61 HW_SWIZZLEBIGENDIANR            equ             (HW_SWIZZLE_BASEADDR+7)         ;// Swizzle Big Endian Register 
                               62 HW_SWIZZLEBITREVR                       equ             (HW_SWIZZLE_BASEADDR+8)     ;// Swizzle BITREV Register 
                               63 HW_SWIZZLEPASSLSBR                      equ             (HW_SWIZZLE_BASEADDR+9)     ;// Swizzle Pass Least Significant Byte Register 
                               64 HW_SWIZZLEPASSISBR                      equ             (HW_SWIZZLE_BASEADDR+10)    ;// Swizzle Pass Intermediate Byte Register 
                               65 HW_SWIZZLEPASSMSBR                      equ             (HW_SWIZZLE_BASEADDR+11)    ;// Swizzle Pass Most Significant Byte Register 
                               66 HW_SWIZZLEPASSLSWR                      equ             (HW_SWIZZLE_BASEADDR+12)    ;// Swizzle Pass Least Significant Word Register 
                               67 HW_SWIZZLEPASSISWR                      equ             (HW_SWIZZLE_BASEADDR+13)    ;// Swizzle Pass Intermediate Significant Word Register 
                               68 HW_SWIZZLEPASSMSWR                      equ             (HW_SWIZZLE_BASEADDR+14)    ;// Swizzle Pass Most Significant Word Register 
                               69 HW_SWIZZLEBARRELR                       equ             (HW_SWIZZLE_BASEADDR+15)    ;// Swizzle Barrel Shift Register 
                               70 HW_SWIZZLEDIV3LR                        equ             (HW_SWIZZLE_BASEADDR+16)    ;// Swizzle Divide By 3 Lower Register 
                               71 HW_SWIZZLEDIV3UR                        equ             (HW_SWIZZLE_BASEADDR+17)    ;// Swizzle Divide By 3 upper Register 
                               72 ;endasm
                               74 ;//  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                               75 HW_SWIZZLECSR1_EN_BITPOS            equ         (0)
                               76 HW_SWIZZLECSR1_LA_BITPOS            equ     (1)
                               77 HW_SWIZZLECSR1_LNR_BITPOS       equ     (2)
                               78 HW_SWIZZLECSR1_SIGN_BITPOS      equ     (3)
                               79 HW_SWIZZLECSR1_SHIFT_BITPOS     equ     (4)
                               80 HW_SWIZZLECSR1_MEM_BITPOS       equ     (8)
                               81 HW_SWIZZLECSR1_CLK_OFF_BITPOS   equ     (9)
                               82 HW_SWIZZLECSR1_NEWADD_BITPOS    equ     (10)
                               83 HW_SWIZZLECSR1_RSVD_BITPOS      equ     (11)
                               85 HW_SWIZZLECSR1_EN_WIDTH             equ         (1)
                               86 HW_SWIZZLECSR1_LA_WIDTH         equ     (1)
                               87 HW_SWIZZLECSR1_LNR_WIDTH        equ     (1)
                               88 HW_SWIZZLECSR1_SIGN_WIDTH       equ     (1)
                               89 HW_SWIZZLECSR1_SHIFT_WIDTH      equ     (4)
                               90 HW_SWIZZLECSR1_MEM_WIDTH        equ     (1)
                               91 HW_SWIZZLECSR1_CLK_OFF_WIDTH    equ     (1)
                               92 HW_SWIZZLECSR1_NEWADD_WIDTH     equ     (1)
                               93 HW_SWIZZLECSR1_RSVD_WIDTH       equ     (13)
                               95 HW_SWIZZLECSR1_EN_SETMASK       equ     (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                               96 HW_SWIZZLECSR1_LA_SETMASK       equ     (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                               97 HW_SWIZZLECSR1_LNR_SETMASK      equ     (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                               98 HW_SWIZZLECSR1_SIGN_SETMASK     equ     (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                               99 HW_SWIZZLECSR1_SHIFT_SETMASK    equ     (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                              100 HW_SWIZZLECSR1_MEM_SETMASK      equ     (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                              101 HW_SWIZZLECSR1_CLK_OFF_SETMASK  equ     (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                              102 HW_SWIZZLECSR1_NEWADD_SETMASK   equ     (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                              103 HW_SWIZZLECSR1_RSVD_SETMASK     equ     (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                              105 HW_SWIZZLECSR1_EN_CLRMASK       equ     (~HW_SWIZZLECSR1_EN_SETMASK)
                              106 HW_SWIZZLECSR1_LA_CLRMASK       equ     (~HW_SWIZZLECSR1_LA_SETMASK)
                              107 HW_SWIZZLECSR1_LNR_CLRMASK      equ     (~HW_SWIZZLECSR1_LNR_SETMASK)
                              108 HW_SWIZZLECSR1_SIGN_CLRMASK     equ     (~HW_SWIZZLECSR1_SIGN_SETMASK)
                              109 HW_SWIZZLECSR1_SHIFT_CLRMASK    equ     (~HW_SWIZZLECSR1_SHIFT_SETMASK)
                              110 HW_SWIZZLECSR1_MEM_CLRMASK      equ     (~HW_SWIZZLECSR1_MEM_SETMASK)
                              111 HW_SWIZZLECSR1_CLK_OFF_CLRMASK  equ     (~HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                              112 HW_SWIZZLECSR1_NEWADD_CLRMASK   equ     (~HW_SWIZZLECSR1_NEWADD_SETMASK)
                              113 HW_SWIZZLECSR1_RSVD_CLRMASK     equ     (~HW_SWIZZLECSR1_RSVD_SETMASK)
                              115 ;C insert
                              116 ;////////////////////////////////////////////////////////////////////////////////
                              117 ;//  Bit Manipulation Unit Registers
                              118 ;////////////////////////////////////////////////////////////////////////////////
                              119 ;typedef union
                              120 ;{
                              121 ;    struct
                              122 ;    {
                              123 ;    int EN      :1;     /* Swizzle Enable                           */
                              124 ;    int LA      :1;     /* Left Align Data                          */
                              125 ;    int LNR     :1;     /* Left Barrel Shift                        */
                              126 ;    int SIGN    :1;     /* Sign Extend Data                         */
                              127 ;    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                              128 ;    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                              129 ;    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                              130 ;    int NEWADD  :1;     /* Place the data into a new location       */     
                              131 ;    } B;
                              132 ;    int I;
                              133 ;    unsigned U;
                              134 ;} swizzlecsr1_type;
                              135 ;////////////////////////////////////////////////////////////////////////////////
                              137 ;#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                              138 ;endc
                              140 ;//  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                              141 HW_SWIZZLECSR2_KICK_BITPOS          equ         (0)
                              142 HW_SWIZZLECSR2_SASEL_BITPOS     equ     (1)
                              143 HW_SWIZZLECSR2_DESASEL_BITPOS   equ     (3)
                              144 HW_SWIZZLECSR2_BIGE_BITPOS      equ     (5)
                              145 HW_SWIZZLECSR2_BITREV_BITPOS    equ     (6)
                              146 HW_SWIZZLECSR2_PLSB_BITPOS      equ     (7)
                              147 HW_SWIZZLECSR2_PISB_OFF_BITPOS  equ     (8)
                              148 HW_SWIZZLECSR2_PMSB_BITPOS      equ     (9)
                              149 HW_SWIZZLECSR2_P16L_BITPOS      equ     (10)
                              150 HW_SWIZZLECSR2_P16I_BITPOS      equ     (11)
                              151 HW_SWIZZLECSR2_BS_EN_BITPOS     equ     (12)
                              152 HW_SWIZZLECSR2_SBYTEDEST_BITPOS equ     (13)
                              153 HW_SWIZZLECSR2_UNKICK_BITPOS    equ     (15)
                              154 HW_SWIZZLECSR2_RSVD_BITPOS      equ     (16)
                              156 HW_SWIZZLECSR2_KICK_WIDTH           equ         (1)
                              157 HW_SWIZZLECSR2_SASEL_WIDTH      equ     (2)
                              158 HW_SWIZZLECSR2_DESASEL_WIDTH    equ     (2)
                              159 HW_SWIZZLECSR2_BIGE_WIDTH       equ     (1)
                              160 HW_SWIZZLECSR2_BITREV_WIDTH     equ     (1)
                              161 HW_SWIZZLECSR2_PLSB_WIDTH       equ     (1)
                              162 HW_SWIZZLECSR2_PMSB_WIDTH       equ     (1)
                              163 HW_SWIZZLECSR2_P16L_WIDTH       equ     (1)
                              164 HW_SWIZZLECSR2_P16I_WIDTH       equ     (1)
                              165 HW_SWIZZLECSR2_BS_EN_WIDTH      equ     (1)
                              166 HW_SWIZZLECSR2_SBYTEDEST_WIDTH  equ     (2)
                              167 HW_SWIZZLECSR2_UNKICK_WIDTH     equ     (1)
                              168 HW_SWIZZLECSR2_RSVD_WIDTH       equ     (8)
                              170 HW_SWIZZLECSR2_KICK_SETMASK     equ     (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                              171 HW_SWIZZLECSR2_SASEL_SETMASK    equ     (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                              172 HW_SWIZZLECSR2_DESASEL_SETMASK  equ     (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                              173 HW_SWIZZLECSR2_BIGE_SETMASK     equ     (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                              174 HW_SWIZZLECSR2_BITREV_SETMASK   equ     (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                              175 HW_SWIZZLECSR2_PLSB_SETMASK     equ     (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                              176 HW_SWIZZLECSR2_PMSB_SETMASK     equ     (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                              177 HW_SWIZZLECSR2_P16L_SETMASK     equ     (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                              178 HW_SWIZZLECSR2_P16I_SETMASK     equ     (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                              179 HW_SWIZZLECSR2_BS_EN_SETMASK    equ     (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                              180 HW_SWIZZLECSR2_SBYTEDEST_SETMASK equ     (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                              181 HW_SWIZZLECSR2_UNKICK_SETMASK   equ     (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                              182 HW_SWIZZLECSR2_RSVD_SETMASK     equ     (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                              184 HW_SWIZZLECSR2_KICK_CLRMASK     equ     (~HW_SWIZZLECSR2_KICK_SETMASK)
                              185 HW_SWIZZLECSR2_SASEL_CLRMASK    equ     (~HW_SWIZZLECSR2_SASEL_SETMASK)
                              186 HW_SWIZZLECSR2_DESASEL_CLRMASK  equ     (~HW_SWIZZLECSR2_DESASEL_SETMASK)
                              187 HW_SWIZZLECSR2_BIGE_CLRMASK     equ     (~HW_SWIZZLECSR2_BIGE_SETMASK)
                              188 HW_SWIZZLECSR2_BITREV_CLRMASK   equ     (~HW_SWIZZLECSR2_BITREV_SETMASK)
                              189 HW_SWIZZLECSR2_PLSB_CLRMASK     equ     (~HW_SWIZZLECSR2_PLSB_SETMASK)
                              190 HW_SWIZZLECSR2_PMSB_CLRMASK     equ     (~HW_SWIZZLECSR2_PMSB_SETMASK)
                              191 HW_SWIZZLECSR2_P16L_CLRMASK     equ     (~HW_SWIZZLECSR2_P16L_SETMASK)
                              192 HW_SWIZZLECSR2_P16I_CLRMASK     equ     (~HW_SWIZZLECSR2_P16I_SETMASK)
                              193 HW_SWIZZLECSR2_BS_EN_CLRMASK    equ     (~HW_SWIZZLECSR2_BS_EN_SETMASK)
                              194 HW_SWIZZLECSR2_SBYTEDEST_CLRMASK equ     (~HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                              195 HW_SWIZZLECSR2_UNKICK_CLRMASK   equ     (~HW_SWIZZLECSR2_UNKICK_SETMASK)
                              196 HW_SWIZZLECSR2_RSVD_CLRMASK     equ     (~HW_SWIZZLECSR2_RSVD_SETMASK)
                              198 ;C insert
                              199 ;///////////////////////////////////////////////////////////////////////////////
                              200 ;typedef union
                              201 ;{
                              202 ;    struct
                              203 ;    {
                              204 ;    int KICK    :1;         /* Start transfer                      */
                              205 ;    unsigned SASEL :2;              /* Source memory Select                */
                              206 ;    unsigned DESASEL :2;                    /* Destination memory Select           */
                              207 ;    int BIGE        :1;             /* Big Endian Enable                   */
                              208 ;    int BITREV      :1;     /* Bit reverse the data                */
                              209 ;    int PLSB        :1;             /* Pass Least Significant Byte         */
                              210 ;    int PISB        :1;     /* Pass Intermediate Byte              */
                              211 ;    int PMSB        :1;     /* Pass Most Significant Byte          */
                              212 ;    int P16L        :1;     /* Pass Least Significant word         */
                              213 ;    int P16I        :1;     /* Pass Intermediate significant word  */
                              214 ;    int BS_EN       :1;     /* Barrel Shift Enable                 */
                              215 ;    unsigned SBYTE  :2;                     /* Start byte                          */
                              216 ;    int UNKICK      :1;     /* Halt transfer                       */  
                              217 ;    } B;
                              218 ;    unsigned int I;
                              219 ;    unsigned int U;
                              220 ;} swizzlecsr2_type;
                              221 ;///////////////////////////////////////////////////////////////////////////////
                              223 ;#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                              224 ;endc
                              226 ;//  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                              227 HW_SWIZZLESIZER_SIZE_BITPOS             equ     (0)
                              228 HW_SWIZZLESIZER_NEW_SHIFT_BITPOS    equ     (16)
                              229 HW_SWIZZLESIZER_RSVD_BITPOS         equ     (21)
                              231 HW_SWIZZLESIZER_SIZE_WIDTH              equ     (16)
                              232 HW_SWIZZLESIZER_NEW_SHIFT_WIDTH     equ     (5)
                              233 HW_SWIZZLESIZER_RSVD_WIDTH          equ     (3)
                              235 HW_SWIZZLESIZER_SIZE_SETMASK        equ     (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                              236 HW_SWIZZLESIZER_NEW_SHIFT_SETMASK   equ     (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                              237 HW_SWIZZLESIZER_RSVD_SETMASK        equ     (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                              239 HW_SWIZZLESIZER_SIZE_CLRMASK        equ     (~HW_SWIZZLESIZER_SIZE_SETMASK)
                              240 HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK   equ     (~HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                              241 HW_SWIZZLESIZER_RSVD_CLRMASK        equ     (~HW_SWIZZLESIZER_RSVD_SETMASK)
                              243 ;C insert
                              244 ;///////////////////////////////////////////////////////////////////////////////
                              245 ;typedef union
                              246 ;{
                              247 ;    struct
                              248 ;    {
                              249 ;    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                              250 ;    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                              251 ;    } B;
                              252 ;    int I;
                              253 ;    unsigned U;
                              254 ;} swizzlesizer_type;
                              255 ;///////////////////////////////////////////////////////////////////////////////
                              257 ;#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                              259 ;#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                              260 ;#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                              261 ;#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                              262 ;#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                              263 ;#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                              264 ;#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                              265 ;#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                              266 ;#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                              267 ;#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                              268 ;#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                              269 ;#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                              270 ;#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                              271 ;#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                              272 ;#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                              273 ;endc
                              276 ;//  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                              277 HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS  equ         (0)
                              278 HW_SWIZZLEDIV3UR_RSVD0_BITPOS       equ     (8)
                              279 HW_SWIZZLEDIV3UR_REMAINDER_BITPOS   equ     (20)
                              280 HW_SWIZZLEDIV3UR_RSVD1_BITPOS       equ     (22)
                              282 HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH       equ     (8)
                              283 HW_SWIZZLEDIV3UR_RSVD0_WIDTH        equ     (12)
                              284 HW_SWIZZLEDIV3UR_REMAINDER_WIDTH    equ     (2)
                              285 HW_SWIZZLEDIV3UR_RSVD1_WIDTH        equ     (2)
                              287 HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK equ     (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                              288 HW_SWIZZLEDIV3UR_RSVD0_SETMASK      equ     (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                              289 HW_SWIZZLEDIV3UR_REMAINDER_SETMASK  equ     (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                              290 HW_SWIZZLEDIV3UR_RSVD1_SETMASK      equ     (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                              292 HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK equ     (~HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                              293 HW_SWIZZLEDIV3UR_RSVD0_CLRMASK      equ     (~HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                              294 HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK  equ     (~HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                              295 HW_SWIZZLEDIV3UR_RSVD1_CLRMASK      equ     (~HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                              297 ;C insert
                              298 ;///////////////////////////////////////////////////////////////////////////////
                              299 ;typedef union
                              300 ;{
                              301 ;    struct
                              302 ;    {
                              303 ;    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                              304 ;    unsigned RSVD0         :12;         /* Source memory Select                 */
                              305 ;    unsigned REMAINDER     :2;         /* Source memory Select                 */
                              306 ;    } B;
                              307 ;    int I;
                              308 ;    unsigned U;
                              309 ;} swizzlediv3ur_type;
                              310 ;///////////////////////////////////////////////////////////////////////////////
                              312 ;#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                              313 ;endc
                               39         include "regssystem.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;  File        : regs_system.inc
                                4 ;;  Description : SYSTEM IP Register definition
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     SYSTEM
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               34 regs_systeminc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               41 ;   SYSTEM STMP Registers 
                               42 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               43 HW_SYSTEM_BASEADDR                       equ     ($FA00)
                               45 ;///////////////////////////////////////////////////////////////////////////////
                               46 ;  SYSTEM 1.8V Pad Enable Registers
                               47 ;///////////////////////////////////////////////////////////////////////////////
                               49 ;ASM Only
                               50 HW_SYSTEM_1_8V_PAD_EN                            equ     (HW_SYSTEM_BASEADDR+48)   ;;// $FA30
                               51 ;endasm
                               53 ;///////////////////////////////////////////////////////////////////////////////
                               54 ;  SYSTEM  (HW_SYSTEM_1_8V_PAD_EN) Bit Definitions
                               55 HW_SYSTEM_1_8V_PAD_EN_BITPOS             equ     (0)
                               56 HW_SYSTEM_1_8V_KEEP_EN_BITPOS            equ     (8)
                               58 HW_SYSTEM_1_8V_PAD_EN_WIDTH              equ     (8)
                               59 HW_SYSTEM_1_8V_KEEP_EN_WIDTH             equ     (1)
                               61 HW_SYSTEM_1_8V_PAD_EN_SETMASK            equ     (((1<<HW_SYSTEM_1_8V_PAD_EN_WIDTH)-1)<<HW_SYSTEM_1_8V_PAD_EN_BITPOS)
                               62 HW_SYSTEM_1_8V_KEEP_EN_SETMASK           equ     (((1<<HW_SYSTEM_1_8V_KEEP_EN_WIDTH)-1)<<HW_SYSTEM_1_8V_KEEP_EN_BITPOS)
                               64 HW_SYSTEM_1_8V_PAD_EN_CLRMASK            equ     (~HW_SYSTEM_1_8V_PAD_EN_SETMASK)
                               65 HW_SYSTEM_1_8V_KEEP_EN_CLRMASK           equ     (~HW_SYSTEM_1_8V_KEEP_EN_SETMASK)
                               67 ;C insert
                               68 ;typedef union               
                               69 ;{
                               70 ;    struct {
                               71 ;        int P1_8V_PAD_EN       : HW_SYSTEM_1_8V_PAD_EN_WIDTH;
                               72 ;        int P1_8V_KEEP_EN      : HW_SYSTEM_1_8V_KEEP_EN_WIDTH;
                               73 ;    } B;
                               74 ;    int I;
                               75 ;    unsigned int U;
                               76 ;} system_1_8v_en_type;
                               78 ;#define HW_SYSTEM_1_8V_PAD_EN      (*(volatile system_1_8v_en_type _X*) (HW_SYSTEM_BASEADDR+48))    /* SYSTEM 1.8V Pad Enable */
                               79 ;endc
                               40         include "regstb.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2003
                                3 ;
                                4 ; Filename: regstb.inc
                                5 ; Description: Register definitions for Trace Buffer
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regstbinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               41 ;   Trace Buffer STMP Registers 
                               42 ;   Last Updated 6.30.2003 D. Baker
                               43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               45 HW_TB_BASEADDR             equ     ($F080)
                               47  
                               49 ;ASM Only
                               51  
                               52 HW_TB_CFG                    equ     (HW_TB_BASEADDR+0)
                               53 HW_TB_BAR                    equ     (HW_TB_BASEADDR+1)
                               54 HW_TB_MOD                    equ     (HW_TB_BASEADDR+2)
                               55 HW_TB_CIR                    equ     (HW_TB_BASEADDR+3)
                               56 HW_TB_OBC                    equ     (HW_TB_BASEADDR+4)
                               57 HW_TB_TCS                    equ     (HW_TB_BASEADDR+16)
                               58 HW_TB_TVR                    equ     (HW_TB_BASEADDR+24)
                               60 ;endasm
                               62 ;///////////////////////////////////////////////////////////////////////////////
                               64 ;  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                               66 HW_TB_CFG_CLK_ENABLE_BITPOS    equ     (0)
                               67 HW_TB_CFG_ENABLE_BITPOS        equ     (1)
                               68 HW_TB_CFG_DONE_BITPOS          equ     (3)
                               69 HW_TB_CFG_DMA_ASEL_BITPOS      equ     (4)
                               70 HW_TB_CFG_TRIG_EVENT_BITPOS    equ     (6)
                               72 HW_TB_CFG_CLK_ENABLE_WIDTH     equ     (1)
                               73 HW_TB_CFG_ENABLE_WIDTH         equ     (1)
                               74 HW_TB_CFG_RSVD1_WIDTH          equ     (1)
                               75 HW_TB_CFG_DONE_WIDTH           equ     (1)
                               76 HW_TB_CFG_DMA_ASEL_WIDTH       equ     (2)
                               77 HW_TB_CFG_TRIG_EVENT_WIDTH     equ     (1)
                               78 HW_TB_CFG_RSVD2_WIDTH          equ     (17)
                               79    
                               80 HW_TB_CFG_CLK_ENABLE_SETMASK   equ     (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                               81 HW_TB_CFG_ENABLE_SETMASK       equ     (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                               82 HW_TB_CFG_DONE_SETMASK         equ     (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                               83 HW_TB_CFG_DMA_ASEL_SETMASK     equ     (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                               84 HW_TB_CFG_TRIG_EVENT_SETMASK   equ     (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                               85   
                               86 HW_TB_CFG_CLK_ENABLE_CLRMASK   equ     (~HW_TB_CFG_CLK_ENABLE_SETMASK)
                               87 HW_TB_CFG_ENABLE_CLRMASK       equ     (~HW_TB_CFG_ENABLE_SETMASK)
                               88 HW_TB_CFG_DONE_CLRMASK         equ     (~HW_TB_CFG_DONE_SETMASK)
                               89 HW_TB_CFG_DMA_ASEL_CLRMASK     equ     (~HW_TB_CFG_DMA_ASEL_SETMASK)
                               90 HW_TB_CFG_TRIG_EVENT_CLRMASK   equ     (~HW_TB_CFG_TRIG_EVENT_SETMASK)
                               91  
                               92 ;C insert
                               94 ;typedef union               
                               96 ;{
                               98 ;    struct {
                               99 ;        int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                              100 ;        int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                              101 ;        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                              102 ;        int DONE            : HW_TB_CFG_DONE_WIDTH;
                              103 ;        int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                              104 ;        int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                              105 ;        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                              106 ;    } B;
                              108 ;    int I;
                              109 ;    unsigned int U;
                              111 ;} tb_cfg_type;
                              113  
                              115 ;#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                              117 ;endc
                              119 ;///////////////////////////////////////////////////////////////////////////////
                              121 ;  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                              123 HW_TB_BAR_ADDRESS_BITPOS    equ     (0)
                              125 HW_TB_BAR_ADDRESS_WIDTH     equ     (16)        
                              126 HW_TB_BAR_RSVD_WIDTH        equ     (8)
                              127    
                              128 HW_TB_BAR_ADDRESS_SETMASK   equ     (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                              129   
                              130 HW_TB_BAR_ADDRESS_CLRMASK   equ     (~HW_TB_BAR_ADDRESS_SETMASK)
                              131  
                              132 ;C insert
                              134 ;typedef union               
                              136 ;{
                              138 ;    struct {
                              139 ;        int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                              140 ;        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                              141 ;    } B;
                              143 ;    int I;
                              144 ;    unsigned int U;
                              146 ;} tb_bar_type;
                              148  
                              150 ;#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                              152 ;endc
                              154 ;///////////////////////////////////////////////////////////////////////////////
                              156 ;  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                              158 HW_TB_MOD_MODULUS_BITPOS    equ     (0)
                              160 HW_TB_MOD_MODULUS_WIDTH     equ     (14)        
                              161 HW_TB_MOD_RSVD_WIDTH           equ     (10)
                              162    
                              163 HW_TB_MOD_MODULUS_SETMASK   equ     (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                              164   
                              165 HW_TB_MOD_MODULUS_CLRMASK   equ     (~HW_TB_MOD_MODULUS_SETMASK)
                              166  
                              167 ;C insert
                              169 ;typedef union               
                              171 ;{
                              173 ;    struct {
                              174 ;        int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                              175 ;        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                              176 ;    } B;
                              178 ;    int I;
                              179 ;    unsigned int U;
                              181 ;} tb_mod_type;
                              183  
                              185 ;#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                              187 ;endc
                              189 ;///////////////////////////////////////////////////////////////////////////////
                              191 ;  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                              193 HW_TB_CIR_INDEX_BITPOS    equ     (0)
                              195 HW_TB_CIR_INDEX_WIDTH     equ     (14)        
                              196 HW_TB_CIR_RSVD_WIDTH      equ     (10)
                              197    
                              198 HW_TB_CIR_INDEX_SETMASK   equ     (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                              199   
                              200 HW_TB_CIR_INDEX_CLRMASK   equ     (~HW_TB_CIR_INDEX_SETMASK)
                              201  
                              202 ;C insert
                              204 ;typedef union               
                              206 ;{
                              208 ;    struct {
                              209 ;        int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                              210 ;        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                              211 ;    } B;
                              213 ;    int I;
                              214 ;    unsigned int U;
                              216 ;} tb_cir_type;
                              218  
                              220 ;#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                              222 ;endc
                              224 ;///////////////////////////////////////////////////////////////////////////////
                              226 ;  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                              228 HW_TB_OBC_CODE_BITPOS    equ     (0)
                              230 HW_TB_OBC_CODE_WIDTH     equ     (8)        
                              231 HW_TB_OBC_RSVD_WIDTH           equ     (16)
                              232    
                              233 HW_TB_OBC_CODE_SETMASK   equ     (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                              234   
                              235 HW_TB_OBC_CODE_CLRMASK   equ     (~HW_TB_OBC_CODE_SETMASK)
                              236  
                              237 ;C insert
                              239 ;typedef union               
                              241 ;{
                              243 ;    struct {
                              244 ;        int CODE        : HW_TB_OBC_CODE_WIDTH;
                              245 ;        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                              246 ;    } B;
                              248 ;    int I;
                              249 ;    unsigned int U;
                              251 ;} tb_obc_type;
                              253  
                              255 ;#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                              257 ;endc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                              259 ;///////////////////////////////////////////////////////////////////////////////
                              261 ;  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                              263 HW_TB_TCS_TRG_STYLE_BITPOS     equ    (0)
                              264 HW_TB_TCS_CAP_CLASS_BITPOS    equ     (1)
                              265 HW_TB_TCS_TRG_CLASS_BITPOS    equ     (3)
                              266 HW_TB_TCS_FREEZE_BITPOS       equ     (5)
                              268 HW_TB_TCS_TRG_STYLE_WIDTH      equ    (1)        
                              269 HW_TB_TCS_CAP_CLASS_WIDTH     equ     (2)        
                              270 HW_TB_TCS_TRG_CLASS_WIDTH     equ     (2)        
                              271 HW_TB_TCS_FREEZE_WIDTH        equ     (1)        
                              272 HW_TB_TCS_RSVD_WIDTH          equ     (18)
                              273    
                              274 HW_TB_TCS_TRG_STYLE_SETMASK    equ    (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                              275 HW_TB_TCS_CAP_CLASS_SETMASK   equ     (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                              276 HW_TB_TCS_TRG_CLASS_SETMASK   equ     (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                              277 HW_TB_TCS_FREEZE_SETMASK      equ     (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                              278   
                              279 HW_TB_TCS_TRG_STYLE_CLRMASK    equ    (~HW_TB_TCS_TRG_STYLE_SETMASK)
                              280 HW_TB_TCS_CAP_CLASS_CLRMASK   equ     (~HW_TB_TCS_CAP_CLASS_SETMASK)
                              281 HW_TB_TCS_TRG_CLASS_CLRMASK   equ     (~HW_TB_TCS_TRG_CLASS_SETMASK)
                              282 HW_TB_TCS_FREEZE_CLRMASK      equ     (~HW_TB_TCS_FREEZE_SETMASK)
                              283  
                              284 ;C insert
                              286 ;typedef union               
                              288 ;{
                              290 ;    struct {
                              291 ;        int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                              292 ;        int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                              293 ;        int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                              294 ;        int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                              295 ;        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                              296 ;    } B;
                              298 ;    int I;
                              299 ;    unsigned int U;
                              301 ;} tb_tcs_type;
                              303  
                              305 ;#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                              307 ;endc
                              309 ;///////////////////////////////////////////////////////////////////////////////
                              311 ;  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                              313 HW_TB_TVR_MATCH_ADDR_BITPOS    equ     (0)
                              315 HW_TB_TVR_MATCH_ADDR_WIDTH     equ     (16)        
                              316 HW_TB_TVR_RSVD_WIDTH           equ     (8)
                              317    
                              318 HW_TB_TVR_MATCH_ADDR_SETMASK   equ     (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                              319   
                              320 HW_TB_TVR_MATCH_ADDR_CLRMASK   equ     (~HW_TB_TVR_MATCH_ADDR_SETMASK)
                              321  
                              322 ;C insert
                              324 ;typedef union               
                              326 ;{
                              328 ;    struct {
                              329 ;        int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                              330 ;        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                              331 ;    } B;
                              333 ;    int I;
                              334 ;    unsigned int U;
                              336 ;} tb_tvr_type;
                              338  
                              340 ;#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                              342 ;endc
                               41         include "regstimer.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ; Filename: regstimer.inc
                                5 ; Description: Register definitions for  Timers interface
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               33 regstimerinc            equ         1
                               35 ;C insert
                               36 ;#include "types.h"
                               37 ;endc
                               39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               40 ;   TIMER STMP Registers 
                               41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 HW_TMR_BASEADDR             equ     ($F100)
                               44 HW_TMR0_BASEADDR            equ     HW_TMR_BASEADDR
                               45 HW_TMR1_BASEADDR            equ     HW_TMR_BASEADDR+$40
                               46 HW_TMR2_BASEADDR            equ     HW_TMR_BASEADDR+$80
                               47 HW_TMR3_BASEADDR            equ     HW_TMR_BASEADDR+$C0
                               49 HW_TIMER_NUMBER_0                       equ     0
                               50 HW_TIMER_NUMBER_1                       equ     1
                               51 HW_TIMER_NUMBER_2                       equ     2
                               52 HW_TIMER_NUMBER_3                       equ     3
                               54 HW_TMRCSR                   equ     0
                               55 HW_TMRCNTR                 equ     1
                               57 ;ASM Only
                               58 ;///////////////////////////////////////////////////////////////////////////////
                               59 ;  Timer Control Status Registers 
                               60 ;///////////////////////////////////////////////////////////////////////////////
                               61 HW_TMR0CSR                          equ    HW_TMR0_BASEADDR+HW_TMRCSR
                               62 HW_TMR0CNTR                         equ    HW_TMR0_BASEADDR+HW_TMRCNTR
                               63 HW_TMR1CSR                          equ    HW_TMR1_BASEADDR+HW_TMRCSR
                               64 HW_TMR1CNTR                         equ    HW_TMR1_BASEADDR+HW_TMRCNTR
                               65 HW_TMR2CSR                          equ    HW_TMR2_BASEADDR+HW_TMRCSR
                               66 HW_TMR2CNTR                         equ    HW_TMR2_BASEADDR+HW_TMRCNTR
                               67 HW_TMR3CSR                          equ    HW_TMR3_BASEADDR+HW_TMRCSR
                               68 HW_TMR3CNTR                         equ    HW_TMR3_BASEADDR+HW_TMRCNTR
                               70 ;endasm
                               72 ;///////////////////////////////////////////////////////////////////////////////
                               73 ;  TIMER CSR (HW_TMR0CSR) Bit Definitions
                               74 HW_TMR0CSR_TIMER_ENABLE_BITPOS      equ    (0)
                               75 HW_TMR0CSR_TIMER_INT_EN_BITPOS      equ    (1)
                               76 HW_TMR0CSR_INVERT_BITPOS            equ    (2)
                               77 HW_TMR0CSR_TIMER_CONTROL_BITPOS     equ    (3)
                               78 HW_TMR0CSR_TIMER_STATUS_BITPOS      equ    (7)
                               79 HW_TMR0CSR_TIMER_MODE_BITPOS        equ    (8)
                               80 HW_TMR0CSR_CLKGT_BITPOS             equ    (23)
                               82 HW_TMR0CSR_TIMER_ENABLE_WIDTH       equ    (1)
                               83 HW_TMR0CSR_TIMER_INT_EN_WIDTH       equ    (1)
                               84 HW_TMR0CSR_INVERT_WIDTH             equ    (1)
                               85 HW_TMR0CSR_TIMER_CONTROL_WIDTH      equ    (3)
                               86 HW_TMR0CSR_TIMER_STATUS_WIDTH       equ    (1)
                               87 HW_TMR0CSR_TIMER_MODE_WIDTH         equ    (2)
                               88 HW_TMR0CSR_CLKGT_WIDTH              equ    (1)
                               90 HW_TMR0CSR_TIMER_ENABLE_SETMASK     equ    (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                               91 HW_TMR0CSR_TIMER_INT_EN_SETMASK     equ    (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                               92 HW_TMR0CSR_INVERT_SETMASK           equ    (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                               93 HW_TMR0CSR_TIMER_CONTROL_SETMASK    equ    (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                               94 HW_TMR0CSR_TIMER_STATUS_SETMASK     equ    (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                               95 HW_TMR0CSR_TIMER_MODE_SETMASK       equ    (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                               96 HW_TMR0CSR_CLKGT_SETMASK            equ    (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                               98 HW_TMR0CSR_TIMER_ENABLE_CLRMASK     equ    (~HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                               99 HW_TMR0CSR_TIMER_INT_EN_CLRMASK     equ    (~HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                              100 HW_TMR0CSR_INVERT_CLRMASK           equ    (~HW_TMR0CSR_INVERT_SETMASK)
                              101 HW_TMR0CSR_TIMER_CONTROL_CLRMASK    equ    (~HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                              102 HW_TMR0CSR_TIMER_STATUS_CLRMASK     equ    (~HW_TMR0CSR_TIMER_STATUS_SETMASK)
                              103 HW_TMR0CSR_TIMER_MODE_CLRMASK       equ    (~HW_TMR0CSR_TIMER_MODE_SETMASK)
                              104 HW_TMR0CSR_CLKGT_CLRMASK            equ    (~HW_TMR0CSR_CLKGT_SETMASK)
                              106 ;///////////////////////////////////////////////////////////////////////////////
                              107 ;  TIMER CSR (HW_TMR1CSR) Bit Definitions
                              108 HW_TMR1CSR_TIMER_ENABLE_BITPOS      equ    (0)
                              109 HW_TMR1CSR_TIMER_INT_EN_BITPOS      equ    (1)
                              110 HW_TMR1CSR_INVERT_BITPOS            equ    (2)
                              111 HW_TMR1CSR_TIMER_CONTROL_BITPOS     equ    (3)
                              112 HW_TMR1CSR_TIMER_STATUS_BITPOS      equ    (7)
                              113 HW_TMR1CSR_TIMER_MODE_BITPOS        equ    (8)
                              114 HW_TMR1CSR_CLKGT_BITPOS             equ    (23)
                              116 HW_TMR1CSR_TIMER_ENABLE_WIDTH       equ    (1)
                              117 HW_TMR1CSR_TIMER_INT_EN_WIDTH       equ    (1)
                              118 HW_TMR1CSR_INVERT_WIDTH             equ    (1)
                              119 HW_TMR1CSR_TIMER_CONTROL_WIDTH      equ    (3)
                              120 HW_TMR1CSR_TIMER_STATUS_WIDTH       equ    (1)
                              121 HW_TMR1CSR_TIMER_MODE_WIDTH         equ    (2)
                              122 HW_TMR1CSR_CLKGT_WIDTH              equ    (1)
                              124 HW_TMR1CSR_TIMER_ENABLE_SETMASK     equ    (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                              125 HW_TMR1CSR_TIMER_INT_EN_SETMASK     equ    (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                              126 HW_TMR1CSR_INVERT_SETMASK           equ    (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                              127 HW_TMR1CSR_TIMER_CONTROL_SETMASK    equ    (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                              128 HW_TMR1CSR_TIMER_STATUS_SETMASK     equ    (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                              129 HW_TMR1CSR_TIMER_MODE_SETMASK       equ    (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                              130 HW_TMR1CSR_CLKGT_SETMASK            equ    (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                              132 HW_TMR1CSR_TIMER_ENABLE_CLRMASK     equ    (~HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                              133 HW_TMR1CSR_TIMER_INT_EN_CLRMASK     equ    (~HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                              134 HW_TMR1CSR_INVERT_CLRMASK           equ    (~HW_TMR1CSR_INVERT_SETMASK)
                              135 HW_TMR1CSR_TIMER_CONTROL_CLRMASK    equ    (~HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                              136 HW_TMR1CSR_TIMER_STATUS_CLRMASK     equ    (~HW_TMR1CSR_TIMER_STATUS_SETMASK)
                              137 HW_TMR1CSR_TIMER_MODE_CLRMASK       equ    (~HW_TMR1CSR_TIMER_MODE_SETMASK)
                              138 HW_TMR1CSR_CLKGT_CLRMASK            equ    (~HW_TMR1CSR_CLKGT_SETMASK)
                              140 ;///////////////////////////////////////////////////////////////////////////////
                              141 ;  TIMER CSR (HW_TMR2CSR) Bit Definitions
                              142 HW_TMR2CSR_TIMER_ENABLE_BITPOS      equ    (0)
                              143 HW_TMR2CSR_TIMER_INT_EN_BITPOS      equ    (1)
                              144 HW_TMR2CSR_INVERT_BITPOS            equ    (2)
                              145 HW_TMR2CSR_TIMER_CONTROL_BITPOS     equ    (3)
                              146 HW_TMR2CSR_TIMER_STATUS_BITPOS      equ    (7)
                              147 HW_TMR2CSR_TIMER_MODE_BITPOS        equ    (8)
                              148 HW_TMR2CSR_CLKGT_BITPOS             equ    (23)
                              150 HW_TMR2CSR_TIMER_ENABLE_WIDTH       equ    (1)
                              151 HW_TMR2CSR_TIMER_INT_EN_WIDTH       equ    (1)
                              152 HW_TMR2CSR_INVERT_WIDTH             equ    (1)
                              153 HW_TMR2CSR_TIMER_CONTROL_WIDTH      equ    (3)
                              154 HW_TMR2CSR_TIMER_STATUS_WIDTH       equ    (1)
                              155 HW_TMR2CSR_TIMER_MODE_WIDTH         equ    (2)
                              156 HW_TMR2CSR_CLKGT_WIDTH              equ    (1)
                              158 HW_TMR2CSR_TIMER_ENABLE_SETMASK     equ    (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                              159 HW_TMR2CSR_TIMER_INT_EN_SETMASK     equ    (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                              160 HW_TMR2CSR_INVERT_SETMASK           equ    (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                              161 HW_TMR2CSR_TIMER_CONTROL_SETMASK    equ    (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                              162 HW_TMR2CSR_TIMER_STATUS_SETMASK     equ    (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                              163 HW_TMR2CSR_TIMER_MODE_SETMASK       equ    (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                              164 HW_TMR2CSR_CLKGT_SETMASK            equ    (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                              166 HW_TMR2CSR_TIMER_ENABLE_CLRMASK     equ    (~HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                              167 HW_TMR2CSR_TIMER_INT_EN_CLRMASK     equ    (~HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                              168 HW_TMR2CSR_INVERT_CLRMASK           equ    (~HW_TMR2CSR_INVERT_SETMASK)
                              169 HW_TMR2CSR_TIMER_CONTROL_CLRMASK    equ    (~HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                              170 HW_TMR2CSR_TIMER_STATUS_CLRMASK     equ    (~HW_TMR2CSR_TIMER_STATUS_SETMASK)
                              171 HW_TMR2CSR_TIMER_MODE_CLRMASK       equ    (~HW_TMR2CSR_TIMER_MODE_SETMASK)
                              172 HW_TMR2CSR_CLKGT_CLRMASK            equ    (~HW_TMR2CSR_CLKGT_SETMASK)
                              174 ;///////////////////////////////////////////////////////////////////////////////
                              175 ;  TIMER CSR (HW_TMR3CSR) Bit Definitions
                              176 HW_TMR3CSR_TIMER_ENABLE_BITPOS      equ    (0)
                              177 HW_TMR3CSR_TIMER_INT_EN_BITPOS      equ    (1)
                              178 HW_TMR3CSR_INVERT_BITPOS            equ    (2)
                              179 HW_TMR3CSR_TIMER_CONTROL_BITPOS     equ    (3)
                              180 HW_TMR3CSR_TIMER_STATUS_BITPOS      equ    (7)
                              181 HW_TMR3CSR_TIMER_MODE_BITPOS        equ    (8)
                              182 HW_TMR3CSR_CLKGT_BITPOS             equ    (23)
                              184 HW_TMR3CSR_TIMER_ENABLE_WIDTH       equ    (1)
                              185 HW_TMR3CSR_TIMER_INT_EN_WIDTH       equ    (1)
                              186 HW_TMR3CSR_INVERT_WIDTH             equ    (1)
                              187 HW_TMR3CSR_TIMER_CONTROL_WIDTH      equ    (3)
                              188 HW_TMR3CSR_TIMER_STATUS_WIDTH       equ    (1)
                              189 HW_TMR3CSR_TIMER_MODE_WIDTH         equ    (2)
                              190 HW_TMR3CSR_CLKGT_WIDTH              equ    (1)
                              192 HW_TMR3CSR_TIMER_ENABLE_SETMASK     equ    (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                              193 HW_TMR3CSR_TIMER_INT_EN_SETMASK     equ    (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                              194 HW_TMR3CSR_INVERT_SETMASK           equ    (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                              195 HW_TMR3CSR_TIMER_CONTROL_SETMASK    equ    (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                              196 HW_TMR3CSR_TIMER_STATUS_SETMASK     equ    (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                              197 HW_TMR3CSR_TIMER_MODE_SETMASK       equ    (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                              198 HW_TMR3CSR_CLKGT_SETMASK            equ    (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                              200 HW_TMR3CSR_TIMER_ENABLE_CLRMASK     equ    (~HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                              201 HW_TMR3CSR_TIMER_INT_EN_CLRMASK     equ    (~HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                              202 HW_TMR3CSR_INVERT_CLRMASK           equ    (~HW_TMR3CSR_INVERT_SETMASK)
                              203 HW_TMR3CSR_TIMER_CONTROL_CLRMASK    equ    (~HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                              204 HW_TMR3CSR_TIMER_STATUS_CLRMASK     equ    (~HW_TMR3CSR_TIMER_STATUS_SETMASK)
                              205 HW_TMR3CSR_TIMER_MODE_CLRMASK       equ    (~HW_TMR3CSR_TIMER_MODE_SETMASK)
                              206 HW_TMR3CSR_CLKGT_CLRMASK            equ    (~HW_TMR3CSR_CLKGT_SETMASK)
                              208 ;C insert
                              209 ;typedef union               
                              210 ;{
                              211 ;    struct {
                              212 ;       int TIMER_ENABLE              :1;
                              213 ;       int TIMER_INT_EN              :1;
                              214 ;       int INVERT                    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                              215 ;       int TIMER_CONTROL             :3;
                              216 ;       int RSVD0                     :1;
                              217 ;       int TIMER_STATUS              :1;
                              218 ;       int TIMER_MODE                :2;
                              219 ;       int RSVD1                     :13;
                              220 ;       int CLKGT                     :1;
                              221 ;    } B;
                              222 ;    int I;
                              223 ;} timercsr_type;
                              225 ;#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                              226 ;#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                              227 ;#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                              228 ;#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                              229 ;endc
                              231 ;///////////////////////////////////////////////////////////////////////////////
                              232 ;  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                              233 HW_TMR0CNTR_COUNT_BITPOS           equ    0
                              234 HW_TMR0CNTR_COUNT_WIDTH            equ    24
                              235 HW_TMR0CNTR_COUNT_SETMASK          equ    (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                              236 HW_TMR0CNTR_COUNT_CLRMASK          equ    (~HW_TMR0CNTR_COUNT_SETMASK)
                              238 ;///////////////////////////////////////////////////////////////////////////////
                              239 ;  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                              240 HW_TMR1CNTR_COUNT_BITPOS           equ    0
                              241 HW_TMR1CNTR_COUNT_WIDTH            equ    24
                              242 HW_TMR1CNTR_COUNT_SETMASK          equ    (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                              243 HW_TMR1CNTR_COUNT_CLRMASK          equ    (~HW_TMR1CNTR_COUNT_SETMASK)
                              245 ;///////////////////////////////////////////////////////////////////////////////
                              246 ;  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                              247 HW_TMR2CNTR_COUNT_BITPOS           equ    0
                              248 HW_TMR2CNTR_COUNT_WIDTH            equ    24
                              249 HW_TMR2CNTR_COUNT_SETMASK          equ    (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                              250 HW_TMR2CNTR_COUNT_CLRMASK          equ    (~HW_TMR2CNTR_COUNT_SETMASK)
                              252 ;C insert
                              253 ;typedef union               
                              254 ;{
                              255 ;    struct {
                              256 ;       int COUNT                    :24;
                              257 ;    } B;
                              258 ;    int I;
                              259 ;} tmrcntr_type;
                              260 ;#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                              261 ;#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                              262 ;#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                              263 ;#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                              264 ;endc
                              267  ;*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              268  ;
                              269  ; The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              270  ; to update the actual files. Only the defines needed to build SDK2.400 were added.   
                              271 HW_TIMER_BASEADDR                       equ     $F100
                              273 HW_TIMER0_BASEADDR                      equ     HW_TIMER_BASEADDR
                              274 HW_TIMER1_BASEADDR                      equ     HW_TIMER0_BASEADDR+$40
                              275 HW_TIMER2_BASEADDR                      equ     HW_TIMER1_BASEADDR+$40
                              276 HW_TIMER3_BASEADDR                      equ     HW_TIMER2_BASEADDR+$40
                              278 HW_TMR0CR                                               equ             HW_TMR0_BASEADDR
                              279 HW_TMR1CR                               equ             HW_TMR1_BASEADDR
                              280 HW_TMR2CR                               equ             HW_TMR2_BASEADDR
                              281 HW_TMR3CR                               equ     HW_TIMER3_BASEADDR
                              283 HW_TMRCR_TE_BITPOS                      equ     0   ; Timer enable
                              284 HW_TMR3CR_CG_BITPOS                     equ     23  ; Timer clock gating control
                              285 HW_TMR3CR_CG_SETMASK                    equ     1<<HW_TMR3CR_CG_BITPOS
                              286 HW_TMR3CR_CG_CLRMASK                    equ     ~HW_TMR3CR_CG_SETMASK
                               42         include "regsusb20.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;  File        : regsusb20ip.inc
                                4 ;;  Description : USB20 IP Register definition
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               34 regsusb20inc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               41 ;   USB2.0 STMP Registers 
                               42 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               43 HW_USB_BASEADDR             equ     ($F200)
                               45 ;ASM Only
                               46 HW_USBCSR                   equ     (HW_USB_BASEADDR)
                               47 HW_USBDMAOFF                equ     (HW_USB_BASEADDR+1)
                               48 HW_USBARCACCESS             equ     (HW_USB_BASEADDR+2) 
                               49 HW_USBARCDATALOW            equ     (HW_USB_BASEADDR+3)
                               50 HW_USBARCDATAHIGH           equ     (HW_USB_BASEADDR+4)
                               51 ;endasm
                               53 ;///////////////////////////////////////////////////////////////////////////////
                               54 ;  USB Control Status Register (HW_USBCSR) Bit Definitions
                               55 HW_USBCSR_USBEN_BITPOS                  equ     (0)
                               56 HW_USBCSR_WAKEUPIRQ_BITPOS              equ     (1)
                               57 HW_USBCSR_WAKEUPIE_BITPOS               equ     (2)
                               58 HW_USBCSR_VBUSCXIRQ_BITPOS             equ      (3)
                               59 HW_USBCSR_VBUSCXIE_BITPOS              equ      (4)
                               60 HW_USBCSR_VBUSDISCXIRQ_BITPOS           equ     (5)
                               61 HW_USBCSR_VBUSDISCXIE_BITPOS            equ     (6)
                               62 HW_USBCSR_CLKOFF_BITPOS                 equ     (7)
                               63 HW_USBCSR_SUSP_BITPOS                   equ     (8)
                               64 HW_USBCSR_SUSPF_BITPOS                  equ     (9)
                               65 HW_USBCSR_UTMITST_BITPOS                equ     (10)
                               66 HW_USBCSR_UTMI_EXT_BITPOS               equ     (11)
                               67 HW_USBCSR_PLUGGEDIN_EN_BITPOS                   equ             (12)
                               68 HW_USBCSR_PLUGGEDIN_BITPOS                              equ             (13)
                               69 HW_USBCSR_HOSTDISCONNECT_BITPOS                 equ             (22)
                               70 HW_USBCSR_VBUSSENSE_BITPOS              equ     (23)
                               72 HW_USBCSR_USBEN_SETMASK                 equ     (1<<HW_USBCSR_USBEN_BITPOS)        
                               73 HW_USBCSR_WAKEUPIRQ_SETMASK             equ     (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                               74 HW_USBCSR_WAKEUPIE_SETMASK              equ     (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                               75 HW_USBCSR_VBUSCXIRQ_SETMASK             equ     (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                               76 HW_USBCSR_VBUSCXIE_SETMASK              equ     (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                               77 HW_USBCSR_VBUSDISCXIRQ_SETMASK          equ     (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                               78 HW_USBCSR_VBUSDISCXIE_SETMASK           equ     (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                               79 HW_USBCSR_CLKOFF_SETMASK                equ     (1<<HW_USBCSR_CLKOFF_BITPOS)    
                               80 HW_USBCSR_SUSP_SETMASK                  equ     (1<<HW_USBCSR_SUSP_BITPOS)      
                               81 HW_USBCSR_SUSPF_SETMASK                 equ     (1<<HW_USBCSR_SUSPF_BITPOS)     
                               82 HW_USBCSR_UTMITST_SETMASK               equ     (1<<HW_USBCSR_UTMITST_BITPOS)   
                               83 HW_USBCSR_UTMI_EXT_SETMASK              equ     (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                               84 HW_USBCSR_VBUSSENSE_SETMASK             equ     (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                               87 HW_USBCSR_USBEN_CLRMASK                 equ    (~HW_USBCSR_USBEN_SETMASK)     
                               88 HW_USBCSR_WAKEUPIRQ_CLRMASK             equ    (~HW_USBCSR_WAKEUPIRQ_SETMASK) 
                               89 HW_USBCSR_WAKEUPIE_CLRMASK              equ    (~HW_USBCSR_WAKEUPIE_SETMASK)  
                               90 HW_USBCSR_VBUSCXIRQ_CLRMASK             equ    (~HW_USBCSR_VBUSCXIRQ_SETMASK)
                               91 HW_USBCSR_VBUSCXIE_CLRMASK              equ    (~HW_USBCSR_VBUSCXIE_SETMASK)
                               92 HW_USBCSR_VBUSDISCXIRQ_CLRMASK          equ    (~HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                               93 HW_USBCSR_VBUSDISCXIE_CLRMASK           equ    (~HW_USBCSR_VBUSDISCXIE_SETMASK) 
                               94 HW_USBCSR_CLKOFF_CLRMASK                equ    (~HW_USBCSR_CLKOFF_SETMASK)    
                               95 HW_USBCSR_SUSP_CLRMASK                  equ    (~HW_USBCSR_SUSP_SETMASK)      
                               96 HW_USBCSR_SUSPF_CLRMASK                 equ    (~HW_USBCSR_SUSPF_SETMASK)     
                               97 HW_USBCSR_UTMITST_CLRMASK               equ    (~HW_USBCSR_UTMITST_SETMASK)   
                               98 HW_USBCSR_UTMI_EXT_CLRMASK              equ    (~HW_USBCSR_UTMI_EXT_SETMASK) 
                               99 HW_USBCSR_VBUSSENSE_CLRMASK             equ    (~HW_USBCSR_VBUSSENSE_SETMASK) 
                              101 ;C insert
                              102 ;typedef union               
                              103 ;{
                              104 ;    struct {
                              105 ;        int USBEN          :1;
                              106 ;        int WAKEUPIRQ      :1;
                              107 ;        int WAKEUPIE       :1;
                              108 ;        int VBUSCXIRQ      :1;
                              109 ;        int VBUSCXIE       :1;
                              110 ;        int VBUSDISCXIRQ   :1;
                              111 ;        int VBUSDISCXIE    :1;
                              112 ;        int CLKOFF         :1;
                              113 ;        int SUSP           :1;
                              114 ;        int SUSPF          :1;
                              115 ;        int UTMITST        :1;
                              116 ;        int ARCCONNECT     :1;
                              117 ;        int PLUGGEDIN_EN   :1;
                              118 ;        int PLUGGEDIN      :1;
                              119 ;        int                :8;
                              120 ;        int HOSTDISCONNECT :1;
                              121 ;        int VBUSSENSE      :1;
                              123 ;    } B;
                              124 ;    int I;
                              125 ;} usbcsr_type;
                              127 ;#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                              128 ;endc
                              130 ;///////////////////////////////////////////////////////////////////////////////
                              131 ;  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                              132 HW_USBDMAOFF_MEM_BITPOS                 equ     (16)
                              134 HW_USBDMAOFF_ADD_SETMASK                equ     ($00FFFF)
                              135 HW_USBDMAOFF_MEM_SETMASK                equ     (3<<HW_USBDMAOFF_MEM_BITPOS)
                              137 HW_USBDMAOFF_ADD_CLRMASK                equ     (~HW_USBDMAOFF_ADD_SETMASK)
                              138 HW_USBDMAOFF_MEM_CLRMASK                equ     (~HW_USBDMAOFF_MEM_SETMASK)
                              140 ;C insert
                              141 ;typedef union               
                              142 ;{
                              143 ;    struct {
                              144 ;        int ADD            :16;
                              145 ;        int MEM            :2;
                              146 ;        int                :6;
                              147 ;    } B;
                              148 ;    int I;
                              149 ;} usbdmaoff_type;
                              151 ;#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                              152 ;endc
                              154 ;///////////////////////////////////////////////////////////////////////////////
                              155 ;  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                              156 HW_USBARCACCESS_RWB_BITPOS              equ     (16)
                              157 HW_USBARCACCESS_KICK_BITPOS             equ     (23)
                              159 HW_USBARCACCESS_ADD_SETMASK             equ     ($0001FF)
                              160 HW_USBARCACCESS_RWB_SETMASK             equ     (1<<HW_USBARCACCESS_RWB_BITPOS)
                              161 HW_USBARCACCESS_KICK_SETMASK            equ    (23<<HW_USBDMAOFF_MEM_BITPOS)
                              163 HW_USBARCACCESS_ADD_CLRMASK             equ    (~HW_USBARCACCESS_ADD_SETMASK)
                              164 HW_USBARCACCESS_RWB_CLRMASK             equ     (~HW_USBARCACCESS_RWB_SETMASK) 
                              165 HW_USBARCACCESS_KICK_CLRMASK            equ    (~HW_USBARCACCESS_KICK_SETMASK)
                              167 ;C insert
                              168 ;typedef union               
                              169 ;{
                              170 ;    struct {
                              171 ;        int ADD            :9;
                              172 ;        int                :7;
                              173 ;        int RWB            :1;
                              174 ;        int                :14;
                              175 ;        int KICK           :1;
                              176 ;    } B;
                              177 ;    int I;
                              178 ;} usbarcaccess_type;
                              180 ;#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                              181 ;endc
                              183 ;///////////////////////////////////////////////////////////////////////////////
                              184 ;  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                              185 HW_USBARCDATALOW_DATA_SETMASK           equ     ($00FFFF)
                              187 HW_USBARCDATALOW_ADD_CLRMASK            equ    (~HW_USBARCDATALOW_DATA_SETMASK)
                              189 ;C insert
                              190 ;typedef union               
                              191 ;{
                              192 ;    struct {
                              193 ;        int DATA           :16;
                              194 ;        int                :8;
                              195 ;    } B;
                              196 ;    int I;
                              197 ;} usbarcdatalow_type;
                              199 ;#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                              200 ;endc
                              202 ;///////////////////////////////////////////////////////////////////////////////
                              203 ;  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                              204 HW_USBARCDATAHIGH_DATA_SETMASK          equ     ($00FFFF)
                              206 HW_USBARCDATAHIGH_ADD_CLRMASK           equ    (~HW_USBARCDATAHIGH_DATA_SETMASK)
                              208 ;C insert
                              209 ;typedef union               
                              210 ;{
                              211 ;    struct {
                              212 ;        int DATA           :16;
                              213 ;        int                :8;
                              214 ;    } B;
                              215 ;    int I;
                              216 ;} usbarcdatahigh_type;
                              218 ;#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                              219 ;endc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                              222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              223 ;   USB2.0 ARC Registers 
                              224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              225 HW_ARC_BASE_ADDR            equ     ($0000)
                              227 HW_ARC_HCSPARAMS            equ     (HW_ARC_BASE_ADDR+$104)
                              228 HW_ARC_USBCMD               equ     (HW_ARC_BASE_ADDR+$140)
                              229 HW_ARC_USBSTS               equ     (HW_ARC_BASE_ADDR+$144)
                              230 HW_ARC_USBINTR              equ     (HW_ARC_BASE_ADDR+$148)
                              231 HW_ARC_DEVADDR              equ     (HW_ARC_BASE_ADDR+$154)
                              232 HW_ARC_ENDPTLISTADDR        equ     (HW_ARC_BASE_ADDR+$158)
                              233 HW_ARC_PORTSC1              equ     (HW_ARC_BASE_ADDR+$184)
                              234 HW_ARC_USBMODE              equ     (HW_ARC_BASE_ADDR+$1a8)
                              235 HW_ARC_ENDPTSETUPSTAT       equ     (HW_ARC_BASE_ADDR+$1ac)
                              236 HW_ARC_ENDPTPRIME           equ     (HW_ARC_BASE_ADDR+$1b0)
                              237 HW_ARC_ENDPTFLUSH           equ     (HW_ARC_BASE_ADDR+$1b4)
                              238 HW_ARC_ENDPTSTATUS          equ     (HW_ARC_BASE_ADDR+$1b8)
                              239 HW_ARC_ENDPTCOMPLETE        equ     (HW_ARC_BASE_ADDR+$1bc)
                              240 HW_ARC_ENDPTCTRL0           equ     (HW_ARC_BASE_ADDR+$1c0)
                              241 HW_ARC_ENDPTCTRL1           equ     (HW_ARC_BASE_ADDR+$1c4)
                              242 HW_ARC_ENDPTCTRL2           equ     (HW_ARC_BASE_ADDR+$1c8)
                              243 HW_ARC_ENDPTCTRL3           equ     (HW_ARC_BASE_ADDR+$1cc)
                              244 HW_ARC_ENDPTCTRL4           equ     (HW_ARC_BASE_ADDR+$1d0)
                              245 HW_ARC_ENDPTCTRL5           equ     (HW_ARC_BASE_ADDR+$1d4)
                              246 HW_ARC_ENDPTCTRL6           equ     (HW_ARC_BASE_ADDR+$1d8)
                              247 HW_ARC_ENDPTCTRL7           equ     (HW_ARC_BASE_ADDR+$1dc)
                              248 HW_ARC_ENDPTCTRL8           equ     (HW_ARC_BASE_ADDR+$1e0)
                              249 HW_ARC_ENDPTCTRL9           equ     (HW_ARC_BASE_ADDR+$1e4)
                              250 HW_ARC_ENDPTCTRL10          equ     (HW_ARC_BASE_ADDR+$1e8)
                              251 HW_ARC_ENDPTCTRL11          equ     (HW_ARC_BASE_ADDR+$1ec)
                              252 HW_ARC_ENDPTCTRL12          equ     (HW_ARC_BASE_ADDR+$1f0)
                              253 HW_ARC_ENDPTCTRL13          equ     (HW_ARC_BASE_ADDR+$1f4)
                              254 HW_ARC_ENDPTCTRL14          equ     (HW_ARC_BASE_ADDR+$1f8)
                              255 HW_ARC_ENDPTCTRL15          equ     (HW_ARC_BASE_ADDR+$1fc)
                              257 ;C insert
                              258 ;#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                              259 ;endc
                              260 ;///////////////////////////////////////////////////////////////////////////////
                              261 ;  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                              263 HW_ARC_HCSPARAMS_NPORTS_BITPOS      equ     (0)
                              264 HW_ARC_HCSPARAMS_PPC_BITPOS         equ     (4)
                              265 HW_ARC_HCSPARAMS_NPCC_BITPOS        equ     (8)
                              266 HW_ARC_HCSPARAMS_NCC_BITPOS         equ     (12)
                              267 HW_ARC_HCSPARAMS_PI_BITPOS          equ     (16)
                              268 HW_ARC_HCSPARAMS_NPTT_BITPOS        equ     (20)
                              269 HW_ARC_HCSPARAMS_NTT_BITPOS         equ     (24)
                              271 HW_ARC_HCSPARAMS_NPORTS_SETMASK     equ     (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                              272 HW_ARC_HCSPARAMS_PPC_SETMASK        equ     (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                              273 HW_ARC_HCSPARAMS_NPCC_SETMASK       equ     (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                              274 HW_ARC_HCSPARAMS_NCC_SETMASK        equ     (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                              275 HW_ARC_HCSPARAMS_PI_SETMASK         equ     (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                              276 HW_ARC_HCSPARAMS_NPTT_SETMASK       equ     (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                              277 HW_ARC_HCSPARAMS_NTT_SETMASK        equ     (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                              279 HW_ARC_HCSPARAMS_NPORTS_CLRMASK     equ     (~HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                              280 HW_ARC_HCSPARAMS_PPC_CLRMASK        equ     (~HW_ARC_HCSPARAMS_PPC_SETMASK)
                              281 HW_ARC_HCSPARAMS_NPCC_CLRMASK       equ     (~HW_ARC_HCSPARAMS_NPCC_SETMASK)
                              282 HW_ARC_HCSPARAMS_NCC_CLRMASK        equ     (~HW_ARC_HCSPARAMS_NCC_SETMASK)
                              283 HW_ARC_HCSPARAMS_PI_CLRMASK         equ     (~HW_ARC_HCSPARAMS_PI_SETMASK)  
                              284 HW_ARC_HCSPARAMS_NPTT_CLRMASK       equ     (~HW_ARC_HCSPARAMS_NPTT_SETMASK)
                              285 HW_ARC_HCSPARAMS_NTT_CLRMASK        equ     (~HW_ARC_HCSPARAMS_NTT_SETMASK)
                              287 ;C insert
                              288 ;typedef union               
                              289 ;{
                              290 ;    struct {
                              291 ;        int N_PORTS         :4;
                              292 ;        int PPC             :1;
                              293 ;        int                 :3;
                              294 ;        int N_PCC           :4;
                              295 ;        int N_CC            :4;
                              296 ;        int PI              :1;
                              297 ;        int                 :3;
                              298 ;        int N_PTT           :4;
                              299 ;        int N_TT            :4;
                              300 ;        int                 :20;
                              301 ;    } B;
                              302 ;    DWORD I;
                              303 ;} hcsparams_type;
                              305 ;// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                              306 ;endc
                              308 ;///////////////////////////////////////////////////////////////////////////////
                              309 ;  USB ARC Register USB Command (HW_ARC_USBCMD)
                              311 HW_ARC_USBCMD_RS_BITPOS         equ     (0)
                              312 HW_ARC_USBCMD_RST_BITPOS        equ     (1)
                              313 HW_ARC_USBCMD_FS0_BITPOS        equ     (2)
                              314 HW_ARC_USBCMD_FS1_BITPOS        equ     (3)
                              315 HW_ARC_USBCMD_PSE_BITPOS        equ     (4)
                              316 HW_ARC_USBCMD_ASE_BITPOS        equ     (5)
                              317 HW_ARC_USBCMD_IAA_BITPOS        equ     (6)
                              318 HW_ARC_USBCMD_LR_BITPOS         equ     (7)
                              319 HW_ARC_USBCMD_ASP0_BITPOS       equ     (8)
                              320 HW_ARC_USBCMD_ASP1_BITPOS       equ     (9)
                              321 HW_ARC_USBCMD_ASPE_BITPOS       equ     (11)
                              322 HW_ARC_USBCMD_FS2_BITPOS        equ     (15)
                              323 HW_ARC_USBCMD_ITC_BITPOS        equ     (16)
                              325 HW_ARC_USBCMD_RS_SETMASK        equ     (1<<HW_ARC_USBCMD_RS_BITPOS)                
                              326 HW_ARC_USBCMD_RST_SETMASK       equ     (1<<HW_ARC_USBCMD_RST_BITPOS)   
                              327 HW_ARC_USBCMD_FS0_SETMASK       equ     (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                              328 HW_ARC_USBCMD_FS1_SETMASK       equ     (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                              329 HW_ARC_USBCMD_PSE_SETMASK       equ     (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                              330 HW_ARC_USBCMD_ASE_SETMASK       equ     (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                              331 HW_ARC_USBCMD_IAA_SETMASK       equ     (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                              332 HW_ARC_USBCMD_LR_SETMASK        equ     (1<<HW_ARC_USBCMD_LR_BITPOS)        
                              333 HW_ARC_USBCMD_ASP0_SETMASK      equ     (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                              334 HW_ARC_USBCMD_ASP1_SETMASK      equ     (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                              335 HW_ARC_USBCMD_ASPE_SETMASK      equ     (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                              336 HW_ARC_USBCMD_FS2_SETMASK       equ     (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                              337 HW_ARC_USBCMD_ITC_SETMASK       equ     (255<<HW_ARC_USBCMD_ITC_BITPOS)
                              339 HW_ARC_USBCMD_RS_CLRMASK        equ     (~HW_ARC_USBCMD_RS_SETMASK)     
                              340 HW_ARC_USBCMD_RST_CLRMASK       equ     (~HW_ARC_USBCMD_RST_SETMASK)    
                              341 HW_ARC_USBCMD_FS0_CLRMASK       equ     (~HW_ARC_USBCMD_FS0_SETMASK)    
                              342 HW_ARC_USBCMD_FS1_CLRMASK       equ     (~HW_ARC_USBCMD_FS1_SETMASK)    
                              343 HW_ARC_USBCMD_PSE_CLRMASK       equ     (~HW_ARC_USBCMD_PSE_SETMASK)    
                              344 HW_ARC_USBCMD_ASE_CLRMASK       equ     (~HW_ARC_USBCMD_ASE_SETMASK)    
                              345 HW_ARC_USBCMD_IAA_CLRMASK       equ     (~HW_ARC_USBCMD_IAA_SETMASK)    
                              346 HW_ARC_USBCMD_LR_CLRMASK        equ     (~HW_ARC_USBCMD_LR_SETMASK) 
                              347 HW_ARC_USBCMD_ASP0_CLRMASK      equ     (~HW_ARC_USBCMD_ASP0_SETMASK)
                              348 HW_ARC_USBCMD_ASP1_CLRMASK      equ     (~HW_ARC_USBCMD_ASP1_SETMASK)
                              349 HW_ARC_USBCMD_ASPE_CLRMASK      equ     (~HW_ARC_USBCMD_ASPE_SETMASK)
                              350 HW_ARC_USBCMD_FS2_CLRMASK       equ     (~HW_ARC_USBCMD_FS2_SETMASK)    
                              351 HW_ARC_USBCMD_ITC_CLRMASK       equ     (~HW_ARC_USBCMD_ITC_SETMASK)    
                              353 ;C insert
                              354 ;typedef union               
                              355 ;{
                              356 ;    struct {
                              357 ;        int RS              :1;
                              358 ;        int RST             :1;
                              359 ;        int FS0             :1;
                              360 ;        int FS1             :1;
                              361 ;        int PSE             :1;
                              362 ;        int ASE             :1;
                              363 ;        int IAA             :1;
                              364 ;        int LR              :1;
                              365 ;        int ASP0            :1;
                              366 ;        int ASP1            :1;
                              367 ;        int                 :1;
                              368 ;        int ASPE            :1;
                              369 ;        int                 :3;
                              370 ;        int FS2             :1;
                              371 ;        int ITC             :8;
                              372 ;        int                 :24;
                              373 ;    } B;
                              374 ;    DWORD I;
                              375 ;} usbcmd_type;
                              377 ;//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                              378 ;endc
                              380 ;///////////////////////////////////////////////////////////////////////////////
                              381 ;  USB ARC Register USB Status (HW_ARC_USBSTS)
                              383 HW_ARC_USBSTS_UI_BITPOS         equ     (0)
                              384 HW_ARC_USBSTS_UEI_BITPOS        equ     (1)
                              385 HW_ARC_USBSTS_PCI_BITPOS        equ     (2)
                              386 HW_ARC_USBSTS_FRI_BITPOS        equ     (3)
                              387 HW_ARC_USBSTS_SEI_BITPOS        equ     (4)
                              388 HW_ARC_USBSTS_AAI_BITPOS        equ     (5)
                              389 HW_ARC_USBSTS_URI_BITPOS        equ     (6)
                              390 HW_ARC_USBSTS_SRI_BITPOS        equ     (7)
                              391 HW_ARC_USBSTS_SLI_BITPOS        equ     (8)
                              392 HW_ARC_USBSTS_HCH_BITPOS        equ     (12)
                              393 HW_ARC_USBSTS_RCL_BITPOS        equ     (13)
                              394 HW_ARC_USBSTS_PS_BITPOS         equ     (14)
                              395 HW_ARC_USBSTS_AS_BITPOS         equ     (15)
                              397 HW_ARC_USBSTS_UI_SETMASK        equ     (1<<HW_ARC_USBSTS_UI_BITPOS)    
                              398 HW_ARC_USBSTS_UEI_SETMASK       equ     (1<<HW_ARC_USBSTS_UEI_BITPOS)
                              399 HW_ARC_USBSTS_PCI_SETMASK       equ     (1<<HW_ARC_USBSTS_PCI_BITPOS)
                              400 HW_ARC_USBSTS_FRI_SETMASK       equ     (1<<HW_ARC_USBSTS_FRI_BITPOS)
                              401 HW_ARC_USBSTS_SEI_SETMASK       equ     (1<<HW_ARC_USBSTS_SEI_BITPOS)
                              402 HW_ARC_USBSTS_AAI_SETMASK       equ     (1<<HW_ARC_USBSTS_AAI_BITPOS)
                              403 HW_ARC_USBSTS_URI_SETMASK       equ     (1<<HW_ARC_USBSTS_URI_BITPOS)
                              404 HW_ARC_USBSTS_SRI_SETMASK       equ     (1<<HW_ARC_USBSTS_SRI_BITPOS)
                              405 HW_ARC_USBSTS_SLI_SETMASK       equ     (1<<HW_ARC_USBSTS_SLI_BITPOS)
                              406 HW_ARC_USBSTS_HCH_SETMASK       equ     (1<<HW_ARC_USBSTS_HCH_BITPOS)
                              407 HW_ARC_USBSTS_RCL_SETMASK       equ     (1<<HW_ARC_USBSTS_RCL_BITPOS)
                              408 HW_ARC_USBSTS_PS_SETMASK        equ     (1<<HW_ARC_USBSTS_PS_BITPOS)    
                              409 HW_ARC_USBSTS_AS_SETMASK        equ     (1<<HW_ARC_USBSTS_AS_BITPOS)    
                              411 HW_ARC_USBSTS_UI_CLRMASK        equ     (~HW_ARC_USBSTS_UI_SETMASK)
                              412 HW_ARC_USBSTS_UEI_CLRMASK       equ     (~HW_ARC_USBSTS_UEI_SETMASK)
                              413 HW_ARC_USBSTS_PCI_CLRMASK       equ     (~HW_ARC_USBSTS_PCI_SETMASK)
                              414 HW_ARC_USBSTS_FRI_CLRMASK       equ     (~HW_ARC_USBSTS_FRI_SETMASK)
                              415 HW_ARC_USBSTS_SEI_CLRMASK       equ     (~HW_ARC_USBSTS_SEI_SETMASK)
                              416 HW_ARC_USBSTS_AAI_CLRMASK       equ     (~HW_ARC_USBSTS_AAI_SETMASK)
                              417 HW_ARC_USBSTS_URI_CLRMASK       equ     (~HW_ARC_USBSTS_URI_SETMASK)
                              418 HW_ARC_USBSTS_SRI_CLRMASK       equ     (~HW_ARC_USBSTS_SRI_SETMASK)
                              419 HW_ARC_USBSTS_SLI_CLRMASK       equ     (~HW_ARC_USBSTS_SLI_SETMASK)
                              420 HW_ARC_USBSTS_HCH_CLRMASK       equ     (~HW_ARC_USBSTS_HCH_SETMASK)
                              421 HW_ARC_USBSTS_RCL_CLRMASK       equ     (~HW_ARC_USBSTS_RCL_SETMASK)
                              422 HW_ARC_USBSTS_PS_CLRMASK        equ     (~HW_ARC_USBSTS_PS_SETMASK)
                              423 HW_ARC_USBSTS_AS_CLRMASK        equ     (~HW_ARC_USBSTS_AS_SETMASK)
                              426 ;C insert
                              427 ;typedef union               
                              428 ;{
                              429 ;    struct {
                              430 ;        int UI              :1;
                              431 ;        int UEI             :1;
                              432 ;        int PCI             :1;
                              433 ;        int FRI             :1;
                              434 ;        int SEI             :1;
                              435 ;        int AAI             :1;
                              436 ;        int URI             :1;
                              437 ;        int STI             :1;
                              438 ;        int SLI             :1;
                              439 ;        int                 :3;
                              440 ;        int HCH             :1;
                              441 ;        int RCL             :1;
                              442 ;        int PS              :1;
                              443 ;        int AS              :1;
                              444 ;        int                 :24;
                              445 ;    } B;
                              446 ;    DWORD I;
                              447 ;} usbsts_type;
                              449 ;//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                              450 ;endc
                              452 ;///////////////////////////////////////////////////////////////////////////////
                              453 ;  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                              455 HW_ARC_USBINTR_UE_BITPOS        equ     (0)
                              456 HW_ARC_USBINTR_UEE_BITPOS       equ     (1)
                              457 HW_ARC_USBINTR_PCE_BITPOS       equ     (2)
                              458 HW_ARC_USBINTR_FRE_BITPOS       equ     (3)
                              459 HW_ARC_USBINTR_SEE_BITPOS       equ     (4)
                              460 HW_ARC_USBINTR_AAE_BITPOS       equ     (5)
                              461 HW_ARC_USBINTR_URE_BITPOS       equ     (6)
                              462 HW_ARC_USBINTR_SRE_BITPOS       equ     (7)
                              463 HW_ARC_USBINTR_SLE_BITPOS       equ     (8)
                              465 HW_ARC_USBINTR_UE_SETMASK       equ     (1<<HW_ARC_USBINTR_UE_BITPOS)   
                              466 HW_ARC_USBINTR_UEE_SETMASK      equ     (1<<HW_ARC_USBINTR_UEE_BITPOS)
                              467 HW_ARC_USBINTR_PCE_SETMASK      equ     (1<<HW_ARC_USBINTR_PCE_BITPOS)
                              468 HW_ARC_USBINTR_FRE_SETMASK      equ     (1<<HW_ARC_USBINTR_FRE_BITPOS)
                              469 HW_ARC_USBINTR_SEE_SETMASK      equ     (1<<HW_ARC_USBINTR_SEE_BITPOS)
                              470 HW_ARC_USBINTR_AAE_SETMASK      equ     (1<<HW_ARC_USBINTR_AAE_BITPOS)
                              471 HW_ARC_USBINTR_URE_SETMASK      equ     (1<<HW_ARC_USBINTR_URE_BITPOS)
                              472 HW_ARC_USBINTR_SRE_SETMASK      equ     (1<<HW_ARC_USBINTR_SRE_BITPOS)
                              473 HW_ARC_USBINTR_SLE_SETMASK      equ     (1<<HW_ARC_USBINTR_SLE_BITPOS)
                              475 HW_ARC_USBINTR_UE_CLRMASK       equ     (~HW_ARC_USBINTR_UE_SETMASK)
                              476 HW_ARC_USBINTR_UEE_CLRMASK      equ     (~HW_ARC_USBINTR_UEE_SETMASK)
                              477 HW_ARC_USBINTR_PCE_CLRMASK      equ     (~HW_ARC_USBINTR_PCE_SETMASK)
                              478 HW_ARC_USBINTR_FRE_CLRMASK      equ     (~HW_ARC_USBINTR_FRE_SETMASK)
                              479 HW_ARC_USBINTR_SEE_CLRMASK      equ     (~HW_ARC_USBINTR_SEE_SETMASK)
                              480 HW_ARC_USBINTR_AAE_CLRMASK      equ     (~HW_ARC_USBINTR_AAE_SETMASK)
                              481 HW_ARC_USBINTR_URE_CLRMASK      equ     (~HW_ARC_USBINTR_URE_SETMASK)
                              482 HW_ARC_USBINTR_SRE_CLRMASK      equ     (~HW_ARC_USBINTR_SRE_SETMASK)
                              483 HW_ARC_USBINTR_SLE_CLRMASK      equ     (~HW_ARC_USBINTR_SLE_SETMASK)
                              486 ;C insert
                              487 ;typedef union               
                              488 ;{
                              489 ;    struct {
                              490 ;        int UE              :1;
                              491 ;        int UEE             :1;
                              492 ;        int PCE             :1;
                              493 ;        int FRE             :1;
                              494 ;        int SEE             :1;
                              495 ;        int AAE             :1;
                              496 ;        int URE             :1;
                              497 ;        int STE             :1;
                              498 ;        int SLE             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                              499 ;        int                 :39;
                              500 ;    } B;
                              501 ;    DWORD I;
                              502 ;} usbintr_type;
                              504 ;//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                              505 ;endc
                              508 ;///////////////////////////////////////////////////////////////////////////////
                              509 ;  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                              511 HW_ARC_DEVADDR_ADD_BITPOS       equ     (25)
                              513 HW_ARC_DEVADDR_ADD_SETMASK      equ     (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                              515 HW_ARC_DEVEADDR_ADD_CLRMASK     equ     (~HW_ARC_DEVADDR_ADD_SETMASK)   
                              517 ;C insert
                              518 ;typedef union               
                              519 ;{
                              520 ;    struct {
                              521 ;        int                 :25;
                              522 ;        int ADD             :7;
                              523 ;        int                 :16;
                              524 ;    } B;
                              525 ;    DWORD I;
                              526 ;} devaddr_type;
                              528 ;//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                              529 ;endc
                              532 ;///////////////////////////////////////////////////////////////////////////////
                              533 ;  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                              535 HW_ARC_ENDPTLISTADDR_ADD_BITPOS     equ     (11)
                              537 HW_ARC_ENDPTLISTADDR_ADD_SETMASK    equ     ($400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                              539 HW_ARC_ENDPTLISTADDR_ADD_CLRMASK    equ     (~HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                              541 ;C insert
                              542 ;typedef union               
                              543 ;{
                              544 ;    struct {
                              545 ;        int                 :10;
                              546 ;        int ADD             :22;
                              547 ;        int                 :16;
                              548 ;    } B;
                              549 ;    DWORD I;
                              550 ;} endptlistaddr_type;
                              552 ;//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                              553 ;endc
                              556 ;///////////////////////////////////////////////////////////////////////////////
                              557 ;  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                              559 HW_ARC_PORTSC1_CCS_BITPOS       equ     (0)
                              560 HW_ARC_PORTSC1_CSC_BITPOS       equ     (1)
                              561 HW_ARC_PORTSC1_PE_BITPOS        equ     (2)
                              562 HW_ARC_PORTSC1_PEC_BITPOS       equ     (3)
                              563 HW_ARC_PORTSC1_OCA_BITPOS       equ     (4)
                              564 HW_ARC_PORTSC1_OCC_BITPOS       equ     (5)
                              565 HW_ARC_PORTSC1_FPR_BITPOS       equ     (6)
                              566 HW_ARC_PORTSC1_SUSP_BITPOS      equ     (7)
                              567 HW_ARC_PORTSC1_PR_BITPOS        equ     (8)
                              568 HW_ARC_PORTSC1_HSP_BITPOS       equ     (9)
                              569 HW_ARC_PORTSC1_LS_BITPOS        equ     (10)
                              570 HW_ARC_PORTSC1_PP_BITPOS        equ     (12)
                              571 HW_ARC_PORTSC1_PO_BITPOS        equ     (13)
                              572 HW_ARC_PORTSC1_PIC_BITPOS       equ     (14)
                              573 HW_ARC_PORTSC1_PTC_BITPOS       equ     (16)
                              574 HW_ARC_PORTSC1_WKCN_BITPOS      equ     (20)
                              575 HW_ARC_PORTSC1_WKDS_BITPOS      equ     (21)
                              576 HW_ARC_PORTSC1_WKOC_BITPOS      equ     (22)
                              577 HW_ARC_PORTSC1_PHCD_BITPOS      equ     (23)
                              578 HW_ARC_PORTSC1_PFSC_BITPOS      equ     (24)
                              579 HW_ARC_PORTSC1_PSPD_BITPOS      equ     (26)
                              580 HW_ARC_PORTSC1_PTW_BITPOS       equ     (29)
                              581 HW_ARC_PORTSC1_STS_BITPOS       equ     (30)
                              582 HW_ARC_PORTSC1_PTS_BITPOS       equ     (31)
                              584 HW_ARC_PORTSC1_CCS_SETMASK      equ     (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                              585 HW_ARC_PORTSC1_CSC_SETMASK      equ     (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                              586 HW_ARC_PORTSC1_PE_SETMASK       equ     (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                              587 HW_ARC_PORTSC1_PEC_SETMASK      equ     (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                              588 HW_ARC_PORTSC1_OCA_SETMASK      equ     (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                              589 HW_ARC_PORTSC1_OCC_SETMASK      equ     (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                              590 HW_ARC_PORTSC1_FPR_SETMASK      equ     (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                              591 HW_ARC_PORTSC1_SUSP_SETMASK     equ     (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                              592 HW_ARC_PORTSC1_PR_SETMASK       equ     (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                              593 HW_ARC_PORTSC1_HSP_SETMASK      equ     (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                              594 HW_ARC_PORTSC1_LS_SETMASK       equ     (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                              595 HW_ARC_PORTSC1_PP_SETMASK       equ     (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                              596 HW_ARC_PORTSC1_PO_SETMASK       equ     (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                              597 HW_ARC_PORTSC1_PIC_SETMASK      equ     (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                              598 HW_ARC_PORTSC1_PTC_SETMASK      equ     (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                              599 HW_ARC_PORTSC1_WKCN_SETMASK     equ     (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                              600 HW_ARC_PORTSC1_WKDS_SETMASK     equ     (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                              601 HW_ARC_PORTSC1_WKOC_SETMASK     equ     (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                              602 HW_ARC_PORTSC1_PHCD_SETMASK     equ     (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                              604 ; We need to equate the following label like this due to a sign extension problem
                              605 ; if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                              606 HW_ARC_PORTSC1_PFSC_SETMASK     equ     ($01000000)
                              608 HW_ARC_PORTSC1_PSPD_SETMASK     equ     (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                              609 HW_ARC_PORTSC1_PTW_SETMASK      equ     (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                              610 HW_ARC_PORTSC1_STS_SETMASK      equ     (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                              611 HW_ARC_PORTSC1_PTS_SETMASK      equ     (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                              613 HW_ARC_PORTSC1_CCS_CLRMASK      equ     (~HW_ARC_PORTSC1_CCS_SETMASK)   
                              614 HW_ARC_PORTSC1_CSC_CLRMASK      equ     (~HW_ARC_PORTSC1_CSC_SETMASK)   
                              615 HW_ARC_PORTSC1_PE_CLRMASK       equ     (~HW_ARC_PORTSC1_PE_SETMASK)    
                              616 HW_ARC_PORTSC1_PEC_CLRMASK      equ     (~HW_ARC_PORTSC1_PEC_SETMASK)   
                              617 HW_ARC_PORTSC1_OCA_CLRMASK      equ     (~HW_ARC_PORTSC1_OCA_SETMASK)   
                              618 HW_ARC_PORTSC1_OCC_CLRMASK      equ     (~HW_ARC_PORTSC1_OCC_SETMASK)   
                              619 HW_ARC_PORTSC1_FPR_CLRMASK      equ     (~HW_ARC_PORTSC1_FPR_SETMASK)   
                              620 HW_ARC_PORTSC1_SUSP_CLRMASK     equ     (~HW_ARC_PORTSC1_SUSP_SETMASK)
                              621 HW_ARC_PORTSC1_PR_CLRMASK       equ     (~HW_ARC_PORTSC1_PR_SETMASK)    
                              622 HW_ARC_PORTSC1_HSP_CLRMASK      equ     (~HW_ARC_PORTSC1_HSP_SETMASK)   
                              623 HW_ARC_PORTSC1_LS_CLRMASK       equ     (~HW_ARC_PORTSC1_LS_SETMASK)    
                              624 HW_ARC_PORTSC1_PP_CLRMASK       equ     (~HW_ARC_PORTSC1_PP_SETMASK)    
                              625 HW_ARC_PORTSC1_PO_CLRMASK       equ     (~HW_ARC_PORTSC1_PO_SETMASK)    
                              626 HW_ARC_PORTSC1_PIC_CLRMASK      equ     (~HW_ARC_PORTSC1_PIC_SETMASK)   
                              627 HW_ARC_PORTSC1_PTC_CLRMASK      equ     (~HW_ARC_PORTSC1_PTC_SETMASK)   
                              628 HW_ARC_PORTSC1_WKCN_CLRMASK     equ     (~HW_ARC_PORTSC1_WKCN_SETMASK)
                              629 HW_ARC_PORTSC1_WKDS_CLRMASK     equ     (~HW_ARC_PORTSC1_WKDS_SETMASK)
                              630 HW_ARC_PORTSC1_WKOC_CLRMASK     equ     (~HW_ARC_PORTSC1_WKOC_SETMASK)
                              631 HW_ARC_PORTSC1_PHCD_CLRMASK     equ     (~HW_ARC_PORTSC1_PHCD_SETMASK)
                              632 HW_ARC_PORTSC1_PFSC_CLRMASK     equ     (~HW_ARC_PORTSC1_PFSC_SETMASK)
                              633 HW_ARC_PORTSC1_PSPD_CLRMASK     equ     (~HW_ARC_PORTSC1_PSPD_SETMASK)
                              634 HW_ARC_PORTSC1_PTW_CLRMASK      equ     (~HW_ARC_PORTSC1_PTW_SETMASK)   
                              635 HW_ARC_PORTSC1_STS_CLRMASK      equ     (~HW_ARC_PORTSC1_STS_SETMASK)   
                              636 HW_ARC_PORTSC1_PTS_CLRMASK      equ     (~HW_ARC_PORTSC1_PTS_SETMASK)   
                              638 ;C insert
                              639 ;typedef union               
                              640 ;{
                              641 ;    struct {
                              642 ;        int CCS             :1;
                              643 ;        int CSC             :1;
                              644 ;        int PE              :1;
                              645 ;        int PEC             :1;
                              646 ;        int OCA             :1;
                              647 ;        int OCC             :1;
                              648 ;        int FPR             :1;
                              649 ;        int SUSP            :1;
                              650 ;        int PR              :1;
                              651 ;        int HSP             :1;
                              652 ;        int LS              :2;
                              653 ;        int PP              :1;
                              654 ;        int PO              :1;
                              655 ;        int PIC             :2;
                              656 ;        int PTC             :4;
                              657 ;        int WKCN            :1;
                              658 ;        int WKDS            :1;
                              659 ;        int WKOC            :1;
                              660 ;        int PHCD            :1;
                              661 ;        int PFSC            :1;
                              662 ;        int                 :1;
                              663 ;        int PSPD            :2;
                              664 ;        int                 :1;
                              665 ;        int PTW             :1;
                              666 ;        int STS             :1;
                              667 ;        int PTS             :1;
                              668 ;        int                 :16;
                              669 ;    } B;
                              670 ;    DWORD I;
                              671 ;} portsc1_type;
                              673 ;//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                              674 ;endc
                              677 ;///////////////////////////////////////////////////////////////////////////////
                              678 ;  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                              680 HW_ARC_USBMODE_CM_BITPOS        equ     (0)
                              681 HW_ARC_USBMODE_ES_BITPOS        equ     (2)
                              683 HW_ARC_USBMODE_CM_SETMASK       equ     (3<<HW_ARC_USBMODE_CM_BITPOS)   
                              684 HW_ARC_USBMODE_ES_SETMASK       equ     (1<<HW_ARC_USBMODE_ES_BITPOS)   
                              686 HW_ARC_USBMODE_CM_CLRMASK       equ     (~HW_ARC_USBMODE_CM_SETMASK) 
                              687 HW_ARC_USBMODE_ES_CLRMASK       equ     (~HW_ARC_USBMODE_ES_SETMASK)    
                              689 ;C insert
                              690 ;typedef union               
                              691 ;{
                              692 ;    struct {
                              693 ;        int CM              :2;
                              694 ;        int ES              :1;
                              695 ;        int                 :46;
                              696 ;    } B;
                              697 ;    DWORD I;
                              698 ;} usbmode_type;
                              700 ;//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                              701 ;endc
                              704 ;///////////////////////////////////////////////////////////////////////////////
                              705 ;  The following endpoint equates are common for the following registers
                              707 ENDPOINT0_BITPOS        equ     (0)
                              708 ENDPOINT1_BITPOS        equ     (1)
                              709 ENDPOINT2_BITPOS        equ     (2)
                              710 ENDPOINT3_BITPOS        equ     (3)
                              711 ENDPOINT4_BITPOS        equ     (4)
                              712 ENDPOINT5_BITPOS        equ     (5)
                              713 ENDPOINT6_BITPOS        equ     (6)
                              714 ENDPOINT7_BITPOS        equ     (7)
                              715 ENDPOINT8_BITPOS        equ     (8)
                              716 ENDPOINT9_BITPOS        equ     (9)
                              717 ENDPOINT10_BITPOS       equ     (10)
                              718 ENDPOINT11_BITPOS       equ     (11)
                              719 ENDPOINT12_BITPOS       equ     (12)
                              720 ENDPOINT13_BITPOS       equ     (13)
                              721 ENDPOINT14_BITPOS       equ     (14)
                              722 ENDPOINT15_BITPOS       equ     (15)
                              724 ENDPOINT0_SETMASK       equ     (1<<ENDPOINT0_BITPOS)
                              725 ENDPOINT1_SETMASK       equ     (1<<ENDPOINT1_BITPOS)
                              726 ENDPOINT2_SETMASK       equ     (1<<ENDPOINT2_BITPOS)
                              727 ENDPOINT3_SETMASK       equ     (1<<ENDPOINT3_BITPOS)
                              728 ENDPOINT4_SETMASK       equ     (1<<ENDPOINT4_BITPOS)
                              729 ENDPOINT5_SETMASK       equ     (1<<ENDPOINT5_BITPOS)
                              730 ENDPOINT6_SETMASK       equ     (1<<ENDPOINT6_BITPOS)
                              731 ENDPOINT7_SETMASK       equ     (1<<ENDPOINT7_BITPOS)
                              732 ENDPOINT8_SETMASK       equ     (1<<ENDPOINT8_BITPOS)
                              733 ENDPOINT9_SETMASK       equ     (1<<ENDPOINT9_BITPOS)
                              734 ENDPOINT10_SETMASK      equ     (1<<ENDPOINT10_BITPOS)
                              735 ENDPOINT11_SETMASK      equ     (1<<ENDPOINT11_BITPOS)
                              736 ENDPOINT12_SETMASK      equ     (1<<ENDPOINT12_BITPOS)
                              737 ENDPOINT13_SETMASK      equ     (1<<ENDPOINT13_BITPOS)
                              738 ENDPOINT14_SETMASK      equ     (1<<ENDPOINT14_BITPOS)
                              739 ENDPOINT15_SETMASK      equ     (1<<ENDPOINT15_BITPOS)
                              741 ENDPOINT0_CLRMASK       equ     (~ENDPOINT0_SETMASK)    
                              742 ENDPOINT1_CLRMASK       equ     (~ENDPOINT1_SETMASK)    
                              743 ENDPOINT2_CLRMASK       equ     (~ENDPOINT2_SETMASK)    
                              744 ENDPOINT3_CLRMASK       equ     (~ENDPOINT3_SETMASK)    
                              745 ENDPOINT4_CLRMASK       equ     (~ENDPOINT4_SETMASK)    
                              746 ENDPOINT5_CLRMASK       equ     (~ENDPOINT5_SETMASK)    
                              747 ENDPOINT6_CLRMASK       equ     (~ENDPOINT6_SETMASK)    
                              748 ENDPOINT7_CLRMASK       equ     (~ENDPOINT7_SETMASK)    
                              749 ENDPOINT8_CLRMASK       equ     (~ENDPOINT8_SETMASK)    
                              750 ENDPOINT9_CLRMASK       equ     (~ENDPOINT9_SETMASK)    
                              751 ENDPOINT10_CLRMASK      equ     (~ENDPOINT10_SETMASK)
                              752 ENDPOINT11_CLRMASK      equ     (~ENDPOINT11_SETMASK)
                              753 ENDPOINT12_CLRMASK      equ     (~ENDPOINT12_SETMASK)
                              754 ENDPOINT13_CLRMASK      equ     (~ENDPOINT13_SETMASK)
                              755 ENDPOINT14_CLRMASK      equ     (~ENDPOINT14_SETMASK)
                              756 ENDPOINT15_CLRMASK      equ     (~ENDPOINT15_SETMASK)
                              758 ;C insert
                              759 ;typedef union               
                              760 ;{
                              761 ;    struct {
                              762 ;        int EP0              :1;
                              763 ;        int EP1              :1;
                              764 ;        int EP2              :1;
                              765 ;        int EP3              :1;
                              766 ;        int EP4              :1;
                              767 ;        int EP5              :1;
                              768 ;        int EP6              :1;
                              769 ;        int EP7              :1;
                              770 ;        int EP8              :1;
                              771 ;        int EP9              :1;
                              772 ;        int EP10             :1;
                              773 ;        int EP11             :1;
                              774 ;        int EP12             :1;
                              775 ;        int EP13             :1;
                              776 ;        int EP14             :1;
                              777 ;        int EP15             :1;
                              778 ;        int                  :32;
                              779 ;    } B;
                              780 ;    DWORD I;
                              781 ;} endpsetupstat_type;
                              782 ;
                              783 ;//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                              784 ;
                              785 ;typedef union               
                              786 ;{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                              787 ;    struct {
                              788 ;        int EP0              :1;
                              789 ;        int EP1              :1;
                              790 ;        int EP2              :1;
                              791 ;        int EP3              :1;
                              792 ;        int EP4              :1;
                              793 ;        int EP5              :1;
                              794 ;        int EP6              :1;
                              795 ;        int EP7              :1;
                              796 ;        int EP8              :1;
                              797 ;        int EP9              :1;
                              798 ;        int EP10             :1;
                              799 ;        int EP11             :1;
                              800 ;        int EP12             :1;
                              801 ;        int EP13             :1;
                              802 ;        int EP14             :1;
                              803 ;        int EP15             :1;
                              804 ;        int                  :8;
                              805 ;    } B;
                              806 ;    WORD I;
                              807 ;} endpt_type;
                              808 ;
                              809 ;typedef union
                              810 ;{
                              811 ;   struct {
                              812 ;       endpt_type  RX;
                              813 ;       endpt_type  TX;
                              814 ;   } W;
                              815 ;   DWORD DW;
                              816 ;} endptrxtx_type;
                              817 ;
                              818 ;//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                              819 ;//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                              820 ;//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                              821 ;//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                              822 ;
                              823 ;endc
                              826 ;///////////////////////////////////////////////////////////////////////////////
                              827 ;  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                              829 HW_ARC_ENDPTCTRL_RXS_BITPOS     equ     (0)
                              830 HW_ARC_ENDPTCTRL_RXD_BITPOS     equ     (1)
                              831 HW_ARC_ENDPTCTRL_RXT_BITPOS     equ     (2)
                              832 HW_ARC_ENDPTCTRL_RXI_BITPOS     equ     (5)
                              833 HW_ARC_ENDPTCTRL_RXR_BITPOS     equ     (6)
                              834 HW_ARC_ENDPTCTRL_RXE_BITPOS     equ     (7)
                              835 HW_ARC_ENDPTCTRL_TXS_BITPOS     equ     (16)
                              836 HW_ARC_ENDPTCTRL_TXD_BITPOS     equ     (17)
                              837 HW_ARC_ENDPTCTRL_TXT_BITPOS     equ     (18)
                              838 HW_ARC_ENDPTCTRL_TXI_BITPOS     equ     (21)
                              839 HW_ARC_ENDPTCTRL_TXR_BITPOS     equ     (22)
                              840 HW_ARC_ENDPTCTRL_TXE_BITPOS     equ     (23)
                              842 HW_ARC_ENDPTCTRL_RXS_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                              843 HW_ARC_ENDPTCTRL_RXD_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                              844 HW_ARC_ENDPTCTRL_RXT_SETMASK    equ     (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                              845 HW_ARC_ENDPTCTRL_RXI_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                              846 HW_ARC_ENDPTCTRL_RXR_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                              847 HW_ARC_ENDPTCTRL_RXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                              848 HW_ARC_ENDPTCTRL_TXS_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                              849 HW_ARC_ENDPTCTRL_TXD_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                              850 HW_ARC_ENDPTCTRL_TXT_SETMASK    equ     (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                              851 HW_ARC_ENDPTCTRL_TXI_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                              852 HW_ARC_ENDPTCTRL_TXR_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                              854 ; We need to equate the following label like this due to a sign extension problem
                              855 ; if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                              856 HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     ($00800000)
                              857 ;HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                              859 HW_ARC_ENDPTCTRL_RXS_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXS_SETMASK)
                              860 HW_ARC_ENDPTCTRL_RXD_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXD_SETMASK)
                              861 HW_ARC_ENDPTCTRL_RXT_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXT_SETMASK)
                              862 HW_ARC_ENDPTCTRL_RXI_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXI_SETMASK)
                              863 HW_ARC_ENDPTCTRL_RXR_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXR_SETMASK)
                              864 HW_ARC_ENDPTCTRL_RXE_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXE_SETMASK)
                              865 HW_ARC_ENDPTCTRL_TXS_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXS_SETMASK)
                              866 HW_ARC_ENDPTCTRL_TXD_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXD_SETMASK)
                              867 HW_ARC_ENDPTCTRL_TXT_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXT_SETMASK)
                              868 HW_ARC_ENDPTCTRL_TXI_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXI_SETMASK)
                              869 HW_ARC_ENDPTCTRL_TXR_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXR_SETMASK)
                              870 HW_ARC_ENDPTCTRL_TXE_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXE_SETMASK)
                              873 ;C insert
                              874 ;typedef union               
                              875 ;{
                              876 ;    struct {
                              877 ;        int RXS             :1;
                              878 ;        int RXD             :1;
                              879 ;        int RXT             :2;
                              880 ;        int                 :1;
                              881 ;        int RXI             :1;
                              882 ;        int RXR             :1;
                              883 ;        int RXE             :1;
                              884 ;        int                 :8;
                              885 ;        int TXS             :1;
                              886 ;        int TXD             :1;
                              887 ;        int TXT             :2;
                              888 ;        int                 :1;
                              889 ;        int TXI             :1;
                              890 ;        int TXR             :1;
                              891 ;        int TXE             :1;
                              892 ;        int                 :24;
                              893 ;    } B;
                              894 ;    DWORD I;
                              895 ;} endptctrl_type;
                              897 ;//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                              898 ;endc
                               43         include "regsusb20phy.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2005
                                3 ;;  File        : regsusbphy.inc
                                4 ;;  Description : USB20 PHY Register definition
                                5 ;;  Updated 2.23.2003 By M. Henson
                                6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                8 ; The following naming conventions are followed in this file.
                                9 ; All registers are named using the format...
                               10 ;     HW_<module>_<regname>
                               11 ; where <module> is the module name which can be any of the following...
                               12 ;     USB20
                               13 ; (Note that when there is more than one copy of a particular module, the
                               14 ; module name includes a number starting from 0 for the first instance of
                               15 ; that module)
                               16 ;
                               17 ; <regname> is the specific register within that module
                               18 ;
                               19 ; We also define the following...
                               20 ;
                               21 ;     HW_<module>_<regname>_BITPOS
                               22 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               23 ;
                               24 ;     HW_<module>_<regname>_SETMASK
                               25 ; which does something else, and
                               26 ;
                               27 ;     HW_<module>_<regname>_CLRMASK
                               28 ; which does something else.
                               29 ;
                               30 ; Other rules
                               31 ;     All caps
                               32 ;     Numeric identifiers start at 0
                               35 regsusbphyinc            equ         1
                               37 ;C insert
                               38 ;#include "types.h"
                               39 ;endc
                               41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 ;   USB2.0 PHY STMP Registers 
                               43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               44 HW_USBPHY_BASEADDR             equ     ($F210)
                               46 ;ASM Only
                               47 HW_USBPHYPWD                   equ     (HW_USBPHY_BASEADDR)
                               48 HW_USBPHYTX                    equ     (HW_USBPHY_BASEADDR+1)
                               49 HW_USBPHYPLL                   equ     (HW_USBPHY_BASEADDR+2)
                               50 HW_USBPHYRX                    equ     (HW_USBPHY_BASEADDR+3)
                               51 ;endasm
                               53 ;///////////////////////////////////////////////////////////////////////////////
                               54 ;  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                               56 HW_USBPHYPWD_TXDISCON1500_BITPOS           equ     (5)
                               57 HW_USBPHYPWD_PLLVCOPWD_BITPOS              equ     (6)
                               58 HW_USBPHYPWD_PLLVCPPWD_BITPOS              equ     (7)
                               59 HW_USBPHYPWD_TXPWDFS_BITPOS                equ     (10)
                               60 HW_USBPHYPWD_TXPWDIBIAS_BITPOS             equ     (11)
                               61 HW_USBPHYPWD_TXPWDV2I_BITPOS               equ     (12)
                               62 HW_USBPHYPWD_TXPWDVBG_BITPOS               equ     (13)
                               63 HW_USBPHYPWD_TXPWDCOMP_BITPOS              equ     (14)
                               64 HW_USBPHYPWD_RXPWDDISCONDET_BITPOS         equ     (16)
                               65 HW_USBPHYPWD_RXPWDENV_BITPOS               equ     (17)
                               66 HW_USBPHYPWD_RXPWD1PT1_BITPOS              equ     (18)
                               67 HW_USBPHYPWD_RXPWDDIFF_BITPOS              equ     (19)
                               68 HW_USBPHYPWD_RXPWDRX_BITPOS                equ     (20)
                               69 HW_USBPHYPWD_PWDIBIAS_BITPOS               equ     (22)
                               70 HW_USBPHYPWD_REGRESET_BITPOS               equ     (23)
                               72 HW_USBPHYPWD_TXDISCON1500_SETMASK          equ     (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                               73 HW_USBPHYPWD_PLLVCOPWD_SETMASK             equ     (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                               74 HW_USBPHYPWD_PLLVCPPWD_SETMASK             equ     (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                               75 HW_USBPHYPWD_TXPWDFS_SETMASK               equ     (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                               76 HW_USBPHYPWD_TXPWDIBIAS_SETMASK            equ     (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                               77 HW_USBPHYPWD_TXPWDV2I_SETMASK              equ     (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                               78 HW_USBPHYPWD_TXPWDVBG_SETMASK              equ     (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                               79 HW_USBPHYPWD_TXPWDCOMP_SETMASK             equ     (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                               80 HW_USBPHYPWD_RXPWDDISCONDET_SETMASK        equ     (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                               81 HW_USBPHYPWD_RXPWDENV_SETMASK              equ     (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                               82 HW_USBPHYPWD_RXPWD1PT1_SETMASK             equ     (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                               83 HW_USBPHYPWD_RXPWDDIFF_SETMASK             equ     (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                               84 HW_USBPHYPWD_RXPWDRX_SETMASK               equ     (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                               85 HW_USBPHYPWD_PWDIBIAS_SETMASK              equ     (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                               86 HW_USBPHYPWD_REGRESET_SETMASK              equ     (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                               88 HW_USBPHYPWD_TXDISCON1500_CLRMASK          equ     (~HW_USBPHYPWD_TXDISCON1500_SETMASK)
                               89 HW_USBPHYPWD_PLLVCOPWD_CLRMASK             equ     (~HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                               90 HW_USBPHYPWD_PLLVCPPWD_CLRMASK             equ     (~HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                               91 HW_USBPHYPWD_TXPWDFS_CLRMASK               equ     (~HW_USBPHYPWD_TXPWDFS_SETMASK)
                               92 HW_USBPHYPWD_TXPWDIBIAS_CLRMASK            equ     (~HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                               93 HW_USBPHYPWD_TXPWDV2I_CLRMASK              equ     (~HW_USBPHYPWD_TXPWDV2I_SETMASK)
                               94 HW_USBPHYPWD_TXPWDVBG_CLRMASK              equ     (~HW_USBPHYPWD_TXPWDVBG_SETMASK)
                               95 HW_USBPHYPWD_TXPWDCOMP_CLRMASK             equ     (~HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                               96 HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK        equ     (~HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                               97 HW_USBPHYPWD_RXPWDENV_CLRMASK              equ     (~HW_USBPHYPWD_RXPWDENV_SETMASK)
                               98 HW_USBPHYPWD_RXPWD1PT1_CLRMASK             equ     (~HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                               99 HW_USBPHYPWD_RXPWDDIFF_CLRMASK             equ     (~HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                              100 HW_USBPHYPWD_RXPWDRX_CLRMASK               equ     (~HW_USBPHYPWD_RXPWDRX_SETMASK)
                              101 HW_USBPHYPWD_PWDIBIAS_CLRMASK              equ     (~HW_USBPHYPWD_PWDIBIAS_SETMASK)
                              102 HW_USBPHYPWD_REGRESET_CLRMASK              equ     (~HW_USBPHYPWD_REGRESET_SETMASK)
                              104 ;C insert
                              105 ;typedef union               
                              106 ;{
                              107 ;    struct {
                              108 ;        int RSVD0          :5;
                              109 ;        int TXDISCON1500   :1;
                              110 ;        int PLLVCOPWD      :1;
                              111 ;        int PLLVCPPWD      :1;
                              112 ;        int RSVD1          :2;
                              113 ;        int TXPWDFS        :1;
                              114 ;        int TXPWDIBIAS     :1;
                              115 ;        int TXPWDV2I       :1;
                              116 ;        int TXPWDVBG       :1;
                              117 ;        int TXPWDCOMP      :1;
                              118 ;        int RSVD2          :1;
                              119 ;        int RXPWDDISCONDET :1;
                              120 ;        int RXPWDENV       :1;
                              121 ;        int RXPWD1PT1      :1;
                              122 ;        int RXPWDDIFF      :1;
                              123 ;        int RXPWDRX        :1;
                              124 ;        int RSVD3          :1;
                              125 ;        int PWDIBIAS       :1;
                              126 ;        int REGRESET       :1;
                              127 ;    } B;
                              128 ;    int I;
                              129 ;} usbphypwd_type;
                              131 ;#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                              132 ;endc
                              134 ;///////////////////////////////////////////////////////////////////////////////
                              135 ;  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                              136 HW_USBPHYTX_TXCAL1500_BITPOS               equ     (0)
                              137 HW_USBPHYTX_TXENCAL1500_BITPOS             equ     (5)
                              138 HW_USBPHYTX_TXHSXCVR_BITPOS                equ     (6)
                              139 HW_USBPHYTX_TXCALIBRATE_BITPOS             equ     (7)
                              140 HW_USBPHYTX_TXCAL45DN_BITPOS               equ     (8)
                              141 HW_USBPHYTX_TXENCAL45DN_BITPOS             equ     (13)
                              142 HW_USBPHYTX_TXHSTERM_BITPOS                equ     (14)
                              143 HW_USBPHYTX_TXSKEW_BITPOS                  equ     (15)
                              144 HW_USBPHYTX_TXCAL45DP_BITPOS               equ     (16)
                              145 HW_USBPHYTX_TXENCAL45DP_BITPOS             equ     (21)
                              146 HW_USBPHYTX_TXFSHIZ_BITPOS                 equ     (22)
                              147 HW_USBPHYTX_TXCOMPOUT_BITPOS               equ     (23)
                              149 HW_USBPHYTX_TXCAL1500_WIDTH                equ     (4)
                              150 HW_USBPHYTX_TXENCAL1500_WIDTH              equ     (1)
                              151 HW_USBPHYTX_TXHSXCVR_WIDTH                 equ     (1)
                              152 HW_USBPHYTX_TXCALIBRATE_WIDTH              equ     (1)
                              153 HW_USBPHYTX_TXCAL45DN_WIDTH                equ     (4)
                              154 HW_USBPHYTX_TXENCAL45DN_WIDTH              equ     (1)
                              155 HW_USBPHYTX_TXHSTERM_WIDTH                 equ     (1)
                              156 HW_USBPHYTX_TXSKEW_WIDTH                   equ     (1)
                              157 HW_USBPHYTX_TXCAL45DP_WIDTH                equ     (4)
                              158 HW_USBPHYTX_TXENCAL45DP_WIDTH              equ     (1)
                              159 HW_USBPHYTX_TXFSHIZ_WIDTH                  equ     (1)
                              160 HW_USBPHYTX_TXCOMPOUT_WIDTH                equ     (1)
                              162 HW_USBPHYTX_TXCAL1500_SETMASK              equ     (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                              163 HW_USBPHYTX_TXENCAL1500_SETMASK            equ     (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                              164 HW_USBPHYTX_TXHSXCVR_SETMASK               equ     (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                              165 HW_USBPHYTX_TXCALIBRATE_SETMASK            equ     (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                              166 HW_USBPHYTX_TXCAL45DN_SETMASK              equ     (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                              167 HW_USBPHYTX_TXENCAL45DN_SETMASK            equ     (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                              168 HW_USBPHYTX_TXHSTERM_SETMASK               equ     (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                              169 HW_USBPHYTX_TXSKEW_SETMASK                 equ     (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                              170 HW_USBPHYTX_TXCAL45DP_SETMASK              equ     (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                              171 HW_USBPHYTX_TXENCAL45DP_SETMASK            equ     (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                              172 HW_USBPHYTX_TXFSHIZ_SETMASK                equ     (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                              173 HW_USBPHYTX_TXCOMPOUT_SETMASK              equ     (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                              175 HW_USBPHYTX_TXCAL1500_CLRMASK              equ     (~HW_USBPHYTX_TXCAL1500_SETMASK)
                              176 HW_USBPHYTX_TXENCAL1500_CLRMASK            equ     (~HW_USBPHYTX_TXENCAL1500_SETMASK)
                              177 HW_USBPHYTX_TXHSXCVR_CLRMASK               equ     (~HW_USBPHYTX_TXHSXCVR_SETMASK)
                              178 HW_USBPHYTX_TXCALIBRATE_CLRMASK            equ     (~HW_USBPHYTX_TXCALIBRATE_SETMASK)
                              179 HW_USBPHYTX_TXCAL45DN_CLRMASK              equ     (~HW_USBPHYTX_TXCAL45DN_SETMASK)
                              180 HW_USBPHYTX_TXENCAL45DN_CLRMASK            equ     (~HW_USBPHYTX_TXENCAL45DN_SETMASK)
                              181 HW_USBPHYTX_TXHSTERM_CLRMASK               equ     (~HW_USBPHYTX_TXHSTERM_SETMASK)
                              182 HW_USBPHYTX_TXSKEW_CLRMASK                 equ     (~HW_USBPHYTX_TXSKEW_SETMASK)
                              183 HW_USBPHYTX_TXCAL45DP_CLRMASK              equ     (~HW_USBPHYTX_TXCAL45DP_SETMASK)
                              184 HW_USBPHYTX_TXENCAL45DP_CLRMASK            equ     (~HW_USBPHYTX_TXENCAL45DP_SETMASK)
                              185 HW_USBPHYTX_TXFSHIZ_CLRMASK                equ     (~HW_USBPHYTX_TXFSHIZ_SETMASK)
                              186 HW_USBPHYTX_TXCOMPOUT_CLRMASK              equ     (~HW_USBPHYTX_TXCOMPOUT_SETMASK)
                              188 ;C insert
                              189 ;typedef union               
                              190 ;{
                              191 ;    struct {
                              192 ;        int TXCAL1500          :4;
                              193 ;        int RSVD0              :1;
                              194 ;        int TXENCAL1500        :1;
                              195 ;        int TXHSXCVR           :1;
                              196 ;        int TXCALIBRATE        :1;
                              197 ;        int TXCAL45DN          :4;
                              198 ;        int RSVD1              :1;
                              199 ;        int TXENCAL45DN        :1;
                              200 ;        int TXHSTERM           :1;
                              201 ;        int TXSKEW             :1;
                              202 ;        int TXCAL45DP          :4;
                              203 ;        int RSVD2              :1;
                              204 ;        int TXENCAL45DP        :1;
                              205 ;        int TXFSHIZ            :1;
                              206 ;        int TXCOMPOUT          :1;
                              207 ;    } B;
                              208 ;    int I;
                              209 ;} usbphytx_type;
                              211 ;#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                              212 ;endc
                              214 ;///////////////////////////////////////////////////////////////////////////////
                              215 ;  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                              216 HW_USBPHYPLL_PLLV2ISEL_BITPOS              equ     (0)
                              217 HW_USBPHYPLL_PLLCPDBLIP_BITPOS             equ     (5)
                              218 HW_USBPHYPLL_PLLVCOCLK2_BITPOS             equ     (6)
                              219 HW_USBPHYPLL_PLLVCOCLK24_BITPOS            equ     (7)
                              220 HW_USBPHYPLL_PLLCPNSEL_BITPOS              equ     (8)
                              221 HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS           equ     (12)
                              222 HW_USBPHYPLL_PLLPFDRST_BITPOS              equ     (20)
                              223 HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS          equ     (21)
                              224 HW_USBPHYPLL_PLLVCOKSTART_BITPOS           equ     (22)
                              225 HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS          equ     (23)
                              227 HW_USBPHYPLL_PLLV2ISEL_WIDTH               equ     (4)
                              228 HW_USBPHYPLL_PLLCPDBLIP_WIDTH              equ     (1)
                              229 HW_USBPHYPLL_PLLVCOCLK2_WIDTH              equ     (1)
                              230 HW_USBPHYPLL_PLLVCOCLK24_WIDTH             equ     (1)
                              231 HW_USBPHYPLL_PLLCPNSEL_WIDTH               equ     (4)
                              232 HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH            equ     (4)
                              233 HW_USBPHYPLL_PLLPFDRST_WIDTH               equ     (1)
                              234 HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH           equ     (1)
                              235 HW_USBPHYPLL_PLLVCOKSTART_WIDTH            equ     (1)
                              236 HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH           equ     (1)
                              238 HW_USBPHYPLL_PLLV2ISEL_SETMASK             equ     (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                              239 HW_USBPHYPLL_PLLCPDBLIP_SETMASK            equ     (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                              240 HW_USBPHYPLL_PLLVCOCLK2_SETMASK            equ     (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                              241 HW_USBPHYPLL_PLLVCOCLK24_SETMASK           equ     (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                              242 HW_USBPHYPLL_PLLCPNSEL_SETMASK             equ     (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                              243 HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK          equ     (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                              244 HW_USBPHYPLL_PLLPFDRST_SETMASK             equ     (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                              245 HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK         equ     (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                              246 HW_USBPHYPLL_PLLVCOKSTART_SETMASK          equ     (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                              247 HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK         equ     (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                              249 HW_USBPHYPLL_PLLV2ISEL_CLRMASK             equ     (~HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                              250 HW_USBPHYPLL_PLLCPDBLIP_CLRMASK            equ     (~HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                              251 HW_USBPHYPLL_PLLVCOCLK2_CLRMASK            equ     (~HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                              252 HW_USBPHYPLL_PLLVCOCLK24_CLRMASK           equ     (~HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                              253 HW_USBPHYPLL_PLLCPNSEL_CLRMASK             equ     (~HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                              254 HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK          equ     (~HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                              255 HW_USBPHYPLL_PLLPFDRST_CLRMASK             equ     (~HW_USBPHYPLL_PLLPFDRST_SETMASK)
                              256 HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK         equ     (~HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                              257 HW_USBPHYPLL_PLLVCOKSTART_CLRMASK          equ     (~HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                              258 HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK         equ     (~HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                              260 ;C insert
                              261 ;typedef union               
                              262 ;{
                              263 ;    struct {
                              264 ;        int PLLV2ISEL        :4;
                              265 ;        int RSVD0            :1;
                              266 ;        int PLLCPDBLIP       :1;
                              267 ;        int PLLVCOCLK2       :1;
                              268 ;        int PLLVCOCLK24      :1;
                              269 ;        int PLLCPNSEL        :4;
                              270 ;        int PLLCLKDIVSEL     :4;
                              271 ;        int RSVD1            :4;
                              272 ;        int PLLPFDRST        :1;
                              273 ;        int PLLCPSHORTLFR    :1;
                              274 ;        int PLLVCOKSTART     :1;
                              275 ;        int PLLCLKDIVRSTZ    :1;
                              276 ;    } B;
                              277 ;    int I;
                              278 ;} usbphypll_type;
                              280 ;#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                              281 ;endc
                              283 ;///////////////////////////////////////////////////////////////////////////////
                              284 ;  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                              285 HW_USBRX_ENVADJ_BITPOS                      equ     (0)
                              286 HW_USBRX_DISCONADJ_BITPOS                   equ     (4)
                              287 HW_USBRX_DEBUGMODE_BITPOS                   equ     (8)
                              288 HW_USBRX_PLLLKTIMECTL_BITPOS                equ     (12)
                              289 HW_USBRX_PLLCKDIVCTL_BITPOS                 equ     (16)
                              290 HW_USBRX_HOSTMODETEST_BITPOS                equ     (20)
                              291 HW_USBRX_FSCKSOURCESEL_BITPOS               equ     (21)
                              292 HW_USBRX_REGRXDBYPASS_BITPOS                equ     (22)
                              293 HW_USBRX_PLLLOCKED_BITPOS                   equ     (23)
                              295 HW_USBRX_ENVADJ_WIDTH                       equ     (4)
                              296 HW_USBRX_DISCONADJ_WIDTH                    equ     (4)
                              297 HW_USBRX_DEBUGMODE_WIDTH                    equ     (4)
                              298 HW_USBRX_PLLLKTIMECTL_WIDTH                 equ     (4)
                              299 HW_USBRX_PLLCKDIVCTL_WIDTH                  equ     (4)
                              300 HW_USBRX_HOSTMODETEST_WIDTH                 equ     (1)
                              301 HW_USBRX_FSCKSOURCESEL_WIDTH                equ     (1)
                              302 HW_USBRX_REGRXDBYPASS_WIDTH                 equ     (1)
                              303 HW_USBRX_PLLLOCKED_WIDTH                    equ     (1)
                              305 HW_USBRX_ENVADJ_SETMASK                     equ     (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                              306 HW_USBRX_DISCONADJ_SETMASK                  equ     (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                              307 HW_USBRX_DEBUGMODE_SETMASK                  equ     (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                              308 HW_USBRX_PLLLKTIMECTL_SETMASK               equ     (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                              309 HW_USBRX_PLLCKDIVCTL_SETMASK                equ     (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                              310 ; 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                              311 ;              480Mhz/7 =68.57Mhz
                              312 HW_USBPHYRX_PLLDIV_BY_7                     equ     $060000
                              314 ;              480Mhz/8 ~60Mhz
                              315 HW_USBPHYRX_PLLDIV_BY_8                     equ     $070000
                              317 ;              480Mhz/9 =53.3Mhz
                              318 HW_USBPHYRX_PLLDIV_BY_9                     equ     $080000
                              320 ;              480Mhz/10 =48Mhz
                              321 HW_USBPHYRX_PLLDIV_BY_10                    equ     $090000
                              324 HW_USBRX_HOSTMODETEST_SETMASK               equ     (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                              325 HW_USBRX_FSCKSOURCESEL_SETMASK              equ     (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                              326 HW_USBRX_REGRXDBYPASS_SETMASK               equ     (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                              327 HW_USBRX_PLLLOCKED_SETMASK                  equ     (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                              329 HW_USBRX_ENVADJ_CLRMASK                     equ     (~HW_USBRX_ENVADJ_SETMASK)
                              330 HW_USBRX_DISCONADJ_CLRMASK                  equ     (~HW_USBRX_DISCONADJ_SETMASK)
                              331 HW_USBRX_DEBUGMODE_CLRMASK                  equ     (~HW_USBRX_DEBUGMODE_SETMASK)
                              332 HW_USBRX_PLLLKTIMECTL_CLRMASK               equ     (~HW_USBRX_PLLLKTIMECTL_SETMASK)
                              333 HW_USBRX_PLLCKDIVCTL_CLRMASK                equ     (~HW_USBRX_PLLCKDIVCTL_SETMASK)
                              334 HW_USBRX_HOSTMODETEST_CLRMASK               equ     (~HW_USBRX_HOSTMODETEST_SETMASK)
                              335 HW_USBRX_FSCKSOURCESEL_CLRMASK              equ     (~HW_USBRX_FSCKSOURCESEL_SETMASK)
                              336 HW_USBRX_REGRXDBYPASS_CLRMASK               equ     (~HW_USBRX_REGRXDBYPASS_SETMASK)
                              337 HW_USBRX_PLLLOCKED_CLRMASK                  equ     (~HW_USBRX_PLLLOCKED_SETMASK)
                              339 ;C insert
                              340 ;typedef union               
                              341 ;{
                              342 ;    struct {
                              343 ;     int ENVADJ               :4;
                              344 ;     int DISCONADJ            :4;
                              345 ;     int DEBUGMODE            :4;
                              346 ;     int PLLLKTIMECTL         :4;
                              347 ;     int PLLCKDIVCTL          :4;
                              348 ;     int HOSTMODETEST         :1;
                              349 ;     int FSCKSOURCESEL        :1;
                              350 ;     int REGRXDBYPASS         :1;
                              351 ;     int PLLLOCKED            :1;
                              352 ;    } B;
                              353 ;    int I;
                              354 ;} usbphyrx_type;
                              356 ;#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                              357 ;endc
                               44 ;endasm
                               46 ;C insert
                               47 ;#include "types.h"
                               48 ;#include "regsclkctrl.h"
                               49 ;#include "regscore.h"
                               50 ;#include "regscodec.h"
                               51 ;#include "regsdcdc.h"
                               52 ;#include "regsemc.h"
                               53 ;#include "regsgpio.h"
                               54 ;#include "regsi2c.h"
                               55 ;#include "regsi2s.h"
                               56 ;#include "regsicoll.h"
                               57 ;#include "regslradc.h"
                               58 ;#include "regspwm.h"
                               59 ;#include "regsrevision.h"
                               60 ;#include "regsrtc.h"
                               61 ;#include "regsspare.h"
                               62 ;#include "regsspi.h"
                               63 ;#include "regsswizzle.h"
                               64 ;#include "regssdram.h"
                               65 ;#include "regstb.h"
                               66 ;#include "regstimer.h"
                               67 ;#include "regsusb20.h"
                               68 ;#include "regsusb20phy.h"
                               69 ;endc
                               70                              
                               11                 include "dacequ.inc"
                                2 dacequ equ 1
                                4         page 255,255
                                7 FlashBufSize          equ     441             ; The size of the Flash buffer 
                                8 FlashBufModulo        equ     FlashBufSize-1  ; The modulo of the MP3 decode buffer
                               11 DacBlockSize          equ     $40             ; The size of the block we process at each interrupt
                               13 DacBufSize            equ     $200            ; Use $41 for Sim only : Temporary : The buffer size dedicated to the DAC port
                               17 DacBufModulo          equ     DacBufSize-1    ; The modulo of the DAC buffer 
                               19 SimOutL               equ     $8000
                               20 SimOutR               equ     $8001
                               22 DacCoef1Taps          equ     35
                               23 DacData1Size          equ     DacCoef1Taps/2+1
                               24 ;DacOutputBufferSize  equ     DacData1Size*8
                               27 ;; DAC 
                               28 ;; Source frq -> Target 
                               29 ;; 48.000 kHz -> 48kHz = (((8*48/48    ) - 1) * $010000) =   =>  DACSRR = $070000 
                               30 ;; 44.100 kHz -> 48kHz = (((8*48/44.1  ) - 1) * $010000) =   =>  DACSRR = $07b51e 
                               31 ;; 32.000 kHz -> 48kHz = (((8*48/32    ) - 1) * $010000) =   =>  DACSRR = $0b0000 
                               32 ;; 24.000 kHz -> 48kHz = (((8*48/24    ) - 1) * $010000) =   =>  DACSRR = $0f0000 
                               33 ;; 22.050 kHz -> 48kHz = (((8*48/22.05 ) - 1) * $010000) =   =>  DACSRR = $106a3b 
                               34 ;; 16.000 kHz -> 48kHz = (((8*48/16    ) - 1) * $010000) =   =>  DACSRR = $170000 
                               35 ;; 12.000 kHz -> 48kHz = (((8*48/12    ) - 1) * $010000) =   =>  DACSRR = $1f0000 
                               36 ;; 11.025 kHz -> 48kHz = (((8*48/11.025) - 1) * $010000) =   =>  DACSRR = $21d476 
                               37 ;;  8.000 kHz -> 48kHz = (((8*48/8     ) - 1) * $010000) =   =>  DACSRR = $2f0000 
                               40 ; setting for 24MHz crystal, xtal/4=6MHz
                               41 DAC48kHz              equ     $06d000         ; load into DACSRR
                               42 DAC44_1kHz            equ     $0780df
                               43 DAC32kHz              equ     $0ab800
                               44 DAC24kHz              equ     $0ea000
                               45 DAC22_05kHz           equ     $1001be
                               46 DAC16kHz              equ     $167000
                               47 DAC12kHz              equ     $1e4000
                               48 DAC11_025kHz          equ     $21037c
                               49 DAC8kHz               equ     $2de000
                               12                 include "stack.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 Decoder Xrefs
                                5 ;******************************************************************************
                                8 STACK_XREF equ 1
                                9 ;Functions    
                               17     
                               13                 include "stackmem.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 Stack Xrefs
                                5 ;******************************************************************************
                                8 STACKMEM_XREF equ 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                                9 ;Functions
                               10 ;       None
                               12 ; Variable in Y
                               14                 include "sysequ.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; System defs
                                5 ;///////////////////////////////////////////////////////////////////////////////
                                8 SYSEQU_INC equ 1
                               10 SOFTTIMER_CONTINUOUS_EVENT equ  0
                               13 HOLD_BUTTON_REPORTED_BITMASK  equ  4
                               16 ; Decoder types
                               17 DECODER_TYPE_MP3        equ     0
                               18 DECODER_TYPE_WMA        equ     1
                               19 DECODER_TYPE_AAC        equ     2
                               20 DECODER_TYPE_ADPCM_IMA  equ     3
                               21 DECODER_TYPE_ADPCM_MS   equ     4
                               22 DECODER_TYPE_PCM        equ     5
                               23 DECODER_TYPE_STFM       equ     6
                               25 ; Encoder types
                               26 ENCODER_TYPE_ADPCM_IMA  equ     0
                               27 ENCODER_TYPE_PCM        equ     1
                               28 ENCODER_TYPE_MP3        equ     2
                               30 ; EncoderSR/EncoderCSR bit equates.  Also uses Stop & Play below.
                               31 EncNotEnoughSpace       equ     0
                               32 EncRanOutOfSpace        equ     1
                               33 EncRecordError          equ     2
                               34 EncToldToStop           equ     3
                               35 EncAlreadyRecording  equ     4
                               36 ; ENCODER_STOPPED       equ     6   ; As RecorderStateMachine.h
                               37 EncWarnLowSpace         equ     7
                               38 EncWarningSent          equ     8
                               39 ; ENCODER_RECORDING     equ     12
                               41 ; DecoderSR/DecoderCSR bit equates
                               42 DecoderIgnoreMessages  equ     0   ;  This bit is set when the decoder sends a message to the parser and is 
                               43                                     ;  waiting for a response.
                               44 VBRFlag              equ     1
                               45 RepeatSong           equ     2
                               46 RepeatAll            equ     3
                               47 Random               equ     4
                               48 Pause                equ     5
                               49 Stop                 equ     6
                               50 Rwnd                 equ     7
                               51 Ffwd                 equ     8
                               52 TimeMode             equ     9
                               53 DecSync              equ     10    ; set when Fstatus_o = 1 for mp3 
                               54 Play                 equ     12
                               55 EndOfSong            equ     13    ; starting with sdk2.105: changed to set when decoder done instead of when file reads done 
                               56 EndOfList            equ     14
                               57 SongInfo             equ     15
                               58 FileIsOpen           equ     16    ; set when a song file is currently opened by the decoder
                               59 SkipBlockHeader      equ     17    ; used by parser
                               60 ABMode_A             equ     18
                               61 ABMode_B             equ     19
                               62 ABQuiet              equ     20
                               63 BadFile              equ     21    ; set if bad file encountered
                               64 SyncWait             equ     22    ; mp3 decoder looking for sync
                               65 FileReadError        equ     23    ; error reading file, duh
                               67 ; DecoderCSR2 bit equates
                               68 EndOfFileReached         equ     0  ;Set when EOF reached, prevent freads beyond EOF 
                               69 TimeNeedsUpdate      equ     1  ; Set when need to allow LCD to update time
                               72 ; ParserVoiceCSR bits (specific to voice files)
                               73 RepeatOneFile        equ     0     ; repeat playing current file
                               74 RepeatAllFiles       equ     1     ; continuously loop through files
                               75 LoopOnce             equ     2     ; start at current file, play all files, then stop
                               77 ; DecAdpcmFlags bits (used by ADPCM decoders)
                               78 WaveHeaderFound      equ     0       ; Set to '1' when header unpacked, cleared during StopCurrentSong
                               85     
                               86 ; Scratch area stuff
                               88 SCRATCH_USER_Y_SIZE             equ 512
                               89 SCRATCH_USER_X_SIZE             equ 256
                              100 SCRATCH_USER_X_SIZE_BYTES   equ     SCRATCH_USER_X_SIZE*3
                              101 SCRATCH_USER_X_MODULO       equ     SCRATCH_USER_X_SIZE-1
                              102 SCRATCH_USER_Y_SIZE_BYTES   equ     SCRATCH_USER_Y_SIZE*3
                              103 SCRATCH_USER_Y_MODULO       equ     SCRATCH_USER_Y_SIZE-1
                              105 ; Boot ROM execute location
                              106 BootExecuteCommand      equ     $012B
                              108 BOOT_USB            equ     $000002
                              109 BOOT_SMARTMEDIA     equ     $000004
                              110 BOOT_COMPACTFLASH   equ     $000005
                              111 BOOT_I2C_SLAVE      equ     $000009
                              112 BOOT_I2C_MASTER     equ     $00000A
                              113 BOOT_SPI_SLAVE      equ     $00000B
                              114 BOOT_SPI_MASTER     equ     $00000C
                              115 BOOT_HOSTPORT       equ     $00000D
                              116 BOOT_BURNIN         equ     $00000F
                              118 ; Numerical constants
                              119 ;PI              equ     3.141592654
                              121 ; Buffer Descriptor offsets
                              122 BD_BufferBaseAddress    equ   0
                              123 BD_BufferModulo         equ   1
                              124 BD_BufferSize           equ   2
                              125 BD_HdPtr                equ   3
                              126 BD_TailPtr              equ   4
                              128 ; Size of a buffer descriptor
                              129 BUFF_DESC_SIZE          equ   5
                              131 ; Mp3 Song Table Descriptor Offsets
                              132 MST_ELEMENT_COUNT       equ   7        ; number of elements for each song
                              133 MST_CARD_NUMBER         equ   0
                              134 MST_ADDR_LOW            equ   1
                              135 MST_ADDR_HIGH           equ   2
                              136 MST_BYTES_LOW           equ   3
                              137 MST_BYTES_HIGH          equ   4
                              138 MST_SAMPLE_RATE         equ   5
                              139 MST_SONG_TYPE           equ   6
                              141 ; Data Format Descriptor offsets
                              142 DF_NumChannels          equ   0
                              143 DF_SampleRate           equ   1
                              144 DF_BitsPerSample        equ   2
                              147 ; Timer Descriptor Offset
                              148 TD_TimerNumber          equ   0
                              149 TD_ControlValue         equ   1
                              150 TD_CountValue           equ   2
                              151 TD_ControlRegister      equ   3
                              152 TD_CountRegister        equ   4
                              155 ; File IO defines
                              156 FileInPort              equ   $8000
                              157 FileOutPort             equ   $8001
                              158 OnceInPort              equ   $8000
                              159 OnceOutPort             equ   $8001
                              160 SmFakeInPort            equ   $8002
                              161 SmFakeOutPort           equ   $8003
                              162 UsbFakeInPort           equ   $8004
                              163 UsbFakeOutPort          equ   $8005
                              165 ; Target memory stuff
                              166 TARGET_MEM_MASK     equ     $F00000
                              167 TARGET_MEM_X        equ     $800000
                              168 TARGET_MEM_Y        equ     $400000
                              169 TARGET_MEM_L        equ     $200000
                              170 TARGET_MEM_P        equ     $100000
                              172 TARGET_MEM_X_BITPOS equ     23
                              173 TARGET_MEM_Y_BITPOS equ     22
                              174 TARGET_MEM_L_BITPOS equ     21
                              175 TARGET_MEM_P_BITPOS equ     20
                              178 ; File System Stuff
                              179 MaxDirCount         equ     13         ; assume 3 deep max with 8.3 format (38 bytes inc. /'s)
                              181 ; Error Codes
                              182 ;       Value           Error
                              183 ;       --------------------------------------------
                              184 ;       $000000         Reserved - no error
                              185 ;       $000001         SmartMedia Bad Programming Error
                              186 ;       $000002         SmartMedia Read Timeout
                              187 ;       $000003         USB PLL Lock Timeout
                              188 ;       $000010         GetNumSongs returned an error
                              189 ;       $000011         fopen failed to open file number (in x:TrackNum)
                              190 ;       $000012         fread failed when attempting to read page
                              191 ;       $000013         fread failed to read correct number of bytes
                              192 NO_ERROR                    equ     $000000
                              193 ERROR_PLL_LOCK_TIMEOUT      equ     $000001
                              195 ERROR_SM_BADP               equ     $000100
                              196 ERROR_SM_TIMEOUT            equ     $000101
                              197 ERROR_SM_INVALID_BLOCK      equ     $000102
                              198 ERROR_SM_INVALID_DATA       equ     $000103
                              199 ERROR_SM_ECC                equ     $000104
                              200 ERROR_SM_BLOCK_ERASE_FAILED equ     $000105
                              201 ERROR_SM_CARD_NOT_FOUND     equ     $000106
                              202 ERROR_SM_BUSY_TIMEOUT       equ     $000107
                              203 ERROR_SM_WRITE_FAILED       equ     $000108
                              204 ERROR_SM_DEVICE_ID          equ     $000109
                              206 ERROR_NUM_SONGS             equ     $000200
                              207 ERROR_FOPEN_FILENUM         equ     $000201
                              208 ERROR_FREAD_PAGE            equ     $000202
                              209 ERROR_FREAD_BYTE_COUNT      equ     $000203
                              210 ERROR_CREATING_VOICE_DIR    equ     $000204 
                              212 ERROR_USB_DISCONNECTED      equ     $000300
                              214 ERROR_DECODER_PLAYING       equ     $000400
                              215 ERROR_DECODER_SETPOS        equ     $000401             ; Attempted to set position past the end of file
                              217 ; PLL defs
                              218 ; According to Mike May, the PLL takes about 200us to stabalize, worst-case.
                              219 ;   PLL lock delay is $000000001388 = 5000. We're always using the xtal at
                              220 ;   24.576MHz, so this delay is 5000/(24.576MHz) = 203.5us.  We'll do this 5000
                              221 ;   times for a total of 1.017s.
                              222 PLL_LOCK_DELAY_HIGH     equ   $000000
                              223 PLL_LOCK_DELAY_LOW      equ   $001388
                              224 PLL_TIMEOUT             equ   $001388
                              226 ; Generic wait defs
                              227 WAIT_10_MS      equ     245760/2
                              229 ;Those equates are used in the DCC/USBMSC
                              230 ;Low battery detection bit
                              231 LOW_BATTERY_DETECTED_BITPOS     equ 0
                               15             include "irqequ.inc"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2005
                                3 ;
                                4 ; STMP Interrupt Constants        
                                5 ;///////////////////////////////////////////////////////////////////////////////
                                8 IRQEQU_INC equ 1
                               10 ; To ADD a new interrupt:
                               11 ; 1. Determine IPL and which IVL it will go on, add the value to HW_IPR_INIT.
                               12 ; 2. Add the Enable bit to the proper ICOLL enable equate (ICOLL_ENn_INIT).
                               13 ; 3. Add the priorities to the proper ICOLL_PRn_INIT equate.
                               14 ; 4. Add the steering to the proper ICOLL_STEERn_INIT equate.
                               15 ; 5. Add the code to setup the JSR to the ISR in the proper vector (this is done below in SysResetAllInterrupts).
                               17 ;TOVERIFY review the EN1 PR3 and STEER2 inserted lines below from large block project.
                               19 IPR_INIT_IRQA_IRQB_ENABLE   equ     ($000000)|(HW_IPR_LP_3_SETMASK<<HW_IPR_L1P0_BITPOS)|(HW_IPR_LP_1_SETMASK<<HW_IPR_L2P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L6P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L3P0_BITPOS)|(HW_IPR
                                  _LP_3_SETMASK<<HW_IPR_IRQB_BITPOS)|(HW_IPR_IRQB_ET_SETMASK) ;|(HW_IPR_LP_1_SETMASK<<IRQA_IPR_POS) 
                               20 IPR_INIT                    equ     ($000000)|(HW_IPR_LP_3_SETMASK<<HW_IPR_L1P0_BITPOS)|(HW_IPR_LP_1_SETMASK<<HW_IPR_L2P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L6P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L3P0_BITPOS)
                               22 ICOLL_EN0_INIT              equ     ($000000)|(1<<HW_ICLENABLE0R_SEN0_BITPOS)|(1<<HW_ICLENABLE0R_SEN1_BITPOS)|(1<<HW_ICLENABLE0R_SEN2_BITPOS)|(1<<HW_ICLENABLE0R_SEN3_BITPOS)|(1<<HW_ICLENABLE0R_SEN13_BITPOS)|(1<<HW_ICLENAB
                                  LE0R_SEN14_BITPOS)|(1<<HW_ICLENABLE0R_SEN15_BITPOS)
                               23 ICOLL_EN1_INIT              equ     ($000000)|(1<<HW_ICLENABLE1R_SEN29_BITPOS)|(1<<HW_ICLENABLE1R_SEN31_BITPOS)|(1<<HW_ICLENABLE1R_SEN32_BITPOS)
                               25 ICOLL_PR0_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_1<<HW_ICLPRIOR0R_S0P_BITPOS)|(HW_ICLPRIORR_SP_0<<HW_ICLPRIOR0R_S1P_BITPOS)|(HW_ICLPRIORR_SP_1<<HW_ICLPRIOR0R_S2P_BITPOS)|(HW_ICLPRIORR_SP_0<<HW_ICLPRIOR0R_S3P
                                  _BITPOS)
                               26 ICOLL_PR1_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_2<<HW_ICLPRIOR1R_S13P_BITPOS)|(HW_ICLPRIORR_SP_4<<HW_ICLPRIOR1R_S14P_BITPOS)|(HW_ICLPRIORR_SP_4<<HW_ICLPRIOR1R_S15P_BITPOS)
                               27 ICOLL_PR2_INIT              equ     ($000000)
                               28 ICOLL_PR3_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_1<<HW_ICLPRIOR3R_S29P_BITPOS)|(HW_ICLPRIORR_SP_2<<HW_ICLPRIOR3R_S31P_BITPOS)
                               29 ICOLL_PR4_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_2<<HW_ICLPRIOR4R_S32P_BITPOS)
                               31 ICOLL_STEER0_INIT           equ     ($000000)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S0P_BITPOS)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S1P_BITPOS)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S2P_BITPOS)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S3P
                                  _BITPOS)
                               32 ICOLL_STEER1_INIT           equ     ($000000)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER1R_S13P_BITPOS)|(HW_ICLSTEERR_SS_6<<HW_ICLSTEER1R_S14P_BITPOS)|(HW_ICLSTEERR_SS_3<<HW_ICLSTEER1R_S15P_BITPOS)
                               33 ICOLL_STEER2_INIT           equ     ($000000)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER2R_S29P_BITPOS)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER2R_S31P_BITPOS)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER2R_S32P_BITPOS)
                               35 DECODER_IVL_MASK            equ     ($FFFFFF)^(HW_IPR_LP_3_SETMASK<<HW_IPR_L2P0_BITPOS)
                               36 SYS_TIME_IVL_MASK           equ     ($FFFFFF)^(HW_IPR_LP_3_SETMASK<<HW_IPR_L3P0_BITPOS)
                               37 BUTTON_IVL_MASK             equ     ($FFFFFF)^(HW_IPR_LP_3_SETMASK<<HW_IPR_L6P0_BITPOS)
                               16             include "sysmacro.asm"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ;  Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ;  File        : sysmacro.asm
                                5 ;  Description : Misc System Macros
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                8     define   SysMacro_asm    '1'
                               10     page    255,255,0
                               12 ;///////////////////////////////////////////////////////////////////////////////
                               13 ;   Macros
                               14 ;///////////////////////////////////////////////////////////////////////////////
                               16 ;///////////////////////////////////////////////////////////////////////////////
                               17 ;   Includes
                               18 ;///////////////////////////////////////////////////////////////////////////////
                               20 ;///////////////////////////////////////////////////////////////////////////////
                               21 ;   External Definitions
                               22 ;///////////////////////////////////////////////////////////////////////////////
                               24 ;///////////////////////////////////////////////////////////////////////////////
                               25 ;   External References
                               26 ;///////////////////////////////////////////////////////////////////////////////
                               28 ;///////////////////////////////////////////////////////////////////////////////
                               29 ;   Equates
                               30 ;///////////////////////////////////////////////////////////////////////////////
                               31         
                               32 ;///////////////////////////////////////////////////////////////////////////////
                               33 ;   X Memory
                               34 ;///////////////////////////////////////////////////////////////////////////////
                               35         
                               36 ;///////////////////////////////////////////////////////////////////////////////
                               37 ;   Y Memory
                               38 ;///////////////////////////////////////////////////////////////////////////////
                               39         
                               40 ;///////////////////////////////////////////////////////////////////////////////
                               41 ;   P Memory
                               42 ;///////////////////////////////////////////////////////////////////////////////
                               44 ;///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                               45 ;
                               46 ;>  Name:           push
                               47 ;
                               48 ;   Type:           Macro
                               49 ;
                               50 ;   Description:    Push a 24-bit value onto the data stack
                               51 ;
                               52 ;   Inputs:         Usage : push reg
                               53 ;                   reg = any core register that is 24-bits or less
                               54 ;
                               55 ;   Outputs:        none
                               56 ;                   
                               57 ;   Notes:          For every push, there must be a corresponding pop to keep
                               58 ;                   data stack balanced.
                               59 ;
                               60 ;   SeeAlso:        pop
                               61 ;<
                               62 ;///////////////////////////////////////////////////////////////////////////////
                               63 push    macro   reg
                               64     move    reg,y:(r7)+
                               65     endm
                               67 ;///////////////////////////////////////////////////////////////////////////////
                               68 ;
                               69 ;>  Name:           pop
                               70 ;
                               71 ;   Type:           Macro
                               72 ;
                               73 ;   Description:    Pop a 24-bit value from the data stack
                               74 ;
                               75 ;   Inputs:         Usage : pop reg
                               76 ;                   reg = any core register that is 24-bits or less
                               77 ;
                               78 ;   Outputs:        none
                               79 ;                   
                               80 ;   Notes:          For every pop, there must be a corresponding push to keep
                               81 ;                   data stack balanced.
                               82 ;
                               83 ;   SeeAlso:        push
                               84 ;<
                               85 ;///////////////////////////////////////////////////////////////////////////////
                               86 pop     macro   reg
                               87     move    y:-(r7),reg
                               88     endm
                               90 ;///////////////////////////////////////////////////////////////////////////////
                               91 ;
                               92 ;>  Name:           CallFunclet
                               93 ;
                               94 ;   Type:           Macro
                               95 ;
                               96 ;   Description:    Loads and Executes the funclet defined by the Resource argument
                               97 ;
                               98 ;   Inputs:         Resource = Resource number for the specific funclet.
                               99 ;
                              100 ;   Outputs:        none
                              101 ;                   
                              102 ;   Notes:          Jumps to SysCallFunclet.   TODO: change to a label instead of hard addresses like $80
                              103 ;<
                              104 ;///////////////////////////////////////////////////////////////////////////////
                              105 ; if ((@DEF('STMP_BUILD_PLAYER'))||(@DEF('PLAYER'))) ; sdk3.110 and before did this. 3.120 add short jump for mtp.
                              107 CallFunclet   macro Resource
                              108     jsr       $80
                              109     DC       Resource  ; 1 word
                              110  endm    
                              111 CallFunclet2   macro Resource
                              112  if ((@DEF('STMP_BUILD_PLAYER'))||(@DEF('PLAYER')))
                              113     jsr       $82
                              114     DC       Resource  ; 1 word
                              115  else ;;; MTP
                              116     jsr       $80
                              117     DC       Resource  ; 1 word
                              118  endif
                              119     endm    
                              130 ;///////////////////////////////////////////////////////////////////////////////
                              131 ;
                              132 ;>  Name:           error
                              133 ;
                              134 ;   Type:           Macro
                              135 ;
                              136 ;   Description:    Fatal system error macro.  This macro works in conjunction
                              137 ;                   with contents of syserror.asm.  Depending upon the build
                              138 ;                   arguments DEBUG, BETA, or RETAIL, this will either produce
                              139 ;                   a "debug" statement or a JMP to an error handling reset routine.
                              140 ;
                              141 ;   Inputs:         none 
                              142 ;   Outputs:        none                   
                              143 ;   Notes:          Can use debugOrContinue or ccerror for conditional halts. 
                              144 ;                   SystemHalt() C macro uses this asm macro.
                              145 ;<
                              146 ;///////////////////////////////////////////////////////////////////////////////
                              147 error   macro
                              148   if (@DEF('BETA')||@DEF('RETAIL')||@DEF('TRACEBUFFER'))
                              149     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                              150               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                              151   else
                              152     debug
                              153   endif ; if ( @DEF('BETA')||@DEF('RETAIL') 
                              154     endm
                              156 ;///////////////////////////////////////////////////////////////////////////////
                              157 ;
                              158 ;   Name:           debugOrContinue
                              159 ;   Type:           Macro
                              160 ;   Description:    System error macro. Depending upon the build
                              161 ;                   arguments DEBUG, BETA, or RETAIL, this will either produce
                              162 ;                   a "debug" statement or nothing to allow continued execution.
                              163 ;   Inputs:         none 
                              164 ;   Outputs:        none
                              165 ;   Notes:          none
                              166 ;
                              167 ;///////////////////////////////////////////////////////////////////////////////
                              168 debugOrContinue   macro
                              169   if (@DEF('DEBUG'))
                              170     debug
                              171     nop
                              172   endif 
                              173     endm
                              175 ;///////////////////////////////////////////////////////////////////////////////
                              176 ;
                              177 ;   Name:           debugOrShutdown
                              178 ;   Type:           Macro
                              179 ;   Description:    System error macro. Depending upon the build
                              180 ;                   arguments DEBUG, BETA, or RETAIL, this will either produce
                              181 ;                   a "debug" statement or Prevent RETAIL build from hanging on 
                              182 ;                   debug line by attempting graceful shutdown.
                              183 ;   Inputs:         none 
                              184 ;   Outputs:        none
                              185 ;   Notes:          See SystemShutdownFinal in SystemAPI.asm
                              186 ;
                              187 ;///////////////////////////////////////////////////////////////////////////////
                              188 ;debugOrShutdown   macro
                              189 ;  if (@DEF('DEBUG'))
                              190 ;    debug
                              191 ;    nop
                              192 ;  else  ; ( @DEF('BETA')||@DEF('RETAIL')
                              193 ;    jmp SystemShutdownFinal                ; reference not resolved
                              194 ;  endif 
                              195 ;    endm
                              198 ;///////////////////////////////////////////////////////////////////////////////
                              199 ;> Name:            ccerror
                              200 ;
                              201 ;  Type:            Macro
                              202 ;  Description:     Conditional fatal system error macro.  If the indicated
                              203 ;                   condition code ("CC") is met, signal the error.  (See "error",
                              204 ;                   above for more info on error hanlding.)
                              205 ;                   The allowed condition condition codes are
                              206 ;
                              207 ;                       cc, cs, ec, eq, es, ge, gt, lc, le, ls, lt, 
                              208 ;                       mi, ne, nr, pl, nn 
                              209 ;
                              210 ;  Inputs:          condition
                              211 ;
                              212 ;  Outputs:         none
                              213 ;
                              214 ;  Notes:           The normal way of using these macros is shown below:
                              215 ;
                              216 ;                       <some operation which sets/clears a condition code>
                              217 ;                       ccerror cs             ; Error if carry is set
                              218 ;                       <normal continuation>
                              219 ;
                              220 ;                   This can replace old code of the form:
                              221 ;
                              222 ;                       <some operation which sets/clears a condition code>
                              223 ;                       jcc     _OK
                              224 ;                       error
                              225 ;                   _OK
                              226 ;                       <normal continuation>
                              227 ;
                              228 ;                   Depending on the BETA/RETAIL flags, the first operation can
                              229 ;                   save one or two words of program memory over the second method.
                              230 ;<
                              231 ;///////////////////////////////////////////////////////////////////////////////
                              232 ccerror macro   condition
                              233   if (@DEF('BETA')||@DEF('RETAIL'))
                              234     js\condition $000C
                              235   else
                              236     debug\condition
                              237   endif ; if ( @DEF('BETA')||@DEF('RETAIL') 
                              238     endm
                              240 ;///////////////////////////////////////////////////////////////////////////////
                              241 ;> Name: GetLogicalDriveNumForResourceBin
                              242 ;
                              243 ; Description: Used for our RestoreDriveFromBackup routine.
                              244 ; INPUT: 1 for primary resource.bin
                              245 ;        2 for secondary resource.bin
                              246 ;        3 for master redundant resource.bin that is used to restore 1 and 2 at power up if needed.
                              247 ;
                              248 ; NOTE: If the drive arrays is modified in ddiproject.c then the values below will
                              249 ;       have to change. Inspect that file to verify these values are correct.
                              250 ;
                              251 ;<
                              252 ;///////////////////////////////////////////////////////////////////////////////
                              253 GetLogicalDriveNumForResourceBin macro drive
                              254     if (drive==0)
                              255     fail    "drive=0 invalid value used in GetLogicalDriveNumForresourceBin macro"
                              256     endif
                              258     if (drive>3)
                              259     fail    "drive>3 invalid value used in GetLogicalDriveNumForresourceBin macro"
                              260     endif
                              262     if (@DEF('MMC'))
                              264         if drive==1
                              265              move   #>6,a
                              266         endif
                              267     
                              268         if drive==2
                              269              move   #>7,a
                              270         endif
                              272         if drive==3
                              273              move   #>8,a
                              274         endif
                              275     else
                              277         if drive==1
                              278              move   #>5,a
                              279         endif
                              280     
                              281         if drive==2
                              282              move   #>6,a
                              283         endif
                              285         if drive==3
                              286              move   #>7,a
                              287         endif
                              288     endif
                              289  endm
                              291 ;///////////////////////////////////////////////////////////////////////////////
                              292 ;
                              293 ;>  Name:           SaveRange
                              294 ;
                              295 ;   Type:           Macro
                              296 ;
                              297 ;   Description:    This is a supporting macro for saving memory locations to
                              298 ;                   the settings.dat file at shutdown, for later restoration
                              299 ;                   at system startup.
                              300 ;
                              301 ;   Inputs:         Usage : SaveRange Label,Length
                              302 ;                        
                              303 ;   Outputs:        
                              304 ;                   
                              305 ;   Notes:          This macro automatically determines the memory space of the
                              306 ;                   label specified.  It then constructs a command that is 
                              307 ;                   written to settings.dat by SysSaveSettings, and is
                              308 ;                   understood by the SysLoadSettings function to restore the
                              309 ;                   memory locations.  For the SaveRange macro to be recognized 
                              310 ;                   by the SysSaveSettings function.  The section name where the
                              311 ;                   SaveRange command is used, must be included in the 
                              312 ;                   Settings_Y cluster in the stmp3400.dsc file.  The makefile
                              313 ;                   will then extract these commands as a resource to be used
                              314 ;                   by SysSaveSettings and SysLoadSettings.
                              315 ;
                              316 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRangeX, 
                              317 ;                   SaveRangeY, SaveRangeP, SaveRangeL
                              318 ;
                              319 ;<
                              320 ;///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                              321 SaveRange macro Label,Length
                              322     if @MSP(Label)==0  ;None
                              323     fail    "Invalid label used in SaveRange macro"
                              324     dc      Label
                              325     endif ; if @MSP(Label)==0
                              327     if @MSP(Label)==1  ;X
                              328     dc      $800000|Label
                              329     endif ; if @MSP(Label)==1
                              331     if @MSP(Label)==2  ;Y
                              332     dc      $400000|Label
                              333     endif ; if @MSP(Label)==2
                              335     if @MSP(Label)==3  ;L
                              336     dc      $200000|Label
                              337     endif ; if @MSP(Label)==3
                              339     if @MSP(Label)==4  ;P
                              340     dc      $100000|Label
                              341     endif ; if @MSP(Label)==4
                              343     if @MSP(Label)==5  ;E
                              344     fail    "Invalid label used in SaveRange macro"
                              345     dc      Label
                              346     endif ; if @MSP(Label)==5
                              348     dc      Length*3
                              349     endm
                              351 ;///////////////////////////////////////////////////////////////////////////////
                              352 ;
                              353 ;>  Name:           SaveRangeY
                              354 ;
                              355 ;   Type:           Macro
                              356 ;
                              357 ;   Description:    This is a supporting macro for saving memory locations to
                              358 ;                   the settings.dat file at shutdown, for later restoration
                              359 ;                   at system startup.
                              360 ;
                              361 ;   Inputs:         Usage : SaveRangeY Label,Length
                              362 ;                        
                              363 ;   Outputs:        
                              364 ;                   
                              365 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              366 ;                   can take a numeric address, or a label, but will only
                              367 ;                   create a save memory command that indicates Y memory
                              368 ;                   to be saved.
                              369 ;
                              370 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRange, 
                              371 ;                   SaveRangeX, SaveRangeP, SaveRangeL
                              372 ;
                              373 ;<
                              374 ;///////////////////////////////////////////////////////////////////////////////
                              375 SaveRangeY macro Address,Length
                              376     dc      $400000|Address
                              377     dc      Length*3
                              378     endm
                              380 ;///////////////////////////////////////////////////////////////////////////////
                              381 ;
                              382 ;>  Name:           SaveRangeX
                              383 ;
                              384 ;   Type:           Macro
                              385 ;
                              386 ;   Description:    This is a supporting macro for saving memory locations to
                              387 ;                   the settings.dat file at shutdown, for later restoration
                              388 ;                   at system startup.
                              389 ;
                              390 ;   Inputs:         Usage : SaveRangeX Label,Length
                              391 ;                        
                              392 ;   Outputs:        
                              393 ;                   
                              394 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              395 ;                   can take a numeric address, or a label, but will only
                              396 ;                   create a save memory command that indicates X memory
                              397 ;                   to be saved.
                              398 ;
                              399 ;   See Also:       SysLoadSettings, SysSaveSettings, SaveRange, 
                              400 ;                   SaveRangeY, SaveRangeP, SaveRangeL
                              401 ;
                              402 ;<
                              403 ;///////////////////////////////////////////////////////////////////////////////
                              404 SaveRangeX macro Address,Length
                              405     dc      $800000|Address
                              406     dc      Length*3
                              407     endm
                              409 ;///////////////////////////////////////////////////////////////////////////////
                              410 ;
                              411 ;>  Name:           SaveRangeL
                              412 ;
                              413 ;   Type:           Macro
                              414 ;
                              415 ;   Description:    This is a supporting macro for saving memory locations to
                              416 ;                   the settings.dat file at shutdown, for later restoration
                              417 ;                   at system startup.
                              418 ;
                              419 ;   Inputs:         Usage : SaveRangeL Label,Length
                              420 ;                        
                              421 ;   Outputs:        
                              422 ;                   
                              423 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              424 ;                   can take a numeric address, or a label, but will only
                              425 ;                   create a save memory command that indicates L memory
                              426 ;                   to be saved.
                              427 ;
                              428 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRange, 
                              429 ;                   SaveRangeX, SaveRangeY, SaveRangeP
                              430 ;
                              431 ;<
                              432 ;///////////////////////////////////////////////////////////////////////////////
                              433 SaveRangeL macro Address,Length
                              434     dc      $200000|Address
                              435     dc      Length*3
                              436     endm
                              438 ;///////////////////////////////////////////////////////////////////////////////
                              439 ;
                              440 ;>  Name:           SaveRangeP
                              441 ;
                              442 ;   Type:           Macro
                              443 ;
                              444 ;   Description:    This is a supporting macro for saving memory locations to
                              445 ;                   the settings.dat file at shutdown, for later restoration
                              446 ;                   at system startup.
                              447 ;
                              448 ;   Inputs:         Usage : SaveRangeP Label,Length
                              449 ;                        
                              450 ;   Outputs:        
                              451 ;                   
                              452 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              453 ;                   can take a numeric address, or a label, but will only
                              454 ;                   create a save memory command that indicates P memory
                              455 ;                   to be saved.
                              456 ;
                              457 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRange, 
                              458 ;                   SaveRangeX, SaveRangeY, SaveRangeL
                              459 ;
                              460 ;<
                              461 ;///////////////////////////////////////////////////////////////////////////////
                              462 SaveRangeP macro Address,Length
                              463     dc      $100000|Address
                              464     dc      Length*3
                              465     endm
                              468 ;///////////////////////////////////////////////////////////////////////////////
                              469 ;       BUTTON MACROS
                              470 ;///////////////////////////////////////////////////////////////////////////////
                              472 ;///////////////////////////////////////////////////////////////////////////////
                              473 ;
                              474 ;>  Name:           DEFINE_ROW
                              475 ;
                              476 ;   Type:           Macro
                              477 ;
                              478 ;   Description:    This is a supporting macro for defining the GPIO setup for 
                              479 ;                   the scan matrix.
                              480 ;
                              481 ;   Inputs:         Usage : DEFINE_ROW RowNumber,WhichGPIORegister,WhichBit
                              482 ;                        
                              483 ;   Outputs:        Sets up equates required for data structures in button.asm
                              484 ;                   
                              485 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              486 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              487 ;                   completely define the players button scan matrix, non scan buttons, and
                              488 ;                   how these buttons map to events as recieved by the menus.  There must be one of these
                              489 ;                   macro definitions for each row in the scan matrix.
                              490 ;
                              491 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              492 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              493 ;
                              494 ;<
                              495 ;///////////////////////////////////////////////////////////////////////////////
                              497 DEFINE_ROW macro RowNumber,WhichGPIO,WhichBit
                              498     BUTTON_GPIO_ENABLE_ROW_\RowNumber:  equ HW_\WhichGPIO\ENR
                              499     BUTTON_GPIO_SENSE_ROW_\RowNumber:   equ HW_\WhichGPIO\DIR
                              500     BUTTON_BITPOS_ROW_\RowNumber:       equ 1<<\WhichBit
                              501     endm
                              503 ;///////////////////////////////////////////////////////////////////////////////
                              504 ;
                              505 ;>  Name:           DEFINE_COLUMN
                              506 ;
                              507 ;   Type:           Macro
                              508 ;
                              509 ;   Description:    This is a supporting macro for defining the GPIO setup for 
                              510 ;                   the scan matrix.
                              511 ;
                              512 ;   Inputs:         Usage : DEFINE_COLUMN ColumnNumber,WhichGPIORegister,WhichBit
                              513 ;                        
                              514 ;   Outputs:        Sets up equates required for data structures in button.asm
                              515 ;                   
                              516 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              517 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              518 ;                   completely define the players button scan matrix, non scan buttons, and
                              519 ;                   how these buttons map to events as recieved by the menus.  There must be one
                              520 ;                   of these macro definitions for each column in the scan matrix.
                              521 ;
                              522 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              523 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              524 ;
                              525 ;<
                              526 ;///////////////////////////////////////////////////////////////////////////////
                              527 DEFINE_COLUMN macro ColumnNumber,WhichGPIO,WhichBit
                              528     BUTTON_GPIO_ENABLE_COLUMN_\ColumnNumber:        equ HW_\WhichGPIO\ENR
                              529     BUTTON_GPIO_DATA_OUT_COLUMN_\ColumnNumber:      equ HW_\WhichGPIO\DOR
                              530     BUTTON_GPIO_OUTPUT_ENABLE_COLUMN_\ColumnNumber: equ HW_\WhichGPIO\DOER
                              531     BUTTON_BITPOS_COLUMN_\ColumnNumber:             equ 1<<\WhichBit
                              532     endm
                              534 ;///////////////////////////////////////////////////////////////////////////////
                              535 ;
                              536 ;>  Name:           DEFINE_SCAN_BUTTON_EVENT
                              537 ;
                              538 ;   Type:           Macro
                              539 ;
                              540 ;   Description:    This is a supporting macro for defining the mapping between a scan
                              541 ;                   matrix location and a button event.
                              542 ;
                              543 ;   Inputs:         Usage : DEFINE_SCAN_BUTTON_EVENT Column,Row,EventNumber,ButtonName.  
                              544 ;                       Column is in the format COL0,COL1,COL2, etc.  
                              545 ;                       Row is in the format ROW0,ROW1,etc. 
                              546 ;                       The EventNumber is an integer with a single bit set that is unique to all button events
                              547 ;                       ButtonName is a label by which this button event can be referenced in the event mapping.
                              548 ;                        
                              549 ;   Outputs:        Sets up equates required for data structures in button.asm
                              550 ;                   
                              551 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              552 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              553 ;                   completely define the players button scan matrix, non scan buttons, and
                              554 ;                   how these buttons map to events as recieved by the menus. This macro sets up buttons for each
                              555 ;                   spot in the button scan matrix.  Each place in the matrix must be defined, even if no
                              556 ;                   physical button exists in it.  Use $000000 for placeholders.
                              557 ;
                              558 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              559 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              560 ;
                              561 ;<
                              562 ;///////////////////////////////////////////////////////////////////////////////
                              563 DEFINE_SCAN_BUTTON_EVENT macro Column,Row,EventNumber,ButtonName
                              564     BUTTON_EVENT_\Column\Row:  equ \EventNumber
                              565     ButtonName: equ \EventNumber
                              566     endm 
                              568 ;///////////////////////////////////////////////////////////////////////////////
                              569 ;
                              570 ;>  Name:           DEFINE_NON_SCAN_BUTTON
                              571 ;
                              572 ;   Type:           Macro
                              573 ;
                              574 ;   Description:    This is a supporting macro for defining a non scan button.
                              575 ;
                              576 ;   Inputs:         Usage : DEFINE_NON_SCAN_BUTTON NSNumber,WhichGPIO,WhichBit.  
                              577 ;                       NSNumber is a unique number (starting at 0) and counting up to BUTTON_NON_SCAN_BUTTONS-1
                              578 ;                       WhichGPIO is the GPIO register used
                              579 ;                       WhichBit is the bit in this register.
                              580 ;                        
                              581 ;   Outputs:        Sets up equates required for data structures in button.asm
                              582 ;                   
                              583 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              584 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              585 ;                   completely define the players button scan matrix, non scan buttons, and
                              586 ;                   how these buttons map to events as recieved by the menus. This macro sets up non scan
                              587 ;                   buttons.  Use DEFINE_NON_SCAN_BUTTON_EVENT to define the event generated by this non scan
                              588 ;                   button.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                              589 ;
                              590 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              591 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              592 ;
                              593 ;<
                              594 ;///////////////////////////////////////////////////////////////////////////////
                              595 DEFINE_NON_SCAN_BUTTON macro NSNumber,WhichGPIO,WhichBit
                              596     BUTTON_GPIO_ENABLE_NON_SCAN_\NSNumber:  equ HW_\WhichGPIO\ENR
                              597     BUTTON_GPIO_SENSE_NON_SCAN_\NSNumber:   equ HW_\WhichGPIO\DIR
                              598     BUTTON_BITPOS_NON_SCAN_\NSNumber:       equ 1<<\WhichBit
                              599     BUTTON_REAL_BITPOS_NON_SCAN_\NSNumber:  equ \WhichBit
                              600     endm
                              602 ;///////////////////////////////////////////////////////////////////////////////
                              603 ;
                              604 ;>  Name:           DEFINE_NON_SCAN_BUTTON_EVENT
                              605 ;
                              606 ;   Type:           Macro
                              607 ;
                              608 ;   Description:    This is a supporting macro for defining a non scan button.
                              609 ;
                              610 ;   Inputs:         Usage : DEFINE_NON_SCAN_BUTTON_EVENT Number,EventNumber,ButtonName  
                              611 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_NON_SCAN_BUTTONS-1
                              612 ;                       EventNumber is an integer with 1 bit set that is unique to all other buttons
                              613 ;                       ButtonName is a label later referenced in the event mapping
                              614 ;                        
                              615 ;   Outputs:        Sets up equates required for data structures in button.asm
                              616 ;                   
                              617 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              618 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              619 ;                   completely define the players button scan matrix, non scan buttons, and
                              620 ;                   how these buttons map to events as recieved by the menus. This macro sets up non scan
                              621 ;                   buttons.  
                              622 ;
                              623 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              624 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              625 ;
                              626 ;<
                              627 ;///////////////////////////////////////////////////////////////////////////////
                              628 DEFINE_NON_SCAN_BUTTON_EVENT macro Number,EventNumber,ButtonName
                              629     BUTTON_EVENT_NONSCAN\Number:  equ \EventNumber
                              630     ButtonName: equ \EventNumber
                              631     endm 
                              635 ;///////////////////////////////////////////////////////////////////////////////
                              636 ;> Name: DEFINE_LRADC_BUTTON
                              637 ;
                              638 ;  Type: Macro
                              639 ;
                              640 ;  Description: This is a supporting macro for defining an Low Resolution ADC (LRADC)-based button
                              641 ;
                              642 ;  Inputs:      Usage : DEFINE_LRADC_BUTTON LBNumber,UpperLimitVoltage
                              643 ;
                              644 ;  Outputs:     Sets up equates required for data structures in button.asm
                              645 ;
                              646 ;  Notes:       Must be used in conjuction with DEFINE_LRADC_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              647 ;                   completely define the player's LRADC buttons and how these buttons map to 
                              648 ;                   events as recieved by the menus. This macro sets up LRADC buttons.  Use 
                              649 ;                   DEFINE_LRADC_BUTTON_EVENT to define the event generated by this LRADC button.
                              650 ;
                              651 ;   SeeAlso:        DEFINE_LRADC_BUTTON_EVENT, DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              652 ;                   DEFINE_NON_SCAN_BUTTON, DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              653 ;<
                              654 ;///////////////////////////////////////////////////////////////////////////////
                              655 DEFINE_LRADC_BUTTON     macro   num,level
                              656     BUTTON_LRADC_LEVEL_\num:    equ level
                              657     endm
                              661 ;///////////////////////////////////////////////////////////////////////////////
                              662 ;> Name: DEFINE_LRADC_BUTTON_EVENT
                              663 ;
                              664 ;  Type: Macro
                              665 ;
                              666 ;  Description:     This is a supporting macro for defining a Low Resolution ADC (LRADC)-based button.
                              667 ;
                              668 ;  Inputs:          Usage : DEFINE_LRADC_BUTTON_EVENT Number,EventNumber,ButtonName  
                              669 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_LRADC_BUTTONS-1
                              670 ;                       EventNumber is an integer with 1 bit set that is unique to all other buttons
                              671 ;                       ButtonName is a label later referenced in the event mapping
                              672  
                              673 ;
                              674 ;  Outputs:         Sets up equates required for data structures in button.asm
                              675 ;
                              676 ;  Notes:           Must be used in conjuction with DEFINE_LRADC_BUTTON, and DEFINE_MAPPED_EVENT to
                              677 ;                   completely define the player's LRADC buttons and how these buttons map to events 
                              678 ;                   as recieved by the menus. This macro sets up LRADC buttons.
                              679 ;
                              680 ;
                              681 ;   SeeAlso:        DEFINE_LRADC_BUTTON, DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              682 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              683 ;<
                              684 ;///////////////////////////////////////////////////////////////////////////////
                              685 DEFINE_LRADC_BUTTON_EVENT      macro   num,EventNumber,ButtonName
                              686     BUTTON_EVENT_LRADC_BUTTON\num: equ \EventNumber
                              687     ButtonName:     equ     \EventNumber   
                              688     endm
                              689   
                              692 ;///////////////////////////////////////////////////////////////////////////////
                              693 ;
                              694 ;>  Name:           DEFINE_MAPPED_EVENT
                              695 ;
                              696 ;   Type:           Macro
                              697 ;
                              698 ;   Description:    This is a supporting macro for defining button events.
                              699 ;
                              700 ;   Inputs:         Usage : DEFINE_MAPPED_EVENT Number,Action,ButtonNames 
                              701 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_MAPPED_EVENTS-1
                              702 ;                       Action is either PRESS_RELEASE or PRESS_HOLD
                              703 ;                       ButtonNames is a collection of labels defined for scan or non scan buttons that relate
                              704 ;                           to this button event.
                              705 ;                        
                              706 ;   Outputs:        Sets up equates required for data structures in button.asm
                              707 ;                   
                              708 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              709 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              710 ;                   completely define the players button scan matrix, non scan buttons, and
                              711 ;                   how these buttons map to events as recieved by the menus. This macro sets up the mapping
                              712 ;                   between scan and non scan buttons, and the eventual event number that is sent to the menus.
                              713 ;
                              714 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              715 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              716 ;
                              717 ;<
                              718 ;///////////////////////////////////////////////////////////////////////////////
                              719 DEFINE_MAPPED_EVENT macro Number,Action,ButtonNames
                              720     
                              721   IF (@SCP("Action","PRESS_RELEASE"))
                              722     BUTTON_EVENT_\Number:  equ ButtonNames
                              723   else 
                              724     if (@SCP("Action","PRESS_HOLD"))
                              725         BUTTON_EVENT_\Number:  equ $800000|ButtonNames
                              726     else
                              727         ERROR "Unknown Action for DEFINE_MAPPED_EVENT" 
                              728     endif
                              729   endif 
                              730     endm
                              733 ;///////////////////////////////////////////////////////////////////////////////
                              734 ;
                              735 ;>  Name:           DEFINE_2BUTTON_MAPPED_EVENT
                              736 ;
                              737 ;   Type:           Macro
                              738 ;
                              739 ;   Description:    This is a supporting macro for defining button events.
                              740 ;
                              741 ;   Inputs:         Usage : DEFINE_2BUTTON_MAPPED_EVENT Number,Action,Event1,Event2 
                              742 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_MAPPED_EVENTS-1
                              743 ;                       Action is either PRESS_RELEASE or PRESS_HOLD
                              744 ;                       Event1 is 1 of 2 previously defined button events
                              745 ;                       Event2 is 2 of 2 previously defined button events
                              746 ;                        
                              747 ;   Outputs:        Sets up equates required for data structures in button.asm
                              748 ;                   
                              749 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              750 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              751 ;                   completely define the players button scan matrix, non scan buttons, and
                              752 ;                   how these buttons map to events as recieved by the menus. This macro sets up the mapping
                              753 ;                   between scan and non scan buttons, and the eventual event number that is sent to the menus.
                              754 ;
                              755 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              756 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              757 ;
                              758 ;<
                              759 ;///////////////////////////////////////////////////////////////////////////////
                              760 DEFINE_2BUTTON_MAPPED_EVENT macro Number,Action,Event1,Event2
                              761     
                              762   IF (@SCP("Action","PRESS_RELEASE"))
                              763     BUTTON_EVENT_\Number:  equ BUTTON_EVENT_\Event1|BUTTON_EVENT_\Event2
                              764   else 
                              765     if (@SCP("Action","PRESS_HOLD"))
                              766         BUTTON_EVENT_\Number:  equ BUTTON_EVENT_\Event1|BUTTON_EVENT_\Event2|$800000
                              767     else
                              768         ERROR "Unknown Action for DEFINE_MAPPED_EVENT" 
                              769     endif
                              770   endif 
                              771   endm
                              773 ;///////////////////////////////////////////////////////////////////////////////
                              774 ;
                              775 ;>  Name:           StackCheckIn
                              776 ;
                              777 ;   Type:           Macro
                              778 ;
                              779 ;   Description:    Records the current stack pointer on the stack
                              780 ;
                              781 ;   Inputs:         none
                              782 ;                        
                              783 ;   Outputs:        places the current PC and the current software stack pointer on the stack
                              784 ;   
                              785 ;   Notes:          This does not modify any registers (except r7)                
                              786 ;
                              787 ;   SeeAlso:        FStackCheckIn
                              788 ;
                              789 ;<
                              790 ;///////////////////////////////////////////////////////////////////////////////
                              791 StackCheckIn macro
                              792   if (@DEF('DEBUG'))
                              793     extern FStackCheckIn
                              794     jsr FStackCheckIn
                              795   endif
                              796   endm
                              798 ;///////////////////////////////////////////////////////////////////////////////
                              799 ;
                              800 ;>  Name:           StackCheckOut
                              801 ;
                              802 ;   Type:           Macro
                              803 ;
                              804 ;   Description:    Verifies that the stack is still balanced
                              805 ;
                              806 ;   Inputs:         none
                              807 ;                        
                              808 ;   Outputs:        none (though hits a debug if the stack is unbalanced)
                              809 ;   
                              810 ;   Notes:          This does not modify any registers (except r7) 
                              811 ;
                              812 ;   SeeAlso:        FStackCheckOut
                              813 ;
                              814 ;<
                              815 ;///////////////////////////////////////////////////////////////////////////////
                              816 StackCheckOut macro
                              817   if (@DEF('DEBUG'))
                              818     extern FStackCheckOut
                              819     jsr FStackCheckOut
                              820   endif 
                              821   endm
                              824 ;///////////////////////////////////////////////////////////////////////////////
                              825 ;
                              826 ;>  Name:           InstrumentPushContext 
                              827 ;
                              828 ;   Type:           Macro
                              829 ;
                              830 ;   Description:    calls the instrument functions specified.
                              831 ;
                              832 ;   Inputs:         new context
                              833 ;                   new value
                              834 ;                        
                              835 ;   Outputs:        
                              836 ;   
                              837 ;   Notes:          This does not modify any registers  
                              838 ;
                              839 ;   SeeAlso:        
                              840 ;
                              841 ;<
                              842 ;///////////////////////////////////////////////////////////////////////////////
                              843 InstrumentPushContext macro context,value
                              844   if (@DEF('USE_INSTRUMENTATION'))
                              845     extern FInstrumentPushContext
                              846     extern PushAandB
                              847     extern PopAandB
                              848     jsr PushAandB
                              849     move    #>context,a
                              850     move    #>value,b
                              851     jsr FInstrumentPushContext
                              852     jsr PopAandB
                              853   endif 
                              854   endm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                              856 ;///////////////////////////////////////////////////////////////////////////////
                              857 ;
                              858 ;>  Name:           InstrumentPopContext 
                              859 ;
                              860 ;   Type:           Macro
                              861 ;
                              862 ;   Description:    calls the instrument functions specified.
                              863 ;
                              864 ;   Inputs:         none
                              865 ;                        
                              866 ;   Outputs:        none
                              867 ;   
                              868 ;   Notes:          This does not modify any registers  
                              869 ;
                              870 ;   SeeAlso:        
                              871 ;
                              872 ;<
                              873 ;///////////////////////////////////////////////////////////////////////////////
                              874 InstrumentPopContext macro 
                              875   if (@DEF('USE_INSTRUMENTATION'))
                              876     extern FInstrumentPopContext
                              877     jsr FInstrumentPopContext
                              878   endif 
                              879   endm
                              881 ;///////////////////////////////////////////////////////////////////////////////
                              882 ;
                              883 ;>  Name:           InstrumentSetValue 
                              884 ;
                              885 ;   Type:           Macro
                              886 ;
                              887 ;   Description:    calls the instrument functions specified.
                              888 ;
                              889 ;   Inputs:         Value
                              890 ;                        
                              891 ;   Outputs:        none
                              892 ;   
                              893 ;   Notes:          This does not modify any registers  
                              894 ;
                              895 ;   SeeAlso:        
                              896 ;
                              897 ;<
                              898 ;///////////////////////////////////////////////////////////////////////////////
                              899 InstrumentSetValue macro value
                              900   if (@DEF('USE_INSTRUMENTATION'))
                              901     extern FInstrumentSetValue
                              902     jsr PushA
                              903     move #>value,a
                              904     jsr FInstrumentSetValue
                              905     jsr PopA
                              906   endif 
                              907   endm
                              910 ;///////////////////////////////////////////////////////////////////////////////
                              911 ;
                              912 ;>  Name:           InstrumentSetEvent 
                              913 ;
                              914 ;   Type:           Macro
                              915 ;
                              916 ;   Description:    calls the instrument functions specified.
                              917 ;
                              918 ;   Inputs:         Value
                              919 ;                        
                              920 ;   Outputs:        none
                              921 ;   
                              922 ;   Notes:          This does not modify any registers  
                              923 ;
                              924 ;   SeeAlso:        
                              925 ;
                              926 ;<
                              927 ;///////////////////////////////////////////////////////////////////////////////
                              928 InstrumentSetEvent macro event
                              929   if (@DEF('USE_INSTRUMENTATION'))
                              930     extern FInstrumentSetEvent
                              931     jsr PushA
                              932     move #>event,a
                              933     jsr FInstrumentSetEvent
                              934     jsr PopA
                              935   endif 
                              936   endm
                              938 ;///////////////////////////////////////////////////////////////////////////////
                              939 ;
                              940 ;>  Name:           InstrumentClearEvent 
                              941 ;
                              942 ;   Type:           Macro
                              943 ;
                              944 ;   Description:    calls the instrument functions specified.
                              945 ;
                              946 ;   Inputs:         event
                              947 ;                        
                              948 ;   Outputs:        none
                              949 ;   
                              950 ;   Notes:          This does not modify any registers  
                              951 ;
                              952 ;   SeeAlso:        
                              953 ;
                              954 ;<
                              955 ;///////////////////////////////////////////////////////////////////////////////
                              956 InstrumentClearEvent macro event
                              957   if (@DEF('USE_INSTRUMENTATION'))
                              958     extern FInstrumentClearEvent
                              959     jsr PushA
                              960     move #>event,a
                              961     jsr FInstrumentClearEvent
                              962     jsr PopA
                              963   endif 
                              964   endm
                              966 ;///////////////////////////////////////////////////////////////////////////////
                              967 ;
                              968 ;>  Name:           InstrumentToggleEvent 
                              969 ;
                              970 ;   Type:           Macro
                              971 ;
                              972 ;   Description:    calls the instrument functions specified.
                              973 ;
                              974 ;   Inputs:         event
                              975 ;                        
                              976 ;   Outputs:        none
                              977 ;   
                              978 ;   Notes:          This does not modify any registers  
                              979 ;
                              980 ;   SeeAlso:        
                              981 ;
                              982 ;<
                              983 ;///////////////////////////////////////////////////////////////////////////////
                              984 InstrumentToggleEvent macro event
                              985   if (@DEF('USE_INSTRUMENTATION'))
                              986     extern FInstrumentToggleEvent
                              987     jsr PushA
                              988     move #>event,a
                              989     jsr FInstrumentToggleEvent
                              990     jsr PopA
                              991   endif 
                              992   endm
                               17             include "stack.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 Decoder Xrefs
                                5 ;******************************************************************************
                               17     
                               18             include "stackmem.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 Stack Xrefs
                                5 ;******************************************************************************
                               19             include "const.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 const.EXTERN 
                                5 ;******************************************************************************
                                7    DEFINE   const_xref  '1'
                               42     ; Parthus compatability
                               20                 include "sysmisc.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST System Miscellaneous Routines
                                5 ;******************************************************************************
                                8 SYSMISC_XREF equ 1
                                9 ;Functions
                               21         include "bufdesc.xref"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ; Copyright(C) SigmaTel, Inc. 2001
                                3 ;
                                4 ; STMP Buffer Descriptor Include
                                5 ;///////////////////////////////////////////////////////////////////////////////
                                8 BUFDESC_XREF equ 1
                                9 ;Functions
                               17     ; WMA specific code
                               20 ;Variables in X
                               21 ;   none
                               22 ;Variables in Y
                               23 ;   none
                               22         
                               23 ;*******************************************************************************
                               24 ;  Extern definitions
                               25 ;*******************************************************************************
                               46 ;*******************************************************************************
                               47 ;  X memory
                               48 ;*******************************************************************************
                               49 ; !!!!!!!!!!!!! All DAC xmem goes in dacmem.asm
                               51 ;*******************************************************************************
                               52 ;  Y memory
                               53 ;*******************************************************************************
Y:0000                         54         org     y,"DacMem_ModL_Y":
                               56         buffer  M,DacData1Size
                               57 DacData1L
Y:0000 000000                  58         bsc     DacData1Size,0
   |   REPEATS                    
Y:0011
                               59         endbuf
Y:0000                         61         org     y,"DacMem_ModR_Y":
                               62         buffer  M,DacData1Size
                               63 DacData1R
Y:0000 000000                  64         bsc     DacData1Size,0
   |   REPEATS                    
Y:0011
                               65         endbuf
Y:0000                         67         org     y,"DacMem_Y":
                               69         
Y:0000 rrrrrr                  70 DacData1LPtr             dc      DacData1L                     
Y:0001 rrrrrr                  71 DacData1RPtr             dc      DacData1R                     
                               74 ;-----------
                               75 ; These must stay in this order:
Y:0002 rrrrrr                  76 DacBufDescriptor         dc      DacBuf
Y:0003 0001FF                  77 DacBufModPtr             dc      DacBufModulo
Y:0004 000200                  78 DacBufSizePtr            dc      DacBufSize
Y:0005 rrrrrr                  79 DacBufHeadPtr            dc      DacBuf                ; DacBuf Head Ptr
Y:0006 rrrrrr                  80 DacBufTailPtr            dc      DacBuf                ; DacBufTailPtr
                               81 ;-----------
Y:0007 000000                  83 DacUfErrCount            dc      0                     ; Counter for DAC underflow exceptions
Y:0008 000000                  84 DacUfBuffCount           dc      0                     ; Counter for number of silence buffers inserted (for underflows)
Y:0009 000000                  85 DacSamplestoProcess              dc              0                                         ; To process not more than 64 samples.       
Y:000A 000000                  86 TotalSamplestoProcess    dc              0
Y:000B 000000                  87 FgndLoopCnt                              dc              0
Y:000C 000000                  90 Fg_EncodeStfm                   dc  0
                               93 ; This must stay in this order. 
                               95 DacSampFreqTable        
Y:000D 2DE000                  96                                                 dc      DAC8kHz                                 ; 8000
Y:000E 21037C                  97                         dc      DAC11_025kHz                    ; 11025
Y:000F 1E4000                  98                         dc      DAC12kHz                                ; 12000
Y:0010 167000                  99                         dc      DAC16kHz                                ; 16000
Y:0011 1001BE                 100                         dc      DAC22_05kHz                             ; 22050
Y:0012 0EA000                 101                         dc      DAC24kHz                                ; 24000
Y:0013 0AB800                 102                         dc      DAC32kHz                                ; 32000
Y:0014 0780DF                 103                         dc      DAC44_1kHz                      ; 44100
Y:0015 06D000                 104                         dc      DAC48kHz                                ; 48000
