TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd166b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;      sed15xx.c:
                               96 ; 1    |#include "types.h"
                               97 
                               99 
                              100 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              101 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              102 ; 3    |//
                              103 ; 4    |// Filename: types.h
                              104 ; 5    |// Description: Standard data types
                              105 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              106 ; 7    |
                              107 ; 8    |#ifndef _TYPES_H
                              108 ; 9    |#define _TYPES_H
                              109 ; 10   |
                              110 ; 11   |// TODO:  move this outta here!
                              111 ; 12   |#if !defined(NOERROR)
                              112 ; 13   |#define NOERROR 0
                              113 ; 14   |#define SUCCESS 0
                              114 ; 15   |#endif 
                              115 ; 16   |#if !defined(SUCCESS)
                              116 ; 17   |#define SUCCESS  0
                              117 ; 18   |#endif
                              118 ; 19   |#if !defined(ERROR)
                              119 ; 20   |#define ERROR   -1
                              120 ; 21   |#endif
                              121 ; 22   |#if !defined(FALSE)
                              122 ; 23   |#define FALSE 0
                              123 ; 24   |#endif
                              124 ; 25   |#if !defined(TRUE)
                              125 ; 26   |#define TRUE  1
                              126 ; 27   |#endif
                              127 ; 28   |
                              128 ; 29   |#if !defined(NULL)
                              129 ; 30   |#define NULL 0
                              130 ; 31   |#endif
                              131 ; 32   |
                              132 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              134 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              135 ; 36   |#define MAX_ULONG   (-1) 
                              136 ; 37   |
                              137 ; 38   |#define WORD_SIZE   24              // word size in bits
                              138 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              139 ; 40   |
                              140 ; 41   |
                              141 ; 42   |#define BYTE    unsigned char       // btVarName
                              142 ; 43   |#define CHAR    signed char         // cVarName
                              143 ; 44   |#define USHORT  unsigned short      // usVarName
                              144 ; 45   |#define SHORT   unsigned short      // sVarName
                              145 ; 46   |#define WORD    unsigned int        // wVarName
                              146 ; 47   |#define INT     signed int          // iVarName
                              147 ; 48   |#define DWORD   unsigned long       // dwVarName
                              148 ; 49   |#define LONG    signed long         // lVarName
                              149 ; 50   |#define BOOL    unsigned int        // bVarName
                              150 ; 51   |#define FRACT   _fract              // frVarName
                              151 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              152 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              153 ; 54   |#define FLOAT   float               // fVarName
                              154 ; 55   |#define DBL     double              // dVarName
                              155 ; 56   |#define ENUM    enum                // eVarName
                              156 ; 57   |#define CMX     _complex            // cmxVarName
                              157 ; 58   |typedef WORD UCS3;                   // 
                              158 ; 59   |
                              159 ; 60   |#define UINT16  unsigned short
                              160 ; 61   |#define UINT8   unsigned char   
                              161 ; 62   |#define UINT32  unsigned long
                              162 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              163 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              164 ; 65   |#define WCHAR   UINT16
                              165 ; 66   |
                              166 ; 67   |//UINT128 is 16 bytes or 6 words
                              167 ; 68   |typedef struct UINT128_3500 {   
                              168 ; 69   |    int val[6];     
                              169 ; 70   |} UINT128_3500;
                              170 ; 71   |
                              171 ; 72   |#define UINT128   UINT128_3500
                              172 ; 73   |
                              173 ; 74   |// Little endian word packed byte strings:   
                              174 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              175 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              176 ; 77   |// Little endian word packed byte strings:   
                              177 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              178 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              179 ; 80   |
                              180 ; 81   |// Declare Memory Spaces To Use When Coding
                              181 ; 82   |// A. Sector Buffers
                              182 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              183 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              184 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              185 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              186 
                              188 
                              189 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              190 ; 88   |// B. Media DDI Memory
                              191 ; 89   |#define MEDIA_DDI_MEM _Y
                              192 ; 90   |
                              193 ; 91   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 92   |
                              195 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              196 ; 94   |// Examples of circular pointers:
                              197 ; 95   |//    INT CIRC cpiVarName
                              198 ; 96   |//    DWORD CIRC cpdwVarName
                              199 ; 97   |
                              200 ; 98   |#define RETCODE INT                 // rcVarName
                              201 ; 99   |
                              202 ; 100  |// generic bitfield structure
                              203 ; 101  |struct Bitfield {
                              204 ; 102  |    unsigned int B0  :1;
                              205 ; 103  |    unsigned int B1  :1;
                              206 ; 104  |    unsigned int B2  :1;
                              207 ; 105  |    unsigned int B3  :1;
                              208 ; 106  |    unsigned int B4  :1;
                              209 ; 107  |    unsigned int B5  :1;
                              210 ; 108  |    unsigned int B6  :1;
                              211 ; 109  |    unsigned int B7  :1;
                              212 ; 110  |    unsigned int B8  :1;
                              213 ; 111  |    unsigned int B9  :1;
                              214 ; 112  |    unsigned int B10 :1;
                              215 ; 113  |    unsigned int B11 :1;
                              216 ; 114  |    unsigned int B12 :1;
                              217 ; 115  |    unsigned int B13 :1;
                              218 ; 116  |    unsigned int B14 :1;
                              219 ; 117  |    unsigned int B15 :1;
                              220 ; 118  |    unsigned int B16 :1;
                              221 ; 119  |    unsigned int B17 :1;
                              222 ; 120  |    unsigned int B18 :1;
                              223 ; 121  |    unsigned int B19 :1;
                              224 ; 122  |    unsigned int B20 :1;
                              225 ; 123  |    unsigned int B21 :1;
                              226 ; 124  |    unsigned int B22 :1;
                              227 ; 125  |    unsigned int B23 :1;
                              228 ; 126  |};
                              229 ; 127  |
                              230 ; 128  |union BitInt {
                              231 ; 129  |        struct Bitfield B;
                              232 ; 130  |        int        I;
                              233 ; 131  |};
                              234 ; 132  |
                              235 ; 133  |#define MAX_MSG_LENGTH 10
                              236 ; 134  |struct CMessage
                              237 ; 135  |{
                              238 ; 136  |        unsigned int m_uLength;
                              239 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              240 ; 138  |};
                              241 ; 139  |
                              242 ; 140  |typedef struct {
                              243 ; 141  |    WORD m_wLength;
                              244 ; 142  |    WORD m_wMessage;
                              245 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              246 ; 144  |} Message;
                              247 ; 145  |
                              248 ; 146  |struct MessageQueueDescriptor
                              249 ; 147  |{
                              250 ; 148  |        int *m_pBase;
                              251 ; 149  |        int m_iModulo;
                              252 ; 150  |        int m_iSize;
                              253 ; 151  |        int *m_pHead;
                              254 ; 152  |        int *m_pTail;
                              255 ; 153  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 154  |
                              257 ; 155  |struct ModuleEntry
                              258 ; 156  |{
                              259 ; 157  |    int m_iSignaledEventMask;
                              260 ; 158  |    int m_iWaitEventMask;
                              261 ; 159  |    int m_iResourceOfCode;
                              262 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              263 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              264 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              265 ; 163  |    int m_uTimeOutHigh;
                              266 ; 164  |    int m_uTimeOutLow;
                              267 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              268 ; 166  |};
                              269 ; 167  |
                              270 ; 168  |union WaitMask{
                              271 ; 169  |    struct B{
                              272 ; 170  |        unsigned int m_bNone     :1;
                              273 ; 171  |        unsigned int m_bMessage  :1;
                              274 ; 172  |        unsigned int m_bTimer    :1;
                              275 ; 173  |        unsigned int m_bButton   :1;
                              276 ; 174  |    } B;
                              277 ; 175  |    int I;
                              278 ; 176  |} ;
                              279 ; 177  |
                              280 ; 178  |
                              281 ; 179  |struct Button {
                              282 ; 180  |        WORD wButtonEvent;
                              283 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              284 ; 182  |};
                              285 ; 183  |
                              286 ; 184  |struct Message {
                              287 ; 185  |        WORD wMsgLength;
                              288 ; 186  |        WORD wMsgCommand;
                              289 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              290 ; 188  |};
                              291 ; 189  |
                              292 ; 190  |union EventTypes {
                              293 ; 191  |        struct CMessage msg;
                              294 ; 192  |        struct Button Button ;
                              295 ; 193  |        struct Message Message;
                              296 ; 194  |};
                              297 ; 195  |
                              298 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              299 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              300 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              301 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              302 ; 200  |
                              303 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              304 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              305 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              306 ; 204  |
                              307 ; 205  |#if DEBUG
                              308 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              309 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              310 ; 208  |#else 
                              311 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              312 ; 210  |#define DebugBuildAssert(x)    
                              313 ; 211  |#endif
                              314 ; 212  |
                              315 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 214  |//  #pragma asm
                              317 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              318 ; 216  |//  #pragma endasm
                              319 ; 217  |
                              320 ; 218  |
                              321 ; 219  |#ifdef COLOR_262K
                              322 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              323 ; 221  |#elif defined(COLOR_65K)
                              324 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              325 ; 223  |#else
                              326 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              327 ; 225  |#endif
                              328 ; 226  |    
                              329 ; 227  |#endif // #ifndef _TYPES_H
                              330 
                              332 
                              333 ; 2    |#include "regsgpio.h"
                              334 
                              336 
                              337 ; 1    |#if !(defined(__REGS_GPIO_INC))
                              338 ; 2    |#define __REGS_GPIO_INC 1
                              339 ; 3    |
                              340 ; 4    |#include "types.h"
                              341 
                              343 
                              344 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              346 ; 3    |//
                              347 ; 4    |// Filename: types.h
                              348 ; 5    |// Description: Standard data types
                              349 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              350 ; 7    |
                              351 ; 8    |#ifndef _TYPES_H
                              352 ; 9    |#define _TYPES_H
                              353 ; 10   |
                              354 ; 11   |// TODO:  move this outta here!
                              355 ; 12   |#if !defined(NOERROR)
                              356 ; 13   |#define NOERROR 0
                              357 ; 14   |#define SUCCESS 0
                              358 ; 15   |#endif 
                              359 ; 16   |#if !defined(SUCCESS)
                              360 ; 17   |#define SUCCESS  0
                              361 ; 18   |#endif
                              362 ; 19   |#if !defined(ERROR)
                              363 ; 20   |#define ERROR   -1
                              364 ; 21   |#endif
                              365 ; 22   |#if !defined(FALSE)
                              366 ; 23   |#define FALSE 0
                              367 ; 24   |#endif
                              368 ; 25   |#if !defined(TRUE)
                              369 ; 26   |#define TRUE  1
                              370 ; 27   |#endif
                              371 ; 28   |
                              372 ; 29   |#if !defined(NULL)
                              373 ; 30   |#define NULL 0
                              374 ; 31   |#endif
                              375 ; 32   |
                              376 ; 33   |#define MAX_INT     0x7FFFFF
                              377 ; 34   |#define MAX_LONG    0x7FFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              379 ; 36   |#define MAX_ULONG   (-1) 
                              380 ; 37   |
                              381 ; 38   |#define WORD_SIZE   24              // word size in bits
                              382 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              383 ; 40   |
                              384 ; 41   |
                              385 ; 42   |#define BYTE    unsigned char       // btVarName
                              386 ; 43   |#define CHAR    signed char         // cVarName
                              387 ; 44   |#define USHORT  unsigned short      // usVarName
                              388 ; 45   |#define SHORT   unsigned short      // sVarName
                              389 ; 46   |#define WORD    unsigned int        // wVarName
                              390 ; 47   |#define INT     signed int          // iVarName
                              391 ; 48   |#define DWORD   unsigned long       // dwVarName
                              392 ; 49   |#define LONG    signed long         // lVarName
                              393 ; 50   |#define BOOL    unsigned int        // bVarName
                              394 ; 51   |#define FRACT   _fract              // frVarName
                              395 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              396 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              397 ; 54   |#define FLOAT   float               // fVarName
                              398 ; 55   |#define DBL     double              // dVarName
                              399 ; 56   |#define ENUM    enum                // eVarName
                              400 ; 57   |#define CMX     _complex            // cmxVarName
                              401 ; 58   |typedef WORD UCS3;                   // 
                              402 ; 59   |
                              403 ; 60   |#define UINT16  unsigned short
                              404 ; 61   |#define UINT8   unsigned char   
                              405 ; 62   |#define UINT32  unsigned long
                              406 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              407 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              408 ; 65   |#define WCHAR   UINT16
                              409 ; 66   |
                              410 ; 67   |//UINT128 is 16 bytes or 6 words
                              411 ; 68   |typedef struct UINT128_3500 {   
                              412 ; 69   |    int val[6];     
                              413 ; 70   |} UINT128_3500;
                              414 ; 71   |
                              415 ; 72   |#define UINT128   UINT128_3500
                              416 ; 73   |
                              417 ; 74   |// Little endian word packed byte strings:   
                              418 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              419 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              420 ; 77   |// Little endian word packed byte strings:   
                              421 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              422 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              423 ; 80   |
                              424 ; 81   |// Declare Memory Spaces To Use When Coding
                              425 ; 82   |// A. Sector Buffers
                              426 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              427 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              428 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              429 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              430 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              431 ; 88   |// B. Media DDI Memory
                              432 ; 89   |#define MEDIA_DDI_MEM _Y
                              433 ; 90   |
                              434 ; 91   |
                              435 ; 92   |
                              436 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              437 ; 94   |// Examples of circular pointers:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              438 ; 95   |//    INT CIRC cpiVarName
                              439 ; 96   |//    DWORD CIRC cpdwVarName
                              440 ; 97   |
                              441 ; 98   |#define RETCODE INT                 // rcVarName
                              442 ; 99   |
                              443 ; 100  |// generic bitfield structure
                              444 ; 101  |struct Bitfield {
                              445 ; 102  |    unsigned int B0  :1;
                              446 ; 103  |    unsigned int B1  :1;
                              447 ; 104  |    unsigned int B2  :1;
                              448 ; 105  |    unsigned int B3  :1;
                              449 ; 106  |    unsigned int B4  :1;
                              450 ; 107  |    unsigned int B5  :1;
                              451 ; 108  |    unsigned int B6  :1;
                              452 ; 109  |    unsigned int B7  :1;
                              453 ; 110  |    unsigned int B8  :1;
                              454 ; 111  |    unsigned int B9  :1;
                              455 ; 112  |    unsigned int B10 :1;
                              456 ; 113  |    unsigned int B11 :1;
                              457 ; 114  |    unsigned int B12 :1;
                              458 ; 115  |    unsigned int B13 :1;
                              459 ; 116  |    unsigned int B14 :1;
                              460 ; 117  |    unsigned int B15 :1;
                              461 ; 118  |    unsigned int B16 :1;
                              462 ; 119  |    unsigned int B17 :1;
                              463 ; 120  |    unsigned int B18 :1;
                              464 ; 121  |    unsigned int B19 :1;
                              465 ; 122  |    unsigned int B20 :1;
                              466 ; 123  |    unsigned int B21 :1;
                              467 ; 124  |    unsigned int B22 :1;
                              468 ; 125  |    unsigned int B23 :1;
                              469 ; 126  |};
                              470 ; 127  |
                              471 ; 128  |union BitInt {
                              472 ; 129  |        struct Bitfield B;
                              473 ; 130  |        int        I;
                              474 ; 131  |};
                              475 ; 132  |
                              476 ; 133  |#define MAX_MSG_LENGTH 10
                              477 ; 134  |struct CMessage
                              478 ; 135  |{
                              479 ; 136  |        unsigned int m_uLength;
                              480 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              481 ; 138  |};
                              482 ; 139  |
                              483 ; 140  |typedef struct {
                              484 ; 141  |    WORD m_wLength;
                              485 ; 142  |    WORD m_wMessage;
                              486 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              487 ; 144  |} Message;
                              488 ; 145  |
                              489 ; 146  |struct MessageQueueDescriptor
                              490 ; 147  |{
                              491 ; 148  |        int *m_pBase;
                              492 ; 149  |        int m_iModulo;
                              493 ; 150  |        int m_iSize;
                              494 ; 151  |        int *m_pHead;
                              495 ; 152  |        int *m_pTail;
                              496 ; 153  |};
                              497 ; 154  |
                              498 ; 155  |struct ModuleEntry
                              499 ; 156  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              500 ; 157  |    int m_iSignaledEventMask;
                              501 ; 158  |    int m_iWaitEventMask;
                              502 ; 159  |    int m_iResourceOfCode;
                              503 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              504 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              505 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              506 ; 163  |    int m_uTimeOutHigh;
                              507 ; 164  |    int m_uTimeOutLow;
                              508 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              509 ; 166  |};
                              510 ; 167  |
                              511 ; 168  |union WaitMask{
                              512 ; 169  |    struct B{
                              513 ; 170  |        unsigned int m_bNone     :1;
                              514 ; 171  |        unsigned int m_bMessage  :1;
                              515 ; 172  |        unsigned int m_bTimer    :1;
                              516 ; 173  |        unsigned int m_bButton   :1;
                              517 ; 174  |    } B;
                              518 ; 175  |    int I;
                              519 ; 176  |} ;
                              520 ; 177  |
                              521 ; 178  |
                              522 ; 179  |struct Button {
                              523 ; 180  |        WORD wButtonEvent;
                              524 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              525 ; 182  |};
                              526 ; 183  |
                              527 ; 184  |struct Message {
                              528 ; 185  |        WORD wMsgLength;
                              529 ; 186  |        WORD wMsgCommand;
                              530 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              531 ; 188  |};
                              532 ; 189  |
                              533 ; 190  |union EventTypes {
                              534 ; 191  |        struct CMessage msg;
                              535 ; 192  |        struct Button Button ;
                              536 ; 193  |        struct Message Message;
                              537 ; 194  |};
                              538 ; 195  |
                              539 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              540 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              541 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              542 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              543 ; 200  |
                              544 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              545 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              546 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              547 ; 204  |
                              548 ; 205  |#if DEBUG
                              549 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              550 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              551 ; 208  |#else 
                              552 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              553 ; 210  |#define DebugBuildAssert(x)    
                              554 ; 211  |#endif
                              555 ; 212  |
                              556 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              557 ; 214  |//  #pragma asm
                              558 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              559 ; 216  |//  #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              560 ; 217  |
                              561 ; 218  |
                              562 ; 219  |#ifdef COLOR_262K
                              563 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              564 ; 221  |#elif defined(COLOR_65K)
                              565 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              566 ; 223  |#else
                              567 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              568 ; 225  |#endif
                              569 ; 226  |    
                              570 ; 227  |#endif // #ifndef _TYPES_H
                              571 
                              573 
                              574 ; 5    |
                              575 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              576 ; 7    |//  Interrupt Collector Registers
                              577 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                              578 ; 9    |
                              579 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                              580 ; 11   |
                              581 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                              582 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                              583 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                              584 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                              585 ; 16   |
                              586 ; 17   |#define HW_GPB0_BLOCKNUM 0
                              587 ; 18   |#define HW_GPB1_BLOCKNUM 1
                              588 ; 19   |#define HW_GPB2_BLOCKNUM 2
                              589 ; 20   |#define HW_GPB3_BLOCKNUM 3
                              590 ; 21   |
                              591 ; 22   |#define HW_GPB_GPENR 0
                              592 ; 23   |#define HW_GPB_GPDOR 1
                              593 ; 24   |#define HW_GPB_GPDIR 2
                              594 ; 25   |#define HW_GPB_GPDOER 3
                              595 ; 26   |#define HW_GPB_GPIPENR 4
                              596 ; 27   |#define HW_GPB_GPIENR 5
                              597 ; 28   |#define HW_GPB_GPILVLR 6
                              598 ; 29   |#define HW_GPB_GPIPOLR 7
                              599 ; 30   |#define HW_GPB_GPISTATR 8
                              600 ; 31   |#define HW_GPB_GPPWR 9
                              601 ; 32   |#define HW_GPB_GP8MA 10
                              602 ; 33   |
                              603 ; 34   |
                              604 ; 35   |
                              605 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              606 ; 37   |//  GPIO Register Bit Positions
                              607 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                              608 ; 39   |{
                              609 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                              610 ; 41   |    unsigned int I;
                              611 ; 42   |    unsigned int U;
                              612 ; 43   |} gpr_type;
                              613 ; 44   |
                              614 ; 45   |#define HW_GP_B0_BITPOS 0
                              615 ; 46   |#define HW_GP_B1_BITPOS 1
                              616 ; 47   |#define HW_GP_B2_BITPOS 2
                              617 ; 48   |#define HW_GP_B3_BITPOS 3
                              618 ; 49   |#define HW_GP_B4_BITPOS 4
                              619 ; 50   |#define HW_GP_B5_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              620 ; 51   |#define HW_GP_B6_BITPOS 6
                              621 ; 52   |#define HW_GP_B7_BITPOS 7
                              622 ; 53   |#define HW_GP_B8_BITPOS 8
                              623 ; 54   |#define HW_GP_B9_BITPOS 9
                              624 ; 55   |#define HW_GP_B10_BITPOS 10
                              625 ; 56   |#define HW_GP_B11_BITPOS 11
                              626 ; 57   |#define HW_GP_B12_BITPOS 12
                              627 ; 58   |#define HW_GP_B13_BITPOS 13
                              628 ; 59   |#define HW_GP_B14_BITPOS 14
                              629 ; 60   |#define HW_GP_B15_BITPOS 15
                              630 ; 61   |#define HW_GP_B16_BITPOS 16
                              631 ; 62   |#define HW_GP_B17_BITPOS 17
                              632 ; 63   |#define HW_GP_B18_BITPOS 18
                              633 ; 64   |#define HW_GP_B19_BITPOS 19
                              634 ; 65   |#define HW_GP_B20_BITPOS 20
                              635 ; 66   |#define HW_GP_B21_BITPOS 21
                              636 ; 67   |#define HW_GP_B22_BITPOS 22
                              637 ; 68   |#define HW_GP_B23_BITPOS 23
                              638 ; 69   |
                              639 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                              640 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                              641 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                              642 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                              643 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                              644 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                              645 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                              646 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                              647 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                              648 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                              649 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                              650 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                              651 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                              652 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                              653 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                              654 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                              655 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                              656 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                              657 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                              658 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                              659 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                              660 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                              661 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                              662 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                              663 ; 94   |
                              664 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                              665 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                              666 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                              667 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                              668 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                              669 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                              670 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                              671 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                              672 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                              673 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                              674 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                              675 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                              676 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                              677 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                              678 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                              679 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                              680 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                              681 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              682 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                              683 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                              684 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                              685 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                              686 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                              687 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                              688 ; 119  |
                              689 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                              690 ; 121  |//  GPIO 8mA Register Bit Positions
                              691 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                              692 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                              693 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                              694 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                              695 ; 126  |
                              696 ; 127  |
                              697 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                              698 ; 129  |//  Logical GPIO numbers
                              699 ; 130  |#define HW_GPIO_000 0
                              700 ; 131  |#define HW_GPIO_001 1
                              701 ; 132  |#define HW_GPIO_002 2
                              702 ; 133  |#define HW_GPIO_003 3
                              703 ; 134  |#define HW_GPIO_004 4
                              704 ; 135  |#define HW_GPIO_005 5
                              705 ; 136  |#define HW_GPIO_006 6
                              706 ; 137  |#define HW_GPIO_007 7
                              707 ; 138  |#define HW_GPIO_008 8
                              708 ; 139  |#define HW_GPIO_009 9
                              709 ; 140  |#define HW_GPIO_010 10
                              710 ; 141  |#define HW_GPIO_011 11
                              711 ; 142  |#define HW_GPIO_012 12
                              712 ; 143  |#define HW_GPIO_013 13
                              713 ; 144  |#define HW_GPIO_014 14
                              714 ; 145  |#define HW_GPIO_015 15
                              715 ; 146  |#define HW_GPIO_016 16
                              716 ; 147  |#define HW_GPIO_017 17
                              717 ; 148  |#define HW_GPIO_018 18
                              718 ; 149  |#define HW_GPIO_019 19
                              719 ; 150  |#define HW_GPIO_020 20
                              720 ; 151  |#define HW_GPIO_021 21
                              721 ; 152  |#define HW_GPIO_022 22
                              722 ; 153  |#define HW_GPIO_023 23
                              723 ; 154  |#define HW_GPIO_024 24
                              724 ; 155  |#define HW_GPIO_025 25
                              725 ; 156  |#define HW_GPIO_026 26
                              726 ; 157  |#define HW_GPIO_027 27
                              727 ; 158  |#define HW_GPIO_028 28
                              728 ; 159  |#define HW_GPIO_029 29
                              729 ; 160  |#define HW_GPIO_030 30
                              730 ; 161  |#define HW_GPIO_031 31
                              731 ; 162  |#define HW_GPIO_032 32
                              732 ; 163  |#define HW_GPIO_033 33
                              733 ; 164  |#define HW_GPIO_034 34
                              734 ; 165  |#define HW_GPIO_035 35
                              735 ; 166  |#define HW_GPIO_036 36
                              736 ; 167  |#define HW_GPIO_037 37
                              737 ; 168  |#define HW_GPIO_038 38
                              738 ; 169  |#define HW_GPIO_039 39
                              739 ; 170  |#define HW_GPIO_040 40
                              740 ; 171  |#define HW_GPIO_041 41
                              741 ; 172  |#define HW_GPIO_042 42
                              742 ; 173  |#define HW_GPIO_043 43
                              743 ; 174  |#define HW_GPIO_044 44
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              744 ; 175  |#define HW_GPIO_045 45
                              745 ; 176  |#define HW_GPIO_046 46
                              746 ; 177  |#define HW_GPIO_047 47
                              747 ; 178  |#define HW_GPIO_048 48
                              748 ; 179  |#define HW_GPIO_049 49
                              749 ; 180  |#define HW_GPIO_050 50
                              750 ; 181  |#define HW_GPIO_051 51
                              751 ; 182  |#define HW_GPIO_052 52
                              752 ; 183  |#define HW_GPIO_053 53
                              753 ; 184  |#define HW_GPIO_054 54
                              754 ; 185  |#define HW_GPIO_055 55
                              755 ; 186  |#define HW_GPIO_056 56
                              756 ; 187  |#define HW_GPIO_057 57
                              757 ; 188  |#define HW_GPIO_058 58
                              758 ; 189  |#define HW_GPIO_059 59
                              759 ; 190  |#define HW_GPIO_060 60
                              760 ; 191  |#define HW_GPIO_061 61
                              761 ; 192  |#define HW_GPIO_062 62
                              762 ; 193  |#define HW_GPIO_063 63
                              763 ; 194  |#define HW_GPIO_064 64
                              764 ; 195  |#define HW_GPIO_065 65
                              765 ; 196  |#define HW_GPIO_066 66
                              766 ; 197  |#define HW_GPIO_067 67
                              767 ; 198  |#define HW_GPIO_068 68
                              768 ; 199  |#define HW_GPIO_069 69
                              769 ; 200  |#define HW_GPIO_070 70
                              770 ; 201  |#define HW_GPIO_071 71
                              771 ; 202  |#define HW_GPIO_072 72
                              772 ; 203  |#define HW_GPIO_073 73
                              773 ; 204  |#define HW_GPIO_074 74
                              774 ; 205  |#define HW_GPIO_075 75
                              775 ; 206  |#define HW_GPIO_076 76
                              776 ; 207  |#define HW_GPIO_077 77
                              777 ; 208  |#define HW_GPIO_078 78
                              778 ; 209  |#define HW_GPIO_079 79
                              779 ; 210  |#define HW_GPIO_080 80
                              780 ; 211  |#define HW_GPIO_081 81
                              781 ; 212  |#define HW_GPIO_082 82
                              782 ; 213  |#define HW_GPIO_083 83
                              783 ; 214  |#define HW_GPIO_084 84
                              784 ; 215  |#define HW_GPIO_085 85
                              785 ; 216  |#define HW_GPIO_086 86
                              786 ; 217  |#define HW_GPIO_087 87
                              787 ; 218  |#define HW_GPIO_088 88
                              788 ; 219  |#define HW_GPIO_089 89
                              789 ; 220  |#define HW_GPIO_090 90
                              790 ; 221  |#define HW_GPIO_091 91
                              791 ; 222  |#define HW_GPIO_092 92
                              792 ; 223  |#define HW_GPIO_093 93
                              793 ; 224  |#define HW_GPIO_094 94
                              794 ; 225  |#define HW_GPIO_095 95
                              795 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                              796 ; 227  |
                              797 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                              798 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                              799 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                              800 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              801 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                              802 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                              803 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                              804 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                              805 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                              806 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              807 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                              808 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                              809 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                              810 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                              811 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                              812 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                              813 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                              814 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                              815 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                              816 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                              817 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              818 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                              819 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              820 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              821 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              822 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              823 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                              824 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              825 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              826 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              827 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              828 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              829 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                              830 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              831 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              832 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              833 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              834 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                              835 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              836 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              837 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              838 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              839 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              840 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                              841 ; 272  |
                              842 ; 273  |#endif
                              843 ; 274  |
                              844 
                              846 
                              847 ; 3    |#include "messages.h"
                              848 
                              850 
                              851 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              852 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              853 ; 3    |// Message defs
                              854 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              855 ; 5    |
                              856 ; 6    |#if (!defined(MSGEQU_INC))
                              857 ; 7    |#define MSGEQU_INC 1
                              858 ; 8    |
                              859 ; 9    |
                              860 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              861 ; 11   |
                              862 ; 12   |
                              863 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              864 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              865 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              866 ; 16   |#define MSG_TYPE_LCD 0x030000
                              867 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              868 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              869 ; 19   |#define MSG_TYPE_MENU 0x060000
                              870 ; 20   |#define MSG_TYPE_LED 0x070000
                              871 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              872 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              873 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              874 ; 24   |// Equalizer and other effects
                              875 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              876 ; 26   |#if (defined(USE_PLAYLIST3))
                              877 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              878 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              879 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              880 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              881 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              882 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                              883 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              884 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              885 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              886 ; 36   |#if defined(USE_PLAYLIST5)
                              887 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              888 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              889 ; 39   |#endif // if @def('USE_PLAYLIST5')
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              890 ; 40   |
                              891 ; 41   |// Message Structure Offsets
                              892 ; 42   |#define MSG_Length 0
                              893 ; 43   |#define MSG_ID 1
                              894 ; 44   |#define MSG_Argument1 2
                              895 ; 45   |#define MSG_Argument2 3
                              896 ; 46   |#define MSG_Argument3 4
                              897 ; 47   |#define MSG_Argument4 5
                              898 ; 48   |#define MSG_Argument5 6
                              899 ; 49   |#define MSG_Argument6 7
                              900 ; 50   |
                              901 ; 51   |
                              902 ; 52   |
                              903 ; 53   |// LCD Message IDs
                              904 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              905 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              906 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              907 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              908 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              909 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              910 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              911 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                              912 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              913 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              914 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              915 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              916 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              917 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              918 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              919 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              920 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              921 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              922 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              923 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              924 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              925 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              926 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              927 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              928 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              929 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              930 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              931 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              932 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              933 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              934 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              935 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              936 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              937 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              938 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              939 ; 89   |//Param1 = left
                              940 ; 90   |//Param2 = top
                              941 ; 91   |//Param3 = right
                              942 ; 92   |//Param4 = bottom
                              943 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              944 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                              945 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              946 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              947 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              948 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              949 ; 99   |
                              950 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              951 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              952 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                              953 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              954 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              955 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              956 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              957 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              958 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              959 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              960 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              961 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              962 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              963 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              964 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              965 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              966 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              967 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              968 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              969 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              970 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              971 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              972 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              973 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                              974 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              975 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              976 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              977 ; 127  |
                              978 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              979 ; 129  |
                              980 ; 130  |#if defined(CLCD_16BIT)
                              981 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              982 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              983 ; 133  |
                              984 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              985 ; 135  |#else 
                              986 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              987 ; 137  |#endif
                              988 ; 138  |
                              989 ; 139  |// If you change the LCD message ID's then you must
                              990 ; 140  |// also change the jump table in lcdapi.asm
                              991 ; 141  |
                              992 ; 142  |// Character LCD Message IDs
                              993 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              994 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              995 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              996 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              997 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              998 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              999 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                             1000 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             1001 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             1002 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             1003 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             1004 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             1005 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             1006 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             1007 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             1008 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             1009 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             1010 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             1011 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             1012 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             1013 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1014 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             1015 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             1016 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             1017 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                             1018 ; 168  |// also change the jump table in lcdapi.asm
                             1019 ; 169  |
                             1020 ; 170  |// Decoder Message IDs
                             1021 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1022 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1023 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1024 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1025 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1026 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1027 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1028 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1029 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1030 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1031 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1032 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1033 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1034 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                             1035 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                             1036 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                             1037 ; 187  |// If you change the Decoder message ID's, then you must
                             1038 ; 188  |// also change the jump table in decoder_overlay.asm
                             1039 ; 189  |// and in dec_adpcm_overlay.asm.
                             1040 ; 190  |
                             1041 ; 191  |// Encoder Message IDs
                             1042 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1043 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1044 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1045 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1046 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1047 ; 197  |// If you change the Encoder message ID's, then you must
                             1048 ; 198  |// also change the jump table in all encoder overlay modules.
                             1049 ; 199  |
                             1050 ; 200  |// Parser Message IDs
                             1051 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1052 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1053 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1054 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1055 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1056 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1057 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1058 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1059 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1060 ; 210  |// If you change the Parser message ID's, then you must
                             1061 ; 211  |// also change the jump table in parser.asm
                             1062 ; 212  |
                             1063 ; 213  |// Button Message IDs
                             1064 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1065 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1066 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1067 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1068 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1069 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1070 ; 220  |
                             1071 ; 221  |// Mixer Message IDs
                             1072 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1073 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1074 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1075 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1076 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1077 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1078 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1079 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1080 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1081 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1082 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1083 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1084 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1085 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1086 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1087 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1088 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1089 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1090 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1091 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1092 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1093 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1094 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1095 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1096 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1097 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1098 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1099 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1100 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1101 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1102 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1103 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1104 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1105 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1106 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1107 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1108 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1109 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1110 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1111 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1112 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                             1113 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                             1114 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                             1115 ; 265  |// If you change the mixer message ID's then you must
                             1116 ; 266  |// also change the jump table in mixer.asm
                             1117 ; 267  |#define MIXER_ON 0
                             1118 ; 268  |#define MIXER_OFF 1
                             1119 ; 269  |
                             1120 ; 270  |
                             1121 ; 271  |// System Message IDs
                             1122 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1123 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1124 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1125 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1126 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1127 ; 277  |// If you change the system message ID's then you must
                             1128 ; 278  |// also change the jump table in systemapi.asm
                             1129 ; 279  |
                             1130 ; 280  |// Menu IDs
                             1131 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1132 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1133 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1134 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1135 ; 285  |//sub parameters for this message:
                             1136 ; 286  |#define RECORDER_START 0
                             1137 ; 287  |#define RECORDER_PAUSE 0x2000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1138 ; 288  |#define RECORDER_RESUME 0x4000
                             1139 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                             1140 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1141 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1142 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                             1143 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1144 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1145 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1146 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1147 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1148 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1149 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                             1150 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                             1151 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                             1152 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                             1153 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                             1154 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                             1155 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                             1156 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                             1157 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                             1158 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                             1159 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                             1160 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                             1161 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                             1162 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                             1163 ; 313  |
                             1164 ; 314  |// Note that other versions of this file have different msg equates.
                             1165 ; 315  |// If you change the system message ID's then you must
                             1166 ; 316  |// also change the jump table in all menu *.asm
                             1167 ; 317  |
                             1168 ; 318  |// LED Message IDs
                             1169 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1170 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                             1171 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                             1172 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                             1173 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                             1174 ; 324  |// If you change the LeD message ID's then you must
                             1175 ; 325  |// also change the jump table in ledapi.asm
                             1176 ; 326  |
                             1177 ; 327  |#if (!defined(REMOVE_FM))
                             1178 ; 328  |// FM Tuner Message IDs
                             1179 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1180 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1181 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1182 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1183 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1184 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1185 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1186 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1187 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1188 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1189 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1190 ; 340  |//one parameter--the sensitivity in uV
                             1191 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1192 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1193 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1194 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1195 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1196 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1197 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1198 ; 348  |#endif
                             1199 ; 349  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1200 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1201 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1202 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1203 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1204 ; 354  |
                             1205 ; 355  |
                             1206 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1207 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1208 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1209 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1210 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1211 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1212 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1213 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1214 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1215 ; 365  |
                             1216 ; 366  |#if (defined(USE_PLAYLIST3))
                             1217 ; 367  |// Music Library
                             1218 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                             1219 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                             1220 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                             1221 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                             1222 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                             1223 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                             1224 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                             1225 ; 375  |
                             1226 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                             1227 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                             1228 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                             1229 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                             1230 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                             1231 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             1232 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             1233 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1234 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1235 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1236 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1237 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1238 ; 388  |
                             1239 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1240 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1241 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1242 ; 392  |
                             1243 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1244 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1245 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1246 ; 396  |
                             1247 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1248 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1249 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1250 ; 400  |
                             1251 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1252 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             1253 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1254 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             1255 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1256 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1257 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1258 ; 408  |
                             1259 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1260 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1261 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1262 ; 412  |
                             1263 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1264 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1265 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1266 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1267 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1268 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1269 ; 419  |
                             1270 ; 420  |#if defined(USE_PLAYLIST5)
                             1271 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1272 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1273 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             1274 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1275 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1276 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1277 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1278 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1279 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1280 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1281 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1282 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1283 ; 433  |
                             1284 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1285 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1286 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1287 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1288 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1289 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1290 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1291 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1292 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1293 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1294 ; 444  |// Events
                             1295 ; 445  |// No event
                             1296 ; 446  |#define EVENT_NONE 0x000001   
                             1297 ; 447  |// A message has been posted
                             1298 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1299 ; 449  |// Run if wait time elapsed
                             1300 ; 450  |#define EVENT_TIMER 0x000004   
                             1301 ; 451  |// Run if a button event occured
                             1302 ; 452  |#define EVENT_BUTTON 0x000008   
                             1303 ; 453  |// Run if a background event occured
                             1304 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1305 ; 455  |// The executive should immediately repeat this module
                             1306 ; 456  |#define EVENT_REPEAT 0x000020   
                             1307 ; 457  |// Run the module's init routine
                             1308 ; 458  |#define EVENT_INIT 0x800000   
                             1309 ; 459  |
                             1310 ; 460  |#define EVENT_NONE_BITPOS 0
                             1311 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1312 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1313 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1314 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1315 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1316 ; 466  |#define EVENT_INIT_BITPOS 23
                             1317 ; 467  |
                             1318 ; 468  |// Parser Message Buffers
                             1319 ; 469  |#define ParserPlayBit 0
                             1320 ; 470  |#define ButtonPressBit 1
                             1321 ; 471  |#define ParserRwndBit 1
                             1322 ; 472  |#define ParserFfwdBit 2
                             1323 ; 473  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1324 ; 474  |//NextSong Message Parameters
                             1325 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1326 ; 476  |#define NEXT_SONG 2             
                             1327 ; 477  |// ButtonPressBit1 cleared
                             1328 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1329 ; 479  |// ButtonPressBit1 set
                             1330 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1331 ; 481  |// NextSong + Ffwd
                             1332 ; 482  |#define NEXT_SONG_FFWD 4          
                             1333 ; 483  |
                             1334 ; 484  |//PrevSong Message Parameters
                             1335 ; 485  |// PrevSong + Stopped
                             1336 ; 486  |#define PREV_SONG 0          
                             1337 ; 487  |// PrevSong + Play
                             1338 ; 488  |#define PREV_SONG_PLAY 1          
                             1339 ; 489  |// PrevSong + Rwnd
                             1340 ; 490  |#define PREV_SONG_RWND 2          
                             1341 ; 491  |
                             1342 ; 492  |
                             1343 ; 493  |
                             1344 ; 494  |
                             1345 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             1346 ; 496  |
                             1347 ; 497  |
                             1348 
                             1350 
                             1351 ; 4    |#include "project.h"
                             1352 
                             1354 
                             1355 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1356 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1357 ; 3    |//  Filename: project.inc
                             1358 ; 4    |//  Description: 
                             1359 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1360 ; 6    |
                             1361 ; 7    |#if (!defined(_PROJECT_INC))
                             1362 ; 8    |#define _PROJECT_INC 1
                             1363 ; 9    |
                             1364 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1365 ; 11   |#include "hwequ.h"
                             1366 
                             1368 
                             1369 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1370 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                             1371 ; 3    |//  File        : hwequ.inc
                             1372 ; 4    |//  Description : STMP Hardware Constants
                             1373 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1374 ; 6    |
                             1375 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                             1376 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                             1377 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                             1378 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                             1379 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                             1380 ; 12   |
                             1381 ; 13   |#if (!defined(HWEQU_INC))
                             1382 ; 14   |#define HWEQU_INC 1
                             1383 ; 15   |
                             1384 ; 16   |#include "types.h"
                             1385 
                             1387 
                             1388 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1389 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1390 ; 3    |//
                             1391 ; 4    |// Filename: types.h
                             1392 ; 5    |// Description: Standard data types
                             1393 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1394 ; 7    |
                             1395 ; 8    |#ifndef _TYPES_H
                             1396 ; 9    |#define _TYPES_H
                             1397 ; 10   |
                             1398 ; 11   |// TODO:  move this outta here!
                             1399 ; 12   |#if !defined(NOERROR)
                             1400 ; 13   |#define NOERROR 0
                             1401 ; 14   |#define SUCCESS 0
                             1402 ; 15   |#endif 
                             1403 ; 16   |#if !defined(SUCCESS)
                             1404 ; 17   |#define SUCCESS  0
                             1405 ; 18   |#endif
                             1406 ; 19   |#if !defined(ERROR)
                             1407 ; 20   |#define ERROR   -1
                             1408 ; 21   |#endif
                             1409 ; 22   |#if !defined(FALSE)
                             1410 ; 23   |#define FALSE 0
                             1411 ; 24   |#endif
                             1412 ; 25   |#if !defined(TRUE)
                             1413 ; 26   |#define TRUE  1
                             1414 ; 27   |#endif
                             1415 ; 28   |
                             1416 ; 29   |#if !defined(NULL)
                             1417 ; 30   |#define NULL 0
                             1418 ; 31   |#endif
                             1419 ; 32   |
                             1420 ; 33   |#define MAX_INT     0x7FFFFF
                             1421 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1422 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1423 ; 36   |#define MAX_ULONG   (-1) 
                             1424 ; 37   |
                             1425 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1426 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1427 ; 40   |
                             1428 ; 41   |
                             1429 ; 42   |#define BYTE    unsigned char       // btVarName
                             1430 ; 43   |#define CHAR    signed char         // cVarName
                             1431 ; 44   |#define USHORT  unsigned short      // usVarName
                             1432 ; 45   |#define SHORT   unsigned short      // sVarName
                             1433 ; 46   |#define WORD    unsigned int        // wVarName
                             1434 ; 47   |#define INT     signed int          // iVarName
                             1435 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1436 ; 49   |#define LONG    signed long         // lVarName
                             1437 ; 50   |#define BOOL    unsigned int        // bVarName
                             1438 ; 51   |#define FRACT   _fract              // frVarName
                             1439 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1440 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1441 ; 54   |#define FLOAT   float               // fVarName
                             1442 ; 55   |#define DBL     double              // dVarName
                             1443 ; 56   |#define ENUM    enum                // eVarName
                             1444 ; 57   |#define CMX     _complex            // cmxVarName
                             1445 ; 58   |typedef WORD UCS3;                   // 
                             1446 ; 59   |
                             1447 ; 60   |#define UINT16  unsigned short
                             1448 ; 61   |#define UINT8   unsigned char   
                             1449 ; 62   |#define UINT32  unsigned long
                             1450 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1451 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1452 ; 65   |#define WCHAR   UINT16
                             1453 ; 66   |
                             1454 ; 67   |//UINT128 is 16 bytes or 6 words
                             1455 ; 68   |typedef struct UINT128_3500 {   
                             1456 ; 69   |    int val[6];     
                             1457 ; 70   |} UINT128_3500;
                             1458 ; 71   |
                             1459 ; 72   |#define UINT128   UINT128_3500
                             1460 ; 73   |
                             1461 ; 74   |// Little endian word packed byte strings:   
                             1462 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1463 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1464 ; 77   |// Little endian word packed byte strings:   
                             1465 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1466 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1467 ; 80   |
                             1468 ; 81   |// Declare Memory Spaces To Use When Coding
                             1469 ; 82   |// A. Sector Buffers
                             1470 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1471 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1472 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1473 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1474 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1475 ; 88   |// B. Media DDI Memory
                             1476 ; 89   |#define MEDIA_DDI_MEM _Y
                             1477 ; 90   |
                             1478 ; 91   |
                             1479 ; 92   |
                             1480 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1481 ; 94   |// Examples of circular pointers:
                             1482 ; 95   |//    INT CIRC cpiVarName
                             1483 ; 96   |//    DWORD CIRC cpdwVarName
                             1484 ; 97   |
                             1485 ; 98   |#define RETCODE INT                 // rcVarName
                             1486 ; 99   |
                             1487 ; 100  |// generic bitfield structure
                             1488 ; 101  |struct Bitfield {
                             1489 ; 102  |    unsigned int B0  :1;
                             1490 ; 103  |    unsigned int B1  :1;
                             1491 ; 104  |    unsigned int B2  :1;
                             1492 ; 105  |    unsigned int B3  :1;
                             1493 ; 106  |    unsigned int B4  :1;
                             1494 ; 107  |    unsigned int B5  :1;
                             1495 ; 108  |    unsigned int B6  :1;
                             1496 ; 109  |    unsigned int B7  :1;
                             1497 ; 110  |    unsigned int B8  :1;
                             1498 ; 111  |    unsigned int B9  :1;
                             1499 ; 112  |    unsigned int B10 :1;
                             1500 ; 113  |    unsigned int B11 :1;
                             1501 ; 114  |    unsigned int B12 :1;
                             1502 ; 115  |    unsigned int B13 :1;
                             1503 ; 116  |    unsigned int B14 :1;
                             1504 ; 117  |    unsigned int B15 :1;
                             1505 ; 118  |    unsigned int B16 :1;
                             1506 ; 119  |    unsigned int B17 :1;
                             1507 ; 120  |    unsigned int B18 :1;
                             1508 ; 121  |    unsigned int B19 :1;
                             1509 ; 122  |    unsigned int B20 :1;
                             1510 ; 123  |    unsigned int B21 :1;
                             1511 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1512 ; 125  |    unsigned int B23 :1;
                             1513 ; 126  |};
                             1514 ; 127  |
                             1515 ; 128  |union BitInt {
                             1516 ; 129  |        struct Bitfield B;
                             1517 ; 130  |        int        I;
                             1518 ; 131  |};
                             1519 ; 132  |
                             1520 ; 133  |#define MAX_MSG_LENGTH 10
                             1521 ; 134  |struct CMessage
                             1522 ; 135  |{
                             1523 ; 136  |        unsigned int m_uLength;
                             1524 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1525 ; 138  |};
                             1526 ; 139  |
                             1527 ; 140  |typedef struct {
                             1528 ; 141  |    WORD m_wLength;
                             1529 ; 142  |    WORD m_wMessage;
                             1530 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1531 ; 144  |} Message;
                             1532 ; 145  |
                             1533 ; 146  |struct MessageQueueDescriptor
                             1534 ; 147  |{
                             1535 ; 148  |        int *m_pBase;
                             1536 ; 149  |        int m_iModulo;
                             1537 ; 150  |        int m_iSize;
                             1538 ; 151  |        int *m_pHead;
                             1539 ; 152  |        int *m_pTail;
                             1540 ; 153  |};
                             1541 ; 154  |
                             1542 ; 155  |struct ModuleEntry
                             1543 ; 156  |{
                             1544 ; 157  |    int m_iSignaledEventMask;
                             1545 ; 158  |    int m_iWaitEventMask;
                             1546 ; 159  |    int m_iResourceOfCode;
                             1547 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1548 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1549 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1550 ; 163  |    int m_uTimeOutHigh;
                             1551 ; 164  |    int m_uTimeOutLow;
                             1552 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1553 ; 166  |};
                             1554 ; 167  |
                             1555 ; 168  |union WaitMask{
                             1556 ; 169  |    struct B{
                             1557 ; 170  |        unsigned int m_bNone     :1;
                             1558 ; 171  |        unsigned int m_bMessage  :1;
                             1559 ; 172  |        unsigned int m_bTimer    :1;
                             1560 ; 173  |        unsigned int m_bButton   :1;
                             1561 ; 174  |    } B;
                             1562 ; 175  |    int I;
                             1563 ; 176  |} ;
                             1564 ; 177  |
                             1565 ; 178  |
                             1566 ; 179  |struct Button {
                             1567 ; 180  |        WORD wButtonEvent;
                             1568 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1569 ; 182  |};
                             1570 ; 183  |
                             1571 ; 184  |struct Message {
                             1572 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1573 ; 186  |        WORD wMsgCommand;
                             1574 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1575 ; 188  |};
                             1576 ; 189  |
                             1577 ; 190  |union EventTypes {
                             1578 ; 191  |        struct CMessage msg;
                             1579 ; 192  |        struct Button Button ;
                             1580 ; 193  |        struct Message Message;
                             1581 ; 194  |};
                             1582 ; 195  |
                             1583 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1584 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1585 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1586 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1587 ; 200  |
                             1588 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1589 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1590 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1591 ; 204  |
                             1592 ; 205  |#if DEBUG
                             1593 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1594 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1595 ; 208  |#else 
                             1596 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1597 ; 210  |#define DebugBuildAssert(x)    
                             1598 ; 211  |#endif
                             1599 ; 212  |
                             1600 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1601 ; 214  |//  #pragma asm
                             1602 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1603 ; 216  |//  #pragma endasm
                             1604 ; 217  |
                             1605 ; 218  |
                             1606 ; 219  |#ifdef COLOR_262K
                             1607 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1608 ; 221  |#elif defined(COLOR_65K)
                             1609 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1610 ; 223  |#else
                             1611 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1612 ; 225  |#endif
                             1613 ; 226  |    
                             1614 ; 227  |#endif // #ifndef _TYPES_H
                             1615 
                             1617 
                             1618 ; 17   |#include "regsclkctrl.h"
                             1619 
                             1621 
                             1622 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             1623 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             1624 ; 3    |
                             1625 ; 4    |
                             1626 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1627 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             1628 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             1629 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             1630 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             1631 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             1632 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1633 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             1634 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             1635 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             1636 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             1637 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             1638 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             1639 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             1640 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             1641 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             1642 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             1643 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             1644 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             1645 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             1646 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             1647 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             1648 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             1649 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             1650 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                             1651 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             1652 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             1653 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             1654 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             1655 ; 34   |
                             1656 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             1657 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             1658 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             1659 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             1660 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             1661 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             1662 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             1663 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             1664 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             1665 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             1666 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             1667 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             1668 ; 47   |
                             1669 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             1670 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             1671 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             1672 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             1673 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             1674 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             1675 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             1676 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             1677 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             1678 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             1679 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             1680 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             1681 ; 60   |
                             1682 ; 61   |typedef union               
                             1683 ; 62   |{
                             1684 ; 63   |    struct
                             1685 ; 64   |    {
                             1686 ; 65   |        int CKRST       :1; // Clock Reset
                             1687 ; 66   |        int LTC         :1;
                             1688 ; 67   |        int PLLEN       :1;
                             1689 ; 68   |        int XTLEN       :1;
                             1690 ; 69   |        int FLB         :1;
                             1691 ; 70   |        unsigned ADIV   :3;
                             1692 ; 71   |        int CKSRC       :1;
                             1693 ; 72   |        unsigned DDIV   :3;
                             1694 ; 73   |        unsigned PDIV   :5;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1695 ; 74   |        int PWDN        :1;
                             1696 ; 75   |        int ACKEN       :1;
                             1697 ; 76   |        int LOCK        :1;
                             1698 ; 77   |        unsigned ADIV1  :3;
                             1699 ; 78   |        unsigned DDIV_MSB:1;
                             1700 ; 79   |    } B;
                             1701 ; 80   |
                             1702 ; 81   |    int I;
                             1703 ; 82   |    unsigned int U;
                             1704 ; 83   |
                             1705 ; 84   |} ccr_type;
                             1706 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             1707 ; 86   |
                             1708 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1709 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             1710 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             1711 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             1712 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             1713 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             1714 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             1715 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             1716 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             1717 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             1718 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             1719 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             1720 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             1721 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             1722 ; 101  |
                             1723 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             1724 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             1725 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             1726 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             1727 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             1728 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             1729 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             1730 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             1731 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             1732 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             1733 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             1734 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             1735 ; 114  |
                             1736 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             1737 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             1738 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             1739 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             1740 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             1741 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             1742 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             1743 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             1744 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             1745 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             1746 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             1747 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             1748 ; 127  |
                             1749 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             1750 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             1751 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             1752 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             1753 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             1754 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             1755 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             1756 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1757 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             1758 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             1759 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             1760 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             1761 ; 140  |
                             1762 ; 141  |typedef union               
                             1763 ; 142  |{
                             1764 ; 143  |    struct
                             1765 ; 144  |   {
                             1766 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             1767 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             1768 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             1769 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             1770 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             1771 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             1772 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             1773 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             1774 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             1775 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             1776 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             1777 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             1778 ; 157  |    } B;
                             1779 ; 158  |
                             1780 ; 159  |    int I;
                             1781 ; 160  |    unsigned int U;
                             1782 ; 161  |
                             1783 ; 162  |} rcr_type;
                             1784 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             1785 ; 164  |
                             1786 ; 165  |
                             1787 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             1788 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             1789 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             1790 ; 169  |
                             1791 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             1792 ; 171  |
                             1793 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             1794 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             1795 ; 174  |typedef union               
                             1796 ; 175  |{
                             1797 ; 176  |    struct
                             1798 ; 177  |   {
                             1799 ; 178  |        int LOW;
                             1800 ; 179  |    } B;
                             1801 ; 180  |
                             1802 ; 181  |    int I;
                             1803 ; 182  |    unsigned int U;
                             1804 ; 183  |
                             1805 ; 184  |} dclkcntl_type;
                             1806 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             1807 ; 186  |
                             1808 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1809 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             1810 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             1811 ; 190  |
                             1812 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             1813 ; 192  |
                             1814 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             1815 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             1816 ; 195  |typedef union               
                             1817 ; 196  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1818 ; 197  |    struct
                             1819 ; 198  |   {
                             1820 ; 199  |        int HIGH;
                             1821 ; 200  |    } B;
                             1822 ; 201  |
                             1823 ; 202  |    int I;
                             1824 ; 203  |    unsigned int U;
                             1825 ; 204  |
                             1826 ; 205  |} dclkcntu_type;
                             1827 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             1828 ; 207  |
                             1829 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             1830 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             1831 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             1832 ; 211  |
                             1833 ; 212  |// Clock count register (lower)
                             1834 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             1835 ; 214  |// Clock count register (upper)
                             1836 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             1837 ; 216  |// Cycle steal count register
                             1838 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             1839 ; 218  |
                             1840 ; 219  |#endif
                             1841 ; 220  |
                             1842 ; 221  |
                             1843 
                             1845 
                             1846 ; 18   |#include "regscore.h"
                             1847 
                             1849 
                             1850 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             1851 ; 2    |#define __REGS_STATUS_INC 1
                             1852 ; 3    |
                             1853 ; 4    |
                             1854 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1855 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             1856 ; 7    |#define HW_OMR_MA_BITPOS 0
                             1857 ; 8    |#define HW_OMR_MB_BITPOS 1
                             1858 ; 9    |#define HW_OMR_DE_BITPOS 2
                             1859 ; 10   |#define HW_OMR_YE_BITPOS 3
                             1860 ; 11   |#define HW_OMR_MC_BITPOS 4
                             1861 ; 12   |#define HW_OMR_SD_BITPOS 6
                             1862 ; 13   |
                             1863 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             1864 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             1865 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             1866 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             1867 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             1868 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             1869 ; 20   |
                             1870 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             1871 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             1872 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             1873 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             1874 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             1875 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             1876 ; 27   |
                             1877 ; 28   |
                             1878 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             1879 ; 30   |//  Status Register (HW_SR) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1880 ; 31   |#define HW_SR_C_BITPOS 0
                             1881 ; 32   |#define HW_SR_O_BITPOS 1
                             1882 ; 33   |#define HW_SR_Z_BITPOS 2
                             1883 ; 34   |#define HW_SR_N_BITPOS 3
                             1884 ; 35   |#define HW_SR_U_BITPOS 4
                             1885 ; 36   |#define HW_SR_E_BITPOS 5
                             1886 ; 37   |#define HW_SR_L_BITPOS 6
                             1887 ; 38   |#define HW_SR_IM_BITPOS 8
                             1888 ; 39   |#define HW_SR_IM0_BITPOS 8
                             1889 ; 40   |#define HW_SR_IM1_BITPOS 9
                             1890 ; 41   |#define HW_SR_SM_BITPOS 10
                             1891 ; 42   |#define HW_SR_SM0_BITPOS 10
                             1892 ; 43   |#define HW_SR_SM1_BITPOS 11
                             1893 ; 44   |#define HW_SR_TM_BITPOS 13
                             1894 ; 45   |#define HW_SR_DP_BITPOS 14
                             1895 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             1896 ; 47   |
                             1897 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             1898 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             1899 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             1900 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             1901 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             1902 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             1903 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             1904 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             1905 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             1906 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             1907 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             1908 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             1909 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             1910 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             1911 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             1912 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             1913 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             1914 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             1915 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             1916 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             1917 ; 68   |
                             1918 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             1919 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             1920 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             1921 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             1922 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             1923 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             1924 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             1925 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             1926 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             1927 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             1928 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             1929 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             1930 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             1931 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             1932 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             1933 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             1934 ; 85   |
                             1935 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             1936 ; 87   |//  RAM/ROM Config Register Bit Positions
                             1937 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             1938 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             1939 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             1940 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             1941 ; 92   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1942 ; 93   |
                             1943 ; 94   |
                             1944 
                             1946 
                             1947 ; 19   |#include "regscodec.h"
                             1948 
                             1950 
                             1951 ; 1    |#if !(defined(regscodecinc))
                             1952 ; 2    |#define regscodecinc 1
                             1953 ; 3    |
                             1954 ; 4    |
                             1955 ; 5    |
                             1956 ; 6    |#include "types.h"
                             1957 
                             1959 
                             1960 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1961 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1962 ; 3    |//
                             1963 ; 4    |// Filename: types.h
                             1964 ; 5    |// Description: Standard data types
                             1965 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1966 ; 7    |
                             1967 ; 8    |#ifndef _TYPES_H
                             1968 ; 9    |#define _TYPES_H
                             1969 ; 10   |
                             1970 ; 11   |// TODO:  move this outta here!
                             1971 ; 12   |#if !defined(NOERROR)
                             1972 ; 13   |#define NOERROR 0
                             1973 ; 14   |#define SUCCESS 0
                             1974 ; 15   |#endif 
                             1975 ; 16   |#if !defined(SUCCESS)
                             1976 ; 17   |#define SUCCESS  0
                             1977 ; 18   |#endif
                             1978 ; 19   |#if !defined(ERROR)
                             1979 ; 20   |#define ERROR   -1
                             1980 ; 21   |#endif
                             1981 ; 22   |#if !defined(FALSE)
                             1982 ; 23   |#define FALSE 0
                             1983 ; 24   |#endif
                             1984 ; 25   |#if !defined(TRUE)
                             1985 ; 26   |#define TRUE  1
                             1986 ; 27   |#endif
                             1987 ; 28   |
                             1988 ; 29   |#if !defined(NULL)
                             1989 ; 30   |#define NULL 0
                             1990 ; 31   |#endif
                             1991 ; 32   |
                             1992 ; 33   |#define MAX_INT     0x7FFFFF
                             1993 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1994 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1995 ; 36   |#define MAX_ULONG   (-1) 
                             1996 ; 37   |
                             1997 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1998 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1999 ; 40   |
                             2000 ; 41   |
                             2001 ; 42   |#define BYTE    unsigned char       // btVarName
                             2002 ; 43   |#define CHAR    signed char         // cVarName
                             2003 ; 44   |#define USHORT  unsigned short      // usVarName
                             2004 ; 45   |#define SHORT   unsigned short      // sVarName
                             2005 ; 46   |#define WORD    unsigned int        // wVarName
                             2006 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2007 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2008 ; 49   |#define LONG    signed long         // lVarName
                             2009 ; 50   |#define BOOL    unsigned int        // bVarName
                             2010 ; 51   |#define FRACT   _fract              // frVarName
                             2011 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2012 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2013 ; 54   |#define FLOAT   float               // fVarName
                             2014 ; 55   |#define DBL     double              // dVarName
                             2015 ; 56   |#define ENUM    enum                // eVarName
                             2016 ; 57   |#define CMX     _complex            // cmxVarName
                             2017 ; 58   |typedef WORD UCS3;                   // 
                             2018 ; 59   |
                             2019 ; 60   |#define UINT16  unsigned short
                             2020 ; 61   |#define UINT8   unsigned char   
                             2021 ; 62   |#define UINT32  unsigned long
                             2022 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2023 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2024 ; 65   |#define WCHAR   UINT16
                             2025 ; 66   |
                             2026 ; 67   |//UINT128 is 16 bytes or 6 words
                             2027 ; 68   |typedef struct UINT128_3500 {   
                             2028 ; 69   |    int val[6];     
                             2029 ; 70   |} UINT128_3500;
                             2030 ; 71   |
                             2031 ; 72   |#define UINT128   UINT128_3500
                             2032 ; 73   |
                             2033 ; 74   |// Little endian word packed byte strings:   
                             2034 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2035 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2036 ; 77   |// Little endian word packed byte strings:   
                             2037 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2038 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2039 ; 80   |
                             2040 ; 81   |// Declare Memory Spaces To Use When Coding
                             2041 ; 82   |// A. Sector Buffers
                             2042 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2043 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2044 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2045 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2046 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2047 ; 88   |// B. Media DDI Memory
                             2048 ; 89   |#define MEDIA_DDI_MEM _Y
                             2049 ; 90   |
                             2050 ; 91   |
                             2051 ; 92   |
                             2052 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2053 ; 94   |// Examples of circular pointers:
                             2054 ; 95   |//    INT CIRC cpiVarName
                             2055 ; 96   |//    DWORD CIRC cpdwVarName
                             2056 ; 97   |
                             2057 ; 98   |#define RETCODE INT                 // rcVarName
                             2058 ; 99   |
                             2059 ; 100  |// generic bitfield structure
                             2060 ; 101  |struct Bitfield {
                             2061 ; 102  |    unsigned int B0  :1;
                             2062 ; 103  |    unsigned int B1  :1;
                             2063 ; 104  |    unsigned int B2  :1;
                             2064 ; 105  |    unsigned int B3  :1;
                             2065 ; 106  |    unsigned int B4  :1;
                             2066 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2067 ; 108  |    unsigned int B6  :1;
                             2068 ; 109  |    unsigned int B7  :1;
                             2069 ; 110  |    unsigned int B8  :1;
                             2070 ; 111  |    unsigned int B9  :1;
                             2071 ; 112  |    unsigned int B10 :1;
                             2072 ; 113  |    unsigned int B11 :1;
                             2073 ; 114  |    unsigned int B12 :1;
                             2074 ; 115  |    unsigned int B13 :1;
                             2075 ; 116  |    unsigned int B14 :1;
                             2076 ; 117  |    unsigned int B15 :1;
                             2077 ; 118  |    unsigned int B16 :1;
                             2078 ; 119  |    unsigned int B17 :1;
                             2079 ; 120  |    unsigned int B18 :1;
                             2080 ; 121  |    unsigned int B19 :1;
                             2081 ; 122  |    unsigned int B20 :1;
                             2082 ; 123  |    unsigned int B21 :1;
                             2083 ; 124  |    unsigned int B22 :1;
                             2084 ; 125  |    unsigned int B23 :1;
                             2085 ; 126  |};
                             2086 ; 127  |
                             2087 ; 128  |union BitInt {
                             2088 ; 129  |        struct Bitfield B;
                             2089 ; 130  |        int        I;
                             2090 ; 131  |};
                             2091 ; 132  |
                             2092 ; 133  |#define MAX_MSG_LENGTH 10
                             2093 ; 134  |struct CMessage
                             2094 ; 135  |{
                             2095 ; 136  |        unsigned int m_uLength;
                             2096 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2097 ; 138  |};
                             2098 ; 139  |
                             2099 ; 140  |typedef struct {
                             2100 ; 141  |    WORD m_wLength;
                             2101 ; 142  |    WORD m_wMessage;
                             2102 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2103 ; 144  |} Message;
                             2104 ; 145  |
                             2105 ; 146  |struct MessageQueueDescriptor
                             2106 ; 147  |{
                             2107 ; 148  |        int *m_pBase;
                             2108 ; 149  |        int m_iModulo;
                             2109 ; 150  |        int m_iSize;
                             2110 ; 151  |        int *m_pHead;
                             2111 ; 152  |        int *m_pTail;
                             2112 ; 153  |};
                             2113 ; 154  |
                             2114 ; 155  |struct ModuleEntry
                             2115 ; 156  |{
                             2116 ; 157  |    int m_iSignaledEventMask;
                             2117 ; 158  |    int m_iWaitEventMask;
                             2118 ; 159  |    int m_iResourceOfCode;
                             2119 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2120 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2121 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2122 ; 163  |    int m_uTimeOutHigh;
                             2123 ; 164  |    int m_uTimeOutLow;
                             2124 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2125 ; 166  |};
                             2126 ; 167  |
                             2127 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2128 ; 169  |    struct B{
                             2129 ; 170  |        unsigned int m_bNone     :1;
                             2130 ; 171  |        unsigned int m_bMessage  :1;
                             2131 ; 172  |        unsigned int m_bTimer    :1;
                             2132 ; 173  |        unsigned int m_bButton   :1;
                             2133 ; 174  |    } B;
                             2134 ; 175  |    int I;
                             2135 ; 176  |} ;
                             2136 ; 177  |
                             2137 ; 178  |
                             2138 ; 179  |struct Button {
                             2139 ; 180  |        WORD wButtonEvent;
                             2140 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2141 ; 182  |};
                             2142 ; 183  |
                             2143 ; 184  |struct Message {
                             2144 ; 185  |        WORD wMsgLength;
                             2145 ; 186  |        WORD wMsgCommand;
                             2146 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2147 ; 188  |};
                             2148 ; 189  |
                             2149 ; 190  |union EventTypes {
                             2150 ; 191  |        struct CMessage msg;
                             2151 ; 192  |        struct Button Button ;
                             2152 ; 193  |        struct Message Message;
                             2153 ; 194  |};
                             2154 ; 195  |
                             2155 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2156 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2157 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2158 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2159 ; 200  |
                             2160 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2161 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2162 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2163 ; 204  |
                             2164 ; 205  |#if DEBUG
                             2165 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2166 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2167 ; 208  |#else 
                             2168 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2169 ; 210  |#define DebugBuildAssert(x)    
                             2170 ; 211  |#endif
                             2171 ; 212  |
                             2172 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2173 ; 214  |//  #pragma asm
                             2174 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2175 ; 216  |//  #pragma endasm
                             2176 ; 217  |
                             2177 ; 218  |
                             2178 ; 219  |#ifdef COLOR_262K
                             2179 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2180 ; 221  |#elif defined(COLOR_65K)
                             2181 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2182 ; 223  |#else
                             2183 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2184 ; 225  |#endif
                             2185 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2186 ; 227  |#endif // #ifndef _TYPES_H
                             2187 
                             2189 
                             2190 ; 7    |
                             2191 ; 8    |
                             2192 ; 9    |
                             2193 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2194 ; 11   |
                             2195 ; 12   |//   SYSTEM STMP Registers 
                             2196 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             2197 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2198 ; 15   |
                             2199 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             2200 ; 17   |
                             2201 ; 18   |
                             2202 ; 19   |
                             2203 ; 20   |
                             2204 ; 21   |
                             2205 ; 22   |
                             2206 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             2207 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             2208 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             2209 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             2210 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             2211 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             2212 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             2213 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             2214 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             2215 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             2216 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             2217 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             2218 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             2219 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             2220 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             2221 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             2222 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             2223 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             2224 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             2225 ; 42   |
                             2226 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             2227 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             2228 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             2229 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             2230 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             2231 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             2232 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             2233 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             2234 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             2235 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             2236 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             2237 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             2238 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             2239 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             2240 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             2241 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             2242 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             2243 ; 60   |
                             2244 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             2245 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             2246 ; 63   |
                             2247 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2248 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2249 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2250 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2251 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2252 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2253 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2254 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2255 ; 72   |
                             2256 ; 73   |#if defined(CAPLESS_HP)
                             2257 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             2258 ; 75   |#else 
                             2259 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             2260 ; 77   |#endif
                             2261 ; 78   |
                             2262 ; 79   |// Headphone control register
                             2263 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             2264 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             2265 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             2266 ; 83   |typedef union               
                             2267 ; 84   |{
                             2268 ; 85   |    struct {
                             2269 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             2270 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             2271 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             2272 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             2273 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             2274 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             2275 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             2276 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             2277 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             2278 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             2279 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             2280 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             2281 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             2282 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             2283 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             2284 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             2285 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             2286 ; 103  |    } B;
                             2287 ; 104  |    int I;
                             2288 ; 105  |    unsigned int U;
                             2289 ; 106  |} hpctrl_type;
                             2290 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             2291 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             2292 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             2293 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             2294 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             2295 ; 112  |
                             2296 ; 113  |
                             2297 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             2298 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             2299 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             2300 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             2301 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             2302 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2303 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             2304 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             2305 ; 122  |
                             2306 ; 123  |
                             2307 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             2308 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             2309 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             2310 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2311 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             2312 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             2313 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             2314 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             2315 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             2316 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             2317 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             2318 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             2319 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             2320 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             2321 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             2322 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             2323 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             2324 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             2325 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             2326 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             2327 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             2328 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             2329 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             2330 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             2331 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             2332 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             2333 ; 150  |
                             2334 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             2335 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             2336 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             2337 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             2338 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             2339 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             2340 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             2341 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             2342 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             2343 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             2344 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             2345 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             2346 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             2347 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             2348 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             2349 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             2350 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             2351 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             2352 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             2353 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             2354 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             2355 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             2356 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             2357 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             2358 ; 175  |
                             2359 ; 176  |
                             2360 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             2361 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             2362 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             2363 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             2364 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             2365 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             2366 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             2367 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             2368 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             2369 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             2370 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             2371 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             2372 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2373 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             2374 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             2375 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             2376 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             2377 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             2378 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             2379 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             2380 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             2381 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             2382 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             2383 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             2384 ; 201  |
                             2385 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             2386 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             2387 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             2388 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             2389 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             2390 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             2391 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             2392 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             2393 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             2394 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             2395 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             2396 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             2397 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             2398 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             2399 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             2400 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             2401 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             2402 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             2403 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             2404 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             2405 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             2406 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             2407 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             2408 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             2409 ; 226  |
                             2410 ; 227  |typedef union               
                             2411 ; 228  |{
                             2412 ; 229  |    struct {
                             2413 ; 230  |        int INV_USB_CLK            : 1;
                             2414 ; 231  |        int USB_DFF_BYPASS         : 1;
                             2415 ; 232  |        int HOLD_GND               : 1;
                             2416 ; 233  |        int ACKI                   : 1;
                             2417 ; 234  |        int ASD2X                  : 1;
                             2418 ; 235  |        int PCPCU                  : 1;
                             2419 ; 236  |        int PCPCD                  : 1;
                             2420 ; 237  |        int DCKI                   : 1;
                             2421 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             2422 ; 239  |        int PSRN                   : 1;
                             2423 ; 240  |        int FX2                    : 1;
                             2424 ; 241  |        int VCOS                   : 1;
                             2425 ; 242  |        int XBCO                   : 1;
                             2426 ; 243  |        int XBGC                   : 1;
                             2427 ; 244  |        int ADTHD                  : 1;
                             2428 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             2429 ; 246  |        int PWDADC                 : 1;
                             2430 ; 247  |        int MICBIAS1               : 1;
                             2431 ; 248  |        int EZD                    : 1;
                             2432 ; 249  |        int DZCDA                  : 1;
                             2433 ; 250  |        int DZCFM                  : 1;
                             2434 ; 251  |        int DZCLI                  : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2435 ; 252  |        int DZCMI                  : 1;
                             2436 ; 253  |        int DZCMA                  : 1;
                             2437 ; 254  |    } B;
                             2438 ; 255  |    int I;
                             2439 ; 256  |    unsigned int U;
                             2440 ; 257  |} mix_tbr_type;
                             2441 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             2442 ; 259  |
                             2443 ; 260  |
                             2444 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             2445 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             2446 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             2447 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             2448 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             2449 ; 266  |
                             2450 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             2451 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             2452 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             2453 ; 270  |
                             2454 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             2455 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             2456 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             2457 ; 274  |
                             2458 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             2459 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             2460 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             2461 ; 278  |
                             2462 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             2463 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             2464 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             2465 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             2466 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             2467 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             2468 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             2469 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             2470 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             2471 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             2472 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             2473 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             2474 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             2475 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             2476 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             2477 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             2478 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             2479 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             2480 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             2481 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             2482 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             2483 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             2484 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             2485 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             2486 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             2487 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             2488 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             2489 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             2490 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             2491 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             2492 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             2493 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             2494 ; 311  |
                             2495 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             2496 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2497 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             2498 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             2499 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             2500 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             2501 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             2502 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             2503 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             2504 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             2505 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             2506 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             2507 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             2508 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             2509 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             2510 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             2511 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             2512 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             2513 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             2514 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             2515 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             2516 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             2517 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             2518 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             2519 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             2520 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             2521 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             2522 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             2523 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             2524 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             2525 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             2526 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             2527 ; 344  |
                             2528 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             2529 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             2530 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             2531 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             2532 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             2533 ; 350  |
                             2534 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             2535 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             2536 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             2537 ; 354  |
                             2538 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             2539 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             2540 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             2541 ; 358  |
                             2542 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             2543 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             2544 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             2545 ; 362  |
                             2546 ; 363  |
                             2547 ; 364  |typedef union               
                             2548 ; 365  |{
                             2549 ; 366  |    struct
                             2550 ; 367  |    {
                             2551 ; 368  |        unsigned MR :5;
                             2552 ; 369  |        int         :3;
                             2553 ; 370  |        unsigned ML :5;
                             2554 ; 371  |        int         :2;
                             2555 ; 372  |        int MUTE    :1;
                             2556 ; 373  |    } B;
                             2557 ; 374  |    int I;
                             2558 ; 375  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2559 ; 376  |} mix_mastervr_type;
                             2560 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             2561 ; 378  |
                             2562 ; 379  |
                             2563 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             2564 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             2565 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             2566 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             2567 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             2568 ; 385  |
                             2569 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             2570 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             2571 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             2572 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             2573 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             2574 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             2575 ; 392  |
                             2576 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             2577 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             2578 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             2579 ; 396  |
                             2580 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             2581 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             2582 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             2583 ; 400  |
                             2584 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             2585 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             2586 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             2587 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             2588 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             2589 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             2590 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             2591 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             2592 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             2593 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             2594 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             2595 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             2596 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             2597 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             2598 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             2599 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             2600 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             2601 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             2602 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             2603 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             2604 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             2605 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             2606 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             2607 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             2608 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             2609 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             2610 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             2611 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             2612 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             2613 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             2614 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             2615 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             2616 ; 433  |
                             2617 ; 434  |typedef union               
                             2618 ; 435  |{
                             2619 ; 436  |    struct {
                             2620 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2621 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             2622 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             2623 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             2624 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             2625 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             2626 ; 443  |    } B;
                             2627 ; 444  |    int I;
                             2628 ; 445  |    unsigned int U;
                             2629 ; 446  |} mix_micinvr_type;
                             2630 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             2631 ; 448  |
                             2632 ; 449  |
                             2633 ; 450  |
                             2634 ; 451  |
                             2635 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             2636 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             2637 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             2638 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             2639 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             2640 ; 457  |
                             2641 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             2642 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             2643 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             2644 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             2645 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             2646 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             2647 ; 464  |
                             2648 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             2649 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             2650 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             2651 ; 468  |
                             2652 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             2653 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             2654 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             2655 ; 472  |
                             2656 ; 473  |typedef union               
                             2657 ; 474  |{
                             2658 ; 475  |    struct {
                             2659 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             2660 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             2661 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             2662 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             2663 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             2664 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             2665 ; 482  |    } B;
                             2666 ; 483  |    int I;
                             2667 ; 484  |    unsigned int U;
                             2668 ; 485  |} mix_line1invr_type;
                             2669 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             2670 ; 487  |
                             2671 ; 488  |
                             2672 ; 489  |
                             2673 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             2674 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             2675 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             2676 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             2677 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             2678 ; 495  |
                             2679 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             2680 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             2681 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             2682 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2683 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             2684 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             2685 ; 502  |
                             2686 ; 503  |
                             2687 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             2688 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             2689 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             2690 ; 507  |
                             2691 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             2692 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             2693 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             2694 ; 511  |
                             2695 ; 512  |typedef union               
                             2696 ; 513  |{
                             2697 ; 514  |    struct {
                             2698 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             2699 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             2700 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             2701 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             2702 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             2703 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             2704 ; 521  |    } B;
                             2705 ; 522  |    int I;
                             2706 ; 523  |    unsigned int U;
                             2707 ; 524  |} mix_line2invr_type;
                             2708 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             2709 ; 526  |
                             2710 ; 527  |
                             2711 ; 528  |
                             2712 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             2713 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             2714 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             2715 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             2716 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             2717 ; 534  |
                             2718 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             2719 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             2720 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             2721 ; 538  |
                             2722 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             2723 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             2724 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             2725 ; 542  |
                             2726 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             2727 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             2728 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             2729 ; 546  |
                             2730 ; 547  |typedef union               
                             2731 ; 548  |{
                             2732 ; 549  |    struct {
                             2733 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             2734 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             2735 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             2736 ; 553  |    } B;
                             2737 ; 554  |    int I;
                             2738 ; 555  |    unsigned int U;
                             2739 ; 556  |} mix_dacinvr_type;
                             2740 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             2741 ; 558  |
                             2742 ; 559  |
                             2743 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             2744 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2745 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             2746 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             2747 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             2748 ; 565  |
                             2749 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             2750 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             2751 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             2752 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             2753 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             2754 ; 571  |
                             2755 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             2756 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             2757 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             2758 ; 575  |
                             2759 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             2760 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             2761 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             2762 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             2763 ; 580  |
                             2764 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             2765 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             2766 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             2767 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             2768 ; 585  |
                             2769 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             2770 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             2771 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             2772 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             2773 ; 590  |
                             2774 ; 591  |typedef union               
                             2775 ; 592  |{
                             2776 ; 593  |    struct {
                             2777 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             2778 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             2779 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             2780 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             2781 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             2782 ; 599  |    } B;
                             2783 ; 600  |    int I;
                             2784 ; 601  |    unsigned int U;
                             2785 ; 602  |} mix_recselr_type;
                             2786 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             2787 ; 604  |
                             2788 ; 605  |
                             2789 ; 606  |
                             2790 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             2791 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             2792 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             2793 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             2794 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             2795 ; 612  |
                             2796 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             2797 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             2798 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             2799 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             2800 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             2801 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             2802 ; 619  |
                             2803 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             2804 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             2805 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2806 ; 623  |
                             2807 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             2808 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             2809 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             2810 ; 627  |
                             2811 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             2812 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             2813 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             2814 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             2815 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             2816 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             2817 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             2818 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             2819 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             2820 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             2821 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             2822 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             2823 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             2824 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             2825 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             2826 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             2827 ; 644  |
                             2828 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             2829 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             2830 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             2831 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             2832 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             2833 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             2834 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             2835 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             2836 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             2837 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             2838 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             2839 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             2840 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             2841 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             2842 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             2843 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             2844 ; 661  |
                             2845 ; 662  |typedef union               
                             2846 ; 663  |{
                             2847 ; 664  |    struct {
                             2848 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             2849 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             2850 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             2851 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             2852 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             2853 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             2854 ; 671  |    } B;
                             2855 ; 672  |    int I;
                             2856 ; 673  |    unsigned int U;
                             2857 ; 674  |} mix_adcgainr_type;
                             2858 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             2859 ; 676  |
                             2860 ; 677  |
                             2861 ; 678  |
                             2862 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             2863 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             2864 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             2865 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             2866 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             2867 ; 684  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2868 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             2869 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             2870 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             2871 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             2872 ; 689  |
                             2873 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             2874 ; 691  |
                             2875 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             2876 ; 693  |
                             2877 ; 694  |typedef union               
                             2878 ; 695  |{
                             2879 ; 696  |    struct {
                             2880 ; 697  |                int                     : 9;
                             2881 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             2882 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             2883 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             2884 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             2885 ; 702  |    } B;
                             2886 ; 703  |    int I;
                             2887 ; 704  |    unsigned int U;
                             2888 ; 705  |} mix_pwrdnr_type;
                             2889 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             2890 ; 707  |
                             2891 ; 708  |
                             2892 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             2893 ; 710  |
                             2894 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             2895 ; 712  |
                             2896 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             2897 ; 714  |
                             2898 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             2899 ; 716  |
                             2900 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             2901 ; 718  |
                             2902 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             2903 ; 720  |
                             2904 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             2905 ; 722  |
                             2906 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             2907 ; 724  |
                             2908 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             2909 ; 726  |
                             2910 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             2911 ; 728  |
                             2912 ; 729  |
                             2913 ; 730  |
                             2914 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             2915 ; 732  |
                             2916 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             2917 ; 734  |
                             2918 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             2919 ; 736  |
                             2920 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             2921 ; 738  |
                             2922 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             2923 ; 740  |
                             2924 ; 741  |
                             2925 ; 742  |
                             2926 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             2927 ; 744  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2928 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             2929 ; 746  |
                             2930 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             2931 ; 748  |
                             2932 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             2933 ; 750  |
                             2934 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             2935 ; 752  |
                             2936 ; 753  |
                             2937 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             2938 ; 755  |
                             2939 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             2940 ; 757  |
                             2941 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             2942 ; 759  |
                             2943 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             2944 ; 761  |
                             2945 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             2946 ; 763  |
                             2947 ; 764  |
                             2948 ; 765  |typedef union               
                             2949 ; 766  |{
                             2950 ; 767  |    struct {
                             2951 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             2952 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             2953 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             2954 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             2955 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             2956 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             2957 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             2958 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             2959 ; 776  |    } B;
                             2960 ; 777  |    int I;
                             2961 ; 778  |    unsigned int U;
                             2962 ; 779  |} mix_test_type;
                             2963 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             2964 ; 781  |
                             2965 ; 782  |
                             2966 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             2967 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             2968 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             2969 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             2970 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             2971 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             2972 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             2973 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             2974 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             2975 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             2976 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             2977 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             2978 ; 795  |
                             2979 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             2980 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             2981 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             2982 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             2983 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2984 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             2985 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             2986 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             2987 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             2988 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             2989 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             2990 ; 807  |
                             2991 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             2992 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             2993 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             2994 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             2995 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             2996 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             2997 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             2998 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             2999 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             3000 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             3001 ; 818  |
                             3002 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             3003 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             3004 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             3005 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             3006 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             3007 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             3008 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             3009 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             3010 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             3011 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             3012 ; 829  |
                             3013 ; 830  |typedef union               
                             3014 ; 831  |{
                             3015 ; 832  |    struct {
                             3016 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             3017 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             3018 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             3019 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             3020 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             3021 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             3022 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             3023 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             3024 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             3025 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             3026 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             3027 ; 844  |    } B;
                             3028 ; 845  |    int I;
                             3029 ; 846  |    unsigned int U;
                             3030 ; 847  |} ref_ctrl_type;
                             3031 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             3032 ; 849  |
                             3033 ; 850  |
                             3034 ; 851  |
                             3035 ; 852  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3036 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             3037 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             3038 ; 855  |//////  DAC Registers
                             3039 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             3040 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             3041 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             3042 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             3043 ; 860  |
                             3044 ; 861  |
                             3045 ; 862  |
                             3046 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             3047 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             3048 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             3049 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             3050 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             3051 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             3052 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             3053 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             3054 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             3055 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             3056 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             3057 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             3058 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             3059 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             3060 ; 877  |
                             3061 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             3062 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             3063 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             3064 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             3065 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             3066 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             3067 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             3068 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             3069 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             3070 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             3071 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             3072 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             3073 ; 890  |
                             3074 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             3075 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             3076 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             3077 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             3078 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             3079 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             3080 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             3081 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             3082 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             3083 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             3084 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             3085 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             3086 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             3087 ; 904  |
                             3088 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             3089 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             3090 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             3091 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             3092 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             3093 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             3094 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             3095 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             3096 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             3097 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3098 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             3099 ; 916  |
                             3100 ; 917  |
                             3101 ; 918  |typedef union               
                             3102 ; 919  |{
                             3103 ; 920  |    struct {
                             3104 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             3105 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             3106 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             3107 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             3108 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             3109 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             3110 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             3111 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             3112 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             3113 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             3114 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             3115 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             3116 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             3117 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             3118 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             3119 ; 936  |    } B;
                             3120 ; 937  |    int I;
                             3121 ; 938  |    unsigned int U;
                             3122 ; 939  |} dac_csr_type;
                             3123 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             3124 ; 941  |
                             3125 ; 942  |
                             3126 ; 943  |
                             3127 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             3128 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             3129 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             3130 ; 947  |
                             3131 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             3132 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             3133 ; 950  |
                             3134 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             3135 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             3136 ; 953  |
                             3137 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             3138 ; 955  |
                             3139 ; 956  |typedef union               
                             3140 ; 957  |{
                             3141 ; 958  |    struct {
                             3142 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             3143 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             3144 ; 961  |    } B;
                             3145 ; 962  |    int I;
                             3146 ; 963  |    unsigned int U;
                             3147 ; 964  |} dac_srr_type;
                             3148 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             3149 ; 966  |
                             3150 ; 967  |
                             3151 ; 968  |
                             3152 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             3153 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             3154 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             3155 ; 972  |
                             3156 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             3157 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             3158 ; 975  |
                             3159 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3160 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             3161 ; 978  |
                             3162 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             3163 ; 980  |
                             3164 ; 981  |typedef union               
                             3165 ; 982  |{
                             3166 ; 983  |    struct {
                             3167 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             3168 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             3169 ; 986  |    } B;
                             3170 ; 987  |    int I;
                             3171 ; 988  |    unsigned int U;
                             3172 ; 989  |} dac_wcr_type;
                             3173 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             3174 ; 991  |
                             3175 ; 992  |
                             3176 ; 993  |
                             3177 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             3178 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             3179 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             3180 ; 997  |
                             3181 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             3182 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             3183 ; 1000 |
                             3184 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             3185 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             3186 ; 1003 |
                             3187 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             3188 ; 1005 |
                             3189 ; 1006 |typedef union               
                             3190 ; 1007 |{
                             3191 ; 1008 |    struct {
                             3192 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             3193 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             3194 ; 1011 |    } B;
                             3195 ; 1012 |    int I;
                             3196 ; 1013 |    unsigned int U;
                             3197 ; 1014 |} dac_cpr_type;
                             3198 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             3199 ; 1016 |
                             3200 ; 1017 |
                             3201 ; 1018 |
                             3202 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             3203 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             3204 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             3205 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             3206 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             3207 ; 1024 |
                             3208 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             3209 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             3210 ; 1027 |
                             3211 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             3212 ; 1029 |
                             3213 ; 1030 |typedef union               
                             3214 ; 1031 |{
                             3215 ; 1032 |    struct {
                             3216 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             3217 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             3218 ; 1035 |    } B;
                             3219 ; 1036 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3220 ; 1037 |    unsigned int U;
                             3221 ; 1038 |} dac_mr_type;
                             3222 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             3223 ; 1040 |
                             3224 ; 1041 |
                             3225 ; 1042 |
                             3226 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             3227 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             3228 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             3229 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             3230 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             3231 ; 1048 |
                             3232 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             3233 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             3234 ; 1051 |
                             3235 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             3236 ; 1053 |
                             3237 ; 1054 |typedef union               
                             3238 ; 1055 |{
                             3239 ; 1056 |    struct {
                             3240 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             3241 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             3242 ; 1059 |    } B;
                             3243 ; 1060 |    int I;
                             3244 ; 1061 |    unsigned int U;
                             3245 ; 1062 |} dac_bar_type;
                             3246 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             3247 ; 1064 |
                             3248 ; 1065 |
                             3249 ; 1066 |
                             3250 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             3251 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             3252 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             3253 ; 1070 |
                             3254 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             3255 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             3256 ; 1073 |
                             3257 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             3258 ; 1075 |
                             3259 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             3260 ; 1077 |
                             3261 ; 1078 |typedef union               
                             3262 ; 1079 |{
                             3263 ; 1080 |    struct {
                             3264 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             3265 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             3266 ; 1083 |    } B;
                             3267 ; 1084 |    int I;
                             3268 ; 1085 |    unsigned int U;
                             3269 ; 1086 |} dac_icr_type;
                             3270 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             3271 ; 1088 |
                             3272 ; 1089 |
                             3273 ; 1090 |
                             3274 ; 1091 |
                             3275 ; 1092 |
                             3276 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             3277 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             3278 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             3279 ; 1096 |//////  ADC Registers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3280 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             3281 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             3282 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             3283 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             3284 ; 1101 |
                             3285 ; 1102 |
                             3286 ; 1103 |
                             3287 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             3288 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             3289 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             3290 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             3291 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             3292 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             3293 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             3294 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             3295 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             3296 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             3297 ; 1114 |
                             3298 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             3299 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             3300 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             3301 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             3302 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             3303 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             3304 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             3305 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             3306 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             3307 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             3308 ; 1125 |
                             3309 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             3310 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             3311 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             3312 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             3313 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             3314 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             3315 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             3316 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             3317 ; 1134 |
                             3318 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             3319 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             3320 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             3321 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             3322 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             3323 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             3324 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             3325 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             3326 ; 1143 |
                             3327 ; 1144 |typedef union               
                             3328 ; 1145 |{
                             3329 ; 1146 |    struct {
                             3330 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             3331 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             3332 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             3333 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             3334 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             3335 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             3336 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             3337 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             3338 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             3339 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3340 ; 1157 |    } B;
                             3341 ; 1158 |    int I;
                             3342 ; 1159 |    unsigned int U;
                             3343 ; 1160 |} adc_csr_type;
                             3344 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             3345 ; 1162 |
                             3346 ; 1163 |
                             3347 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             3348 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             3349 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             3350 ; 1167 |
                             3351 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             3352 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             3353 ; 1170 |
                             3354 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             3355 ; 1172 |
                             3356 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             3357 ; 1174 |
                             3358 ; 1175 |typedef union               
                             3359 ; 1176 |{
                             3360 ; 1177 |    struct {
                             3361 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             3362 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             3363 ; 1180 |    } B;
                             3364 ; 1181 |    int I;
                             3365 ; 1182 |    unsigned int U;
                             3366 ; 1183 |} adc_wcr_type;
                             3367 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             3368 ; 1185 |
                             3369 ; 1186 |
                             3370 ; 1187 |
                             3371 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             3372 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             3373 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             3374 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             3375 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             3376 ; 1193 |
                             3377 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             3378 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             3379 ; 1196 |
                             3380 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             3381 ; 1198 |
                             3382 ; 1199 |typedef union               
                             3383 ; 1200 |{
                             3384 ; 1201 |    struct {
                             3385 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             3386 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             3387 ; 1204 |    } B;
                             3388 ; 1205 |    int I;
                             3389 ; 1206 |    unsigned int U;
                             3390 ; 1207 |} adc_bar_type;
                             3391 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             3392 ; 1209 |
                             3393 ; 1210 |
                             3394 ; 1211 |
                             3395 ; 1212 |
                             3396 ; 1213 |
                             3397 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             3398 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             3399 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3400 ; 1217 |
                             3401 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             3402 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             3403 ; 1220 |
                             3404 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             3405 ; 1222 |
                             3406 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             3407 ; 1224 |
                             3408 ; 1225 |typedef union               
                             3409 ; 1226 |{
                             3410 ; 1227 |    struct {
                             3411 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             3412 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             3413 ; 1230 |    } B;
                             3414 ; 1231 |    int I;
                             3415 ; 1232 |    unsigned int U;
                             3416 ; 1233 |} adc_cpr_type;
                             3417 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             3418 ; 1235 |
                             3419 ; 1236 |
                             3420 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             3421 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             3422 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             3423 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             3424 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             3425 ; 1242 |
                             3426 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             3427 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             3428 ; 1245 |
                             3429 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             3430 ; 1247 |
                             3431 ; 1248 |typedef union               
                             3432 ; 1249 |{
                             3433 ; 1250 |    struct {
                             3434 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             3435 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             3436 ; 1253 |    } B;
                             3437 ; 1254 |    int I;
                             3438 ; 1255 |    unsigned int U;
                             3439 ; 1256 |} adc_mr_type;
                             3440 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             3441 ; 1258 |
                             3442 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             3443 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             3444 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             3445 ; 1262 |
                             3446 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             3447 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             3448 ; 1265 |
                             3449 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             3450 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             3451 ; 1268 |
                             3452 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             3453 ; 1270 |
                             3454 ; 1271 |typedef union               
                             3455 ; 1272 |{
                             3456 ; 1273 |    struct {
                             3457 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             3458 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             3459 ; 1276 |    } B;
                             3460 ; 1277 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3461 ; 1278 |    unsigned int U;
                             3462 ; 1279 |} adc_srr_type;
                             3463 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             3464 ; 1281 |
                             3465 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             3466 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             3467 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             3468 ; 1285 |
                             3469 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             3470 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             3471 ; 1288 |
                             3472 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             3473 ; 1290 |
                             3474 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             3475 ; 1292 |
                             3476 ; 1293 |typedef union               
                             3477 ; 1294 |{
                             3478 ; 1295 |    struct {
                             3479 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             3480 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             3481 ; 1298 |    } B;
                             3482 ; 1299 |    int I;
                             3483 ; 1300 |    unsigned int U;
                             3484 ; 1301 |} adc_icr_type;
                             3485 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             3486 ; 1303 |
                             3487 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             3488 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             3489 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3490 ; 1307 |
                             3491 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             3492 ; 1309 |
                             3493 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             3494 ; 1311 |
                             3495 ; 1312 |#endif
                             3496 ; 1313 |
                             3497 
                             3499 
                             3500 ; 20   |#include "regsdcdc.h"
                             3501 
                             3503 
                             3504 ; 1    |#if !(defined(regsdcdcinc))
                             3505 ; 2    |
                             3506 ; 3    |#define regssysteminc 1
                             3507 ; 4    |
                             3508 ; 5    |
                             3509 ; 6    |
                             3510 ; 7    |#include "types.h"
                             3511 
                             3513 
                             3514 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3515 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3516 ; 3    |//
                             3517 ; 4    |// Filename: types.h
                             3518 ; 5    |// Description: Standard data types
                             3519 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3520 ; 7    |
                             3521 ; 8    |#ifndef _TYPES_H
                             3522 ; 9    |#define _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3523 ; 10   |
                             3524 ; 11   |// TODO:  move this outta here!
                             3525 ; 12   |#if !defined(NOERROR)
                             3526 ; 13   |#define NOERROR 0
                             3527 ; 14   |#define SUCCESS 0
                             3528 ; 15   |#endif 
                             3529 ; 16   |#if !defined(SUCCESS)
                             3530 ; 17   |#define SUCCESS  0
                             3531 ; 18   |#endif
                             3532 ; 19   |#if !defined(ERROR)
                             3533 ; 20   |#define ERROR   -1
                             3534 ; 21   |#endif
                             3535 ; 22   |#if !defined(FALSE)
                             3536 ; 23   |#define FALSE 0
                             3537 ; 24   |#endif
                             3538 ; 25   |#if !defined(TRUE)
                             3539 ; 26   |#define TRUE  1
                             3540 ; 27   |#endif
                             3541 ; 28   |
                             3542 ; 29   |#if !defined(NULL)
                             3543 ; 30   |#define NULL 0
                             3544 ; 31   |#endif
                             3545 ; 32   |
                             3546 ; 33   |#define MAX_INT     0x7FFFFF
                             3547 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3548 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3549 ; 36   |#define MAX_ULONG   (-1) 
                             3550 ; 37   |
                             3551 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3552 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3553 ; 40   |
                             3554 ; 41   |
                             3555 ; 42   |#define BYTE    unsigned char       // btVarName
                             3556 ; 43   |#define CHAR    signed char         // cVarName
                             3557 ; 44   |#define USHORT  unsigned short      // usVarName
                             3558 ; 45   |#define SHORT   unsigned short      // sVarName
                             3559 ; 46   |#define WORD    unsigned int        // wVarName
                             3560 ; 47   |#define INT     signed int          // iVarName
                             3561 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3562 ; 49   |#define LONG    signed long         // lVarName
                             3563 ; 50   |#define BOOL    unsigned int        // bVarName
                             3564 ; 51   |#define FRACT   _fract              // frVarName
                             3565 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3566 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3567 ; 54   |#define FLOAT   float               // fVarName
                             3568 ; 55   |#define DBL     double              // dVarName
                             3569 ; 56   |#define ENUM    enum                // eVarName
                             3570 ; 57   |#define CMX     _complex            // cmxVarName
                             3571 ; 58   |typedef WORD UCS3;                   // 
                             3572 ; 59   |
                             3573 ; 60   |#define UINT16  unsigned short
                             3574 ; 61   |#define UINT8   unsigned char   
                             3575 ; 62   |#define UINT32  unsigned long
                             3576 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3577 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3578 ; 65   |#define WCHAR   UINT16
                             3579 ; 66   |
                             3580 ; 67   |//UINT128 is 16 bytes or 6 words
                             3581 ; 68   |typedef struct UINT128_3500 {   
                             3582 ; 69   |    int val[6];     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3583 ; 70   |} UINT128_3500;
                             3584 ; 71   |
                             3585 ; 72   |#define UINT128   UINT128_3500
                             3586 ; 73   |
                             3587 ; 74   |// Little endian word packed byte strings:   
                             3588 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3589 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3590 ; 77   |// Little endian word packed byte strings:   
                             3591 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3592 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3593 ; 80   |
                             3594 ; 81   |// Declare Memory Spaces To Use When Coding
                             3595 ; 82   |// A. Sector Buffers
                             3596 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3597 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3598 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3599 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3600 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3601 ; 88   |// B. Media DDI Memory
                             3602 ; 89   |#define MEDIA_DDI_MEM _Y
                             3603 ; 90   |
                             3604 ; 91   |
                             3605 ; 92   |
                             3606 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3607 ; 94   |// Examples of circular pointers:
                             3608 ; 95   |//    INT CIRC cpiVarName
                             3609 ; 96   |//    DWORD CIRC cpdwVarName
                             3610 ; 97   |
                             3611 ; 98   |#define RETCODE INT                 // rcVarName
                             3612 ; 99   |
                             3613 ; 100  |// generic bitfield structure
                             3614 ; 101  |struct Bitfield {
                             3615 ; 102  |    unsigned int B0  :1;
                             3616 ; 103  |    unsigned int B1  :1;
                             3617 ; 104  |    unsigned int B2  :1;
                             3618 ; 105  |    unsigned int B3  :1;
                             3619 ; 106  |    unsigned int B4  :1;
                             3620 ; 107  |    unsigned int B5  :1;
                             3621 ; 108  |    unsigned int B6  :1;
                             3622 ; 109  |    unsigned int B7  :1;
                             3623 ; 110  |    unsigned int B8  :1;
                             3624 ; 111  |    unsigned int B9  :1;
                             3625 ; 112  |    unsigned int B10 :1;
                             3626 ; 113  |    unsigned int B11 :1;
                             3627 ; 114  |    unsigned int B12 :1;
                             3628 ; 115  |    unsigned int B13 :1;
                             3629 ; 116  |    unsigned int B14 :1;
                             3630 ; 117  |    unsigned int B15 :1;
                             3631 ; 118  |    unsigned int B16 :1;
                             3632 ; 119  |    unsigned int B17 :1;
                             3633 ; 120  |    unsigned int B18 :1;
                             3634 ; 121  |    unsigned int B19 :1;
                             3635 ; 122  |    unsigned int B20 :1;
                             3636 ; 123  |    unsigned int B21 :1;
                             3637 ; 124  |    unsigned int B22 :1;
                             3638 ; 125  |    unsigned int B23 :1;
                             3639 ; 126  |};
                             3640 ; 127  |
                             3641 ; 128  |union BitInt {
                             3642 ; 129  |        struct Bitfield B;
                             3643 ; 130  |        int        I;
                             3644 ; 131  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3645 ; 132  |
                             3646 ; 133  |#define MAX_MSG_LENGTH 10
                             3647 ; 134  |struct CMessage
                             3648 ; 135  |{
                             3649 ; 136  |        unsigned int m_uLength;
                             3650 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3651 ; 138  |};
                             3652 ; 139  |
                             3653 ; 140  |typedef struct {
                             3654 ; 141  |    WORD m_wLength;
                             3655 ; 142  |    WORD m_wMessage;
                             3656 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3657 ; 144  |} Message;
                             3658 ; 145  |
                             3659 ; 146  |struct MessageQueueDescriptor
                             3660 ; 147  |{
                             3661 ; 148  |        int *m_pBase;
                             3662 ; 149  |        int m_iModulo;
                             3663 ; 150  |        int m_iSize;
                             3664 ; 151  |        int *m_pHead;
                             3665 ; 152  |        int *m_pTail;
                             3666 ; 153  |};
                             3667 ; 154  |
                             3668 ; 155  |struct ModuleEntry
                             3669 ; 156  |{
                             3670 ; 157  |    int m_iSignaledEventMask;
                             3671 ; 158  |    int m_iWaitEventMask;
                             3672 ; 159  |    int m_iResourceOfCode;
                             3673 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3674 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3675 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3676 ; 163  |    int m_uTimeOutHigh;
                             3677 ; 164  |    int m_uTimeOutLow;
                             3678 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3679 ; 166  |};
                             3680 ; 167  |
                             3681 ; 168  |union WaitMask{
                             3682 ; 169  |    struct B{
                             3683 ; 170  |        unsigned int m_bNone     :1;
                             3684 ; 171  |        unsigned int m_bMessage  :1;
                             3685 ; 172  |        unsigned int m_bTimer    :1;
                             3686 ; 173  |        unsigned int m_bButton   :1;
                             3687 ; 174  |    } B;
                             3688 ; 175  |    int I;
                             3689 ; 176  |} ;
                             3690 ; 177  |
                             3691 ; 178  |
                             3692 ; 179  |struct Button {
                             3693 ; 180  |        WORD wButtonEvent;
                             3694 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3695 ; 182  |};
                             3696 ; 183  |
                             3697 ; 184  |struct Message {
                             3698 ; 185  |        WORD wMsgLength;
                             3699 ; 186  |        WORD wMsgCommand;
                             3700 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3701 ; 188  |};
                             3702 ; 189  |
                             3703 ; 190  |union EventTypes {
                             3704 ; 191  |        struct CMessage msg;
                             3705 ; 192  |        struct Button Button ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3706 ; 193  |        struct Message Message;
                             3707 ; 194  |};
                             3708 ; 195  |
                             3709 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3710 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3711 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3712 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3713 ; 200  |
                             3714 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3715 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3716 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3717 ; 204  |
                             3718 ; 205  |#if DEBUG
                             3719 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3720 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3721 ; 208  |#else 
                             3722 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3723 ; 210  |#define DebugBuildAssert(x)    
                             3724 ; 211  |#endif
                             3725 ; 212  |
                             3726 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3727 ; 214  |//  #pragma asm
                             3728 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3729 ; 216  |//  #pragma endasm
                             3730 ; 217  |
                             3731 ; 218  |
                             3732 ; 219  |#ifdef COLOR_262K
                             3733 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3734 ; 221  |#elif defined(COLOR_65K)
                             3735 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3736 ; 223  |#else
                             3737 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3738 ; 225  |#endif
                             3739 ; 226  |    
                             3740 ; 227  |#endif // #ifndef _TYPES_H
                             3741 
                             3743 
                             3744 ; 8    |
                             3745 ; 9    |
                             3746 ; 10   |
                             3747 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3748 ; 12   |
                             3749 ; 13   |//   SYSTEM STMP Registers 
                             3750 ; 14   |//      Last Edited 2.19.2003 M. May
                             3751 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3752 ; 16   |
                             3753 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             3754 ; 18   |
                             3755 ; 19   |
                             3756 ; 20   |
                             3757 ; 21   |
                             3758 ; 22   |
                             3759 ; 23   |
                             3760 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3761 ; 25   |
                             3762 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             3763 ; 27   |
                             3764 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3765 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             3766 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             3767 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             3768 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             3769 ; 33   |
                             3770 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             3771 ; 35   |
                             3772 ; 36   |
                             3773 ; 37   |
                             3774 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             3775 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             3776 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             3777 ; 41   |
                             3778 ; 42   |
                             3779 ; 43   |
                             3780 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             3781 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             3782 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             3783 ; 47   |
                             3784 ; 48   |
                             3785 ; 49   |
                             3786 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             3787 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             3788 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             3789 ; 53   |
                             3790 ; 54   |
                             3791 ; 55   |
                             3792 ; 56   |
                             3793 ; 57   |
                             3794 ; 58   |typedef union               
                             3795 ; 59   |{
                             3796 ; 60   |    struct {
                             3797 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             3798 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             3799 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             3800 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             3801 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             3802 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             3803 ; 67   |    } B;
                             3804 ; 68   |    unsigned int I;
                             3805 ; 69   |} dcdc1_ctrl0_type;
                             3806 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             3807 ; 71   |
                             3808 ; 72   |
                             3809 ; 73   |
                             3810 ; 74   |
                             3811 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             3812 ; 76   |
                             3813 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             3814 ; 78   |
                             3815 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             3816 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             3817 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             3818 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             3819 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             3820 ; 84   |
                             3821 ; 85   |
                             3822 ; 86   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3823 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             3824 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             3825 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             3826 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             3827 ; 91   |
                             3828 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             3829 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             3830 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             3831 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             3832 ; 96   |
                             3833 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             3834 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             3835 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             3836 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             3837 ; 101  |
                             3838 ; 102  |
                             3839 ; 103  |typedef union               
                             3840 ; 104  |{
                             3841 ; 105  |    struct {
                             3842 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             3843 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             3844 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3845 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             3846 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3847 ; 111  |    } B;
                             3848 ; 112  |    unsigned int I;
                             3849 ; 113  |} dcdc1_ctrl1_type;
                             3850 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             3851 ; 115  |
                             3852 ; 116  |
                             3853 ; 117  |
                             3854 ; 118  |
                             3855 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             3856 ; 120  |
                             3857 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             3858 ; 122  |
                             3859 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             3860 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             3861 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             3862 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             3863 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             3864 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             3865 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             3866 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             3867 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             3868 ; 132  |
                             3869 ; 133  |
                             3870 ; 134  |
                             3871 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             3872 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             3873 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             3874 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             3875 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             3876 ; 140  |
                             3877 ; 141  |
                             3878 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3879 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             3880 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             3881 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             3882 ; 146  |
                             3883 ; 147  |
                             3884 ; 148  |
                             3885 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             3886 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             3887 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             3888 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             3889 ; 153  |
                             3890 ; 154  |
                             3891 ; 155  |typedef union               
                             3892 ; 156  |{
                             3893 ; 157  |    struct {
                             3894 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             3895 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             3896 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             3897 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             3898 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             3899 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             3900 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             3901 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             3902 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             3903 ; 167  |    } B;
                             3904 ; 168  |    unsigned int I;
                             3905 ; 169  |} dcdc_vddio_type;
                             3906 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             3907 ; 171  |
                             3908 ; 172  |
                             3909 ; 173  |
                             3910 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             3911 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             3912 ; 176  |
                             3913 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             3914 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             3915 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             3916 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             3917 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             3918 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             3919 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             3920 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             3921 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             3922 ; 186  |
                             3923 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             3924 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             3925 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             3926 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             3927 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             3928 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             3929 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3930 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             3931 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             3932 ; 196  |
                             3933 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3934 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             3935 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             3936 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             3937 ; 201  |
                             3938 ; 202  |typedef union               
                             3939 ; 203  |{
                             3940 ; 204  |    struct {
                             3941 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             3942 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             3943 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             3944 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             3945 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             3946 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             3947 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             3948 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             3949 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             3950 ; 214  |    } B;
                             3951 ; 215  |   unsigned int I;
                             3952 ; 216  |        unsigned U;
                             3953 ; 217  |} dcdc_vddd_type;
                             3954 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             3955 ; 219  |
                             3956 ; 220  |
                             3957 ; 221  |
                             3958 ; 222  |
                             3959 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             3960 ; 224  |
                             3961 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             3962 ; 226  |
                             3963 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             3964 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             3965 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             3966 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             3967 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             3968 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             3969 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             3970 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             3971 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             3972 ; 236  |
                             3973 ; 237  |
                             3974 ; 238  |
                             3975 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             3976 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             3977 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             3978 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             3979 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             3980 ; 244  |
                             3981 ; 245  |
                             3982 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             3983 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3984 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             3985 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             3986 ; 250  |
                             3987 ; 251  |
                             3988 ; 252  |
                             3989 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3990 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             3991 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             3992 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             3993 ; 257  |
                             3994 ; 258  |
                             3995 ; 259  |typedef union               
                             3996 ; 260  |{
                             3997 ; 261  |    struct {
                             3998 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             3999 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             4000 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             4001 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             4002 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             4003 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             4004 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             4005 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             4006 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             4007 ; 271  |    } B;
                             4008 ; 272  |    unsigned int I;
                             4009 ; 273  |} dcdc_vdda_type;
                             4010 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             4011 ; 275  |
                             4012 ; 276  |
                             4013 ; 277  |
                             4014 ; 278  |
                             4015 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             4016 ; 280  |
                             4017 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             4018 ; 282  |
                             4019 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             4020 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             4021 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             4022 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             4023 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             4024 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             4025 ; 289  |
                             4026 ; 290  |
                             4027 ; 291  |
                             4028 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             4029 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             4030 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             4031 ; 295  |
                             4032 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             4033 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             4034 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             4035 ; 299  |
                             4036 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4037 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             4038 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             4039 ; 303  |
                             4040 ; 304  |
                             4041 ; 305  |typedef union               
                             4042 ; 306  |{
                             4043 ; 307  |    struct {
                             4044 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             4045 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             4046 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             4047 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             4048 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             4049 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             4050 ; 314  |    } B;
                             4051 ; 315  |    unsigned int I;
                             4052 ; 316  |} dcdc2_ctrl0_type; 
                             4053 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             4054 ; 318  |
                             4055 ; 319  |
                             4056 ; 320  |
                             4057 ; 321  |
                             4058 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             4059 ; 323  |
                             4060 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             4061 ; 325  |
                             4062 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             4063 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             4064 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             4065 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             4066 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             4067 ; 331  |
                             4068 ; 332  |
                             4069 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             4070 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             4071 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             4072 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             4073 ; 337  |
                             4074 ; 338  |
                             4075 ; 339  |
                             4076 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             4077 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             4078 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             4079 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             4080 ; 344  |
                             4081 ; 345  |
                             4082 ; 346  |
                             4083 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             4084 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             4085 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             4086 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             4087 ; 351  |
                             4088 ; 352  |
                             4089 ; 353  |typedef union               
                             4090 ; 354  |{
                             4091 ; 355  |    struct {
                             4092 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             4093 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4094 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             4095 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             4096 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             4097 ; 361  |    } B;
                             4098 ; 362  |    unsigned int I;
                             4099 ; 363  |} dcdc2_ctrl1_type;
                             4100 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             4101 ; 365  |
                             4102 ; 366  |
                             4103 ; 367  |
                             4104 ; 368  |
                             4105 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             4106 ; 370  |
                             4107 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             4108 ; 372  |
                             4109 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             4110 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             4111 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             4112 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             4113 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             4114 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             4115 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             4116 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             4117 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             4118 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             4119 ; 383  |
                             4120 ; 384  |
                             4121 ; 385  |
                             4122 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             4123 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             4124 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             4125 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             4126 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             4127 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             4128 ; 392  |
                             4129 ; 393  |
                             4130 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             4131 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             4132 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             4133 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             4134 ; 398  |
                             4135 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             4136 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             4137 ; 401  |
                             4138 ; 402  |
                             4139 ; 403  |
                             4140 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             4141 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             4142 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             4143 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             4144 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             4145 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             4146 ; 410  |
                             4147 ; 411  |
                             4148 ; 412  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4149 ; 413  |{
                             4150 ; 414  |    struct {
                             4151 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             4152 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             4153 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             4154 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             4155 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             4156 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             4157 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             4158 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             4159 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             4160 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             4161 ; 425  |    } B;
                             4162 ; 426  |    unsigned int I;
                             4163 ; 427  |} speed_type;
                             4164 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             4165 ; 429  |
                             4166 ; 430  |
                             4167 ; 431  |
                             4168 ; 432  |
                             4169 ; 433  |
                             4170 ; 434  |
                             4171 ; 435  |
                             4172 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             4173 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             4174 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             4175 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             4176 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             4177 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             4178 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             4179 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             4180 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             4181 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             4182 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             4183 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             4184 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             4185 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             4186 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             4187 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             4188 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             4189 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             4190 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             4191 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             4192 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             4193 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             4194 ; 458  |
                             4195 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             4196 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             4197 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             4198 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             4199 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             4200 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             4201 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             4202 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             4203 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             4204 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             4205 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             4206 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             4207 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             4208 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             4209 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4210 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             4211 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             4212 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             4213 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             4214 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             4215 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             4216 ; 480  |
                             4217 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             4218 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             4219 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             4220 ; 484  |
                             4221 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             4222 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             4223 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             4224 ; 488  |
                             4225 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             4226 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             4227 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             4228 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             4229 ; 493  |
                             4230 ; 494  |typedef union               
                             4231 ; 495  |{
                             4232 ; 496  |    struct {
                             4233 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             4234 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             4235 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             4236 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             4237 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             4238 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             4239 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             4240 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             4241 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             4242 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             4243 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             4244 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             4245 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             4246 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             4247 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             4248 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             4249 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             4250 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             4251 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             4252 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             4253 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             4254 ; 518  |    } B;
                             4255 ; 519  |    unsigned int I;
                             4256 ; 520  |} usb_dcdctbr_type;
                             4257 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             4258 ; 522  |
                             4259 ; 523  |
                             4260 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             4261 ; 525  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4262 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             4263 ; 527  |
                             4264 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             4265 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             4266 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             4267 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             4268 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             4269 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             4270 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             4271 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             4272 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             4273 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             4274 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             4275 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             4276 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             4277 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             4278 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             4279 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             4280 ; 544  |
                             4281 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             4282 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             4283 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             4284 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             4285 ; 549  |
                             4286 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             4287 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             4288 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             4289 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             4290 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             4291 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             4292 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             4293 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             4294 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             4295 ; 559  |
                             4296 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             4297 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             4298 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             4299 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             4300 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             4301 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             4302 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             4303 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             4304 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             4305 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             4306 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             4307 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             4308 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             4309 ; 573  |
                             4310 ; 574  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4311 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             4312 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             4313 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             4314 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             4315 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             4316 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             4317 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             4318 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             4319 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             4320 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             4321 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             4322 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             4323 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             4324 ; 588  |
                             4325 ; 589  |typedef union               
                             4326 ; 590  |{
                             4327 ; 591  |    struct {
                             4328 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             4329 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             4330 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             4331 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             4332 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             4333 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             4334 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             4335 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             4336 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             4337 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             4338 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             4339 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             4340 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             4341 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             4342 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             4343 ; 607  |    } B;
                             4344 ; 608  |    unsigned int I;
                             4345 ; 609  |} usb_pwr_charge_type;
                             4346 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             4347 ; 611  |
                             4348 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             4349 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             4350 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             4351 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             4352 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             4353 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             4354 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             4355 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             4356 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             4357 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             4358 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             4359 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4360 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             4361 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             4362 ; 626  |
                             4363 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             4364 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             4365 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             4366 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             4367 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             4368 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             4369 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             4370 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             4371 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             4372 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             4373 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             4374 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             4375 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             4376 ; 640  |
                             4377 ; 641  |typedef union               
                             4378 ; 642  |{
                             4379 ; 643  |    struct {       
                             4380 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             4381 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             4382 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             4383 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             4384 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             4385 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             4386 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             4387 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             4388 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             4389 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             4390 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             4391 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             4392 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             4393 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             4394 ; 658  |    } B;
                             4395 ; 659  |    int I;
                             4396 ; 660  |} usb_dcdcpersist_type;
                             4397 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             4398 ; 662  |
                             4399 ; 663  |
                             4400 ; 664  |
                             4401 ; 665  |#endif
                             4402 ; 666  |
                             4403 ; 667  |
                             4404 ; 668  |
                             4405 
                             4407 
                             4408 ; 21   |#include "regsemc.h"
                             4409 
                             4411 
                             4412 ; 1    |#if !(defined(__REGS_EMC_INC))
                             4413 ; 2    |#define __REGS_EMC_INC 1
                             4414 ; 3    |
                             4415 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             4416 ; 5    |//   Module base addresses
                             4417 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4418 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             4419 ; 8    |
                             4420 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             4421 ; 10   |//  EMC Registers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4422 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             4423 ; 12   |
                             4424 ; 13   |
                             4425 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             4426 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             4427 ; 16   |
                             4428 ; 17   |typedef union               /*Flash Control Register*/
                             4429 ; 18   |{
                             4430 ; 19   |    struct
                             4431 ; 20   |    {
                             4432 ; 21   |    int KICK        :1;
                             4433 ; 22   |    int RW          :1;
                             4434 ; 23   |    int TCIE        :1;
                             4435 ; 24   |    int IRQP        :1;
                             4436 ; 25   |    unsigned MMD    :2;
                             4437 ; 26   |    unsigned NB     :11;
                             4438 ; 27   |    unsigned RSVD   :4;
                             4439 ; 28   |    int SRST        :1;
                             4440 ; 29   |    } B;
                             4441 ; 30   |    int I;
                             4442 ; 31   |} flcr_type;
                             4443 ; 32   |
                             4444 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             4445 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             4446 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             4447 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             4448 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             4449 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             4450 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             4451 ; 40   |
                             4452 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             4453 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             4454 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             4455 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             4456 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             4457 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             4458 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             4459 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             4460 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             4461 ; 50   |
                             4462 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             4463 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             4464 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             4465 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             4466 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             4467 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             4468 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             4469 ; 58   |
                             4470 ; 59   |
                             4471 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             4472 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             4473 ; 62   |
                             4474 ; 63   |typedef union           /* Flash Start Address Low*/
                             4475 ; 64   |{
                             4476 ; 65   |    struct
                             4477 ; 66   |    {
                             4478 ; 67   |    unsigned XA     : 24;
                             4479 ; 68   |    } B;
                             4480 ; 69   |    int I;
                             4481 ; 70   |} flsalr_type;
                             4482 ; 71   |
                             4483 ; 72   |#define HW_FLSALR_XA_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4484 ; 73   |
                             4485 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             4486 ; 75   |
                             4487 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             4488 ; 77   |
                             4489 ; 78   |
                             4490 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             4491 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             4492 ; 81   |
                             4493 ; 82   |typedef union           /* Flash Start Address High*/
                             4494 ; 83   |{
                             4495 ; 84   |    struct
                             4496 ; 85   |    {
                             4497 ; 86   |    unsigned XA     :8;
                             4498 ; 87   |    unsigned DA     :16;
                             4499 ; 88   |    } B;
                             4500 ; 89   |    int I;
                             4501 ; 90   |} flsahr_type;
                             4502 ; 91   |
                             4503 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             4504 ; 93   |
                             4505 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             4506 ; 95   |
                             4507 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             4508 ; 97   |
                             4509 ; 98   |
                             4510 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             4511 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             4512 ; 101  |
                             4513 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             4514 ; 103  |{
                             4515 ; 104  |    struct
                             4516 ; 105  |    {
                             4517 ; 106  |        int WP          :1;
                             4518 ; 107  |        int CDP         :1;
                             4519 ; 108  |        unsigned SM     :2;
                             4520 ; 109  |        int XATTR       :1;
                             4521 ; 110  |        int CRST        :1;
                             4522 ; 111  |        int XWT         :1;
                             4523 ; 112  |        int RI          :1;
                             4524 ; 113  |        int IFCE        :1;
                             4525 ; 114  |        int ISCE        :1;
                             4526 ; 115  |        int INCE        :1;
                             4527 ; 116  |        int IFCS        :1;
                             4528 ; 117  |        int ISCS        :1;
                             4529 ; 118  |        int INCS        :1;
                             4530 ; 119  |        unsigned CFAI   :2;
                             4531 ; 120  |        int XDDI        :1;
                             4532 ; 121  |        unsigned CS     :2;
                             4533 ; 122  |        int CRE         :1;
                             4534 ; 123  |        unsigned VS     :2;
                             4535 ; 124  |        int DASP        :1;
                             4536 ; 125  |        int MODE16      :1; 
                             4537 ; 126  |    } B;
                             4538 ; 127  |    int I;
                             4539 ; 128  |} flcfcr_type;
                             4540 ; 129  |
                             4541 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             4542 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             4543 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             4544 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             4545 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4546 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             4547 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             4548 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             4549 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             4550 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             4551 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             4552 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             4553 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             4554 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             4555 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             4556 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             4557 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             4558 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             4559 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             4560 ; 149  |
                             4561 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             4562 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             4563 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             4564 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             4565 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             4566 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             4567 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             4568 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             4569 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             4570 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             4571 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             4572 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             4573 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             4574 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             4575 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             4576 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             4577 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             4578 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             4579 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             4580 ; 169  |
                             4581 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             4582 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             4583 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             4584 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             4585 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             4586 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             4587 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             4588 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             4589 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             4590 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             4591 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             4592 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             4593 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             4594 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             4595 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             4596 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             4597 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             4598 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             4599 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             4600 ; 189  |
                             4601 ; 190  |
                             4602 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             4603 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             4604 ; 193  |
                             4605 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             4606 ; 195  |{
                             4607 ; 196  |    struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4608 ; 197  |    {
                             4609 ; 198  |        unsigned TRWSU  :5;
                             4610 ; 199  |        unsigned TRPW   :7;
                             4611 ; 200  |        unsigned TWPW   :7;
                             4612 ; 201  |        unsigned TRWH   :5;
                             4613 ; 202  |    } B;
                             4614 ; 203  |    int I;
                             4615 ; 204  |} flcftmr1r_type;
                             4616 ; 205  |
                             4617 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             4618 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             4619 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             4620 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             4621 ; 210  |
                             4622 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             4623 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             4624 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             4625 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             4626 ; 215  |
                             4627 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             4628 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             4629 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             4630 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             4631 ; 220  |
                             4632 ; 221  |
                             4633 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             4634 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             4635 ; 224  |
                             4636 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             4637 ; 226  |{
                             4638 ; 227  |    struct
                             4639 ; 228  |    {
                             4640 ; 229  |        unsigned TWW    :4;
                             4641 ; 230  |        unsigned TWTO   :10;
                             4642 ; 231  |        unsigned THW    :5; 
                             4643 ; 232  |        unsigned TRAQ   :5;
                             4644 ; 233  |    } B;
                             4645 ; 234  |    int I;
                             4646 ; 235  |} flcftmr2r_type;
                             4647 ; 236  |
                             4648 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             4649 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             4650 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             4651 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             4652 ; 241  |
                             4653 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             4654 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             4655 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             4656 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             4657 ; 246  |
                             4658 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             4659 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             4660 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             4661 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             4662 ; 251  |
                             4663 ; 252  |
                             4664 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             4665 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             4666 ; 255  |
                             4667 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             4668 ; 257  |{
                             4669 ; 258  |    struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4670 ; 259  |    {
                             4671 ; 260  |        unsigned CS     :2;
                             4672 ; 261  |        int SE          :1;
                             4673 ; 262  |        int WP          :1;
                             4674 ; 263  |        int SIZE        :1;
                             4675 ; 264  |        int ICMD        :8;
                             4676 ; 265  |        int TOIE        :1;
                             4677 ; 266  |        int BPIE        :1;
                             4678 ; 267  |        int TOIRQ       :1;
                             4679 ; 268  |        int BPIRQ       :1;
                             4680 ; 269  |    } B;
                             4681 ; 270  |    int I;
                             4682 ; 271  |} flsmcr_type;
                             4683 ; 272  |
                             4684 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             4685 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             4686 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             4687 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             4688 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             4689 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             4690 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             4691 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             4692 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             4693 ; 282  |
                             4694 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             4695 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             4696 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             4697 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             4698 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             4699 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             4700 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             4701 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             4702 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             4703 ; 292  |
                             4704 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             4705 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             4706 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             4707 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             4708 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             4709 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             4710 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             4711 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             4712 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             4713 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             4714 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             4715 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             4716 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             4717 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             4718 ; 307  |
                             4719 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             4720 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             4721 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             4722 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             4723 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             4724 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             4725 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             4726 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             4727 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             4728 ; 317  |
                             4729 ; 318  |
                             4730 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             4731 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4732 ; 321  |
                             4733 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             4734 ; 323  |{
                             4735 ; 324  |    struct
                             4736 ; 325  |    {
                             4737 ; 326  |        unsigned TRWSU  :5;
                             4738 ; 327  |        unsigned TRPW   :6;
                             4739 ; 328  |        unsigned TWPW   :6;
                             4740 ; 329  |        unsigned TRWH   :5;
                             4741 ; 330  |    } B;
                             4742 ; 331  |    int I;
                             4743 ; 332  |} flsmtmr1r_type;
                             4744 ; 333  |
                             4745 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             4746 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             4747 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             4748 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             4749 ; 338  |
                             4750 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             4751 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             4752 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             4753 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             4754 ; 343  |
                             4755 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             4756 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             4757 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             4758 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             4759 ; 348  |
                             4760 ; 349  |
                             4761 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             4762 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             4763 ; 352  |
                             4764 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             4765 ; 354  |{
                             4766 ; 355  |    struct
                             4767 ; 356  |    {
                             4768 ; 357  |        unsigned TWT    :6;
                             4769 ; 358  |        unsigned TWTO   :18;
                             4770 ; 359  |    } B;
                             4771 ; 360  |    int I;
                             4772 ; 361  |} flsmtmr2r_type;
                             4773 ; 362  |
                             4774 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             4775 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             4776 ; 365  |
                             4777 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             4778 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             4779 ; 368  |
                             4780 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             4781 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             4782 ; 371  |
                             4783 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             4784 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             4785 ; 374  |typedef union 
                             4786 ; 375  |{
                             4787 ; 376  |  struct
                             4788 ; 377  |  {
                             4789 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             4790 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             4791 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4792 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             4793 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             4794 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             4795 ; 384  |    int PAD0          :17;    
                             4796 ; 385  |  } B;
                             4797 ; 386  |  int I;
                             4798 ; 387  |} flcr2_type;
                             4799 ; 388  |
                             4800 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             4801 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             4802 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             4803 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             4804 ; 393  |
                             4805 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             4806 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             4807 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             4808 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             4809 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             4810 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             4811 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             4812 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             4813 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             4814 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             4815 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             4816 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             4817 ; 406  |
                             4818 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             4819 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             4820 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             4821 ; 410  |
                             4822 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             4823 ; 412  |
                             4824 ; 413  |#endif
                             4825 ; 414  |
                             4826 
                             4828 
                             4829 ; 22   |#include "regsgpio.h"
                             4830 
                             4832 
                             4833 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             4834 ; 2    |#define __REGS_GPIO_INC 1
                             4835 ; 3    |
                             4836 ; 4    |#include "types.h"
                             4837 ; 5    |
                             4838 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4839 ; 7    |//  Interrupt Collector Registers
                             4840 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4841 ; 9    |
                             4842 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4843 ; 11   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4844 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4845 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4846 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4847 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4848 ; 16   |
                             4849 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4850 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4851 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4852 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4853 ; 21   |
                             4854 ; 22   |#define HW_GPB_GPENR 0
                             4855 ; 23   |#define HW_GPB_GPDOR 1
                             4856 ; 24   |#define HW_GPB_GPDIR 2
                             4857 ; 25   |#define HW_GPB_GPDOER 3
                             4858 ; 26   |#define HW_GPB_GPIPENR 4
                             4859 ; 27   |#define HW_GPB_GPIENR 5
                             4860 ; 28   |#define HW_GPB_GPILVLR 6
                             4861 ; 29   |#define HW_GPB_GPIPOLR 7
                             4862 ; 30   |#define HW_GPB_GPISTATR 8
                             4863 ; 31   |#define HW_GPB_GPPWR 9
                             4864 ; 32   |#define HW_GPB_GP8MA 10
                             4865 ; 33   |
                             4866 ; 34   |
                             4867 ; 35   |
                             4868 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4869 ; 37   |//  GPIO Register Bit Positions
                             4870 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4871 ; 39   |{
                             4872 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4873 ; 41   |    unsigned int I;
                             4874 ; 42   |    unsigned int U;
                             4875 ; 43   |} gpr_type;
                             4876 ; 44   |
                             4877 ; 45   |#define HW_GP_B0_BITPOS 0
                             4878 ; 46   |#define HW_GP_B1_BITPOS 1
                             4879 ; 47   |#define HW_GP_B2_BITPOS 2
                             4880 ; 48   |#define HW_GP_B3_BITPOS 3
                             4881 ; 49   |#define HW_GP_B4_BITPOS 4
                             4882 ; 50   |#define HW_GP_B5_BITPOS 5
                             4883 ; 51   |#define HW_GP_B6_BITPOS 6
                             4884 ; 52   |#define HW_GP_B7_BITPOS 7
                             4885 ; 53   |#define HW_GP_B8_BITPOS 8
                             4886 ; 54   |#define HW_GP_B9_BITPOS 9
                             4887 ; 55   |#define HW_GP_B10_BITPOS 10
                             4888 ; 56   |#define HW_GP_B11_BITPOS 11
                             4889 ; 57   |#define HW_GP_B12_BITPOS 12
                             4890 ; 58   |#define HW_GP_B13_BITPOS 13
                             4891 ; 59   |#define HW_GP_B14_BITPOS 14
                             4892 ; 60   |#define HW_GP_B15_BITPOS 15
                             4893 ; 61   |#define HW_GP_B16_BITPOS 16
                             4894 ; 62   |#define HW_GP_B17_BITPOS 17
                             4895 ; 63   |#define HW_GP_B18_BITPOS 18
                             4896 ; 64   |#define HW_GP_B19_BITPOS 19
                             4897 ; 65   |#define HW_GP_B20_BITPOS 20
                             4898 ; 66   |#define HW_GP_B21_BITPOS 21
                             4899 ; 67   |#define HW_GP_B22_BITPOS 22
                             4900 ; 68   |#define HW_GP_B23_BITPOS 23
                             4901 ; 69   |
                             4902 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4903 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4904 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4905 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4906 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4907 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4908 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4909 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4910 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4911 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4912 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4913 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4914 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4915 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4916 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4917 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4918 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4919 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4920 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4921 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4922 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4923 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4924 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4925 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4926 ; 94   |
                             4927 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4928 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4929 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4930 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4931 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4932 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4933 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4934 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4935 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4936 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4937 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4938 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4939 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4940 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4941 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4942 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4943 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4944 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4945 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4946 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4947 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4948 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4949 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4950 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4951 ; 119  |
                             4952 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4953 ; 121  |//  GPIO 8mA Register Bit Positions
                             4954 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4955 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4956 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4957 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4958 ; 126  |
                             4959 ; 127  |
                             4960 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4961 ; 129  |//  Logical GPIO numbers
                             4962 ; 130  |#define HW_GPIO_000 0
                             4963 ; 131  |#define HW_GPIO_001 1
                             4964 ; 132  |#define HW_GPIO_002 2
                             4965 ; 133  |#define HW_GPIO_003 3
                             4966 ; 134  |#define HW_GPIO_004 4
                             4967 ; 135  |#define HW_GPIO_005 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4968 ; 136  |#define HW_GPIO_006 6
                             4969 ; 137  |#define HW_GPIO_007 7
                             4970 ; 138  |#define HW_GPIO_008 8
                             4971 ; 139  |#define HW_GPIO_009 9
                             4972 ; 140  |#define HW_GPIO_010 10
                             4973 ; 141  |#define HW_GPIO_011 11
                             4974 ; 142  |#define HW_GPIO_012 12
                             4975 ; 143  |#define HW_GPIO_013 13
                             4976 ; 144  |#define HW_GPIO_014 14
                             4977 ; 145  |#define HW_GPIO_015 15
                             4978 ; 146  |#define HW_GPIO_016 16
                             4979 ; 147  |#define HW_GPIO_017 17
                             4980 ; 148  |#define HW_GPIO_018 18
                             4981 ; 149  |#define HW_GPIO_019 19
                             4982 ; 150  |#define HW_GPIO_020 20
                             4983 ; 151  |#define HW_GPIO_021 21
                             4984 ; 152  |#define HW_GPIO_022 22
                             4985 ; 153  |#define HW_GPIO_023 23
                             4986 ; 154  |#define HW_GPIO_024 24
                             4987 ; 155  |#define HW_GPIO_025 25
                             4988 ; 156  |#define HW_GPIO_026 26
                             4989 ; 157  |#define HW_GPIO_027 27
                             4990 ; 158  |#define HW_GPIO_028 28
                             4991 ; 159  |#define HW_GPIO_029 29
                             4992 ; 160  |#define HW_GPIO_030 30
                             4993 ; 161  |#define HW_GPIO_031 31
                             4994 ; 162  |#define HW_GPIO_032 32
                             4995 ; 163  |#define HW_GPIO_033 33
                             4996 ; 164  |#define HW_GPIO_034 34
                             4997 ; 165  |#define HW_GPIO_035 35
                             4998 ; 166  |#define HW_GPIO_036 36
                             4999 ; 167  |#define HW_GPIO_037 37
                             5000 ; 168  |#define HW_GPIO_038 38
                             5001 ; 169  |#define HW_GPIO_039 39
                             5002 ; 170  |#define HW_GPIO_040 40
                             5003 ; 171  |#define HW_GPIO_041 41
                             5004 ; 172  |#define HW_GPIO_042 42
                             5005 ; 173  |#define HW_GPIO_043 43
                             5006 ; 174  |#define HW_GPIO_044 44
                             5007 ; 175  |#define HW_GPIO_045 45
                             5008 ; 176  |#define HW_GPIO_046 46
                             5009 ; 177  |#define HW_GPIO_047 47
                             5010 ; 178  |#define HW_GPIO_048 48
                             5011 ; 179  |#define HW_GPIO_049 49
                             5012 ; 180  |#define HW_GPIO_050 50
                             5013 ; 181  |#define HW_GPIO_051 51
                             5014 ; 182  |#define HW_GPIO_052 52
                             5015 ; 183  |#define HW_GPIO_053 53
                             5016 ; 184  |#define HW_GPIO_054 54
                             5017 ; 185  |#define HW_GPIO_055 55
                             5018 ; 186  |#define HW_GPIO_056 56
                             5019 ; 187  |#define HW_GPIO_057 57
                             5020 ; 188  |#define HW_GPIO_058 58
                             5021 ; 189  |#define HW_GPIO_059 59
                             5022 ; 190  |#define HW_GPIO_060 60
                             5023 ; 191  |#define HW_GPIO_061 61
                             5024 ; 192  |#define HW_GPIO_062 62
                             5025 ; 193  |#define HW_GPIO_063 63
                             5026 ; 194  |#define HW_GPIO_064 64
                             5027 ; 195  |#define HW_GPIO_065 65
                             5028 ; 196  |#define HW_GPIO_066 66
                             5029 ; 197  |#define HW_GPIO_067 67
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5030 ; 198  |#define HW_GPIO_068 68
                             5031 ; 199  |#define HW_GPIO_069 69
                             5032 ; 200  |#define HW_GPIO_070 70
                             5033 ; 201  |#define HW_GPIO_071 71
                             5034 ; 202  |#define HW_GPIO_072 72
                             5035 ; 203  |#define HW_GPIO_073 73
                             5036 ; 204  |#define HW_GPIO_074 74
                             5037 ; 205  |#define HW_GPIO_075 75
                             5038 ; 206  |#define HW_GPIO_076 76
                             5039 ; 207  |#define HW_GPIO_077 77
                             5040 ; 208  |#define HW_GPIO_078 78
                             5041 ; 209  |#define HW_GPIO_079 79
                             5042 ; 210  |#define HW_GPIO_080 80
                             5043 ; 211  |#define HW_GPIO_081 81
                             5044 ; 212  |#define HW_GPIO_082 82
                             5045 ; 213  |#define HW_GPIO_083 83
                             5046 ; 214  |#define HW_GPIO_084 84
                             5047 ; 215  |#define HW_GPIO_085 85
                             5048 ; 216  |#define HW_GPIO_086 86
                             5049 ; 217  |#define HW_GPIO_087 87
                             5050 ; 218  |#define HW_GPIO_088 88
                             5051 ; 219  |#define HW_GPIO_089 89
                             5052 ; 220  |#define HW_GPIO_090 90
                             5053 ; 221  |#define HW_GPIO_091 91
                             5054 ; 222  |#define HW_GPIO_092 92
                             5055 ; 223  |#define HW_GPIO_093 93
                             5056 ; 224  |#define HW_GPIO_094 94
                             5057 ; 225  |#define HW_GPIO_095 95
                             5058 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             5059 ; 227  |
                             5060 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             5061 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             5062 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             5063 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             5064 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             5065 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             5066 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             5067 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             5068 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             5069 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5070 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             5071 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             5072 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             5073 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             5074 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             5075 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5076 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             5077 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             5078 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             5079 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             5080 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5081 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             5082 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             5083 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             5084 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             5085 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             5086 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             5087 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             5088 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             5089 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             5090 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             5091 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5092 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             5093 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             5094 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             5095 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             5096 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             5097 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             5098 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             5099 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             5100 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             5101 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             5102 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5103 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             5104 ; 272  |
                             5105 ; 273  |#endif
                             5106 ; 274  |
                             5107 
                             5109 
                             5110 ; 23   |#include "regsi2c.h"
                             5111 
                             5113 
                             5114 ; 1    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5115 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             5116 ; 3    |// Filename: regsI2C.inc
                             5117 ; 4    |// Description: Register definitions for GPFLASH interface
                             5118 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             5119 ; 6    |// The following naming conventions are followed in this file.
                             5120 ; 7    |// All registers are named using the format...
                             5121 ; 8    |//     HW_<module>_<regname>
                             5122 ; 9    |// where <module> is the module name which can be any of the following...
                             5123 ; 10   |//     USB20
                             5124 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5125 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5126 ; 13   |// that module)
                             5127 ; 14   |// <regname> is the specific register within that module
                             5128 ; 15   |// We also define the following...
                             5129 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5130 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5131 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5132 ; 19   |// which does something else, and
                             5133 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5134 ; 21   |// which does something else.
                             5135 ; 22   |// Other rules
                             5136 ; 23   |//     All caps
                             5137 ; 24   |//     Numeric identifiers start at 0
                             5138 ; 25   |#if !(defined(regsi2cinc))
                             5139 ; 26   |#define regsi2cinc 1
                             5140 ; 27   |
                             5141 ; 28   |#include "types.h"
                             5142 
                             5144 
                             5145 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5146 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5147 ; 3    |//
                             5148 ; 4    |// Filename: types.h
                             5149 ; 5    |// Description: Standard data types
                             5150 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5151 ; 7    |
                             5152 ; 8    |#ifndef _TYPES_H
                             5153 ; 9    |#define _TYPES_H
                             5154 ; 10   |
                             5155 ; 11   |// TODO:  move this outta here!
                             5156 ; 12   |#if !defined(NOERROR)
                             5157 ; 13   |#define NOERROR 0
                             5158 ; 14   |#define SUCCESS 0
                             5159 ; 15   |#endif 
                             5160 ; 16   |#if !defined(SUCCESS)
                             5161 ; 17   |#define SUCCESS  0
                             5162 ; 18   |#endif
                             5163 ; 19   |#if !defined(ERROR)
                             5164 ; 20   |#define ERROR   -1
                             5165 ; 21   |#endif
                             5166 ; 22   |#if !defined(FALSE)
                             5167 ; 23   |#define FALSE 0
                             5168 ; 24   |#endif
                             5169 ; 25   |#if !defined(TRUE)
                             5170 ; 26   |#define TRUE  1
                             5171 ; 27   |#endif
                             5172 ; 28   |
                             5173 ; 29   |#if !defined(NULL)
                             5174 ; 30   |#define NULL 0
                             5175 ; 31   |#endif
                             5176 ; 32   |
                             5177 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5178 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5179 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5180 ; 36   |#define MAX_ULONG   (-1) 
                             5181 ; 37   |
                             5182 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5183 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5184 ; 40   |
                             5185 ; 41   |
                             5186 ; 42   |#define BYTE    unsigned char       // btVarName
                             5187 ; 43   |#define CHAR    signed char         // cVarName
                             5188 ; 44   |#define USHORT  unsigned short      // usVarName
                             5189 ; 45   |#define SHORT   unsigned short      // sVarName
                             5190 ; 46   |#define WORD    unsigned int        // wVarName
                             5191 ; 47   |#define INT     signed int          // iVarName
                             5192 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5193 ; 49   |#define LONG    signed long         // lVarName
                             5194 ; 50   |#define BOOL    unsigned int        // bVarName
                             5195 ; 51   |#define FRACT   _fract              // frVarName
                             5196 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5197 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5198 ; 54   |#define FLOAT   float               // fVarName
                             5199 ; 55   |#define DBL     double              // dVarName
                             5200 ; 56   |#define ENUM    enum                // eVarName
                             5201 ; 57   |#define CMX     _complex            // cmxVarName
                             5202 ; 58   |typedef WORD UCS3;                   // 
                             5203 ; 59   |
                             5204 ; 60   |#define UINT16  unsigned short
                             5205 ; 61   |#define UINT8   unsigned char   
                             5206 ; 62   |#define UINT32  unsigned long
                             5207 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5208 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5209 ; 65   |#define WCHAR   UINT16
                             5210 ; 66   |
                             5211 ; 67   |//UINT128 is 16 bytes or 6 words
                             5212 ; 68   |typedef struct UINT128_3500 {   
                             5213 ; 69   |    int val[6];     
                             5214 ; 70   |} UINT128_3500;
                             5215 ; 71   |
                             5216 ; 72   |#define UINT128   UINT128_3500
                             5217 ; 73   |
                             5218 ; 74   |// Little endian word packed byte strings:   
                             5219 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5220 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5221 ; 77   |// Little endian word packed byte strings:   
                             5222 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5223 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5224 ; 80   |
                             5225 ; 81   |// Declare Memory Spaces To Use When Coding
                             5226 ; 82   |// A. Sector Buffers
                             5227 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5228 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5229 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5230 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5231 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5232 ; 88   |// B. Media DDI Memory
                             5233 ; 89   |#define MEDIA_DDI_MEM _Y
                             5234 ; 90   |
                             5235 ; 91   |
                             5236 ; 92   |
                             5237 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5238 ; 94   |// Examples of circular pointers:
                             5239 ; 95   |//    INT CIRC cpiVarName
                             5240 ; 96   |//    DWORD CIRC cpdwVarName
                             5241 ; 97   |
                             5242 ; 98   |#define RETCODE INT                 // rcVarName
                             5243 ; 99   |
                             5244 ; 100  |// generic bitfield structure
                             5245 ; 101  |struct Bitfield {
                             5246 ; 102  |    unsigned int B0  :1;
                             5247 ; 103  |    unsigned int B1  :1;
                             5248 ; 104  |    unsigned int B2  :1;
                             5249 ; 105  |    unsigned int B3  :1;
                             5250 ; 106  |    unsigned int B4  :1;
                             5251 ; 107  |    unsigned int B5  :1;
                             5252 ; 108  |    unsigned int B6  :1;
                             5253 ; 109  |    unsigned int B7  :1;
                             5254 ; 110  |    unsigned int B8  :1;
                             5255 ; 111  |    unsigned int B9  :1;
                             5256 ; 112  |    unsigned int B10 :1;
                             5257 ; 113  |    unsigned int B11 :1;
                             5258 ; 114  |    unsigned int B12 :1;
                             5259 ; 115  |    unsigned int B13 :1;
                             5260 ; 116  |    unsigned int B14 :1;
                             5261 ; 117  |    unsigned int B15 :1;
                             5262 ; 118  |    unsigned int B16 :1;
                             5263 ; 119  |    unsigned int B17 :1;
                             5264 ; 120  |    unsigned int B18 :1;
                             5265 ; 121  |    unsigned int B19 :1;
                             5266 ; 122  |    unsigned int B20 :1;
                             5267 ; 123  |    unsigned int B21 :1;
                             5268 ; 124  |    unsigned int B22 :1;
                             5269 ; 125  |    unsigned int B23 :1;
                             5270 ; 126  |};
                             5271 ; 127  |
                             5272 ; 128  |union BitInt {
                             5273 ; 129  |        struct Bitfield B;
                             5274 ; 130  |        int        I;
                             5275 ; 131  |};
                             5276 ; 132  |
                             5277 ; 133  |#define MAX_MSG_LENGTH 10
                             5278 ; 134  |struct CMessage
                             5279 ; 135  |{
                             5280 ; 136  |        unsigned int m_uLength;
                             5281 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5282 ; 138  |};
                             5283 ; 139  |
                             5284 ; 140  |typedef struct {
                             5285 ; 141  |    WORD m_wLength;
                             5286 ; 142  |    WORD m_wMessage;
                             5287 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5288 ; 144  |} Message;
                             5289 ; 145  |
                             5290 ; 146  |struct MessageQueueDescriptor
                             5291 ; 147  |{
                             5292 ; 148  |        int *m_pBase;
                             5293 ; 149  |        int m_iModulo;
                             5294 ; 150  |        int m_iSize;
                             5295 ; 151  |        int *m_pHead;
                             5296 ; 152  |        int *m_pTail;
                             5297 ; 153  |};
                             5298 ; 154  |
                             5299 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5300 ; 156  |{
                             5301 ; 157  |    int m_iSignaledEventMask;
                             5302 ; 158  |    int m_iWaitEventMask;
                             5303 ; 159  |    int m_iResourceOfCode;
                             5304 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5305 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5306 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5307 ; 163  |    int m_uTimeOutHigh;
                             5308 ; 164  |    int m_uTimeOutLow;
                             5309 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5310 ; 166  |};
                             5311 ; 167  |
                             5312 ; 168  |union WaitMask{
                             5313 ; 169  |    struct B{
                             5314 ; 170  |        unsigned int m_bNone     :1;
                             5315 ; 171  |        unsigned int m_bMessage  :1;
                             5316 ; 172  |        unsigned int m_bTimer    :1;
                             5317 ; 173  |        unsigned int m_bButton   :1;
                             5318 ; 174  |    } B;
                             5319 ; 175  |    int I;
                             5320 ; 176  |} ;
                             5321 ; 177  |
                             5322 ; 178  |
                             5323 ; 179  |struct Button {
                             5324 ; 180  |        WORD wButtonEvent;
                             5325 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5326 ; 182  |};
                             5327 ; 183  |
                             5328 ; 184  |struct Message {
                             5329 ; 185  |        WORD wMsgLength;
                             5330 ; 186  |        WORD wMsgCommand;
                             5331 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5332 ; 188  |};
                             5333 ; 189  |
                             5334 ; 190  |union EventTypes {
                             5335 ; 191  |        struct CMessage msg;
                             5336 ; 192  |        struct Button Button ;
                             5337 ; 193  |        struct Message Message;
                             5338 ; 194  |};
                             5339 ; 195  |
                             5340 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5341 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5342 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5343 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5344 ; 200  |
                             5345 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5346 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5347 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5348 ; 204  |
                             5349 ; 205  |#if DEBUG
                             5350 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5351 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5352 ; 208  |#else 
                             5353 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5354 ; 210  |#define DebugBuildAssert(x)    
                             5355 ; 211  |#endif
                             5356 ; 212  |
                             5357 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5358 ; 214  |//  #pragma asm
                             5359 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5360 ; 216  |//  #pragma endasm
                             5361 ; 217  |
                             5362 ; 218  |
                             5363 ; 219  |#ifdef COLOR_262K
                             5364 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5365 ; 221  |#elif defined(COLOR_65K)
                             5366 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5367 ; 223  |#else
                             5368 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5369 ; 225  |#endif
                             5370 ; 226  |    
                             5371 ; 227  |#endif // #ifndef _TYPES_H
                             5372 
                             5374 
                             5375 ; 29   |
                             5376 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             5377 ; 31   |////   I2C STMP Registers
                             5378 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             5379 ; 33   |
                             5380 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             5381 ; 35   |
                             5382 ; 36   |
                             5383 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             5384 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             5385 ; 39   |
                             5386 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             5387 ; 41   |
                             5388 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             5389 ; 43   |
                             5390 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             5391 ; 45   |
                             5392 ; 46   |typedef union               /* I2C Clock Divider Register */
                             5393 ; 47   |{
                             5394 ; 48   |    struct {
                             5395 ; 49   |        int                :1; 
                             5396 ; 50   |        unsigned FACT      :8;
                             5397 ; 51   |    } B;
                             5398 ; 52   |    int I;
                             5399 ; 53   |    unsigned U;
                             5400 ; 54   |} i2cdivr_type;
                             5401 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             5402 ; 56   |
                             5403 ; 57   |
                             5404 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             5405 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             5406 ; 60   |
                             5407 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             5408 ; 62   |
                             5409 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             5410 ; 64   |
                             5411 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             5412 ; 66   |
                             5413 ; 67   |typedef union               /* I2C Data Register */
                             5414 ; 68   |{
                             5415 ; 69   |    struct {
                             5416 ; 70   |         unsigned DATA :24; 
                             5417 ; 71   |    } B;
                             5418 ; 72   |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5419 ; 73   |    unsigned U;
                             5420 ; 74   |} i2cdatr_type;
                             5421 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                             5422 ; 76   |
                             5423 ; 77   |
                             5424 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             5425 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             5426 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             5427 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             5428 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             5429 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             5430 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             5431 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             5432 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             5433 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             5434 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             5435 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             5436 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             5437 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             5438 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             5439 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             5440 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             5441 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             5442 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             5443 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             5444 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             5445 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             5446 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             5447 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             5448 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             5449 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             5450 ; 104  |
                             5451 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             5452 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             5453 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             5454 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             5455 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             5456 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             5457 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             5458 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             5459 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             5460 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             5461 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             5462 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             5463 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             5464 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             5465 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             5466 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             5467 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             5468 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             5469 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             5470 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             5471 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             5472 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             5473 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             5474 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             5475 ; 129  |
                             5476 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             5477 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             5478 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             5479 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5480 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             5481 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             5482 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             5483 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             5484 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             5485 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             5486 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             5487 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             5488 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             5489 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             5490 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             5491 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             5492 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             5493 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             5494 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             5495 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             5496 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             5497 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             5498 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             5499 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             5500 ; 154  |
                             5501 ; 155  |typedef union               /* I2C Control Register         */
                             5502 ; 156  |{
                             5503 ; 157  |    struct {
                             5504 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             5505 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             5506 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             5507 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             5508 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             5509 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             5510 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             5511 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             5512 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             5513 ; 167  |       unsigned WL     :2; /* Word Length              */
                             5514 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             5515 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             5516 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             5517 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             5518 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             5519 ; 173  |        int LWORD       :1; /* Last Word                */
                             5520 ; 174  |        int SUBA        :1; /* Sub Address              */
                             5521 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             5522 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             5523 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             5524 ; 178  |    } B;
                             5525 ; 179  |    int I;
                             5526 ; 180  |    unsigned U;
                             5527 ; 181  |} i2ccsr_type;
                             5528 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             5529 ; 183  |
                             5530 ; 184  |#endif
                             5531 
                             5533 
                             5534 ; 24   |#include "regsi2s.h"
                             5535 
                             5537 
                             5538 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5539 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             5540 ; 3    |// Filename: regsi2s.inc
                             5541 ; 4    |// Description: Register definitions for I2S interface
                             5542 ; 5    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5543 ; 6    |// The following naming conventions are followed in this file.
                             5544 ; 7    |// All registers are named using the format...
                             5545 ; 8    |//     HW_<module>_<regname>
                             5546 ; 9    |// where <module> is the module name which can be any of the following...
                             5547 ; 10   |//     USB20
                             5548 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5549 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5550 ; 13   |// that module)
                             5551 ; 14   |// <regname> is the specific register within that module
                             5552 ; 15   |// We also define the following...
                             5553 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5554 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5555 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5556 ; 19   |// which does something else, and
                             5557 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5558 ; 21   |// which does something else.
                             5559 ; 22   |// Other rules
                             5560 ; 23   |//     All caps
                             5561 ; 24   |//     Numeric identifiers start at 0
                             5562 ; 25   |#if !(defined(regsi2sinc))
                             5563 ; 26   |#define regsi2sinc 1
                             5564 ; 27   |
                             5565 ; 28   |#include "types.h"
                             5566 
                             5568 
                             5569 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5570 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5571 ; 3    |//
                             5572 ; 4    |// Filename: types.h
                             5573 ; 5    |// Description: Standard data types
                             5574 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5575 ; 7    |
                             5576 ; 8    |#ifndef _TYPES_H
                             5577 ; 9    |#define _TYPES_H
                             5578 ; 10   |
                             5579 ; 11   |// TODO:  move this outta here!
                             5580 ; 12   |#if !defined(NOERROR)
                             5581 ; 13   |#define NOERROR 0
                             5582 ; 14   |#define SUCCESS 0
                             5583 ; 15   |#endif 
                             5584 ; 16   |#if !defined(SUCCESS)
                             5585 ; 17   |#define SUCCESS  0
                             5586 ; 18   |#endif
                             5587 ; 19   |#if !defined(ERROR)
                             5588 ; 20   |#define ERROR   -1
                             5589 ; 21   |#endif
                             5590 ; 22   |#if !defined(FALSE)
                             5591 ; 23   |#define FALSE 0
                             5592 ; 24   |#endif
                             5593 ; 25   |#if !defined(TRUE)
                             5594 ; 26   |#define TRUE  1
                             5595 ; 27   |#endif
                             5596 ; 28   |
                             5597 ; 29   |#if !defined(NULL)
                             5598 ; 30   |#define NULL 0
                             5599 ; 31   |#endif
                             5600 ; 32   |
                             5601 ; 33   |#define MAX_INT     0x7FFFFF
                             5602 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5603 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5604 ; 36   |#define MAX_ULONG   (-1) 
                             5605 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5606 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5607 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5608 ; 40   |
                             5609 ; 41   |
                             5610 ; 42   |#define BYTE    unsigned char       // btVarName
                             5611 ; 43   |#define CHAR    signed char         // cVarName
                             5612 ; 44   |#define USHORT  unsigned short      // usVarName
                             5613 ; 45   |#define SHORT   unsigned short      // sVarName
                             5614 ; 46   |#define WORD    unsigned int        // wVarName
                             5615 ; 47   |#define INT     signed int          // iVarName
                             5616 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5617 ; 49   |#define LONG    signed long         // lVarName
                             5618 ; 50   |#define BOOL    unsigned int        // bVarName
                             5619 ; 51   |#define FRACT   _fract              // frVarName
                             5620 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5621 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5622 ; 54   |#define FLOAT   float               // fVarName
                             5623 ; 55   |#define DBL     double              // dVarName
                             5624 ; 56   |#define ENUM    enum                // eVarName
                             5625 ; 57   |#define CMX     _complex            // cmxVarName
                             5626 ; 58   |typedef WORD UCS3;                   // 
                             5627 ; 59   |
                             5628 ; 60   |#define UINT16  unsigned short
                             5629 ; 61   |#define UINT8   unsigned char   
                             5630 ; 62   |#define UINT32  unsigned long
                             5631 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5632 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5633 ; 65   |#define WCHAR   UINT16
                             5634 ; 66   |
                             5635 ; 67   |//UINT128 is 16 bytes or 6 words
                             5636 ; 68   |typedef struct UINT128_3500 {   
                             5637 ; 69   |    int val[6];     
                             5638 ; 70   |} UINT128_3500;
                             5639 ; 71   |
                             5640 ; 72   |#define UINT128   UINT128_3500
                             5641 ; 73   |
                             5642 ; 74   |// Little endian word packed byte strings:   
                             5643 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5644 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5645 ; 77   |// Little endian word packed byte strings:   
                             5646 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5647 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5648 ; 80   |
                             5649 ; 81   |// Declare Memory Spaces To Use When Coding
                             5650 ; 82   |// A. Sector Buffers
                             5651 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5652 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5653 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5654 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5655 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5656 ; 88   |// B. Media DDI Memory
                             5657 ; 89   |#define MEDIA_DDI_MEM _Y
                             5658 ; 90   |
                             5659 ; 91   |
                             5660 ; 92   |
                             5661 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5662 ; 94   |// Examples of circular pointers:
                             5663 ; 95   |//    INT CIRC cpiVarName
                             5664 ; 96   |//    DWORD CIRC cpdwVarName
                             5665 ; 97   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5666 ; 98   |#define RETCODE INT                 // rcVarName
                             5667 ; 99   |
                             5668 ; 100  |// generic bitfield structure
                             5669 ; 101  |struct Bitfield {
                             5670 ; 102  |    unsigned int B0  :1;
                             5671 ; 103  |    unsigned int B1  :1;
                             5672 ; 104  |    unsigned int B2  :1;
                             5673 ; 105  |    unsigned int B3  :1;
                             5674 ; 106  |    unsigned int B4  :1;
                             5675 ; 107  |    unsigned int B5  :1;
                             5676 ; 108  |    unsigned int B6  :1;
                             5677 ; 109  |    unsigned int B7  :1;
                             5678 ; 110  |    unsigned int B8  :1;
                             5679 ; 111  |    unsigned int B9  :1;
                             5680 ; 112  |    unsigned int B10 :1;
                             5681 ; 113  |    unsigned int B11 :1;
                             5682 ; 114  |    unsigned int B12 :1;
                             5683 ; 115  |    unsigned int B13 :1;
                             5684 ; 116  |    unsigned int B14 :1;
                             5685 ; 117  |    unsigned int B15 :1;
                             5686 ; 118  |    unsigned int B16 :1;
                             5687 ; 119  |    unsigned int B17 :1;
                             5688 ; 120  |    unsigned int B18 :1;
                             5689 ; 121  |    unsigned int B19 :1;
                             5690 ; 122  |    unsigned int B20 :1;
                             5691 ; 123  |    unsigned int B21 :1;
                             5692 ; 124  |    unsigned int B22 :1;
                             5693 ; 125  |    unsigned int B23 :1;
                             5694 ; 126  |};
                             5695 ; 127  |
                             5696 ; 128  |union BitInt {
                             5697 ; 129  |        struct Bitfield B;
                             5698 ; 130  |        int        I;
                             5699 ; 131  |};
                             5700 ; 132  |
                             5701 ; 133  |#define MAX_MSG_LENGTH 10
                             5702 ; 134  |struct CMessage
                             5703 ; 135  |{
                             5704 ; 136  |        unsigned int m_uLength;
                             5705 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5706 ; 138  |};
                             5707 ; 139  |
                             5708 ; 140  |typedef struct {
                             5709 ; 141  |    WORD m_wLength;
                             5710 ; 142  |    WORD m_wMessage;
                             5711 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5712 ; 144  |} Message;
                             5713 ; 145  |
                             5714 ; 146  |struct MessageQueueDescriptor
                             5715 ; 147  |{
                             5716 ; 148  |        int *m_pBase;
                             5717 ; 149  |        int m_iModulo;
                             5718 ; 150  |        int m_iSize;
                             5719 ; 151  |        int *m_pHead;
                             5720 ; 152  |        int *m_pTail;
                             5721 ; 153  |};
                             5722 ; 154  |
                             5723 ; 155  |struct ModuleEntry
                             5724 ; 156  |{
                             5725 ; 157  |    int m_iSignaledEventMask;
                             5726 ; 158  |    int m_iWaitEventMask;
                             5727 ; 159  |    int m_iResourceOfCode;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5728 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5729 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5730 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5731 ; 163  |    int m_uTimeOutHigh;
                             5732 ; 164  |    int m_uTimeOutLow;
                             5733 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5734 ; 166  |};
                             5735 ; 167  |
                             5736 ; 168  |union WaitMask{
                             5737 ; 169  |    struct B{
                             5738 ; 170  |        unsigned int m_bNone     :1;
                             5739 ; 171  |        unsigned int m_bMessage  :1;
                             5740 ; 172  |        unsigned int m_bTimer    :1;
                             5741 ; 173  |        unsigned int m_bButton   :1;
                             5742 ; 174  |    } B;
                             5743 ; 175  |    int I;
                             5744 ; 176  |} ;
                             5745 ; 177  |
                             5746 ; 178  |
                             5747 ; 179  |struct Button {
                             5748 ; 180  |        WORD wButtonEvent;
                             5749 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5750 ; 182  |};
                             5751 ; 183  |
                             5752 ; 184  |struct Message {
                             5753 ; 185  |        WORD wMsgLength;
                             5754 ; 186  |        WORD wMsgCommand;
                             5755 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5756 ; 188  |};
                             5757 ; 189  |
                             5758 ; 190  |union EventTypes {
                             5759 ; 191  |        struct CMessage msg;
                             5760 ; 192  |        struct Button Button ;
                             5761 ; 193  |        struct Message Message;
                             5762 ; 194  |};
                             5763 ; 195  |
                             5764 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5765 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5766 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5767 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5768 ; 200  |
                             5769 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5770 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5771 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5772 ; 204  |
                             5773 ; 205  |#if DEBUG
                             5774 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5775 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5776 ; 208  |#else 
                             5777 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5778 ; 210  |#define DebugBuildAssert(x)    
                             5779 ; 211  |#endif
                             5780 ; 212  |
                             5781 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5782 ; 214  |//  #pragma asm
                             5783 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5784 ; 216  |//  #pragma endasm
                             5785 ; 217  |
                             5786 ; 218  |
                             5787 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5788 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5789 ; 221  |#elif defined(COLOR_65K)
                             5790 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5791 ; 223  |#else
                             5792 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5793 ; 225  |#endif
                             5794 ; 226  |    
                             5795 ; 227  |#endif // #ifndef _TYPES_H
                             5796 
                             5798 
                             5799 ; 29   |
                             5800 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5801 ; 31   |////  I2S Registers (SAI)
                             5802 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5803 ; 33   |
                             5804 ; 34   |
                             5805 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5806 ; 36   |
                             5807 ; 37   |
                             5808 ; 38   |
                             5809 ; 39   |
                             5810 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5811 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5812 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5813 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5814 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5815 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5816 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5817 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5818 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5819 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5820 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5821 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5822 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5823 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5824 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5825 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5826 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5827 ; 57   |
                             5828 ; 58   |
                             5829 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5830 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5831 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5832 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5833 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5834 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5835 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5836 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5837 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5838 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5839 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5840 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5841 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5842 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5843 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5844 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5845 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5846 ; 76   |
                             5847 ; 77   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5848 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5849 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5850 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5851 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5852 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             5853 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5854 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5855 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5856 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             5857 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5858 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5859 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5860 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             5861 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5862 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5863 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             5864 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             5865 ; 95   |
                             5866 ; 96   |
                             5867 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5868 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5869 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5870 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5871 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5872 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5873 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5874 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5875 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5876 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5877 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5878 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5879 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5880 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5881 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5882 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5883 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5884 ; 114  |
                             5885 ; 115  |typedef union
                             5886 ; 116  |{
                             5887 ; 117  |    struct {
                             5888 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5889 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5890 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5891 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5892 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5893 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5894 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5895 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5896 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5897 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5898 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             5899 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5900 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5901 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5902 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5903 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5904 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5905 ; 135  |    } B;
                             5906 ; 136  |    int I;
                             5907 ; 137  |    unsigned U;
                             5908 ; 138  |} saircsr_type;
                             5909 ; 139  |
                             5910 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             5911 ; 141  |
                             5912 ; 142  |typedef union
                             5913 ; 143  |{
                             5914 ; 144  |    struct {
                             5915 ; 145  |        unsigned SAI :24;
                             5916 ; 146  |    } B;
                             5917 ; 147  |    int I;
                             5918 ; 148  |    unsigned U;
                             5919 ; 149  |} saixr_type;
                             5920 ; 150  |
                             5921 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             5922 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             5923 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                             5924 ; 154  |
                             5925 ; 155  |
                             5926 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5927 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5928 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5929 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5930 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5931 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5932 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5933 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5934 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5935 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5936 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5937 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5938 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5939 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5940 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5941 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5942 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5943 ; 173  |
                             5944 ; 174  |
                             5945 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5946 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5947 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5948 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5949 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5950 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5951 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5952 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5953 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5954 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5955 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5956 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5957 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5958 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5959 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5960 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5961 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5962 ; 192  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5963 ; 193  |
                             5964 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5965 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5966 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5967 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5968 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             5969 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5970 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5971 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             5972 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5973 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5974 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5975 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5976 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             5977 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5978 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5979 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             5980 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             5981 ; 211  |
                             5982 ; 212  |
                             5983 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5984 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5985 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5986 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5987 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5988 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5989 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5990 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5991 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5992 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5993 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5994 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5995 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5996 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5997 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5998 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5999 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             6000 ; 230  |
                             6001 ; 231  |
                             6002 ; 232  |typedef union
                             6003 ; 233  |{
                             6004 ; 234  |    struct {
                             6005 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             6006 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             6007 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             6008 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             6009 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             6010 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             6011 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             6012 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             6013 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             6014 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             6015 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             6016 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             6017 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             6018 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6019 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             6020 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             6021 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             6022 ; 252  |    } B;
                             6023 ; 253  |    int I;
                             6024 ; 254  |    unsigned U;
                             6025 ; 255  |} saitcsr_type;
                             6026 ; 256  |
                             6027 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
                             6028 ; 258  |
                             6029 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             6030 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             6031 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             6032 ; 262  |
                             6033 ; 263  |#endif
                             6034 
                             6036 
                             6037 ; 25   |#include "regsicoll.h"
                             6038 
                             6040 
                             6041 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             6042 ; 2    |#define __REGS_ICOLL_INC 1
                             6043 ; 3    |
                             6044 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             6045 ; 5    |//  Interrupt Collector Registers
                             6046 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             6047 ; 7    |
                             6048 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             6049 ; 9    |
                             6050 ; 10   |
                             6051 ; 11   |
                             6052 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             6053 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             6054 ; 14   |
                             6055 ; 15   |typedef union
                             6056 ; 16   |{
                             6057 ; 17   |    struct {
                             6058 ; 18   |        int SEN0        :1;
                             6059 ; 19   |        int SEN1        :1;
                             6060 ; 20   |        int SEN2        :1;
                             6061 ; 21   |        int SEN3        :1;
                             6062 ; 22   |        int SEN4        :1;
                             6063 ; 23   |        int SEN5        :1;
                             6064 ; 24   |        int SEN6        :1;
                             6065 ; 25   |        int SEN7        :1;
                             6066 ; 26   |        int SEN8        :1;
                             6067 ; 27   |        int SEN9        :1;
                             6068 ; 28   |        int SEN10       :1;
                             6069 ; 29   |        int SEN11       :1;
                             6070 ; 30   |        int SEN12       :1;
                             6071 ; 31   |        int SEN13       :1;
                             6072 ; 32   |        int SEN14       :1;
                             6073 ; 33   |        int SEN15       :1;
                             6074 ; 34   |        int SEN16       :1;
                             6075 ; 35   |        int SEN17       :1;
                             6076 ; 36   |        int SEN18       :1;
                             6077 ; 37   |        int SEN19       :1;
                             6078 ; 38   |        int SEN20       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6079 ; 39   |        int SEN21       :1;
                             6080 ; 40   |        int SEN22       :1;
                             6081 ; 41   |        int SEN23       :1;
                             6082 ; 42   |    } B;
                             6083 ; 43   |    int I;
                             6084 ; 44   |} iclenable0_type;
                             6085 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             6086 ; 46   |
                             6087 ; 47   |
                             6088 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             6089 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             6090 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             6091 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             6092 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             6093 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             6094 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             6095 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             6096 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             6097 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             6098 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             6099 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             6100 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             6101 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             6102 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             6103 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             6104 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             6105 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             6106 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             6107 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             6108 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             6109 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             6110 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             6111 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             6112 ; 72   |
                             6113 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             6114 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             6115 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             6116 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             6117 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             6118 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             6119 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             6120 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             6121 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             6122 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             6123 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             6124 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             6125 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             6126 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             6127 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             6128 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             6129 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             6130 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             6131 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             6132 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             6133 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             6134 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             6135 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             6136 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             6137 ; 97   |
                             6138 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             6139 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6140 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             6141 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             6142 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             6143 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             6144 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             6145 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             6146 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             6147 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             6148 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             6149 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             6150 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             6151 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             6152 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             6153 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             6154 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             6155 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             6156 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             6157 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             6158 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             6159 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             6160 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             6161 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             6162 ; 122  |
                             6163 ; 123  |
                             6164 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             6165 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             6166 ; 126  |typedef union
                             6167 ; 127  |{
                             6168 ; 128  |    struct {
                             6169 ; 129  |        
                             6170 ; 130  |        int SEN24       :1;
                             6171 ; 131  |        int SEN25       :1;
                             6172 ; 132  |        int SEN26       :1;
                             6173 ; 133  |        int SEN27       :1;
                             6174 ; 134  |        int SEN28       :1;
                             6175 ; 135  |        int SEN29       :1;
                             6176 ; 136  |        int SEN30       :1;
                             6177 ; 137  |        int SEN31       :1;
                             6178 ; 138  |        int SEN32       :1;
                             6179 ; 139  |        int SEN33       :1;
                             6180 ; 140  |    } B;
                             6181 ; 141  |    int I;
                             6182 ; 142  |} iclenable1_type;
                             6183 ; 143  |
                             6184 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             6185 ; 145  |
                             6186 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             6187 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             6188 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             6189 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             6190 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             6191 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             6192 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             6193 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             6194 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             6195 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             6196 ; 156  |
                             6197 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             6198 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             6199 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             6200 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6201 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             6202 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             6203 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             6204 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             6205 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             6206 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             6207 ; 167  |
                             6208 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             6209 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             6210 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             6211 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             6212 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             6213 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             6214 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             6215 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             6216 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             6217 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             6218 ; 178  |
                             6219 ; 179  |
                             6220 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             6221 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             6222 ; 182  |typedef union
                             6223 ; 183  |{
                             6224 ; 184  |    struct {
                             6225 ; 185  |        int SST0        :1;
                             6226 ; 186  |        int SST1        :1;
                             6227 ; 187  |        int SST2        :1;
                             6228 ; 188  |        int SST3        :1;
                             6229 ; 189  |        int SST4        :1;
                             6230 ; 190  |        int SST5        :1;
                             6231 ; 191  |        int SST6        :1;
                             6232 ; 192  |        int SST7        :1;
                             6233 ; 193  |        int SST8        :1;
                             6234 ; 194  |        int SST9        :1;
                             6235 ; 195  |        int SST10       :1;
                             6236 ; 196  |        int SST11       :1;
                             6237 ; 197  |        int SST12       :1;
                             6238 ; 198  |        int SST13       :1;
                             6239 ; 199  |        int SST14       :1;
                             6240 ; 200  |        int SST15       :1;
                             6241 ; 201  |        int SST16       :1;
                             6242 ; 202  |        int SST17       :1;
                             6243 ; 203  |        int SST18       :1;
                             6244 ; 204  |        int SST19       :1;
                             6245 ; 205  |        int SST20       :1;
                             6246 ; 206  |        int SST21       :1;
                             6247 ; 207  |        int SST22       :1;
                             6248 ; 208  |        int SST23       :1;
                             6249 ; 209  |    } B;
                             6250 ; 210  |    int I;
                             6251 ; 211  |} iclstatus0_type;
                             6252 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             6253 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             6254 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             6255 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             6256 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             6257 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             6258 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             6259 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             6260 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             6261 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6262 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             6263 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             6264 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             6265 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             6266 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             6267 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             6268 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             6269 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             6270 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             6271 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             6272 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             6273 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             6274 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             6275 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             6276 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             6277 ; 237  |
                             6278 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             6279 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             6280 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             6281 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             6282 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             6283 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             6284 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             6285 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             6286 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             6287 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             6288 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             6289 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             6290 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             6291 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             6292 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             6293 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             6294 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             6295 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             6296 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             6297 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             6298 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             6299 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             6300 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             6301 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             6302 ; 262  |
                             6303 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             6304 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             6305 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             6306 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             6307 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             6308 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             6309 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             6310 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             6311 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             6312 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             6313 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             6314 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             6315 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             6316 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             6317 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             6318 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             6319 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             6320 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             6321 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             6322 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             6323 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6324 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             6325 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             6326 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             6327 ; 287  |
                             6328 ; 288  |
                             6329 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             6330 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             6331 ; 291  |typedef union
                             6332 ; 292  |{
                             6333 ; 293  |    struct {
                             6334 ; 294  |        int SST24       :1;
                             6335 ; 295  |        int SST25       :1;
                             6336 ; 296  |        int SST26       :1;
                             6337 ; 297  |        int SST27       :1;
                             6338 ; 298  |        int SST28       :1;
                             6339 ; 299  |        int SST29       :1;
                             6340 ; 300  |        int SST30       :1;
                             6341 ; 301  |        int SST31       :1;
                             6342 ; 302  |        int SST32       :1;
                             6343 ; 303  |        int SST33       :1;
                             6344 ; 304  |    } B;
                             6345 ; 305  |    int I;
                             6346 ; 306  |} iclstatus1_type;
                             6347 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             6348 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             6349 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             6350 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             6351 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             6352 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             6353 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             6354 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             6355 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             6356 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             6357 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             6358 ; 318  |
                             6359 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             6360 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             6361 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             6362 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             6363 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             6364 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             6365 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             6366 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             6367 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             6368 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             6369 ; 329  |
                             6370 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             6371 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             6372 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             6373 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             6374 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             6375 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             6376 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             6377 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             6378 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             6379 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             6380 ; 340  |
                             6381 ; 341  |
                             6382 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             6383 ; 343  |//  Interrupt Collector Priority Defs
                             6384 ; 344  |typedef union
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6385 ; 345  |{
                             6386 ; 346  |    struct {
                             6387 ; 347  |        unsigned S0P    :3;
                             6388 ; 348  |        unsigned S1P    :3;
                             6389 ; 349  |        unsigned S2P    :3;
                             6390 ; 350  |        unsigned S3P    :3;
                             6391 ; 351  |        unsigned S4P    :3;
                             6392 ; 352  |        unsigned S5P    :3;
                             6393 ; 353  |        unsigned S6P    :3;
                             6394 ; 354  |        unsigned S7P    :3;
                             6395 ; 355  |    } B;
                             6396 ; 356  |    int I;
                             6397 ; 357  |
                             6398 ; 358  |} iclprior0_type;
                             6399 ; 359  |
                             6400 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             6401 ; 361  |
                             6402 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             6403 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             6404 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             6405 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             6406 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             6407 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             6408 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             6409 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             6410 ; 370  |
                             6411 ; 371  |
                             6412 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             6413 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             6414 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             6415 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             6416 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             6417 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             6418 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             6419 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             6420 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             6421 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             6422 ; 382  |
                             6423 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             6424 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             6425 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             6426 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             6427 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             6428 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             6429 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             6430 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             6431 ; 391  |
                             6432 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             6433 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             6434 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             6435 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             6436 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             6437 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             6438 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             6439 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             6440 ; 400  |
                             6441 ; 401  |
                             6442 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             6443 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             6444 ; 404  |typedef union
                             6445 ; 405  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6446 ; 406  |    struct {
                             6447 ; 407  |        unsigned S8P    :3;
                             6448 ; 408  |        unsigned S9P    :3;
                             6449 ; 409  |        unsigned S10P   :3;
                             6450 ; 410  |        unsigned S11P   :3;
                             6451 ; 411  |        unsigned S12P   :3;
                             6452 ; 412  |        unsigned S13P   :3;
                             6453 ; 413  |        unsigned S14P   :3;
                             6454 ; 414  |        unsigned S15P   :3;
                             6455 ; 415  |    } B;
                             6456 ; 416  |    int I;
                             6457 ; 417  |} iclprior1_type;
                             6458 ; 418  |
                             6459 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             6460 ; 420  |
                             6461 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             6462 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             6463 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             6464 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             6465 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             6466 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             6467 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             6468 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             6469 ; 429  |
                             6470 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             6471 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             6472 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             6473 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             6474 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             6475 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             6476 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             6477 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             6478 ; 438  |
                             6479 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             6480 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             6481 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             6482 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             6483 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             6484 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             6485 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             6486 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             6487 ; 447  |
                             6488 ; 448  |
                             6489 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             6490 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             6491 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             6492 ; 452  |{
                             6493 ; 453  |    struct {
                             6494 ; 454  |        unsigned S16P   :3;
                             6495 ; 455  |        unsigned S17P   :3;
                             6496 ; 456  |        unsigned S18P   :3;
                             6497 ; 457  |        unsigned S19P   :3;
                             6498 ; 458  |        unsigned S20P   :3;
                             6499 ; 459  |        unsigned S21P   :3;
                             6500 ; 460  |        unsigned S22P   :3;
                             6501 ; 461  |        unsigned S23P   :3;
                             6502 ; 462  |    } B;
                             6503 ; 463  |    int I;
                             6504 ; 464  |} iclprior2_type;
                             6505 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6506 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             6507 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             6508 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             6509 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             6510 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             6511 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             6512 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             6513 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             6514 ; 474  |
                             6515 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             6516 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             6517 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             6518 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             6519 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             6520 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             6521 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             6522 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             6523 ; 483  |
                             6524 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             6525 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             6526 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             6527 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             6528 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             6529 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             6530 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             6531 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             6532 ; 492  |
                             6533 ; 493  |
                             6534 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             6535 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             6536 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6537 ; 497  |{
                             6538 ; 498  |    struct {
                             6539 ; 499  |        unsigned S24P   :3;
                             6540 ; 500  |        unsigned S25P   :3;
                             6541 ; 501  |        unsigned S26P   :3;
                             6542 ; 502  |        unsigned S27P   :3;
                             6543 ; 503  |        unsigned S28P   :3;
                             6544 ; 504  |        unsigned S29P   :3;
                             6545 ; 505  |        unsigned S30P   :3;
                             6546 ; 506  |        unsigned S31P   :3;
                             6547 ; 507  |    } B;
                             6548 ; 508  |    int I;
                             6549 ; 509  |} iclprior3_type;
                             6550 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             6551 ; 511  |
                             6552 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             6553 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             6554 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             6555 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             6556 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             6557 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             6558 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             6559 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             6560 ; 520  |
                             6561 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             6562 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             6563 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             6564 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             6565 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             6566 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6567 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             6568 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             6569 ; 529  |
                             6570 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             6571 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             6572 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             6573 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             6574 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             6575 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             6576 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             6577 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             6578 ; 538  |
                             6579 ; 539  |
                             6580 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             6581 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             6582 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6583 ; 543  |{
                             6584 ; 544  |    struct {
                             6585 ; 545  |        unsigned S32P   :3;
                             6586 ; 546  |        unsigned S33P   :3;
                             6587 ; 547  |    } B;
                             6588 ; 548  |    int I;
                             6589 ; 549  |} iclprior4_type;
                             6590 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             6591 ; 551  |
                             6592 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             6593 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             6594 ; 554  |
                             6595 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             6596 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             6597 ; 557  |
                             6598 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             6599 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             6600 ; 560  |
                             6601 ; 561  |
                             6602 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             6603 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6604 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             6605 ; 565  |{
                             6606 ; 566  |    struct {
                             6607 ; 567  |        unsigned S0S    :2;
                             6608 ; 568  |        unsigned S1S    :2;
                             6609 ; 569  |        unsigned S2S    :2;
                             6610 ; 570  |        unsigned S3S    :2;
                             6611 ; 571  |        unsigned S4S    :2;
                             6612 ; 572  |        unsigned S5S    :2;
                             6613 ; 573  |        unsigned S6S    :2;
                             6614 ; 574  |        unsigned S7S    :2;
                             6615 ; 575  |        unsigned S8S    :2;
                             6616 ; 576  |        unsigned S9S    :2;
                             6617 ; 577  |        unsigned S10S   :2;
                             6618 ; 578  |        unsigned S11S   :2;
                             6619 ; 579  |    } B;
                             6620 ; 580  |    int I;
                             6621 ; 581  |} iclsteer0_type;
                             6622 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             6623 ; 583  |
                             6624 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             6625 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             6626 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6627 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             6628 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             6629 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             6630 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             6631 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             6632 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             6633 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             6634 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             6635 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             6636 ; 596  |
                             6637 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             6638 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             6639 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             6640 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             6641 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             6642 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             6643 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             6644 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             6645 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             6646 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             6647 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             6648 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             6649 ; 609  |
                             6650 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             6651 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             6652 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             6653 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             6654 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             6655 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             6656 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             6657 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             6658 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             6659 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             6660 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             6661 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             6662 ; 622  |
                             6663 ; 623  |
                             6664 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             6665 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             6666 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             6667 ; 627  |{
                             6668 ; 628  |    struct {
                             6669 ; 629  |        unsigned S12S   :2;
                             6670 ; 630  |        unsigned S13S   :2;
                             6671 ; 631  |        unsigned S14S   :2;
                             6672 ; 632  |        unsigned S15S   :2;
                             6673 ; 633  |        unsigned S16S   :2;
                             6674 ; 634  |        unsigned S17S   :2;
                             6675 ; 635  |        unsigned S18S   :2;
                             6676 ; 636  |        unsigned S19S   :2;
                             6677 ; 637  |        unsigned S20S   :2;
                             6678 ; 638  |        unsigned S21S   :2;
                             6679 ; 639  |        unsigned S22S   :2;
                             6680 ; 640  |        unsigned S23S   :2;
                             6681 ; 641  |    } B;
                             6682 ; 642  |    int I;
                             6683 ; 643  |} iclsteer1_type;
                             6684 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             6685 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             6686 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             6687 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6688 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             6689 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             6690 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             6691 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             6692 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             6693 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             6694 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             6695 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             6696 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             6697 ; 657  |
                             6698 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             6699 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             6700 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             6701 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             6702 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             6703 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             6704 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             6705 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             6706 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             6707 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             6708 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             6709 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             6710 ; 670  |
                             6711 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             6712 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             6713 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             6714 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             6715 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             6716 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             6717 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             6718 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             6719 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             6720 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             6721 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             6722 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             6723 ; 683  |
                             6724 ; 684  |
                             6725 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             6726 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             6727 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             6728 ; 688  |{
                             6729 ; 689  |    struct {
                             6730 ; 690  |        unsigned S24S   :2;
                             6731 ; 691  |        unsigned S25S   :2;
                             6732 ; 692  |        unsigned S26S   :2;
                             6733 ; 693  |        unsigned S27S   :2;
                             6734 ; 694  |        unsigned S28S   :2;
                             6735 ; 695  |        unsigned S29S   :2;
                             6736 ; 696  |        unsigned S30S   :2;
                             6737 ; 697  |        unsigned S31S   :2;
                             6738 ; 698  |        unsigned S32S   :2;
                             6739 ; 699  |        unsigned S33S   :2;
                             6740 ; 700  |    } B;
                             6741 ; 701  |    int I;
                             6742 ; 702  |} iclsteer2_type;
                             6743 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             6744 ; 704  |
                             6745 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             6746 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             6747 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             6748 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6749 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             6750 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             6751 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             6752 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             6753 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             6754 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             6755 ; 715  |
                             6756 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             6757 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             6758 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             6759 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             6760 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             6761 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             6762 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             6763 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             6764 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             6765 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             6766 ; 726  |
                             6767 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             6768 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             6769 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             6770 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             6771 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             6772 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             6773 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             6774 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             6775 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             6776 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             6777 ; 737  |
                             6778 ; 738  |
                             6779 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             6780 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6781 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6782 ; 742  |{
                             6783 ; 743  |    struct {
                             6784 ; 744  |        int S0FV        :1;
                             6785 ; 745  |        int S1FV        :1;
                             6786 ; 746  |        int S2FV        :1;
                             6787 ; 747  |        int S3FV        :1;
                             6788 ; 748  |        int S4FV        :1;
                             6789 ; 749  |        int S5FV        :1;
                             6790 ; 750  |        int S6FV        :1;
                             6791 ; 751  |        int S7FV        :1;
                             6792 ; 752  |        int S8FV        :1;
                             6793 ; 753  |        int S9FV        :1;
                             6794 ; 754  |        int S10FV       :1;
                             6795 ; 755  |        int S11FV       :1;
                             6796 ; 756  |        int S12FV       :1;
                             6797 ; 757  |        int S13FV       :1;
                             6798 ; 758  |        int S14FV       :1;
                             6799 ; 759  |        int S15FV       :1;
                             6800 ; 760  |        int S16FV       :1;
                             6801 ; 761  |        int S17FV       :1;
                             6802 ; 762  |        int S18FV       :1;
                             6803 ; 763  |        int S19FV       :1;
                             6804 ; 764  |        int S20FV       :1;
                             6805 ; 765  |        int S21FV       :1;
                             6806 ; 766  |        int S22FV       :1;
                             6807 ; 767  |        int S23FV       :1;
                             6808 ; 768  |    } B;
                             6809 ; 769  |    int I;
                             6810 ; 770  |} iclforce0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6811 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             6812 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6813 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6814 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6815 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6816 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6817 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6818 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6819 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             6820 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6821 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6822 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6823 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6824 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6825 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6826 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6827 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6828 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6829 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6830 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6831 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6832 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6833 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6834 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6835 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6836 ; 796  |
                             6837 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6838 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6839 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6840 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6841 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6842 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6843 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6844 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6845 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6846 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6847 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6848 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6849 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6850 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6851 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6852 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6853 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6854 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6855 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6856 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6857 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6858 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6859 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6860 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6861 ; 821  |
                             6862 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6863 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6864 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6865 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6866 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6867 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6868 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6869 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6870 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6871 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6872 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6873 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6874 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6875 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6876 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6877 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6878 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6879 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6880 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6881 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             6882 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6883 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6884 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6885 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6886 ; 846  |
                             6887 ; 847  |
                             6888 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6889 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6890 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6891 ; 851  |{
                             6892 ; 852  |    struct {
                             6893 ; 853  |        int S24FV       :1;
                             6894 ; 854  |        int S25FV       :1;
                             6895 ; 855  |        int S26FV       :1;
                             6896 ; 856  |        int S27FV       :1;
                             6897 ; 857  |        int S28FV       :1;
                             6898 ; 858  |        int S29FV       :1;
                             6899 ; 859  |        int S30FV       :1;
                             6900 ; 860  |        int S31FV       :1;
                             6901 ; 861  |        int S32FV       :1;
                             6902 ; 862  |        int S33FV       :1;
                             6903 ; 863  |    } B;
                             6904 ; 864  |    int I;
                             6905 ; 865  |} iclforce1_type;
                             6906 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             6907 ; 867  |
                             6908 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6909 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6910 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6911 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6912 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6913 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6914 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6915 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6916 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6917 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6918 ; 878  |
                             6919 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6920 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6921 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6922 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6923 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6924 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6925 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6926 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6927 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6928 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6929 ; 889  |
                             6930 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6931 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6932 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6933 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6934 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6935 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6936 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6937 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6938 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6939 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6940 ; 900  |
                             6941 ; 901  |
                             6942 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             6943 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6944 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6945 ; 905  |{
                             6946 ; 906  |    struct {
                             6947 ; 907  |        int S0FE        :1;
                             6948 ; 908  |        int S1FE        :1;
                             6949 ; 909  |        int S2FE        :1;
                             6950 ; 910  |        int S3FE        :1;
                             6951 ; 911  |        int S4FE        :1;
                             6952 ; 912  |        int S5FE        :1;
                             6953 ; 913  |        int S6FE        :1;
                             6954 ; 914  |        int S7FE        :1;
                             6955 ; 915  |        int S8FE        :1;
                             6956 ; 916  |        int S9FE        :1;
                             6957 ; 917  |        int S10FE       :1;
                             6958 ; 918  |        int S11FE       :1;
                             6959 ; 919  |        int S12FE       :1;
                             6960 ; 920  |        int S13FE       :1;
                             6961 ; 921  |        int S14FE       :1;
                             6962 ; 922  |        int S15FE       :1;
                             6963 ; 923  |        int S16FE       :1;
                             6964 ; 924  |        int S17FE       :1;
                             6965 ; 925  |        int S18FE       :1;
                             6966 ; 926  |        int S19FE       :1;
                             6967 ; 927  |        int S20FE       :1;
                             6968 ; 928  |        int S21FE       :1;
                             6969 ; 929  |        int S22FE       :1;
                             6970 ; 930  |        int S23FE       :1;
                             6971 ; 931  |    } B;
                             6972 ; 932  |    int I;
                             6973 ; 933  |} iclfenable0_type;
                             6974 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             6975 ; 935  |
                             6976 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6977 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6978 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6979 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6980 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6981 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6982 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6983 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6984 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6985 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6986 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6987 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6988 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6989 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6990 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6991 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6992 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6993 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6994 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6995 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6996 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6997 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6998 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6999 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             7000 ; 960  |
                             7001 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             7002 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             7003 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             7004 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             7005 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             7006 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             7007 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             7008 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             7009 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             7010 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             7011 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             7012 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             7013 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             7014 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             7015 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             7016 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             7017 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             7018 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             7019 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             7020 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             7021 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             7022 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             7023 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             7024 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             7025 ; 985  |
                             7026 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             7027 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             7028 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             7029 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             7030 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             7031 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             7032 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             7033 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             7034 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             7035 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             7036 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             7037 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             7038 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             7039 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             7040 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             7041 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             7042 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             7043 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             7044 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             7045 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             7046 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             7047 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             7048 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             7049 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             7050 ; 1010 |
                             7051 ; 1011 |
                             7052 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             7053 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             7054 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             7055 ; 1015 |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7056 ; 1016 |    struct {
                             7057 ; 1017 |        int S24FE       :1;
                             7058 ; 1018 |        int S25FE       :1;
                             7059 ; 1019 |        int S26FE       :1;
                             7060 ; 1020 |        int S27FE       :1;
                             7061 ; 1021 |        int S28FE       :1;
                             7062 ; 1022 |        int S29FE       :1;
                             7063 ; 1023 |        int S30FE       :1;
                             7064 ; 1024 |        int S31FE       :1;
                             7065 ; 1025 |        int S32FE       :1;
                             7066 ; 1026 |        int S33FE       :1;
                             7067 ; 1027 |    } B;
                             7068 ; 1028 |    int I;
                             7069 ; 1029 |} iclfenable1_type;
                             7070 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             7071 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             7072 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             7073 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             7074 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             7075 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             7076 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             7077 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             7078 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             7079 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             7080 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             7081 ; 1041 |
                             7082 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             7083 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             7084 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             7085 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             7086 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             7087 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             7088 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             7089 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             7090 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             7091 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             7092 ; 1052 |
                             7093 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             7094 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             7095 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             7096 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             7097 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             7098 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             7099 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             7100 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             7101 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             7102 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             7103 ; 1063 |
                             7104 ; 1064 |
                             7105 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             7106 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             7107 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             7108 ; 1068 |{
                             7109 ; 1069 |    struct {
                             7110 ; 1070 |        unsigned RQ     :7;
                             7111 ; 1071 |        unsigned IVA    :7;
                             7112 ; 1072 |        unsigned IVB    :7;
                             7113 ; 1073 |    } B;
                             7114 ; 1074 |    int I;
                             7115 ; 1075 |} iclobsvz0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7116 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             7117 ; 1077 |
                             7118 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             7119 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             7120 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             7121 ; 1081 |
                             7122 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             7123 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             7124 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             7125 ; 1085 |
                             7126 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             7127 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             7128 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             7129 ; 1089 |
                             7130 ; 1090 |
                             7131 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             7132 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             7133 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             7134 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             7135 ; 1095 |
                             7136 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             7137 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             7138 ; 1098 |
                             7139 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             7140 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             7141 ; 1101 |
                             7142 ; 1102 |
                             7143 ; 1103 |
                             7144 ; 1104 |
                             7145 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             7146 ; 1106 |//  Interrupt Vectors
                             7147 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             7148 ; 1108 |// Reset Vector
                             7149 ; 1109 |#define HW_IVECRESET 0x0000           
                             7150 ; 1110 |// Stack Error
                             7151 ; 1111 |#define HW_IVECSTERR 0x0002           
                             7152 ; 1112 |// Trace
                             7153 ; 1113 |#define HW_IVECTRAC 0x0004           
                             7154 ; 1114 |// SWI
                             7155 ; 1115 |#define HW_IVECSWI 0x0006           
                             7156 ; 1116 |// ~IRQA
                             7157 ; 1117 |#define HW_IVECIRQA 0x0008           
                             7158 ; 1118 |// ~IRQB - BROWNOUT
                             7159 ; 1119 |#define HW_IVECIRQB 0x000A           
                             7160 ; 1120 |// Fatal Error
                             7161 ; 1121 |#define HW_IVECERROR 0x000C           
                             7162 ; 1122 |// SPI
                             7163 ; 1123 |#define HW_IVECSPI 0x000E           
                             7164 ; 1124 |// I2S TX Data Empty
                             7165 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             7166 ; 1126 |// I2S TX Underflow
                             7167 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             7168 ; 1128 |// I2S RX Data Full
                             7169 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             7170 ; 1130 |// I2S RX Overflow
                             7171 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             7172 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             7173 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7174 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             7175 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             7176 ; 1136 |// GPIO1
                             7177 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             7178 ; 1138 |// GPIO2
                             7179 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             7180 ; 1140 |// GPIO0
                             7181 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             7182 ; 1142 |// TIMER0
                             7183 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             7184 ; 1144 |// TIMER1
                             7185 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             7186 ; 1146 |// TIMER2
                             7187 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             7188 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             7189 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             7190 ; 1150 |// I2C RX Data Ready
                             7191 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             7192 ; 1152 |// I2C RX Overflow
                             7193 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             7194 ; 1154 |// I2C TX Data Empty
                             7195 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             7196 ; 1156 |// I2C TX Underflow
                             7197 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             7198 ; 1158 |// Illegal Instruction
                             7199 ; 1159 |#define HW_IVECILI 0x0038           
                             7200 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             7201 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             7202 ; 1162 |#define HW_IVECDACE 0x003C           
                             7203 ; 1163 |// DAC Underflow ISR
                             7204 ; 1164 |#define HW_IVECDACUF 0x003E           
                             7205 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             7206 ; 1166 |// ADC Full ISR
                             7207 ; 1167 |#define HW_IVECADCF 0x0042           
                             7208 ; 1168 |// ADC Overflow ISR
                             7209 ; 1169 |#define HW_IVECADCOF 0x0044           
                             7210 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             7211 ; 1171 |// TIMER3
                             7212 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             7213 ; 1173 |// GPIO3
                             7214 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             7215 ; 1175 |// SDRAM
                             7216 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             7217 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             7218 ; 1178 |// 5 volt power connected
                             7219 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             7220 ; 1180 |// USB Controller
                             7221 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             7222 ; 1182 |// USB Wakeup 
                             7223 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             7224 ; 1184 |// 5 volt power disconnected
                             7225 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             7226 ; 1186 |// enhanced SPI
                             7227 ; 1187 |#define HW_IVECESPI 0x0058           
                             7228 ; 1188 |// filter coprocessor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7229 ; 1189 |#define HW_IVECFILCO 0x005A           
                             7230 ; 1190 |// low res ADC #1
                             7231 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             7232 ; 1192 |// real time clock alarm
                             7233 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             7234 ; 1194 |// low res ADC #2
                             7235 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             7236 ; 1196 |// flash hardware ECC
                             7237 ; 1197 |#define HW_IVECHWECC 0x0062           
                             7238 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             7239 ; 1199 |// CDSYNC Interrupt
                             7240 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             7241 ; 1201 |// CDSYNC Exception
                             7242 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             7243 ; 1203 |// RS
                             7244 ; 1204 |#define HW_IVECRS 0x006A           
                             7245 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             7246 ; 1206 |// Flash Done ISR
                             7247 ; 1207 |#define HW_IVECFD 0x006E           
                             7248 ; 1208 |// CompactFlash ISR
                             7249 ; 1209 |#define HW_IVECCF 0x0070           
                             7250 ; 1210 |// SmartMedia Timeout ISR
                             7251 ; 1211 |#define HW_IVECSMTO 0x0072           
                             7252 ; 1212 |// SmartMedia Invalid Programming
                             7253 ; 1213 |#define HW_IVECSMIP 0x0074           
                             7254 ; 1214 |// CompactFlash No Card ISR
                             7255 ; 1215 |#define HW_IVECCFNC 0x0076           
                             7256 ; 1216 |// CompactFlash Status Change ISR
                             7257 ; 1217 |#define HW_IVECCFSC 0x0078           
                             7258 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             7259 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             7260 ; 1220 |// CDI
                             7261 ; 1221 |#define HW_IVECCDI 0x007E           
                             7262 ; 1222 |
                             7263 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             7264 ; 1224 |//  Interrupt Vectors
                             7265 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             7266 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             7267 ; 1227 |#define VECTOR(address,isr) \ 
                             7268 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             7269 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             7270 ; 1230 |
                             7271 ; 1231 |
                             7272 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             7273 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             7274 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             7275 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             7276 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             7277 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             7278 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             7279 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             7280 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             7281 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             7282 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             7283 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             7284 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             7285 ; 1245 |
                             7286 ; 1246 |// Interrupt Disabled
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7287 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             7288 ; 1248 |// Interrupt Priority Level 0
                             7289 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             7290 ; 1250 |// Interrupt Priority Level 1
                             7291 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             7292 ; 1252 |// Interrupt Priority Level 2
                             7293 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             7294 ; 1254 |
                             7295 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             7296 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             7297 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             7298 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             7299 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             7300 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             7301 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             7302 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             7303 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             7304 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             7305 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             7306 ; 1266 |
                             7307 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             7308 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             7309 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             7310 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             7311 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             7312 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             7313 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             7314 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             7315 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             7316 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             7317 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             7318 ; 1278 |
                             7319 ; 1279 |// Interrupt Priority register
                             7320 ; 1280 |typedef union               
                             7321 ; 1281 |{
                             7322 ; 1282 |    struct {
                             7323 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             7324 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             7325 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             7326 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             7327 ; 1287 |        int                 :4; /* Reserved */
                             7328 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             7329 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             7330 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             7331 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             7332 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             7333 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             7334 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             7335 ; 1295 |    } B;
                             7336 ; 1296 |
                             7337 ; 1297 |    int I;
                             7338 ; 1298 |
                             7339 ; 1299 |} ipr_type;
                             7340 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             7341 ; 1301 |
                             7342 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7343 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7344 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             7345 ; 1305 |
                             7346 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7347 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             7348 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             7349 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             7350 ; 1310 |
                             7351 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             7352 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             7353 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             7354 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             7355 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             7356 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             7357 ; 1317 |
                             7358 ; 1318 |#endif
                             7359 ; 1319 |
                             7360 
                             7362 
                             7363 ; 26   |#include "regslradc.h"
                             7364 
                             7366 
                             7367 ; 1    |#if !(defined(regslradcinc))
                             7368 ; 2    |
                             7369 ; 3    |#define regslradcinc 1
                             7370 ; 4    |
                             7371 ; 5    |#include "types.h"
                             7372 
                             7374 
                             7375 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7376 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7377 ; 3    |//
                             7378 ; 4    |// Filename: types.h
                             7379 ; 5    |// Description: Standard data types
                             7380 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7381 ; 7    |
                             7382 ; 8    |#ifndef _TYPES_H
                             7383 ; 9    |#define _TYPES_H
                             7384 ; 10   |
                             7385 ; 11   |// TODO:  move this outta here!
                             7386 ; 12   |#if !defined(NOERROR)
                             7387 ; 13   |#define NOERROR 0
                             7388 ; 14   |#define SUCCESS 0
                             7389 ; 15   |#endif 
                             7390 ; 16   |#if !defined(SUCCESS)
                             7391 ; 17   |#define SUCCESS  0
                             7392 ; 18   |#endif
                             7393 ; 19   |#if !defined(ERROR)
                             7394 ; 20   |#define ERROR   -1
                             7395 ; 21   |#endif
                             7396 ; 22   |#if !defined(FALSE)
                             7397 ; 23   |#define FALSE 0
                             7398 ; 24   |#endif
                             7399 ; 25   |#if !defined(TRUE)
                             7400 ; 26   |#define TRUE  1
                             7401 ; 27   |#endif
                             7402 ; 28   |
                             7403 ; 29   |#if !defined(NULL)
                             7404 ; 30   |#define NULL 0
                             7405 ; 31   |#endif
                             7406 ; 32   |
                             7407 ; 33   |#define MAX_INT     0x7FFFFF
                             7408 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7409 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7410 ; 36   |#define MAX_ULONG   (-1) 
                             7411 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7412 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7413 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7414 ; 40   |
                             7415 ; 41   |
                             7416 ; 42   |#define BYTE    unsigned char       // btVarName
                             7417 ; 43   |#define CHAR    signed char         // cVarName
                             7418 ; 44   |#define USHORT  unsigned short      // usVarName
                             7419 ; 45   |#define SHORT   unsigned short      // sVarName
                             7420 ; 46   |#define WORD    unsigned int        // wVarName
                             7421 ; 47   |#define INT     signed int          // iVarName
                             7422 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7423 ; 49   |#define LONG    signed long         // lVarName
                             7424 ; 50   |#define BOOL    unsigned int        // bVarName
                             7425 ; 51   |#define FRACT   _fract              // frVarName
                             7426 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7427 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7428 ; 54   |#define FLOAT   float               // fVarName
                             7429 ; 55   |#define DBL     double              // dVarName
                             7430 ; 56   |#define ENUM    enum                // eVarName
                             7431 ; 57   |#define CMX     _complex            // cmxVarName
                             7432 ; 58   |typedef WORD UCS3;                   // 
                             7433 ; 59   |
                             7434 ; 60   |#define UINT16  unsigned short
                             7435 ; 61   |#define UINT8   unsigned char   
                             7436 ; 62   |#define UINT32  unsigned long
                             7437 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7438 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7439 ; 65   |#define WCHAR   UINT16
                             7440 ; 66   |
                             7441 ; 67   |//UINT128 is 16 bytes or 6 words
                             7442 ; 68   |typedef struct UINT128_3500 {   
                             7443 ; 69   |    int val[6];     
                             7444 ; 70   |} UINT128_3500;
                             7445 ; 71   |
                             7446 ; 72   |#define UINT128   UINT128_3500
                             7447 ; 73   |
                             7448 ; 74   |// Little endian word packed byte strings:   
                             7449 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7450 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7451 ; 77   |// Little endian word packed byte strings:   
                             7452 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7453 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7454 ; 80   |
                             7455 ; 81   |// Declare Memory Spaces To Use When Coding
                             7456 ; 82   |// A. Sector Buffers
                             7457 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7458 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7459 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7460 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7461 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7462 ; 88   |// B. Media DDI Memory
                             7463 ; 89   |#define MEDIA_DDI_MEM _Y
                             7464 ; 90   |
                             7465 ; 91   |
                             7466 ; 92   |
                             7467 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7468 ; 94   |// Examples of circular pointers:
                             7469 ; 95   |//    INT CIRC cpiVarName
                             7470 ; 96   |//    DWORD CIRC cpdwVarName
                             7471 ; 97   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7472 ; 98   |#define RETCODE INT                 // rcVarName
                             7473 ; 99   |
                             7474 ; 100  |// generic bitfield structure
                             7475 ; 101  |struct Bitfield {
                             7476 ; 102  |    unsigned int B0  :1;
                             7477 ; 103  |    unsigned int B1  :1;
                             7478 ; 104  |    unsigned int B2  :1;
                             7479 ; 105  |    unsigned int B3  :1;
                             7480 ; 106  |    unsigned int B4  :1;
                             7481 ; 107  |    unsigned int B5  :1;
                             7482 ; 108  |    unsigned int B6  :1;
                             7483 ; 109  |    unsigned int B7  :1;
                             7484 ; 110  |    unsigned int B8  :1;
                             7485 ; 111  |    unsigned int B9  :1;
                             7486 ; 112  |    unsigned int B10 :1;
                             7487 ; 113  |    unsigned int B11 :1;
                             7488 ; 114  |    unsigned int B12 :1;
                             7489 ; 115  |    unsigned int B13 :1;
                             7490 ; 116  |    unsigned int B14 :1;
                             7491 ; 117  |    unsigned int B15 :1;
                             7492 ; 118  |    unsigned int B16 :1;
                             7493 ; 119  |    unsigned int B17 :1;
                             7494 ; 120  |    unsigned int B18 :1;
                             7495 ; 121  |    unsigned int B19 :1;
                             7496 ; 122  |    unsigned int B20 :1;
                             7497 ; 123  |    unsigned int B21 :1;
                             7498 ; 124  |    unsigned int B22 :1;
                             7499 ; 125  |    unsigned int B23 :1;
                             7500 ; 126  |};
                             7501 ; 127  |
                             7502 ; 128  |union BitInt {
                             7503 ; 129  |        struct Bitfield B;
                             7504 ; 130  |        int        I;
                             7505 ; 131  |};
                             7506 ; 132  |
                             7507 ; 133  |#define MAX_MSG_LENGTH 10
                             7508 ; 134  |struct CMessage
                             7509 ; 135  |{
                             7510 ; 136  |        unsigned int m_uLength;
                             7511 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7512 ; 138  |};
                             7513 ; 139  |
                             7514 ; 140  |typedef struct {
                             7515 ; 141  |    WORD m_wLength;
                             7516 ; 142  |    WORD m_wMessage;
                             7517 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7518 ; 144  |} Message;
                             7519 ; 145  |
                             7520 ; 146  |struct MessageQueueDescriptor
                             7521 ; 147  |{
                             7522 ; 148  |        int *m_pBase;
                             7523 ; 149  |        int m_iModulo;
                             7524 ; 150  |        int m_iSize;
                             7525 ; 151  |        int *m_pHead;
                             7526 ; 152  |        int *m_pTail;
                             7527 ; 153  |};
                             7528 ; 154  |
                             7529 ; 155  |struct ModuleEntry
                             7530 ; 156  |{
                             7531 ; 157  |    int m_iSignaledEventMask;
                             7532 ; 158  |    int m_iWaitEventMask;
                             7533 ; 159  |    int m_iResourceOfCode;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7534 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7535 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7536 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7537 ; 163  |    int m_uTimeOutHigh;
                             7538 ; 164  |    int m_uTimeOutLow;
                             7539 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7540 ; 166  |};
                             7541 ; 167  |
                             7542 ; 168  |union WaitMask{
                             7543 ; 169  |    struct B{
                             7544 ; 170  |        unsigned int m_bNone     :1;
                             7545 ; 171  |        unsigned int m_bMessage  :1;
                             7546 ; 172  |        unsigned int m_bTimer    :1;
                             7547 ; 173  |        unsigned int m_bButton   :1;
                             7548 ; 174  |    } B;
                             7549 ; 175  |    int I;
                             7550 ; 176  |} ;
                             7551 ; 177  |
                             7552 ; 178  |
                             7553 ; 179  |struct Button {
                             7554 ; 180  |        WORD wButtonEvent;
                             7555 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7556 ; 182  |};
                             7557 ; 183  |
                             7558 ; 184  |struct Message {
                             7559 ; 185  |        WORD wMsgLength;
                             7560 ; 186  |        WORD wMsgCommand;
                             7561 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7562 ; 188  |};
                             7563 ; 189  |
                             7564 ; 190  |union EventTypes {
                             7565 ; 191  |        struct CMessage msg;
                             7566 ; 192  |        struct Button Button ;
                             7567 ; 193  |        struct Message Message;
                             7568 ; 194  |};
                             7569 ; 195  |
                             7570 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7571 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7572 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7573 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7574 ; 200  |
                             7575 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7576 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7577 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7578 ; 204  |
                             7579 ; 205  |#if DEBUG
                             7580 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7581 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7582 ; 208  |#else 
                             7583 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7584 ; 210  |#define DebugBuildAssert(x)    
                             7585 ; 211  |#endif
                             7586 ; 212  |
                             7587 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7588 ; 214  |//  #pragma asm
                             7589 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7590 ; 216  |//  #pragma endasm
                             7591 ; 217  |
                             7592 ; 218  |
                             7593 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7594 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7595 ; 221  |#elif defined(COLOR_65K)
                             7596 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7597 ; 223  |#else
                             7598 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7599 ; 225  |#endif
                             7600 ; 226  |    
                             7601 ; 227  |#endif // #ifndef _TYPES_H
                             7602 
                             7604 
                             7605 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7606 ; 7    |
                             7607 ; 8    |//   SYSTEM STMP Registers 
                             7608 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             7609 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7610 ; 11   |
                             7611 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             7612 ; 13   |
                             7613 ; 14   |
                             7614 ; 15   |
                             7615 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             7616 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             7617 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             7618 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             7619 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7620 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             7621 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             7622 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             7623 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             7624 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             7625 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             7626 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             7627 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             7628 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             7629 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             7630 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             7631 ; 32   |
                             7632 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             7633 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7634 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             7635 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             7636 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             7637 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             7638 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             7639 ; 40   |
                             7640 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             7641 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             7642 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             7643 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             7644 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             7645 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             7646 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7647 ; 48   |
                             7648 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             7649 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             7650 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             7651 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             7652 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             7653 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             7654 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             7655 ; 56   |
                             7656 ; 57   |typedef union               
                             7657 ; 58   |{
                             7658 ; 59   |    struct {
                             7659 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             7660 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             7661 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             7662 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             7663 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             7664 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             7665 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             7666 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             7667 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             7668 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             7669 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             7670 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             7671 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             7672 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             7673 ; 74   |    } B;
                             7674 ; 75   |   unsigned int I;
                             7675 ; 76   |        unsigned int U;
                             7676 ; 77   |} lradc_ctrl_type;
                             7677 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             7678 ; 79   |
                             7679 ; 80   |
                             7680 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             7681 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             7682 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             7683 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             7684 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             7685 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             7686 ; 87   |
                             7687 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             7688 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             7689 ; 90   |
                             7690 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             7691 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             7692 ; 93   |
                             7693 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             7694 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             7695 ; 96   |
                             7696 ; 97   |
                             7697 ; 98   |typedef union               
                             7698 ; 99   |{
                             7699 ; 100  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7700 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             7701 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             7702 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             7703 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             7704 ; 105  |    } B;
                             7705 ; 106  |    unsigned int I;
                             7706 ; 107  |} lradc_thrsh_type;
                             7707 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             7708 ; 109  |
                             7709 ; 110  |
                             7710 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             7711 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             7712 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             7713 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             7714 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             7715 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             7716 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             7717 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             7718 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             7719 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             7720 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             7721 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             7722 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             7723 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             7724 ; 125  |
                             7725 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             7726 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             7727 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             7728 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             7729 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             7730 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             7731 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             7732 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             7733 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             7734 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             7735 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             7736 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             7737 ; 138  |
                             7738 ; 139  |
                             7739 ; 140  |
                             7740 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             7741 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             7742 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             7743 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             7744 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             7745 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             7746 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             7747 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             7748 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             7749 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7750 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             7751 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             7752 ; 153  |
                             7753 ; 154  |
                             7754 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             7755 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             7756 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             7757 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             7758 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             7759 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             7760 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             7761 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             7762 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             7763 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             7764 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             7765 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             7766 ; 167  |
                             7767 ; 168  |typedef union               
                             7768 ; 169  |{
                             7769 ; 170  |    struct {
                             7770 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             7771 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             7772 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             7773 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             7774 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             7775 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             7776 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             7777 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7778 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7779 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             7780 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             7781 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             7782 ; 183  |    } B;
                             7783 ; 184  |    unsigned int I;
                             7784 ; 185  |} lradc_result_type;
                             7785 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             7786 ; 187  |
                             7787 ; 188  |
                             7788 ; 189  |
                             7789 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7790 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7791 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7792 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7793 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7794 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7795 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7796 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7797 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7798 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7799 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7800 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7801 ; 202  |
                             7802 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7803 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7804 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7805 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7806 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7807 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7808 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7809 ; 210  |
                             7810 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7811 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7812 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7813 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             7814 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             7815 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             7816 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             7817 ; 218  |
                             7818 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             7819 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             7820 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7821 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7822 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7823 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7824 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7825 ; 226  |
                             7826 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             7827 ; 228  |
                             7828 ; 229  |
                             7829 ; 230  |
                             7830 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7831 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7832 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7833 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7834 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7835 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7836 ; 237  |
                             7837 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7838 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7839 ; 240  |
                             7840 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7841 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7842 ; 243  |
                             7843 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7844 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7845 ; 246  |
                             7846 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             7847 ; 248  |
                             7848 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7849 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7850 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7851 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7852 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7853 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7854 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7855 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7856 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7857 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7858 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7859 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7860 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7861 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7862 ; 263  |
                             7863 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7864 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             7865 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7866 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7867 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7868 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7869 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7870 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7871 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7872 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7873 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7874 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7875 ; 276  |
                             7876 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7877 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7878 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7879 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7880 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7881 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7882 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             7883 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             7884 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             7885 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7886 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7887 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             7888 ; 289  |
                             7889 ; 290  |
                             7890 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7891 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7892 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7893 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7894 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7895 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7896 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7897 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7898 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7899 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7900 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7901 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7902 ; 303  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7903 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             7904 ; 305  |
                             7905 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7906 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7907 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7908 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7909 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7910 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7911 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7912 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7913 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             7914 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7915 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7916 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7917 ; 318  |
                             7918 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7919 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7920 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7921 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7922 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7923 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7924 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7925 ; 326  |
                             7926 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7927 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7928 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7929 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7930 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             7931 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7932 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7933 ; 334  |
                             7934 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             7935 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             7936 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7937 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7938 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7939 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7940 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7941 ; 342  |
                             7942 ; 343  |
                             7943 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7944 ; 345  |
                             7945 ; 346  |
                             7946 ; 347  |
                             7947 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7948 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7949 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7950 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7951 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7952 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7953 ; 354  |
                             7954 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7955 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7956 ; 357  |
                             7957 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7958 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7959 ; 360  |
                             7960 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7961 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7962 ; 363  |
                             7963 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7964 ; 365  |
                             7965 ; 366  |
                             7966 ; 367  |
                             7967 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7968 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7969 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7970 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7971 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7972 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7973 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7974 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7975 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7976 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7977 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7978 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7979 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7980 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7981 ; 382  |
                             7982 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7983 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7984 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7985 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7986 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7987 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7988 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7989 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7990 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7991 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7992 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7993 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7994 ; 395  |
                             7995 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7996 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7997 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7998 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7999 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             8000 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8001 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             8002 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             8003 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             8004 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             8005 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             8006 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             8007 ; 408  |
                             8008 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             8009 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             8010 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             8011 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             8012 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             8013 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             8014 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             8015 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             8016 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             8017 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             8018 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             8019 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             8020 ; 421  |
                             8021 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             8022 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8023 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8024 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8025 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8026 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8027 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8028 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8029 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8030 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             8031 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             8032 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             8033 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             8034 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             8035 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             8036 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             8037 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             8038 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             8039 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             8040 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             8041 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             8042 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             8043 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             8044 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             8045 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             8046 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             8047 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             8048 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             8049 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8050 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             8051 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             8052 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             8053 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             8054 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             8055 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             8056 ; 457  |
                             8057 ; 458  |//Needed by button.asm
                             8058 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             8059 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             8060 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             8061 ; 462  |
                             8062 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8063 ; 464  |
                             8064 ; 465  |#endif
                             8065 ; 466  |
                             8066 ; 467  |
                             8067 
                             8069 
                             8070 ; 27   |#include "regspwm.h"
                             8071 
                             8073 
                             8074 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8075 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             8076 ; 3    |// Filename: regspwm.inc
                             8077 ; 4    |// Description: Register definitions for PWM interface
                             8078 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8079 ; 6    |// The following naming conventions are followed in this file.
                             8080 ; 7    |// All registers are named using the format...
                             8081 ; 8    |//     HW_<module>_<regname>
                             8082 ; 9    |// where <module> is the module name which can be any of the following...
                             8083 ; 10   |//     USB20
                             8084 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8085 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8086 ; 13   |// that module)
                             8087 ; 14   |// <regname> is the specific register within that module
                             8088 ; 15   |// We also define the following...
                             8089 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8090 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8091 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8092 ; 19   |// which does something else, and
                             8093 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8094 ; 21   |// which does something else.
                             8095 ; 22   |// Other rules
                             8096 ; 23   |//     All caps
                             8097 ; 24   |//     Numeric identifiers start at 0
                             8098 ; 25   |#if !(defined(regspwminc))
                             8099 ; 26   |#define regspwminc 1
                             8100 ; 27   |
                             8101 ; 28   |#include "types.h"
                             8102 
                             8104 
                             8105 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8106 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8107 ; 3    |//
                             8108 ; 4    |// Filename: types.h
                             8109 ; 5    |// Description: Standard data types
                             8110 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8111 ; 7    |
                             8112 ; 8    |#ifndef _TYPES_H
                             8113 ; 9    |#define _TYPES_H
                             8114 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8115 ; 11   |// TODO:  move this outta here!
                             8116 ; 12   |#if !defined(NOERROR)
                             8117 ; 13   |#define NOERROR 0
                             8118 ; 14   |#define SUCCESS 0
                             8119 ; 15   |#endif 
                             8120 ; 16   |#if !defined(SUCCESS)
                             8121 ; 17   |#define SUCCESS  0
                             8122 ; 18   |#endif
                             8123 ; 19   |#if !defined(ERROR)
                             8124 ; 20   |#define ERROR   -1
                             8125 ; 21   |#endif
                             8126 ; 22   |#if !defined(FALSE)
                             8127 ; 23   |#define FALSE 0
                             8128 ; 24   |#endif
                             8129 ; 25   |#if !defined(TRUE)
                             8130 ; 26   |#define TRUE  1
                             8131 ; 27   |#endif
                             8132 ; 28   |
                             8133 ; 29   |#if !defined(NULL)
                             8134 ; 30   |#define NULL 0
                             8135 ; 31   |#endif
                             8136 ; 32   |
                             8137 ; 33   |#define MAX_INT     0x7FFFFF
                             8138 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8139 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8140 ; 36   |#define MAX_ULONG   (-1) 
                             8141 ; 37   |
                             8142 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8143 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8144 ; 40   |
                             8145 ; 41   |
                             8146 ; 42   |#define BYTE    unsigned char       // btVarName
                             8147 ; 43   |#define CHAR    signed char         // cVarName
                             8148 ; 44   |#define USHORT  unsigned short      // usVarName
                             8149 ; 45   |#define SHORT   unsigned short      // sVarName
                             8150 ; 46   |#define WORD    unsigned int        // wVarName
                             8151 ; 47   |#define INT     signed int          // iVarName
                             8152 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8153 ; 49   |#define LONG    signed long         // lVarName
                             8154 ; 50   |#define BOOL    unsigned int        // bVarName
                             8155 ; 51   |#define FRACT   _fract              // frVarName
                             8156 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8157 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8158 ; 54   |#define FLOAT   float               // fVarName
                             8159 ; 55   |#define DBL     double              // dVarName
                             8160 ; 56   |#define ENUM    enum                // eVarName
                             8161 ; 57   |#define CMX     _complex            // cmxVarName
                             8162 ; 58   |typedef WORD UCS3;                   // 
                             8163 ; 59   |
                             8164 ; 60   |#define UINT16  unsigned short
                             8165 ; 61   |#define UINT8   unsigned char   
                             8166 ; 62   |#define UINT32  unsigned long
                             8167 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8168 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8169 ; 65   |#define WCHAR   UINT16
                             8170 ; 66   |
                             8171 ; 67   |//UINT128 is 16 bytes or 6 words
                             8172 ; 68   |typedef struct UINT128_3500 {   
                             8173 ; 69   |    int val[6];     
                             8174 ; 70   |} UINT128_3500;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8175 ; 71   |
                             8176 ; 72   |#define UINT128   UINT128_3500
                             8177 ; 73   |
                             8178 ; 74   |// Little endian word packed byte strings:   
                             8179 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8180 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8181 ; 77   |// Little endian word packed byte strings:   
                             8182 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8183 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8184 ; 80   |
                             8185 ; 81   |// Declare Memory Spaces To Use When Coding
                             8186 ; 82   |// A. Sector Buffers
                             8187 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8188 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8189 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8190 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8191 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8192 ; 88   |// B. Media DDI Memory
                             8193 ; 89   |#define MEDIA_DDI_MEM _Y
                             8194 ; 90   |
                             8195 ; 91   |
                             8196 ; 92   |
                             8197 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8198 ; 94   |// Examples of circular pointers:
                             8199 ; 95   |//    INT CIRC cpiVarName
                             8200 ; 96   |//    DWORD CIRC cpdwVarName
                             8201 ; 97   |
                             8202 ; 98   |#define RETCODE INT                 // rcVarName
                             8203 ; 99   |
                             8204 ; 100  |// generic bitfield structure
                             8205 ; 101  |struct Bitfield {
                             8206 ; 102  |    unsigned int B0  :1;
                             8207 ; 103  |    unsigned int B1  :1;
                             8208 ; 104  |    unsigned int B2  :1;
                             8209 ; 105  |    unsigned int B3  :1;
                             8210 ; 106  |    unsigned int B4  :1;
                             8211 ; 107  |    unsigned int B5  :1;
                             8212 ; 108  |    unsigned int B6  :1;
                             8213 ; 109  |    unsigned int B7  :1;
                             8214 ; 110  |    unsigned int B8  :1;
                             8215 ; 111  |    unsigned int B9  :1;
                             8216 ; 112  |    unsigned int B10 :1;
                             8217 ; 113  |    unsigned int B11 :1;
                             8218 ; 114  |    unsigned int B12 :1;
                             8219 ; 115  |    unsigned int B13 :1;
                             8220 ; 116  |    unsigned int B14 :1;
                             8221 ; 117  |    unsigned int B15 :1;
                             8222 ; 118  |    unsigned int B16 :1;
                             8223 ; 119  |    unsigned int B17 :1;
                             8224 ; 120  |    unsigned int B18 :1;
                             8225 ; 121  |    unsigned int B19 :1;
                             8226 ; 122  |    unsigned int B20 :1;
                             8227 ; 123  |    unsigned int B21 :1;
                             8228 ; 124  |    unsigned int B22 :1;
                             8229 ; 125  |    unsigned int B23 :1;
                             8230 ; 126  |};
                             8231 ; 127  |
                             8232 ; 128  |union BitInt {
                             8233 ; 129  |        struct Bitfield B;
                             8234 ; 130  |        int        I;
                             8235 ; 131  |};
                             8236 ; 132  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8237 ; 133  |#define MAX_MSG_LENGTH 10
                             8238 ; 134  |struct CMessage
                             8239 ; 135  |{
                             8240 ; 136  |        unsigned int m_uLength;
                             8241 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8242 ; 138  |};
                             8243 ; 139  |
                             8244 ; 140  |typedef struct {
                             8245 ; 141  |    WORD m_wLength;
                             8246 ; 142  |    WORD m_wMessage;
                             8247 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8248 ; 144  |} Message;
                             8249 ; 145  |
                             8250 ; 146  |struct MessageQueueDescriptor
                             8251 ; 147  |{
                             8252 ; 148  |        int *m_pBase;
                             8253 ; 149  |        int m_iModulo;
                             8254 ; 150  |        int m_iSize;
                             8255 ; 151  |        int *m_pHead;
                             8256 ; 152  |        int *m_pTail;
                             8257 ; 153  |};
                             8258 ; 154  |
                             8259 ; 155  |struct ModuleEntry
                             8260 ; 156  |{
                             8261 ; 157  |    int m_iSignaledEventMask;
                             8262 ; 158  |    int m_iWaitEventMask;
                             8263 ; 159  |    int m_iResourceOfCode;
                             8264 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8265 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8266 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8267 ; 163  |    int m_uTimeOutHigh;
                             8268 ; 164  |    int m_uTimeOutLow;
                             8269 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8270 ; 166  |};
                             8271 ; 167  |
                             8272 ; 168  |union WaitMask{
                             8273 ; 169  |    struct B{
                             8274 ; 170  |        unsigned int m_bNone     :1;
                             8275 ; 171  |        unsigned int m_bMessage  :1;
                             8276 ; 172  |        unsigned int m_bTimer    :1;
                             8277 ; 173  |        unsigned int m_bButton   :1;
                             8278 ; 174  |    } B;
                             8279 ; 175  |    int I;
                             8280 ; 176  |} ;
                             8281 ; 177  |
                             8282 ; 178  |
                             8283 ; 179  |struct Button {
                             8284 ; 180  |        WORD wButtonEvent;
                             8285 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8286 ; 182  |};
                             8287 ; 183  |
                             8288 ; 184  |struct Message {
                             8289 ; 185  |        WORD wMsgLength;
                             8290 ; 186  |        WORD wMsgCommand;
                             8291 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8292 ; 188  |};
                             8293 ; 189  |
                             8294 ; 190  |union EventTypes {
                             8295 ; 191  |        struct CMessage msg;
                             8296 ; 192  |        struct Button Button ;
                             8297 ; 193  |        struct Message Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8298 ; 194  |};
                             8299 ; 195  |
                             8300 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8301 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8302 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8303 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8304 ; 200  |
                             8305 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8306 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8307 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8308 ; 204  |
                             8309 ; 205  |#if DEBUG
                             8310 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8311 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8312 ; 208  |#else 
                             8313 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8314 ; 210  |#define DebugBuildAssert(x)    
                             8315 ; 211  |#endif
                             8316 ; 212  |
                             8317 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8318 ; 214  |//  #pragma asm
                             8319 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8320 ; 216  |//  #pragma endasm
                             8321 ; 217  |
                             8322 ; 218  |
                             8323 ; 219  |#ifdef COLOR_262K
                             8324 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8325 ; 221  |#elif defined(COLOR_65K)
                             8326 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8327 ; 223  |#else
                             8328 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8329 ; 225  |#endif
                             8330 ; 226  |    
                             8331 ; 227  |#endif // #ifndef _TYPES_H
                             8332 
                             8334 
                             8335 ; 29   |
                             8336 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8337 ; 31   |//   Pulse Width Modulator STMP Registers 
                             8338 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8339 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             8340 ; 34   |
                             8341 ; 35   |
                             8342 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8343 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             8344 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             8345 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             8346 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             8347 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             8348 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             8349 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             8350 ; 44   |
                             8351 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             8352 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             8353 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             8354 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             8355 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             8356 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8357 ; 51   |
                             8358 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             8359 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
                             8360 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             8361 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             8362 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             8363 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
                             8364 ; 58   |
                             8365 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             8366 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             8367 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             8368 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             8369 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             8370 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             8371 ; 65   |
                             8372 ; 66   |typedef union               
                             8373 ; 67   |{
                             8374 ; 68   |    struct {
                             8375 ; 69   |        int PWM0_EN                    :1;
                             8376 ; 70   |        int PWM1_EN                    :1;
                             8377 ; 71   |        int PWM2_EN                    :1;
                             8378 ; 72   |        int PWM3_EN                    :1;
                             8379 ; 73   |        int RSVD0                      :4;
                             8380 ; 74   |        int CDIV                       :2;
                             8381 ; 75   |        int RSVD1                      :13;
                             8382 ; 76   |        int MSTR_EN                    :1;
                             8383 ; 77   |    } B;
                             8384 ; 78   |    int I;
                             8385 ; 79   |} pwmcsr_type;
                             8386 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             8387 ; 81   |
                             8388 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             8389 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             8390 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             8391 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             8392 ; 86   |
                             8393 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             8394 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             8395 ; 89   |
                             8396 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                             8397 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             8398 ; 92   |
                             8399 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             8400 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             8401 ; 95   |
                             8402 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             8403 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             8404 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             8405 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             8406 ; 100  |
                             8407 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             8408 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             8409 ; 103  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8410 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             8411 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             8412 ; 106  |
                             8413 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             8414 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             8415 ; 109  |
                             8416 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             8417 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             8418 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             8419 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             8420 ; 114  |
                             8421 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             8422 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             8423 ; 117  |
                             8424 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             8425 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             8426 ; 120  |
                             8427 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             8428 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             8429 ; 123  |
                             8430 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8431 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             8432 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             8433 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             8434 ; 128  |
                             8435 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             8436 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             8437 ; 131  |
                             8438 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             8439 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             8440 ; 134  |
                             8441 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             8442 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             8443 ; 137  |
                             8444 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             8445 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             8446 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             8447 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             8448 ; 142  |
                             8449 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             8450 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             8451 ; 145  |
                             8452 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             8453 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             8454 ; 148  |
                             8455 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             8456 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             8457 ; 151  |
                             8458 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             8459 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             8460 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             8461 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             8462 ; 156  |
                             8463 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8464 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             8465 ; 159  |
                             8466 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             8467 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
                             8468 ; 162  |
                             8469 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             8470 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             8471 ; 165  |
                             8472 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             8473 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             8474 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             8475 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             8476 ; 170  |
                             8477 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             8478 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             8479 ; 173  |
                             8480 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             8481 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             8482 ; 176  |
                             8483 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             8484 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             8485 ; 179  |
                             8486 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             8487 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             8488 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             8489 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             8490 ; 184  |
                             8491 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             8492 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             8493 ; 187  |
                             8494 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             8495 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             8496 ; 190  |
                             8497 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             8498 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             8499 ; 193  |
                             8500 ; 194  |typedef union               
                             8501 ; 195  |{
                             8502 ; 196  |    struct {
                             8503 ; 197  |       int ACTIVE                    :12;
                             8504 ; 198  |       int INACTIVE                  :12;
                             8505 ; 199  |    } B;
                             8506 ; 200  |    int I;
                             8507 ; 201  |} pwmchan_type;
                             8508 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             8509 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             8510 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             8511 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             8512 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             8513 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8514 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             8515 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             8516 ; 210  |
                             8517 ; 211  |#endif
                             8518 ; 212  |
                             8519 ; 213  |
                             8520 ; 214  |
                             8521 ; 215  |
                             8522 
                             8524 
                             8525 ; 28   |#include "regsrevision.h"
                             8526 
                             8528 
                             8529 ; 1    |#if !(defined(__HW_REVR))
                             8530 ; 2    |#define __HW_REVR 1
                             8531 ; 3    |
                             8532 ; 4    |
                             8533 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             8534 ; 6    |
                             8535 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             8536 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             8537 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             8538 ; 10   |
                             8539 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             8540 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             8541 ; 13   |
                             8542 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             8543 ; 15   |
                             8544 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             8545 ; 17   |
                             8546 ; 18   |
                             8547 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             8548 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             8549 ; 21   |//  June15 2004: C struct updated to be correct: 
                             8550 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             8551 ; 23   |typedef union               
                             8552 ; 24   |{
                             8553 ; 25   |    struct {
                             8554 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             8555 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             8556 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             8557 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             8558 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             8559 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             8560 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             8561 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             8562 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             8563 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             8564 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             8565 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             8566 ; 38   |    } B;
                             8567 ; 39   |
                             8568 ; 40   |    int I;
                             8569 ; 41   |
                             8570 ; 42   |} revr_type;
                             8571 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             8572 ; 44   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8573 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             8574 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             8575 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             8576 ; 48   |
                             8577 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             8578 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             8579 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             8580 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             8581 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             8582 ; 54   |
                             8583 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             8584 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             8585 ; 57   |
                             8586 ; 58   |#endif //!@def(__HW_REVR)
                             8587 ; 59   |
                             8588 
                             8590 
                             8591 ; 29   |#include "regsrtc.h"
                             8592 
                             8594 
                             8595 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8596 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8597 ; 3    |// Filename: regsrtc.inc
                             8598 ; 4    |// Description: Register definitions for RTC interface
                             8599 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8600 ; 6    |// The following naming conventions are followed in this file.
                             8601 ; 7    |// All registers are named using the format...
                             8602 ; 8    |//     HW_<module>_<regname>
                             8603 ; 9    |// where <module> is the module name which can be any of the following...
                             8604 ; 10   |//     USB20
                             8605 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8606 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8607 ; 13   |// that module)
                             8608 ; 14   |// <regname> is the specific register within that module
                             8609 ; 15   |// We also define the following...
                             8610 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8611 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8612 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8613 ; 19   |// which does something else, and
                             8614 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8615 ; 21   |// which does something else.
                             8616 ; 22   |// Other rules
                             8617 ; 23   |//     All caps
                             8618 ; 24   |//     Numeric identifiers start at 0
                             8619 ; 25   |#if !(defined(regsrtcinc))
                             8620 ; 26   |#define regsrtcinc 1
                             8621 ; 27   |
                             8622 ; 28   |#include "types.h"
                             8623 
                             8625 
                             8626 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8627 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8628 ; 3    |//
                             8629 ; 4    |// Filename: types.h
                             8630 ; 5    |// Description: Standard data types
                             8631 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8632 ; 7    |
                             8633 ; 8    |#ifndef _TYPES_H
                             8634 ; 9    |#define _TYPES_H
                             8635 ; 10   |
                             8636 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8637 ; 12   |#if !defined(NOERROR)
                             8638 ; 13   |#define NOERROR 0
                             8639 ; 14   |#define SUCCESS 0
                             8640 ; 15   |#endif 
                             8641 ; 16   |#if !defined(SUCCESS)
                             8642 ; 17   |#define SUCCESS  0
                             8643 ; 18   |#endif
                             8644 ; 19   |#if !defined(ERROR)
                             8645 ; 20   |#define ERROR   -1
                             8646 ; 21   |#endif
                             8647 ; 22   |#if !defined(FALSE)
                             8648 ; 23   |#define FALSE 0
                             8649 ; 24   |#endif
                             8650 ; 25   |#if !defined(TRUE)
                             8651 ; 26   |#define TRUE  1
                             8652 ; 27   |#endif
                             8653 ; 28   |
                             8654 ; 29   |#if !defined(NULL)
                             8655 ; 30   |#define NULL 0
                             8656 ; 31   |#endif
                             8657 ; 32   |
                             8658 ; 33   |#define MAX_INT     0x7FFFFF
                             8659 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8660 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8661 ; 36   |#define MAX_ULONG   (-1) 
                             8662 ; 37   |
                             8663 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8664 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8665 ; 40   |
                             8666 ; 41   |
                             8667 ; 42   |#define BYTE    unsigned char       // btVarName
                             8668 ; 43   |#define CHAR    signed char         // cVarName
                             8669 ; 44   |#define USHORT  unsigned short      // usVarName
                             8670 ; 45   |#define SHORT   unsigned short      // sVarName
                             8671 ; 46   |#define WORD    unsigned int        // wVarName
                             8672 ; 47   |#define INT     signed int          // iVarName
                             8673 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8674 ; 49   |#define LONG    signed long         // lVarName
                             8675 ; 50   |#define BOOL    unsigned int        // bVarName
                             8676 ; 51   |#define FRACT   _fract              // frVarName
                             8677 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8678 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8679 ; 54   |#define FLOAT   float               // fVarName
                             8680 ; 55   |#define DBL     double              // dVarName
                             8681 ; 56   |#define ENUM    enum                // eVarName
                             8682 ; 57   |#define CMX     _complex            // cmxVarName
                             8683 ; 58   |typedef WORD UCS3;                   // 
                             8684 ; 59   |
                             8685 ; 60   |#define UINT16  unsigned short
                             8686 ; 61   |#define UINT8   unsigned char   
                             8687 ; 62   |#define UINT32  unsigned long
                             8688 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8689 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8690 ; 65   |#define WCHAR   UINT16
                             8691 ; 66   |
                             8692 ; 67   |//UINT128 is 16 bytes or 6 words
                             8693 ; 68   |typedef struct UINT128_3500 {   
                             8694 ; 69   |    int val[6];     
                             8695 ; 70   |} UINT128_3500;
                             8696 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8697 ; 72   |#define UINT128   UINT128_3500
                             8698 ; 73   |
                             8699 ; 74   |// Little endian word packed byte strings:   
                             8700 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8701 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8702 ; 77   |// Little endian word packed byte strings:   
                             8703 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8704 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8705 ; 80   |
                             8706 ; 81   |// Declare Memory Spaces To Use When Coding
                             8707 ; 82   |// A. Sector Buffers
                             8708 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8709 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8710 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8711 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8712 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8713 ; 88   |// B. Media DDI Memory
                             8714 ; 89   |#define MEDIA_DDI_MEM _Y
                             8715 ; 90   |
                             8716 ; 91   |
                             8717 ; 92   |
                             8718 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8719 ; 94   |// Examples of circular pointers:
                             8720 ; 95   |//    INT CIRC cpiVarName
                             8721 ; 96   |//    DWORD CIRC cpdwVarName
                             8722 ; 97   |
                             8723 ; 98   |#define RETCODE INT                 // rcVarName
                             8724 ; 99   |
                             8725 ; 100  |// generic bitfield structure
                             8726 ; 101  |struct Bitfield {
                             8727 ; 102  |    unsigned int B0  :1;
                             8728 ; 103  |    unsigned int B1  :1;
                             8729 ; 104  |    unsigned int B2  :1;
                             8730 ; 105  |    unsigned int B3  :1;
                             8731 ; 106  |    unsigned int B4  :1;
                             8732 ; 107  |    unsigned int B5  :1;
                             8733 ; 108  |    unsigned int B6  :1;
                             8734 ; 109  |    unsigned int B7  :1;
                             8735 ; 110  |    unsigned int B8  :1;
                             8736 ; 111  |    unsigned int B9  :1;
                             8737 ; 112  |    unsigned int B10 :1;
                             8738 ; 113  |    unsigned int B11 :1;
                             8739 ; 114  |    unsigned int B12 :1;
                             8740 ; 115  |    unsigned int B13 :1;
                             8741 ; 116  |    unsigned int B14 :1;
                             8742 ; 117  |    unsigned int B15 :1;
                             8743 ; 118  |    unsigned int B16 :1;
                             8744 ; 119  |    unsigned int B17 :1;
                             8745 ; 120  |    unsigned int B18 :1;
                             8746 ; 121  |    unsigned int B19 :1;
                             8747 ; 122  |    unsigned int B20 :1;
                             8748 ; 123  |    unsigned int B21 :1;
                             8749 ; 124  |    unsigned int B22 :1;
                             8750 ; 125  |    unsigned int B23 :1;
                             8751 ; 126  |};
                             8752 ; 127  |
                             8753 ; 128  |union BitInt {
                             8754 ; 129  |        struct Bitfield B;
                             8755 ; 130  |        int        I;
                             8756 ; 131  |};
                             8757 ; 132  |
                             8758 ; 133  |#define MAX_MSG_LENGTH 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8759 ; 134  |struct CMessage
                             8760 ; 135  |{
                             8761 ; 136  |        unsigned int m_uLength;
                             8762 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8763 ; 138  |};
                             8764 ; 139  |
                             8765 ; 140  |typedef struct {
                             8766 ; 141  |    WORD m_wLength;
                             8767 ; 142  |    WORD m_wMessage;
                             8768 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8769 ; 144  |} Message;
                             8770 ; 145  |
                             8771 ; 146  |struct MessageQueueDescriptor
                             8772 ; 147  |{
                             8773 ; 148  |        int *m_pBase;
                             8774 ; 149  |        int m_iModulo;
                             8775 ; 150  |        int m_iSize;
                             8776 ; 151  |        int *m_pHead;
                             8777 ; 152  |        int *m_pTail;
                             8778 ; 153  |};
                             8779 ; 154  |
                             8780 ; 155  |struct ModuleEntry
                             8781 ; 156  |{
                             8782 ; 157  |    int m_iSignaledEventMask;
                             8783 ; 158  |    int m_iWaitEventMask;
                             8784 ; 159  |    int m_iResourceOfCode;
                             8785 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8786 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8787 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8788 ; 163  |    int m_uTimeOutHigh;
                             8789 ; 164  |    int m_uTimeOutLow;
                             8790 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8791 ; 166  |};
                             8792 ; 167  |
                             8793 ; 168  |union WaitMask{
                             8794 ; 169  |    struct B{
                             8795 ; 170  |        unsigned int m_bNone     :1;
                             8796 ; 171  |        unsigned int m_bMessage  :1;
                             8797 ; 172  |        unsigned int m_bTimer    :1;
                             8798 ; 173  |        unsigned int m_bButton   :1;
                             8799 ; 174  |    } B;
                             8800 ; 175  |    int I;
                             8801 ; 176  |} ;
                             8802 ; 177  |
                             8803 ; 178  |
                             8804 ; 179  |struct Button {
                             8805 ; 180  |        WORD wButtonEvent;
                             8806 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8807 ; 182  |};
                             8808 ; 183  |
                             8809 ; 184  |struct Message {
                             8810 ; 185  |        WORD wMsgLength;
                             8811 ; 186  |        WORD wMsgCommand;
                             8812 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8813 ; 188  |};
                             8814 ; 189  |
                             8815 ; 190  |union EventTypes {
                             8816 ; 191  |        struct CMessage msg;
                             8817 ; 192  |        struct Button Button ;
                             8818 ; 193  |        struct Message Message;
                             8819 ; 194  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8820 ; 195  |
                             8821 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8822 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8823 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8824 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8825 ; 200  |
                             8826 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8827 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8828 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8829 ; 204  |
                             8830 ; 205  |#if DEBUG
                             8831 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8832 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8833 ; 208  |#else 
                             8834 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8835 ; 210  |#define DebugBuildAssert(x)    
                             8836 ; 211  |#endif
                             8837 ; 212  |
                             8838 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8839 ; 214  |//  #pragma asm
                             8840 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8841 ; 216  |//  #pragma endasm
                             8842 ; 217  |
                             8843 ; 218  |
                             8844 ; 219  |#ifdef COLOR_262K
                             8845 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8846 ; 221  |#elif defined(COLOR_65K)
                             8847 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8848 ; 223  |#else
                             8849 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8850 ; 225  |#endif
                             8851 ; 226  |    
                             8852 ; 227  |#endif // #ifndef _TYPES_H
                             8853 
                             8855 
                             8856 ; 29   |
                             8857 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8858 ; 31   |
                             8859 ; 32   |//   RTC STMP Registers 
                             8860 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8861 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8862 ; 35   |
                             8863 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8864 ; 37   |
                             8865 ; 38   |
                             8866 ; 39   |
                             8867 ; 40   |
                             8868 ; 41   |
                             8869 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8870 ; 43   |
                             8871 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8872 ; 45   |
                             8873 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8874 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8875 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8876 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8877 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8878 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8879 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8880 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8881 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8882 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8883 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8884 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8885 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8886 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8887 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8888 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8889 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8890 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8891 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8892 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8893 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8894 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8895 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8896 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8897 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8898 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8899 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8900 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8901 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8902 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8903 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8904 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8905 ; 78   |
                             8906 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8907 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             8908 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8909 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8910 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8911 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8912 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8913 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8914 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8915 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8916 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8917 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8918 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8919 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8920 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8921 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8922 ; 95   |
                             8923 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8924 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8925 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8926 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8927 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8928 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8929 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8930 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8931 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8932 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8933 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8934 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8935 ; 108  |
                             8936 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8937 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8938 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8939 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8940 ; 113  |
                             8941 ; 114  |
                             8942 ; 115  |typedef union               
                             8943 ; 116  |{
                             8944 ; 117  |    struct {
                             8945 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8946 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8947 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8948 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8949 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8950 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8951 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8952 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8953 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8954 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8955 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8956 ; 129  |    } B;
                             8957 ; 130  |    int I;
                             8958 ; 131  |    unsigned int U;
                             8959 ; 132  |} rtc_csr_type;
                             8960 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8961 ; 134  |
                             8962 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8963 ; 136  |
                             8964 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8965 ; 138  |
                             8966 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8967 ; 140  |
                             8968 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8969 ; 142  |
                             8970 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8971 ; 144  |
                             8972 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8973 ; 146  |
                             8974 ; 147  |typedef union               
                             8975 ; 148  |{
                             8976 ; 149  |    struct {
                             8977 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8978 ; 151  |    } B;
                             8979 ; 152  |    int I;
                             8980 ; 153  |    unsigned int U;
                             8981 ; 154  |} rtc_mseconds0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8982 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             8983 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8984 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8985 ; 158  |
                             8986 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8987 ; 160  |
                             8988 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8989 ; 162  |
                             8990 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8991 ; 164  |
                             8992 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             8993 ; 166  |
                             8994 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             8995 ; 168  |
                             8996 ; 169  |typedef union               
                             8997 ; 170  |{
                             8998 ; 171  |    struct {
                             8999 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             9000 ; 173  |    } B;
                             9001 ; 174  |    int I;
                             9002 ; 175  |    unsigned int U;
                             9003 ; 176  |} rtc_mseconds1_type;
                             9004 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             9005 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             9006 ; 179  |
                             9007 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             9008 ; 181  |#define HW_RTC_UP_OFFSET 2
                             9009 ; 182  |
                             9010 ; 183  |
                             9011 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             9012 ; 185  |
                             9013 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             9014 ; 187  |
                             9015 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             9016 ; 189  |
                             9017 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             9018 ; 191  |
                             9019 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             9020 ; 193  |
                             9021 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             9022 ; 195  |
                             9023 ; 196  |typedef union               
                             9024 ; 197  |{
                             9025 ; 198  |    struct {
                             9026 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             9027 ; 200  |    } B;
                             9028 ; 201  |    int I;
                             9029 ; 202  |    unsigned int U;
                             9030 ; 203  |} rtc_watchdog_type;
                             9031 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             9032 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             9033 ; 206  |
                             9034 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             9035 ; 208  |
                             9036 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             9037 ; 210  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9038 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             9039 ; 212  |
                             9040 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             9041 ; 214  |
                             9042 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             9043 ; 216  |
                             9044 ; 217  |typedef union               
                             9045 ; 218  |{
                             9046 ; 219  |    struct {
                             9047 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             9048 ; 221  |    } B;
                             9049 ; 222  |    int I;
                             9050 ; 223  |    unsigned int U;
                             9051 ; 224  |} rtc_alarm0_type;
                             9052 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             9053 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             9054 ; 227  |
                             9055 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             9056 ; 229  |
                             9057 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             9058 ; 231  |
                             9059 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             9060 ; 233  |
                             9061 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             9062 ; 235  |
                             9063 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             9064 ; 237  |
                             9065 ; 238  |typedef union               
                             9066 ; 239  |{
                             9067 ; 240  |    struct {
                             9068 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             9069 ; 242  |    } B;
                             9070 ; 243  |    int I;
                             9071 ; 244  |    unsigned int U;
                             9072 ; 245  |} rtc_alarm1_type;
                             9073 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             9074 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9075 ; 248  |
                             9076 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             9077 ; 250  |
                             9078 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             9079 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             9080 ; 253  |
                             9081 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             9082 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             9083 ; 256  |
                             9084 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             9085 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             9086 ; 259  |
                             9087 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             9088 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             9089 ; 262  |
                             9090 ; 263  |typedef union               
                             9091 ; 264  |{
                             9092 ; 265  |    struct {
                             9093 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9094 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             9095 ; 268  |    } B;
                             9096 ; 269  |    int I;
                             9097 ; 270  |    unsigned int U;
                             9098 ; 271  |} rtc_xtaldivide_type;
                             9099 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             9100 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             9101 ; 274  |
                             9102 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             9103 ; 276  |
                             9104 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             9105 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             9106 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             9107 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             9108 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             9109 ; 282  |
                             9110 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             9111 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             9112 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             9113 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             9114 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             9115 ; 288  |
                             9116 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             9117 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             9118 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             9119 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             9120 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             9121 ; 294  |
                             9122 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             9123 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             9124 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             9125 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             9126 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             9127 ; 300  |
                             9128 ; 301  |typedef union               
                             9129 ; 302  |{
                             9130 ; 303  |   struct {
                             9131 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             9132 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             9133 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             9134 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             9135 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             9136 ; 309  |   } B;
                             9137 ; 310  |    int I;
                             9138 ; 311  |    unsigned int U;
                             9139 ; 312  |} rtc_PERSISTENT0_type;
                             9140 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             9141 ; 314  |
                             9142 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             9143 ; 316  |
                             9144 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             9145 ; 318  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9146 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             9147 ; 320  |
                             9148 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             9149 ; 322  |
                             9150 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             9151 ; 324  |
                             9152 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             9153 ; 326  |
                             9154 ; 327  |
                             9155 ; 328  |typedef union               
                             9156 ; 329  |{
                             9157 ; 330  |    struct {
                             9158 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             9159 ; 332  |    } B;
                             9160 ; 333  |    int I;
                             9161 ; 334  |    unsigned int U;
                             9162 ; 335  |} rtc_PERSISTENT1_type;
                             9163 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             9164 ; 337  |
                             9165 ; 338  |
                             9166 ; 339  |#endif
                             9167 ; 340  |
                             9168 ; 341  |
                             9169 ; 342  |
                             9170 ; 343  |
                             9171 ; 344  |
                             9172 ; 345  |
                             9173 ; 346  |
                             9174 ; 347  |
                             9175 ; 348  |
                             9176 ; 349  |
                             9177 ; 350  |
                             9178 ; 351  |
                             9179 ; 352  |
                             9180 ; 353  |
                             9181 
                             9183 
                             9184 ; 30   |#include "regsspare.h"
                             9185 
                             9187 
                             9188 ; 1    |#if !(defined(RESGSSPARE_INC))
                             9189 ; 2    |#define RESGSSPARE_INC 1
                             9190 ; 3    |
                             9191 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             9192 ; 5    |
                             9193 ; 6    |
                             9194 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             9195 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             9196 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             9197 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             9198 ; 11   |
                             9199 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             9200 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             9201 ; 14   |
                             9202 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             9203 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             9204 ; 17   |
                             9205 ; 18   |
                             9206 ; 19   |
                             9207 ; 20   |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9208 ; 21   |{
                             9209 ; 22   |    struct {
                             9210 ; 23   |        int      I2SS       :1;     
                             9211 ; 24   |        int      USBSELECT  :1;     
                             9212 ; 25   |        unsigned            :6;
                             9213 ; 26   |        int      USBPLUGIN  :1;     
                             9214 ; 27   |        int      PSWITCH    :1;     
                             9215 ; 28   |    } B;
                             9216 ; 29   |
                             9217 ; 30   |    int I;
                             9218 ; 31   |
                             9219 ; 32   |} spare_type;
                             9220 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             9221 ; 34   |
                             9222 ; 35   |
                             9223 ; 36   |
                             9224 ; 37   |#endif
                             9225 
                             9227 
                             9228 ; 31   |#include "regsspi.h"
                             9229 
                             9231 
                             9232 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9233 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             9234 ; 3    |//;; Filename    : regsspi.inc
                             9235 ; 4    |//;; Description : Register definitions for SPI interface
                             9236 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9237 ; 6    |
                             9238 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             9239 ; 8    |// The following naming conventions are followed in this file.
                             9240 ; 9    |// All registers are named using the format...
                             9241 ; 10   |//     HW_<module>_<regname>
                             9242 ; 11   |// where <module> is the module name which can be any of the following...
                             9243 ; 12   |//     USB20
                             9244 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             9245 ; 14   |// module name includes a number starting from 0 for the first instance of
                             9246 ; 15   |// that module)
                             9247 ; 16   |// <regname> is the specific register within that module
                             9248 ; 17   |// We also define the following...
                             9249 ; 18   |//     HW_<module>_<regname>_BITPOS
                             9250 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9251 ; 20   |//     HW_<module>_<regname>_SETMASK
                             9252 ; 21   |// which does something else, and
                             9253 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             9254 ; 23   |// which does something else.
                             9255 ; 24   |// Other rules
                             9256 ; 25   |//     All caps
                             9257 ; 26   |//     Numeric identifiers start at 0
                             9258 ; 27   |#if !(defined(regsspiinc))
                             9259 ; 28   |#define regsspiinc 1
                             9260 ; 29   |
                             9261 ; 30   |#include "types.h"
                             9262 
                             9264 
                             9265 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9266 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9267 ; 3    |//
                             9268 ; 4    |// Filename: types.h
                             9269 ; 5    |// Description: Standard data types
                             9270 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9271 ; 7    |
                             9272 ; 8    |#ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9273 ; 9    |#define _TYPES_H
                             9274 ; 10   |
                             9275 ; 11   |// TODO:  move this outta here!
                             9276 ; 12   |#if !defined(NOERROR)
                             9277 ; 13   |#define NOERROR 0
                             9278 ; 14   |#define SUCCESS 0
                             9279 ; 15   |#endif 
                             9280 ; 16   |#if !defined(SUCCESS)
                             9281 ; 17   |#define SUCCESS  0
                             9282 ; 18   |#endif
                             9283 ; 19   |#if !defined(ERROR)
                             9284 ; 20   |#define ERROR   -1
                             9285 ; 21   |#endif
                             9286 ; 22   |#if !defined(FALSE)
                             9287 ; 23   |#define FALSE 0
                             9288 ; 24   |#endif
                             9289 ; 25   |#if !defined(TRUE)
                             9290 ; 26   |#define TRUE  1
                             9291 ; 27   |#endif
                             9292 ; 28   |
                             9293 ; 29   |#if !defined(NULL)
                             9294 ; 30   |#define NULL 0
                             9295 ; 31   |#endif
                             9296 ; 32   |
                             9297 ; 33   |#define MAX_INT     0x7FFFFF
                             9298 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9299 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9300 ; 36   |#define MAX_ULONG   (-1) 
                             9301 ; 37   |
                             9302 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9303 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9304 ; 40   |
                             9305 ; 41   |
                             9306 ; 42   |#define BYTE    unsigned char       // btVarName
                             9307 ; 43   |#define CHAR    signed char         // cVarName
                             9308 ; 44   |#define USHORT  unsigned short      // usVarName
                             9309 ; 45   |#define SHORT   unsigned short      // sVarName
                             9310 ; 46   |#define WORD    unsigned int        // wVarName
                             9311 ; 47   |#define INT     signed int          // iVarName
                             9312 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9313 ; 49   |#define LONG    signed long         // lVarName
                             9314 ; 50   |#define BOOL    unsigned int        // bVarName
                             9315 ; 51   |#define FRACT   _fract              // frVarName
                             9316 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9317 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9318 ; 54   |#define FLOAT   float               // fVarName
                             9319 ; 55   |#define DBL     double              // dVarName
                             9320 ; 56   |#define ENUM    enum                // eVarName
                             9321 ; 57   |#define CMX     _complex            // cmxVarName
                             9322 ; 58   |typedef WORD UCS3;                   // 
                             9323 ; 59   |
                             9324 ; 60   |#define UINT16  unsigned short
                             9325 ; 61   |#define UINT8   unsigned char   
                             9326 ; 62   |#define UINT32  unsigned long
                             9327 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9328 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9329 ; 65   |#define WCHAR   UINT16
                             9330 ; 66   |
                             9331 ; 67   |//UINT128 is 16 bytes or 6 words
                             9332 ; 68   |typedef struct UINT128_3500 {   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9333 ; 69   |    int val[6];     
                             9334 ; 70   |} UINT128_3500;
                             9335 ; 71   |
                             9336 ; 72   |#define UINT128   UINT128_3500
                             9337 ; 73   |
                             9338 ; 74   |// Little endian word packed byte strings:   
                             9339 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9340 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9341 ; 77   |// Little endian word packed byte strings:   
                             9342 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9343 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9344 ; 80   |
                             9345 ; 81   |// Declare Memory Spaces To Use When Coding
                             9346 ; 82   |// A. Sector Buffers
                             9347 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9348 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9349 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9350 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9351 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9352 ; 88   |// B. Media DDI Memory
                             9353 ; 89   |#define MEDIA_DDI_MEM _Y
                             9354 ; 90   |
                             9355 ; 91   |
                             9356 ; 92   |
                             9357 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9358 ; 94   |// Examples of circular pointers:
                             9359 ; 95   |//    INT CIRC cpiVarName
                             9360 ; 96   |//    DWORD CIRC cpdwVarName
                             9361 ; 97   |
                             9362 ; 98   |#define RETCODE INT                 // rcVarName
                             9363 ; 99   |
                             9364 ; 100  |// generic bitfield structure
                             9365 ; 101  |struct Bitfield {
                             9366 ; 102  |    unsigned int B0  :1;
                             9367 ; 103  |    unsigned int B1  :1;
                             9368 ; 104  |    unsigned int B2  :1;
                             9369 ; 105  |    unsigned int B3  :1;
                             9370 ; 106  |    unsigned int B4  :1;
                             9371 ; 107  |    unsigned int B5  :1;
                             9372 ; 108  |    unsigned int B6  :1;
                             9373 ; 109  |    unsigned int B7  :1;
                             9374 ; 110  |    unsigned int B8  :1;
                             9375 ; 111  |    unsigned int B9  :1;
                             9376 ; 112  |    unsigned int B10 :1;
                             9377 ; 113  |    unsigned int B11 :1;
                             9378 ; 114  |    unsigned int B12 :1;
                             9379 ; 115  |    unsigned int B13 :1;
                             9380 ; 116  |    unsigned int B14 :1;
                             9381 ; 117  |    unsigned int B15 :1;
                             9382 ; 118  |    unsigned int B16 :1;
                             9383 ; 119  |    unsigned int B17 :1;
                             9384 ; 120  |    unsigned int B18 :1;
                             9385 ; 121  |    unsigned int B19 :1;
                             9386 ; 122  |    unsigned int B20 :1;
                             9387 ; 123  |    unsigned int B21 :1;
                             9388 ; 124  |    unsigned int B22 :1;
                             9389 ; 125  |    unsigned int B23 :1;
                             9390 ; 126  |};
                             9391 ; 127  |
                             9392 ; 128  |union BitInt {
                             9393 ; 129  |        struct Bitfield B;
                             9394 ; 130  |        int        I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9395 ; 131  |};
                             9396 ; 132  |
                             9397 ; 133  |#define MAX_MSG_LENGTH 10
                             9398 ; 134  |struct CMessage
                             9399 ; 135  |{
                             9400 ; 136  |        unsigned int m_uLength;
                             9401 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9402 ; 138  |};
                             9403 ; 139  |
                             9404 ; 140  |typedef struct {
                             9405 ; 141  |    WORD m_wLength;
                             9406 ; 142  |    WORD m_wMessage;
                             9407 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9408 ; 144  |} Message;
                             9409 ; 145  |
                             9410 ; 146  |struct MessageQueueDescriptor
                             9411 ; 147  |{
                             9412 ; 148  |        int *m_pBase;
                             9413 ; 149  |        int m_iModulo;
                             9414 ; 150  |        int m_iSize;
                             9415 ; 151  |        int *m_pHead;
                             9416 ; 152  |        int *m_pTail;
                             9417 ; 153  |};
                             9418 ; 154  |
                             9419 ; 155  |struct ModuleEntry
                             9420 ; 156  |{
                             9421 ; 157  |    int m_iSignaledEventMask;
                             9422 ; 158  |    int m_iWaitEventMask;
                             9423 ; 159  |    int m_iResourceOfCode;
                             9424 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9425 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9426 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9427 ; 163  |    int m_uTimeOutHigh;
                             9428 ; 164  |    int m_uTimeOutLow;
                             9429 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9430 ; 166  |};
                             9431 ; 167  |
                             9432 ; 168  |union WaitMask{
                             9433 ; 169  |    struct B{
                             9434 ; 170  |        unsigned int m_bNone     :1;
                             9435 ; 171  |        unsigned int m_bMessage  :1;
                             9436 ; 172  |        unsigned int m_bTimer    :1;
                             9437 ; 173  |        unsigned int m_bButton   :1;
                             9438 ; 174  |    } B;
                             9439 ; 175  |    int I;
                             9440 ; 176  |} ;
                             9441 ; 177  |
                             9442 ; 178  |
                             9443 ; 179  |struct Button {
                             9444 ; 180  |        WORD wButtonEvent;
                             9445 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9446 ; 182  |};
                             9447 ; 183  |
                             9448 ; 184  |struct Message {
                             9449 ; 185  |        WORD wMsgLength;
                             9450 ; 186  |        WORD wMsgCommand;
                             9451 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9452 ; 188  |};
                             9453 ; 189  |
                             9454 ; 190  |union EventTypes {
                             9455 ; 191  |        struct CMessage msg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9456 ; 192  |        struct Button Button ;
                             9457 ; 193  |        struct Message Message;
                             9458 ; 194  |};
                             9459 ; 195  |
                             9460 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9461 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9462 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9463 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9464 ; 200  |
                             9465 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9466 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9467 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9468 ; 204  |
                             9469 ; 205  |#if DEBUG
                             9470 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9471 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9472 ; 208  |#else 
                             9473 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9474 ; 210  |#define DebugBuildAssert(x)    
                             9475 ; 211  |#endif
                             9476 ; 212  |
                             9477 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9478 ; 214  |//  #pragma asm
                             9479 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9480 ; 216  |//  #pragma endasm
                             9481 ; 217  |
                             9482 ; 218  |
                             9483 ; 219  |#ifdef COLOR_262K
                             9484 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9485 ; 221  |#elif defined(COLOR_65K)
                             9486 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9487 ; 223  |#else
                             9488 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9489 ; 225  |#endif
                             9490 ; 226  |    
                             9491 ; 227  |#endif // #ifndef _TYPES_H
                             9492 
                             9494 
                             9495 ; 31   |
                             9496 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9497 ; 33   |
                             9498 ; 34   |//   SPI STMP3500 Registers 
                             9499 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             9500 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9501 ; 37   |
                             9502 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             9503 ; 39   |
                             9504 ; 40   |
                             9505 ; 41   |
                             9506 ; 42   |// /////////////////////////////////////////////
                             9507 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             9508 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             9509 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             9510 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             9511 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             9512 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             9513 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             9514 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9515 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             9516 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             9517 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             9518 ; 54   |
                             9519 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             9520 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             9521 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             9522 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             9523 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             9524 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             9525 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             9526 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             9527 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             9528 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             9529 ; 65   |
                             9530 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             9531 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             9532 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             9533 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             9534 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             9535 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             9536 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             9537 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             9538 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             9539 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             9540 ; 76   |
                             9541 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             9542 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             9543 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             9544 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             9545 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             9546 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             9547 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             9548 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             9549 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             9550 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             9551 ; 87   |
                             9552 ; 88   |typedef union               
                             9553 ; 89   |{
                             9554 ; 90   |    struct {
                             9555 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             9556 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             9557 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             9558 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             9559 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             9560 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             9561 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             9562 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             9563 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             9564 ; 100  |    } B;
                             9565 ; 101  |
                             9566 ; 102  |    int I;
                             9567 ; 103  |    unsigned int U;
                             9568 ; 104  |} spcsr_type;
                             9569 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             9570 ; 106  |
                             9571 ; 107  |// /////////////////////////////////////////////
                             9572 ; 108  |// //  SPI Data Register Bit Definitions
                             9573 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             9574 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             9575 ; 111  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9576 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             9577 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             9578 ; 114  |
                             9579 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             9580 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             9581 ; 117  |
                             9582 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             9583 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             9584 ; 120  |
                             9585 ; 121  |typedef union               
                             9586 ; 122  |{
                             9587 ; 123  |    struct {
                             9588 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             9589 ; 125  |    } B;
                             9590 ; 126  |
                             9591 ; 127  |    int I;
                             9592 ; 128  |    unsigned int U;
                             9593 ; 129  |} spdr_type;
                             9594 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             9595 ; 131  |
                             9596 ; 132  |
                             9597 ; 133  |#endif
                             9598 ; 134  |
                             9599 ; 135  |
                             9600 
                             9602 
                             9603 ; 32   |#include "regsswizzle.h"
                             9604 
                             9606 
                             9607 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9608 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             9609 ; 3    |//;; Filename    : regsswizzle.inc
                             9610 ; 4    |//;; Description : Register definitions for Swizzle interface
                             9611 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9612 ; 6    |
                             9613 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             9614 ; 8    |// The following naming conventions are followed in this file.
                             9615 ; 9    |// All registers are named using the format...
                             9616 ; 10   |//     HW_<module>_<regname>
                             9617 ; 11   |// where <module> is the module name which can be any of the following...
                             9618 ; 12   |//     USB20
                             9619 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             9620 ; 14   |// module name includes a number starting from 0 for the first instance of
                             9621 ; 15   |// that module)
                             9622 ; 16   |// <regname> is the specific register within that module
                             9623 ; 17   |// We also define the following...
                             9624 ; 18   |//     HW_<module>_<regname>_BITPOS
                             9625 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9626 ; 20   |//     HW_<module>_<regname>_SETMASK
                             9627 ; 21   |// which does something else, and
                             9628 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             9629 ; 23   |// which does something else.
                             9630 ; 24   |// Other rules
                             9631 ; 25   |//     All caps
                             9632 ; 26   |//     Numeric identifiers start at 0
                             9633 ; 27   |#if !(defined(regsswizzleinc))
                             9634 ; 28   |#define regsswizzleinc 1
                             9635 ; 29   |
                             9636 ; 30   |#include "types.h"
                             9637 
                             9639 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9640 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9641 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9642 ; 3    |//
                             9643 ; 4    |// Filename: types.h
                             9644 ; 5    |// Description: Standard data types
                             9645 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9646 ; 7    |
                             9647 ; 8    |#ifndef _TYPES_H
                             9648 ; 9    |#define _TYPES_H
                             9649 ; 10   |
                             9650 ; 11   |// TODO:  move this outta here!
                             9651 ; 12   |#if !defined(NOERROR)
                             9652 ; 13   |#define NOERROR 0
                             9653 ; 14   |#define SUCCESS 0
                             9654 ; 15   |#endif 
                             9655 ; 16   |#if !defined(SUCCESS)
                             9656 ; 17   |#define SUCCESS  0
                             9657 ; 18   |#endif
                             9658 ; 19   |#if !defined(ERROR)
                             9659 ; 20   |#define ERROR   -1
                             9660 ; 21   |#endif
                             9661 ; 22   |#if !defined(FALSE)
                             9662 ; 23   |#define FALSE 0
                             9663 ; 24   |#endif
                             9664 ; 25   |#if !defined(TRUE)
                             9665 ; 26   |#define TRUE  1
                             9666 ; 27   |#endif
                             9667 ; 28   |
                             9668 ; 29   |#if !defined(NULL)
                             9669 ; 30   |#define NULL 0
                             9670 ; 31   |#endif
                             9671 ; 32   |
                             9672 ; 33   |#define MAX_INT     0x7FFFFF
                             9673 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9674 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9675 ; 36   |#define MAX_ULONG   (-1) 
                             9676 ; 37   |
                             9677 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9678 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9679 ; 40   |
                             9680 ; 41   |
                             9681 ; 42   |#define BYTE    unsigned char       // btVarName
                             9682 ; 43   |#define CHAR    signed char         // cVarName
                             9683 ; 44   |#define USHORT  unsigned short      // usVarName
                             9684 ; 45   |#define SHORT   unsigned short      // sVarName
                             9685 ; 46   |#define WORD    unsigned int        // wVarName
                             9686 ; 47   |#define INT     signed int          // iVarName
                             9687 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9688 ; 49   |#define LONG    signed long         // lVarName
                             9689 ; 50   |#define BOOL    unsigned int        // bVarName
                             9690 ; 51   |#define FRACT   _fract              // frVarName
                             9691 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9692 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9693 ; 54   |#define FLOAT   float               // fVarName
                             9694 ; 55   |#define DBL     double              // dVarName
                             9695 ; 56   |#define ENUM    enum                // eVarName
                             9696 ; 57   |#define CMX     _complex            // cmxVarName
                             9697 ; 58   |typedef WORD UCS3;                   // 
                             9698 ; 59   |
                             9699 ; 60   |#define UINT16  unsigned short
                             9700 ; 61   |#define UINT8   unsigned char   
                             9701 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9702 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9703 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9704 ; 65   |#define WCHAR   UINT16
                             9705 ; 66   |
                             9706 ; 67   |//UINT128 is 16 bytes or 6 words
                             9707 ; 68   |typedef struct UINT128_3500 {   
                             9708 ; 69   |    int val[6];     
                             9709 ; 70   |} UINT128_3500;
                             9710 ; 71   |
                             9711 ; 72   |#define UINT128   UINT128_3500
                             9712 ; 73   |
                             9713 ; 74   |// Little endian word packed byte strings:   
                             9714 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9715 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9716 ; 77   |// Little endian word packed byte strings:   
                             9717 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9718 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9719 ; 80   |
                             9720 ; 81   |// Declare Memory Spaces To Use When Coding
                             9721 ; 82   |// A. Sector Buffers
                             9722 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9723 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9724 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9725 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9726 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9727 ; 88   |// B. Media DDI Memory
                             9728 ; 89   |#define MEDIA_DDI_MEM _Y
                             9729 ; 90   |
                             9730 ; 91   |
                             9731 ; 92   |
                             9732 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9733 ; 94   |// Examples of circular pointers:
                             9734 ; 95   |//    INT CIRC cpiVarName
                             9735 ; 96   |//    DWORD CIRC cpdwVarName
                             9736 ; 97   |
                             9737 ; 98   |#define RETCODE INT                 // rcVarName
                             9738 ; 99   |
                             9739 ; 100  |// generic bitfield structure
                             9740 ; 101  |struct Bitfield {
                             9741 ; 102  |    unsigned int B0  :1;
                             9742 ; 103  |    unsigned int B1  :1;
                             9743 ; 104  |    unsigned int B2  :1;
                             9744 ; 105  |    unsigned int B3  :1;
                             9745 ; 106  |    unsigned int B4  :1;
                             9746 ; 107  |    unsigned int B5  :1;
                             9747 ; 108  |    unsigned int B6  :1;
                             9748 ; 109  |    unsigned int B7  :1;
                             9749 ; 110  |    unsigned int B8  :1;
                             9750 ; 111  |    unsigned int B9  :1;
                             9751 ; 112  |    unsigned int B10 :1;
                             9752 ; 113  |    unsigned int B11 :1;
                             9753 ; 114  |    unsigned int B12 :1;
                             9754 ; 115  |    unsigned int B13 :1;
                             9755 ; 116  |    unsigned int B14 :1;
                             9756 ; 117  |    unsigned int B15 :1;
                             9757 ; 118  |    unsigned int B16 :1;
                             9758 ; 119  |    unsigned int B17 :1;
                             9759 ; 120  |    unsigned int B18 :1;
                             9760 ; 121  |    unsigned int B19 :1;
                             9761 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9762 ; 123  |    unsigned int B21 :1;
                             9763 ; 124  |    unsigned int B22 :1;
                             9764 ; 125  |    unsigned int B23 :1;
                             9765 ; 126  |};
                             9766 ; 127  |
                             9767 ; 128  |union BitInt {
                             9768 ; 129  |        struct Bitfield B;
                             9769 ; 130  |        int        I;
                             9770 ; 131  |};
                             9771 ; 132  |
                             9772 ; 133  |#define MAX_MSG_LENGTH 10
                             9773 ; 134  |struct CMessage
                             9774 ; 135  |{
                             9775 ; 136  |        unsigned int m_uLength;
                             9776 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9777 ; 138  |};
                             9778 ; 139  |
                             9779 ; 140  |typedef struct {
                             9780 ; 141  |    WORD m_wLength;
                             9781 ; 142  |    WORD m_wMessage;
                             9782 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9783 ; 144  |} Message;
                             9784 ; 145  |
                             9785 ; 146  |struct MessageQueueDescriptor
                             9786 ; 147  |{
                             9787 ; 148  |        int *m_pBase;
                             9788 ; 149  |        int m_iModulo;
                             9789 ; 150  |        int m_iSize;
                             9790 ; 151  |        int *m_pHead;
                             9791 ; 152  |        int *m_pTail;
                             9792 ; 153  |};
                             9793 ; 154  |
                             9794 ; 155  |struct ModuleEntry
                             9795 ; 156  |{
                             9796 ; 157  |    int m_iSignaledEventMask;
                             9797 ; 158  |    int m_iWaitEventMask;
                             9798 ; 159  |    int m_iResourceOfCode;
                             9799 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9800 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9801 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9802 ; 163  |    int m_uTimeOutHigh;
                             9803 ; 164  |    int m_uTimeOutLow;
                             9804 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9805 ; 166  |};
                             9806 ; 167  |
                             9807 ; 168  |union WaitMask{
                             9808 ; 169  |    struct B{
                             9809 ; 170  |        unsigned int m_bNone     :1;
                             9810 ; 171  |        unsigned int m_bMessage  :1;
                             9811 ; 172  |        unsigned int m_bTimer    :1;
                             9812 ; 173  |        unsigned int m_bButton   :1;
                             9813 ; 174  |    } B;
                             9814 ; 175  |    int I;
                             9815 ; 176  |} ;
                             9816 ; 177  |
                             9817 ; 178  |
                             9818 ; 179  |struct Button {
                             9819 ; 180  |        WORD wButtonEvent;
                             9820 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9821 ; 182  |};
                             9822 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9823 ; 184  |struct Message {
                             9824 ; 185  |        WORD wMsgLength;
                             9825 ; 186  |        WORD wMsgCommand;
                             9826 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9827 ; 188  |};
                             9828 ; 189  |
                             9829 ; 190  |union EventTypes {
                             9830 ; 191  |        struct CMessage msg;
                             9831 ; 192  |        struct Button Button ;
                             9832 ; 193  |        struct Message Message;
                             9833 ; 194  |};
                             9834 ; 195  |
                             9835 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9836 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9837 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9838 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9839 ; 200  |
                             9840 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9841 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9842 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9843 ; 204  |
                             9844 ; 205  |#if DEBUG
                             9845 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9846 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9847 ; 208  |#else 
                             9848 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9849 ; 210  |#define DebugBuildAssert(x)    
                             9850 ; 211  |#endif
                             9851 ; 212  |
                             9852 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9853 ; 214  |//  #pragma asm
                             9854 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9855 ; 216  |//  #pragma endasm
                             9856 ; 217  |
                             9857 ; 218  |
                             9858 ; 219  |#ifdef COLOR_262K
                             9859 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9860 ; 221  |#elif defined(COLOR_65K)
                             9861 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9862 ; 223  |#else
                             9863 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9864 ; 225  |#endif
                             9865 ; 226  |    
                             9866 ; 227  |#endif // #ifndef _TYPES_H
                             9867 
                             9869 
                             9870 ; 31   |
                             9871 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9872 ; 33   |
                             9873 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9874 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9875 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9876 ; 37   |
                             9877 ; 38   |
                             9878 ; 39   |
                             9879 ; 40   |
                             9880 ; 41   |
                             9881 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9882 ; 43   |
                             9883 ; 44   |
                             9884 ; 45   |
                             9885 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9886 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9887 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9888 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9889 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9890 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9891 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9892 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9893 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9894 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             9895 ; 56   |
                             9896 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9897 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9898 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9899 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9900 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9901 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9902 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9903 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9904 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9905 ; 66   |
                             9906 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                             9907 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                             9908 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                             9909 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                             9910 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                             9911 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                             9912 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                             9913 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                             9914 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                             9915 ; 76   |
                             9916 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9917 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9918 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9919 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9920 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9921 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9922 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9923 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9924 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9925 ; 86   |
                             9926 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9927 ; 88   |//  Bit Manipulation Unit Registers
                             9928 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9929 ; 90   |typedef union
                             9930 ; 91   |{
                             9931 ; 92   |    struct
                             9932 ; 93   |    {
                             9933 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9934 ; 95   |    int LA      :1;     /* Left Align Data                          */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9935 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9936 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9937 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9938 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9939 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9940 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9941 ; 102  |    } B;
                             9942 ; 103  |    int I;
                             9943 ; 104  |    unsigned U;
                             9944 ; 105  |} swizzlecsr1_type;
                             9945 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9946 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
                             9947 ; 108  |
                             9948 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9949 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9950 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9951 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9952 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9953 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9954 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9955 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9956 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9957 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9958 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9959 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9960 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9961 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9962 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9963 ; 124  |
                             9964 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9965 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9966 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9967 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9968 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9969 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9970 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9971 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9972 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9973 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9974 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9975 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9976 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9977 ; 138  |
                             9978 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                             9979 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                             9980 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                             9981 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                             9982 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                             9983 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                             9984 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                             9985 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                             9986 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9987 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                             9988 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
                             9989 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                             9990 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                             9991 ; 152  |
                             9992 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9993 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9994 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9995 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             9996 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9997 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9998 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9999 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                            10000 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                            10001 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                            10002 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                            10003 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                            10004 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                            10005 ; 166  |
                            10006 ; 167  |///////////////////////////////////////////////////////////////////////////////
                            10007 ; 168  |typedef union
                            10008 ; 169  |{
                            10009 ; 170  |    struct
                            10010 ; 171  |    {
                            10011 ; 172  |    int KICK    :1;         /* Start transfer                      */
                            10012 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                            10013 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                            10014 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                            10015 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                            10016 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                            10017 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                            10018 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                            10019 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                            10020 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                            10021 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                            10022 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                            10023 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                            10024 ; 185  |    } B;
                            10025 ; 186  |    unsigned int I;
                            10026 ; 187  |    unsigned int U;
                            10027 ; 188  |} swizzlecsr2_type;
                            10028 ; 189  |///////////////////////////////////////////////////////////////////////////////
                            10029 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                            10030 ; 191  |
                            10031 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                            10032 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                            10033 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                            10034 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                            10035 ; 196  |
                            10036 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                            10037 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                            10038 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                            10039 ; 200  |
                            10040 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                            10041 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10042 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                            10043 ; 204  |
                            10044 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                            10045 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                            10046 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                            10047 ; 208  |
                            10048 ; 209  |///////////////////////////////////////////////////////////////////////////////
                            10049 ; 210  |typedef union
                            10050 ; 211  |{
                            10051 ; 212  |    struct
                            10052 ; 213  |    {
                            10053 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                            10054 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                            10055 ; 216  |    } B;
                            10056 ; 217  |    int I;
                            10057 ; 218  |    unsigned U;
                            10058 ; 219  |} swizzlesizer_type;
                            10059 ; 220  |///////////////////////////////////////////////////////////////////////////////
                            10060 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                            10061 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                            10062 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                            10063 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                            10064 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                            10065 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                            10066 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                            10067 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                            10068 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                            10069 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                            10070 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                            10071 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                            10072 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                            10073 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                            10074 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                            10075 ; 236  |
                            10076 ; 237  |
                            10077 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                            10078 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                            10079 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                            10080 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                            10081 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                            10082 ; 243  |
                            10083 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                            10084 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                            10085 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                            10086 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                            10087 ; 248  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10088 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                            10089 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
                            10090 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                            10091 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                            10092 ; 253  |
                            10093 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                            10094 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                            10095 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                            10096 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                            10097 ; 258  |
                            10098 ; 259  |///////////////////////////////////////////////////////////////////////////////
                            10099 ; 260  |typedef union
                            10100 ; 261  |{
                            10101 ; 262  |    struct
                            10102 ; 263  |    {
                            10103 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                            10104 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                            10105 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                            10106 ; 267  |    } B;
                            10107 ; 268  |    int I;
                            10108 ; 269  |    unsigned U;
                            10109 ; 270  |} swizzlediv3ur_type;
                            10110 ; 271  |///////////////////////////////////////////////////////////////////////////////
                            10111 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                            10112 ; 273  |
                            10113 ; 274  |#endif
                            10114 ; 275  |
                            10115 
                            10117 
                            10118 ; 33   |#include "regssdram.h"
                            10119 
                            10121 
                            10122 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10123 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10124 ; 3    |//;  File        : regssdram.inc
                            10125 ; 4    |//;  Description : Mixed Signal IP Register definition
                            10126 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10127 ; 6    |
                            10128 ; 7    |// The following naming conventions are followed in this file.
                            10129 ; 8    |// All registers are named using the format...
                            10130 ; 9    |//     HW_<module>_<regname>
                            10131 ; 10   |// where <module> is the module name which can be any of the following...
                            10132 ; 11   |//     SYSTEM
                            10133 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10134 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10135 ; 14   |// that module)
                            10136 ; 15   |// <regname> is the specific register within that module
                            10137 ; 16   |// We also define the following...
                            10138 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10139 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10140 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10141 ; 20   |// which does something else, and
                            10142 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10143 ; 22   |// which does something else.
                            10144 ; 23   |// Other rules
                            10145 ; 24   |//     All caps
                            10146 ; 25   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10147 ; 26   |
                            10148 ; 27   |#if !(defined(regssdraminc))
                            10149 ; 28   |#define regssdraminc 1
                            10150 ; 29   |
                            10151 ; 30   |#include "types.h"
                            10152 
                            10154 
                            10155 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10156 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10157 ; 3    |//
                            10158 ; 4    |// Filename: types.h
                            10159 ; 5    |// Description: Standard data types
                            10160 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10161 ; 7    |
                            10162 ; 8    |#ifndef _TYPES_H
                            10163 ; 9    |#define _TYPES_H
                            10164 ; 10   |
                            10165 ; 11   |// TODO:  move this outta here!
                            10166 ; 12   |#if !defined(NOERROR)
                            10167 ; 13   |#define NOERROR 0
                            10168 ; 14   |#define SUCCESS 0
                            10169 ; 15   |#endif 
                            10170 ; 16   |#if !defined(SUCCESS)
                            10171 ; 17   |#define SUCCESS  0
                            10172 ; 18   |#endif
                            10173 ; 19   |#if !defined(ERROR)
                            10174 ; 20   |#define ERROR   -1
                            10175 ; 21   |#endif
                            10176 ; 22   |#if !defined(FALSE)
                            10177 ; 23   |#define FALSE 0
                            10178 ; 24   |#endif
                            10179 ; 25   |#if !defined(TRUE)
                            10180 ; 26   |#define TRUE  1
                            10181 ; 27   |#endif
                            10182 ; 28   |
                            10183 ; 29   |#if !defined(NULL)
                            10184 ; 30   |#define NULL 0
                            10185 ; 31   |#endif
                            10186 ; 32   |
                            10187 ; 33   |#define MAX_INT     0x7FFFFF
                            10188 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10189 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10190 ; 36   |#define MAX_ULONG   (-1) 
                            10191 ; 37   |
                            10192 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10193 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10194 ; 40   |
                            10195 ; 41   |
                            10196 ; 42   |#define BYTE    unsigned char       // btVarName
                            10197 ; 43   |#define CHAR    signed char         // cVarName
                            10198 ; 44   |#define USHORT  unsigned short      // usVarName
                            10199 ; 45   |#define SHORT   unsigned short      // sVarName
                            10200 ; 46   |#define WORD    unsigned int        // wVarName
                            10201 ; 47   |#define INT     signed int          // iVarName
                            10202 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10203 ; 49   |#define LONG    signed long         // lVarName
                            10204 ; 50   |#define BOOL    unsigned int        // bVarName
                            10205 ; 51   |#define FRACT   _fract              // frVarName
                            10206 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10207 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10208 ; 54   |#define FLOAT   float               // fVarName
                            10209 ; 55   |#define DBL     double              // dVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10210 ; 56   |#define ENUM    enum                // eVarName
                            10211 ; 57   |#define CMX     _complex            // cmxVarName
                            10212 ; 58   |typedef WORD UCS3;                   // 
                            10213 ; 59   |
                            10214 ; 60   |#define UINT16  unsigned short
                            10215 ; 61   |#define UINT8   unsigned char   
                            10216 ; 62   |#define UINT32  unsigned long
                            10217 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10218 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10219 ; 65   |#define WCHAR   UINT16
                            10220 ; 66   |
                            10221 ; 67   |//UINT128 is 16 bytes or 6 words
                            10222 ; 68   |typedef struct UINT128_3500 {   
                            10223 ; 69   |    int val[6];     
                            10224 ; 70   |} UINT128_3500;
                            10225 ; 71   |
                            10226 ; 72   |#define UINT128   UINT128_3500
                            10227 ; 73   |
                            10228 ; 74   |// Little endian word packed byte strings:   
                            10229 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10230 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10231 ; 77   |// Little endian word packed byte strings:   
                            10232 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10233 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10234 ; 80   |
                            10235 ; 81   |// Declare Memory Spaces To Use When Coding
                            10236 ; 82   |// A. Sector Buffers
                            10237 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10238 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10239 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10240 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10241 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10242 ; 88   |// B. Media DDI Memory
                            10243 ; 89   |#define MEDIA_DDI_MEM _Y
                            10244 ; 90   |
                            10245 ; 91   |
                            10246 ; 92   |
                            10247 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10248 ; 94   |// Examples of circular pointers:
                            10249 ; 95   |//    INT CIRC cpiVarName
                            10250 ; 96   |//    DWORD CIRC cpdwVarName
                            10251 ; 97   |
                            10252 ; 98   |#define RETCODE INT                 // rcVarName
                            10253 ; 99   |
                            10254 ; 100  |// generic bitfield structure
                            10255 ; 101  |struct Bitfield {
                            10256 ; 102  |    unsigned int B0  :1;
                            10257 ; 103  |    unsigned int B1  :1;
                            10258 ; 104  |    unsigned int B2  :1;
                            10259 ; 105  |    unsigned int B3  :1;
                            10260 ; 106  |    unsigned int B4  :1;
                            10261 ; 107  |    unsigned int B5  :1;
                            10262 ; 108  |    unsigned int B6  :1;
                            10263 ; 109  |    unsigned int B7  :1;
                            10264 ; 110  |    unsigned int B8  :1;
                            10265 ; 111  |    unsigned int B9  :1;
                            10266 ; 112  |    unsigned int B10 :1;
                            10267 ; 113  |    unsigned int B11 :1;
                            10268 ; 114  |    unsigned int B12 :1;
                            10269 ; 115  |    unsigned int B13 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10270 ; 116  |    unsigned int B14 :1;
                            10271 ; 117  |    unsigned int B15 :1;
                            10272 ; 118  |    unsigned int B16 :1;
                            10273 ; 119  |    unsigned int B17 :1;
                            10274 ; 120  |    unsigned int B18 :1;
                            10275 ; 121  |    unsigned int B19 :1;
                            10276 ; 122  |    unsigned int B20 :1;
                            10277 ; 123  |    unsigned int B21 :1;
                            10278 ; 124  |    unsigned int B22 :1;
                            10279 ; 125  |    unsigned int B23 :1;
                            10280 ; 126  |};
                            10281 ; 127  |
                            10282 ; 128  |union BitInt {
                            10283 ; 129  |        struct Bitfield B;
                            10284 ; 130  |        int        I;
                            10285 ; 131  |};
                            10286 ; 132  |
                            10287 ; 133  |#define MAX_MSG_LENGTH 10
                            10288 ; 134  |struct CMessage
                            10289 ; 135  |{
                            10290 ; 136  |        unsigned int m_uLength;
                            10291 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10292 ; 138  |};
                            10293 ; 139  |
                            10294 ; 140  |typedef struct {
                            10295 ; 141  |    WORD m_wLength;
                            10296 ; 142  |    WORD m_wMessage;
                            10297 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10298 ; 144  |} Message;
                            10299 ; 145  |
                            10300 ; 146  |struct MessageQueueDescriptor
                            10301 ; 147  |{
                            10302 ; 148  |        int *m_pBase;
                            10303 ; 149  |        int m_iModulo;
                            10304 ; 150  |        int m_iSize;
                            10305 ; 151  |        int *m_pHead;
                            10306 ; 152  |        int *m_pTail;
                            10307 ; 153  |};
                            10308 ; 154  |
                            10309 ; 155  |struct ModuleEntry
                            10310 ; 156  |{
                            10311 ; 157  |    int m_iSignaledEventMask;
                            10312 ; 158  |    int m_iWaitEventMask;
                            10313 ; 159  |    int m_iResourceOfCode;
                            10314 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10315 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10316 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10317 ; 163  |    int m_uTimeOutHigh;
                            10318 ; 164  |    int m_uTimeOutLow;
                            10319 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10320 ; 166  |};
                            10321 ; 167  |
                            10322 ; 168  |union WaitMask{
                            10323 ; 169  |    struct B{
                            10324 ; 170  |        unsigned int m_bNone     :1;
                            10325 ; 171  |        unsigned int m_bMessage  :1;
                            10326 ; 172  |        unsigned int m_bTimer    :1;
                            10327 ; 173  |        unsigned int m_bButton   :1;
                            10328 ; 174  |    } B;
                            10329 ; 175  |    int I;
                            10330 ; 176  |} ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10331 ; 177  |
                            10332 ; 178  |
                            10333 ; 179  |struct Button {
                            10334 ; 180  |        WORD wButtonEvent;
                            10335 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10336 ; 182  |};
                            10337 ; 183  |
                            10338 ; 184  |struct Message {
                            10339 ; 185  |        WORD wMsgLength;
                            10340 ; 186  |        WORD wMsgCommand;
                            10341 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10342 ; 188  |};
                            10343 ; 189  |
                            10344 ; 190  |union EventTypes {
                            10345 ; 191  |        struct CMessage msg;
                            10346 ; 192  |        struct Button Button ;
                            10347 ; 193  |        struct Message Message;
                            10348 ; 194  |};
                            10349 ; 195  |
                            10350 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10351 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10352 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10353 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10354 ; 200  |
                            10355 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10356 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10357 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10358 ; 204  |
                            10359 ; 205  |#if DEBUG
                            10360 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10361 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10362 ; 208  |#else 
                            10363 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10364 ; 210  |#define DebugBuildAssert(x)    
                            10365 ; 211  |#endif
                            10366 ; 212  |
                            10367 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10368 ; 214  |//  #pragma asm
                            10369 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10370 ; 216  |//  #pragma endasm
                            10371 ; 217  |
                            10372 ; 218  |
                            10373 ; 219  |#ifdef COLOR_262K
                            10374 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10375 ; 221  |#elif defined(COLOR_65K)
                            10376 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10377 ; 223  |#else
                            10378 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10379 ; 225  |#endif
                            10380 ; 226  |    
                            10381 ; 227  |#endif // #ifndef _TYPES_H
                            10382 
                            10384 
                            10385 ; 31   |
                            10386 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            10387 ; 33   |
                            10388 ; 34   |
                            10389 ; 35   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10390 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            10391 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            10392 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            10393 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            10394 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            10395 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            10396 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            10397 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            10398 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            10399 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            10400 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            10401 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            10402 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                            10403 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            10404 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            10405 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            10406 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            10407 ; 53   |
                            10408 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            10409 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            10410 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            10411 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            10412 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            10413 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            10414 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            10415 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            10416 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            10417 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            10418 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            10419 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            10420 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            10421 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            10422 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            10423 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            10424 ; 70   |
                            10425 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                            10426 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            10427 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                            10428 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                            10429 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            10430 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                            10431 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                            10432 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                            10433 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                            10434 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                            10435 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                            10436 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                            10437 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                            10438 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10439 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                            10440 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                            10441 ; 87   |
                            10442 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            10443 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            10444 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            10445 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            10446 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            10447 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            10448 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            10449 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            10450 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                            10451 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            10452 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            10453 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            10454 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            10455 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            10456 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            10457 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            10458 ; 104  |
                            10459 ; 105  |typedef union               
                            10460 ; 106  |{
                            10461 ; 107  |    struct {
                            10462 ; 108  |        int SDRAMEN                     :1;
                            10463 ; 109  |        int IE                          :1;
                            10464 ; 110  |        int RNW                         :1;
                            10465 ; 111  |        int KICK                        :1;
                            10466 ; 112  |        int LM                          :1;
                            10467 ; 113  |        int ISTAT                       :1;
                            10468 ; 114  |        int PWDN                        :1;
                            10469 ; 115  |        int RSVD                        :1;
                            10470 ; 116  |        int SBYTE                       :2;
                            10471 ; 117  |        int MEM                         :2;
                            10472 ; 118  |        int BIGE                        :1;
                            10473 ; 119  |        int ASIZE                       :3;
                            10474 ; 120  |        int UKICK                       :1;
                            10475 ; 121  |        int DIV                         :4;
                            10476 ; 122  |        int MULTI                       :1;
                            10477 ; 123  |        int SDRAM                       :1;
                            10478 ; 124  |        int SIGN                        :1;
                            10479 ; 125  |    } B;
                            10480 ; 126  |    int I;
                            10481 ; 127  |} sdramcsr_type;
                            10482 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            10483 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            10484 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            10485 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            10486 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            10487 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            10488 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            10489 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            10490 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            10491 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            10492 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            10493 ; 139  |
                            10494 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            10495 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            10496 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            10497 ; 143  |
                            10498 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10499 ; 145  |
                            10500 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            10501 ; 147  |
                            10502 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            10503 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            10504 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            10505 ; 151  |
                            10506 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            10507 ; 153  |
                            10508 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            10509 ; 155  |
                            10510 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            10511 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            10512 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                            10513 ; 159  |
                            10514 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            10515 ; 161  |
                            10516 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            10517 ; 163  |
                            10518 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            10519 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            10520 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            10521 ; 167  |
                            10522 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            10523 ; 169  |
                            10524 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            10525 ; 171  |
                            10526 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            10527 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            10528 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            10529 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            10530 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            10531 ; 177  |
                            10532 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            10533 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            10534 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            10535 ; 181  |
                            10536 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                            10537 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                            10538 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                            10539 ; 185  |
                            10540 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            10541 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            10542 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            10543 ; 189  |
                            10544 ; 190  |typedef union               
                            10545 ; 191  |{
                            10546 ; 192  |    struct {
                            10547 ; 193  |        int INIT                :16;
                            10548 ; 194  |        int TRP                 :4;
                            10549 ; 195  |        int TRFC                :4;
                            10550 ; 196  |    } B;
                            10551 ; 197  |    int I;
                            10552 ; 198  |} sdramtimer1_type;
                            10553 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            10554 ; 200  |
                            10555 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            10556 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            10557 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10558 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            10559 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            10560 ; 206  |
                            10561 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            10562 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            10563 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            10564 ; 210  |
                            10565 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                            10566 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                            10567 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                            10568 ; 214  |
                            10569 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            10570 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            10571 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            10572 ; 218  |
                            10573 ; 219  |typedef union               
                            10574 ; 220  |{
                            10575 ; 221  |    struct {
                            10576 ; 222  |        int TXSR                :4;
                            10577 ; 223  |        int TREF                :12;
                            10578 ; 224  |        int TRCD                :4;
                            10579 ; 225  |        int RSVD                :4; 
                            10580 ; 226  |    } B;
                            10581 ; 227  |    int I;
                            10582 ; 228  |} sdramtimer2_type;
                            10583 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            10584 ; 230  |
                            10585 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            10586 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            10587 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            10588 ; 234  |
                            10589 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            10590 ; 236  |
                            10591 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            10592 ; 238  |
                            10593 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            10594 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            10595 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            10596 ; 242  |
                            10597 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            10598 ; 244  |
                            10599 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            10600 ; 246  |
                            10601 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            10602 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            10603 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            10604 ; 250  |
                            10605 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            10606 ; 252  |
                            10607 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                            10608 ; 254  |
                            10609 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            10610 ; 256  |
                            10611 ; 257  |typedef union               
                            10612 ; 258  |{
                            10613 ; 259  |    struct {
                            10614 ; 260  |        int VALUE               :14;
                            10615 ; 261  |        int RSVD                :10; 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10616 ; 262  |    } B;
                            10617 ; 263  |    int I;
                            10618 ; 264  |} sdrammode_type;
                            10619 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            10620 ; 266  |
                            10621 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            10622 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            10623 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            10624 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            10625 ; 271  |
                            10626 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            10627 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            10628 ; 274  |
                            10629 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                            10630 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                            10631 ; 277  |
                            10632 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            10633 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            10634 ; 280  |
                            10635 ; 281  |typedef union               
                            10636 ; 282  |{
                            10637 ; 283  |    struct {
                            10638 ; 284  |        int COLWIDTH               :4;
                            10639 ; 285  |        int ROWWIDTH               :4; 
                            10640 ; 286  |    } B;
                            10641 ; 287  |    int I;
                            10642 ; 288  |} sdramtype_type;
                            10643 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            10644 ; 290  |
                            10645 ; 291  |#endif
                            10646 ; 292  |
                            10647 ; 293  |
                            10648 ; 294  |
                            10649 ; 295  |
                            10650 ; 296  |
                            10651 ; 297  |
                            10652 
                            10654 
                            10655 ; 34   |#include "regstb.h"
                            10656 
                            10658 
                            10659 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10660 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            10661 ; 3    |// Filename: regstb.inc
                            10662 ; 4    |// Description: Register definitions for Trace Buffer
                            10663 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10664 ; 6    |// The following naming conventions are followed in this file.
                            10665 ; 7    |// All registers are named using the format...
                            10666 ; 8    |//     HW_<module>_<regname>
                            10667 ; 9    |// where <module> is the module name which can be any of the following...
                            10668 ; 10   |//     USB20
                            10669 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10670 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10671 ; 13   |// that module)
                            10672 ; 14   |// <regname> is the specific register within that module
                            10673 ; 15   |// We also define the following...
                            10674 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10675 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10676 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10677 ; 19   |// which does something else, and
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10678 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10679 ; 21   |// which does something else.
                            10680 ; 22   |// Other rules
                            10681 ; 23   |//     All caps
                            10682 ; 24   |//     Numeric identifiers start at 0
                            10683 ; 25   |#if !(defined(regstbinc))
                            10684 ; 26   |#define regstbinc 1
                            10685 ; 27   |
                            10686 ; 28   |#include "types.h"
                            10687 
                            10689 
                            10690 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10691 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10692 ; 3    |//
                            10693 ; 4    |// Filename: types.h
                            10694 ; 5    |// Description: Standard data types
                            10695 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10696 ; 7    |
                            10697 ; 8    |#ifndef _TYPES_H
                            10698 ; 9    |#define _TYPES_H
                            10699 ; 10   |
                            10700 ; 11   |// TODO:  move this outta here!
                            10701 ; 12   |#if !defined(NOERROR)
                            10702 ; 13   |#define NOERROR 0
                            10703 ; 14   |#define SUCCESS 0
                            10704 ; 15   |#endif 
                            10705 ; 16   |#if !defined(SUCCESS)
                            10706 ; 17   |#define SUCCESS  0
                            10707 ; 18   |#endif
                            10708 ; 19   |#if !defined(ERROR)
                            10709 ; 20   |#define ERROR   -1
                            10710 ; 21   |#endif
                            10711 ; 22   |#if !defined(FALSE)
                            10712 ; 23   |#define FALSE 0
                            10713 ; 24   |#endif
                            10714 ; 25   |#if !defined(TRUE)
                            10715 ; 26   |#define TRUE  1
                            10716 ; 27   |#endif
                            10717 ; 28   |
                            10718 ; 29   |#if !defined(NULL)
                            10719 ; 30   |#define NULL 0
                            10720 ; 31   |#endif
                            10721 ; 32   |
                            10722 ; 33   |#define MAX_INT     0x7FFFFF
                            10723 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10724 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10725 ; 36   |#define MAX_ULONG   (-1) 
                            10726 ; 37   |
                            10727 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10728 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10729 ; 40   |
                            10730 ; 41   |
                            10731 ; 42   |#define BYTE    unsigned char       // btVarName
                            10732 ; 43   |#define CHAR    signed char         // cVarName
                            10733 ; 44   |#define USHORT  unsigned short      // usVarName
                            10734 ; 45   |#define SHORT   unsigned short      // sVarName
                            10735 ; 46   |#define WORD    unsigned int        // wVarName
                            10736 ; 47   |#define INT     signed int          // iVarName
                            10737 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10738 ; 49   |#define LONG    signed long         // lVarName
                            10739 ; 50   |#define BOOL    unsigned int        // bVarName
                            10740 ; 51   |#define FRACT   _fract              // frVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10741 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10742 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10743 ; 54   |#define FLOAT   float               // fVarName
                            10744 ; 55   |#define DBL     double              // dVarName
                            10745 ; 56   |#define ENUM    enum                // eVarName
                            10746 ; 57   |#define CMX     _complex            // cmxVarName
                            10747 ; 58   |typedef WORD UCS3;                   // 
                            10748 ; 59   |
                            10749 ; 60   |#define UINT16  unsigned short
                            10750 ; 61   |#define UINT8   unsigned char   
                            10751 ; 62   |#define UINT32  unsigned long
                            10752 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10753 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10754 ; 65   |#define WCHAR   UINT16
                            10755 ; 66   |
                            10756 ; 67   |//UINT128 is 16 bytes or 6 words
                            10757 ; 68   |typedef struct UINT128_3500 {   
                            10758 ; 69   |    int val[6];     
                            10759 ; 70   |} UINT128_3500;
                            10760 ; 71   |
                            10761 ; 72   |#define UINT128   UINT128_3500
                            10762 ; 73   |
                            10763 ; 74   |// Little endian word packed byte strings:   
                            10764 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10765 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10766 ; 77   |// Little endian word packed byte strings:   
                            10767 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10768 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10769 ; 80   |
                            10770 ; 81   |// Declare Memory Spaces To Use When Coding
                            10771 ; 82   |// A. Sector Buffers
                            10772 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10773 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10774 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10775 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10776 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10777 ; 88   |// B. Media DDI Memory
                            10778 ; 89   |#define MEDIA_DDI_MEM _Y
                            10779 ; 90   |
                            10780 ; 91   |
                            10781 ; 92   |
                            10782 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10783 ; 94   |// Examples of circular pointers:
                            10784 ; 95   |//    INT CIRC cpiVarName
                            10785 ; 96   |//    DWORD CIRC cpdwVarName
                            10786 ; 97   |
                            10787 ; 98   |#define RETCODE INT                 // rcVarName
                            10788 ; 99   |
                            10789 ; 100  |// generic bitfield structure
                            10790 ; 101  |struct Bitfield {
                            10791 ; 102  |    unsigned int B0  :1;
                            10792 ; 103  |    unsigned int B1  :1;
                            10793 ; 104  |    unsigned int B2  :1;
                            10794 ; 105  |    unsigned int B3  :1;
                            10795 ; 106  |    unsigned int B4  :1;
                            10796 ; 107  |    unsigned int B5  :1;
                            10797 ; 108  |    unsigned int B6  :1;
                            10798 ; 109  |    unsigned int B7  :1;
                            10799 ; 110  |    unsigned int B8  :1;
                            10800 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10801 ; 112  |    unsigned int B10 :1;
                            10802 ; 113  |    unsigned int B11 :1;
                            10803 ; 114  |    unsigned int B12 :1;
                            10804 ; 115  |    unsigned int B13 :1;
                            10805 ; 116  |    unsigned int B14 :1;
                            10806 ; 117  |    unsigned int B15 :1;
                            10807 ; 118  |    unsigned int B16 :1;
                            10808 ; 119  |    unsigned int B17 :1;
                            10809 ; 120  |    unsigned int B18 :1;
                            10810 ; 121  |    unsigned int B19 :1;
                            10811 ; 122  |    unsigned int B20 :1;
                            10812 ; 123  |    unsigned int B21 :1;
                            10813 ; 124  |    unsigned int B22 :1;
                            10814 ; 125  |    unsigned int B23 :1;
                            10815 ; 126  |};
                            10816 ; 127  |
                            10817 ; 128  |union BitInt {
                            10818 ; 129  |        struct Bitfield B;
                            10819 ; 130  |        int        I;
                            10820 ; 131  |};
                            10821 ; 132  |
                            10822 ; 133  |#define MAX_MSG_LENGTH 10
                            10823 ; 134  |struct CMessage
                            10824 ; 135  |{
                            10825 ; 136  |        unsigned int m_uLength;
                            10826 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10827 ; 138  |};
                            10828 ; 139  |
                            10829 ; 140  |typedef struct {
                            10830 ; 141  |    WORD m_wLength;
                            10831 ; 142  |    WORD m_wMessage;
                            10832 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10833 ; 144  |} Message;
                            10834 ; 145  |
                            10835 ; 146  |struct MessageQueueDescriptor
                            10836 ; 147  |{
                            10837 ; 148  |        int *m_pBase;
                            10838 ; 149  |        int m_iModulo;
                            10839 ; 150  |        int m_iSize;
                            10840 ; 151  |        int *m_pHead;
                            10841 ; 152  |        int *m_pTail;
                            10842 ; 153  |};
                            10843 ; 154  |
                            10844 ; 155  |struct ModuleEntry
                            10845 ; 156  |{
                            10846 ; 157  |    int m_iSignaledEventMask;
                            10847 ; 158  |    int m_iWaitEventMask;
                            10848 ; 159  |    int m_iResourceOfCode;
                            10849 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10850 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10851 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10852 ; 163  |    int m_uTimeOutHigh;
                            10853 ; 164  |    int m_uTimeOutLow;
                            10854 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10855 ; 166  |};
                            10856 ; 167  |
                            10857 ; 168  |union WaitMask{
                            10858 ; 169  |    struct B{
                            10859 ; 170  |        unsigned int m_bNone     :1;
                            10860 ; 171  |        unsigned int m_bMessage  :1;
                            10861 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10862 ; 173  |        unsigned int m_bButton   :1;
                            10863 ; 174  |    } B;
                            10864 ; 175  |    int I;
                            10865 ; 176  |} ;
                            10866 ; 177  |
                            10867 ; 178  |
                            10868 ; 179  |struct Button {
                            10869 ; 180  |        WORD wButtonEvent;
                            10870 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10871 ; 182  |};
                            10872 ; 183  |
                            10873 ; 184  |struct Message {
                            10874 ; 185  |        WORD wMsgLength;
                            10875 ; 186  |        WORD wMsgCommand;
                            10876 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10877 ; 188  |};
                            10878 ; 189  |
                            10879 ; 190  |union EventTypes {
                            10880 ; 191  |        struct CMessage msg;
                            10881 ; 192  |        struct Button Button ;
                            10882 ; 193  |        struct Message Message;
                            10883 ; 194  |};
                            10884 ; 195  |
                            10885 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10886 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10887 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10888 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10889 ; 200  |
                            10890 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10891 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10892 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10893 ; 204  |
                            10894 ; 205  |#if DEBUG
                            10895 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10896 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10897 ; 208  |#else 
                            10898 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10899 ; 210  |#define DebugBuildAssert(x)    
                            10900 ; 211  |#endif
                            10901 ; 212  |
                            10902 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10903 ; 214  |//  #pragma asm
                            10904 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10905 ; 216  |//  #pragma endasm
                            10906 ; 217  |
                            10907 ; 218  |
                            10908 ; 219  |#ifdef COLOR_262K
                            10909 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10910 ; 221  |#elif defined(COLOR_65K)
                            10911 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10912 ; 223  |#else
                            10913 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10914 ; 225  |#endif
                            10915 ; 226  |    
                            10916 ; 227  |#endif // #ifndef _TYPES_H
                            10917 
                            10919 
                            10920 ; 29   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10921 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10922 ; 31   |
                            10923 ; 32   |//   Trace Buffer STMP Registers 
                            10924 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10925 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10926 ; 35   |
                            10927 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10928 ; 37   |
                            10929 ; 38   |
                            10930 ; 39   |
                            10931 ; 40   |
                            10932 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10933 ; 42   |
                            10934 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10935 ; 44   |
                            10936 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10937 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10938 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10939 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10940 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10941 ; 50   |
                            10942 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10943 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10944 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10945 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10946 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10947 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10948 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10949 ; 58   |
                            10950 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            10951 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            10952 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10953 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            10954 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            10955 ; 64   |
                            10956 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10957 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10958 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10959 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10960 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10961 ; 70   |
                            10962 ; 71   |typedef union               
                            10963 ; 72   |{
                            10964 ; 73   |    struct {
                            10965 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10966 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10967 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10968 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10969 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10970 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10971 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10972 ; 81   |    } B;
                            10973 ; 82   |    int I;
                            10974 ; 83   |    unsigned int U;
                            10975 ; 84   |} tb_cfg_type;
                            10976 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            10977 ; 86   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10978 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10979 ; 88   |
                            10980 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10981 ; 90   |
                            10982 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10983 ; 92   |
                            10984 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10985 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10986 ; 95   |
                            10987 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            10988 ; 97   |
                            10989 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            10990 ; 99   |
                            10991 ; 100  |typedef union               
                            10992 ; 101  |{
                            10993 ; 102  |    struct {
                            10994 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10995 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10996 ; 105  |    } B;
                            10997 ; 106  |    int I;
                            10998 ; 107  |    unsigned int U;
                            10999 ; 108  |} tb_bar_type;
                            11000 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            11001 ; 110  |
                            11002 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11003 ; 112  |
                            11004 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            11005 ; 114  |
                            11006 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            11007 ; 116  |
                            11008 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            11009 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            11010 ; 119  |
                            11011 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            11012 ; 121  |
                            11013 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            11014 ; 123  |
                            11015 ; 124  |typedef union               
                            11016 ; 125  |{
                            11017 ; 126  |    struct {
                            11018 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            11019 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            11020 ; 129  |    } B;
                            11021 ; 130  |    int I;
                            11022 ; 131  |    unsigned int U;
                            11023 ; 132  |} tb_mod_type;
                            11024 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            11025 ; 134  |
                            11026 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            11027 ; 136  |
                            11028 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            11029 ; 138  |
                            11030 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            11031 ; 140  |
                            11032 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            11033 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            11034 ; 143  |
                            11035 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11036 ; 145  |
                            11037 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            11038 ; 147  |
                            11039 ; 148  |typedef union               
                            11040 ; 149  |{
                            11041 ; 150  |    struct {
                            11042 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            11043 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            11044 ; 153  |    } B;
                            11045 ; 154  |    int I;
                            11046 ; 155  |    unsigned int U;
                            11047 ; 156  |} tb_cir_type;
                            11048 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            11049 ; 158  |
                            11050 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            11051 ; 160  |
                            11052 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            11053 ; 162  |
                            11054 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            11055 ; 164  |
                            11056 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            11057 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            11058 ; 167  |
                            11059 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            11060 ; 169  |
                            11061 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            11062 ; 171  |
                            11063 ; 172  |typedef union               
                            11064 ; 173  |{
                            11065 ; 174  |    struct {
                            11066 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            11067 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            11068 ; 177  |    } B;
                            11069 ; 178  |    int I;
                            11070 ; 179  |    unsigned int U;
                            11071 ; 180  |} tb_obc_type;
                            11072 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            11073 ; 182  |
                            11074 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            11075 ; 184  |
                            11076 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            11077 ; 186  |
                            11078 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            11079 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            11080 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            11081 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            11082 ; 191  |
                            11083 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            11084 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            11085 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            11086 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            11087 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            11088 ; 197  |
                            11089 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            11090 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            11091 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11092 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            11093 ; 202  |
                            11094 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            11095 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            11096 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            11097 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            11098 ; 207  |
                            11099 ; 208  |typedef union               
                            11100 ; 209  |{
                            11101 ; 210  |    struct {
                            11102 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            11103 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            11104 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            11105 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            11106 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            11107 ; 216  |    } B;
                            11108 ; 217  |    int I;
                            11109 ; 218  |    unsigned int U;
                            11110 ; 219  |} tb_tcs_type;
                            11111 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            11112 ; 221  |
                            11113 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            11114 ; 223  |
                            11115 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            11116 ; 225  |
                            11117 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            11118 ; 227  |
                            11119 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            11120 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            11121 ; 230  |
                            11122 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            11123 ; 232  |
                            11124 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            11125 ; 234  |
                            11126 ; 235  |typedef union               
                            11127 ; 236  |{
                            11128 ; 237  |    struct {
                            11129 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            11130 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            11131 ; 240  |    } B;
                            11132 ; 241  |    int I;
                            11133 ; 242  |    unsigned int U;
                            11134 ; 243  |} tb_tvr_type;
                            11135 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            11136 ; 245  |
                            11137 ; 246  |
                            11138 ; 247  |
                            11139 ; 248  |#endif
                            11140 ; 249  |
                            11141 ; 250  |
                            11142 ; 251  |
                            11143 ; 252  |
                            11144 ; 253  |
                            11145 ; 254  |
                            11146 ; 255  |
                            11147 ; 256  |
                            11148 ; 257  |
                            11149 ; 258  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11150 ; 259  |
                            11151 ; 260  |
                            11152 ; 261  |
                            11153 ; 262  |
                            11154 ; 263  |
                            11155 ; 264  |
                            11156 ; 265  |
                            11157 
                            11159 
                            11160 ; 35   |#include "regstimer.h"
                            11161 
                            11163 
                            11164 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11165 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            11166 ; 3    |// Filename: regstimer.inc
                            11167 ; 4    |// Description: Register definitions for  Timers interface
                            11168 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11169 ; 6    |// The following naming conventions are followed in this file.
                            11170 ; 7    |// All registers are named using the format...
                            11171 ; 8    |//     HW_<module>_<regname>
                            11172 ; 9    |// where <module> is the module name which can be any of the following...
                            11173 ; 10   |//     USB20
                            11174 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11175 ; 12   |// module name includes a number starting from 0 for the first instance of
                            11176 ; 13   |// that module)
                            11177 ; 14   |// <regname> is the specific register within that module
                            11178 ; 15   |// We also define the following...
                            11179 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11180 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11181 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11182 ; 19   |// which does something else, and
                            11183 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11184 ; 21   |// which does something else.
                            11185 ; 22   |// Other rules
                            11186 ; 23   |//     All caps
                            11187 ; 24   |//     Numeric identifiers start at 0
                            11188 ; 25   |#if !(defined(regstimerinc))
                            11189 ; 26   |#define regstimerinc 1
                            11190 ; 27   |
                            11191 ; 28   |#include "types.h"
                            11192 
                            11194 
                            11195 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11196 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11197 ; 3    |//
                            11198 ; 4    |// Filename: types.h
                            11199 ; 5    |// Description: Standard data types
                            11200 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11201 ; 7    |
                            11202 ; 8    |#ifndef _TYPES_H
                            11203 ; 9    |#define _TYPES_H
                            11204 ; 10   |
                            11205 ; 11   |// TODO:  move this outta here!
                            11206 ; 12   |#if !defined(NOERROR)
                            11207 ; 13   |#define NOERROR 0
                            11208 ; 14   |#define SUCCESS 0
                            11209 ; 15   |#endif 
                            11210 ; 16   |#if !defined(SUCCESS)
                            11211 ; 17   |#define SUCCESS  0
                            11212 ; 18   |#endif
                            11213 ; 19   |#if !defined(ERROR)
                            11214 ; 20   |#define ERROR   -1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11215 ; 21   |#endif
                            11216 ; 22   |#if !defined(FALSE)
                            11217 ; 23   |#define FALSE 0
                            11218 ; 24   |#endif
                            11219 ; 25   |#if !defined(TRUE)
                            11220 ; 26   |#define TRUE  1
                            11221 ; 27   |#endif
                            11222 ; 28   |
                            11223 ; 29   |#if !defined(NULL)
                            11224 ; 30   |#define NULL 0
                            11225 ; 31   |#endif
                            11226 ; 32   |
                            11227 ; 33   |#define MAX_INT     0x7FFFFF
                            11228 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11229 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11230 ; 36   |#define MAX_ULONG   (-1) 
                            11231 ; 37   |
                            11232 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11233 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11234 ; 40   |
                            11235 ; 41   |
                            11236 ; 42   |#define BYTE    unsigned char       // btVarName
                            11237 ; 43   |#define CHAR    signed char         // cVarName
                            11238 ; 44   |#define USHORT  unsigned short      // usVarName
                            11239 ; 45   |#define SHORT   unsigned short      // sVarName
                            11240 ; 46   |#define WORD    unsigned int        // wVarName
                            11241 ; 47   |#define INT     signed int          // iVarName
                            11242 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11243 ; 49   |#define LONG    signed long         // lVarName
                            11244 ; 50   |#define BOOL    unsigned int        // bVarName
                            11245 ; 51   |#define FRACT   _fract              // frVarName
                            11246 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11247 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11248 ; 54   |#define FLOAT   float               // fVarName
                            11249 ; 55   |#define DBL     double              // dVarName
                            11250 ; 56   |#define ENUM    enum                // eVarName
                            11251 ; 57   |#define CMX     _complex            // cmxVarName
                            11252 ; 58   |typedef WORD UCS3;                   // 
                            11253 ; 59   |
                            11254 ; 60   |#define UINT16  unsigned short
                            11255 ; 61   |#define UINT8   unsigned char   
                            11256 ; 62   |#define UINT32  unsigned long
                            11257 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11258 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11259 ; 65   |#define WCHAR   UINT16
                            11260 ; 66   |
                            11261 ; 67   |//UINT128 is 16 bytes or 6 words
                            11262 ; 68   |typedef struct UINT128_3500 {   
                            11263 ; 69   |    int val[6];     
                            11264 ; 70   |} UINT128_3500;
                            11265 ; 71   |
                            11266 ; 72   |#define UINT128   UINT128_3500
                            11267 ; 73   |
                            11268 ; 74   |// Little endian word packed byte strings:   
                            11269 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11270 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11271 ; 77   |// Little endian word packed byte strings:   
                            11272 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11273 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11274 ; 80   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11275 ; 81   |// Declare Memory Spaces To Use When Coding
                            11276 ; 82   |// A. Sector Buffers
                            11277 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11278 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11279 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11280 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11281 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11282 ; 88   |// B. Media DDI Memory
                            11283 ; 89   |#define MEDIA_DDI_MEM _Y
                            11284 ; 90   |
                            11285 ; 91   |
                            11286 ; 92   |
                            11287 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11288 ; 94   |// Examples of circular pointers:
                            11289 ; 95   |//    INT CIRC cpiVarName
                            11290 ; 96   |//    DWORD CIRC cpdwVarName
                            11291 ; 97   |
                            11292 ; 98   |#define RETCODE INT                 // rcVarName
                            11293 ; 99   |
                            11294 ; 100  |// generic bitfield structure
                            11295 ; 101  |struct Bitfield {
                            11296 ; 102  |    unsigned int B0  :1;
                            11297 ; 103  |    unsigned int B1  :1;
                            11298 ; 104  |    unsigned int B2  :1;
                            11299 ; 105  |    unsigned int B3  :1;
                            11300 ; 106  |    unsigned int B4  :1;
                            11301 ; 107  |    unsigned int B5  :1;
                            11302 ; 108  |    unsigned int B6  :1;
                            11303 ; 109  |    unsigned int B7  :1;
                            11304 ; 110  |    unsigned int B8  :1;
                            11305 ; 111  |    unsigned int B9  :1;
                            11306 ; 112  |    unsigned int B10 :1;
                            11307 ; 113  |    unsigned int B11 :1;
                            11308 ; 114  |    unsigned int B12 :1;
                            11309 ; 115  |    unsigned int B13 :1;
                            11310 ; 116  |    unsigned int B14 :1;
                            11311 ; 117  |    unsigned int B15 :1;
                            11312 ; 118  |    unsigned int B16 :1;
                            11313 ; 119  |    unsigned int B17 :1;
                            11314 ; 120  |    unsigned int B18 :1;
                            11315 ; 121  |    unsigned int B19 :1;
                            11316 ; 122  |    unsigned int B20 :1;
                            11317 ; 123  |    unsigned int B21 :1;
                            11318 ; 124  |    unsigned int B22 :1;
                            11319 ; 125  |    unsigned int B23 :1;
                            11320 ; 126  |};
                            11321 ; 127  |
                            11322 ; 128  |union BitInt {
                            11323 ; 129  |        struct Bitfield B;
                            11324 ; 130  |        int        I;
                            11325 ; 131  |};
                            11326 ; 132  |
                            11327 ; 133  |#define MAX_MSG_LENGTH 10
                            11328 ; 134  |struct CMessage
                            11329 ; 135  |{
                            11330 ; 136  |        unsigned int m_uLength;
                            11331 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11332 ; 138  |};
                            11333 ; 139  |
                            11334 ; 140  |typedef struct {
                            11335 ; 141  |    WORD m_wLength;
                            11336 ; 142  |    WORD m_wMessage;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11337 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11338 ; 144  |} Message;
                            11339 ; 145  |
                            11340 ; 146  |struct MessageQueueDescriptor
                            11341 ; 147  |{
                            11342 ; 148  |        int *m_pBase;
                            11343 ; 149  |        int m_iModulo;
                            11344 ; 150  |        int m_iSize;
                            11345 ; 151  |        int *m_pHead;
                            11346 ; 152  |        int *m_pTail;
                            11347 ; 153  |};
                            11348 ; 154  |
                            11349 ; 155  |struct ModuleEntry
                            11350 ; 156  |{
                            11351 ; 157  |    int m_iSignaledEventMask;
                            11352 ; 158  |    int m_iWaitEventMask;
                            11353 ; 159  |    int m_iResourceOfCode;
                            11354 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11355 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11356 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11357 ; 163  |    int m_uTimeOutHigh;
                            11358 ; 164  |    int m_uTimeOutLow;
                            11359 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11360 ; 166  |};
                            11361 ; 167  |
                            11362 ; 168  |union WaitMask{
                            11363 ; 169  |    struct B{
                            11364 ; 170  |        unsigned int m_bNone     :1;
                            11365 ; 171  |        unsigned int m_bMessage  :1;
                            11366 ; 172  |        unsigned int m_bTimer    :1;
                            11367 ; 173  |        unsigned int m_bButton   :1;
                            11368 ; 174  |    } B;
                            11369 ; 175  |    int I;
                            11370 ; 176  |} ;
                            11371 ; 177  |
                            11372 ; 178  |
                            11373 ; 179  |struct Button {
                            11374 ; 180  |        WORD wButtonEvent;
                            11375 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11376 ; 182  |};
                            11377 ; 183  |
                            11378 ; 184  |struct Message {
                            11379 ; 185  |        WORD wMsgLength;
                            11380 ; 186  |        WORD wMsgCommand;
                            11381 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11382 ; 188  |};
                            11383 ; 189  |
                            11384 ; 190  |union EventTypes {
                            11385 ; 191  |        struct CMessage msg;
                            11386 ; 192  |        struct Button Button ;
                            11387 ; 193  |        struct Message Message;
                            11388 ; 194  |};
                            11389 ; 195  |
                            11390 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11391 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11392 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11393 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11394 ; 200  |
                            11395 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11396 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11397 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11398 ; 204  |
                            11399 ; 205  |#if DEBUG
                            11400 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11401 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11402 ; 208  |#else 
                            11403 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11404 ; 210  |#define DebugBuildAssert(x)    
                            11405 ; 211  |#endif
                            11406 ; 212  |
                            11407 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11408 ; 214  |//  #pragma asm
                            11409 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11410 ; 216  |//  #pragma endasm
                            11411 ; 217  |
                            11412 ; 218  |
                            11413 ; 219  |#ifdef COLOR_262K
                            11414 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11415 ; 221  |#elif defined(COLOR_65K)
                            11416 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11417 ; 223  |#else
                            11418 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11419 ; 225  |#endif
                            11420 ; 226  |    
                            11421 ; 227  |#endif // #ifndef _TYPES_H
                            11422 
                            11424 
                            11425 ; 29   |
                            11426 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11427 ; 31   |//   TIMER STMP Registers 
                            11428 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11429 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            11430 ; 34   |
                            11431 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            11432 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            11433 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            11434 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            11435 ; 39   |
                            11436 ; 40   |#define HW_TIMER_NUMBER_0 0
                            11437 ; 41   |#define HW_TIMER_NUMBER_1 1
                            11438 ; 42   |#define HW_TIMER_NUMBER_2 2
                            11439 ; 43   |#define HW_TIMER_NUMBER_3 3
                            11440 ; 44   |
                            11441 ; 45   |#define HW_TMRCSR 0
                            11442 ; 46   |#define HW_TMRCNTR 1
                            11443 ; 47   |
                            11444 ; 48   |
                            11445 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            11446 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            11447 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            11448 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            11449 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            11450 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            11451 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            11452 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            11453 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            11454 ; 58   |
                            11455 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            11456 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11457 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            11458 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            11459 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            11460 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            11461 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            11462 ; 66   |
                            11463 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            11464 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            11465 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
                            11466 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            11467 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            11468 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            11469 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            11470 ; 74   |
                            11471 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            11472 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            11473 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            11474 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            11475 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            11476 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            11477 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            11478 ; 82   |
                            11479 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            11480 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            11481 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            11482 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            11483 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            11484 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            11485 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            11486 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            11487 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            11488 ; 92   |
                            11489 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            11490 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            11491 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            11492 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            11493 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            11494 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            11495 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            11496 ; 100  |
                            11497 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            11498 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            11499 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            11500 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            11501 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            11502 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            11503 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            11504 ; 108  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11505 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            11506 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            11507 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            11508 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            11509 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            11510 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            11511 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            11512 ; 116  |
                            11513 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            11514 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            11515 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            11516 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            11517 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            11518 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            11519 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            11520 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            11521 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            11522 ; 126  |
                            11523 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            11524 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            11525 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            11526 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            11527 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            11528 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            11529 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            11530 ; 134  |
                            11531 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            11532 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            11533 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            11534 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            11535 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            11536 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            11537 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            11538 ; 142  |
                            11539 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            11540 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            11541 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            11542 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            11543 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            11544 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            11545 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            11546 ; 150  |
                            11547 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            11548 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            11549 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            11550 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            11551 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            11552 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            11553 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            11554 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            11555 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            11556 ; 160  |
                            11557 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            11558 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            11559 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11560 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            11561 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            11562 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            11563 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            11564 ; 168  |
                            11565 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            11566 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            11567 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
                            11568 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            11569 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            11570 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            11571 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            11572 ; 176  |
                            11573 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            11574 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            11575 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            11576 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            11577 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            11578 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            11579 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            11580 ; 184  |
                            11581 ; 185  |typedef union               
                            11582 ; 186  |{
                            11583 ; 187  |    struct {
                            11584 ; 188  |       int TIMER_ENABLE              :1;
                            11585 ; 189  |       int TIMER_INT_EN              :1;
                            11586 ; 190  |       int INVERT                    :1;
                            11587 ; 191  |       int TIMER_CONTROL             :3;
                            11588 ; 192  |       int RSVD0                     :1;
                            11589 ; 193  |       int TIMER_STATUS              :1;
                            11590 ; 194  |       int TIMER_MODE                :2;
                            11591 ; 195  |       int RSVD1                     :13;
                            11592 ; 196  |       int CLKGT                     :1;
                            11593 ; 197  |    } B;
                            11594 ; 198  |    int I;
                            11595 ; 199  |} timercsr_type;
                            11596 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            11597 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            11598 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            11599 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            11600 ; 204  |
                            11601 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            11602 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            11603 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            11604 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            11605 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            11606 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            11607 ; 211  |
                            11608 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            11609 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11610 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            11611 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            11612 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            11613 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            11614 ; 218  |
                            11615 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            11616 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            11617 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            11618 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            11619 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            11620 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            11621 ; 225  |
                            11622 ; 226  |typedef union               
                            11623 ; 227  |{
                            11624 ; 228  |    struct {
                            11625 ; 229  |       int COUNT                    :24;
                            11626 ; 230  |    } B;
                            11627 ; 231  |    int I;
                            11628 ; 232  |} tmrcntr_type;
                            11629 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            11630 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            11631 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            11632 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            11633 ; 237  |
                            11634 ; 238  |
                            11635 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            11636 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            11637 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            11638 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            11639 ; 243  |
                            11640 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            11641 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            11642 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            11643 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            11644 ; 248  |
                            11645 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            11646 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            11647 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            11648 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            11649 ; 253  |
                            11650 ; 254  |// Timer enable
                            11651 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            11652 ; 256  |// Timer clock gating control
                            11653 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            11654 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            11655 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            11656 ; 260  |#endif
                            11657 ; 261  |
                            11658 ; 262  |
                            11659 ; 263  |
                            11660 ; 264  |
                            11661 
                            11663 
                            11664 ; 36   |#include "regsusb20.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11665 
                            11667 
                            11668 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11669 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            11670 ; 3    |//;  File        : regsusb20ip.inc
                            11671 ; 4    |//;  Description : USB20 IP Register definition
                            11672 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11673 ; 6    |
                            11674 ; 7    |// The following naming conventions are followed in this file.
                            11675 ; 8    |// All registers are named using the format...
                            11676 ; 9    |//     HW_<module>_<regname>
                            11677 ; 10   |// where <module> is the module name which can be any of the following...
                            11678 ; 11   |//     USB20
                            11679 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            11680 ; 13   |// module name includes a number starting from 0 for the first instance of
                            11681 ; 14   |// that module)
                            11682 ; 15   |// <regname> is the specific register within that module
                            11683 ; 16   |// We also define the following...
                            11684 ; 17   |//     HW_<module>_<regname>_BITPOS
                            11685 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11686 ; 19   |//     HW_<module>_<regname>_SETMASK
                            11687 ; 20   |// which does something else, and
                            11688 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            11689 ; 22   |// which does something else.
                            11690 ; 23   |// Other rules
                            11691 ; 24   |//     All caps
                            11692 ; 25   |//     Numeric identifiers start at 0
                            11693 ; 26   |
                            11694 ; 27   |#if !(defined(regsusb20inc))
                            11695 ; 28   |#define regsusb20inc 1
                            11696 ; 29   |
                            11697 ; 30   |#include "types.h"
                            11698 
                            11700 
                            11701 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11702 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11703 ; 3    |//
                            11704 ; 4    |// Filename: types.h
                            11705 ; 5    |// Description: Standard data types
                            11706 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11707 ; 7    |
                            11708 ; 8    |#ifndef _TYPES_H
                            11709 ; 9    |#define _TYPES_H
                            11710 ; 10   |
                            11711 ; 11   |// TODO:  move this outta here!
                            11712 ; 12   |#if !defined(NOERROR)
                            11713 ; 13   |#define NOERROR 0
                            11714 ; 14   |#define SUCCESS 0
                            11715 ; 15   |#endif 
                            11716 ; 16   |#if !defined(SUCCESS)
                            11717 ; 17   |#define SUCCESS  0
                            11718 ; 18   |#endif
                            11719 ; 19   |#if !defined(ERROR)
                            11720 ; 20   |#define ERROR   -1
                            11721 ; 21   |#endif
                            11722 ; 22   |#if !defined(FALSE)
                            11723 ; 23   |#define FALSE 0
                            11724 ; 24   |#endif
                            11725 ; 25   |#if !defined(TRUE)
                            11726 ; 26   |#define TRUE  1
                            11727 ; 27   |#endif
                            11728 ; 28   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11729 ; 29   |#if !defined(NULL)
                            11730 ; 30   |#define NULL 0
                            11731 ; 31   |#endif
                            11732 ; 32   |
                            11733 ; 33   |#define MAX_INT     0x7FFFFF
                            11734 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11735 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11736 ; 36   |#define MAX_ULONG   (-1) 
                            11737 ; 37   |
                            11738 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11739 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11740 ; 40   |
                            11741 ; 41   |
                            11742 ; 42   |#define BYTE    unsigned char       // btVarName
                            11743 ; 43   |#define CHAR    signed char         // cVarName
                            11744 ; 44   |#define USHORT  unsigned short      // usVarName
                            11745 ; 45   |#define SHORT   unsigned short      // sVarName
                            11746 ; 46   |#define WORD    unsigned int        // wVarName
                            11747 ; 47   |#define INT     signed int          // iVarName
                            11748 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11749 ; 49   |#define LONG    signed long         // lVarName
                            11750 ; 50   |#define BOOL    unsigned int        // bVarName
                            11751 ; 51   |#define FRACT   _fract              // frVarName
                            11752 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11753 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11754 ; 54   |#define FLOAT   float               // fVarName
                            11755 ; 55   |#define DBL     double              // dVarName
                            11756 ; 56   |#define ENUM    enum                // eVarName
                            11757 ; 57   |#define CMX     _complex            // cmxVarName
                            11758 ; 58   |typedef WORD UCS3;                   // 
                            11759 ; 59   |
                            11760 ; 60   |#define UINT16  unsigned short
                            11761 ; 61   |#define UINT8   unsigned char   
                            11762 ; 62   |#define UINT32  unsigned long
                            11763 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11764 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11765 ; 65   |#define WCHAR   UINT16
                            11766 ; 66   |
                            11767 ; 67   |//UINT128 is 16 bytes or 6 words
                            11768 ; 68   |typedef struct UINT128_3500 {   
                            11769 ; 69   |    int val[6];     
                            11770 ; 70   |} UINT128_3500;
                            11771 ; 71   |
                            11772 ; 72   |#define UINT128   UINT128_3500
                            11773 ; 73   |
                            11774 ; 74   |// Little endian word packed byte strings:   
                            11775 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11776 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11777 ; 77   |// Little endian word packed byte strings:   
                            11778 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11779 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11780 ; 80   |
                            11781 ; 81   |// Declare Memory Spaces To Use When Coding
                            11782 ; 82   |// A. Sector Buffers
                            11783 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11784 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11785 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11786 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11787 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11788 ; 88   |// B. Media DDI Memory
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11789 ; 89   |#define MEDIA_DDI_MEM _Y
                            11790 ; 90   |
                            11791 ; 91   |
                            11792 ; 92   |
                            11793 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11794 ; 94   |// Examples of circular pointers:
                            11795 ; 95   |//    INT CIRC cpiVarName
                            11796 ; 96   |//    DWORD CIRC cpdwVarName
                            11797 ; 97   |
                            11798 ; 98   |#define RETCODE INT                 // rcVarName
                            11799 ; 99   |
                            11800 ; 100  |// generic bitfield structure
                            11801 ; 101  |struct Bitfield {
                            11802 ; 102  |    unsigned int B0  :1;
                            11803 ; 103  |    unsigned int B1  :1;
                            11804 ; 104  |    unsigned int B2  :1;
                            11805 ; 105  |    unsigned int B3  :1;
                            11806 ; 106  |    unsigned int B4  :1;
                            11807 ; 107  |    unsigned int B5  :1;
                            11808 ; 108  |    unsigned int B6  :1;
                            11809 ; 109  |    unsigned int B7  :1;
                            11810 ; 110  |    unsigned int B8  :1;
                            11811 ; 111  |    unsigned int B9  :1;
                            11812 ; 112  |    unsigned int B10 :1;
                            11813 ; 113  |    unsigned int B11 :1;
                            11814 ; 114  |    unsigned int B12 :1;
                            11815 ; 115  |    unsigned int B13 :1;
                            11816 ; 116  |    unsigned int B14 :1;
                            11817 ; 117  |    unsigned int B15 :1;
                            11818 ; 118  |    unsigned int B16 :1;
                            11819 ; 119  |    unsigned int B17 :1;
                            11820 ; 120  |    unsigned int B18 :1;
                            11821 ; 121  |    unsigned int B19 :1;
                            11822 ; 122  |    unsigned int B20 :1;
                            11823 ; 123  |    unsigned int B21 :1;
                            11824 ; 124  |    unsigned int B22 :1;
                            11825 ; 125  |    unsigned int B23 :1;
                            11826 ; 126  |};
                            11827 ; 127  |
                            11828 ; 128  |union BitInt {
                            11829 ; 129  |        struct Bitfield B;
                            11830 ; 130  |        int        I;
                            11831 ; 131  |};
                            11832 ; 132  |
                            11833 ; 133  |#define MAX_MSG_LENGTH 10
                            11834 ; 134  |struct CMessage
                            11835 ; 135  |{
                            11836 ; 136  |        unsigned int m_uLength;
                            11837 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11838 ; 138  |};
                            11839 ; 139  |
                            11840 ; 140  |typedef struct {
                            11841 ; 141  |    WORD m_wLength;
                            11842 ; 142  |    WORD m_wMessage;
                            11843 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11844 ; 144  |} Message;
                            11845 ; 145  |
                            11846 ; 146  |struct MessageQueueDescriptor
                            11847 ; 147  |{
                            11848 ; 148  |        int *m_pBase;
                            11849 ; 149  |        int m_iModulo;
                            11850 ; 150  |        int m_iSize;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11851 ; 151  |        int *m_pHead;
                            11852 ; 152  |        int *m_pTail;
                            11853 ; 153  |};
                            11854 ; 154  |
                            11855 ; 155  |struct ModuleEntry
                            11856 ; 156  |{
                            11857 ; 157  |    int m_iSignaledEventMask;
                            11858 ; 158  |    int m_iWaitEventMask;
                            11859 ; 159  |    int m_iResourceOfCode;
                            11860 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11861 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11862 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11863 ; 163  |    int m_uTimeOutHigh;
                            11864 ; 164  |    int m_uTimeOutLow;
                            11865 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11866 ; 166  |};
                            11867 ; 167  |
                            11868 ; 168  |union WaitMask{
                            11869 ; 169  |    struct B{
                            11870 ; 170  |        unsigned int m_bNone     :1;
                            11871 ; 171  |        unsigned int m_bMessage  :1;
                            11872 ; 172  |        unsigned int m_bTimer    :1;
                            11873 ; 173  |        unsigned int m_bButton   :1;
                            11874 ; 174  |    } B;
                            11875 ; 175  |    int I;
                            11876 ; 176  |} ;
                            11877 ; 177  |
                            11878 ; 178  |
                            11879 ; 179  |struct Button {
                            11880 ; 180  |        WORD wButtonEvent;
                            11881 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11882 ; 182  |};
                            11883 ; 183  |
                            11884 ; 184  |struct Message {
                            11885 ; 185  |        WORD wMsgLength;
                            11886 ; 186  |        WORD wMsgCommand;
                            11887 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11888 ; 188  |};
                            11889 ; 189  |
                            11890 ; 190  |union EventTypes {
                            11891 ; 191  |        struct CMessage msg;
                            11892 ; 192  |        struct Button Button ;
                            11893 ; 193  |        struct Message Message;
                            11894 ; 194  |};
                            11895 ; 195  |
                            11896 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11897 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11898 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11899 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11900 ; 200  |
                            11901 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11902 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11903 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11904 ; 204  |
                            11905 ; 205  |#if DEBUG
                            11906 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11907 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11908 ; 208  |#else 
                            11909 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11910 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11911 ; 211  |#endif
                            11912 ; 212  |
                            11913 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11914 ; 214  |//  #pragma asm
                            11915 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11916 ; 216  |//  #pragma endasm
                            11917 ; 217  |
                            11918 ; 218  |
                            11919 ; 219  |#ifdef COLOR_262K
                            11920 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11921 ; 221  |#elif defined(COLOR_65K)
                            11922 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11923 ; 223  |#else
                            11924 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11925 ; 225  |#endif
                            11926 ; 226  |    
                            11927 ; 227  |#endif // #ifndef _TYPES_H
                            11928 
                            11930 
                            11931 ; 31   |
                            11932 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11933 ; 33   |//   USB2.0 STMP Registers 
                            11934 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11935 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11936 ; 36   |
                            11937 ; 37   |
                            11938 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11939 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11940 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11941 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11942 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11943 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11944 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11945 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11946 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11947 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11948 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11949 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11950 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11951 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11952 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11953 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11954 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11955 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11956 ; 56   |
                            11957 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11958 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11959 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11960 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11961 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11962 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11963 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11964 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11965 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11966 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11967 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11968 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11969 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11970 ; 70   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11971 ; 71   |
                            11972 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11973 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11974 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11975 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11976 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11977 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11978 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11979 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            11980 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11981 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11982 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11983 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11984 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11985 ; 85   |
                            11986 ; 86   |typedef union               
                            11987 ; 87   |{
                            11988 ; 88   |    struct {
                            11989 ; 89   |        int USBEN          :1;
                            11990 ; 90   |        int WAKEUPIRQ      :1;
                            11991 ; 91   |        int WAKEUPIE       :1;
                            11992 ; 92   |        int VBUSCXIRQ      :1;
                            11993 ; 93   |        int VBUSCXIE       :1;
                            11994 ; 94   |        int VBUSDISCXIRQ   :1;
                            11995 ; 95   |        int VBUSDISCXIE    :1;
                            11996 ; 96   |        int CLKOFF         :1;
                            11997 ; 97   |        int SUSP           :1;
                            11998 ; 98   |        int SUSPF          :1;
                            11999 ; 99   |        int UTMITST        :1;
                            12000 ; 100  |        int ARCCONNECT     :1;
                            12001 ; 101  |        int PLUGGEDIN_EN   :1;
                            12002 ; 102  |        int PLUGGEDIN      :1;
                            12003 ; 103  |        int                :8;
                            12004 ; 104  |        int HOSTDISCONNECT :1;
                            12005 ; 105  |        int VBUSSENSE      :1;
                            12006 ; 106  |    } B;
                            12007 ; 107  |    int I;
                            12008 ; 108  |} usbcsr_type;
                            12009 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            12010 ; 110  |
                            12011 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            12012 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            12013 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            12014 ; 114  |
                            12015 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            12016 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            12017 ; 117  |
                            12018 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            12019 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            12020 ; 120  |
                            12021 ; 121  |typedef union               
                            12022 ; 122  |{
                            12023 ; 123  |    struct {
                            12024 ; 124  |        int ADD            :16;
                            12025 ; 125  |        int MEM            :2;
                            12026 ; 126  |        int                :6;
                            12027 ; 127  |    } B;
                            12028 ; 128  |    int I;
                            12029 ; 129  |} usbdmaoff_type;
                            12030 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            12031 ; 131  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12032 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            12033 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            12034 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            12035 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            12036 ; 136  |
                            12037 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            12038 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            12039 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            12040 ; 140  |
                            12041 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            12042 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            12043 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            12044 ; 144  |
                            12045 ; 145  |typedef union               
                            12046 ; 146  |{
                            12047 ; 147  |    struct {
                            12048 ; 148  |        int ADD            :9;
                            12049 ; 149  |        int                :7;
                            12050 ; 150  |        int RWB            :1;
                            12051 ; 151  |        int                :14;
                            12052 ; 152  |        int KICK           :1;
                            12053 ; 153  |    } B;
                            12054 ; 154  |    int I;
                            12055 ; 155  |} usbarcaccess_type;
                            12056 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            12057 ; 157  |
                            12058 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            12059 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            12060 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            12061 ; 161  |
                            12062 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            12063 ; 163  |
                            12064 ; 164  |typedef union               
                            12065 ; 165  |{
                            12066 ; 166  |    struct {
                            12067 ; 167  |        int DATA           :16;
                            12068 ; 168  |        int                :8;
                            12069 ; 169  |    } B;
                            12070 ; 170  |    int I;
                            12071 ; 171  |} usbarcdatalow_type;
                            12072 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            12073 ; 173  |
                            12074 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            12075 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            12076 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            12077 ; 177  |
                            12078 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            12079 ; 179  |
                            12080 ; 180  |typedef union               
                            12081 ; 181  |{
                            12082 ; 182  |    struct {
                            12083 ; 183  |        int DATA           :16;
                            12084 ; 184  |        int                :8;
                            12085 ; 185  |    } B;
                            12086 ; 186  |    int I;
                            12087 ; 187  |} usbarcdatahigh_type;
                            12088 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            12089 ; 189  |
                            12090 ; 190  |
                            12091 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12092 ; 192  |//   USB2.0 ARC Registers 
                            12093 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12094 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            12095 ; 195  |
                            12096 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            12097 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            12098 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            12099 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            12100 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            12101 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            12102 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            12103 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            12104 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            12105 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            12106 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            12107 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            12108 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            12109 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            12110 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            12111 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            12112 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            12113 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            12114 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            12115 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            12116 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            12117 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            12118 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            12119 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            12120 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            12121 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            12122 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            12123 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            12124 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            12125 ; 225  |
                            12126 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            12127 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            12128 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            12129 ; 229  |
                            12130 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            12131 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            12132 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            12133 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            12134 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            12135 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            12136 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            12137 ; 237  |
                            12138 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            12139 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            12140 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            12141 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            12142 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            12143 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            12144 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            12145 ; 245  |
                            12146 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            12147 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            12148 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            12149 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            12150 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            12151 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            12152 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            12153 ; 253  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12154 ; 254  |typedef union               
                            12155 ; 255  |{
                            12156 ; 256  |    struct {
                            12157 ; 257  |        int N_PORTS         :4;
                            12158 ; 258  |        int PPC             :1;
                            12159 ; 259  |        int                 :3;
                            12160 ; 260  |        int N_PCC           :4;
                            12161 ; 261  |        int N_CC            :4;
                            12162 ; 262  |        int PI              :1;
                            12163 ; 263  |        int                 :3;
                            12164 ; 264  |        int N_PTT           :4;
                            12165 ; 265  |        int N_TT            :4;
                            12166 ; 266  |        int                 :20;
                            12167 ; 267  |    } B;
                            12168 ; 268  |    DWORD I;
                            12169 ; 269  |} hcsparams_type;
                            12170 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            12171 ; 271  |
                            12172 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            12173 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            12174 ; 274  |
                            12175 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            12176 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            12177 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            12178 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            12179 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            12180 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            12181 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            12182 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            12183 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            12184 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            12185 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            12186 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            12187 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            12188 ; 288  |
                            12189 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            12190 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            12191 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            12192 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            12193 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            12194 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            12195 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            12196 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            12197 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            12198 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            12199 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            12200 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            12201 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            12202 ; 302  |
                            12203 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            12204 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            12205 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            12206 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            12207 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            12208 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            12209 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            12210 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            12211 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            12212 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            12213 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            12214 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            12215 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12216 ; 316  |
                            12217 ; 317  |typedef union               
                            12218 ; 318  |{
                            12219 ; 319  |    struct {
                            12220 ; 320  |        int RS              :1;
                            12221 ; 321  |        int RST             :1;
                            12222 ; 322  |        int FS0             :1;
                            12223 ; 323  |        int FS1             :1;
                            12224 ; 324  |        int PSE             :1;
                            12225 ; 325  |        int ASE             :1;
                            12226 ; 326  |        int IAA             :1;
                            12227 ; 327  |        int LR              :1;
                            12228 ; 328  |        int ASP0            :1;
                            12229 ; 329  |        int ASP1            :1;
                            12230 ; 330  |        int                 :1;
                            12231 ; 331  |        int ASPE            :1;
                            12232 ; 332  |        int                 :3;
                            12233 ; 333  |        int FS2             :1;
                            12234 ; 334  |        int ITC             :8;
                            12235 ; 335  |        int                 :24;
                            12236 ; 336  |    } B;
                            12237 ; 337  |    DWORD I;
                            12238 ; 338  |} usbcmd_type;
                            12239 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            12240 ; 340  |
                            12241 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            12242 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            12243 ; 343  |
                            12244 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            12245 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            12246 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            12247 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            12248 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            12249 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            12250 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            12251 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            12252 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            12253 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            12254 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            12255 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            12256 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            12257 ; 357  |
                            12258 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            12259 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            12260 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            12261 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            12262 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            12263 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            12264 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            12265 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            12266 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            12267 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            12268 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            12269 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            12270 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            12271 ; 371  |
                            12272 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            12273 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            12274 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            12275 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            12276 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            12277 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12278 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            12279 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            12280 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            12281 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            12282 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            12283 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            12284 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            12285 ; 385  |
                            12286 ; 386  |
                            12287 ; 387  |typedef union               
                            12288 ; 388  |{
                            12289 ; 389  |    struct {
                            12290 ; 390  |        int UI              :1;
                            12291 ; 391  |        int UEI             :1;
                            12292 ; 392  |        int PCI             :1;
                            12293 ; 393  |        int FRI             :1;
                            12294 ; 394  |        int SEI             :1;
                            12295 ; 395  |        int AAI             :1;
                            12296 ; 396  |        int URI             :1;
                            12297 ; 397  |        int STI             :1;
                            12298 ; 398  |        int SLI             :1;
                            12299 ; 399  |        int                 :3;
                            12300 ; 400  |        int HCH             :1;
                            12301 ; 401  |        int RCL             :1;
                            12302 ; 402  |        int PS              :1;
                            12303 ; 403  |        int AS              :1;
                            12304 ; 404  |        int                 :24;
                            12305 ; 405  |    } B;
                            12306 ; 406  |    DWORD I;
                            12307 ; 407  |} usbsts_type;
                            12308 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            12309 ; 409  |
                            12310 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            12311 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            12312 ; 412  |
                            12313 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            12314 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            12315 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            12316 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            12317 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            12318 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            12319 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            12320 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            12321 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            12322 ; 422  |
                            12323 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            12324 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            12325 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            12326 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            12327 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            12328 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            12329 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            12330 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            12331 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            12332 ; 432  |
                            12333 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            12334 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            12335 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            12336 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            12337 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            12338 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            12339 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12340 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            12341 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            12342 ; 442  |
                            12343 ; 443  |
                            12344 ; 444  |typedef union               
                            12345 ; 445  |{
                            12346 ; 446  |    struct {
                            12347 ; 447  |        int UE              :1;
                            12348 ; 448  |        int UEE             :1;
                            12349 ; 449  |        int PCE             :1;
                            12350 ; 450  |        int FRE             :1;
                            12351 ; 451  |        int SEE             :1;
                            12352 ; 452  |        int AAE             :1;
                            12353 ; 453  |        int URE             :1;
                            12354 ; 454  |        int STE             :1;
                            12355 ; 455  |        int SLE             :1;
                            12356 ; 456  |        int                 :39;
                            12357 ; 457  |    } B;
                            12358 ; 458  |    DWORD I;
                            12359 ; 459  |} usbintr_type;
                            12360 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            12361 ; 461  |
                            12362 ; 462  |
                            12363 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            12364 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            12365 ; 465  |
                            12366 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            12367 ; 467  |
                            12368 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            12369 ; 469  |
                            12370 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            12371 ; 471  |
                            12372 ; 472  |typedef union               
                            12373 ; 473  |{
                            12374 ; 474  |    struct {
                            12375 ; 475  |        int                 :25;
                            12376 ; 476  |        int ADD             :7;
                            12377 ; 477  |        int                 :16;
                            12378 ; 478  |    } B;
                            12379 ; 479  |    DWORD I;
                            12380 ; 480  |} devaddr_type;
                            12381 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            12382 ; 482  |
                            12383 ; 483  |
                            12384 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            12385 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            12386 ; 486  |
                            12387 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            12388 ; 488  |
                            12389 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            12390 ; 490  |
                            12391 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            12392 ; 492  |
                            12393 ; 493  |typedef union               
                            12394 ; 494  |{
                            12395 ; 495  |    struct {
                            12396 ; 496  |        int                 :10;
                            12397 ; 497  |        int ADD             :22;
                            12398 ; 498  |        int                 :16;
                            12399 ; 499  |    } B;
                            12400 ; 500  |    DWORD I;
                            12401 ; 501  |} endptlistaddr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12402 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            12403 ; 503  |
                            12404 ; 504  |
                            12405 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            12406 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            12407 ; 507  |
                            12408 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            12409 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            12410 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            12411 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            12412 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            12413 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            12414 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            12415 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            12416 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            12417 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            12418 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            12419 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            12420 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            12421 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            12422 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            12423 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            12424 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            12425 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            12426 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            12427 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            12428 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            12429 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            12430 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            12431 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            12432 ; 532  |
                            12433 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            12434 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            12435 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            12436 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            12437 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            12438 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            12439 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            12440 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            12441 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            12442 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            12443 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            12444 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            12445 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            12446 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            12447 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            12448 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            12449 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            12450 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            12451 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            12452 ; 552  |
                            12453 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            12454 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            12455 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            12456 ; 556  |
                            12457 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            12458 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            12459 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            12460 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            12461 ; 561  |
                            12462 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12463 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            12464 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            12465 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            12466 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            12467 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            12468 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            12469 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            12470 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            12471 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            12472 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            12473 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            12474 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            12475 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            12476 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            12477 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            12478 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            12479 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            12480 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            12481 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            12482 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            12483 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            12484 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            12485 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            12486 ; 586  |
                            12487 ; 587  |typedef union               
                            12488 ; 588  |{
                            12489 ; 589  |    struct {
                            12490 ; 590  |        int CCS             :1;
                            12491 ; 591  |        int CSC             :1;
                            12492 ; 592  |        int PE              :1;
                            12493 ; 593  |        int PEC             :1;
                            12494 ; 594  |        int OCA             :1;
                            12495 ; 595  |        int OCC             :1;
                            12496 ; 596  |        int FPR             :1;
                            12497 ; 597  |        int SUSP            :1;
                            12498 ; 598  |        int PR              :1;
                            12499 ; 599  |        int HSP             :1;
                            12500 ; 600  |        int LS              :2;
                            12501 ; 601  |        int PP              :1;
                            12502 ; 602  |        int PO              :1;
                            12503 ; 603  |        int PIC             :2;
                            12504 ; 604  |        int PTC             :4;
                            12505 ; 605  |        int WKCN            :1;
                            12506 ; 606  |        int WKDS            :1;
                            12507 ; 607  |        int WKOC            :1;
                            12508 ; 608  |        int PHCD            :1;
                            12509 ; 609  |        int PFSC            :1;
                            12510 ; 610  |        int                 :1;
                            12511 ; 611  |        int PSPD            :2;
                            12512 ; 612  |        int                 :1;
                            12513 ; 613  |        int PTW             :1;
                            12514 ; 614  |        int STS             :1;
                            12515 ; 615  |        int PTS             :1;
                            12516 ; 616  |        int                 :16;
                            12517 ; 617  |    } B;
                            12518 ; 618  |    DWORD I;
                            12519 ; 619  |} portsc1_type;
                            12520 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            12521 ; 621  |
                            12522 ; 622  |
                            12523 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            12524 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12525 ; 625  |
                            12526 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            12527 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            12528 ; 628  |
                            12529 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            12530 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            12531 ; 631  |
                            12532 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            12533 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            12534 ; 634  |
                            12535 ; 635  |typedef union               
                            12536 ; 636  |{
                            12537 ; 637  |    struct {
                            12538 ; 638  |        int CM              :2;
                            12539 ; 639  |        int ES              :1;
                            12540 ; 640  |        int                 :46;
                            12541 ; 641  |    } B;
                            12542 ; 642  |    DWORD I;
                            12543 ; 643  |} usbmode_type;
                            12544 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            12545 ; 645  |
                            12546 ; 646  |
                            12547 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            12548 ; 648  |//  The following endpoint equates are common for the following registers
                            12549 ; 649  |
                            12550 ; 650  |#define ENDPOINT0_BITPOS (0)
                            12551 ; 651  |#define ENDPOINT1_BITPOS (1)
                            12552 ; 652  |#define ENDPOINT2_BITPOS (2)
                            12553 ; 653  |#define ENDPOINT3_BITPOS (3)
                            12554 ; 654  |#define ENDPOINT4_BITPOS (4)
                            12555 ; 655  |#define ENDPOINT5_BITPOS (5)
                            12556 ; 656  |#define ENDPOINT6_BITPOS (6)
                            12557 ; 657  |#define ENDPOINT7_BITPOS (7)
                            12558 ; 658  |#define ENDPOINT8_BITPOS (8)
                            12559 ; 659  |#define ENDPOINT9_BITPOS (9)
                            12560 ; 660  |#define ENDPOINT10_BITPOS (10)
                            12561 ; 661  |#define ENDPOINT11_BITPOS (11)
                            12562 ; 662  |#define ENDPOINT12_BITPOS (12)
                            12563 ; 663  |#define ENDPOINT13_BITPOS (13)
                            12564 ; 664  |#define ENDPOINT14_BITPOS (14)
                            12565 ; 665  |#define ENDPOINT15_BITPOS (15)
                            12566 ; 666  |
                            12567 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            12568 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            12569 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            12570 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            12571 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            12572 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            12573 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            12574 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            12575 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            12576 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            12577 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            12578 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            12579 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            12580 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            12581 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            12582 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            12583 ; 683  |
                            12584 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            12585 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            12586 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12587 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            12588 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            12589 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            12590 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            12591 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            12592 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            12593 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            12594 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            12595 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            12596 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            12597 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            12598 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            12599 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            12600 ; 700  |
                            12601 ; 701  |typedef union               
                            12602 ; 702  |{
                            12603 ; 703  |    struct {
                            12604 ; 704  |        int EP0              :1;
                            12605 ; 705  |        int EP1              :1;
                            12606 ; 706  |        int EP2              :1;
                            12607 ; 707  |        int EP3              :1;
                            12608 ; 708  |        int EP4              :1;
                            12609 ; 709  |        int EP5              :1;
                            12610 ; 710  |        int EP6              :1;
                            12611 ; 711  |        int EP7              :1;
                            12612 ; 712  |        int EP8              :1;
                            12613 ; 713  |        int EP9              :1;
                            12614 ; 714  |        int EP10             :1;
                            12615 ; 715  |        int EP11             :1;
                            12616 ; 716  |        int EP12             :1;
                            12617 ; 717  |        int EP13             :1;
                            12618 ; 718  |        int EP14             :1;
                            12619 ; 719  |        int EP15             :1;
                            12620 ; 720  |        int                  :32;
                            12621 ; 721  |    } B;
                            12622 ; 722  |    DWORD I;
                            12623 ; 723  |} endpsetupstat_type;
                            12624 ; 724  |
                            12625 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            12626 ; 726  |
                            12627 ; 727  |typedef union               
                            12628 ; 728  |{
                            12629 ; 729  |    struct {
                            12630 ; 730  |        int EP0              :1;
                            12631 ; 731  |        int EP1              :1;
                            12632 ; 732  |        int EP2              :1;
                            12633 ; 733  |        int EP3              :1;
                            12634 ; 734  |        int EP4              :1;
                            12635 ; 735  |        int EP5              :1;
                            12636 ; 736  |        int EP6              :1;
                            12637 ; 737  |        int EP7              :1;
                            12638 ; 738  |        int EP8              :1;
                            12639 ; 739  |        int EP9              :1;
                            12640 ; 740  |        int EP10             :1;
                            12641 ; 741  |        int EP11             :1;
                            12642 ; 742  |        int EP12             :1;
                            12643 ; 743  |        int EP13             :1;
                            12644 ; 744  |        int EP14             :1;
                            12645 ; 745  |        int EP15             :1;
                            12646 ; 746  |        int                  :8;
                            12647 ; 747  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12648 ; 748  |    WORD I;
                            12649 ; 749  |} endpt_type;
                            12650 
                            12688 
                            12689 ; 750  |
                            12690 ; 751  |typedef union
                            12691 ; 752  |{
                            12692 ; 753  |   struct {
                            12693 ; 754  |       endpt_type  RX;
                            12694 ; 755  |       endpt_type  TX;
                            12695 ; 756  |   } W;
                            12696 ; 757  |   DWORD DW;
                            12697 ; 758  |} endptrxtx_type;
                            12698 ; 759  |
                            12699 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            12700 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            12701 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            12702 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            12703 ; 764  |
                            12704 ; 765  |
                            12705 ; 766  |
                            12706 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            12707 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            12708 ; 769  |
                            12709 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            12710 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            12711 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            12712 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            12713 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            12714 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            12715 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            12716 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            12717 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            12718 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            12719 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            12720 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            12721 ; 782  |
                            12722 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            12723 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            12724 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            12725 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            12726 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            12727 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            12728 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            12729 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            12730 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            12731 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            12732 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            12733 ; 794  |
                            12734 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            12735 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            12736 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            12737 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            12738 ; 799  |
                            12739 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            12740 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            12741 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            12742 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12743 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            12744 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            12745 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            12746 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            12747 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            12748 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            12749 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            12750 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            12751 ; 812  |
                            12752 ; 813  |
                            12753 ; 814  |typedef union               
                            12754 ; 815  |{
                            12755 ; 816  |    struct {
                            12756 ; 817  |        int RXS             :1;
                            12757 ; 818  |        int RXD             :1;
                            12758 ; 819  |        int RXT             :2;
                            12759 ; 820  |        int                 :1;
                            12760 ; 821  |        int RXI             :1;
                            12761 ; 822  |        int RXR             :1;
                            12762 ; 823  |        int RXE             :1;
                            12763 ; 824  |        int                 :8;
                            12764 ; 825  |        int TXS             :1;
                            12765 ; 826  |        int TXD             :1;
                            12766 ; 827  |        int TXT             :2;
                            12767 ; 828  |        int                 :1;
                            12768 ; 829  |        int TXI             :1;
                            12769 ; 830  |        int TXR             :1;
                            12770 ; 831  |        int TXE             :1;
                            12771 ; 832  |        int                 :24;
                            12772 ; 833  |    } B;
                            12773 ; 834  |    DWORD I;
                            12774 ; 835  |} endptctrl_type;
                            12775 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            12776 ; 837  |
                            12777 ; 838  |#endif
                            12778 ; 839  |
                            12779 ; 840  |
                            12780 
                            12782 
                            12783 ; 37   |#include "regsusb20phy.h"
                            12784 
                            12786 
                            12787 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12788 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12789 ; 3    |//;  File        : regsusbphy.inc
                            12790 ; 4    |//;  Description : USB20 PHY Register definition
                            12791 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12792 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12793 ; 7    |
                            12794 ; 8    |// The following naming conventions are followed in this file.
                            12795 ; 9    |// All registers are named using the format...
                            12796 ; 10   |//     HW_<module>_<regname>
                            12797 ; 11   |// where <module> is the module name which can be any of the following...
                            12798 ; 12   |//     USB20
                            12799 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12800 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12801 ; 15   |// that module)
                            12802 ; 16   |// <regname> is the specific register within that module
                            12803 ; 17   |// We also define the following...
                            12804 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12805 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12806 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12807 ; 21   |// which does something else, and
                            12808 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12809 ; 23   |// which does something else.
                            12810 ; 24   |// Other rules
                            12811 ; 25   |//     All caps
                            12812 ; 26   |//     Numeric identifiers start at 0
                            12813 ; 27   |
                            12814 ; 28   |#if !(defined(regsusbphyinc))
                            12815 ; 29   |#define regsusbphyinc 1
                            12816 ; 30   |
                            12817 ; 31   |#include "types.h"
                            12818 
                            12820 
                            12821 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12822 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12823 ; 3    |//
                            12824 ; 4    |// Filename: types.h
                            12825 ; 5    |// Description: Standard data types
                            12826 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12827 ; 7    |
                            12828 ; 8    |#ifndef _TYPES_H
                            12829 ; 9    |#define _TYPES_H
                            12830 ; 10   |
                            12831 ; 11   |// TODO:  move this outta here!
                            12832 ; 12   |#if !defined(NOERROR)
                            12833 ; 13   |#define NOERROR 0
                            12834 ; 14   |#define SUCCESS 0
                            12835 ; 15   |#endif 
                            12836 ; 16   |#if !defined(SUCCESS)
                            12837 ; 17   |#define SUCCESS  0
                            12838 ; 18   |#endif
                            12839 ; 19   |#if !defined(ERROR)
                            12840 ; 20   |#define ERROR   -1
                            12841 ; 21   |#endif
                            12842 ; 22   |#if !defined(FALSE)
                            12843 ; 23   |#define FALSE 0
                            12844 ; 24   |#endif
                            12845 ; 25   |#if !defined(TRUE)
                            12846 ; 26   |#define TRUE  1
                            12847 ; 27   |#endif
                            12848 ; 28   |
                            12849 ; 29   |#if !defined(NULL)
                            12850 ; 30   |#define NULL 0
                            12851 ; 31   |#endif
                            12852 ; 32   |
                            12853 ; 33   |#define MAX_INT     0x7FFFFF
                            12854 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12855 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12856 ; 36   |#define MAX_ULONG   (-1) 
                            12857 ; 37   |
                            12858 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12859 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12860 ; 40   |
                            12861 ; 41   |
                            12862 ; 42   |#define BYTE    unsigned char       // btVarName
                            12863 ; 43   |#define CHAR    signed char         // cVarName
                            12864 ; 44   |#define USHORT  unsigned short      // usVarName
                            12865 ; 45   |#define SHORT   unsigned short      // sVarName
                            12866 ; 46   |#define WORD    unsigned int        // wVarName
                            12867 ; 47   |#define INT     signed int          // iVarName
                            12868 ; 48   |#define DWORD   unsigned long       // dwVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12869 ; 49   |#define LONG    signed long         // lVarName
                            12870 ; 50   |#define BOOL    unsigned int        // bVarName
                            12871 ; 51   |#define FRACT   _fract              // frVarName
                            12872 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12873 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12874 ; 54   |#define FLOAT   float               // fVarName
                            12875 ; 55   |#define DBL     double              // dVarName
                            12876 ; 56   |#define ENUM    enum                // eVarName
                            12877 ; 57   |#define CMX     _complex            // cmxVarName
                            12878 ; 58   |typedef WORD UCS3;                   // 
                            12879 ; 59   |
                            12880 ; 60   |#define UINT16  unsigned short
                            12881 ; 61   |#define UINT8   unsigned char   
                            12882 ; 62   |#define UINT32  unsigned long
                            12883 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12884 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12885 ; 65   |#define WCHAR   UINT16
                            12886 ; 66   |
                            12887 ; 67   |//UINT128 is 16 bytes or 6 words
                            12888 ; 68   |typedef struct UINT128_3500 {   
                            12889 ; 69   |    int val[6];     
                            12890 ; 70   |} UINT128_3500;
                            12891 ; 71   |
                            12892 ; 72   |#define UINT128   UINT128_3500
                            12893 ; 73   |
                            12894 ; 74   |// Little endian word packed byte strings:   
                            12895 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12896 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12897 ; 77   |// Little endian word packed byte strings:   
                            12898 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12899 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12900 ; 80   |
                            12901 ; 81   |// Declare Memory Spaces To Use When Coding
                            12902 ; 82   |// A. Sector Buffers
                            12903 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12904 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12905 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12906 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12907 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12908 ; 88   |// B. Media DDI Memory
                            12909 ; 89   |#define MEDIA_DDI_MEM _Y
                            12910 ; 90   |
                            12911 ; 91   |
                            12912 ; 92   |
                            12913 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12914 ; 94   |// Examples of circular pointers:
                            12915 ; 95   |//    INT CIRC cpiVarName
                            12916 ; 96   |//    DWORD CIRC cpdwVarName
                            12917 ; 97   |
                            12918 ; 98   |#define RETCODE INT                 // rcVarName
                            12919 ; 99   |
                            12920 ; 100  |// generic bitfield structure
                            12921 ; 101  |struct Bitfield {
                            12922 ; 102  |    unsigned int B0  :1;
                            12923 ; 103  |    unsigned int B1  :1;
                            12924 ; 104  |    unsigned int B2  :1;
                            12925 ; 105  |    unsigned int B3  :1;
                            12926 ; 106  |    unsigned int B4  :1;
                            12927 ; 107  |    unsigned int B5  :1;
                            12928 ; 108  |    unsigned int B6  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12929 ; 109  |    unsigned int B7  :1;
                            12930 ; 110  |    unsigned int B8  :1;
                            12931 ; 111  |    unsigned int B9  :1;
                            12932 ; 112  |    unsigned int B10 :1;
                            12933 ; 113  |    unsigned int B11 :1;
                            12934 ; 114  |    unsigned int B12 :1;
                            12935 ; 115  |    unsigned int B13 :1;
                            12936 ; 116  |    unsigned int B14 :1;
                            12937 ; 117  |    unsigned int B15 :1;
                            12938 ; 118  |    unsigned int B16 :1;
                            12939 ; 119  |    unsigned int B17 :1;
                            12940 ; 120  |    unsigned int B18 :1;
                            12941 ; 121  |    unsigned int B19 :1;
                            12942 ; 122  |    unsigned int B20 :1;
                            12943 ; 123  |    unsigned int B21 :1;
                            12944 ; 124  |    unsigned int B22 :1;
                            12945 ; 125  |    unsigned int B23 :1;
                            12946 ; 126  |};
                            12947 ; 127  |
                            12948 ; 128  |union BitInt {
                            12949 ; 129  |        struct Bitfield B;
                            12950 ; 130  |        int        I;
                            12951 ; 131  |};
                            12952 ; 132  |
                            12953 ; 133  |#define MAX_MSG_LENGTH 10
                            12954 ; 134  |struct CMessage
                            12955 ; 135  |{
                            12956 ; 136  |        unsigned int m_uLength;
                            12957 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12958 ; 138  |};
                            12959 ; 139  |
                            12960 ; 140  |typedef struct {
                            12961 ; 141  |    WORD m_wLength;
                            12962 ; 142  |    WORD m_wMessage;
                            12963 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12964 ; 144  |} Message;
                            12965 ; 145  |
                            12966 ; 146  |struct MessageQueueDescriptor
                            12967 ; 147  |{
                            12968 ; 148  |        int *m_pBase;
                            12969 ; 149  |        int m_iModulo;
                            12970 ; 150  |        int m_iSize;
                            12971 ; 151  |        int *m_pHead;
                            12972 ; 152  |        int *m_pTail;
                            12973 ; 153  |};
                            12974 ; 154  |
                            12975 ; 155  |struct ModuleEntry
                            12976 ; 156  |{
                            12977 ; 157  |    int m_iSignaledEventMask;
                            12978 ; 158  |    int m_iWaitEventMask;
                            12979 ; 159  |    int m_iResourceOfCode;
                            12980 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12981 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12982 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12983 ; 163  |    int m_uTimeOutHigh;
                            12984 ; 164  |    int m_uTimeOutLow;
                            12985 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12986 ; 166  |};
                            12987 ; 167  |
                            12988 ; 168  |union WaitMask{
                            12989 ; 169  |    struct B{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12990 ; 170  |        unsigned int m_bNone     :1;
                            12991 ; 171  |        unsigned int m_bMessage  :1;
                            12992 ; 172  |        unsigned int m_bTimer    :1;
                            12993 ; 173  |        unsigned int m_bButton   :1;
                            12994 ; 174  |    } B;
                            12995 ; 175  |    int I;
                            12996 ; 176  |} ;
                            12997 ; 177  |
                            12998 ; 178  |
                            12999 ; 179  |struct Button {
                            13000 ; 180  |        WORD wButtonEvent;
                            13001 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13002 ; 182  |};
                            13003 ; 183  |
                            13004 ; 184  |struct Message {
                            13005 ; 185  |        WORD wMsgLength;
                            13006 ; 186  |        WORD wMsgCommand;
                            13007 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13008 ; 188  |};
                            13009 ; 189  |
                            13010 ; 190  |union EventTypes {
                            13011 ; 191  |        struct CMessage msg;
                            13012 ; 192  |        struct Button Button ;
                            13013 ; 193  |        struct Message Message;
                            13014 ; 194  |};
                            13015 ; 195  |
                            13016 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13017 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13018 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13019 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13020 ; 200  |
                            13021 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13022 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13023 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13024 ; 204  |
                            13025 ; 205  |#if DEBUG
                            13026 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13027 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13028 ; 208  |#else 
                            13029 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            13030 ; 210  |#define DebugBuildAssert(x)    
                            13031 ; 211  |#endif
                            13032 ; 212  |
                            13033 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13034 ; 214  |//  #pragma asm
                            13035 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13036 ; 216  |//  #pragma endasm
                            13037 ; 217  |
                            13038 ; 218  |
                            13039 ; 219  |#ifdef COLOR_262K
                            13040 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            13041 ; 221  |#elif defined(COLOR_65K)
                            13042 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            13043 ; 223  |#else
                            13044 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            13045 ; 225  |#endif
                            13046 ; 226  |    
                            13047 ; 227  |#endif // #ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13048 
                            13050 
                            13051 ; 32   |
                            13052 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13053 ; 34   |//   USB2.0 PHY STMP Registers 
                            13054 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13055 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            13056 ; 37   |
                            13057 ; 38   |
                            13058 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            13059 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            13060 ; 41   |
                            13061 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            13062 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            13063 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            13064 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            13065 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            13066 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            13067 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            13068 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            13069 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            13070 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            13071 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            13072 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            13073 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            13074 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            13075 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            13076 ; 57   |
                            13077 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            13078 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            13079 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            13080 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            13081 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            13082 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            13083 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            13084 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            13085 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            13086 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            13087 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            13088 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            13089 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            13090 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            13091 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            13092 ; 73   |
                            13093 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            13094 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            13095 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            13096 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            13097 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            13098 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            13099 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            13100 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            13101 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            13102 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            13103 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            13104 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            13105 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            13106 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            13107 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            13108 ; 89   |
                            13109 ; 90   |typedef union               
                            13110 ; 91   |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13111 ; 92   |    struct {
                            13112 ; 93   |        int RSVD0          :5;
                            13113 ; 94   |        int TXDISCON1500   :1;
                            13114 ; 95   |        int PLLVCOPWD      :1;
                            13115 ; 96   |        int PLLVCPPWD      :1;
                            13116 ; 97   |        int RSVD1          :2;
                            13117 ; 98   |        int TXPWDFS        :1;
                            13118 ; 99   |        int TXPWDIBIAS     :1;
                            13119 ; 100  |        int TXPWDV2I       :1;
                            13120 ; 101  |        int TXPWDVBG       :1;
                            13121 ; 102  |        int TXPWDCOMP      :1;
                            13122 ; 103  |        int RSVD2          :1;
                            13123 ; 104  |        int RXPWDDISCONDET :1;
                            13124 ; 105  |        int RXPWDENV       :1;
                            13125 ; 106  |        int RXPWD1PT1      :1;
                            13126 ; 107  |        int RXPWDDIFF      :1;
                            13127 ; 108  |        int RXPWDRX        :1;
                            13128 ; 109  |        int RSVD3          :1;
                            13129 ; 110  |        int PWDIBIAS       :1;
                            13130 ; 111  |        int REGRESET       :1;
                            13131 ; 112  |    } B;
                            13132 ; 113  |    int I;
                            13133 ; 114  |} usbphypwd_type;
                            13134 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            13135 ; 116  |
                            13136 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            13137 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            13138 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            13139 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            13140 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            13141 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            13142 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            13143 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            13144 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            13145 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            13146 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            13147 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            13148 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            13149 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            13150 ; 131  |
                            13151 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            13152 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            13153 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            13154 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            13155 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            13156 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            13157 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            13158 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            13159 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            13160 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            13161 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            13162 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            13163 ; 144  |
                            13164 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            13165 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            13166 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            13167 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13168 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            13169 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                            13170 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            13171 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                            13172 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            13173 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            13174 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            13175 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            13176 ; 157  |
                            13177 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            13178 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            13179 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            13180 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            13181 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            13182 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            13183 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            13184 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            13185 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            13186 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            13187 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            13188 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            13189 ; 170  |
                            13190 ; 171  |typedef union               
                            13191 ; 172  |{
                            13192 ; 173  |    struct {
                            13193 ; 174  |        int TXCAL1500          :4;
                            13194 ; 175  |        int RSVD0              :1;
                            13195 ; 176  |        int TXENCAL1500        :1;
                            13196 ; 177  |        int TXHSXCVR           :1;
                            13197 ; 178  |        int TXCALIBRATE        :1;
                            13198 ; 179  |        int TXCAL45DN          :4;
                            13199 ; 180  |        int RSVD1              :1;
                            13200 ; 181  |        int TXENCAL45DN        :1;
                            13201 ; 182  |        int TXHSTERM           :1;
                            13202 ; 183  |        int TXSKEW             :1;
                            13203 ; 184  |        int TXCAL45DP          :4;
                            13204 ; 185  |        int RSVD2              :1;
                            13205 ; 186  |        int TXENCAL45DP        :1;
                            13206 ; 187  |        int TXFSHIZ            :1;
                            13207 ; 188  |        int TXCOMPOUT          :1;
                            13208 ; 189  |    } B;
                            13209 ; 190  |    int I;
                            13210 ; 191  |} usbphytx_type;
                            13211 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            13212 ; 193  |
                            13213 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            13214 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            13215 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            13216 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            13217 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            13218 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            13219 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            13220 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            13221 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13222 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            13223 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            13224 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            13225 ; 206  |
                            13226 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            13227 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            13228 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            13229 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            13230 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            13231 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            13232 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            13233 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            13234 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            13235 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            13236 ; 217  |
                            13237 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            13238 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            13239 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            13240 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            13241 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            13242 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            13243 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            13244 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            13245 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            13246 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            13247 ; 228  |
                            13248 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            13249 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            13250 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            13251 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            13252 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            13253 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            13254 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            13255 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            13256 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            13257 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            13258 ; 239  |
                            13259 ; 240  |typedef union               
                            13260 ; 241  |{
                            13261 ; 242  |    struct {
                            13262 ; 243  |        int PLLV2ISEL        :4;
                            13263 ; 244  |        int RSVD0            :1;
                            13264 ; 245  |        int PLLCPDBLIP       :1;
                            13265 ; 246  |        int PLLVCOCLK2       :1;
                            13266 ; 247  |        int PLLVCOCLK24      :1;
                            13267 ; 248  |        int PLLCPNSEL        :4;
                            13268 ; 249  |        int PLLCLKDIVSEL     :4;
                            13269 ; 250  |        int RSVD1            :4;
                            13270 ; 251  |        int PLLPFDRST        :1;
                            13271 ; 252  |        int PLLCPSHORTLFR    :1;
                            13272 ; 253  |        int PLLVCOKSTART     :1;
                            13273 ; 254  |        int PLLCLKDIVRSTZ    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13274 ; 255  |    } B;
                            13275 ; 256  |    int I;
                            13276 ; 257  |} usbphypll_type;
                            13277 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            13278 ; 259  |
                            13279 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            13280 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            13281 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            13282 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            13283 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            13284 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            13285 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            13286 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            13287 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            13288 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            13289 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            13290 ; 271  |
                            13291 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            13292 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            13293 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            13294 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            13295 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            13296 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            13297 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            13298 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            13299 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            13300 ; 281  |
                            13301 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            13302 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            13303 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            13304 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            13305 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            13306 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            13307 ; 288  |//              480Mhz/7 =68.57Mhz
                            13308 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            13309 ; 290  |
                            13310 ; 291  |//              480Mhz/8 ~60Mhz
                            13311 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            13312 ; 293  |
                            13313 ; 294  |//              480Mhz/9 =53.3Mhz
                            13314 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            13315 ; 296  |
                            13316 ; 297  |//              480Mhz/10 =48Mhz
                            13317 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            13318 ; 299  |
                            13319 ; 300  |
                            13320 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            13321 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            13322 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            13323 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            13324 ; 305  |
                            13325 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            13326 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13327 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            13328 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            13329 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            13330 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            13331 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            13332 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            13333 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            13334 ; 315  |
                            13335 ; 316  |typedef union               
                            13336 ; 317  |{
                            13337 ; 318  |    struct {
                            13338 ; 319  |     int ENVADJ               :4;
                            13339 ; 320  |     int DISCONADJ            :4;
                            13340 ; 321  |     int DEBUGMODE            :4;
                            13341 ; 322  |     int PLLLKTIMECTL         :4;
                            13342 ; 323  |     int PLLCKDIVCTL          :4;
                            13343 ; 324  |     int HOSTMODETEST         :1;
                            13344 ; 325  |     int FSCKSOURCESEL        :1;
                            13345 ; 326  |     int REGRXDBYPASS         :1;
                            13346 ; 327  |     int PLLLOCKED            :1;
                            13347 ; 328  |    } B;
                            13348 ; 329  |    int I;
                            13349 ; 330  |} usbphyrx_type;
                            13350 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            13351 ; 332  |
                            13352 ; 333  |#endif
                            13353 ; 334  |
                            13354 
                            13356 
                            13357 ; 38   |
                            13358 ; 39   |
                            13359 ; 40   |#endif // if (!@def(hwequ))
                            13360 ; 41   |
                            13361 
                            13363 
                            13364 ; 12   |#else 
                            13365 ; 13   |//include "regscodec.inc"
                            13366 ; 14   |#endif
                            13367 ; 15   |
                            13368 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            13369 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            13370 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            13371 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            13372 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            13373 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            13374 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            13375 ; 23   |
                            13376 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            13377 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            13378 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            13379 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            13380 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            13381 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            13382 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            13383 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13384 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            13385 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            13386 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            13387 ; 35   |
                            13388 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            13389 ; 37   |// MEDIA DEFINITIONS
                            13390 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            13391 ; 39   |
                            13392 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            13393 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            13394 ; 42   |#if defined(NAND1)
                            13395 ; 43   |#define SM_INTERNAL_CHIPS 1
                            13396 ; 44   |#else 
                            13397 ; 45   |#if defined(NAND2)
                            13398 ; 46   |#define SM_INTERNAL_CHIPS 2
                            13399 ; 47   |#else 
                            13400 ; 48   |#if defined(NAND3)
                            13401 ; 49   |#define SM_INTERNAL_CHIPS 3
                            13402 ; 50   |#else 
                            13403 ; 51   |#if defined(NAND4)
                            13404 ; 52   |#define SM_INTERNAL_CHIPS 4
                            13405 ; 53   |#else 
                            13406 ; 54   |#define SM_INTERNAL_CHIPS 1
                            13407 ; 55   |#endif
                            13408 ; 56   |#endif
                            13409 ; 57   |#endif
                            13410 ; 58   |#endif
                            13411 ; 59   |
                            13412 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            13413 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            13414 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            13415 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            13416 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            13417 ; 65   |//*** comment out if active high ****
                            13418 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            13419 ; 67   |
                            13420 ; 68   |#if defined(SMEDIA)
                            13421 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            13422 ; 70   |#define NUM_SM_EXTERNAL 1
                            13423 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13424 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            13425 ; 73   |#else 
                            13426 ; 74   |#if defined(MMC)
                            13427 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            13428 ; 76   |#define NUM_SM_EXTERNAL 0
                            13429 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            13430 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            13431 ; 79   |#else 
                            13432 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            13433 ; 81   |#define NUM_SM_EXTERNAL 0
                            13434 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13435 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            13436 ; 84   |#endif
                            13437 ; 85   |#endif
                            13438 ; 86   |
                            13439 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            13440 ; 88   |// Mass Storage Class definitions
                            13441 ; 89   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13442 ; 90   |// Set to 0 if Composite Device build is desired.    
                            13443 ; 91   |#define MULTI_LUN_BUILD 1   
                            13444 ; 92   |
                            13445 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            13446 ; 94   |//  SCSI
                            13447 ; 95   |#if (MULTI_LUN_BUILD==0)
                            13448 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13449 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            13450 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13451 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            13452 ; 100  |  #else
                            13453 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            13454 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13455 ; 103  |  #endif
                            13456 ; 104  |#else
                            13457 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            13458 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13459 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            13460 ; 108  |  #else
                            13461 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            13462 ; 110  |  #endif
                            13463 ; 111  |#endif
                            13464 ; 112  |
                            13465 ; 113  |
                            13466 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            13467 ; 115  |
                            13468 ; 116  |
                            13469 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            13470 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            13471 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            13472 ; 120  |#ifdef MMC
                            13473 ; 121  |#ifdef MTP_BUILD
                            13474 ; 122  |// --------------------
                            13475 ; 123  |// MTP and MMC
                            13476 ; 124  |// --------------------
                            13477 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            13478 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            13479 ; 127  |#else  // ifndef MTP_BUILD
                            13480 ; 128  |#ifdef STMP_BUILD_PLAYER
                            13481 ; 129  |// --------------------
                            13482 ; 130  |// Player and MMC
                            13483 ; 131  |// --------------------
                            13484 ; 132  |#else
                            13485 ; 133  |// --------------------
                            13486 ; 134  |// USBMSC and MMC
                            13487 ; 135  |// --------------------
                            13488 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            13489 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            13490 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            13491 ; 139  |#endif // ifdef MTP_BUILD
                            13492 ; 140  |#else  // ifndef MMC
                            13493 ; 141  |#ifdef MTP_BUILD
                            13494 ; 142  |// --------------------
                            13495 ; 143  |// MTP and NAND only
                            13496 ; 144  |// --------------------
                            13497 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            13498 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            13499 ; 147  |#else  // ifndef MTP_BUILD
                            13500 ; 148  |#ifdef STMP_BUILD_PLAYER
                            13501 ; 149  |// --------------------
                            13502 ; 150  |// Player and NAND only
                            13503 ; 151  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13504 ; 152  |#else
                            13505 ; 153  |// --------------------
                            13506 ; 154  |// USBMSC and NAND only
                            13507 ; 155  |// --------------------
                            13508 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            13509 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            13510 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            13511 ; 159  |#endif // ifdef MTP_BUILD
                            13512 ; 160  |#endif // ifdef MMC 
                            13513 ; 161  |
                            13514 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            13515 ; 163  |#if (defined(MTP_BUILD))
                            13516 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            13517 ; 165  |
                            13518 ; 166  |////!
                            13519 ; 167  |////! This varible holds the watchdog count for the store flush.
                            13520 ; 168  |////!
                            13521 ; 169  |///
                            13522 ; 170  |#include <types.h>
                            13523 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            13524 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            13525 ; 173  |#endif
                            13526 ; 174  |
                            13527 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            13528 ; 176  |// These are needed here for Mass Storage Class
                            13529 ; 177  |// Needs to be cleaned up
                            13530 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            13531 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            13532 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            13533 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            13534 ; 182  |
                            13535 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            13536 ; 184  |
                            13537 ; 185  |#endif
                            13538 ; 186  |
                            13539 ; 187  |
                            13540 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            13541 ; 189  |// SmartMedia/NAND defs
                            13542 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13543 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            13544 ; 192  |
                            13545 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            13546 ; 194  |// Sysloadresources defs
                            13547 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13548 ; 196  |
                            13549 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            13550 ; 198  |// MMC defs
                            13551 ; 199  |#define MMC_MAX_PARTITIONS 1
                            13552 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            13553 ; 201  |
                            13554 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            13555 ; 203  |// SPI defs
                            13556 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            13557 ; 205  |
                            13558 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            13559 ; 207  |// Global media defs
                            13560 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            13561 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            13562 ; 210  |
                            13563 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            13564 ; 212  |// DO NOT CHANGE THESE!!!
                            13565 ; 213  |#define SM_MAX_PARTITIONS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13566 ; 214  |#define MAX_HANDLES 2
                            13567 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            13568 ; 216  |
                            13569 ; 217  |
                            13570 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            13571 ; 219  |// Battery LRADC Values 
                            13572 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            13573 ; 221  |// brownout trip point in mV (moved by RS)
                            13574 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            13575 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            13576 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            13577 ; 225  |//     audio recording to media.
                            13578 ; 226  |#define BATT_SAFETY_MARGIN 10
                            13579 ; 227  |
                            13580 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            13581 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            13582 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            13583 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            13584 ; 232  |
                            13585 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            13586 ; 234  |
                            13587 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            13588 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            13589 ; 237  |#if (!defined(CLCD))
                            13590 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            13591 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            13592 ; 240  |#else 
                            13593 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            13594 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            13595 ; 243  |#endif
                            13596 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            13597 ; 245  |
                            13598 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            13599 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            13600 ; 248  |// See mp3 encoder overlay.
                            13601 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            13602 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            13603 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            13604 ; 252  |
                            13605 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            13606 ; 254  |// Voice recording filenames
                            13607 ; 255  |// number of digits in filename Vxxx.wav
                            13608 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            13609 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            13610 ; 258  |
                            13611 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            13612 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            13613 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            13614 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            13615 ; 263  |#if defined(DEVICE_3500)
                            13616 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            13617 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            13618 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            13619 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            13620 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13621 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13622 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            13623 ; 271  |
                            13624 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            13625 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            13626 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            13627 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            13628 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            13629 ; 277  |
                            13630 ; 278  |#else 
                            13631 ; 279  |// STMP3410
                            13632 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            13633 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13634 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            13635 ; 283  |#endif
                            13636 ; 284  |
                            13637 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            13638 ; 286  |// Number of available soft timers
                            13639 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            13640 ; 288  |#if defined(SYNC_LYRICS)
                            13641 ; 289  |#define SOFT_TIMERS 10
                            13642 ; 290  |#else 
                            13643 ; 291  |#if defined(JPEG_DECODER)
                            13644 ; 292  |#define SOFT_TIMERS 10
                            13645 ; 293  |#else 
                            13646 ; 294  |#define SOFT_TIMERS 9
                            13647 ; 295  |#endif
                            13648 ; 296  |#endif
                            13649 ; 297  |
                            13650 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            13651 ; 299  |//  sizes
                            13652 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            13653 ; 301  |#if defined(MMC)
                            13654 ; 302  |#if defined(USE_PLAYLIST5)
                            13655 ; 303  |#define MENU_STACK_SIZE 1500
                            13656 ; 304  |#else 
                            13657 ; 305  |#define MENU_STACK_SIZE 1250
                            13658 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            13659 ; 307  |#else 
                            13660 ; 308  |#if defined(USE_PLAYLIST5)
                            13661 ; 309  |#define MENU_STACK_SIZE 1500
                            13662 ; 310  |#else 
                            13663 ; 311  |#define MENU_STACK_SIZE 1250
                            13664 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            13665 ; 313  |#endif //if @def('MMC')
                            13666 ; 314  |
                            13667 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            13668 ; 316  |// 
                            13669 ; 317  |#define STACK_L1_SIZE 750
                            13670 ; 318  |#define STACK_L2_SIZE 100
                            13671 ; 319  |#define STACK_L3_SIZE 160
                            13672 ; 320  |
                            13673 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            13674 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            13675 ; 323  |// is ok with switching code.
                            13676 ; 324  |#if defined(MTP_BUILD)
                            13677 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            13678 ; 326  |#endif
                            13679 ; 327  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13680 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            13681 ; 329  |// maximum number of nested funclets 
                            13682 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            13683 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            13684 ; 332  |
                            13685 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            13686 ; 334  |//    LCD DEFINITIONS
                            13687 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            13688 ; 336  |
                            13689 ; 337  |#define SPACE_CHAR 0x000020          
                            13690 ; 338  |#define ZERO_CHAR 0x000030
                            13691 ; 339  |#define COLON_CHAR 0x00003A
                            13692 ; 340  |#define PERIOD_CHAR 0x00002E
                            13693 ; 341  |
                            13694 ; 342  |#if (defined(S6B33B0A_LCD))
                            13695 ; 343  |#define LCD_X_SIZE 128
                            13696 ; 344  |#define LCD_Y_SIZE 159
                            13697 ; 345  |#endif
                            13698 ; 346  |
                            13699 ; 347  |#if (defined(SED15XX_LCD))
                            13700 ; 348  |#define LCD_X_SIZE 128
                            13701 ; 349  |#define LCD_Y_SIZE 64
                            13702 ; 350  |#endif
                            13703 ; 351  |
                            13704 ; 352  |
                            13705 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            13706 ; 354  |//   Details on Customizing Contrast
                            13707 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            13708 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            13709 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            13710 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            13711 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            13712 ; 360  |//   unless the ezact sequence is remembered.
                            13713 ; 361  |//   To find out what range your player supports: 
                            13714 ; 362  |//   change these equs to full range or comment out (full range is default)
                            13715 ; 363  |//;;;;;;
                            13716 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            13717 ; 365  |// recommended calibration using player -- uncomment 
                            13718 ; 366  |//;;;;;;
                            13719 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            13720 ; 368  |////////////////////////////
                            13721 ; 369  |#if (defined(DEMO_HW))
                            13722 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            13723 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            13724 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            13725 ; 373  |#else 
                            13726 ; 374  |
                            13727 ; 375  |#if (defined(S6B33B0A_LCD))
                            13728 ; 376  |#define LCD_MAX_CONTRAST 210
                            13729 ; 377  |#define LCD_MIN_CONTRAST 160    
                            13730 ; 378  |#endif
                            13731 ; 379  |
                            13732 ; 380  |#if (defined(SED15XX_LCD))
                            13733 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            13734 ; 382  |// Engineering board regs support range [17-37].
                            13735 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            13736 ; 384  |//   One default contrast range [24-42] works for both.
                            13737 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            13738 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            13739 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            13740 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13741 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            13742 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            13743 ; 391  |
                            13744 ; 392  |#if (defined(NEWSHINGYIH))
                            13745 ; 393  |#define LCD_MAX_CONTRAST 250
                            13746 ; 394  |#define LCD_MIN_CONTRAST 0
                            13747 ; 395  |#else 
                            13748 ; 396  |//-----
                            13749 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            13750 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            13751 ; 399  |#define LCD_MAX_CONTRAST 250
                            13752 ; 400  |#define LCD_MIN_CONTRAST 0
                            13753 ; 401  |
                            13754 ; 402  |//=====
                            13755 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            13756 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            13757 ; 405  |//LCD_MAX_CONTRAST equ 42
                            13758 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            13759 ; 407  |
                            13760 ; 408  |#endif
                            13761 ; 409  |#endif
                            13762 ; 410  |
                            13763 ; 411  |#endif
                            13764 ; 412  |
                            13765 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            13766 ; 414  |// The default value of the lcd contrast in % of range
                            13767 ; 415  |//   the default value is used when no settings.dat is available
                            13768 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            13769 ; 417  |
                            13770 ; 418  |#if (defined(S6B33B0A_LCD))
                            13771 ; 419  |// 60% of range is default value
                            13772 ; 420  |#define DEFAULT_CONTRAST 50 
                            13773 ; 421  |#endif
                            13774 ; 422  |
                            13775 ; 423  |#if (defined(SED15XX_LCD))
                            13776 ; 424  |// % of range is default value (was 60%)
                            13777 ; 425  |#define DEFAULT_CONTRAST 50 
                            13778 ; 426  |#endif
                            13779 ; 427  |
                            13780 ; 428  |
                            13781 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13782 ; 430  |// make lower when doing calibration
                            13783 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13784 ; 432  |
                            13785 ; 433  |
                            13786 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13787 ; 435  |// For FFWD and RWND
                            13788 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13789 ; 437  |#define SECONDS_TO_SKIP 1
                            13790 ; 438  |#define SECONDS_TO_SKIP1 3
                            13791 ; 439  |#define SECONDS_TO_SKIP2 6
                            13792 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13793 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13794 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13795 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13796 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13797 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13798 ; 446  |
                            13799 ; 447  |// For audible FFW/RWD
                            13800 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13801 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13802 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13803 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13804 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13805 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13806 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13807 ; 455  |#define LEVEL2_BOUNDARY 33 
                            13808 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13809 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13810 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13811 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13812 ; 460  |// Short Song Time, songs too short to play.
                            13813 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13814 ; 462  |
                            13815 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13816 ; 464  |// MP3 Sync Values
                            13817 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13818 ; 466  |// # bytes to look for sync before marking it bad
                            13819 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13820 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13821 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13822 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13823 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13824 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13825 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13826 ; 474  |
                            13827 ; 475  |
                            13828 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13829 ; 477  |//// Multi-Stage Volume Control Definitions
                            13830 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13831 ; 479  |//// Use Multi-Stage Volume
                            13832 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13833 ; 481  |
                            13834 ; 482  |//// Master Volume definitions
                            13835 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13836 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13837 ; 485  |
                            13838 ; 486  |//// DAC-Mode definitions
                            13839 ; 487  |//// Adjusts 0dB point
                            13840 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13841 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13842 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            13843 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13844 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            13845 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            13846 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13847 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13848 ; 496  |
                            13849 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13850 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13851 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            13852 ; 500  |
                            13853 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            13854 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            13855 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13856 ; 504  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13857 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            13858 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13859 ; 507  |
                            13860 ; 508  |
                            13861 ; 509  |//// Line In definitions (used for Line-In 1)
                            13862 ; 510  |//// 0dB point of the Line In
                            13863 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13864 ; 512  |//// Minimum volume of Line In
                            13865 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13866 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13867 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13868 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13869 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13870 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            13871 ; 519  |
                            13872 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13873 ; 521  |//// 0dB point of the Line In
                            13874 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13875 ; 523  |//// Minimum volume of Line In
                            13876 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13877 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13878 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13879 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13880 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13881 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13882 ; 530  |
                            13883 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13884 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            13885 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13886 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13887 ; 535  |
                            13888 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13889 ; 537  |////
                            13890 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13891 ; 539  |////
                            13892 ; 540  |///
                            13893 ; 541  |#include <types.h>
                            13894 ; 542  |extern volatile WORD g_wActivityState;
                            13895 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13896 ; 544  |
                            13897 ; 545  |void _reentrant Init5VSense(void);
                            13898 ; 546  |void _reentrant ServiceDCDC(void);
                            13899 ; 547  |
                            13900 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13901 ; 549  |//// JPEG Thumbnail Mode Setting
                            13902 ; 550  |//// number of column in thumbnail mode
                            13903 ; 551  |#define THUMBNAIL_X 2           
                            13904 ; 552  |//// number of row in  thumbnail mode
                            13905 ; 553  |#define THUMBNAIL_Y 2           
                            13906 ; 554  |//// thumbnail boundary offset x
                            13907 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13908 ; 556  |//// thumbnail boundary offset y
                            13909 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13910 ; 558  |
                            13911 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13912 ; 560  |
                            13913 
                            13915 
                            13916 ; 5    |#include "resource.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13917 
                            13919 
                            13920 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13921 ; 2    |//  Do not edit it directly.
                            13922 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            13923 ; 4    |
                            13924 ; 5    |
                            13925 ; 6    |
                            13926 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13927 ; 8    |//  Do not edit it directly.
                            13928 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            13929 ; 10   |
                            13930 ; 11   |
                            13931 ; 12   |
                            13932 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13933 ; 14   |//  Do not edit it directly.
                            13934 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            13935 ; 16   |
                            13936 ; 17   |
                            13937 ; 18   |
                            13938 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13939 ; 20   |//  Do not edit it directly.
                            13940 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            13941 ; 22   |
                            13942 ; 23   |
                            13943 ; 24   |
                            13944 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13945 ; 26   |//  Do not edit it directly.
                            13946 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            13947 ; 28   |
                            13948 ; 29   |
                            13949 ; 30   |
                            13950 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13951 ; 32   |//  Do not edit it directly.
                            13952 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            13953 ; 34   |
                            13954 ; 35   |
                            13955 ; 36   |
                            13956 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13957 ; 38   |//  Do not edit it directly.
                            13958 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            13959 ; 40   |
                            13960 ; 41   |
                            13961 ; 42   |
                            13962 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13963 ; 44   |//  Do not edit it directly.
                            13964 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            13965 ; 46   |
                            13966 ; 47   |
                            13967 ; 48   |
                            13968 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13969 ; 50   |//  Do not edit it directly.
                            13970 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            13971 ; 52   |
                            13972 ; 53   |
                            13973 ; 54   |
                            13974 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13975 ; 56   |//  Do not edit it directly.
                            13976 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            13977 ; 58   |
                            13978 ; 59   |
                            13979 ; 60   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13980 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13981 ; 62   |//  Do not edit it directly.
                            13982 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            13983 ; 64   |
                            13984 ; 65   |
                            13985 ; 66   |
                            13986 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13987 ; 68   |//  Do not edit it directly.
                            13988 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                            13989 ; 70   |
                            13990 ; 71   |
                            13991 ; 72   |
                            13992 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13993 ; 74   |//  Do not edit it directly.
                            13994 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            13995 ; 76   |
                            13996 ; 77   |
                            13997 ; 78   |
                            13998 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13999 ; 80   |//  Do not edit it directly.
                            14000 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            14001 ; 82   |
                            14002 ; 83   |
                            14003 ; 84   |
                            14004 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14005 ; 86   |//  Do not edit it directly.
                            14006 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            14007 ; 88   |
                            14008 ; 89   |
                            14009 ; 90   |
                            14010 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14011 ; 92   |//  Do not edit it directly.
                            14012 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            14013 ; 94   |
                            14014 ; 95   |
                            14015 ; 96   |
                            14016 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14017 ; 98   |//  Do not edit it directly.
                            14018 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            14019 ; 100  |
                            14020 ; 101  |
                            14021 ; 102  |
                            14022 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14023 ; 104  |//  Do not edit it directly.
                            14024 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            14025 ; 106  |
                            14026 ; 107  |
                            14027 ; 108  |
                            14028 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14029 ; 110  |//  Do not edit it directly.
                            14030 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            14031 ; 112  |
                            14032 ; 113  |
                            14033 ; 114  |
                            14034 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14035 ; 116  |//  Do not edit it directly.
                            14036 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            14037 ; 118  |
                            14038 ; 119  |
                            14039 ; 120  |
                            14040 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14041 ; 122  |//  Do not edit it directly.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14042 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            14043 ; 124  |
                            14044 ; 125  |
                            14045 ; 126  |
                            14046 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            14047 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            14048 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                            14049 ; 130  |// LCD example resource listing
                            14050 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                            14051 ; 132  |
                            14052 ; 133  |#if (!defined(resources))
                            14053 ; 134  |#define resources 1
                            14054 ; 135  |
                            14055 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            14056 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            14057 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            14058 ; 139  |
                            14059 ; 140  |#define VERSION_MAJOR 3
                            14060 ; 141  |#define VERSION_MIDDLE 200
                            14061 ; 142  |#define VERSION_MINOR 910
                            14062 ; 143  |
                            14063 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            14064 ; 145  |#define NUMBER_OF_PRESETS 10
                            14065 ; 146  |
                            14066 ; 147  |
                            14067 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            14068 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            14069 ; 150  |//  the resource index cache if it was added.
                            14070 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            14071 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            14072 ; 153  |
                            14073 ; 154  |//$FILENAME searchdirectory.src
                            14074 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            14075 ; 156  |//$FILENAME shortdirmatch.src
                            14076 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            14077 ; 158  |//$FILENAME fopen.src
                            14078 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            14079 ; 160  |//$FILENAME musicmenu.src
                            14080 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            14081 ; 162  |//$FILENAME changepath.src
                            14082 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            14083 ; 164  |//$FILENAME _openandverifyslot.src
                            14084 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            14085 ; 166  |//$FILENAME _loadslot.src
                            14086 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            14087 ; 168  |//$FILENAME getname.src
                            14088 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            14089 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            14090 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            14091 ; 172  |//$FILENAME sethandleforsearch.src
                            14092 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            14093 ; 174  |//$FILENAME wmaWrap.src
                            14094 ; 175  |#define RSRC_WMADEC_CODE 11    
                            14095 ; 176  |//$FILENAME extractfilename.src
                            14096 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            14097 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            14098 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            14099 ; 180  |//$FILENAME SoftTimerMod.src
                            14100 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            14101 ; 182  |//$FILENAME GetShortfilename.src
                            14102 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                            14103 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14104 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            14105 ; 186  |//$FILENAME playerstatemachine.src
                            14106 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            14107 ; 188  |//$FILENAME SysMod.src
                            14108 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            14109 ; 190  |//$FILENAME drm_b64_decodew.src
                            14110 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                            14111 ; 192  |//$FILENAME discardtrailigperiods.src
                            14112 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                            14113 ; 194  |//$FILENAME uppercase.src
                            14114 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            14115 ; 196  |//$FILENAME strlength.src
                            14116 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            14117 ; 198  |//$FILENAME ConverToShortname.src
                            14118 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            14119 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            14120 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            14121 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            14122 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            14123 ; 204  |//$FILENAME drm_sst_closekey.src
                            14124 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            14125 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            14126 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            14127 ; 208  |//$FILENAME freehandle.src
                            14128 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            14129 ; 210  |//$FILENAME searchfreehandleallocate.src
                            14130 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            14131 ; 212  |//$FILENAME _parselicenseattributes.src
                            14132 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            14133 ; 214  |//$FILENAME variablesecstategetorset.src
                            14134 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            14135 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            14136 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            14137 ; 218  |//$FILENAME drm_mgr_initialize.src
                            14138 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            14139 ; 220  |//$FILENAME display.src
                            14140 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            14141 ; 222  |//$FILENAME DisplayModule.src
                            14142 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            14143 ; 224  |//$FILENAME extractpath.src
                            14144 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            14145 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            14146 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            14147 ; 228  |//$FILENAME _getprivatekey.src
                            14148 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            14149 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            14150 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            14151 ; 232  |//$FILENAME drm_hds_openslot.src
                            14152 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            14153 ; 234  |//$FILENAME fclose.src
                            14154 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            14155 ; 236  |//$FILENAME drm_cphr_init.src
                            14156 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            14157 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            14158 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            14159 ; 240  |//$FILENAME drm_mgr_bind.src
                            14160 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            14161 ; 242  |//$FILENAME _decryptcontentkey.src
                            14162 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            14163 ; 244  |//$FILENAME drm_mac_inv32.src
                            14164 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                            14165 ; 246  |//$FILENAME drm_lic_getattribute.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14166 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            14167 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            14168 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            14169 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            14170 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            14171 ; 252  |//$FILENAME effectsmodules.src
                            14172 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                            14173 ; 254  |//$FILENAME janusx.src
                            14174 ; 255  |#define RSRC_JANUSX_CODE 51    
                            14175 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            14176 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            14177 ; 258  |//$FILENAME eval.src
                            14178 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            14179 ; 260  |//$FILENAME _verifyslothash.src
                            14180 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            14181 ; 262  |//$FILENAME januscommon.src
                            14182 ; 263  |#define RSRC_JANUS_COMMON 55    
                            14183 ; 264  |//$FILENAME changecase.src
                            14184 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            14185 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            14186 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            14187 ; 268  |//$FILENAME _loadlicenseattributes.src
                            14188 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            14189 ; 270  |//$FILENAME drm_hds_slotseek.src
                            14190 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            14191 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            14192 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            14193 ; 274  |//$FILENAME drm_levl_performoperations.src
                            14194 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            14195 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            14196 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            14197 ; 278  |//$FILENAME drm_lst_getlicense.src
                            14198 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            14199 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            14200 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            14201 ; 282  |//$FILENAME oem_writefile.src
                            14202 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            14203 ; 284  |//$FILENAME drm_sst_getdata.src
                            14204 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            14205 ; 286  |//$FILENAME updatehandlemode.src
                            14206 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                            14207 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            14208 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            14209 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            14210 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            14211 ; 292  |//$FILENAME doplay_p.src
                            14212 ; 293  |#define RSRC_DOPLAY_P 70    
                            14213 ; 294  |//$FILENAME fatwritep.src
                            14214 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            14215 ; 296  |//$FILENAME findfirst.src
                            14216 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            14217 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            14218 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            14219 ; 300  |//$FILENAME changetorootdirectory.src
                            14220 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            14221 ; 302  |//$FILENAME _findkeypair.src
                            14222 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            14223 ; 304  |//$FILENAME variablemachinegetorset.src
                            14224 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            14225 ; 306  |//$FILENAME _hdsslotenumnext.src
                            14226 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                            14227 ; 308  |//$FILENAME getlspubkey.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14228 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            14229 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            14230 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            14231 ; 312  |//$FILENAME drm_utl_decodekid.src
                            14232 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            14233 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            14234 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                            14235 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                            14236 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                            14237 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            14238 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            14239 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            14240 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            14241 ; 322  |//$FILENAME aes_enc.src
                            14242 ; 323  |#define RSRC_AES_ENC 85    
                            14243 ; 324  |//$FILENAME getprivkey.src
                            14244 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            14245 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            14246 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            14247 ; 328  |//$FILENAME playlist_codebank.src
                            14248 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            14249 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            14250 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            14251 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            14252 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            14253 ; 334  |//$FILENAME _getdevicecert.src
                            14254 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            14255 ; 336  |//$FILENAME drm_lic_reportactions.src
                            14256 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            14257 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            14258 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            14259 ; 340  |//$FILENAME _basicheaderchecks.src
                            14260 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            14261 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            14262 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            14263 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            14264 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            14265 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            14266 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            14267 ; 348  |//$FILENAME drm_lst_open.src
                            14268 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            14269 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            14270 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            14271 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            14272 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            14273 ; 354  |//$FILENAME oem_openfile.src
                            14274 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            14275 ; 356  |//$FILENAME _getdrmfullpathname.src
                            14276 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            14277 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            14278 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            14279 ; 360  |//$FILENAME _applydiffstostore.src
                            14280 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            14281 ; 362  |//$FILENAME drm_sst_setdata.src
                            14282 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            14283 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            14284 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            14285 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            14286 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            14287 ; 368  |//$FILENAME playerlib_extra.src
                            14288 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                            14289 ; 370  |//$FILENAME wmaCommon.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14290 ; 371  |#define RSRC_WMA_COMMON 109    
                            14291 ; 372  |//$FILENAME wmainit.src
                            14292 ; 373  |#define RSRC_WMA_INIT 110    
                            14293 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            14294 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            14295 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            14296 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                            14297 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            14298 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                            14299 ; 380  |//$FILENAME drm_hds_closestore.src
                            14300 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            14301 ; 382  |//$FILENAME _hdsloadsrn.src
                            14302 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            14303 ; 384  |//$FILENAME _loadproritizedlist.src
                            14304 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            14305 ; 386  |//$FILENAME drm_lst_initenum.src
                            14306 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            14307 ; 388  |//$FILENAME _loadattributesintocache.src
                            14308 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            14309 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            14310 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            14311 ; 392  |
                            14312 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            14313 ; 394  |//  Menu Modules (codebanks)
                            14314 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            14315 ; 396  |//$FILENAME mainmenu.src
                            14316 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            14317 ; 398  |//$FILENAME displaylists.src
                            14318 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            14319 ; 400  |
                            14320 ; 401  |//$FILENAME voicemenu.src
                            14321 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            14322 ; 403  |//$FILENAME fmtunermenu.src
                            14323 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            14324 ; 405  |//$FILENAME recorderstatemachine.src
                            14325 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            14326 ; 407  |
                            14327 ; 408  |//$FILENAME eqmenu.src
                            14328 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            14329 ; 410  |//$FILENAME playmodemenu.src
                            14330 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            14331 ; 412  |//$FILENAME contrastmenu.src
                            14332 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            14333 ; 414  |//$FILENAME pwrsettingsmenu.src
                            14334 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            14335 ; 416  |//$FILENAME timedatemenu.src
                            14336 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            14337 ; 418  |//$FILENAME settimemenu.src
                            14338 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            14339 ; 420  |//$FILENAME setdatemenu.src
                            14340 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            14341 ; 422  |//$FILENAME settingsmenu.src
                            14342 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            14343 ; 424  |//$FILENAME string_system_menu.src
                            14344 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            14345 ; 426  |//$FILENAME deletemenu.src
                            14346 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            14347 ; 428  |//$FILENAME aboutmenu.src
                            14348 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            14349 ; 430  |
                            14350 ; 431  |//$FILENAME spectrogram.src
                            14351 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14352 ; 433  |
                            14353 ; 434  |//$FILENAME motionvideomenu.src
                            14354 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            14355 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            14356 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            14357 ; 438  |//$FILENAME jpegdisplaymenu.src
                            14358 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                            14359 ; 440  |//$FILENAME jpegmanualmenu.src
                            14360 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                            14361 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            14362 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            14363 ; 444  |//$FILENAME jpegslideshowmenu.src
                            14364 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            14365 ; 446  |//$FILENAME albumartmenu.src
                            14366 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            14367 ; 448  |//$FILENAME jpegfileutilextra.src
                            14368 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            14369 ; 450  |
                            14370 ; 451  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14371 ; 452  |// General Modules
                            14372 ; 453  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14373 ; 454  |//$FILENAME MixMod.src
                            14374 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            14375 ; 456  |//$FILENAME TunerModule.src
                            14376 ; 457  |#define RSRC_TUNER_MODULE 146    
                            14377 ; 458  |//$FILENAME geqoverlay.src
                            14378 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            14379 ; 460  |
                            14380 ; 461  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14381 ; 462  |// Decoders/Encoders
                            14382 ; 463  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14383 ; 464  |//$FILENAME DecMod.src
                            14384 ; 465  |#define RSRC_DECMOD_CODE 148    
                            14385 ; 466  |//$FILENAME mp3p.src
                            14386 ; 467  |#define RSRC_MP3P_CODE 149    
                            14387 ; 468  |//$FILENAME mp3x.src
                            14388 ; 469  |#define RSRC_MP3X_CODE 150    
                            14389 ; 470  |//$FILENAME mp3y.src
                            14390 ; 471  |#define RSRC_MP3Y_CODE 151    
                            14391 ; 472  |//$FILENAME janusp.src
                            14392 ; 473  |#define RSRC_JANUSP_CODE 152    
                            14393 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            14394 ; 475  |
                            14395 ; 476  |//$FILENAME decadpcmimamod.src
                            14396 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            14397 ; 478  |//$FILENAME dec_adpcmp.src
                            14398 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            14399 ; 480  |//$FILENAME dec_adpcmx.src
                            14400 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            14401 ; 482  |//$FILENAME dec_adpcmy.src
                            14402 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            14403 ; 484  |
                            14404 ; 485  |//$FILENAME decadpcmsmvmod.src
                            14405 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            14406 ; 487  |//$FILENAME dec_smvadpcmp.src
                            14407 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            14408 ; 489  |//$FILENAME dec_smvadpcmx.src
                            14409 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14410 ; 491  |//$FILENAME dec_smvadpcmy.src
                            14411 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            14412 ; 493  |
                            14413 ; 494  |//$FILENAME encadpcmimamod.src
                            14414 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            14415 ; 496  |//$FILENAME enc_adpcmp.src
                            14416 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                            14417 ; 498  |//$FILENAME enc_adpcmx.src
                            14418 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                            14419 ; 500  |//$FILENAME enc_adpcmy.src
                            14420 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            14421 ; 502  |
                            14422 ; 503  |//$FILENAME jpeg_p.src
                            14423 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            14424 ; 505  |//$FILENAME jpeg_x.src
                            14425 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            14426 ; 507  |//$FILENAME jpeg_y.src
                            14427 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            14428 ; 509  |//$FILENAME jpeg2_y.src
                            14429 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            14430 ; 511  |//$FILENAME bmp2_y.src
                            14431 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            14432 ; 513  |//$FILENAME bmp_p.src
                            14433 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            14434 ; 515  |
                            14435 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            14436 ; 517  |//$FILENAME smvjpeg_x.src
                            14437 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            14438 ; 519  |//$FILENAME smvjpeg_y.src
                            14439 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            14440 ; 521  |
                            14441 ; 522  |
                            14442 ; 523  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14443 ; 524  |// System Settings
                            14444 ; 525  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14445 ; 526  |//$FILENAME settings.src
                            14446 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            14447 ; 528  |
                            14448 ; 529  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14449 ; 530  |// Media Device Drivers
                            14450 ; 531  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14451 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            14452 ; 533  |//$FILENAME null.src
                            14453 ; 534  |#define RSRC_MMCDD_CODE 174    
                            14454 ; 535  |//$FILENAME null.src
                            14455 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            14456 ; 537  |
                            14457 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                            14458 ; 539  |//  PlayState resources
                            14459 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            14460 ; 541  |//$FILENAME play_icon_with_border.src
                            14461 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            14462 ; 543  |//$FILENAME pause_icon_with_border.src
                            14463 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            14464 ; 545  |//$FILENAME stop_icon_with_border.src
                            14465 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            14466 ; 547  |//$FILENAME record_icon_with_border.src
                            14467 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14468 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            14469 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            14470 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            14471 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            14472 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            14473 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            14474 ; 555  |
                            14475 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            14476 ; 557  |//  PlayMode resources
                            14477 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            14478 ; 559  |//$FILENAME repeatall_icon.src
                            14479 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            14480 ; 561  |//$FILENAME repeatsong_icon.src
                            14481 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            14482 ; 563  |//$FILENAME shuffle_icon.src
                            14483 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            14484 ; 565  |//$FILENAME random_icon.src
                            14485 ; 566  |#define RSRC_RANDOM_ICON 186    
                            14486 ; 567  |//$FILENAME repeatallclear_icon.src
                            14487 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            14488 ; 569  |//$FILENAME repeatsongclear_icon.src
                            14489 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            14490 ; 571  |//$FILENAME shuffleclear_icon.src
                            14491 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            14492 ; 573  |
                            14493 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            14494 ; 575  |//  Battery Status
                            14495 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            14496 ; 577  |//$FILENAME battery_00.src
                            14497 ; 578  |#define RSRC_BATTERY_00 190    
                            14498 ; 579  |//$FILENAME battery_01.src
                            14499 ; 580  |#define RSRC_BATTERY_01 191    
                            14500 ; 581  |//$FILENAME battery_02.src
                            14501 ; 582  |#define RSRC_BATTERY_02 192    
                            14502 ; 583  |//$FILENAME battery_03.src
                            14503 ; 584  |#define RSRC_BATTERY_03 193    
                            14504 ; 585  |//$FILENAME battery_04.src
                            14505 ; 586  |#define RSRC_BATTERY_04 194    
                            14506 ; 587  |//$FILENAME battery_05.src
                            14507 ; 588  |#define RSRC_BATTERY_05 195    
                            14508 ; 589  |//$FILENAME battery_06.src
                            14509 ; 590  |#define RSRC_BATTERY_06 196    
                            14510 ; 591  |//$FILENAME battery_07.src
                            14511 ; 592  |#define RSRC_BATTERY_07 197    
                            14512 ; 593  |//$FILENAME battery_08.src
                            14513 ; 594  |#define RSRC_BATTERY_08 198    
                            14514 ; 595  |//$FILENAME battery_09.src
                            14515 ; 596  |#define RSRC_BATTERY_09 199    
                            14516 ; 597  |//$FILENAME battery_10.src
                            14517 ; 598  |#define RSRC_BATTERY_10 200    
                            14518 ; 599  |
                            14519 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            14520 ; 601  |//  System Icons
                            14521 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            14522 ; 603  |//$FILENAME disk_small.src
                            14523 ; 604  |#define RSRC_DISK_ICON 201    
                            14524 ; 605  |//$FILENAME lock_small.src
                            14525 ; 606  |#define RSRC_LOCK_ICON 202    
                            14526 ; 607  |//$FILENAME icon_music_mode.src
                            14527 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            14528 ; 609  |//$FILENAME icon_voice_mode.src
                            14529 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14530 ; 611  |
                            14531 ; 612  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14532 ; 613  |// Volume Bitmaps
                            14533 ; 614  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14534 ; 615  |//$FILENAME icon_vol_00.src
                            14535 ; 616  |#define RSRC_ICON_VOL_00 205    
                            14536 ; 617  |//$FILENAME icon_vol_01.src
                            14537 ; 618  |#define RSRC_ICON_VOL_01 206    
                            14538 ; 619  |//$FILENAME icon_vol_02.src
                            14539 ; 620  |#define RSRC_ICON_VOL_02 207    
                            14540 ; 621  |//$FILENAME icon_vol_03.src
                            14541 ; 622  |#define RSRC_ICON_VOL_03 208    
                            14542 ; 623  |//$FILENAME icon_vol_04.src
                            14543 ; 624  |#define RSRC_ICON_VOL_04 209    
                            14544 ; 625  |//$FILENAME icon_vol_05.src
                            14545 ; 626  |#define RSRC_ICON_VOL_05 210    
                            14546 ; 627  |//$FILENAME icon_vol_06.src
                            14547 ; 628  |#define RSRC_ICON_VOL_06 211    
                            14548 ; 629  |//$FILENAME icon_vol_07.src
                            14549 ; 630  |#define RSRC_ICON_VOL_07 212    
                            14550 ; 631  |//$FILENAME icon_vol_08.src
                            14551 ; 632  |#define RSRC_ICON_VOL_08 213    
                            14552 ; 633  |//$FILENAME icon_vol_09.src
                            14553 ; 634  |#define RSRC_ICON_VOL_09 214    
                            14554 ; 635  |//$FILENAME icon_vol_10.src
                            14555 ; 636  |#define RSRC_ICON_VOL_10 215    
                            14556 ; 637  |//$FILENAME icon_vol_11.src
                            14557 ; 638  |#define RSRC_ICON_VOL_11 216    
                            14558 ; 639  |//$FILENAME icon_vol_12.src
                            14559 ; 640  |#define RSRC_ICON_VOL_12 217    
                            14560 ; 641  |//$FILENAME icon_vol_13.src
                            14561 ; 642  |#define RSRC_ICON_VOL_13 218    
                            14562 ; 643  |//$FILENAME icon_vol_14.src
                            14563 ; 644  |#define RSRC_ICON_VOL_14 219    
                            14564 ; 645  |//$FILENAME icon_vol_15.src
                            14565 ; 646  |#define RSRC_ICON_VOL_15 220    
                            14566 ; 647  |//$FILENAME icon_vol_16.src
                            14567 ; 648  |#define RSRC_ICON_VOL_16 221    
                            14568 ; 649  |//$FILENAME icon_vol_17.src
                            14569 ; 650  |#define RSRC_ICON_VOL_17 222    
                            14570 ; 651  |//$FILENAME icon_vol_18.src
                            14571 ; 652  |#define RSRC_ICON_VOL_18 223    
                            14572 ; 653  |//$FILENAME icon_vol_19.src
                            14573 ; 654  |#define RSRC_ICON_VOL_19 224    
                            14574 ; 655  |//$FILENAME icon_vol_20.src
                            14575 ; 656  |#define RSRC_ICON_VOL_20 225    
                            14576 ; 657  |//$FILENAME icon_vol_21.src
                            14577 ; 658  |#define RSRC_ICON_VOL_21 226    
                            14578 ; 659  |//$FILENAME icon_vol_22.src
                            14579 ; 660  |#define RSRC_ICON_VOL_22 227    
                            14580 ; 661  |//$FILENAME icon_vol_23.src
                            14581 ; 662  |#define RSRC_ICON_VOL_23 228    
                            14582 ; 663  |//$FILENAME icon_vol_24.src
                            14583 ; 664  |#define RSRC_ICON_VOL_24 229    
                            14584 ; 665  |//$FILENAME icon_vol_25.src
                            14585 ; 666  |#define RSRC_ICON_VOL_25 230    
                            14586 ; 667  |//$FILENAME icon_vol_26.src
                            14587 ; 668  |#define RSRC_ICON_VOL_26 231    
                            14588 ; 669  |//$FILENAME icon_vol_27.src
                            14589 ; 670  |#define RSRC_ICON_VOL_27 232    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14590 ; 671  |//$FILENAME icon_vol_28.src
                            14591 ; 672  |#define RSRC_ICON_VOL_28 233    
                            14592 ; 673  |//$FILENAME icon_vol_29.src
                            14593 ; 674  |#define RSRC_ICON_VOL_29 234    
                            14594 ; 675  |//$FILENAME icon_vol_30.src
                            14595 ; 676  |#define RSRC_ICON_VOL_30 235    
                            14596 ; 677  |//$FILENAME icon_vol_31.src
                            14597 ; 678  |#define RSRC_ICON_VOL_31 236    
                            14598 ; 679  |
                            14599 ; 680  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14600 ; 681  |// Splash Screen Stuff
                            14601 ; 682  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14602 ; 683  |//$FILENAME st_bw1.src
                            14603 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            14604 ; 685  |//$FILENAME siglogo1.src
                            14605 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            14606 ; 687  |//$FILENAME siglogo2.src
                            14607 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            14608 ; 689  |//$FILENAME siglogo3.src
                            14609 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            14610 ; 691  |//$FILENAME siglogo4.src
                            14611 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            14612 ; 693  |//$FILENAME siglogo5.src
                            14613 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            14614 ; 695  |//$FILENAME siglogo6.src
                            14615 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            14616 ; 697  |//$FILENAME siglogo7.src
                            14617 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            14618 ; 699  |//$FILENAME siglogo8.src
                            14619 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            14620 ; 701  |//$FILENAME siglogo9.src
                            14621 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            14622 ; 703  |//$FILENAME siglogo10.src
                            14623 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            14624 ; 705  |//$FILENAME siglogo11.src
                            14625 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            14626 ; 707  |//$FILENAME siglogo12.src
                            14627 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            14628 ; 709  |//$FILENAME siglogo13.src
                            14629 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            14630 ; 711  |//$FILENAME siglogo.src
                            14631 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            14632 ; 713  |
                            14633 ; 714  |//$FILENAME locked.src
                            14634 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            14635 ; 716  |
                            14636 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            14637 ; 718  |//  Shutdown
                            14638 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            14639 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            14640 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            14641 ; 722  |//$FILENAME status_16_6_steps_0.src
                            14642 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            14643 ; 724  |//$FILENAME status_16_6_steps_1.src
                            14644 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            14645 ; 726  |//$FILENAME status_16_6_steps_2.src
                            14646 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            14647 ; 728  |//$FILENAME status_16_6_steps_3.src
                            14648 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                            14649 ; 730  |//$FILENAME status_16_6_steps_4.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14650 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            14651 ; 732  |//$FILENAME status_16_6_steps_5.src
                            14652 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            14653 ; 734  |//$FILENAME status_16_6_steps_6.src
                            14654 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            14655 ; 736  |
                            14656 ; 737  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14657 ; 738  |// EQ
                            14658 ; 739  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14659 ; 740  |//$FILENAME eq_clear_icon.src
                            14660 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            14661 ; 742  |//$FILENAME rock_icon.src
                            14662 ; 743  |#define RSRC_ROCK_ICON 262    
                            14663 ; 744  |//$FILENAME jazz_icon.src
                            14664 ; 745  |#define RSRC_JAZZ_ICON 263    
                            14665 ; 746  |//$FILENAME classic_icon.src
                            14666 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            14667 ; 748  |//$FILENAME pop_icon.src
                            14668 ; 749  |#define RSRC_POP_ICON 265    
                            14669 ; 750  |//$FILENAME custom_icon.src
                            14670 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            14671 ; 752  |
                            14672 ; 753  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14673 ; 754  |// AB
                            14674 ; 755  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14675 ; 756  |//$FILENAME ab_mark_a.src
                            14676 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            14677 ; 758  |//$FILENAME ab_mark_b.src
                            14678 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            14679 ; 760  |
                            14680 ; 761  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14681 ; 762  |// Menu Display Resources
                            14682 ; 763  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14683 ; 764  |//$FILENAME string_music_menu.src
                            14684 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            14685 ; 766  |//$FILENAME string_mvideo_menu.src
                            14686 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            14687 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            14688 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            14689 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            14690 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            14691 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            14692 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            14693 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            14694 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            14695 ; 776  |//$FILENAME string_voice_menu.src
                            14696 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            14697 ; 778  |//$FILENAME string_audible_menu.src
                            14698 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            14699 ; 780  |//$FILENAME string_fmtuner_menu.src
                            14700 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            14701 ; 782  |//$FILENAME string_settings_menu.src
                            14702 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            14703 ; 784  |//$FILENAME string_eq_menu.src
                            14704 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                            14705 ; 786  |//$FILENAME string_playmode_menu.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14706 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            14707 ; 788  |//$FILENAME string_contrast_menu.src
                            14708 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                            14709 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            14710 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            14711 ; 792  |//$FILENAME string_time_date_menu.src
                            14712 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            14713 ; 794  |//$FILENAME string_set_time_menu.src
                            14714 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                            14715 ; 796  |//$FILENAME string_set_date_menu.src
                            14716 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            14717 ; 798  |//$FILENAME string_exit_menu.src
                            14718 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            14719 ; 800  |//$FILENAME string_rock_menu.src
                            14720 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            14721 ; 802  |//$FILENAME string_pop_menu.src
                            14722 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            14723 ; 804  |//$FILENAME string_classic_menu.src
                            14724 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            14725 ; 806  |//$FILENAME string_normal_menu.src
                            14726 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            14727 ; 808  |//$FILENAME string_jazz_menu.src
                            14728 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            14729 ; 810  |//$FILENAME string_repeat1_menu.src
                            14730 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            14731 ; 812  |//$FILENAME string_repeatall_menu.src
                            14732 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            14733 ; 814  |//$FILENAME string_shuffle_menu.src
                            14734 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            14735 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            14736 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                            14737 ; 818  |//$FILENAME string_disable_menu.src
                            14738 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            14739 ; 820  |//$FILENAME string_1min_menu.src
                            14740 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            14741 ; 822  |//$FILENAME string_2min_menu.src
                            14742 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            14743 ; 824  |//$FILENAME string_5min_menu.src
                            14744 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            14745 ; 826  |//$FILENAME string_10min_menu.src
                            14746 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            14747 ; 828  |//$FILENAME string_system_menu.src
                            14748 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            14749 ; 830  |//$FILENAME string_about_menu.src
                            14750 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            14751 ; 832  |//$FILENAME string_delete_menu.src
                            14752 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            14753 ; 834  |//$FILENAME string_record_menu.src
                            14754 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            14755 ; 836  |//$FILENAME string_spectrogram_menu.src
                            14756 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            14757 ; 838  |
                            14758 ; 839  |//$FILENAME string_end_of_slide_show.src
                            14759 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            14760 ; 841  |
                            14761 ; 842  |//$FILENAME string_mb.src
                            14762 ; 843  |#define RSRC_STRING_MB 307    
                            14763 ; 844  |
                            14764 ; 845  |//$FILENAME internal_media.src
                            14765 ; 846  |#define RSRC_INT_MEDIA 308    
                            14766 ; 847  |//$FILENAME external_media.src
                            14767 ; 848  |#define RSRC_EXT_MEDIA 309    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14768 ; 849  |
                            14769 ; 850  |//$FILENAME about_title.src
                            14770 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            14771 ; 852  |//$FILENAME player_name.src
                            14772 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            14773 ; 854  |
                            14774 ; 855  |//$FILENAME settings_title.src
                            14775 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            14776 ; 857  |//$FILENAME jpeg_display_title.src
                            14777 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            14778 ; 859  |//$FILENAME erase_title.src
                            14779 ; 860  |#define RSRC_ERASE_TITLE 314    
                            14780 ; 861  |
                            14781 ; 862  |//$FILENAME del_warning_no.src
                            14782 ; 863  |#define RSRC_DELETE_NO 315    
                            14783 ; 864  |//$FILENAME del_warning_yes.src
                            14784 ; 865  |#define RSRC_DELETE_YES 316    
                            14785 ; 866  |//$FILENAME del_warning_line1.src
                            14786 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            14787 ; 868  |//$FILENAME del_warning_line2.src
                            14788 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            14789 ; 870  |//$FILENAME lowbattery.src
                            14790 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            14791 ; 872  |//$FILENAME vbr.src
                            14792 ; 873  |#define RSRC_VBR_BITMAP 320    
                            14793 ; 874  |
                            14794 ; 875  |//$FILENAME string_song.src
                            14795 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            14796 ; 877  |//$FILENAME string_voice.src
                            14797 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            14798 ; 879  |
                            14799 ; 880  |//$FILENAME time_date_title.src
                            14800 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            14801 ; 882  |//$FILENAME set_time_title.src
                            14802 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            14803 ; 884  |//$FILENAME set_date_title.src
                            14804 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            14805 ; 886  |//$FILENAME string_searching.src
                            14806 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            14807 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            14808 ; 889  |//  Save Changes
                            14809 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            14810 ; 891  |//$FILENAME save_changes_yes.src
                            14811 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            14812 ; 893  |//$FILENAME save_changes_no.src
                            14813 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            14814 ; 895  |//$FILENAME save_changes_cancel.src
                            14815 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            14816 ; 897  |//$FILENAME save_changes_clear.src
                            14817 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            14818 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            14819 ; 900  |//  Contrast
                            14820 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            14821 ; 902  |//$FILENAME contrast_title.src
                            14822 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            14823 ; 904  |//$FILENAME contrast_frame.src
                            14824 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            14825 ; 906  |//$FILENAME contrast_level0.src
                            14826 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            14827 ; 908  |//$FILENAME contrast_level1.src
                            14828 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                            14829 ; 910  |//$FILENAME contrast_level2.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14830 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            14831 ; 912  |//$FILENAME contrast_level3.src
                            14832 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            14833 ; 914  |//$FILENAME contrast_level4.src
                            14834 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            14835 ; 916  |//$FILENAME contrast_level5.src
                            14836 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            14837 ; 918  |//$FILENAME contrast_level6.src
                            14838 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                            14839 ; 920  |//$FILENAME contrast_level7.src
                            14840 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            14841 ; 922  |//$FILENAME contrast_level8.src
                            14842 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            14843 ; 924  |//$FILENAME contrast_level9.src
                            14844 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            14845 ; 926  |//$FILENAME contrast_level10.src
                            14846 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            14847 ; 928  |
                            14848 ; 929  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14849 ; 930  |// Funclets
                            14850 ; 931  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14851 ; 932  |//$FILENAME Funclet_SetRTC.src
                            14852 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            14853 ; 934  |//$FILENAME Funclet_InitRTC.src
                            14854 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            14855 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            14856 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            14857 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            14858 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            14859 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            14860 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            14861 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            14862 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            14863 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            14864 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            14865 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            14866 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            14867 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            14868 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            14869 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            14870 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            14871 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            14872 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            14873 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            14874 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            14875 ; 956  |//$FILENAME Funclet_StartProject.src
                            14876 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            14877 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            14878 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            14879 ; 960  |//$FILENAME null.src
                            14880 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            14881 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            14882 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            14883 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            14884 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            14885 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            14886 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            14887 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            14888 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                            14889 ; 970  |//$FILENAME null.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14890 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            14891 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            14892 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            14893 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            14894 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            14895 ; 976  |//$FILENAME null.src
                            14896 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            14897 ; 978  |//$FILENAME null.src
                            14898 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                            14899 ; 980  |//$FILENAME null.src
                            14900 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            14901 ; 982  |//$FILENAME null.src
                            14902 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            14903 ; 984  |//$FILENAME null.src
                            14904 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            14905 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            14906 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            14907 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            14908 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            14909 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            14910 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            14911 ; 992  |//$FILENAME null.src
                            14912 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            14913 ; 994  |//$FILENAME null.src
                            14914 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            14915 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            14916 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            14917 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            14918 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            14919 ; 1000 |///////////////////////////////////////////////////////////////
                            14920 ; 1001 |// Sanyo FM Tuner Fuclet
                            14921 ; 1002 |///////////////////////////////////////////////////////////////
                            14922 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                                  
                            14923 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations
                                  .src
                            14924 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.
                                  src
                            14925 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoSte
                                  reo.src
                            14926 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                                  
                            14927 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            14928 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.s
                                  rc
                            14929 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            14930 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.sr
                                  c
                            14931 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFiel
                                  dStrength.src
                            14932 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapO
                                  sc.src
                            14933 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmSt
                                  ation.src
                            14934 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPre
                                  set.src
                            14935 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            14936 ; 1017 |
                            14937 ; 1018 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14938 ; 1019 |// WMA Resources
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14939 ; 1020 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14940 ; 1021 |//$FILENAME wmaCore.src
                            14941 ; 1022 |#define RSRC_WMA_CORE 378    
                            14942 ; 1023 |//$FILENAME wmaMidLow.src
                            14943 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            14944 ; 1025 |//$FILENAME wmaHigh.src
                            14945 ; 1026 |#define RSRC_WMA_HIGH 380    
                            14946 ; 1027 |//$FILENAME wmaHighMid.src
                            14947 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                            14948 ; 1029 |//$FILENAME wmaMid.src
                            14949 ; 1030 |#define RSRC_WMA_MID 382    
                            14950 ; 1031 |//$FILENAME wmaLow.src
                            14951 ; 1032 |#define RSRC_WMA_LOW 383    
                            14952 ; 1033 |//$FILENAME wmaX1mem.src
                            14953 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            14954 ; 1035 |//$FILENAME wmaYmem.src
                            14955 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            14956 ; 1037 |//$FILENAME wmaLXmem.src
                            14957 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            14958 ; 1039 |//$FILENAME wmaLYmem.src
                            14959 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                            14960 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            14961 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            14962 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            14963 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            14964 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            14965 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            14966 ; 1047 |//$FILENAME drmpdcommon.src
                            14967 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            14968 ; 1049 |//$FILENAME januswmasupport.src
                            14969 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            14970 ; 1051 |//$FILENAME wmalicenseinit.src
                            14971 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            14972 ; 1053 |//$FILENAME wma_tables.src
                            14973 ; 1054 |#define RSRC_WMA_TABLES 394    
                            14974 ; 1055 |//$FILENAME janus_tables.src
                            14975 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            14976 ; 1057 |//$FILENAME wma_constants.src
                            14977 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            14978 ; 1059 |//$FILENAME janus_constants.src
                            14979 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            14980 ; 1061 |//$FILENAME janus_xmem.src
                            14981 ; 1062 |#define RSRC_JANUS_X 398    
                            14982 ; 1063 |//$FILENAME janusy_data.src
                            14983 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            14984 ; 1065 |
                            14985 ; 1066 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14986 ; 1067 |// Fonts -- these are last because they are very large
                            14987 ; 1068 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14988 ; 1069 |//$FILENAME font_table.src
                            14989 ; 1070 |#define RSRC_FONT_TABLE 400    
                            14990 ; 1071 |//$FILENAME font_PGM.src
                            14991 ; 1072 |#define RSRC_PGM_8 401    
                            14992 ; 1073 |//$FILENAME font_SGMs.src
                            14993 ; 1074 |#define RSRC_SGMS_8 402    
                            14994 ; 1075 |//$FILENAME font_script_00.src
                            14995 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            14996 ; 1077 |//$FILENAME font_scripts.src
                            14997 ; 1078 |#define RSRC_SCRIPTS_8 404    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14998 ; 1079 |//$FILENAME font_PDM.src
                            14999 ; 1080 |#define RSRC_PDM 405    
                            15000 ; 1081 |//$FILENAME font_SDMs.src
                            15001 ; 1082 |#define RSRC_SDMS 406    
                            15002 ; 1083 |//$FILENAME bitmap_warning.src
                            15003 ; 1084 |#define RSRC_WARNING 407    
                            15004 ; 1085 |//$FILENAME bitmap_device_full.src
                            15005 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            15006 ; 1087 |
                            15007 ; 1088 |
                            15008 ; 1089 |//$FILENAME lcd_controller_init.src
                            15009 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            15010 ; 1091 |
                            15011 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            15012 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            15013 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            15014 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            15015 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            15016 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            15017 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            15018 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            15019 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            15020 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            15021 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            15022 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            15023 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            15024 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            15025 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            15026 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            15027 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            15028 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            15029 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            15030 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            15031 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            15032 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            15033 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            15034 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            15035 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            15036 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            15037 ; 1118 |
                            15038 ; 1119 |
                            15039 ; 1120 |//$FILENAME sysrecord.src
                            15040 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            15041 ; 1122 |
                            15042 ; 1123 |//$FILENAME string_record_settings.src
                            15043 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            15044 ; 1125 |//$FILENAME string_sample_rate.src
                            15045 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            15046 ; 1127 |//$FILENAME string_encoder.src
                            15047 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            15048 ; 1129 |//$FILENAME string_adpcm.src
                            15049 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            15050 ; 1131 |//$FILENAME string_msadpcm.src
                            15051 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            15052 ; 1133 |//$FILENAME string_imadpcm.src
                            15053 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            15054 ; 1135 |//$FILENAME string_pcm.src
                            15055 ; 1136 |#define RSRC_STRING_PCM 430    
                            15056 ; 1137 |//$FILENAME string_internal.src
                            15057 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            15058 ; 1139 |//$FILENAME string_external.src
                            15059 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15060 ; 1141 |//$FILENAME string_device.src
                            15061 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            15062 ; 1143 |//$FILENAME string_source.src
                            15063 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            15064 ; 1145 |//$FILENAME string_microphone.src
                            15065 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            15066 ; 1147 |//$FILENAME string_linein.src
                            15067 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            15068 ; 1149 |//$FILENAME string_bits.src
                            15069 ; 1150 |#define RSRC_STRING_BITS 437    
                            15070 ; 1151 |//$FILENAME string_4.src
                            15071 ; 1152 |#define RSRC_STRING_4 438    
                            15072 ; 1153 |//$FILENAME string_8.src
                            15073 ; 1154 |#define RSRC_STRING_8 439    
                            15074 ; 1155 |//$FILENAME string_16.src
                            15075 ; 1156 |#define RSRC_STRING_16 440    
                            15076 ; 1157 |//$FILENAME string_24.src
                            15077 ; 1158 |#define RSRC_STRING_24 441    
                            15078 ; 1159 |//$FILENAME string_fm.src
                            15079 ; 1160 |#define RSRC_STRING_FM 442    
                            15080 ; 1161 |//$FILENAME string_mono.src
                            15081 ; 1162 |#define RSRC_STRING_MONO 443    
                            15082 ; 1163 |//$FILENAME string_stereo.src
                            15083 ; 1164 |#define RSRC_STRING_STEREO 444    
                            15084 ; 1165 |//$FILENAME string_8000hz.src
                            15085 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            15086 ; 1167 |//$FILENAME string_11025hz.src
                            15087 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            15088 ; 1169 |//$FILENAME string_16000hz.src
                            15089 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            15090 ; 1171 |//$FILENAME string_22050hz.src
                            15091 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            15092 ; 1173 |//$FILENAME string_32000hz.src
                            15093 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            15094 ; 1175 |//$FILENAME string_44100hz.src
                            15095 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            15096 ; 1177 |//$FILENAME string_48000hz.src
                            15097 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            15098 ; 1179 |//$FILENAME string_channels.src
                            15099 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            15100 ; 1181 |//$FILENAME string_spaces.src
                            15101 ; 1182 |#define RSRC_STRING_SPACES 453    
                            15102 ; 1183 |//$FILENAME slider_bar.src
                            15103 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            15104 ; 1185 |//$FILENAME slider_bar_inv.src
                            15105 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            15106 ; 1187 |//$FILENAME slider_track.src
                            15107 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            15108 ; 1189 |//$FILENAME string_no_files.src
                            15109 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            15110 ; 1191 |
                            15111 ; 1192 |/////////////////////////////////////////////////////////////////////
                            15112 ; 1193 |//  Time and Date Resource Strings
                            15113 ; 1194 |/////////////////////////////////////////////////////////////////////
                            15114 ; 1195 |//$FILENAME string_sunday.src
                            15115 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            15116 ; 1197 |//$FILENAME string_monday.src
                            15117 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            15118 ; 1199 |//$FILENAME string_tuesday.src
                            15119 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            15120 ; 1201 |//$FILENAME string_wednesday.src
                            15121 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15122 ; 1203 |//$FILENAME string_thursday.src
                            15123 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            15124 ; 1205 |//$FILENAME string_friday.src
                            15125 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            15126 ; 1207 |//$FILENAME string_saturday.src
                            15127 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            15128 ; 1209 |//$FILENAME string_am.src
                            15129 ; 1210 |#define RSRC_STRING_AM 465    
                            15130 ; 1211 |//$FILENAME string_pm.src
                            15131 ; 1212 |#define RSRC_STRING_PM 466    
                            15132 ; 1213 |//$FILENAME string_amclear.src
                            15133 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            15134 ; 1215 |//$FILENAME string_slash.src
                            15135 ; 1216 |#define RSRC_STRING_SLASH 468    
                            15136 ; 1217 |//$FILENAME string_colon.src
                            15137 ; 1218 |#define RSRC_STRING_COLON 469    
                            15138 ; 1219 |//$FILENAME string_12hour.src
                            15139 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            15140 ; 1221 |//$FILENAME string_24hour.src
                            15141 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            15142 ; 1223 |//$FILENAME string_format.src
                            15143 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            15144 ; 1225 |//$FILENAME string_mmddyyyy.src
                            15145 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            15146 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            15147 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            15148 ; 1229 |//$FILENAME string_yyyymmdd.src
                            15149 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            15150 ; 1231 |//$FILENAME string_ok.src
                            15151 ; 1232 |#define RSRC_STRING_OK 476    
                            15152 ; 1233 |//$FILENAME string_cancel.src
                            15153 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            15154 ; 1235 |//$FILENAME negative_sign.src
                            15155 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            15156 ; 1237 |//$FILENAME string_dec_pt5.src
                            15157 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            15158 ; 1239 |//$FILENAME string_dec_pt0.src
                            15159 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            15160 ; 1241 |//$FILENAME string_db.src
                            15161 ; 1242 |#define RSRC_DB_STRING 481    
                            15162 ; 1243 |//$FILENAME string_hz2.src
                            15163 ; 1244 |#define RSRC_HZ2_STRING 482    
                            15164 ; 1245 |
                            15165 ; 1246 |
                            15166 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            15167 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            15168 ; 1249 |//$FILENAME metadata_codebank.src
                            15169 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            15170 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            15171 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            15172 ; 1253 |//$FILENAME wmametadata_codebank.src
                            15173 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            15174 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            15175 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            15176 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            15177 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            15178 ; 1259 |//$FILENAME playlist2init_codebank.src
                            15179 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            15180 ; 1261 |
                            15181 ; 1262 |//$FILENAME delete_successful.src
                            15182 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            15183 ; 1264 |//$FILENAME delete_error.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15184 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            15185 ; 1266 |//$FILENAME lic_expired.src
                            15186 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            15187 ; 1268 |//$FILENAME id3v2_codebank.src
                            15188 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            15189 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            15190 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                            15191 ; 1272 |//$FILENAME lyrics3_codebank.src
                            15192 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            15193 ; 1274 |//$FILENAME lrc_codebank.src
                            15194 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            15195 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            15196 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            15197 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            15198 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            15199 ; 1280 |//$FILENAME apicframe_codebank.src
                            15200 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            15201 ; 1282 |
                            15202 ; 1283 |//$FILENAME exmediaerror1.src
                            15203 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            15204 ; 1285 |//$FILENAME exmediaerror2.src
                            15205 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            15206 ; 1287 |//$FILENAME inmediaerror1.src
                            15207 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            15208 ; 1289 |
                            15209 ; 1290 |//$FILENAME backlight_title.src
                            15210 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                            15211 ; 1292 |//$FILENAME backlight_state_on.src
                            15212 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            15213 ; 1294 |//$FILENAME backlight_state_off.src
                            15214 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            15215 ; 1296 |//$FILENAME backlightmenu.src
                            15216 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            15217 ; 1298 |//$FILENAME string_backlight_menu.src
                            15218 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            15219 ; 1300 |
                            15220 ; 1301 |//$FILENAME enc_mp3mod.src
                            15221 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            15222 ; 1303 |//$FILENAME enc_mp3p.src
                            15223 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            15224 ; 1305 |//$FILENAME enc_mp3x.src
                            15225 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            15226 ; 1307 |//$FILENAME enc_mp3y.src
                            15227 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            15228 ; 1309 |//$FILENAME mp3_implementation.src
                            15229 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            15230 ; 1311 |//$FILENAME string_mp3.src
                            15231 ; 1312 |#define RSRC_STRING_MP3 513    
                            15232 ; 1313 |//$FILENAME string_all.src
                            15233 ; 1314 |#define RSRC_STRING_ALL 514    
                            15234 ; 1315 |
                            15235 ; 1316 |//$FILENAME mediastartup.src
                            15236 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            15237 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            15238 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                            15239 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                            15240 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            15241 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            15242 ; 1323 |
                            15243 ; 1324 |//$FILENAME nanddatadriveinit.src
                            15244 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            15245 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15246 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            15247 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            15248 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            15249 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            15250 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            15251 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            15252 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                            15253 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            15254 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            15255 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                            15256 ; 1337 |
                            15257 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            15258 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            15259 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            15260 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            15261 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            15262 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            15263 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            15264 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            15265 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            15266 ; 1347 |
                            15267 ; 1348 |//$FILENAME vbr_codebank.src
                            15268 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            15269 ; 1350 |
                            15270 ; 1351 |//$FILENAME string_recordtest_menu.src
                            15271 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            15272 ; 1353 |//$FILENAME string_recordtest_duration.src
                            15273 ; 1354 |#define RSRC_STRING_DURATION 520    
                            15274 ; 1355 |//$FILENAME string_recordtest_time5.src
                            15275 ; 1356 |#define RSRC_STRING_TIME5 521    
                            15276 ; 1357 |//$FILENAME string_recordtest_time10.src
                            15277 ; 1358 |#define RSRC_STRING_TIME10 522    
                            15278 ; 1359 |//$FILENAME string_recordtest_time30.src
                            15279 ; 1360 |#define RSRC_STRING_TIME30 523    
                            15280 ; 1361 |//$FILENAME string_recordtest_time60.src
                            15281 ; 1362 |#define RSRC_STRING_TIME60 524    
                            15282 ; 1363 |//$FILENAME string_recordtest_time300.src
                            15283 ; 1364 |#define RSRC_STRING_TIME300 525    
                            15284 ; 1365 |//$FILENAME string_recordtest_time600.src
                            15285 ; 1366 |#define RSRC_STRING_TIME600 526    
                            15286 ; 1367 |
                            15287 ; 1368 |//$FILENAME test_title.src
                            15288 ; 1369 |#define RSRC_TEST_TITLE 527    
                            15289 ; 1370 |//$FILENAME testmenu.src
                            15290 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            15291 ; 1372 |
                            15292 ; 1373 |
                            15293 ; 1374 |//$FILENAME mmcmediastartup.src
                            15294 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            15295 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            15296 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            15297 ; 1378 |//$FILENAME mmcinfo.src
                            15298 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            15299 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            15300 ; 1381 |//$FILENAME mmcerase.src
                            15301 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            15302 ; 1383 |
                            15303 ; 1384 |
                            15304 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            15305 ; 1386 |
                            15306 ; 1387 |//$FILENAME mmcenumerate.src
                            15307 ; 1388 |#define RSRC_MMCENUMERATE 532    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15308 ; 1389 |//$FILENAME mmcresetdevice.src
                            15309 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            15310 ; 1391 |//$FILENAME mmcprocesscsd.src
                            15311 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            15312 ; 1393 |//$FILENAME mmcprocesscid.src
                            15313 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            15314 ; 1395 |//$FILENAME mmcprocesscid2.src
                            15315 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            15316 ; 1397 |//$FILENAME mmcdetectpresence.src
                            15317 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                            15318 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            15319 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            15320 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            15321 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            15322 ; 1403 |
                            15323 ; 1404 |//$FILENAME mmcread.src
                            15324 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            15325 ; 1406 |//$FILENAME mmcmediainit.src
                            15326 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            15327 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            15328 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            15329 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            15330 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            15331 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            15332 ; 1413 |
                            15333 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            15334 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            15335 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            15336 ; 1417 |
                            15337 ; 1418 |
                            15338 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            15339 ; 1420 |//  File system
                            15340 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            15341 ; 1422 |//$FILENAME arrangefilename.src
                            15342 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            15343 ; 1424 |//$FILENAME clearcluster.src
                            15344 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            15345 ; 1426 |//$FILENAME createdirectory.src
                            15346 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            15347 ; 1428 |//$FILENAME deletecontent.src
                            15348 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            15349 ; 1430 |//$FILENAME deleterecord.src
                            15350 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            15351 ; 1432 |//$FILENAME fastopen.src
                            15352 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            15353 ; 1434 |//$FILENAME fcreate.src
                            15354 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            15355 ; 1436 |//$FILENAME filegetattrib.src
                            15356 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            15357 ; 1438 |//$FILENAME filegetdate.src
                            15358 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            15359 ; 1440 |//$FILENAME filesetattrib.src
                            15360 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            15361 ; 1442 |//$FILENAME filesetdate.src
                            15362 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            15363 ; 1444 |//$FILENAME fsinit.src
                            15364 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            15365 ; 1446 |//$FILENAME fsshutdown.src
                            15366 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            15367 ; 1448 |//$FILENAME readdevicerecord.src
                            15368 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            15369 ; 1450 |//$FILENAME checkspaceinrootdir.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15370 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            15371 ; 1452 |//$FILENAME setcwdhandle.src
                            15372 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            15373 ; 1454 |//$FILENAME fsdriveinit.src
                            15374 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            15375 ; 1456 |//$FILENAME fsclearBuf.src
                            15376 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                            15377 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            15378 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.s
                                  rc
                            15379 ; 1460 |//$FILENAME fgetfasthandle.src
                            15380 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            15381 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            15382 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            15383 ; 1464 |//$FILENAME isfileopen.src
                            15384 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            15385 ; 1466 |//$FILENAME iscurrworkdir.src
                            15386 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            15387 ; 1468 |//$FILENAME chdir.src
                            15388 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            15389 ; 1470 |//$FILENAME chdirFromOffset.src
                            15390 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            15391 ; 1472 |//$FILENAME deletetree.src
                            15392 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            15393 ; 1474 |//$FILENAME deleteallrecords.src
                            15394 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            15395 ; 1476 |//$FILENAME cleardata.src
                            15396 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            15397 ; 1478 |//$FILENAME changetolowleveldir.src
                            15398 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            15399 ; 1480 |//$FILENAME getrecordnumber.src
                            15400 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            15401 ; 1482 |//$FILENAME fileremove.src
                            15402 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            15403 ; 1484 |//$FILENAME charactersearch.src
                            15404 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            15405 ; 1486 |//$FILENAME stringcompare.src
                            15406 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            15407 ; 1488 |//$FILENAME fopenw.src
                            15408 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            15409 ; 1490 |//$FILENAME fremove.src
                            15410 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            15411 ; 1492 |//$FILENAME fremovew.src
                            15412 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            15413 ; 1494 |//$FILENAME mkdir.src
                            15414 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            15415 ; 1496 |//$FILENAME mkdirw.src
                            15416 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            15417 ; 1498 |//$FILENAME rmdir.src
                            15418 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            15419 ; 1500 |//$FILENAME rmdirw.src
                            15420 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            15421 ; 1502 |//$FILENAME fgetc.src
                            15422 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            15423 ; 1504 |//$FILENAME fgets.src
                            15424 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            15425 ; 1506 |//$FILENAME fputc.src
                            15426 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            15427 ; 1508 |//$FILENAME fputs.src
                            15428 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            15429 ; 1510 |//$FILENAME arrangelongfilename.src
                            15430 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15431 ; 1512 |//$FILENAME convert_itoa.src
                            15432 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            15433 ; 1514 |//$FILENAME createdirrecord.src
                            15434 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            15435 ; 1516 |//$FILENAME chksum.src
                            15436 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            15437 ; 1518 |//$FILENAME createshortdirrecord.src
                            15438 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            15439 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            15440 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                            15441 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            15442 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            15443 ; 1524 |//$FILENAME extractfilenamew.src
                            15444 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            15445 ; 1526 |//$FILENAME extractpathw.src
                            15446 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            15447 ; 1528 |//$FILENAME findfreerecord.src
                            15448 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            15449 ; 1530 |//$FILENAME getnamew.src
                            15450 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            15451 ; 1532 |//$FILENAME isdirectoryempty.src
                            15452 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            15453 ; 1534 |//$FILENAME isshortnamevalid.src
                            15454 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            15455 ; 1536 |//$FILENAME longdirmatch.src
                            15456 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            15457 ; 1538 |//$FILENAME unicodetooem.src
                            15458 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            15459 ; 1540 |//$FILENAME matchdirrecordw.src
                            15460 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            15461 ; 1542 |//$FILENAME setcwd.src
                            15462 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            15463 ; 1544 |//$FILENAME setshortfilename.src
                            15464 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            15465 ; 1546 |//$FILENAME generatefilenametail.src
                            15466 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            15467 ; 1548 |//$FILENAME dbcstounicode.src
                            15468 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            15469 ; 1550 |//$FILENAME strcpy.src
                            15470 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            15471 ; 1552 |//$FILENAME strcpyw.src
                            15472 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            15473 ; 1554 |//$FILENAME strlengthw.src
                            15474 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            15475 ; 1556 |//$FILENAME filesystempresent.src
                            15476 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            15477 ; 1558 |//$FILENAME DataDriveInit.src
                            15478 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            15479 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            15480 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            15481 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            15482 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            15483 ; 1564 |//$FILENAME DataDriveGetSize.src
                            15484 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            15485 ; 1566 |//$FILENAME ConstructLongFileName.src
                            15486 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            15487 ; 1568 |//$FILENAME strcpyucs3_2.src
                            15488 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            15489 ; 1570 |//$FILENAME getvolumelabel.src
                            15490 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                            15491 ; 1572 |//$FILENAME setvolumelabel.src
                            15492 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15493 ; 1574 |//$FILENAME disk_full.src
                            15494 ; 1575 |#define RSRC_DISK_FULL 619    
                            15495 ; 1576 |//$FILENAME chkdskstartup.src
                            15496 ; 1577 |#define RSRC_CHECKDISK 620    
                            15497 ; 1578 |//$FILENAME chkdskstartupy.src
                            15498 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            15499 ; 1580 |//$FILENAME low_level_pwr_line1.src
                            15500 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            15501 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            15502 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                            15503 ; 1584 |//$FILENAME string_bit_rate.src
                            15504 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            15505 ; 1586 |//$FILENAME string_96000hz.src
                            15506 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            15507 ; 1588 |//$FILENAME string_112000hz.src
                            15508 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            15509 ; 1590 |//$FILENAME string_128000hz.src
                            15510 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            15511 ; 1592 |//$FILENAME string_160000hz.src
                            15512 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            15513 ; 1594 |//$FILENAME string_192000hz.src
                            15514 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            15515 ; 1596 |//$FILENAME string_224000hz.src
                            15516 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            15517 ; 1598 |//$FILENAME string_256000hz.src
                            15518 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            15519 ; 1600 |//$FILENAME string_320000hz.src
                            15520 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            15521 ; 1602 |//$FILENAME string_hz.src
                            15522 ; 1603 |#define RSRC_STRING_HZ 633    
                            15523 ; 1604 |//$FILENAME EncCommonp.src
                            15524 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            15525 ; 1606 |//$FILENAME adc_adcx.src
                            15526 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            15527 ; 1608 |//$FILENAME adc_adcy.src
                            15528 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            15529 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            15530 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            15531 ; 1612 |//$FILENAME string_album.src
                            15532 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            15533 ; 1614 |//$FILENAME string_encoder_song.src
                            15534 ; 1615 |#define RSRC_STRING_SONG 639    
                            15535 ; 1616 |//$FILENAME string_mode.src
                            15536 ; 1617 |#define RSRC_STRING_MODE 640    
                            15537 ; 1618 |
                            15538 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            15539 ; 1620 |// display related
                            15540 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            15541 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            15542 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            15543 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            15544 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            15545 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            15546 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            15547 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            15548 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            15549 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            15550 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            15551 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            15552 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            15553 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            15554 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15555 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            15556 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            15557 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            15558 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            15559 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            15560 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            15561 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                            15562 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            15563 ; 1644 |
                            15564 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                            15565 ; 1646 |//WMDRM Related
                            15566 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            15567 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            15568 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            15569 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            15570 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            15571 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            15572 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            15573 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            15574 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            15575 ; 1656 |//$FILENAME verifychecksum.src
                            15576 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            15577 ; 1658 |//$FILENAME drm_b64_encodew.src
                            15578 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            15579 ; 1660 |//$FILENAME _performactions.src
                            15580 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            15581 ; 1662 |//$FILENAME _processendofchain.src
                            15582 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            15583 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            15584 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            15585 ; 1666 |//$FILENAME drmcrt_towlower.src
                            15586 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            15587 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            15588 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            15589 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            15590 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            15591 ; 1672 |//$FILENAME drmcrt_memmove.src
                            15592 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            15593 ; 1674 |//$FILENAME performoperation_part1.src
                            15594 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            15595 ; 1676 |//$FILENAME performoperation_part2.src
                            15596 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            15597 ; 1678 |//$FILENAME performoperation_part3.src
                            15598 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            15599 ; 1680 |//$FILENAME performoperation_part4.src
                            15600 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            15601 ; 1682 |//$FILENAME performoperation_part5.src
                            15602 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            15603 ; 1684 |//$FILENAME performoperation_part6.src
                            15604 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            15605 ; 1686 |//$FILENAME isvalidfunction.src
                            15606 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            15607 ; 1688 |//$FILENAME functiongetvalue.src
                            15608 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            15609 ; 1690 |//$FILENAME globalsetvariable.src
                            15610 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            15611 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            15612 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            15613 ; 1694 |//$FILENAME variabledrmgetorset.src
                            15614 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            15615 ; 1696 |//$FILENAME variableappgetorset.src
                            15616 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15617 ; 1698 |//$FILENAME variablelicensegetorset.src
                            15618 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            15619 ; 1700 |//$FILENAME variablecontentgetorset.src
                            15620 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            15621 ; 1702 |//$FILENAME variabledevicegetorset.src
                            15622 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            15623 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                            15624 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            15625 ; 1706 |//$FILENAME drm_hds_createstore.src
                            15626 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                            15627 ; 1708 |//$FILENAME drm_hds_init.src
                            15628 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            15629 ; 1710 |//$FILENAME drm_hds_uninit.src
                            15630 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            15631 ; 1712 |//$FILENAME drm_hds_openstore.src
                            15632 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            15633 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            15634 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            15635 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            15636 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            15637 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            15638 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            15639 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            15640 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            15641 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            15642 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            15643 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            15644 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            15645 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            15646 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            15647 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            15648 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            15649 ; 1730 |//$FILENAME _hdscleanupstore.src
                            15650 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            15651 ; 1732 |//$FILENAME drm_lst_clean.src
                            15652 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            15653 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            15654 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            15655 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            15656 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            15657 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            15658 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            15659 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            15660 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            15661 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            15662 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            15663 ; 1744 |//$FILENAME _writesrn.src
                            15664 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            15665 ; 1746 |//$FILENAME _writecommonblockheader.src
                            15666 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            15667 ; 1748 |//$FILENAME _writechildblockheader.src
                            15668 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            15669 ; 1750 |//$FILENAME _readdatablockheader.src
                            15670 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            15671 ; 1752 |//$FILENAME _writedatablockheader.src
                            15672 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            15673 ; 1754 |//$FILENAME _hdsexpandstore.src
                            15674 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            15675 ; 1756 |//$FILENAME _hdsallocblock.src
                            15676 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            15677 ; 1758 |//$FILENAME _hdsfreeblock.src
                            15678 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15679 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            15680 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            15681 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            15682 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            15683 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            15684 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            15685 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                            15686 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            15687 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            15688 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                            15689 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            15690 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            15691 ; 1772 |//$FILENAME _hdsremoveslot.src
                            15692 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            15693 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            15694 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            15695 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            15696 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            15697 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            15698 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            15699 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            15700 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            15701 ; 1782 |//$FILENAME _hdsslotresize.src
                            15702 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            15703 ; 1784 |//$FILENAME _isnull.src
                            15704 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            15705 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            15706 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            15707 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            15708 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            15709 ; 1790 |//$FILENAME _readsrn.src
                            15710 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            15711 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            15712 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                            15713 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            15714 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            15715 ; 1796 |//$FILENAME _hdsslotwrite.src
                            15716 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            15717 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            15718 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            15719 ; 1800 |//$FILENAME drm_lst_close.src
                            15720 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            15721 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            15722 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            15723 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            15724 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            15725 ; 1806 |//$FILENAME _processextensions.src
                            15726 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            15727 ; 1808 |//$FILENAME _processidlist.src
                            15728 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            15729 ; 1810 |//$FILENAME _processexclusions.src
                            15730 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            15731 ; 1812 |//$FILENAME _processinclusions.src
                            15732 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            15733 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            15734 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            15735 ; 1816 |//$FILENAME _getopllevel.src
                            15736 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            15737 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            15738 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            15739 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            15740 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15741 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                            15742 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            15743 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            15744 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            15745 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            15746 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            15747 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                            15748 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            15749 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            15750 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                            15751 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            15752 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            15753 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            15754 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            15755 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            15756 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            15757 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            15758 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            15759 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            15760 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            15761 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            15762 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            15763 ; 1844 |//$FILENAME overlappingdates.src
                            15764 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            15765 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            15766 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            15767 ; 1848 |//$FILENAME neginfdate.src
                            15768 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            15769 ; 1850 |//$FILENAME infdate.src
                            15770 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            15771 ; 1852 |//$FILENAME isexpired.src
                            15772 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            15773 ; 1854 |//$FILENAME getsecstateattr.src
                            15774 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            15775 ; 1856 |//$FILENAME setexpirycategory.src
                            15776 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            15777 ; 1858 |//$FILENAME getv2licenseinfo.src
                            15778 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            15779 ; 1860 |//$FILENAME getnextlicense.src
                            15780 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            15781 ; 1862 |//$FILENAME aggregate.src
                            15782 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            15783 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            15784 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            15785 ; 1866 |//$FILENAME _scannodeforattributew.src
                            15786 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            15787 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            15788 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            15789 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            15790 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            15791 ; 1872 |//$FILENAME _createdevicestore.src
                            15792 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            15793 ; 1874 |//$FILENAME _mapdrmerror.src
                            15794 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            15795 ; 1876 |//$FILENAME _comparemachineid.src
                            15796 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            15797 ; 1878 |//$FILENAME initmgrcontext.src
                            15798 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            15799 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            15800 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            15801 ; 1882 |//$FILENAME drm_mgr_commit.src
                            15802 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15803 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            15804 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            15805 ; 1886 |//$FILENAME januscleandatastore.src
                            15806 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            15807 ; 1888 |//$FILENAME drm_mtr_openid.src
                            15808 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            15809 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                            15810 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            15811 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            15812 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                            15813 ; 1894 |//$FILENAME oem_setendoffile.src
                            15814 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            15815 ; 1896 |//$FILENAME oem_genrandombytes.src
                            15816 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            15817 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            15818 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            15819 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            15820 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            15821 ; 1902 |//$FILENAME oem_setdevicecert.src
                            15822 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            15823 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            15824 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            15825 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            15826 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            15827 ; 1908 |//$FILENAME oem_getuniqueid.src
                            15828 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            15829 ; 1910 |//$FILENAME oem_getdevicecert.src
                            15830 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            15831 ; 1912 |//$FILENAME drm_snc_openstore.src
                            15832 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            15833 ; 1914 |//$FILENAME drm_snc_closestore.src
                            15834 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            15835 ; 1916 |//$FILENAME _setkidstoredata.src
                            15836 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            15837 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            15838 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            15839 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            15840 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            15841 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            15842 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            15843 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            15844 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            15845 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            15846 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            15847 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            15848 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            15849 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            15850 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            15851 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            15852 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            15853 ; 1934 |//$FILENAME _hdsprealloc.src
                            15854 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            15855 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            15856 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            15857 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            15858 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            15859 ; 1940 |//$FILENAME gendevicecertificate.src
                            15860 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            15861 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            15862 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            15863 ; 1944 |//$FILENAME copyhdsdtore.src
                            15864 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15865 ; 1946 |//$FILENAME generatedevicecert.src
                            15866 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            15867 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            15868 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            15869 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            15870 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            15871 ; 1952 |//$FILENAME _hdsupdatesrn.src
                            15872 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            15873 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            15874 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                            15875 ; 1956 |//$FILENAME _checksecureclock.src
                            15876 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            15877 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            15878 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            15879 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            15880 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            15881 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            15882 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            15883 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            15884 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            15885 ; 1966 |//$FILENAME strtol.src
                            15886 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            15887 ; 1968 |//$FILENAME mktime.src
                            15888 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            15889 ; 1970 |//$FILENAME gmtime.src
                            15890 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            15891 ; 1972 |//$FILENAME localtime.src
                            15892 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            15893 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            15894 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            15895 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            15896 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            15897 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            15898 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            15899 ; 1980 |//$FILENAME oem_setsystemtime.src
                            15900 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            15901 ; 1982 |//$FILENAME const_pkcrypto.src
                            15902 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            15903 ; 1984 |//$FILENAME const_y.src
                            15904 ; 1985 |#define RSRC_CONST_Y 820    
                            15905 ; 1986 |//$FILENAME aes_dec_table.src
                            15906 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            15907 ; 1988 |//$FILENAME aes_key_table.src
                            15908 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            15909 ; 1990 |//$FILENAME aes_enc_table.src
                            15910 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            15911 ; 1992 |//$FILENAME device_cert.src
                            15912 ; 1993 |#define RSRC_DEVCERT 824    
                            15913 ; 1994 |//$FILENAME devcert_template.src
                            15914 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            15915 ; 1996 |//$FILENAME getbase64decodedkey.src
                            15916 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            15917 ; 1998 |//$FILENAME _initslot.src
                            15918 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            15919 ; 2000 |//$FILENAME hdsimplcommon.src
                            15920 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            15921 ; 2002 |//$FILENAME hdsimpl_p.src
                            15922 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            15923 ; 2004 |
                            15924 ; 2005 |
                            15925 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            15926 ; 2007 |//pkcrypto Related
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15927 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            15928 ; 2009 |//$FILENAME two_adic_inverse.src
                            15929 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            15930 ; 2011 |//$FILENAME mp_shift.src
                            15931 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            15932 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            15933 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                            15934 ; 2015 |//$FILENAME set_immediate.src
                            15935 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            15936 ; 2017 |//$FILENAME multiply_immediate.src
                            15937 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            15938 ; 2019 |//$FILENAME multiply.src
                            15939 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            15940 ; 2021 |//$FILENAME divide_precondition_1.src
                            15941 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            15942 ; 2023 |//$FILENAME divide_immediate.src
                            15943 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            15944 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            15945 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            15946 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            15947 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            15948 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            15949 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            15950 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            15951 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            15952 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            15953 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            15954 ; 2035 |//$FILENAME ecaffine_addition.src
                            15955 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            15956 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            15957 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            15958 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            15959 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            15960 ; 2041 |//$FILENAME kfdesc_initialize.src
                            15961 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            15962 ; 2043 |//$FILENAME kimmediate.src
                            15963 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                            15964 ; 2045 |//$FILENAME kprime_immediater.src
                            15965 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            15966 ; 2047 |//$FILENAME kprime_sqrter.src
                            15967 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            15968 ; 2049 |//$FILENAME kinitialize_prime.src
                            15969 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            15970 ; 2051 |//$FILENAME mod_lucasuv.src
                            15971 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            15972 ; 2053 |//$FILENAME mod_lucas.src
                            15973 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            15974 ; 2055 |//$FILENAME bucket_multiply.src
                            15975 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            15976 ; 2057 |//$FILENAME mod_exp2000.src
                            15977 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            15978 ; 2059 |//$FILENAME mod_exp.src
                            15979 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            15980 ; 2061 |//$FILENAME modmul_choices1.src
                            15981 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            15982 ; 2063 |//$FILENAME mod_sqrt.src
                            15983 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            15984 ; 2065 |//$FILENAME create_modulus.src
                            15985 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            15986 ; 2067 |//$FILENAME from_modular.src
                            15987 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            15988 ; 2069 |//$FILENAME add_immediate.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 270

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15989 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            15990 ; 2071 |//$FILENAME add_diff.src
                            15991 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                            15992 ; 2073 |//$FILENAME add_full.src
                            15993 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            15994 ; 2075 |//$FILENAME compare_sum_same.src
                            15995 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                            15996 ; 2077 |//$FILENAME sub_immediate.src
                            15997 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            15998 ; 2079 |//$FILENAME mp_initialization.src
                            15999 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            16000 ; 2081 |//$FILENAME new_random_bytes.src
                            16001 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            16002 ; 2083 |//$FILENAME new_random_dword_interval.src
                            16003 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            16004 ; 2085 |//$FILENAME new_random_digit_interval.src
                            16005 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            16006 ; 2087 |//$FILENAME new_random_mod.src
                            16007 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            16008 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            16009 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            16010 ; 2091 |//$FILENAME new_random_digits.src
                            16011 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            16012 ; 2093 |//$FILENAME words_to_ecaffine.src
                            16013 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            16014 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            16015 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            16016 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            16017 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            16018 ; 2099 |//$FILENAME pkinit.src
                            16019 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            16020 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            16021 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            16022 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            16023 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            16024 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            16025 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            16026 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            16027 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            16028 ; 2109 |//$FILENAME fe2ipmod.src
                            16029 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            16030 ; 2111 |//$FILENAME drm_pk_sign.src
                            16031 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            16032 ; 2113 |//$FILENAME drm_pk_verify.src
                            16033 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            16034 ; 2115 |//$FILENAME random_bytes.src
                            16035 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            16036 ; 2117 |//$FILENAME mp_gcdex.src
                            16037 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            16038 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            16039 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            16040 ; 2121 |//$FILENAME pkcrypto_p.src
                            16041 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            16042 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            16043 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            16044 ; 2125 |//$FILENAME del_all_warning_line2.src
                            16045 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            16046 ; 2127 |//$FILENAME del_all_file_star.src
                            16047 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            16048 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            16049 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            16050 ; 2131 |//$FILENAME Funclet_Init5VSense.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 271

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16051 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            16052 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            16053 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            16054 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            16055 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            16056 ; 2137 |
                            16057 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                            16058 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            16059 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            16060 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                            16061 ; 2142 |
                            16062 ; 2143 |
                            16063 ; 2144 |// Added to allow rechargeable battery configurations to build
                            16064 ; 2145 |//$FILENAME battery_charging.src
                            16065 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            16066 ; 2147 |//$FILENAME batterychargecodebank.src
                            16067 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            16068 ; 2149 |//$FILENAME updatevolume.src
                            16069 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            16070 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            16071 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            16072 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            16073 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            16074 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            16075 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            16076 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            16077 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            16078 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            16079 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            16080 ; 2161 |//$FILENAME _iscachedevent.src
                            16081 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            16082 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            16083 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            16084 ; 2165 |//$FILENAME oem_data.src
                            16085 ; 2166 |#define RSRC_OEM_DATA 906    
                            16086 ; 2167 |//$FILENAME gpk_p.src
                            16087 ; 2168 |#define RSRC_GPK_P 907    
                            16088 ; 2169 |//$FILENAME key_data.src
                            16089 ; 2170 |#define RSRC_KEY_DATA 908    
                            16090 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            16091 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            16092 ; 2173 |//$FILENAME string_working.src
                            16093 ; 2174 |#define RSRC_STRING_WORKING 910    
                            16094 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            16095 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            16096 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            16097 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            16098 ; 2179 |
                            16099 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            16100 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            16101 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            16102 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            16103 ; 2184 |
                            16104 ; 2185 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16105 ; 2186 |// Audible ACELP Resources
                            16106 ; 2187 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16107 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            16108 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            16109 ; 2190 |//$FILENAME AudibleAcelpP.src
                            16110 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 272

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16111 ; 2192 |//$FILENAME AudibleAcelpX.src
                            16112 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            16113 ; 2194 |//$FILENAME AudibleAcelpY.src
                            16114 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            16115 ; 2196 |
                            16116 ; 2197 |//$FILENAME AudibleDecMod.src
                            16117 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                            16118 ; 2199 |//$FILENAME audiblemp3p.src
                            16119 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            16120 ; 2201 |//$FILENAME audiblemp3x.src
                            16121 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            16122 ; 2203 |//$FILENAME audiblemp3y.src
                            16123 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            16124 ; 2205 |
                            16125 ; 2206 |//$FILENAME audiblemetadata_p.src
                            16126 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            16127 ; 2208 |//$FILENAME audiblemetadata_y.src
                            16128 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            16129 ; 2210 |//$FILENAME audiblesongposition_p.src
                            16130 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            16131 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            16132 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            16133 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            16134 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            16135 ; 2216 |//$FILENAME audibledsa_p.src
                            16136 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            16137 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            16138 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            16139 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            16140 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            16141 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            16142 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            16143 ; 2224 |
                            16144 ; 2225 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16145 ; 2226 |// Effects and SRS Resources
                            16146 ; 2227 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16147 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            16148 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            16149 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            16150 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            16151 ; 2232 |//$FILENAME wowctrl.src
                            16152 ; 2233 |#define RSRC_WOW_CTRL 934    
                            16153 ; 2234 |
                            16154 ; 2235 |//$FILENAME wowmenu.src
                            16155 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            16156 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            16157 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            16158 ; 2239 |//$FILENAME string_wow_menu.src
                            16159 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            16160 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            16161 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            16162 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            16163 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            16164 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            16165 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            16166 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            16167 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            16168 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            16169 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            16170 ; 2251 |//$FILENAME wow_icon.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 273

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16171 ; 2252 |#define RSRC_WOW_ICON 943    
                            16172 ; 2253 |
                            16173 ; 2254 |//$FILENAME wow16k.src
                            16174 ; 2255 |#define RSRC_WOW16K 944    
                            16175 ; 2256 |//$FILENAME wow32k.src
                            16176 ; 2257 |#define RSRC_WOW32K 945    
                            16177 ; 2258 |//$FILENAME wow8k.src
                            16178 ; 2259 |#define RSRC_WOW8K 946    
                            16179 ; 2260 |//$FILENAME wow11k.src
                            16180 ; 2261 |#define RSRC_WOW11K 947    
                            16181 ; 2262 |//$FILENAME wow22k.src
                            16182 ; 2263 |#define RSRC_WOW22K 948    
                            16183 ; 2264 |//$FILENAME wow24k.src
                            16184 ; 2265 |#define RSRC_WOW24K 949    
                            16185 ; 2266 |//$FILENAME wow44k.src
                            16186 ; 2267 |#define RSRC_WOW44K 950    
                            16187 ; 2268 |//$FILENAME wow48k.src
                            16188 ; 2269 |#define RSRC_WOW48K 951    
                            16189 ; 2270 |
                            16190 ; 2271 |//$FILENAME wow16k_Y.src
                            16191 ; 2272 |#define RSRC_WOW16K_Y 952    
                            16192 ; 2273 |//$FILENAME wow32k_Y.src
                            16193 ; 2274 |#define RSRC_WOW32K_Y 953    
                            16194 ; 2275 |//$FILENAME wow8k_Y.src
                            16195 ; 2276 |#define RSRC_WOW8K_Y 954    
                            16196 ; 2277 |//$FILENAME wow11k_Y.src
                            16197 ; 2278 |#define RSRC_WOW11K_Y 955    
                            16198 ; 2279 |//$FILENAME wow22k_Y.src
                            16199 ; 2280 |#define RSRC_WOW22K_Y 956    
                            16200 ; 2281 |//$FILENAME wow24k_Y.src
                            16201 ; 2282 |#define RSRC_WOW24K_Y 957    
                            16202 ; 2283 |//$FILENAME wow44k_Y.src
                            16203 ; 2284 |#define RSRC_WOW44K_Y 958    
                            16204 ; 2285 |//$FILENAME wow48k_Y.src
                            16205 ; 2286 |#define RSRC_WOW48K_Y 959    
                            16206 ; 2287 |
                            16207 ; 2288 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            16208 ; 2289 |// Audible Section Navigation
                            16209 ; 2290 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            16210 ; 2291 |//$FILENAME audible_secnav.src
                            16211 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            16212 ; 2293 |
                            16213 ; 2294 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16214 ; 2295 |// PLAYLIST3 and Music Library
                            16215 ; 2296 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16216 ; 2297 |
                            16217 ; 2298 |//$FILENAME build_ml.src
                            16218 ; 2299 |#define RSRC_BUILD_ML 961    
                            16219 ; 2300 |//$FILENAME build_ml_warning.src
                            16220 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            16221 ; 2302 |//$FILENAME build_ml_warning2.src
                            16222 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            16223 ; 2304 |//$FILENAME build_flash1.src
                            16224 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            16225 ; 2306 |//$FILENAME build_flash2.src
                            16226 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            16227 ; 2308 |//$FILENAME build_flash3.src
                            16228 ; 2309 |#define RSRC_BUILD_FLASH3 966    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 274

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16229 ; 2310 |//$FILENAME build_sd1.src
                            16230 ; 2311 |#define RSRC_BUILD_SD1 967    
                            16231 ; 2312 |//$FILENAME build_sd2.src
                            16232 ; 2313 |#define RSRC_BUILD_SD2 968    
                            16233 ; 2314 |//$FILENAME build_sd3.src
                            16234 ; 2315 |#define RSRC_BUILD_SD3 969    
                            16235 ; 2316 |//$FILENAME build_newmusic.src
                            16236 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            16237 ; 2318 |//$FILENAME sdmd.src
                            16238 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                            16239 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            16240 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            16241 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            16242 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                            16243 ; 2324 |//$FILENAME MusicLibBuildModule.src
                            16244 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            16245 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            16246 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            16247 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            16248 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            16249 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            16250 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            16251 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            16252 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            16253 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            16254 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            16255 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            16256 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            16257 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            16258 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            16259 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            16260 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            16261 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            16262 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            16263 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            16264 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            16265 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            16266 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            16267 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            16268 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            16269 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            16270 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            16271 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            16272 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            16273 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            16274 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            16275 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            16276 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            16277 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            16278 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            16279 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            16280 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            16281 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            16282 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            16283 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            16284 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            16285 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            16286 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            16287 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            16288 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            16289 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            16290 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 275

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16291 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            16292 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            16293 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            16294 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            16295 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            16296 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            16297 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                            16298 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            16299 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            16300 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                            16301 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            16302 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            16303 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            16304 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            16305 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            16306 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            16307 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            16308 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            16309 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            16310 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            16311 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            16312 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            16313 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            16314 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            16315 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            16316 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            16317 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            16318 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            16319 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            16320 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            16321 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            16322 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            16323 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            16324 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            16325 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            16326 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            16327 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            16328 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            16329 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            16330 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            16331 ; 2412 |//$FILENAME playmusicmenu.src
                            16332 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            16333 ; 2414 |//$FILENAME browsemenu.src
                            16334 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            16335 ; 2416 |//$FILENAME browsemenu_extra.src
                            16336 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            16337 ; 2418 |//$FILENAME string_play_all.src
                            16338 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            16339 ; 2420 |//$FILENAME string_play.src
                            16340 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            16341 ; 2422 |//$FILENAME string_unknown_year.src
                            16342 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            16343 ; 2424 |//$FILENAME string_year_width.src
                            16344 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            16345 ; 2426 |//$FILENAME string_artist.src
                            16346 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            16347 ; 2428 |//$FILENAME string_songs.src
                            16348 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            16349 ; 2430 |//$FILENAME string_on_the_fly.src
                            16350 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            16351 ; 2432 |//$FILENAME string_new_music.src
                            16352 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 276

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16353 ; 2434 |//$FILENAME string_genre.src
                            16354 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            16355 ; 2436 |//$FILENAME string_year.src
                            16356 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            16357 ; 2438 |//$FILENAME string_playlist.src
                            16358 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            16359 ; 2440 |//$FILENAME string_fm_rec.src
                            16360 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            16361 ; 2442 |//$FILENAME string_linein_rec.src
                            16362 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                            16363 ; 2444 |//$FILENAME string_play_music.src
                            16364 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            16365 ; 2446 |//$FILENAME highlight_back.src
                            16366 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            16367 ; 2448 |//$FILENAME newmusicmenu.src
                            16368 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            16369 ; 2450 |//$FILENAME string_1_day.src
                            16370 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            16371 ; 2452 |//$FILENAME string_1_week.src
                            16372 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            16373 ; 2454 |//$FILENAME string_1_month.src
                            16374 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            16375 ; 2456 |//$FILENAME on_the_fly_full.src
                            16376 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            16377 ; 2458 |//$FILENAME on_the_fly_free1.src
                            16378 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            16379 ; 2460 |//$FILENAME on_the_fly_free2.src
                            16380 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            16381 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            16382 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            16383 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            16384 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            16385 ; 2466 |//$FILENAME empty_favourite.src
                            16386 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            16387 ; 2468 |//$FILENAME sd_remove.src
                            16388 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            16389 ; 2470 |//$FILENAME sd_insert.src
                            16390 ; 2471 |#define RSRC_SD_INSERT 1047    
                            16391 ; 2472 |//$FILENAME check_disk_1.src
                            16392 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            16393 ; 2474 |//$FILENAME check_disk_2.src
                            16394 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            16395 ; 2476 |//$FILENAME check_disk_3.src
                            16396 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            16397 ; 2478 |//$FILENAME flash_error.src
                            16398 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            16399 ; 2480 |
                            16400 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16401 ; 2482 |// STFM1000 Tuner funclet
                            16402 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16403 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            16404 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            16405 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            16406 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            16407 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            16408 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            16409 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            16410 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            16411 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            16412 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            16413 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            16414 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 277

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16415 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            16416 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            16417 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            16418 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            16419 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            16420 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            16421 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                            16422 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            16423 ; 2504 |//$FILENAME decstfmmod.src
                            16424 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                            16425 ; 2506 |//$FILENAME dec_stfmp.src
                            16426 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            16427 ; 2508 |//$FILENAME dec_stfmx.src
                            16428 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            16429 ; 2510 |//$FILENAME dec_stfmy.src
                            16430 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            16431 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            16432 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            16433 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            16434 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            16435 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            16436 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            16437 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            16438 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            16439 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            16440 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            16441 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            16442 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            16443 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            16444 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            16445 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            16446 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            16447 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            16448 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            16449 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            16450 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            16451 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            16452 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            16453 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            16454 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            16455 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaB
                                  ias.src
                            16456 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookF
                                  orPilot.src
                            16457 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            16458 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            16459 ; 2540 |// for RestoreDriveFromBackup
                            16460 ; 2541 |//$FILENAME restoresysdrive.src
                            16461 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            16462 ; 2543 |
                            16463 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16464 ; 2545 |// Playlist5 sources
                            16465 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16466 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            16467 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            16468 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            16469 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            16470 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            16471 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            16472 ; 2553 |//$FILENAME playlist5_playback_module.src
                            16473 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            16474 ; 2555 |//$FILENAME playlist5_browse_module.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 278

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16475 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            16476 ; 2557 |
                            16477 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            16478 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            16479 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            16480 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            16481 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                            16482 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            16483 ; 2564 |
                            16484 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16485 ; 2566 |// DanhNguyen added bitmaps
                            16486 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16487 ; 2568 |//$FILENAME icon_folder.src
                            16488 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            16489 ; 2570 |//$FILENAME icon_song.src
                            16490 ; 2571 |#define RSRC_ICON_SONG 1089    
                            16491 ; 2572 |
                            16492 ; 2573 |//$FILENAME menu_music.src
                            16493 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                            16494 ; 2575 |//$FILENAME vie_menu_music.src
                            16495 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            16496 ; 2577 |
                            16497 ; 2578 |//$FILENAME menu_voice.src
                            16498 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            16499 ; 2580 |//$FILENAME vie_menu_voice.src
                            16500 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            16501 ; 2582 |
                            16502 ; 2583 |//$FILENAME menu_fmtuner.src
                            16503 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            16504 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            16505 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            16506 ; 2587 |
                            16507 ; 2588 |//$FILENAME menu_record.src
                            16508 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            16509 ; 2590 |//$FILENAME vie_menu_record.src
                            16510 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            16511 ; 2592 |
                            16512 ; 2593 |//$FILENAME menu_settings.src
                            16513 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            16514 ; 2595 |//$FILENAME vie_menu_settings.src
                            16515 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            16516 ; 2597 |
                            16517 ; 2598 |//$FILENAME menu_shutdown.src
                            16518 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            16519 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            16520 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            16521 ; 2602 |
                            16522 ; 2603 |//$FILENAME menu_clock.src
                            16523 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            16524 ; 2605 |//$FILENAME vie_menu_clock.src
                            16525 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            16526 ; 2607 |
                            16527 ; 2608 |//$FILENAME menu_ab.src
                            16528 ; 2609 |#define RSRC_MENU_AB 1104    
                            16529 ; 2610 |//$FILENAME vie_menu_ab.src
                            16530 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            16531 ; 2612 |
                            16532 ; 2613 |//$FILENAME menu_delete.src
                            16533 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            16534 ; 2615 |//$FILENAME vie_menu_delete.src
                            16535 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            16536 ; 2617 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 279

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16537 ; 2618 |//$FILENAME menu_about.src
                            16538 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            16539 ; 2620 |//$FILENAME vie_menu_about.src
                            16540 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            16541 ; 2622 |
                            16542 ; 2623 |//$FILENAME menu_exit.src
                            16543 ; 2624 |#define RSRC_MENU_EXIT 1110    
                            16544 ; 2625 |//$FILENAME vie_menu_exit.src
                            16545 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            16546 ; 2627 |
                            16547 ; 2628 |//$FILENAME music_play_all.src
                            16548 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            16549 ; 2630 |//$FILENAME vie_music_play_all.src
                            16550 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            16551 ; 2632 |
                            16552 ; 2633 |//$FILENAME music_folder_internal.src
                            16553 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            16554 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            16555 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            16556 ; 2637 |
                            16557 ; 2638 |//$FILENAME music_folder_external.src
                            16558 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            16559 ; 2640 |//$FILENAME vie_music_folder_external.src
                            16560 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            16561 ; 2642 |
                            16562 ; 2643 |//$FILENAME music_songs.src
                            16563 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            16564 ; 2645 |//$FILENAME vie_music_songs.src
                            16565 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            16566 ; 2647 |
                            16567 ; 2648 |//$FILENAME music_favorites.src
                            16568 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            16569 ; 2650 |//$FILENAME vie_music_favorites.src
                            16570 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            16571 ; 2652 |
                            16572 ; 2653 |//$FILENAME music_fm_record.src
                            16573 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            16574 ; 2655 |//$FILENAME vie_music_fm_record.src
                            16575 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            16576 ; 2657 |
                            16577 ; 2658 |//$FILENAME music_exit.src
                            16578 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            16579 ; 2660 |//$FILENAME vie_music_exit.src
                            16580 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            16581 ; 2662 |
                            16582 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            16583 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            16584 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            16585 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            16586 ; 2667 |
                            16587 ; 2668 |//$FILENAME browse_music_folder_external.src
                            16588 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            16589 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            16590 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            16591 ; 2672 |
                            16592 ; 2673 |//$FILENAME browse_music_list_songs.src
                            16593 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            16594 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            16595 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            16596 ; 2677 |
                            16597 ; 2678 |//$FILENAME browse_music_favourites.src
                            16598 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 280

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16599 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            16600 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            16601 ; 2682 |
                            16602 ; 2683 |//$FILENAME browse_music_fm_files.src
                            16603 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            16604 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            16605 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                            16606 ; 2687 |
                            16607 ; 2688 |//$FILENAME browse_voice.src
                            16608 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                            16609 ; 2690 |//$FILENAME vie_browse_voice.src
                            16610 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            16611 ; 2692 |
                            16612 ; 2693 |//$FILENAME favourites_list_add.src
                            16613 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            16614 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            16615 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            16616 ; 2697 |
                            16617 ; 2698 |//$FILENAME favourites_list_remove.src
                            16618 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            16619 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            16620 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            16621 ; 2702 |
                            16622 ; 2703 |//$FILENAME favourites_list_is_full.src
                            16623 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            16624 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            16625 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            16626 ; 2707 |
                            16627 ; 2708 |//$FILENAME about_screen_1.src
                            16628 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            16629 ; 2710 |//$FILENAME vie_about_screen_1.src
                            16630 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            16631 ; 2712 |
                            16632 ; 2713 |//$FILENAME about_screen_2.src
                            16633 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            16634 ; 2715 |//$FILENAME vie_about_screen_2.src
                            16635 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            16636 ; 2717 |
                            16637 ; 2718 |//$FILENAME about_screen_3.src
                            16638 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            16639 ; 2720 |//$FILENAME vie_about_screen_3.src
                            16640 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            16641 ; 2722 |
                            16642 ; 2723 |//$FILENAME about_screen_4.src
                            16643 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            16644 ; 2725 |//$FILENAME vie_about_screen_4.src
                            16645 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            16646 ; 2727 |
                            16647 ; 2728 |//$FILENAME time_date_exit_title.src
                            16648 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            16649 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            16650 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            16651 ; 2732 |
                            16652 ; 2733 |//$FILENAME time_clean_desktop.src
                            16653 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            16654 ; 2735 |//$FILENAME time_dash.src
                            16655 ; 2736 |#define RSRC_TIME_DASH 1155    
                            16656 ; 2737 |
                            16657 ; 2738 |//$FILENAME time_day_7.src
                            16658 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            16659 ; 2740 |//$FILENAME vie_time_day_7.src
                            16660 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 281

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16661 ; 2742 |//$FILENAME time_day_cn.src
                            16662 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            16663 ; 2744 |//$FILENAME vie_time_day_cn.src
                            16664 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            16665 ; 2746 |//$FILENAME time_day_2.src
                            16666 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            16667 ; 2748 |//$FILENAME vie_time_day_2.src
                            16668 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            16669 ; 2750 |//$FILENAME time_day_3.src
                            16670 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                            16671 ; 2752 |//$FILENAME vie_time_day_3.src
                            16672 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            16673 ; 2754 |//$FILENAME time_day_4.src
                            16674 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            16675 ; 2756 |//$FILENAME vie_time_day_4.src
                            16676 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            16677 ; 2758 |//$FILENAME time_day_5.src
                            16678 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            16679 ; 2760 |//$FILENAME vie_time_day_5.src
                            16680 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            16681 ; 2762 |//$FILENAME time_day_6.src
                            16682 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            16683 ; 2764 |//$FILENAME vie_time_day_6.src
                            16684 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            16685 ; 2766 |
                            16686 ; 2767 |//$FILENAME time_month_1.src
                            16687 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            16688 ; 2769 |//$FILENAME vie_time_month_1.src
                            16689 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            16690 ; 2771 |//$FILENAME time_month_2.src
                            16691 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            16692 ; 2773 |//$FILENAME vie_time_month_2.src
                            16693 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            16694 ; 2775 |//$FILENAME time_month_3.src
                            16695 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            16696 ; 2777 |//$FILENAME vie_time_month_3.src
                            16697 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            16698 ; 2779 |//$FILENAME time_month_4.src
                            16699 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            16700 ; 2781 |//$FILENAME vie_time_month_4.src
                            16701 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            16702 ; 2783 |//$FILENAME time_month_5.src
                            16703 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            16704 ; 2785 |//$FILENAME vie_time_month_5.src
                            16705 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            16706 ; 2787 |//$FILENAME time_month_6.src
                            16707 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            16708 ; 2789 |//$FILENAME vie_time_month_6.src
                            16709 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            16710 ; 2791 |//$FILENAME time_month_7.src
                            16711 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            16712 ; 2793 |//$FILENAME vie_time_month_7.src
                            16713 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            16714 ; 2795 |//$FILENAME time_month_8.src
                            16715 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            16716 ; 2797 |//$FILENAME vie_time_month_8.src
                            16717 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            16718 ; 2799 |//$FILENAME time_month_9.src
                            16719 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            16720 ; 2801 |//$FILENAME vie_time_month_9.src
                            16721 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            16722 ; 2803 |//$FILENAME time_month_10.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 282

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16723 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            16724 ; 2805 |//$FILENAME vie_time_month_10.src
                            16725 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            16726 ; 2807 |//$FILENAME time_month_11.src
                            16727 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            16728 ; 2809 |//$FILENAME vie_time_month_11.src
                            16729 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                            16730 ; 2811 |//$FILENAME time_month_12.src
                            16731 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            16732 ; 2813 |//$FILENAME vie_time_month_12.src
                            16733 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            16734 ; 2815 |
                            16735 ; 2816 |//$FILENAME time_num_am.src
                            16736 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            16737 ; 2818 |//$FILENAME time_num_am.src
                            16738 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            16739 ; 2820 |//$FILENAME settime_format_12h.src
                            16740 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            16741 ; 2822 |//$FILENAME settime_format_24h.src
                            16742 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            16743 ; 2824 |//$FILENAME setdate_format_dmy.src
                            16744 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                            16745 ; 2826 |//$FILENAME setdate_format_mdy.src
                            16746 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            16747 ; 2828 |//$FILENAME setdate_format_ymd.src
                            16748 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            16749 ; 2830 |
                            16750 ; 2831 |//$FILENAME time_num_large_0.src
                            16751 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            16752 ; 2833 |//$FILENAME time_num_large_1.src
                            16753 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            16754 ; 2835 |//$FILENAME time_num_large_2.src
                            16755 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            16756 ; 2837 |//$FILENAME time_num_large_3.src
                            16757 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            16758 ; 2839 |//$FILENAME time_num_large_4.src
                            16759 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            16760 ; 2841 |//$FILENAME time_num_large_5.src
                            16761 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            16762 ; 2843 |//$FILENAME time_num_large_6.src
                            16763 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            16764 ; 2845 |//$FILENAME time_num_large_7.src
                            16765 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            16766 ; 2847 |//$FILENAME time_num_large_8.src
                            16767 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            16768 ; 2849 |//$FILENAME time_num_large_9.src
                            16769 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            16770 ; 2851 |
                            16771 ; 2852 |//$FILENAME time_num_medium_0.src
                            16772 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            16773 ; 2854 |//$FILENAME time_num_medium_1.src
                            16774 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            16775 ; 2856 |//$FILENAME time_num_medium_2.src
                            16776 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            16777 ; 2858 |//$FILENAME time_num_medium_3.src
                            16778 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            16779 ; 2860 |//$FILENAME time_num_medium_4.src
                            16780 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            16781 ; 2862 |//$FILENAME time_num_medium_5.src
                            16782 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            16783 ; 2864 |//$FILENAME time_num_medium_6.src
                            16784 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 283

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16785 ; 2866 |//$FILENAME time_num_medium_7.src
                            16786 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            16787 ; 2868 |//$FILENAME time_num_medium_8.src
                            16788 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            16789 ; 2870 |//$FILENAME time_num_medium_9.src
                            16790 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            16791 ; 2872 |
                            16792 ; 2873 |//$FILENAME time_colon.src
                            16793 ; 2874 |#define RSRC_TIME_COLON 1221    
                            16794 ; 2875 |
                            16795 ; 2876 |//$FILENAME settings_backlight_title.src
                            16796 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            16797 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            16798 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            16799 ; 2880 |//$FILENAME settings_playmode_title.src
                            16800 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            16801 ; 2882 |
                            16802 ; 2883 |//$FILENAME settings_contrast_title.src
                            16803 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            16804 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            16805 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            16806 ; 2887 |
                            16807 ; 2888 |//$FILENAME settings_eq_title.src
                            16808 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            16809 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            16810 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            16811 ; 2892 |
                            16812 ; 2893 |//$FILENAME settings_exit_title.src
                            16813 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            16814 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            16815 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            16816 ; 2897 |
                            16817 ; 2898 |//$FILENAME settings_set_date_title.src
                            16818 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            16819 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            16820 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            16821 ; 2902 |
                            16822 ; 2903 |//$FILENAME settings_set_time_title.src
                            16823 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            16824 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            16825 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            16826 ; 2907 |
                            16827 ; 2908 |//$FILENAME settings_playmode_normal.src
                            16828 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            16829 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            16830 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            16831 ; 2912 |
                            16832 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            16833 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            16834 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            16835 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            16836 ; 2917 |
                            16837 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            16838 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            16839 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            16840 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            16841 ; 2922 |
                            16842 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            16843 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            16844 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            16845 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            16846 ; 2927 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 284

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16847 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            16848 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            16849 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            16850 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            16851 ; 2932 |
                            16852 ; 2933 |//$FILENAME settings_backlight_on.src
                            16853 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                            16854 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            16855 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            16856 ; 2937 |
                            16857 ; 2938 |//$FILENAME settings_backlight_10s.src
                            16858 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            16859 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            16860 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            16861 ; 2942 |
                            16862 ; 2943 |//$FILENAME settings_backlight_20s.src
                            16863 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            16864 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            16865 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            16866 ; 2947 |
                            16867 ; 2948 |//$FILENAME settings_backlight_30s.src
                            16868 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            16869 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            16870 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            16871 ; 2952 |
                            16872 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            16873 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            16874 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            16875 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            16876 ; 2957 |
                            16877 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            16878 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            16879 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            16880 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            16881 ; 2962 |
                            16882 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            16883 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            16884 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            16885 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            16886 ; 2967 |
                            16887 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            16888 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            16889 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            16890 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            16891 ; 2972 |
                            16892 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            16893 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            16894 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            16895 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            16896 ; 2977 |
                            16897 ; 2978 |//$FILENAME settings_languages_eng.src
                            16898 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            16899 ; 2980 |//$FILENAME settings_languages_vie.src
                            16900 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            16901 ; 2982 |
                            16902 ; 2983 |//$FILENAME fraction_dot.src
                            16903 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            16904 ; 2985 |
                            16905 ; 2986 |//$FILENAME fm_background.src
                            16906 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            16907 ; 2988 |//$FILENAME vie_fm_background.src
                            16908 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 285

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16909 ; 2990 |
                            16910 ; 2991 |//$FILENAME searching_please_wait.src
                            16911 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            16912 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            16913 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            16914 ; 2995 |
                            16915 ; 2996 |//$FILENAME fm_auto_search.src
                            16916 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            16917 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            16918 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                            16919 ; 3000 |
                            16920 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            16921 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            16922 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            16923 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            16924 ; 3005 |
                            16925 ; 3006 |#endif //IF (!@def(resources))
                            16926 ; 3007 |
                            16927 
                            16929 
                            16930 ; 6    |#include "sysresourceapi.h"
                            16931 
                            16933 
                            16934 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16935 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                            16936 ; 3    |//
                            16937 ; 4    |// File : SysResourceApi.h
                            16938 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                            16939 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16940 ; 7    |
                            16941 ; 8    |#ifndef __SysResourceApi_h__
                            16942 ; 9    |#define __SysResourceApi_h__ 1
                            16943 ; 10   |
                            16944 ; 11   |#include "types.h"
                            16945 
                            16947 
                            16948 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16949 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16950 ; 3    |//
                            16951 ; 4    |// Filename: types.h
                            16952 ; 5    |// Description: Standard data types
                            16953 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16954 ; 7    |
                            16955 ; 8    |#ifndef _TYPES_H
                            16956 ; 9    |#define _TYPES_H
                            16957 ; 10   |
                            16958 ; 11   |// TODO:  move this outta here!
                            16959 ; 12   |#if !defined(NOERROR)
                            16960 ; 13   |#define NOERROR 0
                            16961 ; 14   |#define SUCCESS 0
                            16962 ; 15   |#endif 
                            16963 ; 16   |#if !defined(SUCCESS)
                            16964 ; 17   |#define SUCCESS  0
                            16965 ; 18   |#endif
                            16966 ; 19   |#if !defined(ERROR)
                            16967 ; 20   |#define ERROR   -1
                            16968 ; 21   |#endif
                            16969 ; 22   |#if !defined(FALSE)
                            16970 ; 23   |#define FALSE 0
                            16971 ; 24   |#endif
                            16972 ; 25   |#if !defined(TRUE)
                            16973 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 286

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16974 ; 27   |#endif
                            16975 ; 28   |
                            16976 ; 29   |#if !defined(NULL)
                            16977 ; 30   |#define NULL 0
                            16978 ; 31   |#endif
                            16979 ; 32   |
                            16980 ; 33   |#define MAX_INT     0x7FFFFF
                            16981 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16982 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16983 ; 36   |#define MAX_ULONG   (-1) 
                            16984 ; 37   |
                            16985 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16986 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16987 ; 40   |
                            16988 ; 41   |
                            16989 ; 42   |#define BYTE    unsigned char       // btVarName
                            16990 ; 43   |#define CHAR    signed char         // cVarName
                            16991 ; 44   |#define USHORT  unsigned short      // usVarName
                            16992 ; 45   |#define SHORT   unsigned short      // sVarName
                            16993 ; 46   |#define WORD    unsigned int        // wVarName
                            16994 ; 47   |#define INT     signed int          // iVarName
                            16995 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16996 ; 49   |#define LONG    signed long         // lVarName
                            16997 ; 50   |#define BOOL    unsigned int        // bVarName
                            16998 ; 51   |#define FRACT   _fract              // frVarName
                            16999 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17000 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17001 ; 54   |#define FLOAT   float               // fVarName
                            17002 ; 55   |#define DBL     double              // dVarName
                            17003 ; 56   |#define ENUM    enum                // eVarName
                            17004 ; 57   |#define CMX     _complex            // cmxVarName
                            17005 ; 58   |typedef WORD UCS3;                   // 
                            17006 ; 59   |
                            17007 ; 60   |#define UINT16  unsigned short
                            17008 ; 61   |#define UINT8   unsigned char   
                            17009 ; 62   |#define UINT32  unsigned long
                            17010 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17011 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17012 ; 65   |#define WCHAR   UINT16
                            17013 ; 66   |
                            17014 ; 67   |//UINT128 is 16 bytes or 6 words
                            17015 ; 68   |typedef struct UINT128_3500 {   
                            17016 ; 69   |    int val[6];     
                            17017 ; 70   |} UINT128_3500;
                            17018 ; 71   |
                            17019 ; 72   |#define UINT128   UINT128_3500
                            17020 ; 73   |
                            17021 ; 74   |// Little endian word packed byte strings:   
                            17022 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17023 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17024 ; 77   |// Little endian word packed byte strings:   
                            17025 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17026 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17027 ; 80   |
                            17028 ; 81   |// Declare Memory Spaces To Use When Coding
                            17029 ; 82   |// A. Sector Buffers
                            17030 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17031 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17032 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17033 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 287

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17034 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17035 ; 88   |// B. Media DDI Memory
                            17036 ; 89   |#define MEDIA_DDI_MEM _Y
                            17037 ; 90   |
                            17038 ; 91   |
                            17039 ; 92   |
                            17040 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17041 ; 94   |// Examples of circular pointers:
                            17042 ; 95   |//    INT CIRC cpiVarName
                            17043 ; 96   |//    DWORD CIRC cpdwVarName
                            17044 ; 97   |
                            17045 ; 98   |#define RETCODE INT                 // rcVarName
                            17046 ; 99   |
                            17047 ; 100  |// generic bitfield structure
                            17048 ; 101  |struct Bitfield {
                            17049 ; 102  |    unsigned int B0  :1;
                            17050 ; 103  |    unsigned int B1  :1;
                            17051 ; 104  |    unsigned int B2  :1;
                            17052 ; 105  |    unsigned int B3  :1;
                            17053 ; 106  |    unsigned int B4  :1;
                            17054 ; 107  |    unsigned int B5  :1;
                            17055 ; 108  |    unsigned int B6  :1;
                            17056 ; 109  |    unsigned int B7  :1;
                            17057 ; 110  |    unsigned int B8  :1;
                            17058 ; 111  |    unsigned int B9  :1;
                            17059 ; 112  |    unsigned int B10 :1;
                            17060 ; 113  |    unsigned int B11 :1;
                            17061 ; 114  |    unsigned int B12 :1;
                            17062 ; 115  |    unsigned int B13 :1;
                            17063 ; 116  |    unsigned int B14 :1;
                            17064 ; 117  |    unsigned int B15 :1;
                            17065 ; 118  |    unsigned int B16 :1;
                            17066 ; 119  |    unsigned int B17 :1;
                            17067 ; 120  |    unsigned int B18 :1;
                            17068 ; 121  |    unsigned int B19 :1;
                            17069 ; 122  |    unsigned int B20 :1;
                            17070 ; 123  |    unsigned int B21 :1;
                            17071 ; 124  |    unsigned int B22 :1;
                            17072 ; 125  |    unsigned int B23 :1;
                            17073 ; 126  |};
                            17074 ; 127  |
                            17075 ; 128  |union BitInt {
                            17076 ; 129  |        struct Bitfield B;
                            17077 ; 130  |        int        I;
                            17078 ; 131  |};
                            17079 ; 132  |
                            17080 ; 133  |#define MAX_MSG_LENGTH 10
                            17081 ; 134  |struct CMessage
                            17082 ; 135  |{
                            17083 ; 136  |        unsigned int m_uLength;
                            17084 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17085 ; 138  |};
                            17086 ; 139  |
                            17087 ; 140  |typedef struct {
                            17088 ; 141  |    WORD m_wLength;
                            17089 ; 142  |    WORD m_wMessage;
                            17090 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17091 ; 144  |} Message;
                            17092 ; 145  |
                            17093 ; 146  |struct MessageQueueDescriptor
                            17094 ; 147  |{
                            17095 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 288

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17096 ; 149  |        int m_iModulo;
                            17097 ; 150  |        int m_iSize;
                            17098 ; 151  |        int *m_pHead;
                            17099 ; 152  |        int *m_pTail;
                            17100 ; 153  |};
                            17101 ; 154  |
                            17102 ; 155  |struct ModuleEntry
                            17103 ; 156  |{
                            17104 ; 157  |    int m_iSignaledEventMask;
                            17105 ; 158  |    int m_iWaitEventMask;
                            17106 ; 159  |    int m_iResourceOfCode;
                            17107 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17108 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            17109 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17110 ; 163  |    int m_uTimeOutHigh;
                            17111 ; 164  |    int m_uTimeOutLow;
                            17112 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17113 ; 166  |};
                            17114 ; 167  |
                            17115 ; 168  |union WaitMask{
                            17116 ; 169  |    struct B{
                            17117 ; 170  |        unsigned int m_bNone     :1;
                            17118 ; 171  |        unsigned int m_bMessage  :1;
                            17119 ; 172  |        unsigned int m_bTimer    :1;
                            17120 ; 173  |        unsigned int m_bButton   :1;
                            17121 ; 174  |    } B;
                            17122 ; 175  |    int I;
                            17123 ; 176  |} ;
                            17124 ; 177  |
                            17125 ; 178  |
                            17126 ; 179  |struct Button {
                            17127 ; 180  |        WORD wButtonEvent;
                            17128 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17129 ; 182  |};
                            17130 ; 183  |
                            17131 ; 184  |struct Message {
                            17132 ; 185  |        WORD wMsgLength;
                            17133 ; 186  |        WORD wMsgCommand;
                            17134 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17135 ; 188  |};
                            17136 ; 189  |
                            17137 ; 190  |union EventTypes {
                            17138 ; 191  |        struct CMessage msg;
                            17139 ; 192  |        struct Button Button ;
                            17140 ; 193  |        struct Message Message;
                            17141 ; 194  |};
                            17142 ; 195  |
                            17143 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17144 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17145 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17146 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17147 ; 200  |
                            17148 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17149 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17150 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17151 ; 204  |
                            17152 ; 205  |#if DEBUG
                            17153 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17154 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17155 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 289

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17156 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17157 ; 210  |#define DebugBuildAssert(x)    
                            17158 ; 211  |#endif
                            17159 ; 212  |
                            17160 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17161 ; 214  |//  #pragma asm
                            17162 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17163 ; 216  |//  #pragma endasm
                            17164 ; 217  |
                            17165 ; 218  |
                            17166 ; 219  |#ifdef COLOR_262K
                            17167 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17168 ; 221  |#elif defined(COLOR_65K)
                            17169 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17170 ; 223  |#else
                            17171 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17172 ; 225  |#endif
                            17173 ; 226  |    
                            17174 ; 227  |#endif // #ifndef _TYPES_H
                            17175 
                            17177 
                            17178 ; 12   |
                            17179 ; 13   |#define RSRC_TYPE_STRING                1
                            17180 ; 14   |#define RSRC_TYPE_DATA                  2
                            17181 ; 15   |#define RSRC_TYPE_BITMAP                3
                            17182 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                            17183 ; 17   |
                            17184 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                            17185 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                            17186 ; 20   |
                            17187 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                            17188 ; 22   |                                                        // from the root.
                            17189 ; 23   |
                            17190 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                            17191 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                            17192 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                            17193 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                            17194 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                            17195 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                            17196 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                            17197 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                            17198 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                            17199 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                            17200 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                            17201 ; 35   |
                            17202 ; 36   |#define TARGET_MEM_X                        0x800000
                            17203 ; 37   |#define TARGET_MEM_Y                        0x400000
                            17204 ; 38   |#define TARGET_MEM_L                        0x200000
                            17205 ; 39   |#define TARGET_MEM_P                        0x100000
                            17206 ; 40   |
                            17207 ; 41   |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 290

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17208 ; 42   |    WORD    wRscNumber;             // Nested resource number
                            17209 ; 43   |                                    // 0x00 = Root Resource
                            17210 ; 44   |                                    // 0xffff = Free Handle
                            17211 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                            17212 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                            17213 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                            17214 ; 48   |
                            17215 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                            17216 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                            17217 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                            17218 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                            17219 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                            17220 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                            17221 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                            17222 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                            17223 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                            17224 ; 58   |                   
                            17225 ; 59   |extern WORD wResourceTag;
                            17226 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                            17227 ; 61   |
                            17228 ; 62   |extern void EnterNonReentrantSection(void);
                            17229 ; 63   |extern void LeaveNonReentrantSection(void);
                            17230 ; 64   |
                            17231 ; 65   |#endif
                            17232 
                            17234 
                            17235 ; 7    |#include "displaydrv.h"
                            17236 
                            17238 
                            17239 ; 1    |///////////////////////////////////////////////////////////////////////////////
                            17240 ; 2    |///
                            17241 ; 3    |/// Filename: displaydrv.h
                            17242 ; 4    |/// Description: Prototypes for the display driver files.
                            17243 ; 5    |///
                            17244 ; 6    |///
                            17245 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                            17246 ; 8    |///
                            17247 ; 9    |/// SigmaTel, Inc.
                            17248 ; 10   |/// Proprietary  Confidential
                            17249 ; 11   |///
                            17250 ; 12   |/// This source code and the algorithms implemented therein constitute
                            17251 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                            17252 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                            17253 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                            17254 ; 16   |/// source code was originally received.
                            17255 ; 17   |///
                            17256 ; 18   |///////////////////////////////////////////////////////////////////////////////
                            17257 ; 19   |#ifndef __DISPLAY_H
                            17258 ; 20   |#define __DISPLAY_H
                            17259 ; 21   |
                            17260 ; 22   |#include "project.h"
                            17261 
                            17263 
                            17264 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            17265 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            17266 ; 3    |//  Filename: project.inc
                            17267 ; 4    |//  Description: 
                            17268 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            17269 ; 6    |
                            17270 ; 7    |#if (!defined(_PROJECT_INC))
                            17271 ; 8    |#define _PROJECT_INC 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 291

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17272 ; 9    |
                            17273 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            17274 ; 11   |#include "hwequ.h"
                            17275 ; 12   |#else 
                            17276 ; 13   |//include "regscodec.inc"
                            17277 ; 14   |#endif
                            17278 ; 15   |
                            17279 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            17280 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            17281 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            17282 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            17283 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            17284 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            17285 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            17286 ; 23   |
                            17287 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            17288 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            17289 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            17290 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            17291 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            17292 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            17293 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            17294 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            17295 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            17296 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            17297 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            17298 ; 35   |
                            17299 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            17300 ; 37   |// MEDIA DEFINITIONS
                            17301 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            17302 ; 39   |
                            17303 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            17304 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            17305 ; 42   |#if defined(NAND1)
                            17306 ; 43   |#define SM_INTERNAL_CHIPS 1
                            17307 ; 44   |#else 
                            17308 ; 45   |#if defined(NAND2)
                            17309 ; 46   |#define SM_INTERNAL_CHIPS 2
                            17310 ; 47   |#else 
                            17311 ; 48   |#if defined(NAND3)
                            17312 ; 49   |#define SM_INTERNAL_CHIPS 3
                            17313 ; 50   |#else 
                            17314 ; 51   |#if defined(NAND4)
                            17315 ; 52   |#define SM_INTERNAL_CHIPS 4
                            17316 ; 53   |#else 
                            17317 ; 54   |#define SM_INTERNAL_CHIPS 1
                            17318 ; 55   |#endif
                            17319 ; 56   |#endif
                            17320 ; 57   |#endif
                            17321 ; 58   |#endif
                            17322 ; 59   |
                            17323 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            17324 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 292

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17325 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            17326 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            17327 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            17328 ; 65   |//*** comment out if active high ****
                            17329 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            17330 ; 67   |
                            17331 ; 68   |#if defined(SMEDIA)
                            17332 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            17333 ; 70   |#define NUM_SM_EXTERNAL 1
                            17334 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            17335 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            17336 ; 73   |#else 
                            17337 ; 74   |#if defined(MMC)
                            17338 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            17339 ; 76   |#define NUM_SM_EXTERNAL 0
                            17340 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            17341 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            17342 ; 79   |#else 
                            17343 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            17344 ; 81   |#define NUM_SM_EXTERNAL 0
                            17345 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            17346 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            17347 ; 84   |#endif
                            17348 ; 85   |#endif
                            17349 ; 86   |
                            17350 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            17351 ; 88   |// Mass Storage Class definitions
                            17352 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            17353 ; 90   |// Set to 0 if Composite Device build is desired.    
                            17354 ; 91   |#define MULTI_LUN_BUILD 1   
                            17355 ; 92   |
                            17356 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            17357 ; 94   |//  SCSI
                            17358 ; 95   |#if (MULTI_LUN_BUILD==0)
                            17359 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            17360 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            17361 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            17362 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            17363 ; 100  |  #else
                            17364 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            17365 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            17366 ; 103  |  #endif
                            17367 ; 104  |#else
                            17368 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            17369 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            17370 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            17371 ; 108  |  #else
                            17372 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            17373 ; 110  |  #endif
                            17374 ; 111  |#endif
                            17375 ; 112  |
                            17376 ; 113  |
                            17377 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            17378 ; 115  |
                            17379 ; 116  |
                            17380 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            17381 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            17382 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            17383 ; 120  |#ifdef MMC
                            17384 ; 121  |#ifdef MTP_BUILD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 293

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17385 ; 122  |// --------------------
                            17386 ; 123  |// MTP and MMC
                            17387 ; 124  |// --------------------
                            17388 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            17389 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            17390 ; 127  |#else  // ifndef MTP_BUILD
                            17391 ; 128  |#ifdef STMP_BUILD_PLAYER
                            17392 ; 129  |// --------------------
                            17393 ; 130  |// Player and MMC
                            17394 ; 131  |// --------------------
                            17395 ; 132  |#else
                            17396 ; 133  |// --------------------
                            17397 ; 134  |// USBMSC and MMC
                            17398 ; 135  |// --------------------
                            17399 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            17400 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            17401 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            17402 ; 139  |#endif // ifdef MTP_BUILD
                            17403 ; 140  |#else  // ifndef MMC
                            17404 ; 141  |#ifdef MTP_BUILD
                            17405 ; 142  |// --------------------
                            17406 ; 143  |// MTP and NAND only
                            17407 ; 144  |// --------------------
                            17408 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            17409 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            17410 ; 147  |#else  // ifndef MTP_BUILD
                            17411 ; 148  |#ifdef STMP_BUILD_PLAYER
                            17412 ; 149  |// --------------------
                            17413 ; 150  |// Player and NAND only
                            17414 ; 151  |// --------------------
                            17415 ; 152  |#else
                            17416 ; 153  |// --------------------
                            17417 ; 154  |// USBMSC and NAND only
                            17418 ; 155  |// --------------------
                            17419 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            17420 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            17421 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            17422 ; 159  |#endif // ifdef MTP_BUILD
                            17423 ; 160  |#endif // ifdef MMC 
                            17424 ; 161  |
                            17425 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            17426 ; 163  |#if (defined(MTP_BUILD))
                            17427 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            17428 ; 165  |
                            17429 ; 166  |////!
                            17430 ; 167  |////! This varible holds the watchdog count for the store flush.
                            17431 ; 168  |////!
                            17432 ; 169  |///
                            17433 ; 170  |#include <types.h>
                            17434 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            17435 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            17436 ; 173  |#endif
                            17437 ; 174  |
                            17438 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            17439 ; 176  |// These are needed here for Mass Storage Class
                            17440 ; 177  |// Needs to be cleaned up
                            17441 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            17442 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            17443 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            17444 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            17445 ; 182  |
                            17446 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 294

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17447 ; 184  |
                            17448 ; 185  |#endif
                            17449 ; 186  |
                            17450 ; 187  |
                            17451 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            17452 ; 189  |// SmartMedia/NAND defs
                            17453 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            17454 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            17455 ; 192  |
                            17456 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            17457 ; 194  |// Sysloadresources defs
                            17458 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            17459 ; 196  |
                            17460 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            17461 ; 198  |// MMC defs
                            17462 ; 199  |#define MMC_MAX_PARTITIONS 1
                            17463 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            17464 ; 201  |
                            17465 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            17466 ; 203  |// SPI defs
                            17467 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            17468 ; 205  |
                            17469 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            17470 ; 207  |// Global media defs
                            17471 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            17472 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            17473 ; 210  |
                            17474 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            17475 ; 212  |// DO NOT CHANGE THESE!!!
                            17476 ; 213  |#define SM_MAX_PARTITIONS 4
                            17477 ; 214  |#define MAX_HANDLES 2
                            17478 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            17479 ; 216  |
                            17480 ; 217  |
                            17481 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            17482 ; 219  |// Battery LRADC Values 
                            17483 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            17484 ; 221  |// brownout trip point in mV (moved by RS)
                            17485 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            17486 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            17487 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            17488 ; 225  |//     audio recording to media.
                            17489 ; 226  |#define BATT_SAFETY_MARGIN 10
                            17490 ; 227  |
                            17491 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            17492 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            17493 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            17494 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            17495 ; 232  |
                            17496 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            17497 ; 234  |
                            17498 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            17499 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            17500 ; 237  |#if (!defined(CLCD))
                            17501 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            17502 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            17503 ; 240  |#else 
                            17504 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 295

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17505 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            17506 ; 243  |#endif
                            17507 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            17508 ; 245  |
                            17509 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            17510 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            17511 ; 248  |// See mp3 encoder overlay.
                            17512 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            17513 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            17514 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            17515 ; 252  |
                            17516 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            17517 ; 254  |// Voice recording filenames
                            17518 ; 255  |// number of digits in filename Vxxx.wav
                            17519 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            17520 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            17521 ; 258  |
                            17522 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            17523 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            17524 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            17525 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            17526 ; 263  |#if defined(DEVICE_3500)
                            17527 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            17528 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            17529 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            17530 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            17531 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            17532 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            17533 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            17534 ; 271  |
                            17535 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            17536 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            17537 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            17538 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            17539 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            17540 ; 277  |
                            17541 ; 278  |#else 
                            17542 ; 279  |// STMP3410
                            17543 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            17544 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            17545 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            17546 ; 283  |#endif
                            17547 ; 284  |
                            17548 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            17549 ; 286  |// Number of available soft timers
                            17550 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            17551 ; 288  |#if defined(SYNC_LYRICS)
                            17552 ; 289  |#define SOFT_TIMERS 10
                            17553 ; 290  |#else 
                            17554 ; 291  |#if defined(JPEG_DECODER)
                            17555 ; 292  |#define SOFT_TIMERS 10
                            17556 ; 293  |#else 
                            17557 ; 294  |#define SOFT_TIMERS 9
                            17558 ; 295  |#endif
                            17559 ; 296  |#endif
                            17560 ; 297  |
                            17561 ; 298  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 296

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17562 ; 299  |//  sizes
                            17563 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            17564 ; 301  |#if defined(MMC)
                            17565 ; 302  |#if defined(USE_PLAYLIST5)
                            17566 ; 303  |#define MENU_STACK_SIZE 1500
                            17567 ; 304  |#else 
                            17568 ; 305  |#define MENU_STACK_SIZE 1250
                            17569 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            17570 ; 307  |#else 
                            17571 ; 308  |#if defined(USE_PLAYLIST5)
                            17572 ; 309  |#define MENU_STACK_SIZE 1500
                            17573 ; 310  |#else 
                            17574 ; 311  |#define MENU_STACK_SIZE 1250
                            17575 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            17576 ; 313  |#endif //if @def('MMC')
                            17577 ; 314  |
                            17578 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            17579 ; 316  |// 
                            17580 ; 317  |#define STACK_L1_SIZE 750
                            17581 ; 318  |#define STACK_L2_SIZE 100
                            17582 ; 319  |#define STACK_L3_SIZE 160
                            17583 ; 320  |
                            17584 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            17585 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            17586 ; 323  |// is ok with switching code.
                            17587 ; 324  |#if defined(MTP_BUILD)
                            17588 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            17589 ; 326  |#endif
                            17590 ; 327  |
                            17591 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            17592 ; 329  |// maximum number of nested funclets 
                            17593 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            17594 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            17595 ; 332  |
                            17596 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            17597 ; 334  |//    LCD DEFINITIONS
                            17598 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            17599 ; 336  |
                            17600 ; 337  |#define SPACE_CHAR 0x000020          
                            17601 ; 338  |#define ZERO_CHAR 0x000030
                            17602 ; 339  |#define COLON_CHAR 0x00003A
                            17603 ; 340  |#define PERIOD_CHAR 0x00002E
                            17604 ; 341  |
                            17605 ; 342  |#if (defined(S6B33B0A_LCD))
                            17606 ; 343  |#define LCD_X_SIZE 128
                            17607 ; 344  |#define LCD_Y_SIZE 159
                            17608 ; 345  |#endif
                            17609 ; 346  |
                            17610 ; 347  |#if (defined(SED15XX_LCD))
                            17611 ; 348  |#define LCD_X_SIZE 128
                            17612 ; 349  |#define LCD_Y_SIZE 64
                            17613 ; 350  |#endif
                            17614 ; 351  |
                            17615 ; 352  |
                            17616 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            17617 ; 354  |//   Details on Customizing Contrast
                            17618 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            17619 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            17620 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            17621 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            17622 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 297

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17623 ; 360  |//   unless the ezact sequence is remembered.
                            17624 ; 361  |//   To find out what range your player supports: 
                            17625 ; 362  |//   change these equs to full range or comment out (full range is default)
                            17626 ; 363  |//;;;;;;
                            17627 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            17628 ; 365  |// recommended calibration using player -- uncomment 
                            17629 ; 366  |//;;;;;;
                            17630 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            17631 ; 368  |////////////////////////////
                            17632 ; 369  |#if (defined(DEMO_HW))
                            17633 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            17634 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            17635 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            17636 ; 373  |#else 
                            17637 ; 374  |
                            17638 ; 375  |#if (defined(S6B33B0A_LCD))
                            17639 ; 376  |#define LCD_MAX_CONTRAST 210
                            17640 ; 377  |#define LCD_MIN_CONTRAST 160    
                            17641 ; 378  |#endif
                            17642 ; 379  |
                            17643 ; 380  |#if (defined(SED15XX_LCD))
                            17644 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            17645 ; 382  |// Engineering board regs support range [17-37].
                            17646 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            17647 ; 384  |//   One default contrast range [24-42] works for both.
                            17648 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            17649 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            17650 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            17651 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            17652 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            17653 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            17654 ; 391  |
                            17655 ; 392  |#if (defined(NEWSHINGYIH))
                            17656 ; 393  |#define LCD_MAX_CONTRAST 250
                            17657 ; 394  |#define LCD_MIN_CONTRAST 0
                            17658 ; 395  |#else 
                            17659 ; 396  |//-----
                            17660 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            17661 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            17662 ; 399  |#define LCD_MAX_CONTRAST 250
                            17663 ; 400  |#define LCD_MIN_CONTRAST 0
                            17664 ; 401  |
                            17665 ; 402  |//=====
                            17666 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            17667 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            17668 ; 405  |//LCD_MAX_CONTRAST equ 42
                            17669 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            17670 ; 407  |
                            17671 ; 408  |#endif
                            17672 ; 409  |#endif
                            17673 ; 410  |
                            17674 ; 411  |#endif
                            17675 ; 412  |
                            17676 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            17677 ; 414  |// The default value of the lcd contrast in % of range
                            17678 ; 415  |//   the default value is used when no settings.dat is available
                            17679 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            17680 ; 417  |
                            17681 ; 418  |#if (defined(S6B33B0A_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 298

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17682 ; 419  |// 60% of range is default value
                            17683 ; 420  |#define DEFAULT_CONTRAST 50 
                            17684 ; 421  |#endif
                            17685 ; 422  |
                            17686 ; 423  |#if (defined(SED15XX_LCD))
                            17687 ; 424  |// % of range is default value (was 60%)
                            17688 ; 425  |#define DEFAULT_CONTRAST 50 
                            17689 ; 426  |#endif
                            17690 ; 427  |
                            17691 ; 428  |
                            17692 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            17693 ; 430  |// make lower when doing calibration
                            17694 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            17695 ; 432  |
                            17696 ; 433  |
                            17697 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            17698 ; 435  |// For FFWD and RWND
                            17699 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            17700 ; 437  |#define SECONDS_TO_SKIP 1
                            17701 ; 438  |#define SECONDS_TO_SKIP1 3
                            17702 ; 439  |#define SECONDS_TO_SKIP2 6
                            17703 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            17704 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            17705 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17706 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            17707 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17708 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            17709 ; 446  |
                            17710 ; 447  |// For audible FFW/RWD
                            17711 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            17712 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            17713 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            17714 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            17715 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17716 ; 453  |#define LEVEL1_BOUNDARY 17 
                            17717 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17718 ; 455  |#define LEVEL2_BOUNDARY 33 
                            17719 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17720 ; 457  |#define LEVEL3_BOUNDARY 50 
                            17721 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            17722 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            17723 ; 460  |// Short Song Time, songs too short to play.
                            17724 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            17725 ; 462  |
                            17726 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            17727 ; 464  |// MP3 Sync Values
                            17728 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            17729 ; 466  |// # bytes to look for sync before marking it bad
                            17730 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            17731 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            17732 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            17733 ; 470  |// once we have sync'd, the isr should be called this frequently
                            17734 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            17735 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            17736 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            17737 ; 474  |
                            17738 ; 475  |
                            17739 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            17740 ; 477  |//// Multi-Stage Volume Control Definitions
                            17741 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            17742 ; 479  |//// Use Multi-Stage Volume
                            17743 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 299

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17744 ; 481  |
                            17745 ; 482  |//// Master Volume definitions
                            17746 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            17747 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            17748 ; 485  |
                            17749 ; 486  |//// DAC-Mode definitions
                            17750 ; 487  |//// Adjusts 0dB point
                            17751 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            17752 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            17753 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            17754 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            17755 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            17756 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            17757 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            17758 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            17759 ; 496  |
                            17760 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            17761 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            17762 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            17763 ; 500  |
                            17764 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            17765 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            17766 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            17767 ; 504  |
                            17768 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            17769 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            17770 ; 507  |
                            17771 ; 508  |
                            17772 ; 509  |//// Line In definitions (used for Line-In 1)
                            17773 ; 510  |//// 0dB point of the Line In
                            17774 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            17775 ; 512  |//// Minimum volume of Line In
                            17776 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            17777 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            17778 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            17779 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            17780 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            17781 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            17782 ; 519  |
                            17783 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            17784 ; 521  |//// 0dB point of the Line In
                            17785 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            17786 ; 523  |//// Minimum volume of Line In
                            17787 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            17788 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            17789 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            17790 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            17791 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            17792 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            17793 ; 530  |
                            17794 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            17795 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            17796 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 300

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17797 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            17798 ; 535  |
                            17799 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            17800 ; 537  |////
                            17801 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            17802 ; 539  |////
                            17803 ; 540  |///
                            17804 ; 541  |#include <types.h>
                            17805 ; 542  |extern volatile WORD g_wActivityState;
                            17806 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            17807 ; 544  |
                            17808 ; 545  |void _reentrant Init5VSense(void);
                            17809 ; 546  |void _reentrant ServiceDCDC(void);
                            17810 ; 547  |
                            17811 ; 548  |////////////////////////////////////////////////////////////////////////////
                            17812 ; 549  |//// JPEG Thumbnail Mode Setting
                            17813 ; 550  |//// number of column in thumbnail mode
                            17814 ; 551  |#define THUMBNAIL_X 2           
                            17815 ; 552  |//// number of row in  thumbnail mode
                            17816 ; 553  |#define THUMBNAIL_Y 2           
                            17817 ; 554  |//// thumbnail boundary offset x
                            17818 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            17819 ; 556  |//// thumbnail boundary offset y
                            17820 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            17821 ; 558  |
                            17822 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            17823 ; 560  |
                            17824 
                            17826 
                            17827 ; 23   |
                            17828 ; 24   |#define MAX_BITMAP_SIZE 10000
                            17829 ; 25   |
                            17830 ; 26   |//comment this out to put the frame buffer in Y
                            17831 ; 27   |
                            17832 ; 28   |#ifndef LCD_X_SIZE     
                            17833 ; 29   |#define LCD_X_SIZE          98
                            17834 ; 30   |#endif
                            17835 ; 31   |
                            17836 ; 32   |#ifndef LCD_Y_SIZE
                            17837 ; 33   |#define LCD_Y_SIZE          64
                            17838 ; 34   |#endif
                            17839 ; 35   |
                            17840 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                            17841 ; 37   |
                            17842 ; 38   |typedef union
                            17843 ; 39   |{
                            17844 ; 40   |    struct
                            17845 ; 41   |    {
                            17846 ; 42   |        INT m_Resource:21;
                            17847 ; 43   |        INT m_Type :3;
                            17848 ; 44   |    } Complex;
                            17849 ; 45   |    WORD I;
                            17850 ; 46   |} COMPLEX_RESOURCE;
                            17851 ; 47   |
                            17852 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                            17853 ; 49   |#define RESOURCE_TYPE_NESTED    1
                            17854 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                            17855 ; 51   |
                            17856 ; 52   |
                            17857 ; 53   |typedef struct 
                            17858 ; 54   |{
                            17859 ; 55   |    INT m_iMaskLeft;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 301

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17860 ; 56   |    INT m_iMaskTop;
                            17861 ; 57   |    INT m_iMaskRight;
                            17862 ; 58   |    INT m_iMaskBottom;
                            17863 ; 59   |}   MASK;
                            17864 ; 60   |
                            17865 ; 61   |typedef struct 
                            17866 ; 62   |{
                            17867 ; 63   |    INT m_iWidth;
                            17868 ; 64   |    INT m_iHeight;
                            17869 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                            17870 ; 66   |} BITMAP;
                            17871 ; 67   |
                            17872 ; 68   |
                            17873 ; 69   |typedef struct 
                            17874 ; 70   |{
                            17875 ; 71   |    INT m_iWidth;
                            17876 ; 72   |    INT m_iHeight;
                            17877 ; 73   |} BITMAPHEADER;
                            17878 ; 74   |
                            17879 ; 75   |#define DISPLAY_NORMAL  0
                            17880 ; 76   |#define DISPLAY_INVERT  1
                            17881 ; 77   |#define DISPLAY_CLEAR   2 
                            17882 ; 78   |
                            17883 ; 79   |void _reentrant DisplayInit(void);
                            17884 
                            17891 
                            17892 ; 80   |
                            17893 ; 81   |
                            17894 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                            17895 ; 83   |
                            17896 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                            17897 ; 85   |
                            17898 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                            17899 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            17900 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            17901 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                            17902 ; 90   |_reentrant void DisplaySetFont(INT);
                            17903 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                            17904 
                            17911 
                            17912 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                            17913 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                            17914 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                            17915 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                            17916 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                            17917 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                            17918 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                            17919 ; 99   |
                            17920 ; 100  |
                            17921 ; 101  |#endif
                            17922 
                            17924 
                            17925 ; 8    |#include "..\displaydriver.h"
                            17926 
                            17928 
                            17929 ; 1    |#ifndef _DISPLAY_DRIVER_H
                            17930 ; 2    |#define _DISPLAY_DRIVER_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 302

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17931 ; 3    |
                            17932 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                            17933 ; 5    |#include "types.h"
                            17934 
                            17936 
                            17937 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17938 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17939 ; 3    |//
                            17940 ; 4    |// Filename: types.h
                            17941 ; 5    |// Description: Standard data types
                            17942 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17943 ; 7    |
                            17944 ; 8    |#ifndef _TYPES_H
                            17945 ; 9    |#define _TYPES_H
                            17946 ; 10   |
                            17947 ; 11   |// TODO:  move this outta here!
                            17948 ; 12   |#if !defined(NOERROR)
                            17949 ; 13   |#define NOERROR 0
                            17950 ; 14   |#define SUCCESS 0
                            17951 ; 15   |#endif 
                            17952 ; 16   |#if !defined(SUCCESS)
                            17953 ; 17   |#define SUCCESS  0
                            17954 ; 18   |#endif
                            17955 ; 19   |#if !defined(ERROR)
                            17956 ; 20   |#define ERROR   -1
                            17957 ; 21   |#endif
                            17958 ; 22   |#if !defined(FALSE)
                            17959 ; 23   |#define FALSE 0
                            17960 ; 24   |#endif
                            17961 ; 25   |#if !defined(TRUE)
                            17962 ; 26   |#define TRUE  1
                            17963 ; 27   |#endif
                            17964 ; 28   |
                            17965 ; 29   |#if !defined(NULL)
                            17966 ; 30   |#define NULL 0
                            17967 ; 31   |#endif
                            17968 ; 32   |
                            17969 ; 33   |#define MAX_INT     0x7FFFFF
                            17970 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17971 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17972 ; 36   |#define MAX_ULONG   (-1) 
                            17973 ; 37   |
                            17974 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17975 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17976 ; 40   |
                            17977 ; 41   |
                            17978 ; 42   |#define BYTE    unsigned char       // btVarName
                            17979 ; 43   |#define CHAR    signed char         // cVarName
                            17980 ; 44   |#define USHORT  unsigned short      // usVarName
                            17981 ; 45   |#define SHORT   unsigned short      // sVarName
                            17982 ; 46   |#define WORD    unsigned int        // wVarName
                            17983 ; 47   |#define INT     signed int          // iVarName
                            17984 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17985 ; 49   |#define LONG    signed long         // lVarName
                            17986 ; 50   |#define BOOL    unsigned int        // bVarName
                            17987 ; 51   |#define FRACT   _fract              // frVarName
                            17988 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17989 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17990 ; 54   |#define FLOAT   float               // fVarName
                            17991 ; 55   |#define DBL     double              // dVarName
                            17992 ; 56   |#define ENUM    enum                // eVarName
                            17993 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 303

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17994 ; 58   |typedef WORD UCS3;                   // 
                            17995 ; 59   |
                            17996 ; 60   |#define UINT16  unsigned short
                            17997 ; 61   |#define UINT8   unsigned char   
                            17998 ; 62   |#define UINT32  unsigned long
                            17999 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18000 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18001 ; 65   |#define WCHAR   UINT16
                            18002 ; 66   |
                            18003 ; 67   |//UINT128 is 16 bytes or 6 words
                            18004 ; 68   |typedef struct UINT128_3500 {   
                            18005 ; 69   |    int val[6];     
                            18006 ; 70   |} UINT128_3500;
                            18007 ; 71   |
                            18008 ; 72   |#define UINT128   UINT128_3500
                            18009 ; 73   |
                            18010 ; 74   |// Little endian word packed byte strings:   
                            18011 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18012 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18013 ; 77   |// Little endian word packed byte strings:   
                            18014 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18015 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18016 ; 80   |
                            18017 ; 81   |// Declare Memory Spaces To Use When Coding
                            18018 ; 82   |// A. Sector Buffers
                            18019 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            18020 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            18021 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            18022 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            18023 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            18024 ; 88   |// B. Media DDI Memory
                            18025 ; 89   |#define MEDIA_DDI_MEM _Y
                            18026 ; 90   |
                            18027 ; 91   |
                            18028 ; 92   |
                            18029 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            18030 ; 94   |// Examples of circular pointers:
                            18031 ; 95   |//    INT CIRC cpiVarName
                            18032 ; 96   |//    DWORD CIRC cpdwVarName
                            18033 ; 97   |
                            18034 ; 98   |#define RETCODE INT                 // rcVarName
                            18035 ; 99   |
                            18036 ; 100  |// generic bitfield structure
                            18037 ; 101  |struct Bitfield {
                            18038 ; 102  |    unsigned int B0  :1;
                            18039 ; 103  |    unsigned int B1  :1;
                            18040 ; 104  |    unsigned int B2  :1;
                            18041 ; 105  |    unsigned int B3  :1;
                            18042 ; 106  |    unsigned int B4  :1;
                            18043 ; 107  |    unsigned int B5  :1;
                            18044 ; 108  |    unsigned int B6  :1;
                            18045 ; 109  |    unsigned int B7  :1;
                            18046 ; 110  |    unsigned int B8  :1;
                            18047 ; 111  |    unsigned int B9  :1;
                            18048 ; 112  |    unsigned int B10 :1;
                            18049 ; 113  |    unsigned int B11 :1;
                            18050 ; 114  |    unsigned int B12 :1;
                            18051 ; 115  |    unsigned int B13 :1;
                            18052 ; 116  |    unsigned int B14 :1;
                            18053 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 304

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18054 ; 118  |    unsigned int B16 :1;
                            18055 ; 119  |    unsigned int B17 :1;
                            18056 ; 120  |    unsigned int B18 :1;
                            18057 ; 121  |    unsigned int B19 :1;
                            18058 ; 122  |    unsigned int B20 :1;
                            18059 ; 123  |    unsigned int B21 :1;
                            18060 ; 124  |    unsigned int B22 :1;
                            18061 ; 125  |    unsigned int B23 :1;
                            18062 ; 126  |};
                            18063 ; 127  |
                            18064 ; 128  |union BitInt {
                            18065 ; 129  |        struct Bitfield B;
                            18066 ; 130  |        int        I;
                            18067 ; 131  |};
                            18068 ; 132  |
                            18069 ; 133  |#define MAX_MSG_LENGTH 10
                            18070 ; 134  |struct CMessage
                            18071 ; 135  |{
                            18072 ; 136  |        unsigned int m_uLength;
                            18073 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            18074 ; 138  |};
                            18075 ; 139  |
                            18076 ; 140  |typedef struct {
                            18077 ; 141  |    WORD m_wLength;
                            18078 ; 142  |    WORD m_wMessage;
                            18079 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18080 ; 144  |} Message;
                            18081 ; 145  |
                            18082 ; 146  |struct MessageQueueDescriptor
                            18083 ; 147  |{
                            18084 ; 148  |        int *m_pBase;
                            18085 ; 149  |        int m_iModulo;
                            18086 ; 150  |        int m_iSize;
                            18087 ; 151  |        int *m_pHead;
                            18088 ; 152  |        int *m_pTail;
                            18089 ; 153  |};
                            18090 ; 154  |
                            18091 ; 155  |struct ModuleEntry
                            18092 ; 156  |{
                            18093 ; 157  |    int m_iSignaledEventMask;
                            18094 ; 158  |    int m_iWaitEventMask;
                            18095 ; 159  |    int m_iResourceOfCode;
                            18096 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18097 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            18098 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18099 ; 163  |    int m_uTimeOutHigh;
                            18100 ; 164  |    int m_uTimeOutLow;
                            18101 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18102 ; 166  |};
                            18103 ; 167  |
                            18104 ; 168  |union WaitMask{
                            18105 ; 169  |    struct B{
                            18106 ; 170  |        unsigned int m_bNone     :1;
                            18107 ; 171  |        unsigned int m_bMessage  :1;
                            18108 ; 172  |        unsigned int m_bTimer    :1;
                            18109 ; 173  |        unsigned int m_bButton   :1;
                            18110 ; 174  |    } B;
                            18111 ; 175  |    int I;
                            18112 ; 176  |} ;
                            18113 ; 177  |
                            18114 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 305

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18115 ; 179  |struct Button {
                            18116 ; 180  |        WORD wButtonEvent;
                            18117 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18118 ; 182  |};
                            18119 ; 183  |
                            18120 ; 184  |struct Message {
                            18121 ; 185  |        WORD wMsgLength;
                            18122 ; 186  |        WORD wMsgCommand;
                            18123 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18124 ; 188  |};
                            18125 ; 189  |
                            18126 ; 190  |union EventTypes {
                            18127 ; 191  |        struct CMessage msg;
                            18128 ; 192  |        struct Button Button ;
                            18129 ; 193  |        struct Message Message;
                            18130 ; 194  |};
                            18131 ; 195  |
                            18132 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18133 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18134 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18135 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18136 ; 200  |
                            18137 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18138 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18139 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18140 ; 204  |
                            18141 ; 205  |#if DEBUG
                            18142 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18143 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18144 ; 208  |#else 
                            18145 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            18146 ; 210  |#define DebugBuildAssert(x)    
                            18147 ; 211  |#endif
                            18148 ; 212  |
                            18149 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18150 ; 214  |//  #pragma asm
                            18151 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18152 ; 216  |//  #pragma endasm
                            18153 ; 217  |
                            18154 ; 218  |
                            18155 ; 219  |#ifdef COLOR_262K
                            18156 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            18157 ; 221  |#elif defined(COLOR_65K)
                            18158 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            18159 ; 223  |#else
                            18160 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            18161 ; 225  |#endif
                            18162 ; 226  |    
                            18163 ; 227  |#endif // #ifndef _TYPES_H
                            18164 
                            18166 
                            18167 ; 6    |
                            18168 ; 7    |_reentrant void HALDisplayInit(void);
                            18169 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                            18170 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                            18171 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                            18172 ; 11   |_reentrant void HALDisplayDecContrast(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 306

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18173 ; 12   |_reentrant void HALDisplayIncContrast(void);
                            18174 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                            18175 ; 14   |
                            18176 ; 15   |
                            18177 ; 16   |
                            18178 ; 17   |
                            18179 ; 18   |#endif
                            18180 
                            18182 
                            18183 ; 9    |#include "SED15xx.h"
                            18184 
                            18186 
                            18187 ; 1    |#ifndef SED15xx_H
                            18188 ; 2    |#define SED15xx_H
                            18189 ; 3    |
                            18190 ; 4    |//DanhNguyen reviews: For X8iTF OLED LCD
                            18191 ; 5    |
                            18192 ; 6    |//USBSUSPEND GPIO37
                            18193 ; 7    |#ifndef USB_SUSPEND_GPD0
                            18194 ; 8    |#define USB_SUSPEND_GPDO      HW_GP1DOR.B.B13
                            18195 ; 9    |#define USB_SUSPEND_GPDOE     HW_GP1DOER.B.B13
                            18196 ; 10   |#define USB_SUSPEND_GPEN      HW_GP1ENR.B.B13
                            18197 ; 11   |#define USB_SUSPEND_GPPWR     HW_GP1PWR.B.B13
                            18198 ; 12   |#endif 
                            18199 ; 13   |
                            18200 ; 14   |//GPIO42 control PWRON pin of ltc345
                            18201 ; 15   |#ifndef PWR_ON_GPD0
                            18202 ; 16   |#define PWR_ON_GPDO      HW_GP1DOR.B.B18
                            18203 ; 17   |#define PWR_ON_GPDOE     HW_GP1DOER.B.B18
                            18204 ; 18   |#define PWR_ON_GPEN      HW_GP1ENR.B.B18
                            18205 ; 19   |#define PWR_ON_GPPWR     HW_GP1PWR.B.B18
                            18206 ; 20   |#endif 
                            18207 ; 21   |
                            18208 ; 22   |#ifndef LCD_BL_GPDO
                            18209 ; 23   |#define LCD_BL_GPDO         HW_GP1DOER.B.B15
                            18210 ; 24   |#define LCD_BL_GPDOE        HW_GP1DOER.B.B15
                            18211 ; 25   |#define LCD_BL_GPPWR        HW_GP1PWR.B.B15
                            18212 ; 26   |#define LCD_BL_GPEN         HW_GP1ENR.B.B15
                            18213 ; 27   |#endif  //LCD_command/data_select
                            18214 ; 28   |
                            18215 ; 29   |//GPIO39 turn on off VCC oled
                            18216 ; 30   |#ifndef LCD_VCC_GPDO
                            18217 ; 31   |#define LCD_VCC_GPDO      HW_GP1DOR.B.B15
                            18218 ; 32   |#define LCD_VCC_GPDOE     HW_GP1DOER.B.B15
                            18219 ; 33   |#define LCD_VCC_GPEN      HW_GP1ENR.B.B15
                            18220 ; 34   |#define LCD_VCC_GPPWR     HW_GP1PWR.B.B15
                            18221 ; 35   |#endif
                            18222 ; 36   |
                            18223 ; 37   |#ifndef LCD_RESET_GPDO
                            18224 ; 38   |#define LCD_RESET_GPDO      HW_GP1DOR.B.B20
                            18225 ; 39   |#define LCD_RESET_GPDOE     HW_GP1DOER.B.B20
                            18226 ; 40   |#define LCD_RESET_GPEN      HW_GP1ENR.B.B20
                            18227 ; 41   |#define LCD_RESET_GPPWR     HW_GP1PWR.B.B20
                            18228 ; 42   |#endif 
                            18229 ; 43   |
                            18230 ; 44   |#ifndef LCD_RDE_GPD0
                            18231 ; 45   |#define LCD_RDE_GPDO        HW_GP0DOR.B.B11
                            18232 ; 46   |#define LCD_RDE_GPDOE       HW_GP0DOER.B.B11
                            18233 ; 47   |#define LCD_RDE_GPEN        HW_GP0ENR.B.B11
                            18234 ; 48   |#define LCD_RDE_GPPWR       HW_GP0PWR.B.B11
                            18235 ; 49   |#endif
                            18236 ; 50   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 307

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18237 ; 51   |
                            18238 ; 52   |#ifndef LCD_CS1_GPDO         
                            18239 ; 53   |#define LCD_CS1_GPDO         HW_GP0DOR.B.B8
                            18240 ; 54   |#define LCD_CS1_GPDOE        HW_GP0DOER.B.B8
                            18241 ; 55   |#define LCD_CS1_GPEN         HW_GP0ENR.B.B8
                            18242 ; 56   |#define LCD_CS1_GPPWR        HW_GP0PWR.B.B8
                            18243 ; 57   |#endif
                            18244 ; 58   |
                            18245 ; 59   |#ifndef LCD_RW_GPDO
                            18246 ; 60   |#define LCD_RW_GPDO         HW_GP0DOER.B.B9
                            18247 ; 61   |#define LCD_RW_GPDOE        HW_GP0DOER.B.B9
                            18248 ; 62   |#define LCD_RW_GPPWR        HW_GP0PWR.B.B9
                            18249 ; 63   |#define LCD_RW_GPEN         HW_GP0ENR.B.B9
                            18250 ; 64   |#endif
                            18251 ; 65   |
                            18252 ; 66   |
                            18253 ; 67   |#ifndef LCD_DC_GPDO
                            18254 ; 68   |#define LCD_DC_GPDO         HW_GP0DOR.B.B10
                            18255 ; 69   |#define LCD_DC_GPDOE        HW_GP0DOER.B.B10
                            18256 ; 70   |#define LCD_DC_GPPWR        HW_GP0PWR.B.B10
                            18257 ; 71   |#define LCD_DC_GPEN         HW_GP0ENR.B.B10
                            18258 ; 72   |#endif
                            18259 ; 73   |
                            18260 ; 74   |// LCD_D0   GPIO_19
                            18261 ; 75   |#ifndef LCD_DATA_D00 
                            18262 ; 76   |#define LCD_DATA_D00           HW_GP0DOR.B.B19
                            18263 ; 77   |#define LCD_DATA_D00_GPDOE     HW_GP0DOER.B.B19
                            18264 ; 78   |#define LCD_DATA_D00_GPEN      HW_GP0ENR.B.B19
                            18265 ; 79   |#define LCD_DATA_D00_GPPWR     HW_GP0PWR.B.B19
                            18266 ; 80   |#endif
                            18267 ; 81   |
                            18268 ; 82   |// LCD_D3   GPIO_33
                            18269 ; 83   |#ifndef LCD_DATA_D03 
                            18270 ; 84   |#define LCD_DATA_D03           HW_GP1DOR.B.B9
                            18271 ; 85   |#define LCD_DATA_D03_GPDOE     HW_GP1DOER.B.B9
                            18272 ; 86   |#define LCD_DATA_D03_GPEN      HW_GP1ENR.B.B9
                            18273 ; 87   |#define LCD_DATA_D03_GPPWR     HW_GP1PWR.B.B9
                            18274 ; 88   |#endif
                            18275 ; 89   |
                            18276 ; 90   |// LCD_D4   GPIO_51
                            18277 ; 91   |#ifndef LCD_DATA_D04 
                            18278 ; 92   |#define LCD_DATA_D04           HW_GP2DOR.B.B3
                            18279 ; 93   |#define LCD_DATA_D04_GPDOE     HW_GP2DOER.B.B3
                            18280 ; 94   |#define LCD_DATA_D04_GPEN      HW_GP2ENR.B.B3
                            18281 ; 95   |#define LCD_DATA_D04_GPPWR     HW_GP2PWR.B.B3
                            18282 ; 96   |#endif
                            18283 ; 97   |
                            18284 ; 98   |
                            18285 ; 99   |#ifndef LCD_MIN_CONTRAST
                            18286 ; 100  |#define LCD_MIN_CONTRAST 0
                            18287 ; 101  |#endif
                            18288 ; 102  |
                            18289 ; 103  |#ifndef LCD_MAX_CONTRAST
                            18290 ; 104  |#define LCD_MAX_CONTRAST  250
                            18291 ; 105  |#endif
                            18292 ; 106  |
                            18293 ; 107  |#ifndef LCD_STEPSIZE_CONTRAST
                            18294 ; 108  |#define LCD_STEPSIZE_CONTRAST 20
                            18295 ; 109  |#endif
                            18296 ; 110  |
                            18297 ; 111  |#ifndef DEFAULT_CONTRAST
                            18298 ; 112  |#define DEFAULT_CONTRAST 80
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 308

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18299 ; 113  |#endif
                            18300 ; 114  |
                            18301 ; 115  |
                            18302 ; 116  |typedef union               /* GPIO Pin Register Bank 0 */
                            18303 ; 117  |{
                            18304 ; 118  |    struct {
                            18305 ; 119  |        WORD Data  :8;
                            18306 ; 120  |        WORD Reserved  :16;
                            18307 ; 121  |    } B;
                            18308 ; 122  |    int I;
                            18309 ; 123  |} LCDgpr_type;
                            18310 ; 124  |
                            18311 ; 125  |#define CMD_SET_LOWER_COLUMN_ADDRESS(x)     (x&0xf)
                            18312 ; 126  |#define CMD_SET_HIGHER_COLUMN_ADDRESS(x)    0x10|((x>>4)&0xf)
                            18313 ; 127  |#define CMD_SET_PAGE_ADDRESS(x)             0xb0|(x&0xf)
                            18314 ; 128  |#define CMD_SET_CONTRAST                    0x81
                            18315 ; 129  |
                            18316 ; 130  |#ifndef LCD_DATA_DO
                            18317 ; 131  |#define LCD_DATA_DO      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)).B.D
                                  ata
                            18318 ; 132  |#define LCD_DATA_DOE     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)).B.
                                  Data
                            18319 ; 133  |#define LCD_DATA_EN      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR)).B.D
                                  ata
                            18320 ; 134  |#define LCD_DATA_PWR     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)).B.D
                                  ata
                            18321 ; 135  |#endif
                            18322 ; 136  |
                            18323 ; 137  |#define _MultiNop() _nop();_nop();_nop()
                            18324 ; 138  |
                            18325 ; 139  |extern INT  g_iContrastPercentage;  // default contrast 50% if settings.dat is not present
                                  
                            18326 ; 140  |
                            18327 ; 141  |#endif
                            18328 
                            18330 
                            18331 ; 10   |
                            18332 ; 11   |#pragma optimize 1
                            18334 ; 12   |
                            18335 ; 13   |#if  FRAMEBUFFER_MEMORY_SPACE==TARGET_MEM_X
                            18336 ; 14   |#define GetByteFromArray GetByteFromArrayInX
                            18337 ; 15   |#else
                            18338 ; 16   |#define GetByteFromArray GetByteFromArrayInY
                            18339 ; 17   |#endif
                            18340 ; 18   |
                            18341 ; 19   |
                            18342 ; 20   |
                            18343 ; 21   |_asmfunc GetByteFromArray(WORD iIndex, WORD *pBuffer);
                            18344 ; 22   |WORD _reentrant DisplayGetContrast(void);
                            18345 ; 23   |
                            18346 ; 24   |        INT  gTUNER_STFM1000;
                            18347 ; 25   |
                            18348 ; 26   |_reentrant void HALDisplaySendCommand(WORD wCommand)
                            18349 ; 27   |{
                            18350 
P:0000                      18351         org     p,".ptextsed15xx":
                            18419 FHALDisplaySendCommand:
                            18422 
                            18423 ; 28   |    //set up the data to go out
                            18424 ; 29   |
                            18425 ; 30   |    LCD_DC_GPDO = FALSE;        //This is command mode
                            18426 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 309

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18429 
                            18430 ; 31   |    _MultiNop();
                            18431 
P:0000 0A700A 00F401  6    618428         bclr    #10,x:$F401
P:0002 000000         2    818434         nop
P:0003 000000         2   1018435         nop
P:0004 000000         2   1218436         nop
                            18437 
                            18438 ; 32   |    LCD_RDE_GPDO = TRUE;        
                            18439 
                            18442 
                            18443 ; 33   |    _MultiNop();    
                            18444 
P:0005 0A702B 00F401  6   1818441         bset    #11,x:$F401
P:0007 000000         2   2018446         nop
P:0008 000000         2   2218447         nop
P:0009 000000         2   2418448         nop
                            18449 
                            18450 ; 34   |    LCD_CS1_GPDO = FALSE;       //Chip select
                            18451 
                            18454 
                            18455 ; 35   |    _MultiNop();
                            18456 
P:000A 0A7008 00F401  6   3018453         bclr    #8,x:$F401
P:000C 000000         2   3218458         nop
P:000D 000000         2   3418459         nop
P:000E 000000         2   3618460         nop
                            18461 
                            18462 ; 36   |    LCD_RW_GPDO = FALSE;        //Tell System only Write Mode
                            18463 
                            18466 
                            18467 ; 37   |    _MultiNop();
                            18468 
P:000F 0A7009 00F403  6   4218465         bclr    #9,x:$F403
P:0011 000000         2   4418470         nop
P:0012 000000         2   4618471         nop
P:0013 000000         2   4818472         nop
                            18473 
                            18474 ; 38   |
                            18475 ; 39   |        if (gTUNER_STFM1000) 
                            18476 
P:0014 5FF000 rrrrrr  3   5118478         move    y:FgTUNER_STFM1000,b
P:0016 20000B         2   5318479         tst     b
P:0017 0AF0AA rrrrrr  6   5918480         jeq     L3
                            18481 
                            18482 ; 40   |        {
                            18483 ; 41   |//#ifdef TUNER_STFM1000
                            18484 ; 42   |    LCD_DATA_D00 = wCommand & 1;
                            18485 
P:0019 218D00         2   6118487         move    a1,b1
P:001A 46F400 000001  3   6418488         move    #>1,y0
P:001C 20005E         2   6618489         and     y0,b
P:001D 0ACD00 rrrrrr  6   7218490         jclr    #0,b1,L5
P:001F 0A7033 00F401  6   7818491         bset    #19,x:$F401
P:0021 0AF080 rrrrrr  6   8418492         jmp     L4
                            18493 L5:
                            18494 
                            18495 ; 43   |    LCD_DATA_D03 = (wCommand>>3) & 1;
                            18496 
P:0023 0A7013 00F401  6   9018493         bclr    #19,x:$F401
P:0025 218F00         2   9218498 L4:     move    a1,b
P:0026 20002B         2   9418501         lsr     b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 310

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0027 20002B         2   9618501         lsr     b
P:0028 20002B         2   9818501         lsr     b
                            18504 L6:
P:0029 20005E         2  10018506         and     y0,b
P:002A 0ACD00 rrrrrr  6  10618507         jclr    #0,b1,L8
P:002C 0A7029 00F411  6  11218508         bset    #9,x:$F411
P:002E 0AF080 rrrrrr  6  11818509         jmp     L7
                            18510 L8:
                            18511 
                            18512 ; 44   |    LCD_DATA_D04 = (wCommand>>4) & 1;
                            18513 
P:0030 0A7009 00F411  6  12418510         bclr    #9,x:$F411
P:0032 218D00         2  12618515 L7:     move    a1,b1
P:0033 20002B         2  12818518         lsr     b
P:0034 20002B         2  13018518         lsr     b
P:0035 20002B         2  13218518         lsr     b
P:0036 20002B         2  13418518         lsr     b
                            18520 L9:
P:0037 20005E         2  13618522         and     y0,b
P:0038 0ACD00 rrrrrr  6  14218523         jclr    #0,b1,L11
P:003A 0A7023 00F421  6  14818524         bset    #3,x:$F421
P:003C 0AF080 rrrrrr  6  15418525         jmp     L10
                            18526 L11:
                            18527 
                            18528 ; 45   |//#endif 
                            18529 ; 46   |    }
                            18530 
P:003E 0A7003 00F421  6  16018526         bclr    #3,x:$F421
                            18532 L10:
                            18533 
                            18534 ; 47   |    
                            18535 ; 48   |    LCD_DATA_DO = wCommand;
                            18536 
                            18538 L3:
                            18546 
                            18547 ; 49   |    _MultiNop();
                            18548 
P:0040 57F000 00F401  3  16318538         move    x:$F401,b
P:0042 46F400 FFFF00  3  16618539         move    #$FFFF00,y0
P:0044 46F45E 0000FF  3  16918540         and     y0,b	                #>$FF,y0
P:0046 200056         2  17118542         and     y0,a
P:0047 218600         2  17318543         move    a1,y0
P:0048 20005A         2  17518544         or      y0,b
P:0049 557000 00F401  3  17818545         move    b1,x:$F401
P:004B 000000         2  18018551         nop
P:004C 000000         2  18218552         nop
P:004D 000000         2  18418553         nop
                            18554 
                            18555 ; 50   |    LCD_RW_GPDO = TRUE;   
                            18556 
                            18559 
                            18560 ; 51   |    _MultiNop();
                            18561 
P:004E 0A7029 00F403  6  19018558         bset    #9,x:$F403
P:0050 000000         2  19218563         nop
P:0051 000000         2  19418564         nop
P:0052 000000         2  19618565         nop
                            18566 
                            18567 ; 52   |    LCD_RDE_GPDO = FALSE;
                            18568 
                            18571 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 311

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18572 ; 53   |    _MultiNop();
                            18573 
P:0053 0A700B 00F401  6  20218570         bclr    #11,x:$F401
P:0055 000000         2  20418575         nop
P:0056 000000         2  20618576         nop
P:0057 000000         2  20818577         nop
                            18578 
                            18579 ; 54   |    LCD_CS1_GPDO = TRUE;
                            18580 
                            18583 
                            18584 ; 55   |    _MultiNop();_MultiNop();_MultiNop();_MultiNop();
                            18585 
P:0058 0A7028 00F401  6  21418582         bset    #8,x:$F401
P:005A 000000         2  21618587         nop
P:005B 000000         2  21818588         nop
P:005C 000000         2  22018589         nop
P:005D 000000         2  22218590         nop
P:005E 000000         2  22418591         nop
P:005F 000000         2  22618592         nop
P:0060 000000         2  22818593         nop
P:0061 000000         2  23018594         nop
P:0062 000000         2  23218595         nop
P:0063 000000         2  23418596         nop
P:0064 000000         2  23618597         nop
P:0065 000000         2  23818598         nop
                            18599 
                            18600 ; 56   |    
                            18601 ; 57   |}
                            18602 
P:0066 00000C         4  24218604         rts
                            18607 
                            18608 ; 58   |
                            18609 ; 59   |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation)
                            18610 ; 60   |{
                            18611 
                            18618 FHALDisplaySendData:
                            18643 
                            18644 ; 61   |    int i;
                            18645 ; 62   |    WORD wByte;
                            18646 
                            18673 
                            18674 ; 63   |    //set up the data to go out
                            18675 ; 64   |    HALDisplaySendCommand(CMD_SET_LOWER_COLUMN_ADDRESS(wColumn));
                            18676 
P:0067 055F7C         2  24418619         movec   ssh,y:(r7)+
P:0068 3F0700         2  24618622         move    #7,n7
P:0069 000000         2  24818622         nop             ; (inserted)
P:006A 204F00         2  25018625         move    (r7)+n7
P:006B 77F400 FFFFFE  3  25318648         move    #-2,n7
P:006D 000000         2  25518648         nop             ; (inserted)
P:006E 4D6F00         4  25918650         move    x1,y:(r7+n7)
P:006F 77F400 FFFFFD  3  26218653         move    #-3,n7
P:0071 000000         2  26418653         nop             ; (inserted)
P:0072 686F00         4  26818655         move    r0,y:(r7+n7)
P:0073 77F400 FFFFFC  3  27118658         move    #-4,n7
P:0075 000000         2  27318658         nop             ; (inserted)
P:0076 4E6F00         4  27718660         move    y0,y:(r7+n7)
P:0077 77F400 FFFFFB  3  28018663         move    #-5,n7
P:0079 000000         2  28218663         nop             ; (inserted)
P:007A 4C6F00         4  28618665         move    x0,y:(r7+n7)
P:007B 77F400 FFFFF9  3  28918668         move    #-7,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 312

M:ADDR CODE           CYCLES LINE SOURCELINE
P:007D 44F400 00000F  3  29218681         move    #>15,x0
P:007F 5C6F00         4  29618670         move    a1,y:(r7+n7)
P:0080 77F400 FFFFFA  3  29918678         move    #-6,n7
P:0082 000000         2  30118678         nop             ; (inserted)
P:0083 5D6F4E         4  30518682         and     x0,b	                b1,y:(r7+n7)
P:0084 21AE00         2  30718685         move    b1,a
P:0085 0BF080 rrrrrr  6  31318686         jsr     FHALDisplaySendCommand
                            18687 
                            18688 ; 65   |    HALDisplaySendCommand(CMD_SET_HIGHER_COLUMN_ADDRESS(wColumn));
                            18689 
P:0087 77F400 FFFFFA  3  31618691         move    #-6,n7
P:0089 000000         2  31818691         nop             ; (inserted)
P:008A 5DEF00         4  32218693         move    y:(r7+n7),b1
P:008B 20002B         2  32418696         lsr     b
P:008C 20002B         2  32618696         lsr     b
P:008D 20002B         2  32818696         lsr     b
P:008E 20002B         2  33018696         lsr     b
                            18698 L18:
P:008F 46F400 00000F  3  33318703         move    #>15,y0
P:0091 20005E         2  33518704         and     y0,b
P:0092 0ACD64         4  33918705         bset    #4,b1
P:0093 21AE00         2  34118706         move    b1,a
P:0094 0BF080 rrrrrr  6  34718707         jsr     FHALDisplaySendCommand
                            18708 
                            18709 ; 66   |    HALDisplaySendCommand(CMD_SET_PAGE_ADDRESS(wPage));
                            18710 
P:0096 77F400 FFFFF9  3  35018712         move    #-7,n7
P:0098 46F400 00000F  3  35318715         move    #>15,y0
P:009A 5EEF00         4  35718714         move    y:(r7+n7),a
P:009B 200056         2  35918716         and     y0,a
P:009C 0ACC64         4  36318720         bset    #4,a1
P:009D 0ACC65         4  36718721         bset    #5,a1
P:009E 0ACC67         4  37118722         bset    #7,a1
P:009F 0BF080 rrrrrr  6  37718723         jsr     FHALDisplaySendCommand
                            18724 
                            18725 ; 67   |    for(i=0;i<wCount;i++)
                            18726 
P:00A1 2F0000         2  37918728         move    #0,b
P:00A2 0AF080 rrrrrr  6  38518730         jmp     L17
                            18731 
                            18732 ; 68   |    {
                            18733 ; 69   |        LCD_DC_GPDO = TRUE;     //This is data mode
                            18734 
                            18736 L12:
                            18740 
                            18741 ; 70   |    _MultiNop();
                            18742 
P:00A4 0A702A 00F401  6  39118739         bset    #10,x:$F401
P:00A6 000000         2  39318745         nop
P:00A7 000000         2  39518746         nop
P:00A8 000000         2  39718747         nop
                            18748 
                            18749 ; 71   |        LCD_RDE_GPDO = TRUE;    
                            18750 
                            18753 
                            18754 ; 72   |    _MultiNop();
                            18755 
P:00A9 0A702B 00F401  6  40318752         bset    #11,x:$F401
P:00AB 000000         2  40518757         nop
P:00AC 000000         2  40718758         nop
P:00AD 000000         2  40918759         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 313

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18760 
                            18761 ; 73   |        LCD_CS1_GPDO = FALSE;   
                            18762 
                            18765 
                            18766 ; 74   |    _MultiNop();
                            18767 
P:00AE 0A7008 00F401  6  41518764         bclr    #8,x:$F401
P:00B0 000000         2  41718769         nop
P:00B1 000000         2  41918770         nop
P:00B2 000000         2  42118771         nop
                            18772 
                            18773 ; 75   |        LCD_RW_GPDO = FALSE;    //Tell system only Write Mode
                            18774 
                            18777 
                            18778 ; 76   |    _MultiNop();
                            18779 
P:00B3 0A7009 00F403  6  42718776         bclr    #9,x:$F403
P:00B5 000000         2  42918781         nop
P:00B6 000000         2  43118782         nop
P:00B7 000000         2  43318783         nop
                            18784 
                            18785 ; 77   |        if(wDisplayOperation&DISPLAY_CLEAR)
                            18786 
P:00B8 77F400 FFFFFE  3  43618788         move    #-2,n7
P:00BA 000000         2  43818788         nop             ; (inserted)
P:00BB 5CEF00         4  44218791         move    y:(r7+n7),a1
P:00BC 0ACC01 rrrrrr  6  44818792         jclr    #1,a1,L13
                            18793 
                            18794 ; 78   |        {
                            18795 ; 79   |            wByte = 0;
                            18796 
                            18800 
                            18801 ; 80   |        }
                            18802 
P:00BE 2D0000         2  45018798         move    #0,b1
P:00BF 0AF080 rrrrrr  6  45618804         jmp     L14
                            18805 
                            18806 ; 81   |        else
                            18807 ; 82   |        {
                            18808 ; 83   |            wByte = GetByteFromArrayInY(wByteIndex++,pBuffer);
                            18809 
                            18811 L13:
P:00C1 77F400 FFFFFC  3  45918811         move    #-4,n7
P:00C3 46F400 000001  3  46218819         move    #>1,y0
P:00C5 5FEF00         4  46618813         move    y:(r7+n7),b
P:00C6 21AE58         2  46818820         add     y0,b	                b1,a
P:00C7 5D6F00         4  47218824         move    b1,y:(r7+n7)
P:00C8 77F400 FFFFFD  3  47518827         move    #-3,n7
P:00CA 000000         2  47718827         nop             ; (inserted)
P:00CB 68EF00         4  48118829         move    y:(r7+n7),r0
P:00CC 0BF080 rrrrrr  6  48718832         jsr     GetByteFromArrayInY
                            18837 
                            18838 ; 84   |        }
                            18839 ; 85   |        if(wDisplayOperation&DISPLAY_INVERT)
                            18840 
P:00CE 21CD00         2  48918835         move    a,b1
P:00CF 77F400 FFFFFE  3  49218842 L14:    move    #-2,n7
P:00D1 46F400 000001  3  49518845         move    #>1,y0
P:00D3 5EEF00         4  49918844         move    y:(r7+n7),a
P:00D4 0ACC00 rrrrrr  6  50518846         jclr    #0,a1,L15
                            18847 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 314

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18848 ; 86   |        {
                            18849 ; 87   |            wByte = ~wByte;
                            18850 
                            18853 
                            18854 ; 88   |        }
                            18855 ; 89   |        
                            18856 ; 90   |                if (gTUNER_STFM1000) 
                            18857 
P:00D6 20001F         2  50718852         not     b
P:00D7 5EF000 rrrrrr  3  51018859 L15:    move    y:FgTUNER_STFM1000,a
P:00D9 200003         2  51218860         tst     a
P:00DA 0AF0AA rrrrrr  6  51818861         jeq     L16
                            18862 
                            18863 ; 91   |                {
                            18864 ; 92   |        //#ifdef TUNER_STFM1000
                            18865 ; 93   |            LCD_DATA_D00 = wByte & 1;  
                            18866 
P:00DC 21AE00         2  52018868         move    b1,a
P:00DD 200056         2  52218869         and     y0,a
P:00DE 0ACC00 rrrrrr  6  52818870         jclr    #0,a1,L20
P:00E0 0A7033 00F401  6  53418871         bset    #19,x:$F401
P:00E2 0AF080 rrrrrr  6  54018872         jmp     L19
                            18873 L20:
                            18874 
                            18875 ; 94   |            LCD_DATA_D03 = (wByte>>3) & 1;
                            18876 
P:00E4 0A7013 00F401  6  54618873         bclr    #19,x:$F401
P:00E6 21AE00         2  54818878 L19:    move    b1,a
P:00E7 200023         2  55018881         lsr     a
P:00E8 200023         2  55218881         lsr     a
P:00E9 200023         2  55418881         lsr     a
                            18883 L21:
P:00EA 200056         2  55618885         and     y0,a
P:00EB 0ACC00 rrrrrr  6  56218886         jclr    #0,a1,L23
P:00ED 0A7029 00F411  6  56818887         bset    #9,x:$F411
P:00EF 0AF080 rrrrrr  6  57418888         jmp     L22
                            18889 L23:
                            18890 
                            18891 ; 95   |            LCD_DATA_D04 = (wByte>>4) & 1;
                            18892 
P:00F1 0A7009 00F411  6  58018889         bclr    #9,x:$F411
P:00F3 21AC00         2  58218894 L22:    move    b1,a1
P:00F4 200023         2  58418897         lsr     a
P:00F5 200023         2  58618897         lsr     a
P:00F6 200023         2  58818897         lsr     a
P:00F7 200023         2  59018897         lsr     a
                            18899 L24:
P:00F8 200056         2  59218901         and     y0,a
P:00F9 0ACC00 rrrrrr  6  59818902         jclr    #0,a1,L26
P:00FB 0A7023 00F421  6  60418903         bset    #3,x:$F421
P:00FD 0AF080 rrrrrr  6  61018904         jmp     L25
                            18905 L26:
                            18906 
                            18907 ; 96   |        //#endif   
                            18908 ; 97   |            }
                            18909 
P:00FF 0A7003 00F421  6  61618905         bclr    #3,x:$F421
                            18911 L25:
                            18912 
                            18913 ; 98   |     
                            18914 ; 99   |    LCD_DATA_DO = wByte&0xff;
                            18915 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 315

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18917 L16:
                            18929 
                            18930 ; 100  |    _MultiNop();
                            18931 
P:0101 56F000 00F401  3  61918921         move    x:$F401,a
P:0103 44F400 0000FF  3  62218917         move    #>$FF,x0
P:0105 47F44E FFFF00  3  62518918         and     x0,b	                #$FFFF00,y1
P:0107 21AF76         2  62718923         and     y1,a	                b1,b
P:0108 208700         2  62918924         move    x0,y1
P:0109 20007E         2  63118925         and     y1,b
P:010A 21A700         2  63318926         move    b1,y1
P:010B 200072         2  63518927         or      y1,a
P:010C 547000 00F401  3  63818928         move    a1,x:$F401
P:010E 000000         2  64018934         nop
P:010F 000000         2  64218935         nop
P:0110 000000         2  64418936         nop
                            18937 
                            18938 ; 101  |        LCD_RW_GPDO = TRUE;
                            18939 
                            18942 
                            18943 ; 102  |    _MultiNop();
                            18944 
P:0111 0A7029 00F403  6  65018941         bset    #9,x:$F403
P:0113 000000         2  65218946         nop
P:0114 000000         2  65418947         nop
P:0115 000000         2  65618948         nop
                            18949 
                            18950 ; 103  |        LCD_RDE_GPDO = FALSE;
                            18951 
                            18954 
                            18955 ; 104  |    _MultiNop();
                            18956 
P:0116 0A700B 00F401  6  66218953         bclr    #11,x:$F401
P:0118 000000         2  66418958         nop
P:0119 000000         2  66618959         nop
P:011A 000000         2  66818960         nop
                            18961 
                            18962 ; 105  |        LCD_CS1_GPDO = TRUE;
                            18963 
                            18966 
                            18967 ; 106  |    _MultiNop();_MultiNop();_MultiNop();
                            18968 
P:011B 0A7028 00F401  6  67418965         bset    #8,x:$F401
P:011D 000000         2  67618970         nop
P:011E 000000         2  67818971         nop
P:011F 000000         2  68018972         nop
P:0120 000000         2  68218973         nop
P:0121 000000         2  68418974         nop
P:0122 000000         2  68618975         nop
P:0123 000000         2  68818976         nop
P:0124 000000         2  69018977         nop
P:0125 000000         2  69218978         nop
P:0126 045FA0         2  69418980         movec   m0,n7
P:0127 000000         2  69618980         nop             ; (inserted)
P:0128 5FEF00         4  70018983         move    y:(r7+n7),b
P:0129 200058         2  70218984         add     y0,b
                            18987 L17:
P:012A 045FA0         2  70418987         movec   m0,n7
P:012B 2B0000         2  70618996         move    #0,b2
P:012C 5D6F00         4  71018989         move    b1,y:(r7+n7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 316

M:ADDR CODE           CYCLES LINE SOURCELINE
P:012D 77F400 FFFFFB  3  71318992         move    #-5,n7
P:012F 000000         2  71518992         nop             ; (inserted)
P:0130 5EEF00         4  71918994         move    y:(r7+n7),a
P:0131 2A0000         2  72118995         move    #0,a2
P:0132 20000D         2  72318997         cmp     a,b
P:0133 0AF0A9 rrrrrr  6  72918998         jlt     L12
                            18999 
                            19000 ; 107  |        
                            19001 ; 108  |    }
                            19002 ; 109  |}
                            19003 
P:0135 77F400 FFFFF8  3  73219005         move    #-8,n7
P:0137 000000         2  73419005         nop             ; (inserted)
P:0138 05EF7C         4  73819007         movec   y:(r7+n7),ssh
P:0139 204F00         2  74019009         move    (r7)+n7
P:013A 00000C         4  74419011         rts
                            19018 
                            19019 ; 110  |
                            19020 ; 111  |
                            19021 ; 112  |_reentrant void HALDisplaySetContrast(INT  iContrast)
                            19022 ; 113  |{
                            19023 
                            19028 FHALDisplaySetContrast:
                            19034 
                            19035 ; 114  |    //the incoming contrast will saturate against the lower and upper bounds
                            19036 ; 115  |
                            19037 ; 116  |    if(iContrast < 0)
                            19038 
P:013B 055F7C         2  74619029         movec   ssh,y:(r7)+
P:013C 200003         2  74819040         tst     a
P:013D 0AF0A1 rrrrrr  6  75419041         jge     L27
                            19043 
                            19044 ; 117  |        g_iContrastPercentage = 0;
                            19045 
P:013F 587000 rrrrrr  3  75719047         move    a0,y:Fg_iContrastPercentage
P:0141 0AF080 rrrrrr  6  76319048         jmp     L30
                            19049 
                            19050 ; 118  |    else if(iContrast > 100)
                            19051 
                            19053 L27:
P:0143 44F400 000064  3  76619055         move    #>100,x0
P:0145 200045         2  76819056         cmp     x0,a
P:0146 0AF0AF rrrrrr  6  77419057         jle     L28
                            19058 
                            19059 ; 119  |        g_iContrastPercentage = 100;
                            19060 
P:0148 4C7000 rrrrrr  3  77719062         move    x0,y:Fg_iContrastPercentage
P:014A 0AF080 rrrrrr  6  78319063         jmp     L30
                            19064 
                            19065 ; 120  |    else
                            19066 ; 121  |        g_iContrastPercentage = iContrast;
                            19067 
                            19069 L28:
                            19070 
                            19071 ; 122  |
                            19072 ; 123  |    //contrast is an 'extended' command...takes two command words to execute
                            19073 ; 124  |    HALDisplaySendCommand(CMD_SET_CONTRAST);
                            19074 
P:014C 5C7000 rrrrrr  3  78619069         move    a1,y:Fg_iContrastPercentage
P:014E 56F400 000081  3  78919076 L30:    move    #>$81,a
P:0150 0BF080 rrrrrr  6  79519077         jsr     FHALDisplaySendCommand
                            19079 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 317

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19080 ; 125  |    HALDisplaySendCommand(LCD_MIN_CONTRAST+ ((g_iContrastPercentage*(LCD_MAX_CONTRAST-LCD_
                                  MIN_CONTRAST))/100));
                            19081 
P:0152 4EF000 rrrrrr  3  79819083         move    y:Fg_iContrastPercentage,y0
P:0154 47F400 0000FA  3  80119084         move    #>250,y1
P:0156 44F4B0 000064  3  80419085         mpy     y0,y1,a	                #>100,x0
P:0158 200022         2  80619086         asr     a
P:0159 210E00         2  80819088         move    a0,a
P:015A 0BF080 rrrrrr  6  81419089         jsr     Rdiv_iii
P:015C 0BF080 rrrrrr  6  82019090         jsr     FHALDisplaySendCommand
                            19091 
                            19092 ; 126  |
                            19093 ; 127  |}
                            19094 
P:015E 05FF7C         4  82419096         movec   y:-(r7),ssh
P:015F 000000         2  82619096         nop             ; (inserted)
P:0160 00000C         4  83019100         rts
                            19102 
                            19103 ; 128  |_reentrant void HALDisplayDecContrast(void)
                            19104 ; 129  |{
                            19105 
                            19110 FHALDisplayDecContrast:
                            19114 
                            19115 ; 130  |#ifdef CONTRAST_CALIBRATION    
                            19116 ; 131  |    HALDisplaySetContrast(g_iContrastPercentage-LCD_STEPSIZE_CONTRAST);
                            19117 ; 132  |#else
                            19118 ; 133  |    HALDisplaySetContrast(DisplayGetContrast()-LCD_STEPSIZE_CONTRAST);
                            19119 
P:0161 055F7C         2  83219111         movec   ssh,y:(r7)+
P:0162 0BF080 rrrrrr  6  83819121         jsr     FDisplayGetContrast
P:0164 47F400 00000A  3  84119122         move    #>10,y1
P:0166 200074         2  84319123         sub     y1,a
P:0167 218E00         2  84519124         move    a1,a
P:0168 0BF080 rrrrrr  6  85119125         jsr     FHALDisplaySetContrast
                            19126 
                            19127 ; 134  |#endif
                            19128 ; 135  |}
                            19129 
P:016A 05FF7C         4  85519131         movec   y:-(r7),ssh
P:016B 000000         2  85719131         nop             ; (inserted)
P:016C 00000C         4  86119135         rts
                            19137 
                            19138 ; 136  |
                            19139 ; 137  |_reentrant void HALDisplayIncContrast(void)
                            19140 ; 138  |{
                            19141 
                            19146 FHALDisplayIncContrast:
                            19150 
                            19151 ; 139  |#ifdef CONTRAST_CALIBRATION    
                            19152 ; 140  |    HALDisplaySetContrast(g_iContrastPercentage+LCD_STEPSIZE_CONTRAST);
                            19153 ; 141  |#else
                            19154 ; 142  |    HALDisplaySetContrast(DisplayGetContrast()+LCD_STEPSIZE_CONTRAST);
                            19155 
P:016D 055F7C         2  86319147         movec   ssh,y:(r7)+
P:016E 0BF080 rrrrrr  6  86919157         jsr     FDisplayGetContrast
P:0170 47F400 00000A  3  87219158         move    #>10,y1
P:0172 200070         2  87419159         add     y1,a
P:0173 218E00         2  87619160         move    a1,a
P:0174 0BF080 rrrrrr  6  88219161         jsr     FHALDisplaySetContrast
                            19162 
                            19163 ; 143  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 318

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19164 ; 144  |}
                            19165 
P:0176 05FF7C         4  88619167         movec   y:-(r7),ssh
P:0177 000000         2  88819167         nop             ; (inserted)
P:0178 00000C         4  89219171         rts
                            19173 
                            19174 ; 145  |
                            19175 ; 146  |/*--------------------------------------------------------
                            19176 ; 147  |Temporarily set the display contrast to compensate for Vddio changes
                            19177 ; 148  |--------------------------------------------------------*/
                            19178 ; 149  |_reentrant void SetTemporaryContrast(INT  iChange)
                            19179 ; 150  |{
                            19180 
                            19185 FSetTemporaryContrast:
                            19198 
                            19199 ; 151  |    //contrast is an 'extended' command...takes two command words to execute
                            19200 ; 152  |    HALDisplaySendCommand(CMD_SET_CONTRAST);
                            19201 
P:0179 055F7C         2  89419186         movec   ssh,y:(r7)+
P:017A 045FA0         2  89619193         movec   m0,n7
P:017B 205F00         2  89819189         move    (r7)+
P:017C 5C6F00         4  90219195         move    a1,y:(r7+n7)
P:017D 56F400 000081  3  90519203         move    #>$81,a
P:017F 0BF080 rrrrrr  6  91119204         jsr     FHALDisplaySendCommand
                            19205 
                            19206 ; 153  |    HALDisplaySendCommand(LCD_MIN_CONTRAST + (((g_iContrastPercentage+iChange)*(LCD_MAX_CO
                                  NTRAST-LCD_MIN_CONTRAST))/100));
                            19207 
P:0181 045FA0         2  91319210         movec   m0,n7
P:0182 5FF000 rrrrrr  3  91619209         move    y:Fg_iContrastPercentage,b
P:0184 5EEF00         4  92019212         move    y:(r7+n7),a
P:0185 45F418 0000FA  3  92319213         add     a,b	                #>250,x1
P:0187 21A700         2  92519217         move    b1,y1
P:0188 44F4F0 000064  3  92819218         mpy     y1,x1,a	                #>100,x0
P:018A 200022         2  93019219         asr     a
P:018B 210E00         2  93219222         move    a0,a
P:018C 0BF080 rrrrrr  6  93819223         jsr     Rdiv_iii
                            19224 
                            19225 ; 154  |}
                            19226 
P:018E 205700         2  94019228         move    (r7)-
P:018F 0BF080 rrrrrr  6  94619230         jsr     FHALDisplaySendCommand
P:0191 05FF7C         4  95019233         movec   y:-(r7),ssh
P:0192 000000         2  95219233         nop             ; (inserted)
P:0193 00000C         4  95619237         rts
                            19239 
                            19240 ; 155  |
                            19241 ; 156  |_reentrant void HALHandleMessage(Message *pMsg)
                            19242 ; 157  |{
                            19243 
                            19250 FHALHandleMessage:
                            19256 
                            19257 ; 158  |    switch(pMsg->m_wMessage)
                            19258 
P:0194 055F7C         2  95819251         movec   ssh,y:(r7)+
P:0195 56F400 03000E  3  96119262         move    #196622,a
P:0197 205800         2  96319260         move    (r0)+
P:0198 5FD000         2  96519261         move    y:(r0)-,b
P:0199 2B0000         2  96719263         move    #0,b2
P:019A 56F40D 03000F  3  97019264         cmp     a,b     #196623,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 319

M:ADDR CODE           CYCLES LINE SOURCELINE
P:019C 0AF0AA rrrrrr  6  97619265         jeq     L31
P:019E 56F40D 030042  3  97919266         cmp     a,b     #196674,a
P:01A0 0AF0AA rrrrrr  6  98519267         jeq     L32
P:01A2 56F40D 030011  3  98819268         cmp     a,b     #196625,a
P:01A4 0AF0AA rrrrrr  6  99419269         jeq     L33
P:01A6 56F40D 030010  3  99719270         cmp     a,b     #196624,a
P:01A8 0AF0AA rrrrrr  6 100319271         jeq     L34
P:01AA 56F40D 03000D  3 100619272         cmp     a,b     #196621,a
P:01AC 0AF0AA rrrrrr  6 101219273         jeq     L35
P:01AE 20000D         2 101419274         cmp     a,b
P:01AF 0AF0AA rrrrrr  6 102019275         jeq     L36
P:01B1 0AF080 rrrrrr  6 102619276         jmp     L42
                            19277 
                            19278 ; 159  |    {
                            19279 ; 160  |    case LCD_SET_CONTRAST:
                            19280 ; 161  |        HALDisplaySetContrast(pMsg->m_wParams[0]);
                            19281 ; 162  |        break;
                            19282 ; 163  |    case LCD_INC_CONTRAST:
                            19283 ; 164  |        HALDisplayIncContrast();
                            19284 
P:01B3 0BF080 rrrrrr  6 103219286 L31:    jsr     FHALDisplayIncContrast
                            19288 
                            19289 ; 165  |        break;
                            19290 
P:01B5 0AF080 rrrrrr  6 103819292         jmp     L42
                            19293 
                            19294 ; 166  |    case LCD_DEC_CONTRAST:
                            19295 ; 167  |        HALDisplayDecContrast();
                            19296 
P:01B7 0BF080 rrrrrr  6 104419298 L32:    jsr     FHALDisplayDecContrast
                            19299 
                            19300 ; 168  |        break;
                            19301 
P:01B9 0AF080 rrrrrr  6 105019303         jmp     L42
                            19304 
                            19305 ; 169  |    case LCD_TEMP_CONTRAST:
                            19306 ; 170  |        SetTemporaryContrast(pMsg->m_wParams[0]);
                            19307 
                            19309 L33:
P:01BB 380200         2 105219311         move    #2,n0
P:01BC 000000         2 105419311         nop             ; (inserted)
P:01BD 5EE800         4 105819313         move    y:(r0+n0),a
P:01BE 218E00         2 106019314         move    a1,a
P:01BF 0BF080 rrrrrr  6 106619315         jsr     FSetTemporaryContrast
                            19317 
                            19318 ; 171  |        break;
                            19319 
P:01C1 0AF080 rrrrrr  6 107219321         jmp     L42
                            19322 
                            19323 ; 172  |   case LCD_BACKLIGHT_OFF:
                            19324 ; 173  |                LCD_VCC_GPDO = FALSE;
                            19325 
                            19327 L34:
                            19328 
                            19329 ; 174  |        break;  
                            19330 
P:01C3 0A700F 00F411  6 107819327         bclr    #15,x:$F411
P:01C5 0AF080 rrrrrr  6 108419332         jmp     L42
                            19333 
                            19334 ; 175  |   case LCD_BACKLIGHT_ON:
                            19335 ; 176  |        LCD_VCC_GPDO = TRUE;
                            19336 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 320

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19338 L35:
                            19339 
                            19340 ; 177  |        break;  
                            19341 
P:01C7 0A702F 00F411  6 109019338         bset    #15,x:$F411
P:01C9 0AF080 rrrrrr  6 109619343         jmp     L42
                            19345 L36:
P:01CB 380200         2 109819347         move    #2,n0
P:01CC 000000         2 110019347         nop             ; (inserted)
P:01CD 5EE800         4 110419349         move    y:(r0+n0),a
P:01CE 218E00         2 110619350         move    a1,a
P:01CF 0BF080 rrrrrr  6 111219351         jsr     FHALDisplaySetContrast
                            19353 
                            19354 ; 178  |    default:
                            19355 ; 179  |        break;
                            19356 ; 180  |    }
                            19357 
                            19359 L42:
                            19360 
                            19361 ; 181  |}
                            19362 
P:01D1 05FF7C         4 111619364         movec   y:-(r7),ssh
P:01D2 000000         2 111819364         nop             ; (inserted)
P:01D3 00000C         4 112219368         rts
                            19370 
                            19371 ; 182  |
                            19372 
                            19374 
                            19377 
Y:0000                      19378         org     y,".ybsssed15xx",bss:
                            19379 FgTUNER_STFM1000:
Y:0000 RESERVED             19380         ds      1
Y:0000
                            19384 
                            19385         extern  GetByteFromArrayInY, Rdiv_iii, FDisplayGetContrast
                            19386         extern  y:Fg_iContrastPercentage
                            19387 
                            19388         global  FHALDisplayDecContrast, FHALDisplayIncContrast
                            19389         global  FHALDisplaySendCommand, FHALDisplaySendData
                            19390         global  FHALDisplaySetContrast, FHALHandleMessage
                            19391         global  FSetTemporaryContrast, FgTUNER_STFM1000
                            19392 
                            19393         local   L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
                            19394         local   L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27
                            19395         local   L28, L30, L31, L32, L33, L34, L35, L36, L42
                            19396 
                            19397         calls   "HALDisplayDecContrast", "DisplayGetContrast"
                            19398         calls   "HALDisplayDecContrast", "HALDisplaySetContrast"
                            19399         calls   "HALDisplayIncContrast", "DisplayGetContrast"
                            19400         calls   "HALDisplayIncContrast", "HALDisplaySetContrast"
                            19401         calls   "HALDisplaySendData", "GetByteFromArrayInY"
                            19402         calls   "HALDisplaySendData", "HALDisplaySendCommand"
                            19403         calls   "HALDisplaySetContrast", "HALDisplaySendCommand"
                            19404         calls   "HALDisplaySetContrast", "Rdiv_iii"
                            19405         calls   "HALHandleMessage", "HALDisplayDecContrast"
                            19406         calls   "HALHandleMessage", "HALDisplayIncContrast"
                            19407         calls   "HALHandleMessage", "HALDisplaySetContrast"
                            19408         calls   "HALHandleMessage", "SetTemporaryContrast"
                            19409         calls   "SetTemporaryContrast", "HALDisplaySendCommand", "Rdiv_iii"
                            19410 
