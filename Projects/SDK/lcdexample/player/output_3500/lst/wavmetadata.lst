TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc748b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;  wavmetadata.c:
                               96 ; 1    |///////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                               98 ; 3    |//
                               99 ; 4    |// Filename: wavmetadata.c
                              100 ; 5    |// Description: Functions for extracting the .wav (PCM/ADPCM) meta-data.
                              101 ; 6    |///////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 9    |#include "stringlib.h"
                              341 
                              343 
                              344 ; 1    |#ifndef STRINGLIB_H
                              345 ; 2    |#define STRINGLIB_H
                              346 
                              348 
                              349 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
                              350 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                              351 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCoun
                                  t);
                              352 ; 6    |
                              353 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                              354 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                              355 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                              356 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                              357 ; 11   |
                              358 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                              359 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                              360 ; 14   |
                              361 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                              362 ; 16   |
                              363 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc, int iCount);
                              364 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc);
                              365 ; 19   |
                              366 ; 20   |
                              367 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int i
                                  Count);
                              368 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                              369 ; 23   |
                              370 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int 
                                  iCount);
                              371 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                              372 ; 26   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              373 ; 27   |
                              374 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                              375 ; 29   |
                              376 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                              377 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                              378 ; 32   |
                              379 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                              380 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                              381 ; 35   |
                              382 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                              383 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                              384 ; 38   |
                              385 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                              386 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                              387 ; 41   |
                              388 ; 42   |#endif
                              389 
                              391 
                              392 ; 10   |#include "hwequ.h"
                              393 
                              395 
                              396 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              397 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              398 ; 3    |//  File        : hwequ.inc
                              399 ; 4    |//  Description : STMP Hardware Constants
                              400 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              401 ; 6    |
                              402 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              403 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              404 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              405 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              406 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              407 ; 12   |
                              408 ; 13   |#if (!defined(HWEQU_INC))
                              409 ; 14   |#define HWEQU_INC 1
                              410 ; 15   |
                              411 ; 16   |#include "types.h"
                              412 
                              414 
                              415 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              416 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              417 ; 3    |//
                              418 ; 4    |// Filename: types.h
                              419 ; 5    |// Description: Standard data types
                              420 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              421 ; 7    |
                              422 ; 8    |#ifndef _TYPES_H
                              423 ; 9    |#define _TYPES_H
                              424 ; 10   |
                              425 ; 11   |// TODO:  move this outta here!
                              426 ; 12   |#if !defined(NOERROR)
                              427 ; 13   |#define NOERROR 0
                              428 ; 14   |#define SUCCESS 0
                              429 ; 15   |#endif 
                              430 ; 16   |#if !defined(SUCCESS)
                              431 ; 17   |#define SUCCESS  0
                              432 ; 18   |#endif
                              433 ; 19   |#if !defined(ERROR)
                              434 ; 20   |#define ERROR   -1
                              435 ; 21   |#endif
                              436 ; 22   |#if !defined(FALSE)
                              437 ; 23   |#define FALSE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              438 ; 24   |#endif
                              439 ; 25   |#if !defined(TRUE)
                              440 ; 26   |#define TRUE  1
                              441 ; 27   |#endif
                              442 ; 28   |
                              443 ; 29   |#if !defined(NULL)
                              444 ; 30   |#define NULL 0
                              445 ; 31   |#endif
                              446 ; 32   |
                              447 ; 33   |#define MAX_INT     0x7FFFFF
                              448 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              449 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              450 ; 36   |#define MAX_ULONG   (-1) 
                              451 ; 37   |
                              452 ; 38   |#define WORD_SIZE   24              // word size in bits
                              453 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              454 ; 40   |
                              455 ; 41   |
                              456 ; 42   |#define BYTE    unsigned char       // btVarName
                              457 ; 43   |#define CHAR    signed char         // cVarName
                              458 ; 44   |#define USHORT  unsigned short      // usVarName
                              459 ; 45   |#define SHORT   unsigned short      // sVarName
                              460 ; 46   |#define WORD    unsigned int        // wVarName
                              461 ; 47   |#define INT     signed int          // iVarName
                              462 ; 48   |#define DWORD   unsigned long       // dwVarName
                              463 ; 49   |#define LONG    signed long         // lVarName
                              464 ; 50   |#define BOOL    unsigned int        // bVarName
                              465 ; 51   |#define FRACT   _fract              // frVarName
                              466 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              467 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              468 ; 54   |#define FLOAT   float               // fVarName
                              469 ; 55   |#define DBL     double              // dVarName
                              470 ; 56   |#define ENUM    enum                // eVarName
                              471 ; 57   |#define CMX     _complex            // cmxVarName
                              472 ; 58   |typedef WORD UCS3;                   // 
                              473 ; 59   |
                              474 ; 60   |#define UINT16  unsigned short
                              475 ; 61   |#define UINT8   unsigned char   
                              476 ; 62   |#define UINT32  unsigned long
                              477 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              478 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              479 ; 65   |#define WCHAR   UINT16
                              480 ; 66   |
                              481 ; 67   |//UINT128 is 16 bytes or 6 words
                              482 ; 68   |typedef struct UINT128_3500 {   
                              483 ; 69   |    int val[6];     
                              484 ; 70   |} UINT128_3500;
                              485 ; 71   |
                              486 ; 72   |#define UINT128   UINT128_3500
                              487 ; 73   |
                              488 ; 74   |// Little endian word packed byte strings:   
                              489 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              490 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              491 ; 77   |// Little endian word packed byte strings:   
                              492 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              493 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              494 ; 80   |
                              495 ; 81   |// Declare Memory Spaces To Use When Coding
                              496 ; 82   |// A. Sector Buffers
                              497 ; 83   |#define SECTOR_BUFFER_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              498 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              499 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              500 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              501 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              502 ; 88   |// B. Media DDI Memory
                              503 ; 89   |#define MEDIA_DDI_MEM _Y
                              504 ; 90   |
                              505 ; 91   |
                              506 ; 92   |
                              507 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              508 ; 94   |// Examples of circular pointers:
                              509 ; 95   |//    INT CIRC cpiVarName
                              510 ; 96   |//    DWORD CIRC cpdwVarName
                              511 ; 97   |
                              512 ; 98   |#define RETCODE INT                 // rcVarName
                              513 ; 99   |
                              514 ; 100  |// generic bitfield structure
                              515 ; 101  |struct Bitfield {
                              516 ; 102  |    unsigned int B0  :1;
                              517 ; 103  |    unsigned int B1  :1;
                              518 ; 104  |    unsigned int B2  :1;
                              519 ; 105  |    unsigned int B3  :1;
                              520 ; 106  |    unsigned int B4  :1;
                              521 ; 107  |    unsigned int B5  :1;
                              522 ; 108  |    unsigned int B6  :1;
                              523 ; 109  |    unsigned int B7  :1;
                              524 ; 110  |    unsigned int B8  :1;
                              525 ; 111  |    unsigned int B9  :1;
                              526 ; 112  |    unsigned int B10 :1;
                              527 ; 113  |    unsigned int B11 :1;
                              528 ; 114  |    unsigned int B12 :1;
                              529 ; 115  |    unsigned int B13 :1;
                              530 ; 116  |    unsigned int B14 :1;
                              531 ; 117  |    unsigned int B15 :1;
                              532 ; 118  |    unsigned int B16 :1;
                              533 ; 119  |    unsigned int B17 :1;
                              534 ; 120  |    unsigned int B18 :1;
                              535 ; 121  |    unsigned int B19 :1;
                              536 ; 122  |    unsigned int B20 :1;
                              537 ; 123  |    unsigned int B21 :1;
                              538 ; 124  |    unsigned int B22 :1;
                              539 ; 125  |    unsigned int B23 :1;
                              540 ; 126  |};
                              541 ; 127  |
                              542 ; 128  |union BitInt {
                              543 ; 129  |        struct Bitfield B;
                              544 ; 130  |        int        I;
                              545 ; 131  |};
                              546 ; 132  |
                              547 ; 133  |#define MAX_MSG_LENGTH 10
                              548 ; 134  |struct CMessage
                              549 ; 135  |{
                              550 ; 136  |        unsigned int m_uLength;
                              551 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              552 ; 138  |};
                              553 ; 139  |
                              554 ; 140  |typedef struct {
                              555 ; 141  |    WORD m_wLength;
                              556 ; 142  |    WORD m_wMessage;
                              557 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              558 ; 144  |} Message;
                              559 ; 145  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              560 ; 146  |struct MessageQueueDescriptor
                              561 ; 147  |{
                              562 ; 148  |        int *m_pBase;
                              563 ; 149  |        int m_iModulo;
                              564 ; 150  |        int m_iSize;
                              565 ; 151  |        int *m_pHead;
                              566 ; 152  |        int *m_pTail;
                              567 ; 153  |};
                              568 ; 154  |
                              569 ; 155  |struct ModuleEntry
                              570 ; 156  |{
                              571 ; 157  |    int m_iSignaledEventMask;
                              572 ; 158  |    int m_iWaitEventMask;
                              573 ; 159  |    int m_iResourceOfCode;
                              574 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              575 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              576 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              577 ; 163  |    int m_uTimeOutHigh;
                              578 ; 164  |    int m_uTimeOutLow;
                              579 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              580 ; 166  |};
                              581 ; 167  |
                              582 ; 168  |union WaitMask{
                              583 ; 169  |    struct B{
                              584 ; 170  |        unsigned int m_bNone     :1;
                              585 ; 171  |        unsigned int m_bMessage  :1;
                              586 ; 172  |        unsigned int m_bTimer    :1;
                              587 ; 173  |        unsigned int m_bButton   :1;
                              588 ; 174  |    } B;
                              589 ; 175  |    int I;
                              590 ; 176  |} ;
                              591 ; 177  |
                              592 ; 178  |
                              593 ; 179  |struct Button {
                              594 ; 180  |        WORD wButtonEvent;
                              595 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              596 ; 182  |};
                              597 ; 183  |
                              598 ; 184  |struct Message {
                              599 ; 185  |        WORD wMsgLength;
                              600 ; 186  |        WORD wMsgCommand;
                              601 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              602 ; 188  |};
                              603 ; 189  |
                              604 ; 190  |union EventTypes {
                              605 ; 191  |        struct CMessage msg;
                              606 ; 192  |        struct Button Button ;
                              607 ; 193  |        struct Message Message;
                              608 ; 194  |};
                              609 ; 195  |
                              610 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              611 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              612 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              613 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              614 ; 200  |
                              615 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              616 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              617 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              618 ; 204  |
                              619 ; 205  |#if DEBUG
                              620 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              621 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              622 ; 208  |#else 
                              623 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              624 ; 210  |#define DebugBuildAssert(x)    
                              625 ; 211  |#endif
                              626 ; 212  |
                              627 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              628 ; 214  |//  #pragma asm
                              629 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              630 ; 216  |//  #pragma endasm
                              631 ; 217  |
                              632 ; 218  |
                              633 ; 219  |#ifdef COLOR_262K
                              634 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              635 ; 221  |#elif defined(COLOR_65K)
                              636 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              637 ; 223  |#else
                              638 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              639 ; 225  |#endif
                              640 ; 226  |    
                              641 ; 227  |#endif // #ifndef _TYPES_H
                              642 
                              644 
                              645 ; 17   |#include "regsclkctrl.h"
                              646 
                              648 
                              649 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              650 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              651 ; 3    |
                              652 ; 4    |
                              653 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              654 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              655 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              656 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              657 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              658 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              659 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              660 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              661 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              662 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              663 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              664 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              665 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              666 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              667 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              668 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              669 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              670 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              671 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              672 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              673 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              674 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              675 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              676 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              677 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              678 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              679 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              680 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              681 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              682 ; 34   |
                              683 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              684 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              685 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              686 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              687 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              688 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              689 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              690 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              691 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              692 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              693 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              694 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              695 ; 47   |
                              696 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              697 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              698 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              699 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              700 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              701 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              702 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              703 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              704 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              705 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              706 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              707 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              708 ; 60   |
                              709 ; 61   |typedef union               
                              710 ; 62   |{
                              711 ; 63   |    struct
                              712 ; 64   |    {
                              713 ; 65   |        int CKRST       :1; // Clock Reset
                              714 ; 66   |        int LTC         :1;
                              715 ; 67   |        int PLLEN       :1;
                              716 ; 68   |        int XTLEN       :1;
                              717 ; 69   |        int FLB         :1;
                              718 ; 70   |        unsigned ADIV   :3;
                              719 ; 71   |        int CKSRC       :1;
                              720 ; 72   |        unsigned DDIV   :3;
                              721 ; 73   |        unsigned PDIV   :5;
                              722 ; 74   |        int PWDN        :1;
                              723 ; 75   |        int ACKEN       :1;
                              724 ; 76   |        int LOCK        :1;
                              725 ; 77   |        unsigned ADIV1  :3;
                              726 ; 78   |        unsigned DDIV_MSB:1;
                              727 ; 79   |    } B;
                              728 ; 80   |
                              729 ; 81   |    int I;
                              730 ; 82   |    unsigned int U;
                              731 ; 83   |
                              732 ; 84   |} ccr_type;
                              733 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              734 ; 86   |
                              735 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              736 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              737 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              738 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              739 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              740 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              741 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              742 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              743 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              744 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              745 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              746 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              747 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              748 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              749 ; 101  |
                              750 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              751 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              752 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              753 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              754 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              755 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              756 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              757 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              758 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              759 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                              760 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              761 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              762 ; 114  |
                              763 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              764 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              765 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              766 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              767 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              768 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              769 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              770 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              771 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              772 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              773 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              774 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              775 ; 127  |
                              776 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              777 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              778 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                              779 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              780 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              781 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              782 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              783 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              784 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              785 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              786 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              787 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              788 ; 140  |
                              789 ; 141  |typedef union               
                              790 ; 142  |{
                              791 ; 143  |    struct
                              792 ; 144  |   {
                              793 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              794 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              795 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              796 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              797 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              798 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              799 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              800 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              801 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              802 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              803 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              804 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              805 ; 157  |    } B;
                              806 ; 158  |
                              807 ; 159  |    int I;
                              808 ; 160  |    unsigned int U;
                              809 ; 161  |
                              810 ; 162  |} rcr_type;
                              811 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              812 ; 164  |
                              813 ; 165  |
                              814 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              815 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              816 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              817 ; 169  |
                              818 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              819 ; 171  |
                              820 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              821 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                              822 ; 174  |typedef union               
                              823 ; 175  |{
                              824 ; 176  |    struct
                              825 ; 177  |   {
                              826 ; 178  |        int LOW;
                              827 ; 179  |    } B;
                              828 ; 180  |
                              829 ; 181  |    int I;
                              830 ; 182  |    unsigned int U;
                              831 ; 183  |
                              832 ; 184  |} dclkcntl_type;
                              833 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              834 ; 186  |
                              835 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              836 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              837 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              838 ; 190  |
                              839 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              840 ; 192  |
                              841 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                              842 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              843 ; 195  |typedef union               
                              844 ; 196  |{
                              845 ; 197  |    struct
                              846 ; 198  |   {
                              847 ; 199  |        int HIGH;
                              848 ; 200  |    } B;
                              849 ; 201  |
                              850 ; 202  |    int I;
                              851 ; 203  |    unsigned int U;
                              852 ; 204  |
                              853 ; 205  |} dclkcntu_type;
                              854 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              855 ; 207  |
                              856 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                              857 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                              858 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              859 ; 211  |
                              860 ; 212  |// Clock count register (lower)
                              861 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              862 ; 214  |// Clock count register (upper)
                              863 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              864 ; 216  |// Cycle steal count register
                              865 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              866 ; 218  |
                              867 ; 219  |#endif
                              868 ; 220  |
                              869 ; 221  |
                              870 
                              872 
                              873 ; 18   |#include "regscore.h"
                              874 
                              876 
                              877 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              878 ; 2    |#define __REGS_STATUS_INC 1
                              879 ; 3    |
                              880 ; 4    |
                              881 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              882 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                              883 ; 7    |#define HW_OMR_MA_BITPOS 0
                              884 ; 8    |#define HW_OMR_MB_BITPOS 1
                              885 ; 9    |#define HW_OMR_DE_BITPOS 2
                              886 ; 10   |#define HW_OMR_YE_BITPOS 3
                              887 ; 11   |#define HW_OMR_MC_BITPOS 4
                              888 ; 12   |#define HW_OMR_SD_BITPOS 6
                              889 ; 13   |
                              890 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              891 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              892 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              893 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              894 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              895 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              896 ; 20   |
                              897 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              898 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              899 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              900 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              901 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                              902 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              903 ; 27   |
                              904 ; 28   |
                              905 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              906 ; 30   |//  Status Register (HW_SR) Bit Positions
                              907 ; 31   |#define HW_SR_C_BITPOS 0
                              908 ; 32   |#define HW_SR_O_BITPOS 1
                              909 ; 33   |#define HW_SR_Z_BITPOS 2
                              910 ; 34   |#define HW_SR_N_BITPOS 3
                              911 ; 35   |#define HW_SR_U_BITPOS 4
                              912 ; 36   |#define HW_SR_E_BITPOS 5
                              913 ; 37   |#define HW_SR_L_BITPOS 6
                              914 ; 38   |#define HW_SR_IM_BITPOS 8
                              915 ; 39   |#define HW_SR_IM0_BITPOS 8
                              916 ; 40   |#define HW_SR_IM1_BITPOS 9
                              917 ; 41   |#define HW_SR_SM_BITPOS 10
                              918 ; 42   |#define HW_SR_SM0_BITPOS 10
                              919 ; 43   |#define HW_SR_SM1_BITPOS 11
                              920 ; 44   |#define HW_SR_TM_BITPOS 13
                              921 ; 45   |#define HW_SR_DP_BITPOS 14
                              922 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              923 ; 47   |
                              924 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              925 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              926 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              927 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              928 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              929 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              930 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              931 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              932 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              933 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              934 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              935 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              936 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              937 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              938 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              939 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              940 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              941 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              942 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              943 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              944 ; 68   |
                              945 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              946 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              947 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              948 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              949 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              950 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              951 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              952 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              953 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              954 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              955 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              956 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              957 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              958 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              959 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              960 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              961 ; 85   |
                              962 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              963 ; 87   |//  RAM/ROM Config Register Bit Positions
                              964 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              965 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              966 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              967 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              968 ; 92   |#endif
                              969 ; 93   |
                              970 ; 94   |
                              971 
                              973 
                              974 ; 19   |#include "regscodec.h"
                              975 
                              977 
                              978 ; 1    |#if !(defined(regscodecinc))
                              979 ; 2    |#define regscodecinc 1
                              980 ; 3    |
                              981 ; 4    |
                              982 ; 5    |
                              983 ; 6    |#include "types.h"
                              984 
                              986 
                              987 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              988 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              989 ; 3    |//
                              990 ; 4    |// Filename: types.h
                              991 ; 5    |// Description: Standard data types
                              992 ; 6    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              993 ; 7    |
                              994 ; 8    |#ifndef _TYPES_H
                              995 ; 9    |#define _TYPES_H
                              996 ; 10   |
                              997 ; 11   |// TODO:  move this outta here!
                              998 ; 12   |#if !defined(NOERROR)
                              999 ; 13   |#define NOERROR 0
                             1000 ; 14   |#define SUCCESS 0
                             1001 ; 15   |#endif 
                             1002 ; 16   |#if !defined(SUCCESS)
                             1003 ; 17   |#define SUCCESS  0
                             1004 ; 18   |#endif
                             1005 ; 19   |#if !defined(ERROR)
                             1006 ; 20   |#define ERROR   -1
                             1007 ; 21   |#endif
                             1008 ; 22   |#if !defined(FALSE)
                             1009 ; 23   |#define FALSE 0
                             1010 ; 24   |#endif
                             1011 ; 25   |#if !defined(TRUE)
                             1012 ; 26   |#define TRUE  1
                             1013 ; 27   |#endif
                             1014 ; 28   |
                             1015 ; 29   |#if !defined(NULL)
                             1016 ; 30   |#define NULL 0
                             1017 ; 31   |#endif
                             1018 ; 32   |
                             1019 ; 33   |#define MAX_INT     0x7FFFFF
                             1020 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1021 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1022 ; 36   |#define MAX_ULONG   (-1) 
                             1023 ; 37   |
                             1024 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1025 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1026 ; 40   |
                             1027 ; 41   |
                             1028 ; 42   |#define BYTE    unsigned char       // btVarName
                             1029 ; 43   |#define CHAR    signed char         // cVarName
                             1030 ; 44   |#define USHORT  unsigned short      // usVarName
                             1031 ; 45   |#define SHORT   unsigned short      // sVarName
                             1032 ; 46   |#define WORD    unsigned int        // wVarName
                             1033 ; 47   |#define INT     signed int          // iVarName
                             1034 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1035 ; 49   |#define LONG    signed long         // lVarName
                             1036 ; 50   |#define BOOL    unsigned int        // bVarName
                             1037 ; 51   |#define FRACT   _fract              // frVarName
                             1038 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1039 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1040 ; 54   |#define FLOAT   float               // fVarName
                             1041 ; 55   |#define DBL     double              // dVarName
                             1042 ; 56   |#define ENUM    enum                // eVarName
                             1043 ; 57   |#define CMX     _complex            // cmxVarName
                             1044 ; 58   |typedef WORD UCS3;                   // 
                             1045 ; 59   |
                             1046 ; 60   |#define UINT16  unsigned short
                             1047 ; 61   |#define UINT8   unsigned char   
                             1048 ; 62   |#define UINT32  unsigned long
                             1049 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1050 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1051 ; 65   |#define WCHAR   UINT16
                             1052 ; 66   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1053 ; 67   |//UINT128 is 16 bytes or 6 words
                             1054 ; 68   |typedef struct UINT128_3500 {   
                             1055 ; 69   |    int val[6];     
                             1056 ; 70   |} UINT128_3500;
                             1057 ; 71   |
                             1058 ; 72   |#define UINT128   UINT128_3500
                             1059 ; 73   |
                             1060 ; 74   |// Little endian word packed byte strings:   
                             1061 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1062 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1063 ; 77   |// Little endian word packed byte strings:   
                             1064 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1065 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1066 ; 80   |
                             1067 ; 81   |// Declare Memory Spaces To Use When Coding
                             1068 ; 82   |// A. Sector Buffers
                             1069 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1070 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1071 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1072 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1073 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1074 ; 88   |// B. Media DDI Memory
                             1075 ; 89   |#define MEDIA_DDI_MEM _Y
                             1076 ; 90   |
                             1077 ; 91   |
                             1078 ; 92   |
                             1079 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1080 ; 94   |// Examples of circular pointers:
                             1081 ; 95   |//    INT CIRC cpiVarName
                             1082 ; 96   |//    DWORD CIRC cpdwVarName
                             1083 ; 97   |
                             1084 ; 98   |#define RETCODE INT                 // rcVarName
                             1085 ; 99   |
                             1086 ; 100  |// generic bitfield structure
                             1087 ; 101  |struct Bitfield {
                             1088 ; 102  |    unsigned int B0  :1;
                             1089 ; 103  |    unsigned int B1  :1;
                             1090 ; 104  |    unsigned int B2  :1;
                             1091 ; 105  |    unsigned int B3  :1;
                             1092 ; 106  |    unsigned int B4  :1;
                             1093 ; 107  |    unsigned int B5  :1;
                             1094 ; 108  |    unsigned int B6  :1;
                             1095 ; 109  |    unsigned int B7  :1;
                             1096 ; 110  |    unsigned int B8  :1;
                             1097 ; 111  |    unsigned int B9  :1;
                             1098 ; 112  |    unsigned int B10 :1;
                             1099 ; 113  |    unsigned int B11 :1;
                             1100 ; 114  |    unsigned int B12 :1;
                             1101 ; 115  |    unsigned int B13 :1;
                             1102 ; 116  |    unsigned int B14 :1;
                             1103 ; 117  |    unsigned int B15 :1;
                             1104 ; 118  |    unsigned int B16 :1;
                             1105 ; 119  |    unsigned int B17 :1;
                             1106 ; 120  |    unsigned int B18 :1;
                             1107 ; 121  |    unsigned int B19 :1;
                             1108 ; 122  |    unsigned int B20 :1;
                             1109 ; 123  |    unsigned int B21 :1;
                             1110 ; 124  |    unsigned int B22 :1;
                             1111 ; 125  |    unsigned int B23 :1;
                             1112 ; 126  |};
                             1113 ; 127  |
                             1114 ; 128  |union BitInt {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1115 ; 129  |        struct Bitfield B;
                             1116 ; 130  |        int        I;
                             1117 ; 131  |};
                             1118 ; 132  |
                             1119 ; 133  |#define MAX_MSG_LENGTH 10
                             1120 ; 134  |struct CMessage
                             1121 ; 135  |{
                             1122 ; 136  |        unsigned int m_uLength;
                             1123 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1124 ; 138  |};
                             1125 ; 139  |
                             1126 ; 140  |typedef struct {
                             1127 ; 141  |    WORD m_wLength;
                             1128 ; 142  |    WORD m_wMessage;
                             1129 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1130 ; 144  |} Message;
                             1131 ; 145  |
                             1132 ; 146  |struct MessageQueueDescriptor
                             1133 ; 147  |{
                             1134 ; 148  |        int *m_pBase;
                             1135 ; 149  |        int m_iModulo;
                             1136 ; 150  |        int m_iSize;
                             1137 ; 151  |        int *m_pHead;
                             1138 ; 152  |        int *m_pTail;
                             1139 ; 153  |};
                             1140 ; 154  |
                             1141 ; 155  |struct ModuleEntry
                             1142 ; 156  |{
                             1143 ; 157  |    int m_iSignaledEventMask;
                             1144 ; 158  |    int m_iWaitEventMask;
                             1145 ; 159  |    int m_iResourceOfCode;
                             1146 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1147 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1148 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1149 ; 163  |    int m_uTimeOutHigh;
                             1150 ; 164  |    int m_uTimeOutLow;
                             1151 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1152 ; 166  |};
                             1153 ; 167  |
                             1154 ; 168  |union WaitMask{
                             1155 ; 169  |    struct B{
                             1156 ; 170  |        unsigned int m_bNone     :1;
                             1157 ; 171  |        unsigned int m_bMessage  :1;
                             1158 ; 172  |        unsigned int m_bTimer    :1;
                             1159 ; 173  |        unsigned int m_bButton   :1;
                             1160 ; 174  |    } B;
                             1161 ; 175  |    int I;
                             1162 ; 176  |} ;
                             1163 ; 177  |
                             1164 ; 178  |
                             1165 ; 179  |struct Button {
                             1166 ; 180  |        WORD wButtonEvent;
                             1167 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1168 ; 182  |};
                             1169 ; 183  |
                             1170 ; 184  |struct Message {
                             1171 ; 185  |        WORD wMsgLength;
                             1172 ; 186  |        WORD wMsgCommand;
                             1173 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1174 ; 188  |};
                             1175 ; 189  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1176 ; 190  |union EventTypes {
                             1177 ; 191  |        struct CMessage msg;
                             1178 ; 192  |        struct Button Button ;
                             1179 ; 193  |        struct Message Message;
                             1180 ; 194  |};
                             1181 ; 195  |
                             1182 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1183 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1184 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1185 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1186 ; 200  |
                             1187 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1188 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1189 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1190 ; 204  |
                             1191 ; 205  |#if DEBUG
                             1192 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1193 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1194 ; 208  |#else 
                             1195 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1196 ; 210  |#define DebugBuildAssert(x)    
                             1197 ; 211  |#endif
                             1198 ; 212  |
                             1199 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1200 ; 214  |//  #pragma asm
                             1201 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1202 ; 216  |//  #pragma endasm
                             1203 ; 217  |
                             1204 ; 218  |
                             1205 ; 219  |#ifdef COLOR_262K
                             1206 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1207 ; 221  |#elif defined(COLOR_65K)
                             1208 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1209 ; 223  |#else
                             1210 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1211 ; 225  |#endif
                             1212 ; 226  |    
                             1213 ; 227  |#endif // #ifndef _TYPES_H
                             1214 
                             1216 
                             1217 ; 7    |
                             1218 ; 8    |
                             1219 ; 9    |
                             1220 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1221 ; 11   |
                             1222 ; 12   |//   SYSTEM STMP Registers 
                             1223 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1224 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1225 ; 15   |
                             1226 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1227 ; 17   |
                             1228 ; 18   |
                             1229 ; 19   |
                             1230 ; 20   |
                             1231 ; 21   |
                             1232 ; 22   |
                             1233 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1234 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1235 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1236 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1237 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1238 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1239 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1240 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1241 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1242 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1243 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1244 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1245 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1246 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1247 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1248 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1249 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1250 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1251 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             1252 ; 42   |
                             1253 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1254 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1255 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1256 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1257 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1258 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1259 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1260 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1261 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1262 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1263 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1264 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1265 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1266 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1267 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1268 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1269 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1270 ; 60   |
                             1271 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1272 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1273 ; 63   |
                             1274 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1275 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1276 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1277 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1278 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1279 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1280 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1281 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1282 ; 72   |
                             1283 ; 73   |#if defined(CAPLESS_HP)
                             1284 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1285 ; 75   |#else 
                             1286 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1287 ; 77   |#endif
                             1288 ; 78   |
                             1289 ; 79   |// Headphone control register
                             1290 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1291 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1292 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1293 ; 83   |typedef union               
                             1294 ; 84   |{
                             1295 ; 85   |    struct {
                             1296 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1297 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1298 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1299 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1300 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1301 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1302 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1303 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1304 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1305 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1306 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1307 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1308 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1309 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1310 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1311 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1312 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1313 ; 103  |    } B;
                             1314 ; 104  |    int I;
                             1315 ; 105  |    unsigned int U;
                             1316 ; 106  |} hpctrl_type;
                             1317 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1318 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1319 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1320 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1321 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1322 ; 112  |
                             1323 ; 113  |
                             1324 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1325 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1326 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1327 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1328 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1329 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1330 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1331 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1332 ; 122  |
                             1333 ; 123  |
                             1334 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1335 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1336 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1337 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1338 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1339 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1340 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1341 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1342 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1343 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1344 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1345 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1346 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1347 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1348 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1349 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1350 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1351 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1352 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1353 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1354 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1355 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1356 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1357 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1358 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1359 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1360 ; 150  |
                             1361 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1362 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1363 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1364 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1365 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1366 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1367 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1368 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1369 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1370 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1371 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1372 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1373 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1374 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1375 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1376 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1377 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1378 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1379 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1380 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1381 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1382 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1383 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1384 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1385 ; 175  |
                             1386 ; 176  |
                             1387 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1388 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1389 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1390 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1391 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1392 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1393 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1394 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1395 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1396 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1397 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1398 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1399 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1400 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1401 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1402 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1403 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1404 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1405 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1406 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1407 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1408 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1409 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1410 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1411 ; 201  |
                             1412 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1413 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1414 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1415 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1416 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1417 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1418 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1419 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1420 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1421 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1422 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1423 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1424 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1425 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1426 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1427 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1428 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1429 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1430 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1431 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1432 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1433 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1434 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1435 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1436 ; 226  |
                             1437 ; 227  |typedef union               
                             1438 ; 228  |{
                             1439 ; 229  |    struct {
                             1440 ; 230  |        int INV_USB_CLK            : 1;
                             1441 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1442 ; 232  |        int HOLD_GND               : 1;
                             1443 ; 233  |        int ACKI                   : 1;
                             1444 ; 234  |        int ASD2X                  : 1;
                             1445 ; 235  |        int PCPCU                  : 1;
                             1446 ; 236  |        int PCPCD                  : 1;
                             1447 ; 237  |        int DCKI                   : 1;
                             1448 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1449 ; 239  |        int PSRN                   : 1;
                             1450 ; 240  |        int FX2                    : 1;
                             1451 ; 241  |        int VCOS                   : 1;
                             1452 ; 242  |        int XBCO                   : 1;
                             1453 ; 243  |        int XBGC                   : 1;
                             1454 ; 244  |        int ADTHD                  : 1;
                             1455 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1456 ; 246  |        int PWDADC                 : 1;
                             1457 ; 247  |        int MICBIAS1               : 1;
                             1458 ; 248  |        int EZD                    : 1;
                             1459 ; 249  |        int DZCDA                  : 1;
                             1460 ; 250  |        int DZCFM                  : 1;
                             1461 ; 251  |        int DZCLI                  : 1;
                             1462 ; 252  |        int DZCMI                  : 1;
                             1463 ; 253  |        int DZCMA                  : 1;
                             1464 ; 254  |    } B;
                             1465 ; 255  |    int I;
                             1466 ; 256  |    unsigned int U;
                             1467 ; 257  |} mix_tbr_type;
                             1468 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1469 ; 259  |
                             1470 ; 260  |
                             1471 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1472 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1473 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1474 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1475 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1476 ; 266  |
                             1477 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1478 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1479 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1480 ; 270  |
                             1481 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1482 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1483 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1484 ; 274  |
                             1485 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1486 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1487 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1488 ; 278  |
                             1489 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1490 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1491 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1492 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1493 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1494 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1495 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1496 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1497 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1498 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1499 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1500 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1501 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1502 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1503 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1504 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1505 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1506 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1507 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1508 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1509 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1510 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1511 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1512 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1513 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1514 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1515 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1516 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1517 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1518 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1519 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1520 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1521 ; 311  |
                             1522 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1523 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1524 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1525 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1526 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1527 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1528 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1529 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1530 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1531 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1532 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1533 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1534 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1535 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1536 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1537 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1538 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1539 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1540 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1541 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1542 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1543 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1544 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1545 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1546 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1547 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1548 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1549 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1550 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1551 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1552 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1553 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1554 ; 344  |
                             1555 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1556 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1557 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1558 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1559 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             1560 ; 350  |
                             1561 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             1562 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1563 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1564 ; 354  |
                             1565 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             1566 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1567 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1568 ; 358  |
                             1569 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1570 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1571 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1572 ; 362  |
                             1573 ; 363  |
                             1574 ; 364  |typedef union               
                             1575 ; 365  |{
                             1576 ; 366  |    struct
                             1577 ; 367  |    {
                             1578 ; 368  |        unsigned MR :5;
                             1579 ; 369  |        int         :3;
                             1580 ; 370  |        unsigned ML :5;
                             1581 ; 371  |        int         :2;
                             1582 ; 372  |        int MUTE    :1;
                             1583 ; 373  |    } B;
                             1584 ; 374  |    int I;
                             1585 ; 375  |    unsigned int U;
                             1586 ; 376  |} mix_mastervr_type;
                             1587 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1588 ; 378  |
                             1589 ; 379  |
                             1590 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1591 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1592 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1593 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1594 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1595 ; 385  |
                             1596 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1597 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1598 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1599 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1600 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1601 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1602 ; 392  |
                             1603 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1604 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1605 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1606 ; 396  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1607 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1608 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1609 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1610 ; 400  |
                             1611 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1612 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1613 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1614 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1615 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1616 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1617 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1618 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1619 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1620 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1621 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1622 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1623 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             1624 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1625 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1626 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1627 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1628 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1629 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1630 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1631 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1632 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1633 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1634 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1635 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1636 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1637 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1638 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1639 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1640 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1641 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1642 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             1643 ; 433  |
                             1644 ; 434  |typedef union               
                             1645 ; 435  |{
                             1646 ; 436  |    struct {
                             1647 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1648 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1649 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1650 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1651 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1652 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1653 ; 443  |    } B;
                             1654 ; 444  |    int I;
                             1655 ; 445  |    unsigned int U;
                             1656 ; 446  |} mix_micinvr_type;
                             1657 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1658 ; 448  |
                             1659 ; 449  |
                             1660 ; 450  |
                             1661 ; 451  |
                             1662 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1663 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1664 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1665 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1666 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1667 ; 457  |
                             1668 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1669 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1670 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1671 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1672 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1673 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1674 ; 464  |
                             1675 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1676 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1677 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1678 ; 468  |
                             1679 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1680 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1681 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1682 ; 472  |
                             1683 ; 473  |typedef union               
                             1684 ; 474  |{
                             1685 ; 475  |    struct {
                             1686 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1687 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1688 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1689 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1690 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1691 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1692 ; 482  |    } B;
                             1693 ; 483  |    int I;
                             1694 ; 484  |    unsigned int U;
                             1695 ; 485  |} mix_line1invr_type;
                             1696 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1697 ; 487  |
                             1698 ; 488  |
                             1699 ; 489  |
                             1700 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1701 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1702 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1703 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1704 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             1705 ; 495  |
                             1706 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1707 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1708 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1709 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1710 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1711 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1712 ; 502  |
                             1713 ; 503  |
                             1714 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1715 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1716 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1717 ; 507  |
                             1718 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1719 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1720 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1721 ; 511  |
                             1722 ; 512  |typedef union               
                             1723 ; 513  |{
                             1724 ; 514  |    struct {
                             1725 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1726 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1727 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1728 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1729 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1730 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1731 ; 521  |    } B;
                             1732 ; 522  |    int I;
                             1733 ; 523  |    unsigned int U;
                             1734 ; 524  |} mix_line2invr_type;
                             1735 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1736 ; 526  |
                             1737 ; 527  |
                             1738 ; 528  |
                             1739 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1740 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1741 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1742 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1743 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1744 ; 534  |
                             1745 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1746 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1747 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             1748 ; 538  |
                             1749 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1750 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1751 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1752 ; 542  |
                             1753 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1754 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1755 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1756 ; 546  |
                             1757 ; 547  |typedef union               
                             1758 ; 548  |{
                             1759 ; 549  |    struct {
                             1760 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1761 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1762 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1763 ; 553  |    } B;
                             1764 ; 554  |    int I;
                             1765 ; 555  |    unsigned int U;
                             1766 ; 556  |} mix_dacinvr_type;
                             1767 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1768 ; 558  |
                             1769 ; 559  |
                             1770 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1771 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1772 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1773 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1774 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1775 ; 565  |
                             1776 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1777 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1778 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1779 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1780 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1781 ; 571  |
                             1782 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1783 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1784 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1785 ; 575  |
                             1786 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1787 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1788 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1789 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1790 ; 580  |
                             1791 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1792 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1793 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1794 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1795 ; 585  |
                             1796 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1797 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1798 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             1799 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1800 ; 590  |
                             1801 ; 591  |typedef union               
                             1802 ; 592  |{
                             1803 ; 593  |    struct {
                             1804 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1805 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1806 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1807 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1808 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             1809 ; 599  |    } B;
                             1810 ; 600  |    int I;
                             1811 ; 601  |    unsigned int U;
                             1812 ; 602  |} mix_recselr_type;
                             1813 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1814 ; 604  |
                             1815 ; 605  |
                             1816 ; 606  |
                             1817 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1818 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1819 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1820 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1821 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1822 ; 612  |
                             1823 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1824 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1825 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             1826 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1827 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             1828 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1829 ; 619  |
                             1830 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1831 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1832 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1833 ; 623  |
                             1834 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1835 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1836 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1837 ; 627  |
                             1838 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1839 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1840 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1841 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1842 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1843 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1844 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1845 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1846 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1847 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1848 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1849 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1850 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1851 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1852 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1853 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1854 ; 644  |
                             1855 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1856 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1857 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1858 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1859 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1860 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1861 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1862 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1863 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1864 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1865 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1866 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1867 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1868 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1869 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1870 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             1871 ; 661  |
                             1872 ; 662  |typedef union               
                             1873 ; 663  |{
                             1874 ; 664  |    struct {
                             1875 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1876 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1877 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1878 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1879 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1880 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1881 ; 671  |    } B;
                             1882 ; 672  |    int I;
                             1883 ; 673  |    unsigned int U;
                             1884 ; 674  |} mix_adcgainr_type;
                             1885 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1886 ; 676  |
                             1887 ; 677  |
                             1888 ; 678  |
                             1889 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             1890 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1891 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1892 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1893 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1894 ; 684  |
                             1895 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1896 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1897 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1898 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1899 ; 689  |
                             1900 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1901 ; 691  |
                             1902 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1903 ; 693  |
                             1904 ; 694  |typedef union               
                             1905 ; 695  |{
                             1906 ; 696  |    struct {
                             1907 ; 697  |                int                     : 9;
                             1908 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1909 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1910 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1911 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1912 ; 702  |    } B;
                             1913 ; 703  |    int I;
                             1914 ; 704  |    unsigned int U;
                             1915 ; 705  |} mix_pwrdnr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1916 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1917 ; 707  |
                             1918 ; 708  |
                             1919 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1920 ; 710  |
                             1921 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1922 ; 712  |
                             1923 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1924 ; 714  |
                             1925 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1926 ; 716  |
                             1927 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1928 ; 718  |
                             1929 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1930 ; 720  |
                             1931 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1932 ; 722  |
                             1933 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1934 ; 724  |
                             1935 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1936 ; 726  |
                             1937 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1938 ; 728  |
                             1939 ; 729  |
                             1940 ; 730  |
                             1941 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1942 ; 732  |
                             1943 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1944 ; 734  |
                             1945 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1946 ; 736  |
                             1947 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1948 ; 738  |
                             1949 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1950 ; 740  |
                             1951 ; 741  |
                             1952 ; 742  |
                             1953 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             1954 ; 744  |
                             1955 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1956 ; 746  |
                             1957 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1958 ; 748  |
                             1959 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             1960 ; 750  |
                             1961 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             1962 ; 752  |
                             1963 ; 753  |
                             1964 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1965 ; 755  |
                             1966 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             1967 ; 757  |
                             1968 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1969 ; 759  |
                             1970 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1971 ; 761  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1972 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1973 ; 763  |
                             1974 ; 764  |
                             1975 ; 765  |typedef union               
                             1976 ; 766  |{
                             1977 ; 767  |    struct {
                             1978 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1979 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1980 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1981 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1982 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1983 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1984 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1985 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1986 ; 776  |    } B;
                             1987 ; 777  |    int I;
                             1988 ; 778  |    unsigned int U;
                             1989 ; 779  |} mix_test_type;
                             1990 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             1991 ; 781  |
                             1992 ; 782  |
                             1993 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1994 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1995 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1996 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1997 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1998 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1999 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             2000 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             2001 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             2002 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             2003 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             2004 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             2005 ; 795  |
                             2006 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             2007 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             2008 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             2009 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             2010 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             2011 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             2012 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             2013 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             2014 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             2015 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             2016 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             2017 ; 807  |
                             2018 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             2019 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             2020 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             2021 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             2022 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             2023 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             2024 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2025 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             2026 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             2027 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             2028 ; 818  |
                             2029 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             2030 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             2031 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             2032 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             2033 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             2034 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             2035 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             2036 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             2037 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             2038 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             2039 ; 829  |
                             2040 ; 830  |typedef union               
                             2041 ; 831  |{
                             2042 ; 832  |    struct {
                             2043 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             2044 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             2045 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             2046 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             2047 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2048 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2049 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2050 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2051 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2052 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2053 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2054 ; 844  |    } B;
                             2055 ; 845  |    int I;
                             2056 ; 846  |    unsigned int U;
                             2057 ; 847  |} ref_ctrl_type;
                             2058 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             2059 ; 849  |
                             2060 ; 850  |
                             2061 ; 851  |
                             2062 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             2063 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2064 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2065 ; 855  |//////  DAC Registers
                             2066 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2067 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             2068 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2069 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2070 ; 860  |
                             2071 ; 861  |
                             2072 ; 862  |
                             2073 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2074 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2075 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2076 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             2077 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2078 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2079 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2080 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2081 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2082 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2083 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2084 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2085 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2086 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2087 ; 877  |
                             2088 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2089 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2090 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2091 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2092 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2093 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2094 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2095 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2096 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2097 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2098 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2099 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2100 ; 890  |
                             2101 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             2102 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2103 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2104 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2105 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2106 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2107 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2108 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2109 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2110 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2111 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2112 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2113 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2114 ; 904  |
                             2115 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2116 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2117 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2118 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2119 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2120 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             2121 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2122 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2123 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2124 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             2125 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2126 ; 916  |
                             2127 ; 917  |
                             2128 ; 918  |typedef union               
                             2129 ; 919  |{
                             2130 ; 920  |    struct {
                             2131 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2132 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2133 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2134 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2135 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2136 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2137 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2138 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2139 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2140 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2141 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2142 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2143 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2144 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2145 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2146 ; 936  |    } B;
                             2147 ; 937  |    int I;
                             2148 ; 938  |    unsigned int U;
                             2149 ; 939  |} dac_csr_type;
                             2150 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2151 ; 941  |
                             2152 ; 942  |
                             2153 ; 943  |
                             2154 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2155 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2156 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2157 ; 947  |
                             2158 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2159 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2160 ; 950  |
                             2161 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2162 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2163 ; 953  |
                             2164 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2165 ; 955  |
                             2166 ; 956  |typedef union               
                             2167 ; 957  |{
                             2168 ; 958  |    struct {
                             2169 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2170 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2171 ; 961  |    } B;
                             2172 ; 962  |    int I;
                             2173 ; 963  |    unsigned int U;
                             2174 ; 964  |} dac_srr_type;
                             2175 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2176 ; 966  |
                             2177 ; 967  |
                             2178 ; 968  |
                             2179 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2180 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2181 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2182 ; 972  |
                             2183 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2184 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2185 ; 975  |
                             2186 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             2187 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             2188 ; 978  |
                             2189 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2190 ; 980  |
                             2191 ; 981  |typedef union               
                             2192 ; 982  |{
                             2193 ; 983  |    struct {
                             2194 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2195 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2196 ; 986  |    } B;
                             2197 ; 987  |    int I;
                             2198 ; 988  |    unsigned int U;
                             2199 ; 989  |} dac_wcr_type;
                             2200 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2201 ; 991  |
                             2202 ; 992  |
                             2203 ; 993  |
                             2204 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2205 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2206 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2207 ; 997  |
                             2208 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2209 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2210 ; 1000 |
                             2211 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2212 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             2213 ; 1003 |
                             2214 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2215 ; 1005 |
                             2216 ; 1006 |typedef union               
                             2217 ; 1007 |{
                             2218 ; 1008 |    struct {
                             2219 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2220 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2221 ; 1011 |    } B;
                             2222 ; 1012 |    int I;
                             2223 ; 1013 |    unsigned int U;
                             2224 ; 1014 |} dac_cpr_type;
                             2225 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2226 ; 1016 |
                             2227 ; 1017 |
                             2228 ; 1018 |
                             2229 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2230 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2231 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2232 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2233 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2234 ; 1024 |
                             2235 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2236 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2237 ; 1027 |
                             2238 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2239 ; 1029 |
                             2240 ; 1030 |typedef union               
                             2241 ; 1031 |{
                             2242 ; 1032 |    struct {
                             2243 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2244 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2245 ; 1035 |    } B;
                             2246 ; 1036 |    int I;
                             2247 ; 1037 |    unsigned int U;
                             2248 ; 1038 |} dac_mr_type;
                             2249 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2250 ; 1040 |
                             2251 ; 1041 |
                             2252 ; 1042 |
                             2253 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2254 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2255 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2256 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2257 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2258 ; 1048 |
                             2259 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2260 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             2261 ; 1051 |
                             2262 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2263 ; 1053 |
                             2264 ; 1054 |typedef union               
                             2265 ; 1055 |{
                             2266 ; 1056 |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2267 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2268 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2269 ; 1059 |    } B;
                             2270 ; 1060 |    int I;
                             2271 ; 1061 |    unsigned int U;
                             2272 ; 1062 |} dac_bar_type;
                             2273 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2274 ; 1064 |
                             2275 ; 1065 |
                             2276 ; 1066 |
                             2277 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2278 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2279 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2280 ; 1070 |
                             2281 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2282 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2283 ; 1073 |
                             2284 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             2285 ; 1075 |
                             2286 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2287 ; 1077 |
                             2288 ; 1078 |typedef union               
                             2289 ; 1079 |{
                             2290 ; 1080 |    struct {
                             2291 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2292 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2293 ; 1083 |    } B;
                             2294 ; 1084 |    int I;
                             2295 ; 1085 |    unsigned int U;
                             2296 ; 1086 |} dac_icr_type;
                             2297 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2298 ; 1088 |
                             2299 ; 1089 |
                             2300 ; 1090 |
                             2301 ; 1091 |
                             2302 ; 1092 |
                             2303 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2304 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2305 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2306 ; 1096 |//////  ADC Registers
                             2307 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2308 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2309 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2310 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2311 ; 1101 |
                             2312 ; 1102 |
                             2313 ; 1103 |
                             2314 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2315 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2316 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2317 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2318 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2319 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2320 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2321 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2322 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2323 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2324 ; 1114 |
                             2325 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2326 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2327 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2328 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2329 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2330 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2331 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2332 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2333 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2334 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2335 ; 1125 |
                             2336 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2337 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2338 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2339 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2340 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2341 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             2342 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             2343 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2344 ; 1134 |
                             2345 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2346 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2347 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2348 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2349 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2350 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2351 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2352 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2353 ; 1143 |
                             2354 ; 1144 |typedef union               
                             2355 ; 1145 |{
                             2356 ; 1146 |    struct {
                             2357 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2358 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2359 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2360 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2361 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2362 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2363 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2364 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2365 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2366 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2367 ; 1157 |    } B;
                             2368 ; 1158 |    int I;
                             2369 ; 1159 |    unsigned int U;
                             2370 ; 1160 |} adc_csr_type;
                             2371 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2372 ; 1162 |
                             2373 ; 1163 |
                             2374 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2375 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2376 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2377 ; 1167 |
                             2378 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2379 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2380 ; 1170 |
                             2381 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             2382 ; 1172 |
                             2383 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2384 ; 1174 |
                             2385 ; 1175 |typedef union               
                             2386 ; 1176 |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2387 ; 1177 |    struct {
                             2388 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2389 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2390 ; 1180 |    } B;
                             2391 ; 1181 |    int I;
                             2392 ; 1182 |    unsigned int U;
                             2393 ; 1183 |} adc_wcr_type;
                             2394 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2395 ; 1185 |
                             2396 ; 1186 |
                             2397 ; 1187 |
                             2398 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2399 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2400 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2401 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2402 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2403 ; 1193 |
                             2404 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2405 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             2406 ; 1196 |
                             2407 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2408 ; 1198 |
                             2409 ; 1199 |typedef union               
                             2410 ; 1200 |{
                             2411 ; 1201 |    struct {
                             2412 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2413 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2414 ; 1204 |    } B;
                             2415 ; 1205 |    int I;
                             2416 ; 1206 |    unsigned int U;
                             2417 ; 1207 |} adc_bar_type;
                             2418 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2419 ; 1209 |
                             2420 ; 1210 |
                             2421 ; 1211 |
                             2422 ; 1212 |
                             2423 ; 1213 |
                             2424 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2425 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2426 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2427 ; 1217 |
                             2428 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2429 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2430 ; 1220 |
                             2431 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             2432 ; 1222 |
                             2433 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2434 ; 1224 |
                             2435 ; 1225 |typedef union               
                             2436 ; 1226 |{
                             2437 ; 1227 |    struct {
                             2438 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2439 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2440 ; 1230 |    } B;
                             2441 ; 1231 |    int I;
                             2442 ; 1232 |    unsigned int U;
                             2443 ; 1233 |} adc_cpr_type;
                             2444 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2445 ; 1235 |
                             2446 ; 1236 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2447 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2448 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2449 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2450 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2451 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2452 ; 1242 |
                             2453 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2454 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2455 ; 1245 |
                             2456 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2457 ; 1247 |
                             2458 ; 1248 |typedef union               
                             2459 ; 1249 |{
                             2460 ; 1250 |    struct {
                             2461 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2462 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2463 ; 1253 |    } B;
                             2464 ; 1254 |    int I;
                             2465 ; 1255 |    unsigned int U;
                             2466 ; 1256 |} adc_mr_type;
                             2467 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2468 ; 1258 |
                             2469 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2470 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2471 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2472 ; 1262 |
                             2473 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2474 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2475 ; 1265 |
                             2476 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2477 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2478 ; 1268 |
                             2479 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2480 ; 1270 |
                             2481 ; 1271 |typedef union               
                             2482 ; 1272 |{
                             2483 ; 1273 |    struct {
                             2484 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2485 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2486 ; 1276 |    } B;
                             2487 ; 1277 |    int I;
                             2488 ; 1278 |    unsigned int U;
                             2489 ; 1279 |} adc_srr_type;
                             2490 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2491 ; 1281 |
                             2492 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2493 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2494 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2495 ; 1285 |
                             2496 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2497 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2498 ; 1288 |
                             2499 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             2500 ; 1290 |
                             2501 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2502 ; 1292 |
                             2503 ; 1293 |typedef union               
                             2504 ; 1294 |{
                             2505 ; 1295 |    struct {
                             2506 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2507 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2508 ; 1298 |    } B;
                             2509 ; 1299 |    int I;
                             2510 ; 1300 |    unsigned int U;
                             2511 ; 1301 |} adc_icr_type;
                             2512 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2513 ; 1303 |
                             2514 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             2515 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             2516 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2517 ; 1307 |
                             2518 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2519 ; 1309 |
                             2520 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2521 ; 1311 |
                             2522 ; 1312 |#endif
                             2523 ; 1313 |
                             2524 
                             2526 
                             2527 ; 20   |#include "regsdcdc.h"
                             2528 
                             2530 
                             2531 ; 1    |#if !(defined(regsdcdcinc))
                             2532 ; 2    |
                             2533 ; 3    |#define regssysteminc 1
                             2534 ; 4    |
                             2535 ; 5    |
                             2536 ; 6    |
                             2537 ; 7    |#include "types.h"
                             2538 
                             2540 
                             2541 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2542 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2543 ; 3    |//
                             2544 ; 4    |// Filename: types.h
                             2545 ; 5    |// Description: Standard data types
                             2546 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2547 ; 7    |
                             2548 ; 8    |#ifndef _TYPES_H
                             2549 ; 9    |#define _TYPES_H
                             2550 ; 10   |
                             2551 ; 11   |// TODO:  move this outta here!
                             2552 ; 12   |#if !defined(NOERROR)
                             2553 ; 13   |#define NOERROR 0
                             2554 ; 14   |#define SUCCESS 0
                             2555 ; 15   |#endif 
                             2556 ; 16   |#if !defined(SUCCESS)
                             2557 ; 17   |#define SUCCESS  0
                             2558 ; 18   |#endif
                             2559 ; 19   |#if !defined(ERROR)
                             2560 ; 20   |#define ERROR   -1
                             2561 ; 21   |#endif
                             2562 ; 22   |#if !defined(FALSE)
                             2563 ; 23   |#define FALSE 0
                             2564 ; 24   |#endif
                             2565 ; 25   |#if !defined(TRUE)
                             2566 ; 26   |#define TRUE  1
                             2567 ; 27   |#endif
                             2568 ; 28   |
                             2569 ; 29   |#if !defined(NULL)
                             2570 ; 30   |#define NULL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2571 ; 31   |#endif
                             2572 ; 32   |
                             2573 ; 33   |#define MAX_INT     0x7FFFFF
                             2574 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2575 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2576 ; 36   |#define MAX_ULONG   (-1) 
                             2577 ; 37   |
                             2578 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2579 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2580 ; 40   |
                             2581 ; 41   |
                             2582 ; 42   |#define BYTE    unsigned char       // btVarName
                             2583 ; 43   |#define CHAR    signed char         // cVarName
                             2584 ; 44   |#define USHORT  unsigned short      // usVarName
                             2585 ; 45   |#define SHORT   unsigned short      // sVarName
                             2586 ; 46   |#define WORD    unsigned int        // wVarName
                             2587 ; 47   |#define INT     signed int          // iVarName
                             2588 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2589 ; 49   |#define LONG    signed long         // lVarName
                             2590 ; 50   |#define BOOL    unsigned int        // bVarName
                             2591 ; 51   |#define FRACT   _fract              // frVarName
                             2592 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2593 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2594 ; 54   |#define FLOAT   float               // fVarName
                             2595 ; 55   |#define DBL     double              // dVarName
                             2596 ; 56   |#define ENUM    enum                // eVarName
                             2597 ; 57   |#define CMX     _complex            // cmxVarName
                             2598 ; 58   |typedef WORD UCS3;                   // 
                             2599 ; 59   |
                             2600 ; 60   |#define UINT16  unsigned short
                             2601 ; 61   |#define UINT8   unsigned char   
                             2602 ; 62   |#define UINT32  unsigned long
                             2603 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2604 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2605 ; 65   |#define WCHAR   UINT16
                             2606 ; 66   |
                             2607 ; 67   |//UINT128 is 16 bytes or 6 words
                             2608 ; 68   |typedef struct UINT128_3500 {   
                             2609 ; 69   |    int val[6];     
                             2610 ; 70   |} UINT128_3500;
                             2611 ; 71   |
                             2612 ; 72   |#define UINT128   UINT128_3500
                             2613 ; 73   |
                             2614 ; 74   |// Little endian word packed byte strings:   
                             2615 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2616 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2617 ; 77   |// Little endian word packed byte strings:   
                             2618 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2619 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2620 ; 80   |
                             2621 ; 81   |// Declare Memory Spaces To Use When Coding
                             2622 ; 82   |// A. Sector Buffers
                             2623 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2624 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2625 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2626 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2627 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2628 ; 88   |// B. Media DDI Memory
                             2629 ; 89   |#define MEDIA_DDI_MEM _Y
                             2630 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2631 ; 91   |
                             2632 ; 92   |
                             2633 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2634 ; 94   |// Examples of circular pointers:
                             2635 ; 95   |//    INT CIRC cpiVarName
                             2636 ; 96   |//    DWORD CIRC cpdwVarName
                             2637 ; 97   |
                             2638 ; 98   |#define RETCODE INT                 // rcVarName
                             2639 ; 99   |
                             2640 ; 100  |// generic bitfield structure
                             2641 ; 101  |struct Bitfield {
                             2642 ; 102  |    unsigned int B0  :1;
                             2643 ; 103  |    unsigned int B1  :1;
                             2644 ; 104  |    unsigned int B2  :1;
                             2645 ; 105  |    unsigned int B3  :1;
                             2646 ; 106  |    unsigned int B4  :1;
                             2647 ; 107  |    unsigned int B5  :1;
                             2648 ; 108  |    unsigned int B6  :1;
                             2649 ; 109  |    unsigned int B7  :1;
                             2650 ; 110  |    unsigned int B8  :1;
                             2651 ; 111  |    unsigned int B9  :1;
                             2652 ; 112  |    unsigned int B10 :1;
                             2653 ; 113  |    unsigned int B11 :1;
                             2654 ; 114  |    unsigned int B12 :1;
                             2655 ; 115  |    unsigned int B13 :1;
                             2656 ; 116  |    unsigned int B14 :1;
                             2657 ; 117  |    unsigned int B15 :1;
                             2658 ; 118  |    unsigned int B16 :1;
                             2659 ; 119  |    unsigned int B17 :1;
                             2660 ; 120  |    unsigned int B18 :1;
                             2661 ; 121  |    unsigned int B19 :1;
                             2662 ; 122  |    unsigned int B20 :1;
                             2663 ; 123  |    unsigned int B21 :1;
                             2664 ; 124  |    unsigned int B22 :1;
                             2665 ; 125  |    unsigned int B23 :1;
                             2666 ; 126  |};
                             2667 ; 127  |
                             2668 ; 128  |union BitInt {
                             2669 ; 129  |        struct Bitfield B;
                             2670 ; 130  |        int        I;
                             2671 ; 131  |};
                             2672 ; 132  |
                             2673 ; 133  |#define MAX_MSG_LENGTH 10
                             2674 ; 134  |struct CMessage
                             2675 ; 135  |{
                             2676 ; 136  |        unsigned int m_uLength;
                             2677 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2678 ; 138  |};
                             2679 ; 139  |
                             2680 ; 140  |typedef struct {
                             2681 ; 141  |    WORD m_wLength;
                             2682 ; 142  |    WORD m_wMessage;
                             2683 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2684 ; 144  |} Message;
                             2685 ; 145  |
                             2686 ; 146  |struct MessageQueueDescriptor
                             2687 ; 147  |{
                             2688 ; 148  |        int *m_pBase;
                             2689 ; 149  |        int m_iModulo;
                             2690 ; 150  |        int m_iSize;
                             2691 ; 151  |        int *m_pHead;
                             2692 ; 152  |        int *m_pTail;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2693 ; 153  |};
                             2694 ; 154  |
                             2695 ; 155  |struct ModuleEntry
                             2696 ; 156  |{
                             2697 ; 157  |    int m_iSignaledEventMask;
                             2698 ; 158  |    int m_iWaitEventMask;
                             2699 ; 159  |    int m_iResourceOfCode;
                             2700 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2701 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2702 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2703 ; 163  |    int m_uTimeOutHigh;
                             2704 ; 164  |    int m_uTimeOutLow;
                             2705 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2706 ; 166  |};
                             2707 ; 167  |
                             2708 ; 168  |union WaitMask{
                             2709 ; 169  |    struct B{
                             2710 ; 170  |        unsigned int m_bNone     :1;
                             2711 ; 171  |        unsigned int m_bMessage  :1;
                             2712 ; 172  |        unsigned int m_bTimer    :1;
                             2713 ; 173  |        unsigned int m_bButton   :1;
                             2714 ; 174  |    } B;
                             2715 ; 175  |    int I;
                             2716 ; 176  |} ;
                             2717 ; 177  |
                             2718 ; 178  |
                             2719 ; 179  |struct Button {
                             2720 ; 180  |        WORD wButtonEvent;
                             2721 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2722 ; 182  |};
                             2723 ; 183  |
                             2724 ; 184  |struct Message {
                             2725 ; 185  |        WORD wMsgLength;
                             2726 ; 186  |        WORD wMsgCommand;
                             2727 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2728 ; 188  |};
                             2729 ; 189  |
                             2730 ; 190  |union EventTypes {
                             2731 ; 191  |        struct CMessage msg;
                             2732 ; 192  |        struct Button Button ;
                             2733 ; 193  |        struct Message Message;
                             2734 ; 194  |};
                             2735 ; 195  |
                             2736 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2737 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2738 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2739 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2740 ; 200  |
                             2741 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2742 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2743 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2744 ; 204  |
                             2745 ; 205  |#if DEBUG
                             2746 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2747 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2748 ; 208  |#else 
                             2749 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2750 ; 210  |#define DebugBuildAssert(x)    
                             2751 ; 211  |#endif
                             2752 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2753 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2754 ; 214  |//  #pragma asm
                             2755 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2756 ; 216  |//  #pragma endasm
                             2757 ; 217  |
                             2758 ; 218  |
                             2759 ; 219  |#ifdef COLOR_262K
                             2760 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2761 ; 221  |#elif defined(COLOR_65K)
                             2762 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2763 ; 223  |#else
                             2764 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2765 ; 225  |#endif
                             2766 ; 226  |    
                             2767 ; 227  |#endif // #ifndef _TYPES_H
                             2768 
                             2770 
                             2771 ; 8    |
                             2772 ; 9    |
                             2773 ; 10   |
                             2774 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2775 ; 12   |
                             2776 ; 13   |//   SYSTEM STMP Registers 
                             2777 ; 14   |//      Last Edited 2.19.2003 M. May
                             2778 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2779 ; 16   |
                             2780 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2781 ; 18   |
                             2782 ; 19   |
                             2783 ; 20   |
                             2784 ; 21   |
                             2785 ; 22   |
                             2786 ; 23   |
                             2787 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2788 ; 25   |
                             2789 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2790 ; 27   |
                             2791 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2792 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2793 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2794 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2795 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2796 ; 33   |
                             2797 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2798 ; 35   |
                             2799 ; 36   |
                             2800 ; 37   |
                             2801 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2802 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2803 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2804 ; 41   |
                             2805 ; 42   |
                             2806 ; 43   |
                             2807 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             2808 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             2809 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2810 ; 47   |
                             2811 ; 48   |
                             2812 ; 49   |
                             2813 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2814 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2815 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2816 ; 53   |
                             2817 ; 54   |
                             2818 ; 55   |
                             2819 ; 56   |
                             2820 ; 57   |
                             2821 ; 58   |typedef union               
                             2822 ; 59   |{
                             2823 ; 60   |    struct {
                             2824 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             2825 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2826 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             2827 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2828 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2829 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2830 ; 67   |    } B;
                             2831 ; 68   |    unsigned int I;
                             2832 ; 69   |} dcdc1_ctrl0_type;
                             2833 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             2834 ; 71   |
                             2835 ; 72   |
                             2836 ; 73   |
                             2837 ; 74   |
                             2838 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2839 ; 76   |
                             2840 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2841 ; 78   |
                             2842 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2843 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2844 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2845 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             2846 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2847 ; 84   |
                             2848 ; 85   |
                             2849 ; 86   |
                             2850 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2851 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2852 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2853 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2854 ; 91   |
                             2855 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             2856 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             2857 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             2858 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             2859 ; 96   |
                             2860 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2861 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2862 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2863 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2864 ; 101  |
                             2865 ; 102  |
                             2866 ; 103  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2867 ; 104  |{
                             2868 ; 105  |    struct {
                             2869 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2870 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2871 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2872 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2873 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2874 ; 111  |    } B;
                             2875 ; 112  |    unsigned int I;
                             2876 ; 113  |} dcdc1_ctrl1_type;
                             2877 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             2878 ; 115  |
                             2879 ; 116  |
                             2880 ; 117  |
                             2881 ; 118  |
                             2882 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2883 ; 120  |
                             2884 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2885 ; 122  |
                             2886 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2887 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2888 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2889 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2890 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2891 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2892 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2893 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2894 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2895 ; 132  |
                             2896 ; 133  |
                             2897 ; 134  |
                             2898 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2899 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2900 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2901 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2902 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             2903 ; 140  |
                             2904 ; 141  |
                             2905 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2906 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2907 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2908 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2909 ; 146  |
                             2910 ; 147  |
                             2911 ; 148  |
                             2912 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             2913 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             2914 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             2915 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             2916 ; 153  |
                             2917 ; 154  |
                             2918 ; 155  |typedef union               
                             2919 ; 156  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2920 ; 157  |    struct {
                             2921 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2922 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2923 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2924 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2925 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2926 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2927 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2928 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2929 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2930 ; 167  |    } B;
                             2931 ; 168  |    unsigned int I;
                             2932 ; 169  |} dcdc_vddio_type;
                             2933 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             2934 ; 171  |
                             2935 ; 172  |
                             2936 ; 173  |
                             2937 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2938 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2939 ; 176  |
                             2940 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2941 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2942 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2943 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2944 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2945 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2946 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2947 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2948 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2949 ; 186  |
                             2950 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2951 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2952 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2953 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2954 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             2955 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2956 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2957 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2958 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2959 ; 196  |
                             2960 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             2961 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2962 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             2963 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             2964 ; 201  |
                             2965 ; 202  |typedef union               
                             2966 ; 203  |{
                             2967 ; 204  |    struct {
                             2968 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2969 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2970 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2971 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2972 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2973 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2974 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2975 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2976 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2977 ; 214  |    } B;
                             2978 ; 215  |   unsigned int I;
                             2979 ; 216  |        unsigned U;
                             2980 ; 217  |} dcdc_vddd_type;
                             2981 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             2982 ; 219  |
                             2983 ; 220  |
                             2984 ; 221  |
                             2985 ; 222  |
                             2986 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2987 ; 224  |
                             2988 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2989 ; 226  |
                             2990 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2991 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2992 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2993 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2994 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2995 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2996 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2997 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2998 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2999 ; 236  |
                             3000 ; 237  |
                             3001 ; 238  |
                             3002 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             3003 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             3004 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             3005 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             3006 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             3007 ; 244  |
                             3008 ; 245  |
                             3009 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             3010 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             3011 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             3012 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             3013 ; 250  |
                             3014 ; 251  |
                             3015 ; 252  |
                             3016 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3017 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             3018 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             3019 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             3020 ; 257  |
                             3021 ; 258  |
                             3022 ; 259  |typedef union               
                             3023 ; 260  |{
                             3024 ; 261  |    struct {
                             3025 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             3026 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             3027 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3028 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             3029 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             3030 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             3031 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             3032 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             3033 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             3034 ; 271  |    } B;
                             3035 ; 272  |    unsigned int I;
                             3036 ; 273  |} dcdc_vdda_type;
                             3037 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             3038 ; 275  |
                             3039 ; 276  |
                             3040 ; 277  |
                             3041 ; 278  |
                             3042 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             3043 ; 280  |
                             3044 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             3045 ; 282  |
                             3046 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             3047 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3048 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3049 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3050 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3051 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3052 ; 289  |
                             3053 ; 290  |
                             3054 ; 291  |
                             3055 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3056 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3057 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3058 ; 295  |
                             3059 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             3060 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             3061 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             3062 ; 299  |
                             3063 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             3064 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3065 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3066 ; 303  |
                             3067 ; 304  |
                             3068 ; 305  |typedef union               
                             3069 ; 306  |{
                             3070 ; 307  |    struct {
                             3071 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3072 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3073 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3074 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3075 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             3076 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3077 ; 314  |    } B;
                             3078 ; 315  |    unsigned int I;
                             3079 ; 316  |} dcdc2_ctrl0_type; 
                             3080 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             3081 ; 318  |
                             3082 ; 319  |
                             3083 ; 320  |
                             3084 ; 321  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3085 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3086 ; 323  |
                             3087 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3088 ; 325  |
                             3089 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3090 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3091 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3092 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3093 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3094 ; 331  |
                             3095 ; 332  |
                             3096 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3097 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3098 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3099 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3100 ; 337  |
                             3101 ; 338  |
                             3102 ; 339  |
                             3103 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             3104 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             3105 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             3106 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             3107 ; 344  |
                             3108 ; 345  |
                             3109 ; 346  |
                             3110 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3111 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3112 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3113 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3114 ; 351  |
                             3115 ; 352  |
                             3116 ; 353  |typedef union               
                             3117 ; 354  |{
                             3118 ; 355  |    struct {
                             3119 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3120 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             3121 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3122 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3123 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3124 ; 361  |    } B;
                             3125 ; 362  |    unsigned int I;
                             3126 ; 363  |} dcdc2_ctrl1_type;
                             3127 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             3128 ; 365  |
                             3129 ; 366  |
                             3130 ; 367  |
                             3131 ; 368  |
                             3132 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3133 ; 370  |
                             3134 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3135 ; 372  |
                             3136 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3137 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3138 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3139 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3140 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3141 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3142 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3143 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3144 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3145 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3146 ; 383  |
                             3147 ; 384  |
                             3148 ; 385  |
                             3149 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3150 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3151 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3152 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3153 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3154 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3155 ; 392  |
                             3156 ; 393  |
                             3157 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             3158 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             3159 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             3160 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             3161 ; 398  |
                             3162 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             3163 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             3164 ; 401  |
                             3165 ; 402  |
                             3166 ; 403  |
                             3167 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3168 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3169 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3170 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3171 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             3172 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3173 ; 410  |
                             3174 ; 411  |
                             3175 ; 412  |typedef union               
                             3176 ; 413  |{
                             3177 ; 414  |    struct {
                             3178 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3179 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3180 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3181 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3182 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3183 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3184 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3185 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3186 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3187 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3188 ; 425  |    } B;
                             3189 ; 426  |    unsigned int I;
                             3190 ; 427  |} speed_type;
                             3191 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             3192 ; 429  |
                             3193 ; 430  |
                             3194 ; 431  |
                             3195 ; 432  |
                             3196 ; 433  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3197 ; 434  |
                             3198 ; 435  |
                             3199 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3200 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3201 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3202 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3203 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3204 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3205 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3206 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3207 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3208 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3209 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3210 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3211 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3212 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3213 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             3214 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3215 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3216 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3217 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3218 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3219 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3220 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3221 ; 458  |
                             3222 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3223 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3224 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3225 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3226 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3227 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3228 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3229 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3230 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3231 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3232 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             3233 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3234 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3235 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3236 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             3237 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3238 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3239 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3240 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3241 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3242 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3243 ; 480  |
                             3244 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             3245 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3246 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3247 ; 484  |
                             3248 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3249 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3250 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             3251 ; 488  |
                             3252 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3253 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3254 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3255 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3256 ; 493  |
                             3257 ; 494  |typedef union               
                             3258 ; 495  |{
                             3259 ; 496  |    struct {
                             3260 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3261 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3262 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3263 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3264 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3265 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3266 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             3267 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3268 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3269 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3270 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3271 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3272 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3273 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3274 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3275 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3276 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3277 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3278 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3279 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3280 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3281 ; 518  |    } B;
                             3282 ; 519  |    unsigned int I;
                             3283 ; 520  |} usb_dcdctbr_type;
                             3284 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             3285 ; 522  |
                             3286 ; 523  |
                             3287 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3288 ; 525  |
                             3289 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3290 ; 527  |
                             3291 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3292 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3293 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3294 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3295 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3296 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3297 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3298 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3299 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3300 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3301 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3302 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3303 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3304 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3305 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3306 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3307 ; 544  |
                             3308 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3309 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3310 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3311 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3312 ; 549  |
                             3313 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3314 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3315 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3316 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3317 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3318 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3319 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3320 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3321 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3322 ; 559  |
                             3323 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3324 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             3325 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             3326 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             3327 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3328 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3329 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3330 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3331 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3332 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3333 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3334 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3335 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3336 ; 573  |
                             3337 ; 574  |
                             3338 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             3339 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3340 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3341 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3342 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3343 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             3344 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             3345 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             3346 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             3347 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             3348 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             3349 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3350 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             3351 ; 588  |
                             3352 ; 589  |typedef union               
                             3353 ; 590  |{
                             3354 ; 591  |    struct {
                             3355 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3356 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3357 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3358 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3359 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3360 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3361 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             3362 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             3363 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3364 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3365 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3366 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3367 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3368 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             3369 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3370 ; 607  |    } B;
                             3371 ; 608  |    unsigned int I;
                             3372 ; 609  |} usb_pwr_charge_type;
                             3373 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             3374 ; 611  |
                             3375 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3376 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3377 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3378 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3379 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3380 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3381 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3382 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3383 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3384 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3385 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3386 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3387 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3388 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3389 ; 626  |
                             3390 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3391 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3392 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3393 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3394 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3395 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3396 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3397 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3398 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3399 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3400 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3401 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3402 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3403 ; 640  |
                             3404 ; 641  |typedef union               
                             3405 ; 642  |{
                             3406 ; 643  |    struct {       
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3407 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3408 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3409 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3410 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3411 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3412 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3413 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3414 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3415 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3416 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3417 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3418 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             3419 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3420 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3421 ; 658  |    } B;
                             3422 ; 659  |    int I;
                             3423 ; 660  |} usb_dcdcpersist_type;
                             3424 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             3425 ; 662  |
                             3426 ; 663  |
                             3427 ; 664  |
                             3428 ; 665  |#endif
                             3429 ; 666  |
                             3430 ; 667  |
                             3431 ; 668  |
                             3432 
                             3434 
                             3435 ; 21   |#include "regsemc.h"
                             3436 
                             3438 
                             3439 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3440 ; 2    |#define __REGS_EMC_INC 1
                             3441 ; 3    |
                             3442 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3443 ; 5    |//   Module base addresses
                             3444 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3445 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3446 ; 8    |
                             3447 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3448 ; 10   |//  EMC Registers
                             3449 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3450 ; 12   |
                             3451 ; 13   |
                             3452 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3453 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3454 ; 16   |
                             3455 ; 17   |typedef union               /*Flash Control Register*/
                             3456 ; 18   |{
                             3457 ; 19   |    struct
                             3458 ; 20   |    {
                             3459 ; 21   |    int KICK        :1;
                             3460 ; 22   |    int RW          :1;
                             3461 ; 23   |    int TCIE        :1;
                             3462 ; 24   |    int IRQP        :1;
                             3463 ; 25   |    unsigned MMD    :2;
                             3464 ; 26   |    unsigned NB     :11;
                             3465 ; 27   |    unsigned RSVD   :4;
                             3466 ; 28   |    int SRST        :1;
                             3467 ; 29   |    } B;
                             3468 ; 30   |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3469 ; 31   |} flcr_type;
                             3470 ; 32   |
                             3471 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3472 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3473 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3474 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3475 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3476 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3477 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3478 ; 40   |
                             3479 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3480 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3481 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3482 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3483 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3484 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3485 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3486 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3487 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3488 ; 50   |
                             3489 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3490 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3491 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3492 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3493 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3494 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3495 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3496 ; 58   |
                             3497 ; 59   |
                             3498 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3499 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3500 ; 62   |
                             3501 ; 63   |typedef union           /* Flash Start Address Low*/
                             3502 ; 64   |{
                             3503 ; 65   |    struct
                             3504 ; 66   |    {
                             3505 ; 67   |    unsigned XA     : 24;
                             3506 ; 68   |    } B;
                             3507 ; 69   |    int I;
                             3508 ; 70   |} flsalr_type;
                             3509 ; 71   |
                             3510 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3511 ; 73   |
                             3512 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3513 ; 75   |
                             3514 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3515 ; 77   |
                             3516 ; 78   |
                             3517 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3518 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3519 ; 81   |
                             3520 ; 82   |typedef union           /* Flash Start Address High*/
                             3521 ; 83   |{
                             3522 ; 84   |    struct
                             3523 ; 85   |    {
                             3524 ; 86   |    unsigned XA     :8;
                             3525 ; 87   |    unsigned DA     :16;
                             3526 ; 88   |    } B;
                             3527 ; 89   |    int I;
                             3528 ; 90   |} flsahr_type;
                             3529 ; 91   |
                             3530 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3531 ; 93   |
                             3532 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3533 ; 95   |
                             3534 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3535 ; 97   |
                             3536 ; 98   |
                             3537 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3538 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3539 ; 101  |
                             3540 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3541 ; 103  |{
                             3542 ; 104  |    struct
                             3543 ; 105  |    {
                             3544 ; 106  |        int WP          :1;
                             3545 ; 107  |        int CDP         :1;
                             3546 ; 108  |        unsigned SM     :2;
                             3547 ; 109  |        int XATTR       :1;
                             3548 ; 110  |        int CRST        :1;
                             3549 ; 111  |        int XWT         :1;
                             3550 ; 112  |        int RI          :1;
                             3551 ; 113  |        int IFCE        :1;
                             3552 ; 114  |        int ISCE        :1;
                             3553 ; 115  |        int INCE        :1;
                             3554 ; 116  |        int IFCS        :1;
                             3555 ; 117  |        int ISCS        :1;
                             3556 ; 118  |        int INCS        :1;
                             3557 ; 119  |        unsigned CFAI   :2;
                             3558 ; 120  |        int XDDI        :1;
                             3559 ; 121  |        unsigned CS     :2;
                             3560 ; 122  |        int CRE         :1;
                             3561 ; 123  |        unsigned VS     :2;
                             3562 ; 124  |        int DASP        :1;
                             3563 ; 125  |        int MODE16      :1; 
                             3564 ; 126  |    } B;
                             3565 ; 127  |    int I;
                             3566 ; 128  |} flcfcr_type;
                             3567 ; 129  |
                             3568 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             3569 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3570 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3571 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3572 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             3573 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             3574 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3575 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3576 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3577 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3578 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             3579 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3580 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3581 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3582 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3583 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3584 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3585 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3586 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3587 ; 149  |
                             3588 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3589 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3590 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3591 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3592 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3593 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3594 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3595 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3596 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3597 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3598 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3599 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3600 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3601 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3602 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3603 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3604 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3605 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3606 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3607 ; 169  |
                             3608 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3609 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3610 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             3611 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3612 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3613 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3614 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3615 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3616 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3617 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3618 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3619 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3620 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3621 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3622 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3623 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3624 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3625 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3626 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3627 ; 189  |
                             3628 ; 190  |
                             3629 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3630 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             3631 ; 193  |
                             3632 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3633 ; 195  |{
                             3634 ; 196  |    struct
                             3635 ; 197  |    {
                             3636 ; 198  |        unsigned TRWSU  :5;
                             3637 ; 199  |        unsigned TRPW   :7;
                             3638 ; 200  |        unsigned TWPW   :7;
                             3639 ; 201  |        unsigned TRWH   :5;
                             3640 ; 202  |    } B;
                             3641 ; 203  |    int I;
                             3642 ; 204  |} flcftmr1r_type;
                             3643 ; 205  |
                             3644 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3645 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3646 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3647 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3648 ; 210  |
                             3649 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3650 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3651 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3652 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3653 ; 215  |
                             3654 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3655 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3656 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3657 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3658 ; 220  |
                             3659 ; 221  |
                             3660 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3661 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3662 ; 224  |
                             3663 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3664 ; 226  |{
                             3665 ; 227  |    struct
                             3666 ; 228  |    {
                             3667 ; 229  |        unsigned TWW    :4;
                             3668 ; 230  |        unsigned TWTO   :10;
                             3669 ; 231  |        unsigned THW    :5; 
                             3670 ; 232  |        unsigned TRAQ   :5;
                             3671 ; 233  |    } B;
                             3672 ; 234  |    int I;
                             3673 ; 235  |} flcftmr2r_type;
                             3674 ; 236  |
                             3675 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3676 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3677 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3678 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3679 ; 241  |
                             3680 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3681 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3682 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3683 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3684 ; 246  |
                             3685 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3686 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3687 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3688 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3689 ; 251  |
                             3690 ; 252  |
                             3691 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3692 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             3693 ; 255  |
                             3694 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3695 ; 257  |{
                             3696 ; 258  |    struct
                             3697 ; 259  |    {
                             3698 ; 260  |        unsigned CS     :2;
                             3699 ; 261  |        int SE          :1;
                             3700 ; 262  |        int WP          :1;
                             3701 ; 263  |        int SIZE        :1;
                             3702 ; 264  |        int ICMD        :8;
                             3703 ; 265  |        int TOIE        :1;
                             3704 ; 266  |        int BPIE        :1;
                             3705 ; 267  |        int TOIRQ       :1;
                             3706 ; 268  |        int BPIRQ       :1;
                             3707 ; 269  |    } B;
                             3708 ; 270  |    int I;
                             3709 ; 271  |} flsmcr_type;
                             3710 ; 272  |
                             3711 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3712 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3713 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3714 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3715 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3716 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3717 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3718 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3719 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3720 ; 282  |
                             3721 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3722 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3723 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3724 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3725 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3726 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3727 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3728 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3729 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3730 ; 292  |
                             3731 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3732 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3733 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3734 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             3735 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3736 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3737 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3738 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3739 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3740 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3741 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3742 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3743 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3744 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3745 ; 307  |
                             3746 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3747 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3748 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3749 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3750 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3751 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3752 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3753 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3754 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             3755 ; 317  |
                             3756 ; 318  |
                             3757 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3758 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3759 ; 321  |
                             3760 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3761 ; 323  |{
                             3762 ; 324  |    struct
                             3763 ; 325  |    {
                             3764 ; 326  |        unsigned TRWSU  :5;
                             3765 ; 327  |        unsigned TRPW   :6;
                             3766 ; 328  |        unsigned TWPW   :6;
                             3767 ; 329  |        unsigned TRWH   :5;
                             3768 ; 330  |    } B;
                             3769 ; 331  |    int I;
                             3770 ; 332  |} flsmtmr1r_type;
                             3771 ; 333  |
                             3772 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3773 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3774 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3775 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3776 ; 338  |
                             3777 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3778 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3779 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3780 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3781 ; 343  |
                             3782 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3783 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3784 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3785 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3786 ; 348  |
                             3787 ; 349  |
                             3788 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3789 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3790 ; 352  |
                             3791 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3792 ; 354  |{
                             3793 ; 355  |    struct
                             3794 ; 356  |    {
                             3795 ; 357  |        unsigned TWT    :6;
                             3796 ; 358  |        unsigned TWTO   :18;
                             3797 ; 359  |    } B;
                             3798 ; 360  |    int I;
                             3799 ; 361  |} flsmtmr2r_type;
                             3800 ; 362  |
                             3801 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3802 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3803 ; 365  |
                             3804 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3805 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3806 ; 368  |
                             3807 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3808 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3809 ; 371  |
                             3810 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3811 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3812 ; 374  |typedef union 
                             3813 ; 375  |{
                             3814 ; 376  |  struct
                             3815 ; 377  |  {
                             3816 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             3817 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             3818 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
                             3819 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3820 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3821 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3822 ; 384  |    int PAD0          :17;    
                             3823 ; 385  |  } B;
                             3824 ; 386  |  int I;
                             3825 ; 387  |} flcr2_type;
                             3826 ; 388  |
                             3827 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3828 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3829 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             3830 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3831 ; 393  |
                             3832 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             3833 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             3834 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             3835 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3836 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             3837 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             3838 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             3839 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             3840 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             3841 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             3842 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             3843 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3844 ; 406  |
                             3845 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             3846 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             3847 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3848 ; 410  |
                             3849 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3850 ; 412  |
                             3851 ; 413  |#endif
                             3852 ; 414  |
                             3853 
                             3855 
                             3856 ; 22   |#include "regsgpio.h"
                             3857 
                             3859 
                             3860 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3861 ; 2    |#define __REGS_GPIO_INC 1
                             3862 ; 3    |
                             3863 ; 4    |#include "types.h"
                             3864 
                             3866 
                             3867 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3868 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3869 ; 3    |//
                             3870 ; 4    |// Filename: types.h
                             3871 ; 5    |// Description: Standard data types
                             3872 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3873 ; 7    |
                             3874 ; 8    |#ifndef _TYPES_H
                             3875 ; 9    |#define _TYPES_H
                             3876 ; 10   |
                             3877 ; 11   |// TODO:  move this outta here!
                             3878 ; 12   |#if !defined(NOERROR)
                             3879 ; 13   |#define NOERROR 0
                             3880 ; 14   |#define SUCCESS 0
                             3881 ; 15   |#endif 
                             3882 ; 16   |#if !defined(SUCCESS)
                             3883 ; 17   |#define SUCCESS  0
                             3884 ; 18   |#endif
                             3885 ; 19   |#if !defined(ERROR)
                             3886 ; 20   |#define ERROR   -1
                             3887 ; 21   |#endif
                             3888 ; 22   |#if !defined(FALSE)
                             3889 ; 23   |#define FALSE 0
                             3890 ; 24   |#endif
                             3891 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3892 ; 26   |#define TRUE  1
                             3893 ; 27   |#endif
                             3894 ; 28   |
                             3895 ; 29   |#if !defined(NULL)
                             3896 ; 30   |#define NULL 0
                             3897 ; 31   |#endif
                             3898 ; 32   |
                             3899 ; 33   |#define MAX_INT     0x7FFFFF
                             3900 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3901 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3902 ; 36   |#define MAX_ULONG   (-1) 
                             3903 ; 37   |
                             3904 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3905 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3906 ; 40   |
                             3907 ; 41   |
                             3908 ; 42   |#define BYTE    unsigned char       // btVarName
                             3909 ; 43   |#define CHAR    signed char         // cVarName
                             3910 ; 44   |#define USHORT  unsigned short      // usVarName
                             3911 ; 45   |#define SHORT   unsigned short      // sVarName
                             3912 ; 46   |#define WORD    unsigned int        // wVarName
                             3913 ; 47   |#define INT     signed int          // iVarName
                             3914 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3915 ; 49   |#define LONG    signed long         // lVarName
                             3916 ; 50   |#define BOOL    unsigned int        // bVarName
                             3917 ; 51   |#define FRACT   _fract              // frVarName
                             3918 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3919 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3920 ; 54   |#define FLOAT   float               // fVarName
                             3921 ; 55   |#define DBL     double              // dVarName
                             3922 ; 56   |#define ENUM    enum                // eVarName
                             3923 ; 57   |#define CMX     _complex            // cmxVarName
                             3924 ; 58   |typedef WORD UCS3;                   // 
                             3925 ; 59   |
                             3926 ; 60   |#define UINT16  unsigned short
                             3927 ; 61   |#define UINT8   unsigned char   
                             3928 ; 62   |#define UINT32  unsigned long
                             3929 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3930 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3931 ; 65   |#define WCHAR   UINT16
                             3932 ; 66   |
                             3933 ; 67   |//UINT128 is 16 bytes or 6 words
                             3934 ; 68   |typedef struct UINT128_3500 {   
                             3935 ; 69   |    int val[6];     
                             3936 ; 70   |} UINT128_3500;
                             3937 ; 71   |
                             3938 ; 72   |#define UINT128   UINT128_3500
                             3939 ; 73   |
                             3940 ; 74   |// Little endian word packed byte strings:   
                             3941 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3942 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3943 ; 77   |// Little endian word packed byte strings:   
                             3944 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3945 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3946 ; 80   |
                             3947 ; 81   |// Declare Memory Spaces To Use When Coding
                             3948 ; 82   |// A. Sector Buffers
                             3949 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3950 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3951 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3952 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3953 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3954 ; 88   |// B. Media DDI Memory
                             3955 ; 89   |#define MEDIA_DDI_MEM _Y
                             3956 ; 90   |
                             3957 ; 91   |
                             3958 ; 92   |
                             3959 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3960 ; 94   |// Examples of circular pointers:
                             3961 ; 95   |//    INT CIRC cpiVarName
                             3962 ; 96   |//    DWORD CIRC cpdwVarName
                             3963 ; 97   |
                             3964 ; 98   |#define RETCODE INT                 // rcVarName
                             3965 ; 99   |
                             3966 ; 100  |// generic bitfield structure
                             3967 ; 101  |struct Bitfield {
                             3968 ; 102  |    unsigned int B0  :1;
                             3969 ; 103  |    unsigned int B1  :1;
                             3970 ; 104  |    unsigned int B2  :1;
                             3971 ; 105  |    unsigned int B3  :1;
                             3972 ; 106  |    unsigned int B4  :1;
                             3973 ; 107  |    unsigned int B5  :1;
                             3974 ; 108  |    unsigned int B6  :1;
                             3975 ; 109  |    unsigned int B7  :1;
                             3976 ; 110  |    unsigned int B8  :1;
                             3977 ; 111  |    unsigned int B9  :1;
                             3978 ; 112  |    unsigned int B10 :1;
                             3979 ; 113  |    unsigned int B11 :1;
                             3980 ; 114  |    unsigned int B12 :1;
                             3981 ; 115  |    unsigned int B13 :1;
                             3982 ; 116  |    unsigned int B14 :1;
                             3983 ; 117  |    unsigned int B15 :1;
                             3984 ; 118  |    unsigned int B16 :1;
                             3985 ; 119  |    unsigned int B17 :1;
                             3986 ; 120  |    unsigned int B18 :1;
                             3987 ; 121  |    unsigned int B19 :1;
                             3988 ; 122  |    unsigned int B20 :1;
                             3989 ; 123  |    unsigned int B21 :1;
                             3990 ; 124  |    unsigned int B22 :1;
                             3991 ; 125  |    unsigned int B23 :1;
                             3992 ; 126  |};
                             3993 ; 127  |
                             3994 ; 128  |union BitInt {
                             3995 ; 129  |        struct Bitfield B;
                             3996 ; 130  |        int        I;
                             3997 ; 131  |};
                             3998 ; 132  |
                             3999 ; 133  |#define MAX_MSG_LENGTH 10
                             4000 ; 134  |struct CMessage
                             4001 ; 135  |{
                             4002 ; 136  |        unsigned int m_uLength;
                             4003 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4004 ; 138  |};
                             4005 ; 139  |
                             4006 ; 140  |typedef struct {
                             4007 ; 141  |    WORD m_wLength;
                             4008 ; 142  |    WORD m_wMessage;
                             4009 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4010 ; 144  |} Message;
                             4011 ; 145  |
                             4012 ; 146  |struct MessageQueueDescriptor
                             4013 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4014 ; 148  |        int *m_pBase;
                             4015 ; 149  |        int m_iModulo;
                             4016 ; 150  |        int m_iSize;
                             4017 ; 151  |        int *m_pHead;
                             4018 ; 152  |        int *m_pTail;
                             4019 ; 153  |};
                             4020 ; 154  |
                             4021 ; 155  |struct ModuleEntry
                             4022 ; 156  |{
                             4023 ; 157  |    int m_iSignaledEventMask;
                             4024 ; 158  |    int m_iWaitEventMask;
                             4025 ; 159  |    int m_iResourceOfCode;
                             4026 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4027 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4028 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4029 ; 163  |    int m_uTimeOutHigh;
                             4030 ; 164  |    int m_uTimeOutLow;
                             4031 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4032 ; 166  |};
                             4033 ; 167  |
                             4034 ; 168  |union WaitMask{
                             4035 ; 169  |    struct B{
                             4036 ; 170  |        unsigned int m_bNone     :1;
                             4037 ; 171  |        unsigned int m_bMessage  :1;
                             4038 ; 172  |        unsigned int m_bTimer    :1;
                             4039 ; 173  |        unsigned int m_bButton   :1;
                             4040 ; 174  |    } B;
                             4041 ; 175  |    int I;
                             4042 ; 176  |} ;
                             4043 ; 177  |
                             4044 ; 178  |
                             4045 ; 179  |struct Button {
                             4046 ; 180  |        WORD wButtonEvent;
                             4047 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4048 ; 182  |};
                             4049 ; 183  |
                             4050 ; 184  |struct Message {
                             4051 ; 185  |        WORD wMsgLength;
                             4052 ; 186  |        WORD wMsgCommand;
                             4053 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4054 ; 188  |};
                             4055 ; 189  |
                             4056 ; 190  |union EventTypes {
                             4057 ; 191  |        struct CMessage msg;
                             4058 ; 192  |        struct Button Button ;
                             4059 ; 193  |        struct Message Message;
                             4060 ; 194  |};
                             4061 ; 195  |
                             4062 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4063 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4064 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4065 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4066 ; 200  |
                             4067 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4068 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4069 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4070 ; 204  |
                             4071 ; 205  |#if DEBUG
                             4072 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4073 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4074 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4075 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4076 ; 210  |#define DebugBuildAssert(x)    
                             4077 ; 211  |#endif
                             4078 ; 212  |
                             4079 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4080 ; 214  |//  #pragma asm
                             4081 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4082 ; 216  |//  #pragma endasm
                             4083 ; 217  |
                             4084 ; 218  |
                             4085 ; 219  |#ifdef COLOR_262K
                             4086 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4087 ; 221  |#elif defined(COLOR_65K)
                             4088 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4089 ; 223  |#else
                             4090 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4091 ; 225  |#endif
                             4092 ; 226  |    
                             4093 ; 227  |#endif // #ifndef _TYPES_H
                             4094 
                             4096 
                             4097 ; 5    |
                             4098 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4099 ; 7    |//  Interrupt Collector Registers
                             4100 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4101 ; 9    |
                             4102 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4103 ; 11   |
                             4104 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4105 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4106 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4107 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4108 ; 16   |
                             4109 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4110 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4111 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4112 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4113 ; 21   |
                             4114 ; 22   |#define HW_GPB_GPENR 0
                             4115 ; 23   |#define HW_GPB_GPDOR 1
                             4116 ; 24   |#define HW_GPB_GPDIR 2
                             4117 ; 25   |#define HW_GPB_GPDOER 3
                             4118 ; 26   |#define HW_GPB_GPIPENR 4
                             4119 ; 27   |#define HW_GPB_GPIENR 5
                             4120 ; 28   |#define HW_GPB_GPILVLR 6
                             4121 ; 29   |#define HW_GPB_GPIPOLR 7
                             4122 ; 30   |#define HW_GPB_GPISTATR 8
                             4123 ; 31   |#define HW_GPB_GPPWR 9
                             4124 ; 32   |#define HW_GPB_GP8MA 10
                             4125 ; 33   |
                             4126 ; 34   |
                             4127 ; 35   |
                             4128 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4129 ; 37   |//  GPIO Register Bit Positions
                             4130 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4131 ; 39   |{
                             4132 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4133 ; 41   |    unsigned int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4134 ; 42   |    unsigned int U;
                             4135 ; 43   |} gpr_type;
                             4136 ; 44   |
                             4137 ; 45   |#define HW_GP_B0_BITPOS 0
                             4138 ; 46   |#define HW_GP_B1_BITPOS 1
                             4139 ; 47   |#define HW_GP_B2_BITPOS 2
                             4140 ; 48   |#define HW_GP_B3_BITPOS 3
                             4141 ; 49   |#define HW_GP_B4_BITPOS 4
                             4142 ; 50   |#define HW_GP_B5_BITPOS 5
                             4143 ; 51   |#define HW_GP_B6_BITPOS 6
                             4144 ; 52   |#define HW_GP_B7_BITPOS 7
                             4145 ; 53   |#define HW_GP_B8_BITPOS 8
                             4146 ; 54   |#define HW_GP_B9_BITPOS 9
                             4147 ; 55   |#define HW_GP_B10_BITPOS 10
                             4148 ; 56   |#define HW_GP_B11_BITPOS 11
                             4149 ; 57   |#define HW_GP_B12_BITPOS 12
                             4150 ; 58   |#define HW_GP_B13_BITPOS 13
                             4151 ; 59   |#define HW_GP_B14_BITPOS 14
                             4152 ; 60   |#define HW_GP_B15_BITPOS 15
                             4153 ; 61   |#define HW_GP_B16_BITPOS 16
                             4154 ; 62   |#define HW_GP_B17_BITPOS 17
                             4155 ; 63   |#define HW_GP_B18_BITPOS 18
                             4156 ; 64   |#define HW_GP_B19_BITPOS 19
                             4157 ; 65   |#define HW_GP_B20_BITPOS 20
                             4158 ; 66   |#define HW_GP_B21_BITPOS 21
                             4159 ; 67   |#define HW_GP_B22_BITPOS 22
                             4160 ; 68   |#define HW_GP_B23_BITPOS 23
                             4161 ; 69   |
                             4162 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4163 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4164 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4165 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4166 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4167 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4168 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4169 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4170 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4171 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4172 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4173 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4174 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4175 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4176 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4177 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4178 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4179 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4180 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4181 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4182 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4183 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4184 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4185 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4186 ; 94   |
                             4187 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4188 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4189 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4190 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4191 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4192 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4193 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4194 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4195 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4196 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4197 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4198 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4199 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4200 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4201 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4202 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4203 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4204 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4205 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4206 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4207 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4208 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4209 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4210 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4211 ; 119  |
                             4212 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4213 ; 121  |//  GPIO 8mA Register Bit Positions
                             4214 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4215 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4216 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4217 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4218 ; 126  |
                             4219 ; 127  |
                             4220 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4221 ; 129  |//  Logical GPIO numbers
                             4222 ; 130  |#define HW_GPIO_000 0
                             4223 ; 131  |#define HW_GPIO_001 1
                             4224 ; 132  |#define HW_GPIO_002 2
                             4225 ; 133  |#define HW_GPIO_003 3
                             4226 ; 134  |#define HW_GPIO_004 4
                             4227 ; 135  |#define HW_GPIO_005 5
                             4228 ; 136  |#define HW_GPIO_006 6
                             4229 ; 137  |#define HW_GPIO_007 7
                             4230 ; 138  |#define HW_GPIO_008 8
                             4231 ; 139  |#define HW_GPIO_009 9
                             4232 ; 140  |#define HW_GPIO_010 10
                             4233 ; 141  |#define HW_GPIO_011 11
                             4234 ; 142  |#define HW_GPIO_012 12
                             4235 ; 143  |#define HW_GPIO_013 13
                             4236 ; 144  |#define HW_GPIO_014 14
                             4237 ; 145  |#define HW_GPIO_015 15
                             4238 ; 146  |#define HW_GPIO_016 16
                             4239 ; 147  |#define HW_GPIO_017 17
                             4240 ; 148  |#define HW_GPIO_018 18
                             4241 ; 149  |#define HW_GPIO_019 19
                             4242 ; 150  |#define HW_GPIO_020 20
                             4243 ; 151  |#define HW_GPIO_021 21
                             4244 ; 152  |#define HW_GPIO_022 22
                             4245 ; 153  |#define HW_GPIO_023 23
                             4246 ; 154  |#define HW_GPIO_024 24
                             4247 ; 155  |#define HW_GPIO_025 25
                             4248 ; 156  |#define HW_GPIO_026 26
                             4249 ; 157  |#define HW_GPIO_027 27
                             4250 ; 158  |#define HW_GPIO_028 28
                             4251 ; 159  |#define HW_GPIO_029 29
                             4252 ; 160  |#define HW_GPIO_030 30
                             4253 ; 161  |#define HW_GPIO_031 31
                             4254 ; 162  |#define HW_GPIO_032 32
                             4255 ; 163  |#define HW_GPIO_033 33
                             4256 ; 164  |#define HW_GPIO_034 34
                             4257 ; 165  |#define HW_GPIO_035 35
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4258 ; 166  |#define HW_GPIO_036 36
                             4259 ; 167  |#define HW_GPIO_037 37
                             4260 ; 168  |#define HW_GPIO_038 38
                             4261 ; 169  |#define HW_GPIO_039 39
                             4262 ; 170  |#define HW_GPIO_040 40
                             4263 ; 171  |#define HW_GPIO_041 41
                             4264 ; 172  |#define HW_GPIO_042 42
                             4265 ; 173  |#define HW_GPIO_043 43
                             4266 ; 174  |#define HW_GPIO_044 44
                             4267 ; 175  |#define HW_GPIO_045 45
                             4268 ; 176  |#define HW_GPIO_046 46
                             4269 ; 177  |#define HW_GPIO_047 47
                             4270 ; 178  |#define HW_GPIO_048 48
                             4271 ; 179  |#define HW_GPIO_049 49
                             4272 ; 180  |#define HW_GPIO_050 50
                             4273 ; 181  |#define HW_GPIO_051 51
                             4274 ; 182  |#define HW_GPIO_052 52
                             4275 ; 183  |#define HW_GPIO_053 53
                             4276 ; 184  |#define HW_GPIO_054 54
                             4277 ; 185  |#define HW_GPIO_055 55
                             4278 ; 186  |#define HW_GPIO_056 56
                             4279 ; 187  |#define HW_GPIO_057 57
                             4280 ; 188  |#define HW_GPIO_058 58
                             4281 ; 189  |#define HW_GPIO_059 59
                             4282 ; 190  |#define HW_GPIO_060 60
                             4283 ; 191  |#define HW_GPIO_061 61
                             4284 ; 192  |#define HW_GPIO_062 62
                             4285 ; 193  |#define HW_GPIO_063 63
                             4286 ; 194  |#define HW_GPIO_064 64
                             4287 ; 195  |#define HW_GPIO_065 65
                             4288 ; 196  |#define HW_GPIO_066 66
                             4289 ; 197  |#define HW_GPIO_067 67
                             4290 ; 198  |#define HW_GPIO_068 68
                             4291 ; 199  |#define HW_GPIO_069 69
                             4292 ; 200  |#define HW_GPIO_070 70
                             4293 ; 201  |#define HW_GPIO_071 71
                             4294 ; 202  |#define HW_GPIO_072 72
                             4295 ; 203  |#define HW_GPIO_073 73
                             4296 ; 204  |#define HW_GPIO_074 74
                             4297 ; 205  |#define HW_GPIO_075 75
                             4298 ; 206  |#define HW_GPIO_076 76
                             4299 ; 207  |#define HW_GPIO_077 77
                             4300 ; 208  |#define HW_GPIO_078 78
                             4301 ; 209  |#define HW_GPIO_079 79
                             4302 ; 210  |#define HW_GPIO_080 80
                             4303 ; 211  |#define HW_GPIO_081 81
                             4304 ; 212  |#define HW_GPIO_082 82
                             4305 ; 213  |#define HW_GPIO_083 83
                             4306 ; 214  |#define HW_GPIO_084 84
                             4307 ; 215  |#define HW_GPIO_085 85
                             4308 ; 216  |#define HW_GPIO_086 86
                             4309 ; 217  |#define HW_GPIO_087 87
                             4310 ; 218  |#define HW_GPIO_088 88
                             4311 ; 219  |#define HW_GPIO_089 89
                             4312 ; 220  |#define HW_GPIO_090 90
                             4313 ; 221  |#define HW_GPIO_091 91
                             4314 ; 222  |#define HW_GPIO_092 92
                             4315 ; 223  |#define HW_GPIO_093 93
                             4316 ; 224  |#define HW_GPIO_094 94
                             4317 ; 225  |#define HW_GPIO_095 95
                             4318 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4319 ; 227  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4320 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4321 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4322 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4323 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4324 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4325 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             4326 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4327 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4328 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             4329 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4330 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4331 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             4332 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4333 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4334 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4335 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4336 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4337 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4338 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             4339 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4340 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4341 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4342 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4343 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4344 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4345 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4346 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4347 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4348 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4349 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4350 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4351 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4352 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4353 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4354 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4355 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4356 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4357 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4358 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4359 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4360 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4361 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4362 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4363 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4364 ; 272  |
                             4365 ; 273  |#endif
                             4366 ; 274  |
                             4367 
                             4369 
                             4370 ; 23   |#include "regsi2c.h"
                             4371 
                             4373 
                             4374 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4375 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4376 ; 3    |// Filename: regsI2C.inc
                             4377 ; 4    |// Description: Register definitions for GPFLASH interface
                             4378 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4379 ; 6    |// The following naming conventions are followed in this file.
                             4380 ; 7    |// All registers are named using the format...
                             4381 ; 8    |//     HW_<module>_<regname>
                             4382 ; 9    |// where <module> is the module name which can be any of the following...
                             4383 ; 10   |//     USB20
                             4384 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4385 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4386 ; 13   |// that module)
                             4387 ; 14   |// <regname> is the specific register within that module
                             4388 ; 15   |// We also define the following...
                             4389 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4390 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4391 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4392 ; 19   |// which does something else, and
                             4393 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4394 ; 21   |// which does something else.
                             4395 ; 22   |// Other rules
                             4396 ; 23   |//     All caps
                             4397 ; 24   |//     Numeric identifiers start at 0
                             4398 ; 25   |#if !(defined(regsi2cinc))
                             4399 ; 26   |#define regsi2cinc 1
                             4400 ; 27   |
                             4401 ; 28   |#include "types.h"
                             4402 
                             4404 
                             4405 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4406 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4407 ; 3    |//
                             4408 ; 4    |// Filename: types.h
                             4409 ; 5    |// Description: Standard data types
                             4410 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4411 ; 7    |
                             4412 ; 8    |#ifndef _TYPES_H
                             4413 ; 9    |#define _TYPES_H
                             4414 ; 10   |
                             4415 ; 11   |// TODO:  move this outta here!
                             4416 ; 12   |#if !defined(NOERROR)
                             4417 ; 13   |#define NOERROR 0
                             4418 ; 14   |#define SUCCESS 0
                             4419 ; 15   |#endif 
                             4420 ; 16   |#if !defined(SUCCESS)
                             4421 ; 17   |#define SUCCESS  0
                             4422 ; 18   |#endif
                             4423 ; 19   |#if !defined(ERROR)
                             4424 ; 20   |#define ERROR   -1
                             4425 ; 21   |#endif
                             4426 ; 22   |#if !defined(FALSE)
                             4427 ; 23   |#define FALSE 0
                             4428 ; 24   |#endif
                             4429 ; 25   |#if !defined(TRUE)
                             4430 ; 26   |#define TRUE  1
                             4431 ; 27   |#endif
                             4432 ; 28   |
                             4433 ; 29   |#if !defined(NULL)
                             4434 ; 30   |#define NULL 0
                             4435 ; 31   |#endif
                             4436 ; 32   |
                             4437 ; 33   |#define MAX_INT     0x7FFFFF
                             4438 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4439 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4440 ; 36   |#define MAX_ULONG   (-1) 
                             4441 ; 37   |
                             4442 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4443 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4444 ; 40   |
                             4445 ; 41   |
                             4446 ; 42   |#define BYTE    unsigned char       // btVarName
                             4447 ; 43   |#define CHAR    signed char         // cVarName
                             4448 ; 44   |#define USHORT  unsigned short      // usVarName
                             4449 ; 45   |#define SHORT   unsigned short      // sVarName
                             4450 ; 46   |#define WORD    unsigned int        // wVarName
                             4451 ; 47   |#define INT     signed int          // iVarName
                             4452 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4453 ; 49   |#define LONG    signed long         // lVarName
                             4454 ; 50   |#define BOOL    unsigned int        // bVarName
                             4455 ; 51   |#define FRACT   _fract              // frVarName
                             4456 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4457 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4458 ; 54   |#define FLOAT   float               // fVarName
                             4459 ; 55   |#define DBL     double              // dVarName
                             4460 ; 56   |#define ENUM    enum                // eVarName
                             4461 ; 57   |#define CMX     _complex            // cmxVarName
                             4462 ; 58   |typedef WORD UCS3;                   // 
                             4463 ; 59   |
                             4464 ; 60   |#define UINT16  unsigned short
                             4465 ; 61   |#define UINT8   unsigned char   
                             4466 ; 62   |#define UINT32  unsigned long
                             4467 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4468 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4469 ; 65   |#define WCHAR   UINT16
                             4470 ; 66   |
                             4471 ; 67   |//UINT128 is 16 bytes or 6 words
                             4472 ; 68   |typedef struct UINT128_3500 {   
                             4473 ; 69   |    int val[6];     
                             4474 ; 70   |} UINT128_3500;
                             4475 ; 71   |
                             4476 ; 72   |#define UINT128   UINT128_3500
                             4477 ; 73   |
                             4478 ; 74   |// Little endian word packed byte strings:   
                             4479 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4480 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4481 ; 77   |// Little endian word packed byte strings:   
                             4482 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4483 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4484 ; 80   |
                             4485 ; 81   |// Declare Memory Spaces To Use When Coding
                             4486 ; 82   |// A. Sector Buffers
                             4487 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4488 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4489 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4490 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4491 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4492 ; 88   |// B. Media DDI Memory
                             4493 ; 89   |#define MEDIA_DDI_MEM _Y
                             4494 ; 90   |
                             4495 ; 91   |
                             4496 ; 92   |
                             4497 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4498 ; 94   |// Examples of circular pointers:
                             4499 ; 95   |//    INT CIRC cpiVarName
                             4500 ; 96   |//    DWORD CIRC cpdwVarName
                             4501 ; 97   |
                             4502 ; 98   |#define RETCODE INT                 // rcVarName
                             4503 ; 99   |
                             4504 ; 100  |// generic bitfield structure
                             4505 ; 101  |struct Bitfield {
                             4506 ; 102  |    unsigned int B0  :1;
                             4507 ; 103  |    unsigned int B1  :1;
                             4508 ; 104  |    unsigned int B2  :1;
                             4509 ; 105  |    unsigned int B3  :1;
                             4510 ; 106  |    unsigned int B4  :1;
                             4511 ; 107  |    unsigned int B5  :1;
                             4512 ; 108  |    unsigned int B6  :1;
                             4513 ; 109  |    unsigned int B7  :1;
                             4514 ; 110  |    unsigned int B8  :1;
                             4515 ; 111  |    unsigned int B9  :1;
                             4516 ; 112  |    unsigned int B10 :1;
                             4517 ; 113  |    unsigned int B11 :1;
                             4518 ; 114  |    unsigned int B12 :1;
                             4519 ; 115  |    unsigned int B13 :1;
                             4520 ; 116  |    unsigned int B14 :1;
                             4521 ; 117  |    unsigned int B15 :1;
                             4522 ; 118  |    unsigned int B16 :1;
                             4523 ; 119  |    unsigned int B17 :1;
                             4524 ; 120  |    unsigned int B18 :1;
                             4525 ; 121  |    unsigned int B19 :1;
                             4526 ; 122  |    unsigned int B20 :1;
                             4527 ; 123  |    unsigned int B21 :1;
                             4528 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4529 ; 125  |    unsigned int B23 :1;
                             4530 ; 126  |};
                             4531 ; 127  |
                             4532 ; 128  |union BitInt {
                             4533 ; 129  |        struct Bitfield B;
                             4534 ; 130  |        int        I;
                             4535 ; 131  |};
                             4536 ; 132  |
                             4537 ; 133  |#define MAX_MSG_LENGTH 10
                             4538 ; 134  |struct CMessage
                             4539 ; 135  |{
                             4540 ; 136  |        unsigned int m_uLength;
                             4541 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4542 ; 138  |};
                             4543 ; 139  |
                             4544 ; 140  |typedef struct {
                             4545 ; 141  |    WORD m_wLength;
                             4546 ; 142  |    WORD m_wMessage;
                             4547 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4548 ; 144  |} Message;
                             4549 ; 145  |
                             4550 ; 146  |struct MessageQueueDescriptor
                             4551 ; 147  |{
                             4552 ; 148  |        int *m_pBase;
                             4553 ; 149  |        int m_iModulo;
                             4554 ; 150  |        int m_iSize;
                             4555 ; 151  |        int *m_pHead;
                             4556 ; 152  |        int *m_pTail;
                             4557 ; 153  |};
                             4558 ; 154  |
                             4559 ; 155  |struct ModuleEntry
                             4560 ; 156  |{
                             4561 ; 157  |    int m_iSignaledEventMask;
                             4562 ; 158  |    int m_iWaitEventMask;
                             4563 ; 159  |    int m_iResourceOfCode;
                             4564 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4565 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4566 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4567 ; 163  |    int m_uTimeOutHigh;
                             4568 ; 164  |    int m_uTimeOutLow;
                             4569 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4570 ; 166  |};
                             4571 ; 167  |
                             4572 ; 168  |union WaitMask{
                             4573 ; 169  |    struct B{
                             4574 ; 170  |        unsigned int m_bNone     :1;
                             4575 ; 171  |        unsigned int m_bMessage  :1;
                             4576 ; 172  |        unsigned int m_bTimer    :1;
                             4577 ; 173  |        unsigned int m_bButton   :1;
                             4578 ; 174  |    } B;
                             4579 ; 175  |    int I;
                             4580 ; 176  |} ;
                             4581 ; 177  |
                             4582 ; 178  |
                             4583 ; 179  |struct Button {
                             4584 ; 180  |        WORD wButtonEvent;
                             4585 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4586 ; 182  |};
                             4587 ; 183  |
                             4588 ; 184  |struct Message {
                             4589 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4590 ; 186  |        WORD wMsgCommand;
                             4591 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4592 ; 188  |};
                             4593 ; 189  |
                             4594 ; 190  |union EventTypes {
                             4595 ; 191  |        struct CMessage msg;
                             4596 ; 192  |        struct Button Button ;
                             4597 ; 193  |        struct Message Message;
                             4598 ; 194  |};
                             4599 ; 195  |
                             4600 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4601 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4602 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4603 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4604 ; 200  |
                             4605 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4606 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4607 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4608 ; 204  |
                             4609 ; 205  |#if DEBUG
                             4610 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4611 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4612 ; 208  |#else 
                             4613 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4614 ; 210  |#define DebugBuildAssert(x)    
                             4615 ; 211  |#endif
                             4616 ; 212  |
                             4617 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4618 ; 214  |//  #pragma asm
                             4619 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4620 ; 216  |//  #pragma endasm
                             4621 ; 217  |
                             4622 ; 218  |
                             4623 ; 219  |#ifdef COLOR_262K
                             4624 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4625 ; 221  |#elif defined(COLOR_65K)
                             4626 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4627 ; 223  |#else
                             4628 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4629 ; 225  |#endif
                             4630 ; 226  |    
                             4631 ; 227  |#endif // #ifndef _TYPES_H
                             4632 
                             4634 
                             4635 ; 29   |
                             4636 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4637 ; 31   |////   I2C STMP Registers
                             4638 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4639 ; 33   |
                             4640 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4641 ; 35   |
                             4642 ; 36   |
                             4643 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4644 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4645 ; 39   |
                             4646 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4647 ; 41   |
                             4648 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4649 ; 43   |
                             4650 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4651 ; 45   |
                             4652 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4653 ; 47   |{
                             4654 ; 48   |    struct {
                             4655 ; 49   |        int                :1; 
                             4656 ; 50   |        unsigned FACT      :8;
                             4657 ; 51   |    } B;
                             4658 ; 52   |    int I;
                             4659 ; 53   |    unsigned U;
                             4660 ; 54   |} i2cdivr_type;
                             4661 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             4662 ; 56   |
                             4663 ; 57   |
                             4664 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             4665 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4666 ; 60   |
                             4667 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4668 ; 62   |
                             4669 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4670 ; 64   |
                             4671 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4672 ; 66   |
                             4673 ; 67   |typedef union               /* I2C Data Register */
                             4674 ; 68   |{
                             4675 ; 69   |    struct {
                             4676 ; 70   |         unsigned DATA :24; 
                             4677 ; 71   |    } B;
                             4678 ; 72   |    int I;
                             4679 ; 73   |    unsigned U;
                             4680 ; 74   |} i2cdatr_type;
                             4681 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                             4682 ; 76   |
                             4683 ; 77   |
                             4684 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4685 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4686 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4687 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4688 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4689 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4690 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4691 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4692 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4693 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4694 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4695 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4696 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4697 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4698 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4699 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4700 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4701 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4702 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4703 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4704 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4705 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4706 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4707 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4708 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4709 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4710 ; 104  |
                             4711 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4712 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4713 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4714 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4715 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4716 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4717 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4718 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4719 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4720 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4721 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4722 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4723 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4724 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4725 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             4726 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4727 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4728 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4729 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4730 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4731 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4732 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4733 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4734 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4735 ; 129  |
                             4736 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4737 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4738 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4739 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4740 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4741 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4742 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4743 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             4744 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4745 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4746 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4747 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4748 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4749 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4750 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4751 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4752 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4753 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4754 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4755 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4756 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4757 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4758 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4759 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4760 ; 154  |
                             4761 ; 155  |typedef union               /* I2C Control Register         */
                             4762 ; 156  |{
                             4763 ; 157  |    struct {
                             4764 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4765 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4766 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4767 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4768 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4769 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4770 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4771 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4772 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4773 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4774 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4775 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4776 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4777 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4778 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4779 ; 173  |        int LWORD       :1; /* Last Word                */
                             4780 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4781 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4782 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4783 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4784 ; 178  |    } B;
                             4785 ; 179  |    int I;
                             4786 ; 180  |    unsigned U;
                             4787 ; 181  |} i2ccsr_type;
                             4788 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             4789 ; 183  |
                             4790 ; 184  |#endif
                             4791 
                             4793 
                             4794 ; 24   |#include "regsi2s.h"
                             4795 
                             4797 
                             4798 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4799 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4800 ; 3    |// Filename: regsi2s.inc
                             4801 ; 4    |// Description: Register definitions for I2S interface
                             4802 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4803 ; 6    |// The following naming conventions are followed in this file.
                             4804 ; 7    |// All registers are named using the format...
                             4805 ; 8    |//     HW_<module>_<regname>
                             4806 ; 9    |// where <module> is the module name which can be any of the following...
                             4807 ; 10   |//     USB20
                             4808 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4809 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4810 ; 13   |// that module)
                             4811 ; 14   |// <regname> is the specific register within that module
                             4812 ; 15   |// We also define the following...
                             4813 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4814 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4815 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4816 ; 19   |// which does something else, and
                             4817 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4818 ; 21   |// which does something else.
                             4819 ; 22   |// Other rules
                             4820 ; 23   |//     All caps
                             4821 ; 24   |//     Numeric identifiers start at 0
                             4822 ; 25   |#if !(defined(regsi2sinc))
                             4823 ; 26   |#define regsi2sinc 1
                             4824 ; 27   |
                             4825 ; 28   |#include "types.h"
                             4826 
                             4828 
                             4829 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4830 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4831 ; 3    |//
                             4832 ; 4    |// Filename: types.h
                             4833 ; 5    |// Description: Standard data types
                             4834 ; 6    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4835 ; 7    |
                             4836 ; 8    |#ifndef _TYPES_H
                             4837 ; 9    |#define _TYPES_H
                             4838 ; 10   |
                             4839 ; 11   |// TODO:  move this outta here!
                             4840 ; 12   |#if !defined(NOERROR)
                             4841 ; 13   |#define NOERROR 0
                             4842 ; 14   |#define SUCCESS 0
                             4843 ; 15   |#endif 
                             4844 ; 16   |#if !defined(SUCCESS)
                             4845 ; 17   |#define SUCCESS  0
                             4846 ; 18   |#endif
                             4847 ; 19   |#if !defined(ERROR)
                             4848 ; 20   |#define ERROR   -1
                             4849 ; 21   |#endif
                             4850 ; 22   |#if !defined(FALSE)
                             4851 ; 23   |#define FALSE 0
                             4852 ; 24   |#endif
                             4853 ; 25   |#if !defined(TRUE)
                             4854 ; 26   |#define TRUE  1
                             4855 ; 27   |#endif
                             4856 ; 28   |
                             4857 ; 29   |#if !defined(NULL)
                             4858 ; 30   |#define NULL 0
                             4859 ; 31   |#endif
                             4860 ; 32   |
                             4861 ; 33   |#define MAX_INT     0x7FFFFF
                             4862 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4863 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4864 ; 36   |#define MAX_ULONG   (-1) 
                             4865 ; 37   |
                             4866 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4867 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4868 ; 40   |
                             4869 ; 41   |
                             4870 ; 42   |#define BYTE    unsigned char       // btVarName
                             4871 ; 43   |#define CHAR    signed char         // cVarName
                             4872 ; 44   |#define USHORT  unsigned short      // usVarName
                             4873 ; 45   |#define SHORT   unsigned short      // sVarName
                             4874 ; 46   |#define WORD    unsigned int        // wVarName
                             4875 ; 47   |#define INT     signed int          // iVarName
                             4876 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4877 ; 49   |#define LONG    signed long         // lVarName
                             4878 ; 50   |#define BOOL    unsigned int        // bVarName
                             4879 ; 51   |#define FRACT   _fract              // frVarName
                             4880 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4881 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4882 ; 54   |#define FLOAT   float               // fVarName
                             4883 ; 55   |#define DBL     double              // dVarName
                             4884 ; 56   |#define ENUM    enum                // eVarName
                             4885 ; 57   |#define CMX     _complex            // cmxVarName
                             4886 ; 58   |typedef WORD UCS3;                   // 
                             4887 ; 59   |
                             4888 ; 60   |#define UINT16  unsigned short
                             4889 ; 61   |#define UINT8   unsigned char   
                             4890 ; 62   |#define UINT32  unsigned long
                             4891 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4892 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4893 ; 65   |#define WCHAR   UINT16
                             4894 ; 66   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4895 ; 67   |//UINT128 is 16 bytes or 6 words
                             4896 ; 68   |typedef struct UINT128_3500 {   
                             4897 ; 69   |    int val[6];     
                             4898 ; 70   |} UINT128_3500;
                             4899 ; 71   |
                             4900 ; 72   |#define UINT128   UINT128_3500
                             4901 ; 73   |
                             4902 ; 74   |// Little endian word packed byte strings:   
                             4903 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4904 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4905 ; 77   |// Little endian word packed byte strings:   
                             4906 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4907 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4908 ; 80   |
                             4909 ; 81   |// Declare Memory Spaces To Use When Coding
                             4910 ; 82   |// A. Sector Buffers
                             4911 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4912 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4913 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4914 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4915 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4916 ; 88   |// B. Media DDI Memory
                             4917 ; 89   |#define MEDIA_DDI_MEM _Y
                             4918 ; 90   |
                             4919 ; 91   |
                             4920 ; 92   |
                             4921 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4922 ; 94   |// Examples of circular pointers:
                             4923 ; 95   |//    INT CIRC cpiVarName
                             4924 ; 96   |//    DWORD CIRC cpdwVarName
                             4925 ; 97   |
                             4926 ; 98   |#define RETCODE INT                 // rcVarName
                             4927 ; 99   |
                             4928 ; 100  |// generic bitfield structure
                             4929 ; 101  |struct Bitfield {
                             4930 ; 102  |    unsigned int B0  :1;
                             4931 ; 103  |    unsigned int B1  :1;
                             4932 ; 104  |    unsigned int B2  :1;
                             4933 ; 105  |    unsigned int B3  :1;
                             4934 ; 106  |    unsigned int B4  :1;
                             4935 ; 107  |    unsigned int B5  :1;
                             4936 ; 108  |    unsigned int B6  :1;
                             4937 ; 109  |    unsigned int B7  :1;
                             4938 ; 110  |    unsigned int B8  :1;
                             4939 ; 111  |    unsigned int B9  :1;
                             4940 ; 112  |    unsigned int B10 :1;
                             4941 ; 113  |    unsigned int B11 :1;
                             4942 ; 114  |    unsigned int B12 :1;
                             4943 ; 115  |    unsigned int B13 :1;
                             4944 ; 116  |    unsigned int B14 :1;
                             4945 ; 117  |    unsigned int B15 :1;
                             4946 ; 118  |    unsigned int B16 :1;
                             4947 ; 119  |    unsigned int B17 :1;
                             4948 ; 120  |    unsigned int B18 :1;
                             4949 ; 121  |    unsigned int B19 :1;
                             4950 ; 122  |    unsigned int B20 :1;
                             4951 ; 123  |    unsigned int B21 :1;
                             4952 ; 124  |    unsigned int B22 :1;
                             4953 ; 125  |    unsigned int B23 :1;
                             4954 ; 126  |};
                             4955 ; 127  |
                             4956 ; 128  |union BitInt {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4957 ; 129  |        struct Bitfield B;
                             4958 ; 130  |        int        I;
                             4959 ; 131  |};
                             4960 ; 132  |
                             4961 ; 133  |#define MAX_MSG_LENGTH 10
                             4962 ; 134  |struct CMessage
                             4963 ; 135  |{
                             4964 ; 136  |        unsigned int m_uLength;
                             4965 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4966 ; 138  |};
                             4967 ; 139  |
                             4968 ; 140  |typedef struct {
                             4969 ; 141  |    WORD m_wLength;
                             4970 ; 142  |    WORD m_wMessage;
                             4971 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4972 ; 144  |} Message;
                             4973 ; 145  |
                             4974 ; 146  |struct MessageQueueDescriptor
                             4975 ; 147  |{
                             4976 ; 148  |        int *m_pBase;
                             4977 ; 149  |        int m_iModulo;
                             4978 ; 150  |        int m_iSize;
                             4979 ; 151  |        int *m_pHead;
                             4980 ; 152  |        int *m_pTail;
                             4981 ; 153  |};
                             4982 ; 154  |
                             4983 ; 155  |struct ModuleEntry
                             4984 ; 156  |{
                             4985 ; 157  |    int m_iSignaledEventMask;
                             4986 ; 158  |    int m_iWaitEventMask;
                             4987 ; 159  |    int m_iResourceOfCode;
                             4988 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4989 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4990 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4991 ; 163  |    int m_uTimeOutHigh;
                             4992 ; 164  |    int m_uTimeOutLow;
                             4993 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4994 ; 166  |};
                             4995 ; 167  |
                             4996 ; 168  |union WaitMask{
                             4997 ; 169  |    struct B{
                             4998 ; 170  |        unsigned int m_bNone     :1;
                             4999 ; 171  |        unsigned int m_bMessage  :1;
                             5000 ; 172  |        unsigned int m_bTimer    :1;
                             5001 ; 173  |        unsigned int m_bButton   :1;
                             5002 ; 174  |    } B;
                             5003 ; 175  |    int I;
                             5004 ; 176  |} ;
                             5005 ; 177  |
                             5006 ; 178  |
                             5007 ; 179  |struct Button {
                             5008 ; 180  |        WORD wButtonEvent;
                             5009 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5010 ; 182  |};
                             5011 ; 183  |
                             5012 ; 184  |struct Message {
                             5013 ; 185  |        WORD wMsgLength;
                             5014 ; 186  |        WORD wMsgCommand;
                             5015 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5016 ; 188  |};
                             5017 ; 189  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5018 ; 190  |union EventTypes {
                             5019 ; 191  |        struct CMessage msg;
                             5020 ; 192  |        struct Button Button ;
                             5021 ; 193  |        struct Message Message;
                             5022 ; 194  |};
                             5023 ; 195  |
                             5024 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5025 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5026 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5027 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5028 ; 200  |
                             5029 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5030 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5031 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5032 ; 204  |
                             5033 ; 205  |#if DEBUG
                             5034 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5035 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5036 ; 208  |#else 
                             5037 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5038 ; 210  |#define DebugBuildAssert(x)    
                             5039 ; 211  |#endif
                             5040 ; 212  |
                             5041 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5042 ; 214  |//  #pragma asm
                             5043 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5044 ; 216  |//  #pragma endasm
                             5045 ; 217  |
                             5046 ; 218  |
                             5047 ; 219  |#ifdef COLOR_262K
                             5048 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5049 ; 221  |#elif defined(COLOR_65K)
                             5050 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5051 ; 223  |#else
                             5052 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5053 ; 225  |#endif
                             5054 ; 226  |    
                             5055 ; 227  |#endif // #ifndef _TYPES_H
                             5056 
                             5058 
                             5059 ; 29   |
                             5060 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5061 ; 31   |////  I2S Registers (SAI)
                             5062 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5063 ; 33   |
                             5064 ; 34   |
                             5065 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5066 ; 36   |
                             5067 ; 37   |
                             5068 ; 38   |
                             5069 ; 39   |
                             5070 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5071 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5072 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5073 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5074 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5075 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5076 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5077 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5078 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5079 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5080 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5081 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5082 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5083 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5084 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5085 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5086 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5087 ; 57   |
                             5088 ; 58   |
                             5089 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5090 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5091 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5092 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5093 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5094 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5095 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5096 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5097 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5098 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5099 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5100 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5101 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5102 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5103 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5104 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5105 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5106 ; 76   |
                             5107 ; 77   |
                             5108 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5109 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5110 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5111 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5112 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             5113 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5114 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5115 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5116 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             5117 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5118 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5119 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5120 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             5121 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5122 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5123 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             5124 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             5125 ; 95   |
                             5126 ; 96   |
                             5127 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5128 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5129 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5130 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5131 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5132 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5133 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5134 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5135 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5136 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5137 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5138 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5139 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5140 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5141 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5142 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5143 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5144 ; 114  |
                             5145 ; 115  |typedef union
                             5146 ; 116  |{
                             5147 ; 117  |    struct {
                             5148 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5149 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5150 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5151 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5152 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5153 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5154 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5155 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5156 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5157 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5158 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             5159 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5160 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5161 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5162 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5163 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5164 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5165 ; 135  |    } B;
                             5166 ; 136  |    int I;
                             5167 ; 137  |    unsigned U;
                             5168 ; 138  |} saircsr_type;
                             5169 ; 139  |
                             5170 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             5171 ; 141  |
                             5172 ; 142  |typedef union
                             5173 ; 143  |{
                             5174 ; 144  |    struct {
                             5175 ; 145  |        unsigned SAI :24;
                             5176 ; 146  |    } B;
                             5177 ; 147  |    int I;
                             5178 ; 148  |    unsigned U;
                             5179 ; 149  |} saixr_type;
                             5180 ; 150  |
                             5181 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             5182 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             5183 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                             5184 ; 154  |
                             5185 ; 155  |
                             5186 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5187 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5188 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5189 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5190 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5191 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5192 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5193 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5194 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5195 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5196 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5197 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5198 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5199 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5200 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5201 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5202 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5203 ; 173  |
                             5204 ; 174  |
                             5205 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5206 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5207 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5208 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5209 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5210 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5211 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5212 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5213 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5214 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5215 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5216 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5217 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5218 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5219 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5220 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5221 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5222 ; 192  |
                             5223 ; 193  |
                             5224 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5225 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5226 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5227 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5228 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             5229 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5230 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5231 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             5232 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5233 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5234 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5235 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5236 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             5237 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5238 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5239 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             5240 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             5241 ; 211  |
                             5242 ; 212  |
                             5243 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5244 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5245 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5246 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5247 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5248 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5249 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5250 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5251 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5252 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5253 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5254 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5255 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5256 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5257 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5258 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5259 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5260 ; 230  |
                             5261 ; 231  |
                             5262 ; 232  |typedef union
                             5263 ; 233  |{
                             5264 ; 234  |    struct {
                             5265 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5266 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             5267 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5268 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5269 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5270 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5271 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             5272 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5273 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5274 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5275 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             5276 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5277 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5278 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5279 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5280 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5281 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             5282 ; 252  |    } B;
                             5283 ; 253  |    int I;
                             5284 ; 254  |    unsigned U;
                             5285 ; 255  |} saitcsr_type;
                             5286 ; 256  |
                             5287 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
                             5288 ; 258  |
                             5289 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             5290 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             5291 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             5292 ; 262  |
                             5293 ; 263  |#endif
                             5294 
                             5296 
                             5297 ; 25   |#include "regsicoll.h"
                             5298 
                             5300 
                             5301 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5302 ; 2    |#define __REGS_ICOLL_INC 1
                             5303 ; 3    |
                             5304 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5305 ; 5    |//  Interrupt Collector Registers
                             5306 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5307 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5308 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5309 ; 9    |
                             5310 ; 10   |
                             5311 ; 11   |
                             5312 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5313 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5314 ; 14   |
                             5315 ; 15   |typedef union
                             5316 ; 16   |{
                             5317 ; 17   |    struct {
                             5318 ; 18   |        int SEN0        :1;
                             5319 ; 19   |        int SEN1        :1;
                             5320 ; 20   |        int SEN2        :1;
                             5321 ; 21   |        int SEN3        :1;
                             5322 ; 22   |        int SEN4        :1;
                             5323 ; 23   |        int SEN5        :1;
                             5324 ; 24   |        int SEN6        :1;
                             5325 ; 25   |        int SEN7        :1;
                             5326 ; 26   |        int SEN8        :1;
                             5327 ; 27   |        int SEN9        :1;
                             5328 ; 28   |        int SEN10       :1;
                             5329 ; 29   |        int SEN11       :1;
                             5330 ; 30   |        int SEN12       :1;
                             5331 ; 31   |        int SEN13       :1;
                             5332 ; 32   |        int SEN14       :1;
                             5333 ; 33   |        int SEN15       :1;
                             5334 ; 34   |        int SEN16       :1;
                             5335 ; 35   |        int SEN17       :1;
                             5336 ; 36   |        int SEN18       :1;
                             5337 ; 37   |        int SEN19       :1;
                             5338 ; 38   |        int SEN20       :1;
                             5339 ; 39   |        int SEN21       :1;
                             5340 ; 40   |        int SEN22       :1;
                             5341 ; 41   |        int SEN23       :1;
                             5342 ; 42   |    } B;
                             5343 ; 43   |    int I;
                             5344 ; 44   |} iclenable0_type;
                             5345 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             5346 ; 46   |
                             5347 ; 47   |
                             5348 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5349 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5350 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5351 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5352 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5353 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5354 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5355 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5356 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5357 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5358 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5359 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5360 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5361 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5362 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5363 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5364 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5365 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5366 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5367 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5368 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5369 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5370 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5371 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5372 ; 72   |
                             5373 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5374 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5375 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5376 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5377 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5378 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5379 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5380 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5381 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5382 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5383 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5384 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5385 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5386 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5387 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5388 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5389 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5390 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5391 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5392 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5393 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5394 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5395 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5396 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5397 ; 97   |
                             5398 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5399 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5400 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5401 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5402 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5403 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5404 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5405 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5406 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5407 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5408 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5409 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5410 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5411 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5412 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5413 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5414 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5415 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5416 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5417 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5418 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5419 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5420 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5421 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5422 ; 122  |
                             5423 ; 123  |
                             5424 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5425 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5426 ; 126  |typedef union
                             5427 ; 127  |{
                             5428 ; 128  |    struct {
                             5429 ; 129  |        
                             5430 ; 130  |        int SEN24       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5431 ; 131  |        int SEN25       :1;
                             5432 ; 132  |        int SEN26       :1;
                             5433 ; 133  |        int SEN27       :1;
                             5434 ; 134  |        int SEN28       :1;
                             5435 ; 135  |        int SEN29       :1;
                             5436 ; 136  |        int SEN30       :1;
                             5437 ; 137  |        int SEN31       :1;
                             5438 ; 138  |        int SEN32       :1;
                             5439 ; 139  |        int SEN33       :1;
                             5440 ; 140  |    } B;
                             5441 ; 141  |    int I;
                             5442 ; 142  |} iclenable1_type;
                             5443 ; 143  |
                             5444 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             5445 ; 145  |
                             5446 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5447 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5448 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5449 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5450 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5451 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5452 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5453 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5454 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5455 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5456 ; 156  |
                             5457 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5458 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5459 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5460 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5461 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5462 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5463 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5464 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5465 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5466 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5467 ; 167  |
                             5468 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5469 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5470 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5471 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5472 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5473 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5474 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5475 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5476 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5477 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5478 ; 178  |
                             5479 ; 179  |
                             5480 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5481 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5482 ; 182  |typedef union
                             5483 ; 183  |{
                             5484 ; 184  |    struct {
                             5485 ; 185  |        int SST0        :1;
                             5486 ; 186  |        int SST1        :1;
                             5487 ; 187  |        int SST2        :1;
                             5488 ; 188  |        int SST3        :1;
                             5489 ; 189  |        int SST4        :1;
                             5490 ; 190  |        int SST5        :1;
                             5491 ; 191  |        int SST6        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5492 ; 192  |        int SST7        :1;
                             5493 ; 193  |        int SST8        :1;
                             5494 ; 194  |        int SST9        :1;
                             5495 ; 195  |        int SST10       :1;
                             5496 ; 196  |        int SST11       :1;
                             5497 ; 197  |        int SST12       :1;
                             5498 ; 198  |        int SST13       :1;
                             5499 ; 199  |        int SST14       :1;
                             5500 ; 200  |        int SST15       :1;
                             5501 ; 201  |        int SST16       :1;
                             5502 ; 202  |        int SST17       :1;
                             5503 ; 203  |        int SST18       :1;
                             5504 ; 204  |        int SST19       :1;
                             5505 ; 205  |        int SST20       :1;
                             5506 ; 206  |        int SST21       :1;
                             5507 ; 207  |        int SST22       :1;
                             5508 ; 208  |        int SST23       :1;
                             5509 ; 209  |    } B;
                             5510 ; 210  |    int I;
                             5511 ; 211  |} iclstatus0_type;
                             5512 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             5513 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5514 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5515 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5516 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5517 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5518 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5519 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5520 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5521 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5522 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5523 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5524 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5525 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5526 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5527 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5528 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5529 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5530 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5531 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5532 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5533 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5534 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5535 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5536 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5537 ; 237  |
                             5538 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5539 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5540 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5541 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5542 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5543 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5544 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5545 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5546 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5547 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5548 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5549 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5550 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5551 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5552 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5553 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5554 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5555 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5556 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5557 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5558 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5559 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5560 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5561 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5562 ; 262  |
                             5563 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5564 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5565 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5566 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5567 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5568 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5569 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             5570 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5571 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5572 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5573 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5574 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5575 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5576 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5577 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5578 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5579 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5580 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5581 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5582 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5583 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5584 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5585 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5586 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             5587 ; 287  |
                             5588 ; 288  |
                             5589 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5590 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5591 ; 291  |typedef union
                             5592 ; 292  |{
                             5593 ; 293  |    struct {
                             5594 ; 294  |        int SST24       :1;
                             5595 ; 295  |        int SST25       :1;
                             5596 ; 296  |        int SST26       :1;
                             5597 ; 297  |        int SST27       :1;
                             5598 ; 298  |        int SST28       :1;
                             5599 ; 299  |        int SST29       :1;
                             5600 ; 300  |        int SST30       :1;
                             5601 ; 301  |        int SST31       :1;
                             5602 ; 302  |        int SST32       :1;
                             5603 ; 303  |        int SST33       :1;
                             5604 ; 304  |    } B;
                             5605 ; 305  |    int I;
                             5606 ; 306  |} iclstatus1_type;
                             5607 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             5608 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5609 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             5610 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5611 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5612 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5613 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5614 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5615 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5616 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5617 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5618 ; 318  |
                             5619 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5620 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5621 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5622 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5623 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5624 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5625 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5626 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5627 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5628 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5629 ; 329  |
                             5630 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             5631 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5632 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5633 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5634 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5635 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5636 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5637 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5638 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5639 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5640 ; 340  |
                             5641 ; 341  |
                             5642 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5643 ; 343  |//  Interrupt Collector Priority Defs
                             5644 ; 344  |typedef union
                             5645 ; 345  |{
                             5646 ; 346  |    struct {
                             5647 ; 347  |        unsigned S0P    :3;
                             5648 ; 348  |        unsigned S1P    :3;
                             5649 ; 349  |        unsigned S2P    :3;
                             5650 ; 350  |        unsigned S3P    :3;
                             5651 ; 351  |        unsigned S4P    :3;
                             5652 ; 352  |        unsigned S5P    :3;
                             5653 ; 353  |        unsigned S6P    :3;
                             5654 ; 354  |        unsigned S7P    :3;
                             5655 ; 355  |    } B;
                             5656 ; 356  |    int I;
                             5657 ; 357  |
                             5658 ; 358  |} iclprior0_type;
                             5659 ; 359  |
                             5660 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             5661 ; 361  |
                             5662 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5663 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5664 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5665 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5666 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5667 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5668 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5669 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5670 ; 370  |
                             5671 ; 371  |
                             5672 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5673 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5674 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5675 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5676 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5677 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5678 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5679 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5680 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5681 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5682 ; 382  |
                             5683 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5684 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5685 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5686 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5687 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5688 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5689 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5690 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5691 ; 391  |
                             5692 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5693 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5694 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5695 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5696 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5697 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5698 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5699 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5700 ; 400  |
                             5701 ; 401  |
                             5702 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5703 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5704 ; 404  |typedef union
                             5705 ; 405  |{
                             5706 ; 406  |    struct {
                             5707 ; 407  |        unsigned S8P    :3;
                             5708 ; 408  |        unsigned S9P    :3;
                             5709 ; 409  |        unsigned S10P   :3;
                             5710 ; 410  |        unsigned S11P   :3;
                             5711 ; 411  |        unsigned S12P   :3;
                             5712 ; 412  |        unsigned S13P   :3;
                             5713 ; 413  |        unsigned S14P   :3;
                             5714 ; 414  |        unsigned S15P   :3;
                             5715 ; 415  |    } B;
                             5716 ; 416  |    int I;
                             5717 ; 417  |} iclprior1_type;
                             5718 ; 418  |
                             5719 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             5720 ; 420  |
                             5721 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5722 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5723 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5724 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5725 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5726 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5727 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5728 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5729 ; 429  |
                             5730 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5731 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5732 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5733 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5734 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5735 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5736 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5737 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5738 ; 438  |
                             5739 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5740 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5741 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5742 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5743 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5744 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5745 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5746 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5747 ; 447  |
                             5748 ; 448  |
                             5749 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5750 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5751 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5752 ; 452  |{
                             5753 ; 453  |    struct {
                             5754 ; 454  |        unsigned S16P   :3;
                             5755 ; 455  |        unsigned S17P   :3;
                             5756 ; 456  |        unsigned S18P   :3;
                             5757 ; 457  |        unsigned S19P   :3;
                             5758 ; 458  |        unsigned S20P   :3;
                             5759 ; 459  |        unsigned S21P   :3;
                             5760 ; 460  |        unsigned S22P   :3;
                             5761 ; 461  |        unsigned S23P   :3;
                             5762 ; 462  |    } B;
                             5763 ; 463  |    int I;
                             5764 ; 464  |} iclprior2_type;
                             5765 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             5766 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5767 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5768 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             5769 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5770 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5771 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5772 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5773 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5774 ; 474  |
                             5775 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5776 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5777 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5778 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5779 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5780 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5781 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5782 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5783 ; 483  |
                             5784 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5785 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5786 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5787 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5788 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5789 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5790 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5791 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5792 ; 492  |
                             5793 ; 493  |
                             5794 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5795 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5796 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5797 ; 497  |{
                             5798 ; 498  |    struct {
                             5799 ; 499  |        unsigned S24P   :3;
                             5800 ; 500  |        unsigned S25P   :3;
                             5801 ; 501  |        unsigned S26P   :3;
                             5802 ; 502  |        unsigned S27P   :3;
                             5803 ; 503  |        unsigned S28P   :3;
                             5804 ; 504  |        unsigned S29P   :3;
                             5805 ; 505  |        unsigned S30P   :3;
                             5806 ; 506  |        unsigned S31P   :3;
                             5807 ; 507  |    } B;
                             5808 ; 508  |    int I;
                             5809 ; 509  |} iclprior3_type;
                             5810 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             5811 ; 511  |
                             5812 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             5813 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5814 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5815 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5816 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5817 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5818 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5819 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5820 ; 520  |
                             5821 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5822 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5823 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5824 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5825 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5826 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5827 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5828 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5829 ; 529  |
                             5830 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5831 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5832 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5833 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5834 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5835 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5836 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5837 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5838 ; 538  |
                             5839 ; 539  |
                             5840 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5841 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5842 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5843 ; 543  |{
                             5844 ; 544  |    struct {
                             5845 ; 545  |        unsigned S32P   :3;
                             5846 ; 546  |        unsigned S33P   :3;
                             5847 ; 547  |    } B;
                             5848 ; 548  |    int I;
                             5849 ; 549  |} iclprior4_type;
                             5850 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             5851 ; 551  |
                             5852 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5853 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5854 ; 554  |
                             5855 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5856 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5857 ; 557  |
                             5858 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5859 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5860 ; 560  |
                             5861 ; 561  |
                             5862 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5863 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5864 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5865 ; 565  |{
                             5866 ; 566  |    struct {
                             5867 ; 567  |        unsigned S0S    :2;
                             5868 ; 568  |        unsigned S1S    :2;
                             5869 ; 569  |        unsigned S2S    :2;
                             5870 ; 570  |        unsigned S3S    :2;
                             5871 ; 571  |        unsigned S4S    :2;
                             5872 ; 572  |        unsigned S5S    :2;
                             5873 ; 573  |        unsigned S6S    :2;
                             5874 ; 574  |        unsigned S7S    :2;
                             5875 ; 575  |        unsigned S8S    :2;
                             5876 ; 576  |        unsigned S9S    :2;
                             5877 ; 577  |        unsigned S10S   :2;
                             5878 ; 578  |        unsigned S11S   :2;
                             5879 ; 579  |    } B;
                             5880 ; 580  |    int I;
                             5881 ; 581  |} iclsteer0_type;
                             5882 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             5883 ; 583  |
                             5884 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5885 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5886 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5887 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5888 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5889 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             5890 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5891 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5892 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5893 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5894 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5895 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5896 ; 596  |
                             5897 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5898 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5899 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5900 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5901 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5902 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5903 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5904 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5905 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5906 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5907 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5908 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5909 ; 609  |
                             5910 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5911 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5912 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5913 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5914 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5915 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5916 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5917 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5918 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5919 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5920 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5921 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5922 ; 622  |
                             5923 ; 623  |
                             5924 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5925 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5926 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5927 ; 627  |{
                             5928 ; 628  |    struct {
                             5929 ; 629  |        unsigned S12S   :2;
                             5930 ; 630  |        unsigned S13S   :2;
                             5931 ; 631  |        unsigned S14S   :2;
                             5932 ; 632  |        unsigned S15S   :2;
                             5933 ; 633  |        unsigned S16S   :2;
                             5934 ; 634  |        unsigned S17S   :2;
                             5935 ; 635  |        unsigned S18S   :2;
                             5936 ; 636  |        unsigned S19S   :2;
                             5937 ; 637  |        unsigned S20S   :2;
                             5938 ; 638  |        unsigned S21S   :2;
                             5939 ; 639  |        unsigned S22S   :2;
                             5940 ; 640  |        unsigned S23S   :2;
                             5941 ; 641  |    } B;
                             5942 ; 642  |    int I;
                             5943 ; 643  |} iclsteer1_type;
                             5944 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             5945 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5946 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5947 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5948 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5949 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5950 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             5951 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5952 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5953 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5954 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5955 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5956 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5957 ; 657  |
                             5958 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5959 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5960 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5961 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5962 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5963 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5964 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5965 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5966 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5967 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5968 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5969 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5970 ; 670  |
                             5971 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5972 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5973 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5974 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5975 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5976 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5977 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5978 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5979 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5980 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5981 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5982 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5983 ; 683  |
                             5984 ; 684  |
                             5985 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5986 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5987 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5988 ; 688  |{
                             5989 ; 689  |    struct {
                             5990 ; 690  |        unsigned S24S   :2;
                             5991 ; 691  |        unsigned S25S   :2;
                             5992 ; 692  |        unsigned S26S   :2;
                             5993 ; 693  |        unsigned S27S   :2;
                             5994 ; 694  |        unsigned S28S   :2;
                             5995 ; 695  |        unsigned S29S   :2;
                             5996 ; 696  |        unsigned S30S   :2;
                             5997 ; 697  |        unsigned S31S   :2;
                             5998 ; 698  |        unsigned S32S   :2;
                             5999 ; 699  |        unsigned S33S   :2;
                             6000 ; 700  |    } B;
                             6001 ; 701  |    int I;
                             6002 ; 702  |} iclsteer2_type;
                             6003 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             6004 ; 704  |
                             6005 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             6006 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             6007 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             6008 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             6009 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             6010 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             6011 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             6012 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             6013 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             6014 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             6015 ; 715  |
                             6016 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             6017 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             6018 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             6019 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             6020 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             6021 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             6022 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             6023 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             6024 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             6025 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             6026 ; 726  |
                             6027 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             6028 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             6029 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             6030 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             6031 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             6032 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             6033 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             6034 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             6035 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             6036 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             6037 ; 737  |
                             6038 ; 738  |
                             6039 ; 739  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6040 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6041 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6042 ; 742  |{
                             6043 ; 743  |    struct {
                             6044 ; 744  |        int S0FV        :1;
                             6045 ; 745  |        int S1FV        :1;
                             6046 ; 746  |        int S2FV        :1;
                             6047 ; 747  |        int S3FV        :1;
                             6048 ; 748  |        int S4FV        :1;
                             6049 ; 749  |        int S5FV        :1;
                             6050 ; 750  |        int S6FV        :1;
                             6051 ; 751  |        int S7FV        :1;
                             6052 ; 752  |        int S8FV        :1;
                             6053 ; 753  |        int S9FV        :1;
                             6054 ; 754  |        int S10FV       :1;
                             6055 ; 755  |        int S11FV       :1;
                             6056 ; 756  |        int S12FV       :1;
                             6057 ; 757  |        int S13FV       :1;
                             6058 ; 758  |        int S14FV       :1;
                             6059 ; 759  |        int S15FV       :1;
                             6060 ; 760  |        int S16FV       :1;
                             6061 ; 761  |        int S17FV       :1;
                             6062 ; 762  |        int S18FV       :1;
                             6063 ; 763  |        int S19FV       :1;
                             6064 ; 764  |        int S20FV       :1;
                             6065 ; 765  |        int S21FV       :1;
                             6066 ; 766  |        int S22FV       :1;
                             6067 ; 767  |        int S23FV       :1;
                             6068 ; 768  |    } B;
                             6069 ; 769  |    int I;
                             6070 ; 770  |} iclforce0_type;
                             6071 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             6072 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6073 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6074 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6075 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6076 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6077 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6078 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6079 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             6080 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6081 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6082 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6083 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6084 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6085 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6086 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6087 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6088 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6089 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6090 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6091 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6092 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6093 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6094 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6095 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6096 ; 796  |
                             6097 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6098 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6099 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6100 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6101 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6102 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6103 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6104 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6105 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6106 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6107 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6108 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6109 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6110 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6111 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6112 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6113 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6114 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6115 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6116 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6117 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6118 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6119 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6120 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6121 ; 821  |
                             6122 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6123 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6124 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6125 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6126 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6127 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6128 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6129 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6130 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6131 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6132 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6133 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6134 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6135 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6136 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6137 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6138 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6139 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6140 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6141 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             6142 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6143 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6144 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6145 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6146 ; 846  |
                             6147 ; 847  |
                             6148 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6149 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6150 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6151 ; 851  |{
                             6152 ; 852  |    struct {
                             6153 ; 853  |        int S24FV       :1;
                             6154 ; 854  |        int S25FV       :1;
                             6155 ; 855  |        int S26FV       :1;
                             6156 ; 856  |        int S27FV       :1;
                             6157 ; 857  |        int S28FV       :1;
                             6158 ; 858  |        int S29FV       :1;
                             6159 ; 859  |        int S30FV       :1;
                             6160 ; 860  |        int S31FV       :1;
                             6161 ; 861  |        int S32FV       :1;
                             6162 ; 862  |        int S33FV       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6163 ; 863  |    } B;
                             6164 ; 864  |    int I;
                             6165 ; 865  |} iclforce1_type;
                             6166 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             6167 ; 867  |
                             6168 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6169 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6170 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6171 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6172 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6173 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6174 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6175 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6176 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6177 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6178 ; 878  |
                             6179 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6180 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6181 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6182 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6183 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6184 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6185 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6186 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6187 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6188 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6189 ; 889  |
                             6190 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6191 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6192 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6193 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6194 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6195 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6196 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6197 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6198 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6199 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6200 ; 900  |
                             6201 ; 901  |
                             6202 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             6203 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6204 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6205 ; 905  |{
                             6206 ; 906  |    struct {
                             6207 ; 907  |        int S0FE        :1;
                             6208 ; 908  |        int S1FE        :1;
                             6209 ; 909  |        int S2FE        :1;
                             6210 ; 910  |        int S3FE        :1;
                             6211 ; 911  |        int S4FE        :1;
                             6212 ; 912  |        int S5FE        :1;
                             6213 ; 913  |        int S6FE        :1;
                             6214 ; 914  |        int S7FE        :1;
                             6215 ; 915  |        int S8FE        :1;
                             6216 ; 916  |        int S9FE        :1;
                             6217 ; 917  |        int S10FE       :1;
                             6218 ; 918  |        int S11FE       :1;
                             6219 ; 919  |        int S12FE       :1;
                             6220 ; 920  |        int S13FE       :1;
                             6221 ; 921  |        int S14FE       :1;
                             6222 ; 922  |        int S15FE       :1;
                             6223 ; 923  |        int S16FE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6224 ; 924  |        int S17FE       :1;
                             6225 ; 925  |        int S18FE       :1;
                             6226 ; 926  |        int S19FE       :1;
                             6227 ; 927  |        int S20FE       :1;
                             6228 ; 928  |        int S21FE       :1;
                             6229 ; 929  |        int S22FE       :1;
                             6230 ; 930  |        int S23FE       :1;
                             6231 ; 931  |    } B;
                             6232 ; 932  |    int I;
                             6233 ; 933  |} iclfenable0_type;
                             6234 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             6235 ; 935  |
                             6236 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6237 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6238 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6239 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6240 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6241 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6242 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6243 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6244 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6245 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6246 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6247 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6248 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6249 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6250 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6251 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6252 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6253 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6254 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6255 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6256 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6257 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6258 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6259 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6260 ; 960  |
                             6261 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6262 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6263 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             6264 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6265 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6266 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6267 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6268 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6269 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6270 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6271 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6272 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6273 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6274 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6275 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6276 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6277 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6278 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6279 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6280 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6281 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6282 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6283 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6284 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6285 ; 985  |
                             6286 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6287 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6288 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6289 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6290 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6291 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6292 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6293 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6294 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6295 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6296 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6297 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6298 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6299 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6300 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6301 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6302 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6303 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6304 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6305 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6306 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6307 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6308 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6309 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6310 ; 1010 |
                             6311 ; 1011 |
                             6312 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6313 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6314 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6315 ; 1015 |{
                             6316 ; 1016 |    struct {
                             6317 ; 1017 |        int S24FE       :1;
                             6318 ; 1018 |        int S25FE       :1;
                             6319 ; 1019 |        int S26FE       :1;
                             6320 ; 1020 |        int S27FE       :1;
                             6321 ; 1021 |        int S28FE       :1;
                             6322 ; 1022 |        int S29FE       :1;
                             6323 ; 1023 |        int S30FE       :1;
                             6324 ; 1024 |        int S31FE       :1;
                             6325 ; 1025 |        int S32FE       :1;
                             6326 ; 1026 |        int S33FE       :1;
                             6327 ; 1027 |    } B;
                             6328 ; 1028 |    int I;
                             6329 ; 1029 |} iclfenable1_type;
                             6330 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             6331 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6332 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6333 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6334 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6335 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6336 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6337 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6338 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6339 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6340 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6341 ; 1041 |
                             6342 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6343 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6344 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6345 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6346 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6347 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6348 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6349 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6350 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6351 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6352 ; 1052 |
                             6353 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6354 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6355 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6356 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6357 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6358 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6359 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6360 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6361 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6362 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6363 ; 1063 |
                             6364 ; 1064 |
                             6365 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6366 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6367 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6368 ; 1068 |{
                             6369 ; 1069 |    struct {
                             6370 ; 1070 |        unsigned RQ     :7;
                             6371 ; 1071 |        unsigned IVA    :7;
                             6372 ; 1072 |        unsigned IVB    :7;
                             6373 ; 1073 |    } B;
                             6374 ; 1074 |    int I;
                             6375 ; 1075 |} iclobsvz0_type;
                             6376 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             6377 ; 1077 |
                             6378 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6379 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6380 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6381 ; 1081 |
                             6382 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6383 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6384 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6385 ; 1085 |
                             6386 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6387 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6388 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6389 ; 1089 |
                             6390 ; 1090 |
                             6391 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6392 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6393 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6394 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6395 ; 1095 |
                             6396 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6397 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6398 ; 1098 |
                             6399 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6400 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6401 ; 1101 |
                             6402 ; 1102 |
                             6403 ; 1103 |
                             6404 ; 1104 |
                             6405 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6406 ; 1106 |//  Interrupt Vectors
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6407 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6408 ; 1108 |// Reset Vector
                             6409 ; 1109 |#define HW_IVECRESET 0x0000           
                             6410 ; 1110 |// Stack Error
                             6411 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6412 ; 1112 |// Trace
                             6413 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6414 ; 1114 |// SWI
                             6415 ; 1115 |#define HW_IVECSWI 0x0006           
                             6416 ; 1116 |// ~IRQA
                             6417 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6418 ; 1118 |// ~IRQB - BROWNOUT
                             6419 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6420 ; 1120 |// Fatal Error
                             6421 ; 1121 |#define HW_IVECERROR 0x000C           
                             6422 ; 1122 |// SPI
                             6423 ; 1123 |#define HW_IVECSPI 0x000E           
                             6424 ; 1124 |// I2S TX Data Empty
                             6425 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6426 ; 1126 |// I2S TX Underflow
                             6427 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6428 ; 1128 |// I2S RX Data Full
                             6429 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6430 ; 1130 |// I2S RX Overflow
                             6431 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6432 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             6433 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             6434 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             6435 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6436 ; 1136 |// GPIO1
                             6437 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6438 ; 1138 |// GPIO2
                             6439 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6440 ; 1140 |// GPIO0
                             6441 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6442 ; 1142 |// TIMER0
                             6443 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6444 ; 1144 |// TIMER1
                             6445 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6446 ; 1146 |// TIMER2
                             6447 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6448 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             6449 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             6450 ; 1150 |// I2C RX Data Ready
                             6451 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6452 ; 1152 |// I2C RX Overflow
                             6453 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6454 ; 1154 |// I2C TX Data Empty
                             6455 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6456 ; 1156 |// I2C TX Underflow
                             6457 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6458 ; 1158 |// Illegal Instruction
                             6459 ; 1159 |#define HW_IVECILI 0x0038           
                             6460 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             6461 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6462 ; 1162 |#define HW_IVECDACE 0x003C           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6463 ; 1163 |// DAC Underflow ISR
                             6464 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6465 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             6466 ; 1166 |// ADC Full ISR
                             6467 ; 1167 |#define HW_IVECADCF 0x0042           
                             6468 ; 1168 |// ADC Overflow ISR
                             6469 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6470 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             6471 ; 1171 |// TIMER3
                             6472 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6473 ; 1173 |// GPIO3
                             6474 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6475 ; 1175 |// SDRAM
                             6476 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6477 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             6478 ; 1178 |// 5 volt power connected
                             6479 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6480 ; 1180 |// USB Controller
                             6481 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6482 ; 1182 |// USB Wakeup 
                             6483 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6484 ; 1184 |// 5 volt power disconnected
                             6485 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6486 ; 1186 |// enhanced SPI
                             6487 ; 1187 |#define HW_IVECESPI 0x0058           
                             6488 ; 1188 |// filter coprocessor
                             6489 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6490 ; 1190 |// low res ADC #1
                             6491 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6492 ; 1192 |// real time clock alarm
                             6493 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6494 ; 1194 |// low res ADC #2
                             6495 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6496 ; 1196 |// flash hardware ECC
                             6497 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6498 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             6499 ; 1199 |// CDSYNC Interrupt
                             6500 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6501 ; 1201 |// CDSYNC Exception
                             6502 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6503 ; 1203 |// RS
                             6504 ; 1204 |#define HW_IVECRS 0x006A           
                             6505 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             6506 ; 1206 |// Flash Done ISR
                             6507 ; 1207 |#define HW_IVECFD 0x006E           
                             6508 ; 1208 |// CompactFlash ISR
                             6509 ; 1209 |#define HW_IVECCF 0x0070           
                             6510 ; 1210 |// SmartMedia Timeout ISR
                             6511 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6512 ; 1212 |// SmartMedia Invalid Programming
                             6513 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6514 ; 1214 |// CompactFlash No Card ISR
                             6515 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6516 ; 1216 |// CompactFlash Status Change ISR
                             6517 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6518 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6519 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             6520 ; 1220 |// CDI
                             6521 ; 1221 |#define HW_IVECCDI 0x007E           
                             6522 ; 1222 |
                             6523 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6524 ; 1224 |//  Interrupt Vectors
                             6525 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6526 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6527 ; 1227 |#define VECTOR(address,isr) \ 
                             6528 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6529 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6530 ; 1230 |
                             6531 ; 1231 |
                             6532 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6533 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6534 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6535 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6536 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6537 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6538 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6539 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6540 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6541 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6542 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6543 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6544 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6545 ; 1245 |
                             6546 ; 1246 |// Interrupt Disabled
                             6547 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6548 ; 1248 |// Interrupt Priority Level 0
                             6549 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6550 ; 1250 |// Interrupt Priority Level 1
                             6551 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             6552 ; 1252 |// Interrupt Priority Level 2
                             6553 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6554 ; 1254 |
                             6555 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6556 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6557 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6558 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6559 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6560 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6561 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6562 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6563 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6564 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6565 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6566 ; 1266 |
                             6567 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6568 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6569 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6570 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6571 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6572 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6573 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6574 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6575 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6576 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6577 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6578 ; 1278 |
                             6579 ; 1279 |// Interrupt Priority register
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6580 ; 1280 |typedef union               
                             6581 ; 1281 |{
                             6582 ; 1282 |    struct {
                             6583 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6584 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6585 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6586 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6587 ; 1287 |        int                 :4; /* Reserved */
                             6588 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6589 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6590 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6591 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6592 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6593 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6594 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6595 ; 1295 |    } B;
                             6596 ; 1296 |
                             6597 ; 1297 |    int I;
                             6598 ; 1298 |
                             6599 ; 1299 |} ipr_type;
                             6600 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6601 ; 1301 |
                             6602 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             6603 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             6604 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             6605 ; 1305 |
                             6606 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6607 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6608 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6609 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6610 ; 1310 |
                             6611 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             6612 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6613 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             6614 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6615 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6616 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6617 ; 1317 |
                             6618 ; 1318 |#endif
                             6619 ; 1319 |
                             6620 
                             6622 
                             6623 ; 26   |#include "regslradc.h"
                             6624 
                             6626 
                             6627 ; 1    |#if !(defined(regslradcinc))
                             6628 ; 2    |
                             6629 ; 3    |#define regslradcinc 1
                             6630 ; 4    |
                             6631 ; 5    |#include "types.h"
                             6632 
                             6634 
                             6635 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6636 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6637 ; 3    |//
                             6638 ; 4    |// Filename: types.h
                             6639 ; 5    |// Description: Standard data types
                             6640 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6641 ; 7    |
                             6642 ; 8    |#ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6643 ; 9    |#define _TYPES_H
                             6644 ; 10   |
                             6645 ; 11   |// TODO:  move this outta here!
                             6646 ; 12   |#if !defined(NOERROR)
                             6647 ; 13   |#define NOERROR 0
                             6648 ; 14   |#define SUCCESS 0
                             6649 ; 15   |#endif 
                             6650 ; 16   |#if !defined(SUCCESS)
                             6651 ; 17   |#define SUCCESS  0
                             6652 ; 18   |#endif
                             6653 ; 19   |#if !defined(ERROR)
                             6654 ; 20   |#define ERROR   -1
                             6655 ; 21   |#endif
                             6656 ; 22   |#if !defined(FALSE)
                             6657 ; 23   |#define FALSE 0
                             6658 ; 24   |#endif
                             6659 ; 25   |#if !defined(TRUE)
                             6660 ; 26   |#define TRUE  1
                             6661 ; 27   |#endif
                             6662 ; 28   |
                             6663 ; 29   |#if !defined(NULL)
                             6664 ; 30   |#define NULL 0
                             6665 ; 31   |#endif
                             6666 ; 32   |
                             6667 ; 33   |#define MAX_INT     0x7FFFFF
                             6668 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6669 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6670 ; 36   |#define MAX_ULONG   (-1) 
                             6671 ; 37   |
                             6672 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6673 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6674 ; 40   |
                             6675 ; 41   |
                             6676 ; 42   |#define BYTE    unsigned char       // btVarName
                             6677 ; 43   |#define CHAR    signed char         // cVarName
                             6678 ; 44   |#define USHORT  unsigned short      // usVarName
                             6679 ; 45   |#define SHORT   unsigned short      // sVarName
                             6680 ; 46   |#define WORD    unsigned int        // wVarName
                             6681 ; 47   |#define INT     signed int          // iVarName
                             6682 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6683 ; 49   |#define LONG    signed long         // lVarName
                             6684 ; 50   |#define BOOL    unsigned int        // bVarName
                             6685 ; 51   |#define FRACT   _fract              // frVarName
                             6686 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6687 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6688 ; 54   |#define FLOAT   float               // fVarName
                             6689 ; 55   |#define DBL     double              // dVarName
                             6690 ; 56   |#define ENUM    enum                // eVarName
                             6691 ; 57   |#define CMX     _complex            // cmxVarName
                             6692 ; 58   |typedef WORD UCS3;                   // 
                             6693 ; 59   |
                             6694 ; 60   |#define UINT16  unsigned short
                             6695 ; 61   |#define UINT8   unsigned char   
                             6696 ; 62   |#define UINT32  unsigned long
                             6697 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6698 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6699 ; 65   |#define WCHAR   UINT16
                             6700 ; 66   |
                             6701 ; 67   |//UINT128 is 16 bytes or 6 words
                             6702 ; 68   |typedef struct UINT128_3500 {   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6703 ; 69   |    int val[6];     
                             6704 ; 70   |} UINT128_3500;
                             6705 ; 71   |
                             6706 ; 72   |#define UINT128   UINT128_3500
                             6707 ; 73   |
                             6708 ; 74   |// Little endian word packed byte strings:   
                             6709 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6710 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6711 ; 77   |// Little endian word packed byte strings:   
                             6712 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6713 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6714 ; 80   |
                             6715 ; 81   |// Declare Memory Spaces To Use When Coding
                             6716 ; 82   |// A. Sector Buffers
                             6717 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6718 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6719 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6720 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6721 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6722 ; 88   |// B. Media DDI Memory
                             6723 ; 89   |#define MEDIA_DDI_MEM _Y
                             6724 ; 90   |
                             6725 ; 91   |
                             6726 ; 92   |
                             6727 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6728 ; 94   |// Examples of circular pointers:
                             6729 ; 95   |//    INT CIRC cpiVarName
                             6730 ; 96   |//    DWORD CIRC cpdwVarName
                             6731 ; 97   |
                             6732 ; 98   |#define RETCODE INT                 // rcVarName
                             6733 ; 99   |
                             6734 ; 100  |// generic bitfield structure
                             6735 ; 101  |struct Bitfield {
                             6736 ; 102  |    unsigned int B0  :1;
                             6737 ; 103  |    unsigned int B1  :1;
                             6738 ; 104  |    unsigned int B2  :1;
                             6739 ; 105  |    unsigned int B3  :1;
                             6740 ; 106  |    unsigned int B4  :1;
                             6741 ; 107  |    unsigned int B5  :1;
                             6742 ; 108  |    unsigned int B6  :1;
                             6743 ; 109  |    unsigned int B7  :1;
                             6744 ; 110  |    unsigned int B8  :1;
                             6745 ; 111  |    unsigned int B9  :1;
                             6746 ; 112  |    unsigned int B10 :1;
                             6747 ; 113  |    unsigned int B11 :1;
                             6748 ; 114  |    unsigned int B12 :1;
                             6749 ; 115  |    unsigned int B13 :1;
                             6750 ; 116  |    unsigned int B14 :1;
                             6751 ; 117  |    unsigned int B15 :1;
                             6752 ; 118  |    unsigned int B16 :1;
                             6753 ; 119  |    unsigned int B17 :1;
                             6754 ; 120  |    unsigned int B18 :1;
                             6755 ; 121  |    unsigned int B19 :1;
                             6756 ; 122  |    unsigned int B20 :1;
                             6757 ; 123  |    unsigned int B21 :1;
                             6758 ; 124  |    unsigned int B22 :1;
                             6759 ; 125  |    unsigned int B23 :1;
                             6760 ; 126  |};
                             6761 ; 127  |
                             6762 ; 128  |union BitInt {
                             6763 ; 129  |        struct Bitfield B;
                             6764 ; 130  |        int        I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6765 ; 131  |};
                             6766 ; 132  |
                             6767 ; 133  |#define MAX_MSG_LENGTH 10
                             6768 ; 134  |struct CMessage
                             6769 ; 135  |{
                             6770 ; 136  |        unsigned int m_uLength;
                             6771 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6772 ; 138  |};
                             6773 ; 139  |
                             6774 ; 140  |typedef struct {
                             6775 ; 141  |    WORD m_wLength;
                             6776 ; 142  |    WORD m_wMessage;
                             6777 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6778 ; 144  |} Message;
                             6779 ; 145  |
                             6780 ; 146  |struct MessageQueueDescriptor
                             6781 ; 147  |{
                             6782 ; 148  |        int *m_pBase;
                             6783 ; 149  |        int m_iModulo;
                             6784 ; 150  |        int m_iSize;
                             6785 ; 151  |        int *m_pHead;
                             6786 ; 152  |        int *m_pTail;
                             6787 ; 153  |};
                             6788 ; 154  |
                             6789 ; 155  |struct ModuleEntry
                             6790 ; 156  |{
                             6791 ; 157  |    int m_iSignaledEventMask;
                             6792 ; 158  |    int m_iWaitEventMask;
                             6793 ; 159  |    int m_iResourceOfCode;
                             6794 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6795 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6796 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6797 ; 163  |    int m_uTimeOutHigh;
                             6798 ; 164  |    int m_uTimeOutLow;
                             6799 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6800 ; 166  |};
                             6801 ; 167  |
                             6802 ; 168  |union WaitMask{
                             6803 ; 169  |    struct B{
                             6804 ; 170  |        unsigned int m_bNone     :1;
                             6805 ; 171  |        unsigned int m_bMessage  :1;
                             6806 ; 172  |        unsigned int m_bTimer    :1;
                             6807 ; 173  |        unsigned int m_bButton   :1;
                             6808 ; 174  |    } B;
                             6809 ; 175  |    int I;
                             6810 ; 176  |} ;
                             6811 ; 177  |
                             6812 ; 178  |
                             6813 ; 179  |struct Button {
                             6814 ; 180  |        WORD wButtonEvent;
                             6815 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6816 ; 182  |};
                             6817 ; 183  |
                             6818 ; 184  |struct Message {
                             6819 ; 185  |        WORD wMsgLength;
                             6820 ; 186  |        WORD wMsgCommand;
                             6821 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6822 ; 188  |};
                             6823 ; 189  |
                             6824 ; 190  |union EventTypes {
                             6825 ; 191  |        struct CMessage msg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6826 ; 192  |        struct Button Button ;
                             6827 ; 193  |        struct Message Message;
                             6828 ; 194  |};
                             6829 ; 195  |
                             6830 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6831 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6832 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6833 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6834 ; 200  |
                             6835 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6836 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6837 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6838 ; 204  |
                             6839 ; 205  |#if DEBUG
                             6840 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6841 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6842 ; 208  |#else 
                             6843 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6844 ; 210  |#define DebugBuildAssert(x)    
                             6845 ; 211  |#endif
                             6846 ; 212  |
                             6847 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6848 ; 214  |//  #pragma asm
                             6849 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6850 ; 216  |//  #pragma endasm
                             6851 ; 217  |
                             6852 ; 218  |
                             6853 ; 219  |#ifdef COLOR_262K
                             6854 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6855 ; 221  |#elif defined(COLOR_65K)
                             6856 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             6857 ; 223  |#else
                             6858 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6859 ; 225  |#endif
                             6860 ; 226  |    
                             6861 ; 227  |#endif // #ifndef _TYPES_H
                             6862 
                             6864 
                             6865 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6866 ; 7    |
                             6867 ; 8    |//   SYSTEM STMP Registers 
                             6868 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6869 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6870 ; 11   |
                             6871 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6872 ; 13   |
                             6873 ; 14   |
                             6874 ; 15   |
                             6875 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6876 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6877 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6878 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6879 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6880 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6881 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6882 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6883 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6884 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6885 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6886 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6887 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6888 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6889 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6890 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6891 ; 32   |
                             6892 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6893 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6894 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6895 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6896 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6897 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6898 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6899 ; 40   |
                             6900 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             6901 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6902 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             6903 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             6904 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             6905 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             6906 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             6907 ; 48   |
                             6908 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6909 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6910 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6911 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6912 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6913 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6914 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6915 ; 56   |
                             6916 ; 57   |typedef union               
                             6917 ; 58   |{
                             6918 ; 59   |    struct {
                             6919 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6920 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6921 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6922 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6923 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6924 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6925 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6926 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6927 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6928 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6929 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             6930 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             6931 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             6932 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             6933 ; 74   |    } B;
                             6934 ; 75   |   unsigned int I;
                             6935 ; 76   |        unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6936 ; 77   |} lradc_ctrl_type;
                             6937 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             6938 ; 79   |
                             6939 ; 80   |
                             6940 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6941 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6942 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6943 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6944 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6945 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6946 ; 87   |
                             6947 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6948 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6949 ; 90   |
                             6950 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6951 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6952 ; 93   |
                             6953 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             6954 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             6955 ; 96   |
                             6956 ; 97   |
                             6957 ; 98   |typedef union               
                             6958 ; 99   |{
                             6959 ; 100  |    struct {
                             6960 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6961 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6962 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6963 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6964 ; 105  |    } B;
                             6965 ; 106  |    unsigned int I;
                             6966 ; 107  |} lradc_thrsh_type;
                             6967 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             6968 ; 109  |
                             6969 ; 110  |
                             6970 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6971 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6972 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6973 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6974 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6975 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6976 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6977 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6978 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6979 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6980 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6981 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6982 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6983 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6984 ; 125  |
                             6985 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6986 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6987 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6988 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6989 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6990 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6991 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6992 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6993 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6994 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6995 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6996 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6997 ; 138  |
                             6998 ; 139  |
                             6999 ; 140  |
                             7000 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             7001 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             7002 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             7003 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             7004 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             7005 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             7006 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             7007 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             7008 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             7009 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             7010 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             7011 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             7012 ; 153  |
                             7013 ; 154  |
                             7014 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             7015 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             7016 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             7017 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             7018 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             7019 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             7020 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             7021 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             7022 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             7023 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             7024 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             7025 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             7026 ; 167  |
                             7027 ; 168  |typedef union               
                             7028 ; 169  |{
                             7029 ; 170  |    struct {
                             7030 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             7031 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             7032 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             7033 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             7034 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             7035 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             7036 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             7037 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7038 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7039 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7040 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             7041 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             7042 ; 183  |    } B;
                             7043 ; 184  |    unsigned int I;
                             7044 ; 185  |} lradc_result_type;
                             7045 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             7046 ; 187  |
                             7047 ; 188  |
                             7048 ; 189  |
                             7049 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7050 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7051 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7052 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7053 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7054 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7055 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7056 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7057 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7058 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7059 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7060 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7061 ; 202  |
                             7062 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7063 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7064 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7065 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7066 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7067 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7068 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7069 ; 210  |
                             7070 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7071 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7072 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7073 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             7074 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             7075 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             7076 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             7077 ; 218  |
                             7078 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             7079 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             7080 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7081 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7082 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7083 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7084 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7085 ; 226  |
                             7086 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             7087 ; 228  |
                             7088 ; 229  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7089 ; 230  |
                             7090 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7091 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7092 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7093 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7094 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7095 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7096 ; 237  |
                             7097 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7098 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7099 ; 240  |
                             7100 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7101 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7102 ; 243  |
                             7103 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7104 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7105 ; 246  |
                             7106 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             7107 ; 248  |
                             7108 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7109 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7110 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7111 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7112 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7113 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7114 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7115 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7116 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7117 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7118 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7119 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7120 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7121 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7122 ; 263  |
                             7123 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7124 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             7125 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7126 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7127 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7128 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7129 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7130 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7131 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7132 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7133 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7134 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7135 ; 276  |
                             7136 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7137 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7138 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7139 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7140 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7141 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7142 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             7143 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             7144 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             7145 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7146 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7147 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             7148 ; 289  |
                             7149 ; 290  |
                             7150 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7151 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7152 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7153 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7154 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7155 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7156 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7157 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7158 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7159 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7160 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7161 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7162 ; 303  |
                             7163 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             7164 ; 305  |
                             7165 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7166 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7167 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7168 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7169 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7170 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7171 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7172 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7173 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             7174 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7175 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7176 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7177 ; 318  |
                             7178 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7179 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7180 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7181 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7182 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7183 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7184 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7185 ; 326  |
                             7186 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7187 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7188 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7189 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7190 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             7191 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7192 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7193 ; 334  |
                             7194 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             7195 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             7196 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7197 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7198 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7199 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7200 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7201 ; 342  |
                             7202 ; 343  |
                             7203 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7204 ; 345  |
                             7205 ; 346  |
                             7206 ; 347  |
                             7207 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7208 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7209 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7210 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7211 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7212 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7213 ; 354  |
                             7214 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7215 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7216 ; 357  |
                             7217 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7218 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7219 ; 360  |
                             7220 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7221 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7222 ; 363  |
                             7223 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7224 ; 365  |
                             7225 ; 366  |
                             7226 ; 367  |
                             7227 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7228 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7229 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7230 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7231 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7232 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7233 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7234 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7235 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7236 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7237 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7238 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7239 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7240 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7241 ; 382  |
                             7242 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7243 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7244 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7245 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7246 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7247 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7248 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7249 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7250 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7251 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7252 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7253 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7254 ; 395  |
                             7255 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7256 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7257 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7258 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7259 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7260 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7261 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             7262 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             7263 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             7264 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7265 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7266 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             7267 ; 408  |
                             7268 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7269 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7270 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7271 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7272 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7273 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7274 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7275 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7276 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7277 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7278 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7279 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7280 ; 421  |
                             7281 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             7282 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7283 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7284 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7285 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7286 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7287 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7288 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7289 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7290 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7291 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7292 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7293 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7294 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7295 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7296 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7297 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7298 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             7299 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             7300 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7301 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7302 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7303 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7304 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7305 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7306 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7307 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7308 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7309 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7310 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7311 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7312 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7313 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7314 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7315 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7316 ; 457  |
                             7317 ; 458  |//Needed by button.asm
                             7318 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7319 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7320 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7321 ; 462  |
                             7322 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7323 ; 464  |
                             7324 ; 465  |#endif
                             7325 ; 466  |
                             7326 ; 467  |
                             7327 
                             7329 
                             7330 ; 27   |#include "regspwm.h"
                             7331 
                             7333 
                             7334 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7335 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7336 ; 3    |// Filename: regspwm.inc
                             7337 ; 4    |// Description: Register definitions for PWM interface
                             7338 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7339 ; 6    |// The following naming conventions are followed in this file.
                             7340 ; 7    |// All registers are named using the format...
                             7341 ; 8    |//     HW_<module>_<regname>
                             7342 ; 9    |// where <module> is the module name which can be any of the following...
                             7343 ; 10   |//     USB20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7344 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7345 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7346 ; 13   |// that module)
                             7347 ; 14   |// <regname> is the specific register within that module
                             7348 ; 15   |// We also define the following...
                             7349 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7350 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7351 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7352 ; 19   |// which does something else, and
                             7353 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7354 ; 21   |// which does something else.
                             7355 ; 22   |// Other rules
                             7356 ; 23   |//     All caps
                             7357 ; 24   |//     Numeric identifiers start at 0
                             7358 ; 25   |#if !(defined(regspwminc))
                             7359 ; 26   |#define regspwminc 1
                             7360 ; 27   |
                             7361 ; 28   |#include "types.h"
                             7362 
                             7364 
                             7365 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7366 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7367 ; 3    |//
                             7368 ; 4    |// Filename: types.h
                             7369 ; 5    |// Description: Standard data types
                             7370 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7371 ; 7    |
                             7372 ; 8    |#ifndef _TYPES_H
                             7373 ; 9    |#define _TYPES_H
                             7374 ; 10   |
                             7375 ; 11   |// TODO:  move this outta here!
                             7376 ; 12   |#if !defined(NOERROR)
                             7377 ; 13   |#define NOERROR 0
                             7378 ; 14   |#define SUCCESS 0
                             7379 ; 15   |#endif 
                             7380 ; 16   |#if !defined(SUCCESS)
                             7381 ; 17   |#define SUCCESS  0
                             7382 ; 18   |#endif
                             7383 ; 19   |#if !defined(ERROR)
                             7384 ; 20   |#define ERROR   -1
                             7385 ; 21   |#endif
                             7386 ; 22   |#if !defined(FALSE)
                             7387 ; 23   |#define FALSE 0
                             7388 ; 24   |#endif
                             7389 ; 25   |#if !defined(TRUE)
                             7390 ; 26   |#define TRUE  1
                             7391 ; 27   |#endif
                             7392 ; 28   |
                             7393 ; 29   |#if !defined(NULL)
                             7394 ; 30   |#define NULL 0
                             7395 ; 31   |#endif
                             7396 ; 32   |
                             7397 ; 33   |#define MAX_INT     0x7FFFFF
                             7398 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7399 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7400 ; 36   |#define MAX_ULONG   (-1) 
                             7401 ; 37   |
                             7402 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7403 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7404 ; 40   |
                             7405 ; 41   |
                             7406 ; 42   |#define BYTE    unsigned char       // btVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7407 ; 43   |#define CHAR    signed char         // cVarName
                             7408 ; 44   |#define USHORT  unsigned short      // usVarName
                             7409 ; 45   |#define SHORT   unsigned short      // sVarName
                             7410 ; 46   |#define WORD    unsigned int        // wVarName
                             7411 ; 47   |#define INT     signed int          // iVarName
                             7412 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7413 ; 49   |#define LONG    signed long         // lVarName
                             7414 ; 50   |#define BOOL    unsigned int        // bVarName
                             7415 ; 51   |#define FRACT   _fract              // frVarName
                             7416 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7417 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7418 ; 54   |#define FLOAT   float               // fVarName
                             7419 ; 55   |#define DBL     double              // dVarName
                             7420 ; 56   |#define ENUM    enum                // eVarName
                             7421 ; 57   |#define CMX     _complex            // cmxVarName
                             7422 ; 58   |typedef WORD UCS3;                   // 
                             7423 ; 59   |
                             7424 ; 60   |#define UINT16  unsigned short
                             7425 ; 61   |#define UINT8   unsigned char   
                             7426 ; 62   |#define UINT32  unsigned long
                             7427 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7428 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7429 ; 65   |#define WCHAR   UINT16
                             7430 ; 66   |
                             7431 ; 67   |//UINT128 is 16 bytes or 6 words
                             7432 ; 68   |typedef struct UINT128_3500 {   
                             7433 ; 69   |    int val[6];     
                             7434 ; 70   |} UINT128_3500;
                             7435 ; 71   |
                             7436 ; 72   |#define UINT128   UINT128_3500
                             7437 ; 73   |
                             7438 ; 74   |// Little endian word packed byte strings:   
                             7439 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7440 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7441 ; 77   |// Little endian word packed byte strings:   
                             7442 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7443 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7444 ; 80   |
                             7445 ; 81   |// Declare Memory Spaces To Use When Coding
                             7446 ; 82   |// A. Sector Buffers
                             7447 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7448 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7449 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7450 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7451 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7452 ; 88   |// B. Media DDI Memory
                             7453 ; 89   |#define MEDIA_DDI_MEM _Y
                             7454 ; 90   |
                             7455 ; 91   |
                             7456 ; 92   |
                             7457 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7458 ; 94   |// Examples of circular pointers:
                             7459 ; 95   |//    INT CIRC cpiVarName
                             7460 ; 96   |//    DWORD CIRC cpdwVarName
                             7461 ; 97   |
                             7462 ; 98   |#define RETCODE INT                 // rcVarName
                             7463 ; 99   |
                             7464 ; 100  |// generic bitfield structure
                             7465 ; 101  |struct Bitfield {
                             7466 ; 102  |    unsigned int B0  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7467 ; 103  |    unsigned int B1  :1;
                             7468 ; 104  |    unsigned int B2  :1;
                             7469 ; 105  |    unsigned int B3  :1;
                             7470 ; 106  |    unsigned int B4  :1;
                             7471 ; 107  |    unsigned int B5  :1;
                             7472 ; 108  |    unsigned int B6  :1;
                             7473 ; 109  |    unsigned int B7  :1;
                             7474 ; 110  |    unsigned int B8  :1;
                             7475 ; 111  |    unsigned int B9  :1;
                             7476 ; 112  |    unsigned int B10 :1;
                             7477 ; 113  |    unsigned int B11 :1;
                             7478 ; 114  |    unsigned int B12 :1;
                             7479 ; 115  |    unsigned int B13 :1;
                             7480 ; 116  |    unsigned int B14 :1;
                             7481 ; 117  |    unsigned int B15 :1;
                             7482 ; 118  |    unsigned int B16 :1;
                             7483 ; 119  |    unsigned int B17 :1;
                             7484 ; 120  |    unsigned int B18 :1;
                             7485 ; 121  |    unsigned int B19 :1;
                             7486 ; 122  |    unsigned int B20 :1;
                             7487 ; 123  |    unsigned int B21 :1;
                             7488 ; 124  |    unsigned int B22 :1;
                             7489 ; 125  |    unsigned int B23 :1;
                             7490 ; 126  |};
                             7491 ; 127  |
                             7492 ; 128  |union BitInt {
                             7493 ; 129  |        struct Bitfield B;
                             7494 ; 130  |        int        I;
                             7495 ; 131  |};
                             7496 ; 132  |
                             7497 ; 133  |#define MAX_MSG_LENGTH 10
                             7498 ; 134  |struct CMessage
                             7499 ; 135  |{
                             7500 ; 136  |        unsigned int m_uLength;
                             7501 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7502 ; 138  |};
                             7503 ; 139  |
                             7504 ; 140  |typedef struct {
                             7505 ; 141  |    WORD m_wLength;
                             7506 ; 142  |    WORD m_wMessage;
                             7507 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7508 ; 144  |} Message;
                             7509 ; 145  |
                             7510 ; 146  |struct MessageQueueDescriptor
                             7511 ; 147  |{
                             7512 ; 148  |        int *m_pBase;
                             7513 ; 149  |        int m_iModulo;
                             7514 ; 150  |        int m_iSize;
                             7515 ; 151  |        int *m_pHead;
                             7516 ; 152  |        int *m_pTail;
                             7517 ; 153  |};
                             7518 ; 154  |
                             7519 ; 155  |struct ModuleEntry
                             7520 ; 156  |{
                             7521 ; 157  |    int m_iSignaledEventMask;
                             7522 ; 158  |    int m_iWaitEventMask;
                             7523 ; 159  |    int m_iResourceOfCode;
                             7524 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7525 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7526 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7527 ; 163  |    int m_uTimeOutHigh;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7528 ; 164  |    int m_uTimeOutLow;
                             7529 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7530 ; 166  |};
                             7531 ; 167  |
                             7532 ; 168  |union WaitMask{
                             7533 ; 169  |    struct B{
                             7534 ; 170  |        unsigned int m_bNone     :1;
                             7535 ; 171  |        unsigned int m_bMessage  :1;
                             7536 ; 172  |        unsigned int m_bTimer    :1;
                             7537 ; 173  |        unsigned int m_bButton   :1;
                             7538 ; 174  |    } B;
                             7539 ; 175  |    int I;
                             7540 ; 176  |} ;
                             7541 ; 177  |
                             7542 ; 178  |
                             7543 ; 179  |struct Button {
                             7544 ; 180  |        WORD wButtonEvent;
                             7545 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7546 ; 182  |};
                             7547 ; 183  |
                             7548 ; 184  |struct Message {
                             7549 ; 185  |        WORD wMsgLength;
                             7550 ; 186  |        WORD wMsgCommand;
                             7551 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7552 ; 188  |};
                             7553 ; 189  |
                             7554 ; 190  |union EventTypes {
                             7555 ; 191  |        struct CMessage msg;
                             7556 ; 192  |        struct Button Button ;
                             7557 ; 193  |        struct Message Message;
                             7558 ; 194  |};
                             7559 ; 195  |
                             7560 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7561 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7562 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7563 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7564 ; 200  |
                             7565 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7566 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7567 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7568 ; 204  |
                             7569 ; 205  |#if DEBUG
                             7570 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7571 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7572 ; 208  |#else 
                             7573 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7574 ; 210  |#define DebugBuildAssert(x)    
                             7575 ; 211  |#endif
                             7576 ; 212  |
                             7577 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7578 ; 214  |//  #pragma asm
                             7579 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7580 ; 216  |//  #pragma endasm
                             7581 ; 217  |
                             7582 ; 218  |
                             7583 ; 219  |#ifdef COLOR_262K
                             7584 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7585 ; 221  |#elif defined(COLOR_65K)
                             7586 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7587 ; 223  |#else
                             7588 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7589 ; 225  |#endif
                             7590 ; 226  |    
                             7591 ; 227  |#endif // #ifndef _TYPES_H
                             7592 
                             7594 
                             7595 ; 29   |
                             7596 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7597 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7598 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7599 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7600 ; 34   |
                             7601 ; 35   |
                             7602 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7603 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7604 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7605 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7606 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7607 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7608 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7609 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7610 ; 44   |
                             7611 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             7612 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7613 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7614 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7615 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7616 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             7617 ; 51   |
                             7618 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             7619 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
                             7620 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             7621 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             7622 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7623 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
                             7624 ; 58   |
                             7625 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             7626 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7627 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7628 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7629 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7630 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7631 ; 65   |
                             7632 ; 66   |typedef union               
                             7633 ; 67   |{
                             7634 ; 68   |    struct {
                             7635 ; 69   |        int PWM0_EN                    :1;
                             7636 ; 70   |        int PWM1_EN                    :1;
                             7637 ; 71   |        int PWM2_EN                    :1;
                             7638 ; 72   |        int PWM3_EN                    :1;
                             7639 ; 73   |        int RSVD0                      :4;
                             7640 ; 74   |        int CDIV                       :2;
                             7641 ; 75   |        int RSVD1                      :13;
                             7642 ; 76   |        int MSTR_EN                    :1;
                             7643 ; 77   |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7644 ; 78   |    int I;
                             7645 ; 79   |} pwmcsr_type;
                             7646 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             7647 ; 81   |
                             7648 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7649 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7650 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7651 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7652 ; 86   |
                             7653 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7654 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7655 ; 89   |
                             7656 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                             7657 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             7658 ; 92   |
                             7659 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7660 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7661 ; 95   |
                             7662 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7663 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7664 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7665 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7666 ; 100  |
                             7667 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7668 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7669 ; 103  |
                             7670 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             7671 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             7672 ; 106  |
                             7673 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             7674 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7675 ; 109  |
                             7676 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7677 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7678 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7679 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7680 ; 114  |
                             7681 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7682 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7683 ; 117  |
                             7684 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             7685 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             7686 ; 120  |
                             7687 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7688 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7689 ; 123  |
                             7690 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7691 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7692 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7693 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7694 ; 128  |
                             7695 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7696 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7697 ; 131  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7698 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             7699 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             7700 ; 134  |
                             7701 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7702 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7703 ; 137  |
                             7704 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7705 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7706 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7707 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7708 ; 142  |
                             7709 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7710 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7711 ; 145  |
                             7712 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             7713 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             7714 ; 148  |
                             7715 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7716 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7717 ; 151  |
                             7718 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7719 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7720 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7721 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7722 ; 156  |
                             7723 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7724 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7725 ; 159  |
                             7726 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             7727 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
                             7728 ; 162  |
                             7729 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7730 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7731 ; 165  |
                             7732 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7733 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7734 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7735 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7736 ; 170  |
                             7737 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7738 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7739 ; 173  |
                             7740 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             7741 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             7742 ; 176  |
                             7743 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7744 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7745 ; 179  |
                             7746 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7747 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7748 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7749 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7750 ; 184  |
                             7751 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7752 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7753 ; 187  |
                             7754 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             7755 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             7756 ; 190  |
                             7757 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7758 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7759 ; 193  |
                             7760 ; 194  |typedef union               
                             7761 ; 195  |{
                             7762 ; 196  |    struct {
                             7763 ; 197  |       int ACTIVE                    :12;
                             7764 ; 198  |       int INACTIVE                  :12;
                             7765 ; 199  |    } B;
                             7766 ; 200  |    int I;
                             7767 ; 201  |} pwmchan_type;
                             7768 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             7769 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             7770 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             7771 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             7772 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             7773 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                             7774 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             7775 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             7776 ; 210  |
                             7777 ; 211  |#endif
                             7778 ; 212  |
                             7779 ; 213  |
                             7780 ; 214  |
                             7781 ; 215  |
                             7782 
                             7784 
                             7785 ; 28   |#include "regsrevision.h"
                             7786 
                             7788 
                             7789 ; 1    |#if !(defined(__HW_REVR))
                             7790 ; 2    |#define __HW_REVR 1
                             7791 ; 3    |
                             7792 ; 4    |
                             7793 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7794 ; 6    |
                             7795 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7796 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7797 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7798 ; 10   |
                             7799 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7800 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7801 ; 13   |
                             7802 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             7803 ; 15   |
                             7804 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7805 ; 17   |
                             7806 ; 18   |
                             7807 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7808 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7809 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7810 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             7811 ; 23   |typedef union               
                             7812 ; 24   |{
                             7813 ; 25   |    struct {
                             7814 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7815 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             7816 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7817 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7818 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             7819 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7820 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7821 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7822 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7823 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7824 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7825 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7826 ; 38   |    } B;
                             7827 ; 39   |
                             7828 ; 40   |    int I;
                             7829 ; 41   |
                             7830 ; 42   |} revr_type;
                             7831 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7832 ; 44   |
                             7833 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7834 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7835 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7836 ; 48   |
                             7837 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             7838 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             7839 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7840 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7841 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7842 ; 54   |
                             7843 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7844 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7845 ; 57   |
                             7846 ; 58   |#endif //!@def(__HW_REVR)
                             7847 ; 59   |
                             7848 
                             7850 
                             7851 ; 29   |#include "regsrtc.h"
                             7852 
                             7854 
                             7855 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7856 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7857 ; 3    |// Filename: regsrtc.inc
                             7858 ; 4    |// Description: Register definitions for RTC interface
                             7859 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7860 ; 6    |// The following naming conventions are followed in this file.
                             7861 ; 7    |// All registers are named using the format...
                             7862 ; 8    |//     HW_<module>_<regname>
                             7863 ; 9    |// where <module> is the module name which can be any of the following...
                             7864 ; 10   |//     USB20
                             7865 ; 11   |// (Note that when there is more than one copy of a particular module, the
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7866 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7867 ; 13   |// that module)
                             7868 ; 14   |// <regname> is the specific register within that module
                             7869 ; 15   |// We also define the following...
                             7870 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7871 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7872 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7873 ; 19   |// which does something else, and
                             7874 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7875 ; 21   |// which does something else.
                             7876 ; 22   |// Other rules
                             7877 ; 23   |//     All caps
                             7878 ; 24   |//     Numeric identifiers start at 0
                             7879 ; 25   |#if !(defined(regsrtcinc))
                             7880 ; 26   |#define regsrtcinc 1
                             7881 ; 27   |
                             7882 ; 28   |#include "types.h"
                             7883 
                             7885 
                             7886 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7887 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7888 ; 3    |//
                             7889 ; 4    |// Filename: types.h
                             7890 ; 5    |// Description: Standard data types
                             7891 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7892 ; 7    |
                             7893 ; 8    |#ifndef _TYPES_H
                             7894 ; 9    |#define _TYPES_H
                             7895 ; 10   |
                             7896 ; 11   |// TODO:  move this outta here!
                             7897 ; 12   |#if !defined(NOERROR)
                             7898 ; 13   |#define NOERROR 0
                             7899 ; 14   |#define SUCCESS 0
                             7900 ; 15   |#endif 
                             7901 ; 16   |#if !defined(SUCCESS)
                             7902 ; 17   |#define SUCCESS  0
                             7903 ; 18   |#endif
                             7904 ; 19   |#if !defined(ERROR)
                             7905 ; 20   |#define ERROR   -1
                             7906 ; 21   |#endif
                             7907 ; 22   |#if !defined(FALSE)
                             7908 ; 23   |#define FALSE 0
                             7909 ; 24   |#endif
                             7910 ; 25   |#if !defined(TRUE)
                             7911 ; 26   |#define TRUE  1
                             7912 ; 27   |#endif
                             7913 ; 28   |
                             7914 ; 29   |#if !defined(NULL)
                             7915 ; 30   |#define NULL 0
                             7916 ; 31   |#endif
                             7917 ; 32   |
                             7918 ; 33   |#define MAX_INT     0x7FFFFF
                             7919 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7920 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7921 ; 36   |#define MAX_ULONG   (-1) 
                             7922 ; 37   |
                             7923 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7924 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7925 ; 40   |
                             7926 ; 41   |
                             7927 ; 42   |#define BYTE    unsigned char       // btVarName
                             7928 ; 43   |#define CHAR    signed char         // cVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7929 ; 44   |#define USHORT  unsigned short      // usVarName
                             7930 ; 45   |#define SHORT   unsigned short      // sVarName
                             7931 ; 46   |#define WORD    unsigned int        // wVarName
                             7932 ; 47   |#define INT     signed int          // iVarName
                             7933 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7934 ; 49   |#define LONG    signed long         // lVarName
                             7935 ; 50   |#define BOOL    unsigned int        // bVarName
                             7936 ; 51   |#define FRACT   _fract              // frVarName
                             7937 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7938 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7939 ; 54   |#define FLOAT   float               // fVarName
                             7940 ; 55   |#define DBL     double              // dVarName
                             7941 ; 56   |#define ENUM    enum                // eVarName
                             7942 ; 57   |#define CMX     _complex            // cmxVarName
                             7943 ; 58   |typedef WORD UCS3;                   // 
                             7944 ; 59   |
                             7945 ; 60   |#define UINT16  unsigned short
                             7946 ; 61   |#define UINT8   unsigned char   
                             7947 ; 62   |#define UINT32  unsigned long
                             7948 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7949 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7950 ; 65   |#define WCHAR   UINT16
                             7951 ; 66   |
                             7952 ; 67   |//UINT128 is 16 bytes or 6 words
                             7953 ; 68   |typedef struct UINT128_3500 {   
                             7954 ; 69   |    int val[6];     
                             7955 ; 70   |} UINT128_3500;
                             7956 ; 71   |
                             7957 ; 72   |#define UINT128   UINT128_3500
                             7958 ; 73   |
                             7959 ; 74   |// Little endian word packed byte strings:   
                             7960 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7961 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7962 ; 77   |// Little endian word packed byte strings:   
                             7963 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7964 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7965 ; 80   |
                             7966 ; 81   |// Declare Memory Spaces To Use When Coding
                             7967 ; 82   |// A. Sector Buffers
                             7968 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7969 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7970 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7971 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7972 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7973 ; 88   |// B. Media DDI Memory
                             7974 ; 89   |#define MEDIA_DDI_MEM _Y
                             7975 ; 90   |
                             7976 ; 91   |
                             7977 ; 92   |
                             7978 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7979 ; 94   |// Examples of circular pointers:
                             7980 ; 95   |//    INT CIRC cpiVarName
                             7981 ; 96   |//    DWORD CIRC cpdwVarName
                             7982 ; 97   |
                             7983 ; 98   |#define RETCODE INT                 // rcVarName
                             7984 ; 99   |
                             7985 ; 100  |// generic bitfield structure
                             7986 ; 101  |struct Bitfield {
                             7987 ; 102  |    unsigned int B0  :1;
                             7988 ; 103  |    unsigned int B1  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7989 ; 104  |    unsigned int B2  :1;
                             7990 ; 105  |    unsigned int B3  :1;
                             7991 ; 106  |    unsigned int B4  :1;
                             7992 ; 107  |    unsigned int B5  :1;
                             7993 ; 108  |    unsigned int B6  :1;
                             7994 ; 109  |    unsigned int B7  :1;
                             7995 ; 110  |    unsigned int B8  :1;
                             7996 ; 111  |    unsigned int B9  :1;
                             7997 ; 112  |    unsigned int B10 :1;
                             7998 ; 113  |    unsigned int B11 :1;
                             7999 ; 114  |    unsigned int B12 :1;
                             8000 ; 115  |    unsigned int B13 :1;
                             8001 ; 116  |    unsigned int B14 :1;
                             8002 ; 117  |    unsigned int B15 :1;
                             8003 ; 118  |    unsigned int B16 :1;
                             8004 ; 119  |    unsigned int B17 :1;
                             8005 ; 120  |    unsigned int B18 :1;
                             8006 ; 121  |    unsigned int B19 :1;
                             8007 ; 122  |    unsigned int B20 :1;
                             8008 ; 123  |    unsigned int B21 :1;
                             8009 ; 124  |    unsigned int B22 :1;
                             8010 ; 125  |    unsigned int B23 :1;
                             8011 ; 126  |};
                             8012 ; 127  |
                             8013 ; 128  |union BitInt {
                             8014 ; 129  |        struct Bitfield B;
                             8015 ; 130  |        int        I;
                             8016 ; 131  |};
                             8017 ; 132  |
                             8018 ; 133  |#define MAX_MSG_LENGTH 10
                             8019 ; 134  |struct CMessage
                             8020 ; 135  |{
                             8021 ; 136  |        unsigned int m_uLength;
                             8022 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8023 ; 138  |};
                             8024 ; 139  |
                             8025 ; 140  |typedef struct {
                             8026 ; 141  |    WORD m_wLength;
                             8027 ; 142  |    WORD m_wMessage;
                             8028 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8029 ; 144  |} Message;
                             8030 ; 145  |
                             8031 ; 146  |struct MessageQueueDescriptor
                             8032 ; 147  |{
                             8033 ; 148  |        int *m_pBase;
                             8034 ; 149  |        int m_iModulo;
                             8035 ; 150  |        int m_iSize;
                             8036 ; 151  |        int *m_pHead;
                             8037 ; 152  |        int *m_pTail;
                             8038 ; 153  |};
                             8039 ; 154  |
                             8040 ; 155  |struct ModuleEntry
                             8041 ; 156  |{
                             8042 ; 157  |    int m_iSignaledEventMask;
                             8043 ; 158  |    int m_iWaitEventMask;
                             8044 ; 159  |    int m_iResourceOfCode;
                             8045 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8046 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8047 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8048 ; 163  |    int m_uTimeOutHigh;
                             8049 ; 164  |    int m_uTimeOutLow;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8050 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8051 ; 166  |};
                             8052 ; 167  |
                             8053 ; 168  |union WaitMask{
                             8054 ; 169  |    struct B{
                             8055 ; 170  |        unsigned int m_bNone     :1;
                             8056 ; 171  |        unsigned int m_bMessage  :1;
                             8057 ; 172  |        unsigned int m_bTimer    :1;
                             8058 ; 173  |        unsigned int m_bButton   :1;
                             8059 ; 174  |    } B;
                             8060 ; 175  |    int I;
                             8061 ; 176  |} ;
                             8062 ; 177  |
                             8063 ; 178  |
                             8064 ; 179  |struct Button {
                             8065 ; 180  |        WORD wButtonEvent;
                             8066 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8067 ; 182  |};
                             8068 ; 183  |
                             8069 ; 184  |struct Message {
                             8070 ; 185  |        WORD wMsgLength;
                             8071 ; 186  |        WORD wMsgCommand;
                             8072 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8073 ; 188  |};
                             8074 ; 189  |
                             8075 ; 190  |union EventTypes {
                             8076 ; 191  |        struct CMessage msg;
                             8077 ; 192  |        struct Button Button ;
                             8078 ; 193  |        struct Message Message;
                             8079 ; 194  |};
                             8080 ; 195  |
                             8081 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8082 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8083 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8084 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8085 ; 200  |
                             8086 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8087 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8088 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8089 ; 204  |
                             8090 ; 205  |#if DEBUG
                             8091 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8092 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8093 ; 208  |#else 
                             8094 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8095 ; 210  |#define DebugBuildAssert(x)    
                             8096 ; 211  |#endif
                             8097 ; 212  |
                             8098 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8099 ; 214  |//  #pragma asm
                             8100 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8101 ; 216  |//  #pragma endasm
                             8102 ; 217  |
                             8103 ; 218  |
                             8104 ; 219  |#ifdef COLOR_262K
                             8105 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8106 ; 221  |#elif defined(COLOR_65K)
                             8107 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8108 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8109 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8110 ; 225  |#endif
                             8111 ; 226  |    
                             8112 ; 227  |#endif // #ifndef _TYPES_H
                             8113 
                             8115 
                             8116 ; 29   |
                             8117 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8118 ; 31   |
                             8119 ; 32   |//   RTC STMP Registers 
                             8120 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8121 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8122 ; 35   |
                             8123 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8124 ; 37   |
                             8125 ; 38   |
                             8126 ; 39   |
                             8127 ; 40   |
                             8128 ; 41   |
                             8129 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8130 ; 43   |
                             8131 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8132 ; 45   |
                             8133 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8134 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8135 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8136 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8137 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8138 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8139 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8140 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8141 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8142 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8143 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8144 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8145 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8146 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8147 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8148 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8149 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8150 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8151 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8152 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8153 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8154 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8155 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8156 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8157 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8158 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8159 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8160 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8161 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8162 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8163 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8164 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8165 ; 78   |
                             8166 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8167 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8168 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8169 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8170 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8171 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8172 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8173 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8174 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8175 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8176 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8177 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8178 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8179 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8180 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8181 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8182 ; 95   |
                             8183 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8184 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8185 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8186 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8187 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8188 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8189 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8190 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8191 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8192 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8193 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8194 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8195 ; 108  |
                             8196 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8197 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8198 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8199 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8200 ; 113  |
                             8201 ; 114  |
                             8202 ; 115  |typedef union               
                             8203 ; 116  |{
                             8204 ; 117  |    struct {
                             8205 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8206 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8207 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8208 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8209 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8210 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8211 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8212 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8213 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8214 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8215 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8216 ; 129  |    } B;
                             8217 ; 130  |    int I;
                             8218 ; 131  |    unsigned int U;
                             8219 ; 132  |} rtc_csr_type;
                             8220 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8221 ; 134  |
                             8222 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8223 ; 136  |
                             8224 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8225 ; 138  |
                             8226 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8227 ; 140  |
                             8228 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8229 ; 142  |
                             8230 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8231 ; 144  |
                             8232 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8233 ; 146  |
                             8234 ; 147  |typedef union               
                             8235 ; 148  |{
                             8236 ; 149  |    struct {
                             8237 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8238 ; 151  |    } B;
                             8239 ; 152  |    int I;
                             8240 ; 153  |    unsigned int U;
                             8241 ; 154  |} rtc_mseconds0_type;
                             8242 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             8243 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8244 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8245 ; 158  |
                             8246 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8247 ; 160  |
                             8248 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8249 ; 162  |
                             8250 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8251 ; 164  |
                             8252 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             8253 ; 166  |
                             8254 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             8255 ; 168  |
                             8256 ; 169  |typedef union               
                             8257 ; 170  |{
                             8258 ; 171  |    struct {
                             8259 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8260 ; 173  |    } B;
                             8261 ; 174  |    int I;
                             8262 ; 175  |    unsigned int U;
                             8263 ; 176  |} rtc_mseconds1_type;
                             8264 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             8265 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8266 ; 179  |
                             8267 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8268 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8269 ; 182  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8270 ; 183  |
                             8271 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8272 ; 185  |
                             8273 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8274 ; 187  |
                             8275 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8276 ; 189  |
                             8277 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8278 ; 191  |
                             8279 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8280 ; 193  |
                             8281 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8282 ; 195  |
                             8283 ; 196  |typedef union               
                             8284 ; 197  |{
                             8285 ; 198  |    struct {
                             8286 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8287 ; 200  |    } B;
                             8288 ; 201  |    int I;
                             8289 ; 202  |    unsigned int U;
                             8290 ; 203  |} rtc_watchdog_type;
                             8291 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             8292 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8293 ; 206  |
                             8294 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8295 ; 208  |
                             8296 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8297 ; 210  |
                             8298 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8299 ; 212  |
                             8300 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             8301 ; 214  |
                             8302 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8303 ; 216  |
                             8304 ; 217  |typedef union               
                             8305 ; 218  |{
                             8306 ; 219  |    struct {
                             8307 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8308 ; 221  |    } B;
                             8309 ; 222  |    int I;
                             8310 ; 223  |    unsigned int U;
                             8311 ; 224  |} rtc_alarm0_type;
                             8312 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             8313 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8314 ; 227  |
                             8315 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8316 ; 229  |
                             8317 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8318 ; 231  |
                             8319 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8320 ; 233  |
                             8321 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             8322 ; 235  |
                             8323 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8324 ; 237  |
                             8325 ; 238  |typedef union               
                             8326 ; 239  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8327 ; 240  |    struct {
                             8328 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8329 ; 242  |    } B;
                             8330 ; 243  |    int I;
                             8331 ; 244  |    unsigned int U;
                             8332 ; 245  |} rtc_alarm1_type;
                             8333 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             8334 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8335 ; 248  |
                             8336 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8337 ; 250  |
                             8338 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8339 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8340 ; 253  |
                             8341 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8342 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8343 ; 256  |
                             8344 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8345 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             8346 ; 259  |
                             8347 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8348 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8349 ; 262  |
                             8350 ; 263  |typedef union               
                             8351 ; 264  |{
                             8352 ; 265  |    struct {
                             8353 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8354 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8355 ; 268  |    } B;
                             8356 ; 269  |    int I;
                             8357 ; 270  |    unsigned int U;
                             8358 ; 271  |} rtc_xtaldivide_type;
                             8359 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             8360 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8361 ; 274  |
                             8362 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8363 ; 276  |
                             8364 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8365 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8366 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8367 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8368 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8369 ; 282  |
                             8370 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8371 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8372 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8373 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8374 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8375 ; 288  |
                             8376 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8377 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8378 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8379 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8380 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             8381 ; 294  |
                             8382 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8383 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             8384 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             8385 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             8386 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8387 ; 300  |
                             8388 ; 301  |typedef union               
                             8389 ; 302  |{
                             8390 ; 303  |   struct {
                             8391 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8392 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8393 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8394 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8395 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8396 ; 309  |   } B;
                             8397 ; 310  |    int I;
                             8398 ; 311  |    unsigned int U;
                             8399 ; 312  |} rtc_PERSISTENT0_type;
                             8400 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             8401 ; 314  |
                             8402 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8403 ; 316  |
                             8404 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8405 ; 318  |
                             8406 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8407 ; 320  |
                             8408 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8409 ; 322  |
                             8410 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             8411 ; 324  |
                             8412 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8413 ; 326  |
                             8414 ; 327  |
                             8415 ; 328  |typedef union               
                             8416 ; 329  |{
                             8417 ; 330  |    struct {
                             8418 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8419 ; 332  |    } B;
                             8420 ; 333  |    int I;
                             8421 ; 334  |    unsigned int U;
                             8422 ; 335  |} rtc_PERSISTENT1_type;
                             8423 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             8424 ; 337  |
                             8425 ; 338  |
                             8426 ; 339  |#endif
                             8427 ; 340  |
                             8428 ; 341  |
                             8429 ; 342  |
                             8430 ; 343  |
                             8431 ; 344  |
                             8432 ; 345  |
                             8433 ; 346  |
                             8434 ; 347  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8435 ; 348  |
                             8436 ; 349  |
                             8437 ; 350  |
                             8438 ; 351  |
                             8439 ; 352  |
                             8440 ; 353  |
                             8441 
                             8443 
                             8444 ; 30   |#include "regsspare.h"
                             8445 
                             8447 
                             8448 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8449 ; 2    |#define RESGSSPARE_INC 1
                             8450 ; 3    |
                             8451 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8452 ; 5    |
                             8453 ; 6    |
                             8454 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8455 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8456 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8457 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8458 ; 11   |
                             8459 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8460 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8461 ; 14   |
                             8462 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8463 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8464 ; 17   |
                             8465 ; 18   |
                             8466 ; 19   |
                             8467 ; 20   |typedef union               
                             8468 ; 21   |{
                             8469 ; 22   |    struct {
                             8470 ; 23   |        int      I2SS       :1;     
                             8471 ; 24   |        int      USBSELECT  :1;     
                             8472 ; 25   |        unsigned            :6;
                             8473 ; 26   |        int      USBPLUGIN  :1;     
                             8474 ; 27   |        int      PSWITCH    :1;     
                             8475 ; 28   |    } B;
                             8476 ; 29   |
                             8477 ; 30   |    int I;
                             8478 ; 31   |
                             8479 ; 32   |} spare_type;
                             8480 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8481 ; 34   |
                             8482 ; 35   |
                             8483 ; 36   |
                             8484 ; 37   |#endif
                             8485 
                             8487 
                             8488 ; 31   |#include "regsspi.h"
                             8489 
                             8491 
                             8492 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8493 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8494 ; 3    |//;; Filename    : regsspi.inc
                             8495 ; 4    |//;; Description : Register definitions for SPI interface
                             8496 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8497 ; 6    |
                             8498 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8499 ; 8    |// The following naming conventions are followed in this file.
                             8500 ; 9    |// All registers are named using the format...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8501 ; 10   |//     HW_<module>_<regname>
                             8502 ; 11   |// where <module> is the module name which can be any of the following...
                             8503 ; 12   |//     USB20
                             8504 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8505 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8506 ; 15   |// that module)
                             8507 ; 16   |// <regname> is the specific register within that module
                             8508 ; 17   |// We also define the following...
                             8509 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8510 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8511 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8512 ; 21   |// which does something else, and
                             8513 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8514 ; 23   |// which does something else.
                             8515 ; 24   |// Other rules
                             8516 ; 25   |//     All caps
                             8517 ; 26   |//     Numeric identifiers start at 0
                             8518 ; 27   |#if !(defined(regsspiinc))
                             8519 ; 28   |#define regsspiinc 1
                             8520 ; 29   |
                             8521 ; 30   |#include "types.h"
                             8522 
                             8524 
                             8525 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8526 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8527 ; 3    |//
                             8528 ; 4    |// Filename: types.h
                             8529 ; 5    |// Description: Standard data types
                             8530 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8531 ; 7    |
                             8532 ; 8    |#ifndef _TYPES_H
                             8533 ; 9    |#define _TYPES_H
                             8534 ; 10   |
                             8535 ; 11   |// TODO:  move this outta here!
                             8536 ; 12   |#if !defined(NOERROR)
                             8537 ; 13   |#define NOERROR 0
                             8538 ; 14   |#define SUCCESS 0
                             8539 ; 15   |#endif 
                             8540 ; 16   |#if !defined(SUCCESS)
                             8541 ; 17   |#define SUCCESS  0
                             8542 ; 18   |#endif
                             8543 ; 19   |#if !defined(ERROR)
                             8544 ; 20   |#define ERROR   -1
                             8545 ; 21   |#endif
                             8546 ; 22   |#if !defined(FALSE)
                             8547 ; 23   |#define FALSE 0
                             8548 ; 24   |#endif
                             8549 ; 25   |#if !defined(TRUE)
                             8550 ; 26   |#define TRUE  1
                             8551 ; 27   |#endif
                             8552 ; 28   |
                             8553 ; 29   |#if !defined(NULL)
                             8554 ; 30   |#define NULL 0
                             8555 ; 31   |#endif
                             8556 ; 32   |
                             8557 ; 33   |#define MAX_INT     0x7FFFFF
                             8558 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8559 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8560 ; 36   |#define MAX_ULONG   (-1) 
                             8561 ; 37   |
                             8562 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8563 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8564 ; 40   |
                             8565 ; 41   |
                             8566 ; 42   |#define BYTE    unsigned char       // btVarName
                             8567 ; 43   |#define CHAR    signed char         // cVarName
                             8568 ; 44   |#define USHORT  unsigned short      // usVarName
                             8569 ; 45   |#define SHORT   unsigned short      // sVarName
                             8570 ; 46   |#define WORD    unsigned int        // wVarName
                             8571 ; 47   |#define INT     signed int          // iVarName
                             8572 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8573 ; 49   |#define LONG    signed long         // lVarName
                             8574 ; 50   |#define BOOL    unsigned int        // bVarName
                             8575 ; 51   |#define FRACT   _fract              // frVarName
                             8576 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8577 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8578 ; 54   |#define FLOAT   float               // fVarName
                             8579 ; 55   |#define DBL     double              // dVarName
                             8580 ; 56   |#define ENUM    enum                // eVarName
                             8581 ; 57   |#define CMX     _complex            // cmxVarName
                             8582 ; 58   |typedef WORD UCS3;                   // 
                             8583 ; 59   |
                             8584 ; 60   |#define UINT16  unsigned short
                             8585 ; 61   |#define UINT8   unsigned char   
                             8586 ; 62   |#define UINT32  unsigned long
                             8587 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8588 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8589 ; 65   |#define WCHAR   UINT16
                             8590 ; 66   |
                             8591 ; 67   |//UINT128 is 16 bytes or 6 words
                             8592 ; 68   |typedef struct UINT128_3500 {   
                             8593 ; 69   |    int val[6];     
                             8594 ; 70   |} UINT128_3500;
                             8595 ; 71   |
                             8596 ; 72   |#define UINT128   UINT128_3500
                             8597 ; 73   |
                             8598 ; 74   |// Little endian word packed byte strings:   
                             8599 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8600 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8601 ; 77   |// Little endian word packed byte strings:   
                             8602 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8603 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8604 ; 80   |
                             8605 ; 81   |// Declare Memory Spaces To Use When Coding
                             8606 ; 82   |// A. Sector Buffers
                             8607 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8608 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8609 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8610 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8611 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8612 ; 88   |// B. Media DDI Memory
                             8613 ; 89   |#define MEDIA_DDI_MEM _Y
                             8614 ; 90   |
                             8615 ; 91   |
                             8616 ; 92   |
                             8617 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8618 ; 94   |// Examples of circular pointers:
                             8619 ; 95   |//    INT CIRC cpiVarName
                             8620 ; 96   |//    DWORD CIRC cpdwVarName
                             8621 ; 97   |
                             8622 ; 98   |#define RETCODE INT                 // rcVarName
                             8623 ; 99   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8624 ; 100  |// generic bitfield structure
                             8625 ; 101  |struct Bitfield {
                             8626 ; 102  |    unsigned int B0  :1;
                             8627 ; 103  |    unsigned int B1  :1;
                             8628 ; 104  |    unsigned int B2  :1;
                             8629 ; 105  |    unsigned int B3  :1;
                             8630 ; 106  |    unsigned int B4  :1;
                             8631 ; 107  |    unsigned int B5  :1;
                             8632 ; 108  |    unsigned int B6  :1;
                             8633 ; 109  |    unsigned int B7  :1;
                             8634 ; 110  |    unsigned int B8  :1;
                             8635 ; 111  |    unsigned int B9  :1;
                             8636 ; 112  |    unsigned int B10 :1;
                             8637 ; 113  |    unsigned int B11 :1;
                             8638 ; 114  |    unsigned int B12 :1;
                             8639 ; 115  |    unsigned int B13 :1;
                             8640 ; 116  |    unsigned int B14 :1;
                             8641 ; 117  |    unsigned int B15 :1;
                             8642 ; 118  |    unsigned int B16 :1;
                             8643 ; 119  |    unsigned int B17 :1;
                             8644 ; 120  |    unsigned int B18 :1;
                             8645 ; 121  |    unsigned int B19 :1;
                             8646 ; 122  |    unsigned int B20 :1;
                             8647 ; 123  |    unsigned int B21 :1;
                             8648 ; 124  |    unsigned int B22 :1;
                             8649 ; 125  |    unsigned int B23 :1;
                             8650 ; 126  |};
                             8651 ; 127  |
                             8652 ; 128  |union BitInt {
                             8653 ; 129  |        struct Bitfield B;
                             8654 ; 130  |        int        I;
                             8655 ; 131  |};
                             8656 ; 132  |
                             8657 ; 133  |#define MAX_MSG_LENGTH 10
                             8658 ; 134  |struct CMessage
                             8659 ; 135  |{
                             8660 ; 136  |        unsigned int m_uLength;
                             8661 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8662 ; 138  |};
                             8663 ; 139  |
                             8664 ; 140  |typedef struct {
                             8665 ; 141  |    WORD m_wLength;
                             8666 ; 142  |    WORD m_wMessage;
                             8667 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8668 ; 144  |} Message;
                             8669 ; 145  |
                             8670 ; 146  |struct MessageQueueDescriptor
                             8671 ; 147  |{
                             8672 ; 148  |        int *m_pBase;
                             8673 ; 149  |        int m_iModulo;
                             8674 ; 150  |        int m_iSize;
                             8675 ; 151  |        int *m_pHead;
                             8676 ; 152  |        int *m_pTail;
                             8677 ; 153  |};
                             8678 ; 154  |
                             8679 ; 155  |struct ModuleEntry
                             8680 ; 156  |{
                             8681 ; 157  |    int m_iSignaledEventMask;
                             8682 ; 158  |    int m_iWaitEventMask;
                             8683 ; 159  |    int m_iResourceOfCode;
                             8684 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8685 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8686 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8687 ; 163  |    int m_uTimeOutHigh;
                             8688 ; 164  |    int m_uTimeOutLow;
                             8689 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8690 ; 166  |};
                             8691 ; 167  |
                             8692 ; 168  |union WaitMask{
                             8693 ; 169  |    struct B{
                             8694 ; 170  |        unsigned int m_bNone     :1;
                             8695 ; 171  |        unsigned int m_bMessage  :1;
                             8696 ; 172  |        unsigned int m_bTimer    :1;
                             8697 ; 173  |        unsigned int m_bButton   :1;
                             8698 ; 174  |    } B;
                             8699 ; 175  |    int I;
                             8700 ; 176  |} ;
                             8701 ; 177  |
                             8702 ; 178  |
                             8703 ; 179  |struct Button {
                             8704 ; 180  |        WORD wButtonEvent;
                             8705 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8706 ; 182  |};
                             8707 ; 183  |
                             8708 ; 184  |struct Message {
                             8709 ; 185  |        WORD wMsgLength;
                             8710 ; 186  |        WORD wMsgCommand;
                             8711 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8712 ; 188  |};
                             8713 ; 189  |
                             8714 ; 190  |union EventTypes {
                             8715 ; 191  |        struct CMessage msg;
                             8716 ; 192  |        struct Button Button ;
                             8717 ; 193  |        struct Message Message;
                             8718 ; 194  |};
                             8719 ; 195  |
                             8720 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8721 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8722 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8723 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8724 ; 200  |
                             8725 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8726 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8727 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8728 ; 204  |
                             8729 ; 205  |#if DEBUG
                             8730 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8731 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8732 ; 208  |#else 
                             8733 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8734 ; 210  |#define DebugBuildAssert(x)    
                             8735 ; 211  |#endif
                             8736 ; 212  |
                             8737 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8738 ; 214  |//  #pragma asm
                             8739 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8740 ; 216  |//  #pragma endasm
                             8741 ; 217  |
                             8742 ; 218  |
                             8743 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8744 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8745 ; 221  |#elif defined(COLOR_65K)
                             8746 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8747 ; 223  |#else
                             8748 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8749 ; 225  |#endif
                             8750 ; 226  |    
                             8751 ; 227  |#endif // #ifndef _TYPES_H
                             8752 
                             8754 
                             8755 ; 31   |
                             8756 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8757 ; 33   |
                             8758 ; 34   |//   SPI STMP3500 Registers 
                             8759 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8760 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8761 ; 37   |
                             8762 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8763 ; 39   |
                             8764 ; 40   |
                             8765 ; 41   |
                             8766 ; 42   |// /////////////////////////////////////////////
                             8767 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8768 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8769 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8770 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8771 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8772 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8773 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8774 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8775 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8776 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8777 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8778 ; 54   |
                             8779 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8780 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8781 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8782 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8783 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8784 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8785 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8786 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8787 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8788 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8789 ; 65   |
                             8790 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8791 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8792 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8793 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8794 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8795 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8796 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8797 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8798 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8799 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8800 ; 76   |
                             8801 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8802 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8803 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8804 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8805 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8806 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8807 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8808 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8809 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8810 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8811 ; 87   |
                             8812 ; 88   |typedef union               
                             8813 ; 89   |{
                             8814 ; 90   |    struct {
                             8815 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8816 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8817 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8818 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8819 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8820 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8821 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8822 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             8823 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8824 ; 100  |    } B;
                             8825 ; 101  |
                             8826 ; 102  |    int I;
                             8827 ; 103  |    unsigned int U;
                             8828 ; 104  |} spcsr_type;
                             8829 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             8830 ; 106  |
                             8831 ; 107  |// /////////////////////////////////////////////
                             8832 ; 108  |// //  SPI Data Register Bit Definitions
                             8833 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8834 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8835 ; 111  |
                             8836 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8837 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8838 ; 114  |
                             8839 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             8840 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8841 ; 117  |
                             8842 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8843 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8844 ; 120  |
                             8845 ; 121  |typedef union               
                             8846 ; 122  |{
                             8847 ; 123  |    struct {
                             8848 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8849 ; 125  |    } B;
                             8850 ; 126  |
                             8851 ; 127  |    int I;
                             8852 ; 128  |    unsigned int U;
                             8853 ; 129  |} spdr_type;
                             8854 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             8855 ; 131  |
                             8856 ; 132  |
                             8857 ; 133  |#endif
                             8858 ; 134  |
                             8859 ; 135  |
                             8860 
                             8862 
                             8863 ; 32   |#include "regsswizzle.h"
                             8864 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8866 
                             8867 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8868 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8869 ; 3    |//;; Filename    : regsswizzle.inc
                             8870 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8871 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8872 ; 6    |
                             8873 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8874 ; 8    |// The following naming conventions are followed in this file.
                             8875 ; 9    |// All registers are named using the format...
                             8876 ; 10   |//     HW_<module>_<regname>
                             8877 ; 11   |// where <module> is the module name which can be any of the following...
                             8878 ; 12   |//     USB20
                             8879 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8880 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8881 ; 15   |// that module)
                             8882 ; 16   |// <regname> is the specific register within that module
                             8883 ; 17   |// We also define the following...
                             8884 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8885 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8886 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8887 ; 21   |// which does something else, and
                             8888 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8889 ; 23   |// which does something else.
                             8890 ; 24   |// Other rules
                             8891 ; 25   |//     All caps
                             8892 ; 26   |//     Numeric identifiers start at 0
                             8893 ; 27   |#if !(defined(regsswizzleinc))
                             8894 ; 28   |#define regsswizzleinc 1
                             8895 ; 29   |
                             8896 ; 30   |#include "types.h"
                             8897 
                             8899 
                             8900 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8901 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8902 ; 3    |//
                             8903 ; 4    |// Filename: types.h
                             8904 ; 5    |// Description: Standard data types
                             8905 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8906 ; 7    |
                             8907 ; 8    |#ifndef _TYPES_H
                             8908 ; 9    |#define _TYPES_H
                             8909 ; 10   |
                             8910 ; 11   |// TODO:  move this outta here!
                             8911 ; 12   |#if !defined(NOERROR)
                             8912 ; 13   |#define NOERROR 0
                             8913 ; 14   |#define SUCCESS 0
                             8914 ; 15   |#endif 
                             8915 ; 16   |#if !defined(SUCCESS)
                             8916 ; 17   |#define SUCCESS  0
                             8917 ; 18   |#endif
                             8918 ; 19   |#if !defined(ERROR)
                             8919 ; 20   |#define ERROR   -1
                             8920 ; 21   |#endif
                             8921 ; 22   |#if !defined(FALSE)
                             8922 ; 23   |#define FALSE 0
                             8923 ; 24   |#endif
                             8924 ; 25   |#if !defined(TRUE)
                             8925 ; 26   |#define TRUE  1
                             8926 ; 27   |#endif
                             8927 ; 28   |
                             8928 ; 29   |#if !defined(NULL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8929 ; 30   |#define NULL 0
                             8930 ; 31   |#endif
                             8931 ; 32   |
                             8932 ; 33   |#define MAX_INT     0x7FFFFF
                             8933 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8934 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8935 ; 36   |#define MAX_ULONG   (-1) 
                             8936 ; 37   |
                             8937 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8938 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8939 ; 40   |
                             8940 ; 41   |
                             8941 ; 42   |#define BYTE    unsigned char       // btVarName
                             8942 ; 43   |#define CHAR    signed char         // cVarName
                             8943 ; 44   |#define USHORT  unsigned short      // usVarName
                             8944 ; 45   |#define SHORT   unsigned short      // sVarName
                             8945 ; 46   |#define WORD    unsigned int        // wVarName
                             8946 ; 47   |#define INT     signed int          // iVarName
                             8947 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8948 ; 49   |#define LONG    signed long         // lVarName
                             8949 ; 50   |#define BOOL    unsigned int        // bVarName
                             8950 ; 51   |#define FRACT   _fract              // frVarName
                             8951 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8952 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8953 ; 54   |#define FLOAT   float               // fVarName
                             8954 ; 55   |#define DBL     double              // dVarName
                             8955 ; 56   |#define ENUM    enum                // eVarName
                             8956 ; 57   |#define CMX     _complex            // cmxVarName
                             8957 ; 58   |typedef WORD UCS3;                   // 
                             8958 ; 59   |
                             8959 ; 60   |#define UINT16  unsigned short
                             8960 ; 61   |#define UINT8   unsigned char   
                             8961 ; 62   |#define UINT32  unsigned long
                             8962 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8963 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8964 ; 65   |#define WCHAR   UINT16
                             8965 ; 66   |
                             8966 ; 67   |//UINT128 is 16 bytes or 6 words
                             8967 ; 68   |typedef struct UINT128_3500 {   
                             8968 ; 69   |    int val[6];     
                             8969 ; 70   |} UINT128_3500;
                             8970 ; 71   |
                             8971 ; 72   |#define UINT128   UINT128_3500
                             8972 ; 73   |
                             8973 ; 74   |// Little endian word packed byte strings:   
                             8974 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8975 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8976 ; 77   |// Little endian word packed byte strings:   
                             8977 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8978 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8979 ; 80   |
                             8980 ; 81   |// Declare Memory Spaces To Use When Coding
                             8981 ; 82   |// A. Sector Buffers
                             8982 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8983 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8984 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8985 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8986 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8987 ; 88   |// B. Media DDI Memory
                             8988 ; 89   |#define MEDIA_DDI_MEM _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8989 ; 90   |
                             8990 ; 91   |
                             8991 ; 92   |
                             8992 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8993 ; 94   |// Examples of circular pointers:
                             8994 ; 95   |//    INT CIRC cpiVarName
                             8995 ; 96   |//    DWORD CIRC cpdwVarName
                             8996 ; 97   |
                             8997 ; 98   |#define RETCODE INT                 // rcVarName
                             8998 ; 99   |
                             8999 ; 100  |// generic bitfield structure
                             9000 ; 101  |struct Bitfield {
                             9001 ; 102  |    unsigned int B0  :1;
                             9002 ; 103  |    unsigned int B1  :1;
                             9003 ; 104  |    unsigned int B2  :1;
                             9004 ; 105  |    unsigned int B3  :1;
                             9005 ; 106  |    unsigned int B4  :1;
                             9006 ; 107  |    unsigned int B5  :1;
                             9007 ; 108  |    unsigned int B6  :1;
                             9008 ; 109  |    unsigned int B7  :1;
                             9009 ; 110  |    unsigned int B8  :1;
                             9010 ; 111  |    unsigned int B9  :1;
                             9011 ; 112  |    unsigned int B10 :1;
                             9012 ; 113  |    unsigned int B11 :1;
                             9013 ; 114  |    unsigned int B12 :1;
                             9014 ; 115  |    unsigned int B13 :1;
                             9015 ; 116  |    unsigned int B14 :1;
                             9016 ; 117  |    unsigned int B15 :1;
                             9017 ; 118  |    unsigned int B16 :1;
                             9018 ; 119  |    unsigned int B17 :1;
                             9019 ; 120  |    unsigned int B18 :1;
                             9020 ; 121  |    unsigned int B19 :1;
                             9021 ; 122  |    unsigned int B20 :1;
                             9022 ; 123  |    unsigned int B21 :1;
                             9023 ; 124  |    unsigned int B22 :1;
                             9024 ; 125  |    unsigned int B23 :1;
                             9025 ; 126  |};
                             9026 ; 127  |
                             9027 ; 128  |union BitInt {
                             9028 ; 129  |        struct Bitfield B;
                             9029 ; 130  |        int        I;
                             9030 ; 131  |};
                             9031 ; 132  |
                             9032 ; 133  |#define MAX_MSG_LENGTH 10
                             9033 ; 134  |struct CMessage
                             9034 ; 135  |{
                             9035 ; 136  |        unsigned int m_uLength;
                             9036 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9037 ; 138  |};
                             9038 ; 139  |
                             9039 ; 140  |typedef struct {
                             9040 ; 141  |    WORD m_wLength;
                             9041 ; 142  |    WORD m_wMessage;
                             9042 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9043 ; 144  |} Message;
                             9044 ; 145  |
                             9045 ; 146  |struct MessageQueueDescriptor
                             9046 ; 147  |{
                             9047 ; 148  |        int *m_pBase;
                             9048 ; 149  |        int m_iModulo;
                             9049 ; 150  |        int m_iSize;
                             9050 ; 151  |        int *m_pHead;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9051 ; 152  |        int *m_pTail;
                             9052 ; 153  |};
                             9053 ; 154  |
                             9054 ; 155  |struct ModuleEntry
                             9055 ; 156  |{
                             9056 ; 157  |    int m_iSignaledEventMask;
                             9057 ; 158  |    int m_iWaitEventMask;
                             9058 ; 159  |    int m_iResourceOfCode;
                             9059 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9060 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9061 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9062 ; 163  |    int m_uTimeOutHigh;
                             9063 ; 164  |    int m_uTimeOutLow;
                             9064 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9065 ; 166  |};
                             9066 ; 167  |
                             9067 ; 168  |union WaitMask{
                             9068 ; 169  |    struct B{
                             9069 ; 170  |        unsigned int m_bNone     :1;
                             9070 ; 171  |        unsigned int m_bMessage  :1;
                             9071 ; 172  |        unsigned int m_bTimer    :1;
                             9072 ; 173  |        unsigned int m_bButton   :1;
                             9073 ; 174  |    } B;
                             9074 ; 175  |    int I;
                             9075 ; 176  |} ;
                             9076 ; 177  |
                             9077 ; 178  |
                             9078 ; 179  |struct Button {
                             9079 ; 180  |        WORD wButtonEvent;
                             9080 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9081 ; 182  |};
                             9082 ; 183  |
                             9083 ; 184  |struct Message {
                             9084 ; 185  |        WORD wMsgLength;
                             9085 ; 186  |        WORD wMsgCommand;
                             9086 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9087 ; 188  |};
                             9088 ; 189  |
                             9089 ; 190  |union EventTypes {
                             9090 ; 191  |        struct CMessage msg;
                             9091 ; 192  |        struct Button Button ;
                             9092 ; 193  |        struct Message Message;
                             9093 ; 194  |};
                             9094 ; 195  |
                             9095 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9096 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9097 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9098 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9099 ; 200  |
                             9100 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9101 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9102 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9103 ; 204  |
                             9104 ; 205  |#if DEBUG
                             9105 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9106 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9107 ; 208  |#else 
                             9108 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9109 ; 210  |#define DebugBuildAssert(x)    
                             9110 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9111 ; 212  |
                             9112 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9113 ; 214  |//  #pragma asm
                             9114 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9115 ; 216  |//  #pragma endasm
                             9116 ; 217  |
                             9117 ; 218  |
                             9118 ; 219  |#ifdef COLOR_262K
                             9119 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9120 ; 221  |#elif defined(COLOR_65K)
                             9121 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9122 ; 223  |#else
                             9123 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9124 ; 225  |#endif
                             9125 ; 226  |    
                             9126 ; 227  |#endif // #ifndef _TYPES_H
                             9127 
                             9129 
                             9130 ; 31   |
                             9131 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9132 ; 33   |
                             9133 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9134 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9135 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9136 ; 37   |
                             9137 ; 38   |
                             9138 ; 39   |
                             9139 ; 40   |
                             9140 ; 41   |
                             9141 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9142 ; 43   |
                             9143 ; 44   |
                             9144 ; 45   |
                             9145 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9146 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9147 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9148 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9149 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9150 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9151 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9152 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9153 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9154 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             9155 ; 56   |
                             9156 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9157 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9158 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9159 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9160 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9161 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9162 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9163 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9164 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9165 ; 66   |
                             9166 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                             9167 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9168 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                             9169 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                             9170 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                             9171 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                             9172 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                             9173 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                             9174 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                             9175 ; 76   |
                             9176 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9177 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9178 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9179 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9180 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9181 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9182 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9183 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9184 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9185 ; 86   |
                             9186 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9187 ; 88   |//  Bit Manipulation Unit Registers
                             9188 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9189 ; 90   |typedef union
                             9190 ; 91   |{
                             9191 ; 92   |    struct
                             9192 ; 93   |    {
                             9193 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9194 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9195 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9196 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9197 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9198 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9199 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9200 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9201 ; 102  |    } B;
                             9202 ; 103  |    int I;
                             9203 ; 104  |    unsigned U;
                             9204 ; 105  |} swizzlecsr1_type;
                             9205 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9206 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
                             9207 ; 108  |
                             9208 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9209 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9210 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9211 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9212 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9213 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9214 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9215 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9216 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9217 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9218 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9219 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9220 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9221 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9222 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9223 ; 124  |
                             9224 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9225 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9226 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9227 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9228 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9229 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9230 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9231 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9232 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9233 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9234 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9235 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9236 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9237 ; 138  |
                             9238 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                             9239 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                             9240 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                             9241 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                             9242 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                             9243 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                             9244 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                             9245 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                             9246 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                             9247 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                             9248 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
                             9249 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                             9250 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                             9251 ; 152  |
                             9252 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9253 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9254 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9255 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             9256 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9257 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9258 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9259 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9260 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9261 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9262 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9263 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9264 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9265 ; 166  |
                             9266 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9267 ; 168  |typedef union
                             9268 ; 169  |{
                             9269 ; 170  |    struct
                             9270 ; 171  |    {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9271 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9272 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9273 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9274 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9275 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9276 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9277 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9278 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9279 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9280 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9281 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9282 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9283 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9284 ; 185  |    } B;
                             9285 ; 186  |    unsigned int I;
                             9286 ; 187  |    unsigned int U;
                             9287 ; 188  |} swizzlecsr2_type;
                             9288 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9289 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                             9290 ; 191  |
                             9291 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9292 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9293 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9294 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9295 ; 196  |
                             9296 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9297 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9298 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9299 ; 200  |
                             9300 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                             9301 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                             9302 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                             9303 ; 204  |
                             9304 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9305 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9306 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9307 ; 208  |
                             9308 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9309 ; 210  |typedef union
                             9310 ; 211  |{
                             9311 ; 212  |    struct
                             9312 ; 213  |    {
                             9313 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9314 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9315 ; 216  |    } B;
                             9316 ; 217  |    int I;
                             9317 ; 218  |    unsigned U;
                             9318 ; 219  |} swizzlesizer_type;
                             9319 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9320 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                             9321 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                             9322 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                             9323 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9324 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                             9325 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                             9326 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                             9327 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                             9328 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                             9329 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                             9330 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                             9331 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                             9332 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                             9333 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                             9334 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                             9335 ; 236  |
                             9336 ; 237  |
                             9337 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9338 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9339 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9340 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9341 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9342 ; 243  |
                             9343 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9344 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9345 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9346 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9347 ; 248  |
                             9348 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9349 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
                             9350 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                             9351 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                             9352 ; 253  |
                             9353 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9354 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9355 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9356 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9357 ; 258  |
                             9358 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9359 ; 260  |typedef union
                             9360 ; 261  |{
                             9361 ; 262  |    struct
                             9362 ; 263  |    {
                             9363 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9364 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9365 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9366 ; 267  |    } B;
                             9367 ; 268  |    int I;
                             9368 ; 269  |    unsigned U;
                             9369 ; 270  |} swizzlediv3ur_type;
                             9370 ; 271  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9371 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                             9372 ; 273  |
                             9373 ; 274  |#endif
                             9374 ; 275  |
                             9375 
                             9377 
                             9378 ; 33   |#include "regssdram.h"
                             9379 
                             9381 
                             9382 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9383 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9384 ; 3    |//;  File        : regssdram.inc
                             9385 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9386 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9387 ; 6    |
                             9388 ; 7    |// The following naming conventions are followed in this file.
                             9389 ; 8    |// All registers are named using the format...
                             9390 ; 9    |//     HW_<module>_<regname>
                             9391 ; 10   |// where <module> is the module name which can be any of the following...
                             9392 ; 11   |//     SYSTEM
                             9393 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9394 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9395 ; 14   |// that module)
                             9396 ; 15   |// <regname> is the specific register within that module
                             9397 ; 16   |// We also define the following...
                             9398 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9399 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9400 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9401 ; 20   |// which does something else, and
                             9402 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9403 ; 22   |// which does something else.
                             9404 ; 23   |// Other rules
                             9405 ; 24   |//     All caps
                             9406 ; 25   |//     Numeric identifiers start at 0
                             9407 ; 26   |
                             9408 ; 27   |#if !(defined(regssdraminc))
                             9409 ; 28   |#define regssdraminc 1
                             9410 ; 29   |
                             9411 ; 30   |#include "types.h"
                             9412 
                             9414 
                             9415 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9416 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9417 ; 3    |//
                             9418 ; 4    |// Filename: types.h
                             9419 ; 5    |// Description: Standard data types
                             9420 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9421 ; 7    |
                             9422 ; 8    |#ifndef _TYPES_H
                             9423 ; 9    |#define _TYPES_H
                             9424 ; 10   |
                             9425 ; 11   |// TODO:  move this outta here!
                             9426 ; 12   |#if !defined(NOERROR)
                             9427 ; 13   |#define NOERROR 0
                             9428 ; 14   |#define SUCCESS 0
                             9429 ; 15   |#endif 
                             9430 ; 16   |#if !defined(SUCCESS)
                             9431 ; 17   |#define SUCCESS  0
                             9432 ; 18   |#endif
                             9433 ; 19   |#if !defined(ERROR)
                             9434 ; 20   |#define ERROR   -1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9435 ; 21   |#endif
                             9436 ; 22   |#if !defined(FALSE)
                             9437 ; 23   |#define FALSE 0
                             9438 ; 24   |#endif
                             9439 ; 25   |#if !defined(TRUE)
                             9440 ; 26   |#define TRUE  1
                             9441 ; 27   |#endif
                             9442 ; 28   |
                             9443 ; 29   |#if !defined(NULL)
                             9444 ; 30   |#define NULL 0
                             9445 ; 31   |#endif
                             9446 ; 32   |
                             9447 ; 33   |#define MAX_INT     0x7FFFFF
                             9448 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9449 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9450 ; 36   |#define MAX_ULONG   (-1) 
                             9451 ; 37   |
                             9452 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9453 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9454 ; 40   |
                             9455 ; 41   |
                             9456 ; 42   |#define BYTE    unsigned char       // btVarName
                             9457 ; 43   |#define CHAR    signed char         // cVarName
                             9458 ; 44   |#define USHORT  unsigned short      // usVarName
                             9459 ; 45   |#define SHORT   unsigned short      // sVarName
                             9460 ; 46   |#define WORD    unsigned int        // wVarName
                             9461 ; 47   |#define INT     signed int          // iVarName
                             9462 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9463 ; 49   |#define LONG    signed long         // lVarName
                             9464 ; 50   |#define BOOL    unsigned int        // bVarName
                             9465 ; 51   |#define FRACT   _fract              // frVarName
                             9466 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9467 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9468 ; 54   |#define FLOAT   float               // fVarName
                             9469 ; 55   |#define DBL     double              // dVarName
                             9470 ; 56   |#define ENUM    enum                // eVarName
                             9471 ; 57   |#define CMX     _complex            // cmxVarName
                             9472 ; 58   |typedef WORD UCS3;                   // 
                             9473 ; 59   |
                             9474 ; 60   |#define UINT16  unsigned short
                             9475 ; 61   |#define UINT8   unsigned char   
                             9476 ; 62   |#define UINT32  unsigned long
                             9477 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9478 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9479 ; 65   |#define WCHAR   UINT16
                             9480 ; 66   |
                             9481 ; 67   |//UINT128 is 16 bytes or 6 words
                             9482 ; 68   |typedef struct UINT128_3500 {   
                             9483 ; 69   |    int val[6];     
                             9484 ; 70   |} UINT128_3500;
                             9485 ; 71   |
                             9486 ; 72   |#define UINT128   UINT128_3500
                             9487 ; 73   |
                             9488 ; 74   |// Little endian word packed byte strings:   
                             9489 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9490 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9491 ; 77   |// Little endian word packed byte strings:   
                             9492 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9493 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9494 ; 80   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9495 ; 81   |// Declare Memory Spaces To Use When Coding
                             9496 ; 82   |// A. Sector Buffers
                             9497 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9498 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9499 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9500 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9501 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9502 ; 88   |// B. Media DDI Memory
                             9503 ; 89   |#define MEDIA_DDI_MEM _Y
                             9504 ; 90   |
                             9505 ; 91   |
                             9506 ; 92   |
                             9507 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9508 ; 94   |// Examples of circular pointers:
                             9509 ; 95   |//    INT CIRC cpiVarName
                             9510 ; 96   |//    DWORD CIRC cpdwVarName
                             9511 ; 97   |
                             9512 ; 98   |#define RETCODE INT                 // rcVarName
                             9513 ; 99   |
                             9514 ; 100  |// generic bitfield structure
                             9515 ; 101  |struct Bitfield {
                             9516 ; 102  |    unsigned int B0  :1;
                             9517 ; 103  |    unsigned int B1  :1;
                             9518 ; 104  |    unsigned int B2  :1;
                             9519 ; 105  |    unsigned int B3  :1;
                             9520 ; 106  |    unsigned int B4  :1;
                             9521 ; 107  |    unsigned int B5  :1;
                             9522 ; 108  |    unsigned int B6  :1;
                             9523 ; 109  |    unsigned int B7  :1;
                             9524 ; 110  |    unsigned int B8  :1;
                             9525 ; 111  |    unsigned int B9  :1;
                             9526 ; 112  |    unsigned int B10 :1;
                             9527 ; 113  |    unsigned int B11 :1;
                             9528 ; 114  |    unsigned int B12 :1;
                             9529 ; 115  |    unsigned int B13 :1;
                             9530 ; 116  |    unsigned int B14 :1;
                             9531 ; 117  |    unsigned int B15 :1;
                             9532 ; 118  |    unsigned int B16 :1;
                             9533 ; 119  |    unsigned int B17 :1;
                             9534 ; 120  |    unsigned int B18 :1;
                             9535 ; 121  |    unsigned int B19 :1;
                             9536 ; 122  |    unsigned int B20 :1;
                             9537 ; 123  |    unsigned int B21 :1;
                             9538 ; 124  |    unsigned int B22 :1;
                             9539 ; 125  |    unsigned int B23 :1;
                             9540 ; 126  |};
                             9541 ; 127  |
                             9542 ; 128  |union BitInt {
                             9543 ; 129  |        struct Bitfield B;
                             9544 ; 130  |        int        I;
                             9545 ; 131  |};
                             9546 ; 132  |
                             9547 ; 133  |#define MAX_MSG_LENGTH 10
                             9548 ; 134  |struct CMessage
                             9549 ; 135  |{
                             9550 ; 136  |        unsigned int m_uLength;
                             9551 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9552 ; 138  |};
                             9553 ; 139  |
                             9554 ; 140  |typedef struct {
                             9555 ; 141  |    WORD m_wLength;
                             9556 ; 142  |    WORD m_wMessage;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9557 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9558 ; 144  |} Message;
                             9559 ; 145  |
                             9560 ; 146  |struct MessageQueueDescriptor
                             9561 ; 147  |{
                             9562 ; 148  |        int *m_pBase;
                             9563 ; 149  |        int m_iModulo;
                             9564 ; 150  |        int m_iSize;
                             9565 ; 151  |        int *m_pHead;
                             9566 ; 152  |        int *m_pTail;
                             9567 ; 153  |};
                             9568 ; 154  |
                             9569 ; 155  |struct ModuleEntry
                             9570 ; 156  |{
                             9571 ; 157  |    int m_iSignaledEventMask;
                             9572 ; 158  |    int m_iWaitEventMask;
                             9573 ; 159  |    int m_iResourceOfCode;
                             9574 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9575 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9576 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9577 ; 163  |    int m_uTimeOutHigh;
                             9578 ; 164  |    int m_uTimeOutLow;
                             9579 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9580 ; 166  |};
                             9581 ; 167  |
                             9582 ; 168  |union WaitMask{
                             9583 ; 169  |    struct B{
                             9584 ; 170  |        unsigned int m_bNone     :1;
                             9585 ; 171  |        unsigned int m_bMessage  :1;
                             9586 ; 172  |        unsigned int m_bTimer    :1;
                             9587 ; 173  |        unsigned int m_bButton   :1;
                             9588 ; 174  |    } B;
                             9589 ; 175  |    int I;
                             9590 ; 176  |} ;
                             9591 ; 177  |
                             9592 ; 178  |
                             9593 ; 179  |struct Button {
                             9594 ; 180  |        WORD wButtonEvent;
                             9595 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9596 ; 182  |};
                             9597 ; 183  |
                             9598 ; 184  |struct Message {
                             9599 ; 185  |        WORD wMsgLength;
                             9600 ; 186  |        WORD wMsgCommand;
                             9601 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9602 ; 188  |};
                             9603 ; 189  |
                             9604 ; 190  |union EventTypes {
                             9605 ; 191  |        struct CMessage msg;
                             9606 ; 192  |        struct Button Button ;
                             9607 ; 193  |        struct Message Message;
                             9608 ; 194  |};
                             9609 ; 195  |
                             9610 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9611 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9612 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9613 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9614 ; 200  |
                             9615 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9616 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9617 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9618 ; 204  |
                             9619 ; 205  |#if DEBUG
                             9620 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9621 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9622 ; 208  |#else 
                             9623 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9624 ; 210  |#define DebugBuildAssert(x)    
                             9625 ; 211  |#endif
                             9626 ; 212  |
                             9627 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9628 ; 214  |//  #pragma asm
                             9629 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9630 ; 216  |//  #pragma endasm
                             9631 ; 217  |
                             9632 ; 218  |
                             9633 ; 219  |#ifdef COLOR_262K
                             9634 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9635 ; 221  |#elif defined(COLOR_65K)
                             9636 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9637 ; 223  |#else
                             9638 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9639 ; 225  |#endif
                             9640 ; 226  |    
                             9641 ; 227  |#endif // #ifndef _TYPES_H
                             9642 
                             9644 
                             9645 ; 31   |
                             9646 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9647 ; 33   |
                             9648 ; 34   |
                             9649 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9650 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9651 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9652 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9653 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                             9654 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9655 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9656 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9657 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9658 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9659 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9660 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9661 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9662 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9663 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9664 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9665 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9666 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9667 ; 53   |
                             9668 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9669 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9670 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9671 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9672 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9673 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9674 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9675 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9676 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9677 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9678 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9679 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9680 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9681 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9682 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9683 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9684 ; 70   |
                             9685 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                             9686 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9687 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                             9688 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                             9689 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9690 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                             9691 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                             9692 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                             9693 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                             9694 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                             9695 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                             9696 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                             9697 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                             9698 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                             9699 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                             9700 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                             9701 ; 87   |
                             9702 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9703 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9704 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9705 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9706 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9707 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9708 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9709 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9710 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9711 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9712 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9713 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9714 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9715 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9716 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9717 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9718 ; 104  |
                             9719 ; 105  |typedef union               
                             9720 ; 106  |{
                             9721 ; 107  |    struct {
                             9722 ; 108  |        int SDRAMEN                     :1;
                             9723 ; 109  |        int IE                          :1;
                             9724 ; 110  |        int RNW                         :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9725 ; 111  |        int KICK                        :1;
                             9726 ; 112  |        int LM                          :1;
                             9727 ; 113  |        int ISTAT                       :1;
                             9728 ; 114  |        int PWDN                        :1;
                             9729 ; 115  |        int RSVD                        :1;
                             9730 ; 116  |        int SBYTE                       :2;
                             9731 ; 117  |        int MEM                         :2;
                             9732 ; 118  |        int BIGE                        :1;
                             9733 ; 119  |        int ASIZE                       :3;
                             9734 ; 120  |        int UKICK                       :1;
                             9735 ; 121  |        int DIV                         :4;
                             9736 ; 122  |        int MULTI                       :1;
                             9737 ; 123  |        int SDRAM                       :1;
                             9738 ; 124  |        int SIGN                        :1;
                             9739 ; 125  |    } B;
                             9740 ; 126  |    int I;
                             9741 ; 127  |} sdramcsr_type;
                             9742 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9743 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9744 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                             9745 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9746 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9747 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9748 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9749 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9750 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9751 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9752 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9753 ; 139  |
                             9754 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9755 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9756 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9757 ; 143  |
                             9758 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9759 ; 145  |
                             9760 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9761 ; 147  |
                             9762 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9763 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                             9764 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9765 ; 151  |
                             9766 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9767 ; 153  |
                             9768 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9769 ; 155  |
                             9770 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9771 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9772 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9773 ; 159  |
                             9774 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9775 ; 161  |
                             9776 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9777 ; 163  |
                             9778 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9779 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9780 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9781 ; 167  |
                             9782 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9783 ; 169  |
                             9784 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9785 ; 171  |
                             9786 ; 172  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9787 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9788 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9789 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9790 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9791 ; 177  |
                             9792 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9793 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9794 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9795 ; 181  |
                             9796 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                             9797 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                             9798 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                             9799 ; 185  |
                             9800 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9801 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9802 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9803 ; 189  |
                             9804 ; 190  |typedef union               
                             9805 ; 191  |{
                             9806 ; 192  |    struct {
                             9807 ; 193  |        int INIT                :16;
                             9808 ; 194  |        int TRP                 :4;
                             9809 ; 195  |        int TRFC                :4;
                             9810 ; 196  |    } B;
                             9811 ; 197  |    int I;
                             9812 ; 198  |} sdramtimer1_type;
                             9813 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9814 ; 200  |
                             9815 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9816 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9817 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9818 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9819 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9820 ; 206  |
                             9821 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9822 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                             9823 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9824 ; 210  |
                             9825 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                             9826 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                             9827 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                             9828 ; 214  |
                             9829 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9830 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9831 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9832 ; 218  |
                             9833 ; 219  |typedef union               
                             9834 ; 220  |{
                             9835 ; 221  |    struct {
                             9836 ; 222  |        int TXSR                :4;
                             9837 ; 223  |        int TREF                :12;
                             9838 ; 224  |        int TRCD                :4;
                             9839 ; 225  |        int RSVD                :4; 
                             9840 ; 226  |    } B;
                             9841 ; 227  |    int I;
                             9842 ; 228  |} sdramtimer2_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9843 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9844 ; 230  |
                             9845 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9846 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9847 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9848 ; 234  |
                             9849 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9850 ; 236  |
                             9851 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9852 ; 238  |
                             9853 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9854 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9855 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9856 ; 242  |
                             9857 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9858 ; 244  |
                             9859 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9860 ; 246  |
                             9861 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9862 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                             9863 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9864 ; 250  |
                             9865 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9866 ; 252  |
                             9867 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                             9868 ; 254  |
                             9869 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9870 ; 256  |
                             9871 ; 257  |typedef union               
                             9872 ; 258  |{
                             9873 ; 259  |    struct {
                             9874 ; 260  |        int VALUE               :14;
                             9875 ; 261  |        int RSVD                :10; 
                             9876 ; 262  |    } B;
                             9877 ; 263  |    int I;
                             9878 ; 264  |} sdrammode_type;
                             9879 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9880 ; 266  |
                             9881 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9882 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9883 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9884 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9885 ; 271  |
                             9886 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9887 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9888 ; 274  |
                             9889 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                             9890 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                             9891 ; 277  |
                             9892 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9893 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9894 ; 280  |
                             9895 ; 281  |typedef union               
                             9896 ; 282  |{
                             9897 ; 283  |    struct {
                             9898 ; 284  |        int COLWIDTH               :4;
                             9899 ; 285  |        int ROWWIDTH               :4; 
                             9900 ; 286  |    } B;
                             9901 ; 287  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9902 ; 288  |} sdramtype_type;
                             9903 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9904 ; 290  |
                             9905 ; 291  |#endif
                             9906 ; 292  |
                             9907 ; 293  |
                             9908 ; 294  |
                             9909 ; 295  |
                             9910 ; 296  |
                             9911 ; 297  |
                             9912 
                             9914 
                             9915 ; 34   |#include "regstb.h"
                             9916 
                             9918 
                             9919 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9920 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9921 ; 3    |// Filename: regstb.inc
                             9922 ; 4    |// Description: Register definitions for Trace Buffer
                             9923 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9924 ; 6    |// The following naming conventions are followed in this file.
                             9925 ; 7    |// All registers are named using the format...
                             9926 ; 8    |//     HW_<module>_<regname>
                             9927 ; 9    |// where <module> is the module name which can be any of the following...
                             9928 ; 10   |//     USB20
                             9929 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9930 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9931 ; 13   |// that module)
                             9932 ; 14   |// <regname> is the specific register within that module
                             9933 ; 15   |// We also define the following...
                             9934 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9935 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9936 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9937 ; 19   |// which does something else, and
                             9938 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9939 ; 21   |// which does something else.
                             9940 ; 22   |// Other rules
                             9941 ; 23   |//     All caps
                             9942 ; 24   |//     Numeric identifiers start at 0
                             9943 ; 25   |#if !(defined(regstbinc))
                             9944 ; 26   |#define regstbinc 1
                             9945 ; 27   |
                             9946 ; 28   |#include "types.h"
                             9947 
                             9949 
                             9950 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9951 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9952 ; 3    |//
                             9953 ; 4    |// Filename: types.h
                             9954 ; 5    |// Description: Standard data types
                             9955 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9956 ; 7    |
                             9957 ; 8    |#ifndef _TYPES_H
                             9958 ; 9    |#define _TYPES_H
                             9959 ; 10   |
                             9960 ; 11   |// TODO:  move this outta here!
                             9961 ; 12   |#if !defined(NOERROR)
                             9962 ; 13   |#define NOERROR 0
                             9963 ; 14   |#define SUCCESS 0
                             9964 ; 15   |#endif 
                             9965 ; 16   |#if !defined(SUCCESS)
                             9966 ; 17   |#define SUCCESS  0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9967 ; 18   |#endif
                             9968 ; 19   |#if !defined(ERROR)
                             9969 ; 20   |#define ERROR   -1
                             9970 ; 21   |#endif
                             9971 ; 22   |#if !defined(FALSE)
                             9972 ; 23   |#define FALSE 0
                             9973 ; 24   |#endif
                             9974 ; 25   |#if !defined(TRUE)
                             9975 ; 26   |#define TRUE  1
                             9976 ; 27   |#endif
                             9977 ; 28   |
                             9978 ; 29   |#if !defined(NULL)
                             9979 ; 30   |#define NULL 0
                             9980 ; 31   |#endif
                             9981 ; 32   |
                             9982 ; 33   |#define MAX_INT     0x7FFFFF
                             9983 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9984 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9985 ; 36   |#define MAX_ULONG   (-1) 
                             9986 ; 37   |
                             9987 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9988 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9989 ; 40   |
                             9990 ; 41   |
                             9991 ; 42   |#define BYTE    unsigned char       // btVarName
                             9992 ; 43   |#define CHAR    signed char         // cVarName
                             9993 ; 44   |#define USHORT  unsigned short      // usVarName
                             9994 ; 45   |#define SHORT   unsigned short      // sVarName
                             9995 ; 46   |#define WORD    unsigned int        // wVarName
                             9996 ; 47   |#define INT     signed int          // iVarName
                             9997 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9998 ; 49   |#define LONG    signed long         // lVarName
                             9999 ; 50   |#define BOOL    unsigned int        // bVarName
                            10000 ; 51   |#define FRACT   _fract              // frVarName
                            10001 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10002 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10003 ; 54   |#define FLOAT   float               // fVarName
                            10004 ; 55   |#define DBL     double              // dVarName
                            10005 ; 56   |#define ENUM    enum                // eVarName
                            10006 ; 57   |#define CMX     _complex            // cmxVarName
                            10007 ; 58   |typedef WORD UCS3;                   // 
                            10008 ; 59   |
                            10009 ; 60   |#define UINT16  unsigned short
                            10010 ; 61   |#define UINT8   unsigned char   
                            10011 ; 62   |#define UINT32  unsigned long
                            10012 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10013 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10014 ; 65   |#define WCHAR   UINT16
                            10015 ; 66   |
                            10016 ; 67   |//UINT128 is 16 bytes or 6 words
                            10017 ; 68   |typedef struct UINT128_3500 {   
                            10018 ; 69   |    int val[6];     
                            10019 ; 70   |} UINT128_3500;
                            10020 ; 71   |
                            10021 ; 72   |#define UINT128   UINT128_3500
                            10022 ; 73   |
                            10023 ; 74   |// Little endian word packed byte strings:   
                            10024 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10025 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10026 ; 77   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10027 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10028 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10029 ; 80   |
                            10030 ; 81   |// Declare Memory Spaces To Use When Coding
                            10031 ; 82   |// A. Sector Buffers
                            10032 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10033 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10034 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10035 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10036 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10037 ; 88   |// B. Media DDI Memory
                            10038 ; 89   |#define MEDIA_DDI_MEM _Y
                            10039 ; 90   |
                            10040 ; 91   |
                            10041 ; 92   |
                            10042 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10043 ; 94   |// Examples of circular pointers:
                            10044 ; 95   |//    INT CIRC cpiVarName
                            10045 ; 96   |//    DWORD CIRC cpdwVarName
                            10046 ; 97   |
                            10047 ; 98   |#define RETCODE INT                 // rcVarName
                            10048 ; 99   |
                            10049 ; 100  |// generic bitfield structure
                            10050 ; 101  |struct Bitfield {
                            10051 ; 102  |    unsigned int B0  :1;
                            10052 ; 103  |    unsigned int B1  :1;
                            10053 ; 104  |    unsigned int B2  :1;
                            10054 ; 105  |    unsigned int B3  :1;
                            10055 ; 106  |    unsigned int B4  :1;
                            10056 ; 107  |    unsigned int B5  :1;
                            10057 ; 108  |    unsigned int B6  :1;
                            10058 ; 109  |    unsigned int B7  :1;
                            10059 ; 110  |    unsigned int B8  :1;
                            10060 ; 111  |    unsigned int B9  :1;
                            10061 ; 112  |    unsigned int B10 :1;
                            10062 ; 113  |    unsigned int B11 :1;
                            10063 ; 114  |    unsigned int B12 :1;
                            10064 ; 115  |    unsigned int B13 :1;
                            10065 ; 116  |    unsigned int B14 :1;
                            10066 ; 117  |    unsigned int B15 :1;
                            10067 ; 118  |    unsigned int B16 :1;
                            10068 ; 119  |    unsigned int B17 :1;
                            10069 ; 120  |    unsigned int B18 :1;
                            10070 ; 121  |    unsigned int B19 :1;
                            10071 ; 122  |    unsigned int B20 :1;
                            10072 ; 123  |    unsigned int B21 :1;
                            10073 ; 124  |    unsigned int B22 :1;
                            10074 ; 125  |    unsigned int B23 :1;
                            10075 ; 126  |};
                            10076 ; 127  |
                            10077 ; 128  |union BitInt {
                            10078 ; 129  |        struct Bitfield B;
                            10079 ; 130  |        int        I;
                            10080 ; 131  |};
                            10081 ; 132  |
                            10082 ; 133  |#define MAX_MSG_LENGTH 10
                            10083 ; 134  |struct CMessage
                            10084 ; 135  |{
                            10085 ; 136  |        unsigned int m_uLength;
                            10086 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10087 ; 138  |};
                            10088 ; 139  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10089 ; 140  |typedef struct {
                            10090 ; 141  |    WORD m_wLength;
                            10091 ; 142  |    WORD m_wMessage;
                            10092 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10093 ; 144  |} Message;
                            10094 ; 145  |
                            10095 ; 146  |struct MessageQueueDescriptor
                            10096 ; 147  |{
                            10097 ; 148  |        int *m_pBase;
                            10098 ; 149  |        int m_iModulo;
                            10099 ; 150  |        int m_iSize;
                            10100 ; 151  |        int *m_pHead;
                            10101 ; 152  |        int *m_pTail;
                            10102 ; 153  |};
                            10103 ; 154  |
                            10104 ; 155  |struct ModuleEntry
                            10105 ; 156  |{
                            10106 ; 157  |    int m_iSignaledEventMask;
                            10107 ; 158  |    int m_iWaitEventMask;
                            10108 ; 159  |    int m_iResourceOfCode;
                            10109 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10110 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10111 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10112 ; 163  |    int m_uTimeOutHigh;
                            10113 ; 164  |    int m_uTimeOutLow;
                            10114 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10115 ; 166  |};
                            10116 ; 167  |
                            10117 ; 168  |union WaitMask{
                            10118 ; 169  |    struct B{
                            10119 ; 170  |        unsigned int m_bNone     :1;
                            10120 ; 171  |        unsigned int m_bMessage  :1;
                            10121 ; 172  |        unsigned int m_bTimer    :1;
                            10122 ; 173  |        unsigned int m_bButton   :1;
                            10123 ; 174  |    } B;
                            10124 ; 175  |    int I;
                            10125 ; 176  |} ;
                            10126 ; 177  |
                            10127 ; 178  |
                            10128 ; 179  |struct Button {
                            10129 ; 180  |        WORD wButtonEvent;
                            10130 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10131 ; 182  |};
                            10132 ; 183  |
                            10133 ; 184  |struct Message {
                            10134 ; 185  |        WORD wMsgLength;
                            10135 ; 186  |        WORD wMsgCommand;
                            10136 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10137 ; 188  |};
                            10138 ; 189  |
                            10139 ; 190  |union EventTypes {
                            10140 ; 191  |        struct CMessage msg;
                            10141 ; 192  |        struct Button Button ;
                            10142 ; 193  |        struct Message Message;
                            10143 ; 194  |};
                            10144 ; 195  |
                            10145 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10146 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10147 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10148 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10149 ; 200  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10150 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10151 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10152 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10153 ; 204  |
                            10154 ; 205  |#if DEBUG
                            10155 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10156 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10157 ; 208  |#else 
                            10158 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10159 ; 210  |#define DebugBuildAssert(x)    
                            10160 ; 211  |#endif
                            10161 ; 212  |
                            10162 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10163 ; 214  |//  #pragma asm
                            10164 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10165 ; 216  |//  #pragma endasm
                            10166 ; 217  |
                            10167 ; 218  |
                            10168 ; 219  |#ifdef COLOR_262K
                            10169 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10170 ; 221  |#elif defined(COLOR_65K)
                            10171 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10172 ; 223  |#else
                            10173 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10174 ; 225  |#endif
                            10175 ; 226  |    
                            10176 ; 227  |#endif // #ifndef _TYPES_H
                            10177 
                            10179 
                            10180 ; 29   |
                            10181 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10182 ; 31   |
                            10183 ; 32   |//   Trace Buffer STMP Registers 
                            10184 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10185 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10186 ; 35   |
                            10187 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10188 ; 37   |
                            10189 ; 38   |
                            10190 ; 39   |
                            10191 ; 40   |
                            10192 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10193 ; 42   |
                            10194 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10195 ; 44   |
                            10196 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10197 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10198 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10199 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10200 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10201 ; 50   |
                            10202 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10203 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10204 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10205 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10206 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10207 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10208 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10209 ; 58   |
                            10210 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            10211 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            10212 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10213 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            10214 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            10215 ; 64   |
                            10216 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10217 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10218 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10219 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10220 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10221 ; 70   |
                            10222 ; 71   |typedef union               
                            10223 ; 72   |{
                            10224 ; 73   |    struct {
                            10225 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10226 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10227 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10228 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10229 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10230 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10231 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10232 ; 81   |    } B;
                            10233 ; 82   |    int I;
                            10234 ; 83   |    unsigned int U;
                            10235 ; 84   |} tb_cfg_type;
                            10236 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            10237 ; 86   |
                            10238 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10239 ; 88   |
                            10240 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10241 ; 90   |
                            10242 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10243 ; 92   |
                            10244 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10245 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10246 ; 95   |
                            10247 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            10248 ; 97   |
                            10249 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            10250 ; 99   |
                            10251 ; 100  |typedef union               
                            10252 ; 101  |{
                            10253 ; 102  |    struct {
                            10254 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10255 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10256 ; 105  |    } B;
                            10257 ; 106  |    int I;
                            10258 ; 107  |    unsigned int U;
                            10259 ; 108  |} tb_bar_type;
                            10260 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            10261 ; 110  |
                            10262 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10263 ; 112  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10264 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10265 ; 114  |
                            10266 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10267 ; 116  |
                            10268 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10269 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10270 ; 119  |
                            10271 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            10272 ; 121  |
                            10273 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10274 ; 123  |
                            10275 ; 124  |typedef union               
                            10276 ; 125  |{
                            10277 ; 126  |    struct {
                            10278 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10279 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10280 ; 129  |    } B;
                            10281 ; 130  |    int I;
                            10282 ; 131  |    unsigned int U;
                            10283 ; 132  |} tb_mod_type;
                            10284 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            10285 ; 134  |
                            10286 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10287 ; 136  |
                            10288 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10289 ; 138  |
                            10290 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10291 ; 140  |
                            10292 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10293 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10294 ; 143  |
                            10295 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10296 ; 145  |
                            10297 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10298 ; 147  |
                            10299 ; 148  |typedef union               
                            10300 ; 149  |{
                            10301 ; 150  |    struct {
                            10302 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10303 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10304 ; 153  |    } B;
                            10305 ; 154  |    int I;
                            10306 ; 155  |    unsigned int U;
                            10307 ; 156  |} tb_cir_type;
                            10308 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            10309 ; 158  |
                            10310 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10311 ; 160  |
                            10312 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10313 ; 162  |
                            10314 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10315 ; 164  |
                            10316 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10317 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10318 ; 167  |
                            10319 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10320 ; 169  |
                            10321 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10322 ; 171  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10323 ; 172  |typedef union               
                            10324 ; 173  |{
                            10325 ; 174  |    struct {
                            10326 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10327 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10328 ; 177  |    } B;
                            10329 ; 178  |    int I;
                            10330 ; 179  |    unsigned int U;
                            10331 ; 180  |} tb_obc_type;
                            10332 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            10333 ; 182  |
                            10334 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10335 ; 184  |
                            10336 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10337 ; 186  |
                            10338 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10339 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10340 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10341 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10342 ; 191  |
                            10343 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10344 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10345 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10346 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10347 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10348 ; 197  |
                            10349 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            10350 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            10351 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            10352 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            10353 ; 202  |
                            10354 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10355 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10356 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10357 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10358 ; 207  |
                            10359 ; 208  |typedef union               
                            10360 ; 209  |{
                            10361 ; 210  |    struct {
                            10362 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10363 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10364 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10365 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10366 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10367 ; 216  |    } B;
                            10368 ; 217  |    int I;
                            10369 ; 218  |    unsigned int U;
                            10370 ; 219  |} tb_tcs_type;
                            10371 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            10372 ; 221  |
                            10373 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10374 ; 223  |
                            10375 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10376 ; 225  |
                            10377 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10378 ; 227  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10379 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10380 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10381 ; 230  |
                            10382 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            10383 ; 232  |
                            10384 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10385 ; 234  |
                            10386 ; 235  |typedef union               
                            10387 ; 236  |{
                            10388 ; 237  |    struct {
                            10389 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10390 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10391 ; 240  |    } B;
                            10392 ; 241  |    int I;
                            10393 ; 242  |    unsigned int U;
                            10394 ; 243  |} tb_tvr_type;
                            10395 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            10396 ; 245  |
                            10397 ; 246  |
                            10398 ; 247  |
                            10399 ; 248  |#endif
                            10400 ; 249  |
                            10401 ; 250  |
                            10402 ; 251  |
                            10403 ; 252  |
                            10404 ; 253  |
                            10405 ; 254  |
                            10406 ; 255  |
                            10407 ; 256  |
                            10408 ; 257  |
                            10409 ; 258  |
                            10410 ; 259  |
                            10411 ; 260  |
                            10412 ; 261  |
                            10413 ; 262  |
                            10414 ; 263  |
                            10415 ; 264  |
                            10416 ; 265  |
                            10417 
                            10419 
                            10420 ; 35   |#include "regstimer.h"
                            10421 
                            10423 
                            10424 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10425 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10426 ; 3    |// Filename: regstimer.inc
                            10427 ; 4    |// Description: Register definitions for  Timers interface
                            10428 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10429 ; 6    |// The following naming conventions are followed in this file.
                            10430 ; 7    |// All registers are named using the format...
                            10431 ; 8    |//     HW_<module>_<regname>
                            10432 ; 9    |// where <module> is the module name which can be any of the following...
                            10433 ; 10   |//     USB20
                            10434 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10435 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10436 ; 13   |// that module)
                            10437 ; 14   |// <regname> is the specific register within that module
                            10438 ; 15   |// We also define the following...
                            10439 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10440 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10441 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10442 ; 19   |// which does something else, and
                            10443 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10444 ; 21   |// which does something else.
                            10445 ; 22   |// Other rules
                            10446 ; 23   |//     All caps
                            10447 ; 24   |//     Numeric identifiers start at 0
                            10448 ; 25   |#if !(defined(regstimerinc))
                            10449 ; 26   |#define regstimerinc 1
                            10450 ; 27   |
                            10451 ; 28   |#include "types.h"
                            10452 
                            10454 
                            10455 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10456 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10457 ; 3    |//
                            10458 ; 4    |// Filename: types.h
                            10459 ; 5    |// Description: Standard data types
                            10460 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10461 ; 7    |
                            10462 ; 8    |#ifndef _TYPES_H
                            10463 ; 9    |#define _TYPES_H
                            10464 ; 10   |
                            10465 ; 11   |// TODO:  move this outta here!
                            10466 ; 12   |#if !defined(NOERROR)
                            10467 ; 13   |#define NOERROR 0
                            10468 ; 14   |#define SUCCESS 0
                            10469 ; 15   |#endif 
                            10470 ; 16   |#if !defined(SUCCESS)
                            10471 ; 17   |#define SUCCESS  0
                            10472 ; 18   |#endif
                            10473 ; 19   |#if !defined(ERROR)
                            10474 ; 20   |#define ERROR   -1
                            10475 ; 21   |#endif
                            10476 ; 22   |#if !defined(FALSE)
                            10477 ; 23   |#define FALSE 0
                            10478 ; 24   |#endif
                            10479 ; 25   |#if !defined(TRUE)
                            10480 ; 26   |#define TRUE  1
                            10481 ; 27   |#endif
                            10482 ; 28   |
                            10483 ; 29   |#if !defined(NULL)
                            10484 ; 30   |#define NULL 0
                            10485 ; 31   |#endif
                            10486 ; 32   |
                            10487 ; 33   |#define MAX_INT     0x7FFFFF
                            10488 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10489 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10490 ; 36   |#define MAX_ULONG   (-1) 
                            10491 ; 37   |
                            10492 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10493 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10494 ; 40   |
                            10495 ; 41   |
                            10496 ; 42   |#define BYTE    unsigned char       // btVarName
                            10497 ; 43   |#define CHAR    signed char         // cVarName
                            10498 ; 44   |#define USHORT  unsigned short      // usVarName
                            10499 ; 45   |#define SHORT   unsigned short      // sVarName
                            10500 ; 46   |#define WORD    unsigned int        // wVarName
                            10501 ; 47   |#define INT     signed int          // iVarName
                            10502 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10503 ; 49   |#define LONG    signed long         // lVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10504 ; 50   |#define BOOL    unsigned int        // bVarName
                            10505 ; 51   |#define FRACT   _fract              // frVarName
                            10506 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10507 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10508 ; 54   |#define FLOAT   float               // fVarName
                            10509 ; 55   |#define DBL     double              // dVarName
                            10510 ; 56   |#define ENUM    enum                // eVarName
                            10511 ; 57   |#define CMX     _complex            // cmxVarName
                            10512 ; 58   |typedef WORD UCS3;                   // 
                            10513 ; 59   |
                            10514 ; 60   |#define UINT16  unsigned short
                            10515 ; 61   |#define UINT8   unsigned char   
                            10516 ; 62   |#define UINT32  unsigned long
                            10517 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10518 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10519 ; 65   |#define WCHAR   UINT16
                            10520 ; 66   |
                            10521 ; 67   |//UINT128 is 16 bytes or 6 words
                            10522 ; 68   |typedef struct UINT128_3500 {   
                            10523 ; 69   |    int val[6];     
                            10524 ; 70   |} UINT128_3500;
                            10525 ; 71   |
                            10526 ; 72   |#define UINT128   UINT128_3500
                            10527 ; 73   |
                            10528 ; 74   |// Little endian word packed byte strings:   
                            10529 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10530 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10531 ; 77   |// Little endian word packed byte strings:   
                            10532 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10533 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10534 ; 80   |
                            10535 ; 81   |// Declare Memory Spaces To Use When Coding
                            10536 ; 82   |// A. Sector Buffers
                            10537 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10538 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10539 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10540 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10541 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10542 ; 88   |// B. Media DDI Memory
                            10543 ; 89   |#define MEDIA_DDI_MEM _Y
                            10544 ; 90   |
                            10545 ; 91   |
                            10546 ; 92   |
                            10547 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10548 ; 94   |// Examples of circular pointers:
                            10549 ; 95   |//    INT CIRC cpiVarName
                            10550 ; 96   |//    DWORD CIRC cpdwVarName
                            10551 ; 97   |
                            10552 ; 98   |#define RETCODE INT                 // rcVarName
                            10553 ; 99   |
                            10554 ; 100  |// generic bitfield structure
                            10555 ; 101  |struct Bitfield {
                            10556 ; 102  |    unsigned int B0  :1;
                            10557 ; 103  |    unsigned int B1  :1;
                            10558 ; 104  |    unsigned int B2  :1;
                            10559 ; 105  |    unsigned int B3  :1;
                            10560 ; 106  |    unsigned int B4  :1;
                            10561 ; 107  |    unsigned int B5  :1;
                            10562 ; 108  |    unsigned int B6  :1;
                            10563 ; 109  |    unsigned int B7  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10564 ; 110  |    unsigned int B8  :1;
                            10565 ; 111  |    unsigned int B9  :1;
                            10566 ; 112  |    unsigned int B10 :1;
                            10567 ; 113  |    unsigned int B11 :1;
                            10568 ; 114  |    unsigned int B12 :1;
                            10569 ; 115  |    unsigned int B13 :1;
                            10570 ; 116  |    unsigned int B14 :1;
                            10571 ; 117  |    unsigned int B15 :1;
                            10572 ; 118  |    unsigned int B16 :1;
                            10573 ; 119  |    unsigned int B17 :1;
                            10574 ; 120  |    unsigned int B18 :1;
                            10575 ; 121  |    unsigned int B19 :1;
                            10576 ; 122  |    unsigned int B20 :1;
                            10577 ; 123  |    unsigned int B21 :1;
                            10578 ; 124  |    unsigned int B22 :1;
                            10579 ; 125  |    unsigned int B23 :1;
                            10580 ; 126  |};
                            10581 ; 127  |
                            10582 ; 128  |union BitInt {
                            10583 ; 129  |        struct Bitfield B;
                            10584 ; 130  |        int        I;
                            10585 ; 131  |};
                            10586 ; 132  |
                            10587 ; 133  |#define MAX_MSG_LENGTH 10
                            10588 ; 134  |struct CMessage
                            10589 ; 135  |{
                            10590 ; 136  |        unsigned int m_uLength;
                            10591 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10592 ; 138  |};
                            10593 ; 139  |
                            10594 ; 140  |typedef struct {
                            10595 ; 141  |    WORD m_wLength;
                            10596 ; 142  |    WORD m_wMessage;
                            10597 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10598 ; 144  |} Message;
                            10599 ; 145  |
                            10600 ; 146  |struct MessageQueueDescriptor
                            10601 ; 147  |{
                            10602 ; 148  |        int *m_pBase;
                            10603 ; 149  |        int m_iModulo;
                            10604 ; 150  |        int m_iSize;
                            10605 ; 151  |        int *m_pHead;
                            10606 ; 152  |        int *m_pTail;
                            10607 ; 153  |};
                            10608 ; 154  |
                            10609 ; 155  |struct ModuleEntry
                            10610 ; 156  |{
                            10611 ; 157  |    int m_iSignaledEventMask;
                            10612 ; 158  |    int m_iWaitEventMask;
                            10613 ; 159  |    int m_iResourceOfCode;
                            10614 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10615 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10616 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10617 ; 163  |    int m_uTimeOutHigh;
                            10618 ; 164  |    int m_uTimeOutLow;
                            10619 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10620 ; 166  |};
                            10621 ; 167  |
                            10622 ; 168  |union WaitMask{
                            10623 ; 169  |    struct B{
                            10624 ; 170  |        unsigned int m_bNone     :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10625 ; 171  |        unsigned int m_bMessage  :1;
                            10626 ; 172  |        unsigned int m_bTimer    :1;
                            10627 ; 173  |        unsigned int m_bButton   :1;
                            10628 ; 174  |    } B;
                            10629 ; 175  |    int I;
                            10630 ; 176  |} ;
                            10631 ; 177  |
                            10632 ; 178  |
                            10633 ; 179  |struct Button {
                            10634 ; 180  |        WORD wButtonEvent;
                            10635 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10636 ; 182  |};
                            10637 ; 183  |
                            10638 ; 184  |struct Message {
                            10639 ; 185  |        WORD wMsgLength;
                            10640 ; 186  |        WORD wMsgCommand;
                            10641 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10642 ; 188  |};
                            10643 ; 189  |
                            10644 ; 190  |union EventTypes {
                            10645 ; 191  |        struct CMessage msg;
                            10646 ; 192  |        struct Button Button ;
                            10647 ; 193  |        struct Message Message;
                            10648 ; 194  |};
                            10649 ; 195  |
                            10650 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10651 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10652 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10653 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10654 ; 200  |
                            10655 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10656 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10657 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10658 ; 204  |
                            10659 ; 205  |#if DEBUG
                            10660 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10661 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10662 ; 208  |#else 
                            10663 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10664 ; 210  |#define DebugBuildAssert(x)    
                            10665 ; 211  |#endif
                            10666 ; 212  |
                            10667 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10668 ; 214  |//  #pragma asm
                            10669 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10670 ; 216  |//  #pragma endasm
                            10671 ; 217  |
                            10672 ; 218  |
                            10673 ; 219  |#ifdef COLOR_262K
                            10674 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10675 ; 221  |#elif defined(COLOR_65K)
                            10676 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10677 ; 223  |#else
                            10678 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10679 ; 225  |#endif
                            10680 ; 226  |    
                            10681 ; 227  |#endif // #ifndef _TYPES_H
                            10682 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10684 
                            10685 ; 29   |
                            10686 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10687 ; 31   |//   TIMER STMP Registers 
                            10688 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10689 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10690 ; 34   |
                            10691 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10692 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10693 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10694 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10695 ; 39   |
                            10696 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10697 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10698 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10699 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10700 ; 44   |
                            10701 ; 45   |#define HW_TMRCSR 0
                            10702 ; 46   |#define HW_TMRCNTR 1
                            10703 ; 47   |
                            10704 ; 48   |
                            10705 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10706 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10707 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10708 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10709 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10710 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10711 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10712 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10713 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10714 ; 58   |
                            10715 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10716 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10717 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10718 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10719 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10720 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10721 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            10722 ; 66   |
                            10723 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            10724 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            10725 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
                            10726 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            10727 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            10728 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            10729 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            10730 ; 74   |
                            10731 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10732 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10733 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10734 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10735 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10736 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10737 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10738 ; 82   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10739 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10740 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10741 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10742 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10743 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10744 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10745 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10746 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10747 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10748 ; 92   |
                            10749 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10750 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10751 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10752 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10753 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10754 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10755 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10756 ; 100  |
                            10757 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            10758 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            10759 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            10760 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            10761 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            10762 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            10763 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            10764 ; 108  |
                            10765 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10766 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10767 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10768 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10769 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            10770 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10771 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10772 ; 116  |
                            10773 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10774 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10775 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10776 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10777 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10778 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10779 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10780 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10781 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10782 ; 126  |
                            10783 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10784 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10785 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10786 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10787 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10788 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10789 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10790 ; 134  |
                            10791 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10792 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            10793 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            10794 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            10795 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            10796 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            10797 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            10798 ; 142  |
                            10799 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10800 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10801 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10802 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10803 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10804 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10805 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10806 ; 150  |
                            10807 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10808 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10809 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10810 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10811 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10812 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10813 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10814 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10815 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10816 ; 160  |
                            10817 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10818 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10819 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10820 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10821 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10822 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10823 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10824 ; 168  |
                            10825 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            10826 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            10827 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
                            10828 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            10829 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            10830 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            10831 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            10832 ; 176  |
                            10833 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10834 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10835 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10836 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10837 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10838 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10839 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10840 ; 184  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10841 ; 185  |typedef union               
                            10842 ; 186  |{
                            10843 ; 187  |    struct {
                            10844 ; 188  |       int TIMER_ENABLE              :1;
                            10845 ; 189  |       int TIMER_INT_EN              :1;
                            10846 ; 190  |       int INVERT                    :1;
                            10847 ; 191  |       int TIMER_CONTROL             :3;
                            10848 ; 192  |       int RSVD0                     :1;
                            10849 ; 193  |       int TIMER_STATUS              :1;
                            10850 ; 194  |       int TIMER_MODE                :2;
                            10851 ; 195  |       int RSVD1                     :13;
                            10852 ; 196  |       int CLKGT                     :1;
                            10853 ; 197  |    } B;
                            10854 ; 198  |    int I;
                            10855 ; 199  |} timercsr_type;
                            10856 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            10857 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            10858 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            10859 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            10860 ; 204  |
                            10861 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10862 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10863 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10864 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10865 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            10866 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10867 ; 211  |
                            10868 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10869 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10870 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10871 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10872 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            10873 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            10874 ; 218  |
                            10875 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10876 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10877 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10878 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10879 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            10880 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10881 ; 225  |
                            10882 ; 226  |typedef union               
                            10883 ; 227  |{
                            10884 ; 228  |    struct {
                            10885 ; 229  |       int COUNT                    :24;
                            10886 ; 230  |    } B;
                            10887 ; 231  |    int I;
                            10888 ; 232  |} tmrcntr_type;
                            10889 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            10890 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            10891 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10892 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            10893 ; 237  |
                            10894 ; 238  |
                            10895 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            10896 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            10897 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10898 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10899 ; 243  |
                            10900 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10901 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            10902 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            10903 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10904 ; 248  |
                            10905 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10906 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10907 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            10908 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10909 ; 253  |
                            10910 ; 254  |// Timer enable
                            10911 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10912 ; 256  |// Timer clock gating control
                            10913 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10914 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10915 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10916 ; 260  |#endif
                            10917 ; 261  |
                            10918 ; 262  |
                            10919 ; 263  |
                            10920 ; 264  |
                            10921 
                            10923 
                            10924 ; 36   |#include "regsusb20.h"
                            10925 
                            10927 
                            10928 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10929 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10930 ; 3    |//;  File        : regsusb20ip.inc
                            10931 ; 4    |//;  Description : USB20 IP Register definition
                            10932 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10933 ; 6    |
                            10934 ; 7    |// The following naming conventions are followed in this file.
                            10935 ; 8    |// All registers are named using the format...
                            10936 ; 9    |//     HW_<module>_<regname>
                            10937 ; 10   |// where <module> is the module name which can be any of the following...
                            10938 ; 11   |//     USB20
                            10939 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10940 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10941 ; 14   |// that module)
                            10942 ; 15   |// <regname> is the specific register within that module
                            10943 ; 16   |// We also define the following...
                            10944 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10945 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10946 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10947 ; 20   |// which does something else, and
                            10948 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10949 ; 22   |// which does something else.
                            10950 ; 23   |// Other rules
                            10951 ; 24   |//     All caps
                            10952 ; 25   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10953 ; 26   |
                            10954 ; 27   |#if !(defined(regsusb20inc))
                            10955 ; 28   |#define regsusb20inc 1
                            10956 ; 29   |
                            10957 ; 30   |#include "types.h"
                            10958 
                            10960 
                            10961 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10962 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10963 ; 3    |//
                            10964 ; 4    |// Filename: types.h
                            10965 ; 5    |// Description: Standard data types
                            10966 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10967 ; 7    |
                            10968 ; 8    |#ifndef _TYPES_H
                            10969 ; 9    |#define _TYPES_H
                            10970 ; 10   |
                            10971 ; 11   |// TODO:  move this outta here!
                            10972 ; 12   |#if !defined(NOERROR)
                            10973 ; 13   |#define NOERROR 0
                            10974 ; 14   |#define SUCCESS 0
                            10975 ; 15   |#endif 
                            10976 ; 16   |#if !defined(SUCCESS)
                            10977 ; 17   |#define SUCCESS  0
                            10978 ; 18   |#endif
                            10979 ; 19   |#if !defined(ERROR)
                            10980 ; 20   |#define ERROR   -1
                            10981 ; 21   |#endif
                            10982 ; 22   |#if !defined(FALSE)
                            10983 ; 23   |#define FALSE 0
                            10984 ; 24   |#endif
                            10985 ; 25   |#if !defined(TRUE)
                            10986 ; 26   |#define TRUE  1
                            10987 ; 27   |#endif
                            10988 ; 28   |
                            10989 ; 29   |#if !defined(NULL)
                            10990 ; 30   |#define NULL 0
                            10991 ; 31   |#endif
                            10992 ; 32   |
                            10993 ; 33   |#define MAX_INT     0x7FFFFF
                            10994 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10995 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10996 ; 36   |#define MAX_ULONG   (-1) 
                            10997 ; 37   |
                            10998 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10999 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11000 ; 40   |
                            11001 ; 41   |
                            11002 ; 42   |#define BYTE    unsigned char       // btVarName
                            11003 ; 43   |#define CHAR    signed char         // cVarName
                            11004 ; 44   |#define USHORT  unsigned short      // usVarName
                            11005 ; 45   |#define SHORT   unsigned short      // sVarName
                            11006 ; 46   |#define WORD    unsigned int        // wVarName
                            11007 ; 47   |#define INT     signed int          // iVarName
                            11008 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11009 ; 49   |#define LONG    signed long         // lVarName
                            11010 ; 50   |#define BOOL    unsigned int        // bVarName
                            11011 ; 51   |#define FRACT   _fract              // frVarName
                            11012 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11013 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11014 ; 54   |#define FLOAT   float               // fVarName
                            11015 ; 55   |#define DBL     double              // dVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11016 ; 56   |#define ENUM    enum                // eVarName
                            11017 ; 57   |#define CMX     _complex            // cmxVarName
                            11018 ; 58   |typedef WORD UCS3;                   // 
                            11019 ; 59   |
                            11020 ; 60   |#define UINT16  unsigned short
                            11021 ; 61   |#define UINT8   unsigned char   
                            11022 ; 62   |#define UINT32  unsigned long
                            11023 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11024 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11025 ; 65   |#define WCHAR   UINT16
                            11026 ; 66   |
                            11027 ; 67   |//UINT128 is 16 bytes or 6 words
                            11028 ; 68   |typedef struct UINT128_3500 {   
                            11029 ; 69   |    int val[6];     
                            11030 ; 70   |} UINT128_3500;
                            11031 ; 71   |
                            11032 ; 72   |#define UINT128   UINT128_3500
                            11033 ; 73   |
                            11034 ; 74   |// Little endian word packed byte strings:   
                            11035 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11036 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11037 ; 77   |// Little endian word packed byte strings:   
                            11038 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11039 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11040 ; 80   |
                            11041 ; 81   |// Declare Memory Spaces To Use When Coding
                            11042 ; 82   |// A. Sector Buffers
                            11043 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11044 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11045 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11046 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11047 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11048 ; 88   |// B. Media DDI Memory
                            11049 ; 89   |#define MEDIA_DDI_MEM _Y
                            11050 ; 90   |
                            11051 ; 91   |
                            11052 ; 92   |
                            11053 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11054 ; 94   |// Examples of circular pointers:
                            11055 ; 95   |//    INT CIRC cpiVarName
                            11056 ; 96   |//    DWORD CIRC cpdwVarName
                            11057 ; 97   |
                            11058 ; 98   |#define RETCODE INT                 // rcVarName
                            11059 ; 99   |
                            11060 ; 100  |// generic bitfield structure
                            11061 ; 101  |struct Bitfield {
                            11062 ; 102  |    unsigned int B0  :1;
                            11063 ; 103  |    unsigned int B1  :1;
                            11064 ; 104  |    unsigned int B2  :1;
                            11065 ; 105  |    unsigned int B3  :1;
                            11066 ; 106  |    unsigned int B4  :1;
                            11067 ; 107  |    unsigned int B5  :1;
                            11068 ; 108  |    unsigned int B6  :1;
                            11069 ; 109  |    unsigned int B7  :1;
                            11070 ; 110  |    unsigned int B8  :1;
                            11071 ; 111  |    unsigned int B9  :1;
                            11072 ; 112  |    unsigned int B10 :1;
                            11073 ; 113  |    unsigned int B11 :1;
                            11074 ; 114  |    unsigned int B12 :1;
                            11075 ; 115  |    unsigned int B13 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11076 ; 116  |    unsigned int B14 :1;
                            11077 ; 117  |    unsigned int B15 :1;
                            11078 ; 118  |    unsigned int B16 :1;
                            11079 ; 119  |    unsigned int B17 :1;
                            11080 ; 120  |    unsigned int B18 :1;
                            11081 ; 121  |    unsigned int B19 :1;
                            11082 ; 122  |    unsigned int B20 :1;
                            11083 ; 123  |    unsigned int B21 :1;
                            11084 ; 124  |    unsigned int B22 :1;
                            11085 ; 125  |    unsigned int B23 :1;
                            11086 ; 126  |};
                            11087 ; 127  |
                            11088 ; 128  |union BitInt {
                            11089 ; 129  |        struct Bitfield B;
                            11090 ; 130  |        int        I;
                            11091 ; 131  |};
                            11092 ; 132  |
                            11093 ; 133  |#define MAX_MSG_LENGTH 10
                            11094 ; 134  |struct CMessage
                            11095 ; 135  |{
                            11096 ; 136  |        unsigned int m_uLength;
                            11097 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11098 ; 138  |};
                            11099 ; 139  |
                            11100 ; 140  |typedef struct {
                            11101 ; 141  |    WORD m_wLength;
                            11102 ; 142  |    WORD m_wMessage;
                            11103 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11104 ; 144  |} Message;
                            11105 ; 145  |
                            11106 ; 146  |struct MessageQueueDescriptor
                            11107 ; 147  |{
                            11108 ; 148  |        int *m_pBase;
                            11109 ; 149  |        int m_iModulo;
                            11110 ; 150  |        int m_iSize;
                            11111 ; 151  |        int *m_pHead;
                            11112 ; 152  |        int *m_pTail;
                            11113 ; 153  |};
                            11114 ; 154  |
                            11115 ; 155  |struct ModuleEntry
                            11116 ; 156  |{
                            11117 ; 157  |    int m_iSignaledEventMask;
                            11118 ; 158  |    int m_iWaitEventMask;
                            11119 ; 159  |    int m_iResourceOfCode;
                            11120 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11121 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11122 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11123 ; 163  |    int m_uTimeOutHigh;
                            11124 ; 164  |    int m_uTimeOutLow;
                            11125 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11126 ; 166  |};
                            11127 ; 167  |
                            11128 ; 168  |union WaitMask{
                            11129 ; 169  |    struct B{
                            11130 ; 170  |        unsigned int m_bNone     :1;
                            11131 ; 171  |        unsigned int m_bMessage  :1;
                            11132 ; 172  |        unsigned int m_bTimer    :1;
                            11133 ; 173  |        unsigned int m_bButton   :1;
                            11134 ; 174  |    } B;
                            11135 ; 175  |    int I;
                            11136 ; 176  |} ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11137 ; 177  |
                            11138 ; 178  |
                            11139 ; 179  |struct Button {
                            11140 ; 180  |        WORD wButtonEvent;
                            11141 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11142 ; 182  |};
                            11143 ; 183  |
                            11144 ; 184  |struct Message {
                            11145 ; 185  |        WORD wMsgLength;
                            11146 ; 186  |        WORD wMsgCommand;
                            11147 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11148 ; 188  |};
                            11149 ; 189  |
                            11150 ; 190  |union EventTypes {
                            11151 ; 191  |        struct CMessage msg;
                            11152 ; 192  |        struct Button Button ;
                            11153 ; 193  |        struct Message Message;
                            11154 ; 194  |};
                            11155 ; 195  |
                            11156 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11157 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11158 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11159 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11160 ; 200  |
                            11161 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11162 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11163 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11164 ; 204  |
                            11165 ; 205  |#if DEBUG
                            11166 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11167 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11168 ; 208  |#else 
                            11169 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11170 ; 210  |#define DebugBuildAssert(x)    
                            11171 ; 211  |#endif
                            11172 ; 212  |
                            11173 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11174 ; 214  |//  #pragma asm
                            11175 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11176 ; 216  |//  #pragma endasm
                            11177 ; 217  |
                            11178 ; 218  |
                            11179 ; 219  |#ifdef COLOR_262K
                            11180 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11181 ; 221  |#elif defined(COLOR_65K)
                            11182 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11183 ; 223  |#else
                            11184 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11185 ; 225  |#endif
                            11186 ; 226  |    
                            11187 ; 227  |#endif // #ifndef _TYPES_H
                            11188 
                            11190 
                            11191 ; 31   |
                            11192 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11193 ; 33   |//   USB2.0 STMP Registers 
                            11194 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11195 ; 35   |#define HW_USB_BASEADDR (0xF200)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11196 ; 36   |
                            11197 ; 37   |
                            11198 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11199 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11200 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11201 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11202 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11203 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11204 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11205 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11206 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11207 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11208 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11209 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11210 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11211 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11212 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11213 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11214 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11215 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11216 ; 56   |
                            11217 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11218 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11219 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11220 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11221 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11222 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11223 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11224 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11225 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11226 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11227 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11228 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11229 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11230 ; 70   |
                            11231 ; 71   |
                            11232 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11233 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11234 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11235 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11236 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11237 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11238 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11239 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            11240 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11241 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11242 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11243 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11244 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11245 ; 85   |
                            11246 ; 86   |typedef union               
                            11247 ; 87   |{
                            11248 ; 88   |    struct {
                            11249 ; 89   |        int USBEN          :1;
                            11250 ; 90   |        int WAKEUPIRQ      :1;
                            11251 ; 91   |        int WAKEUPIE       :1;
                            11252 ; 92   |        int VBUSCXIRQ      :1;
                            11253 ; 93   |        int VBUSCXIE       :1;
                            11254 ; 94   |        int VBUSDISCXIRQ   :1;
                            11255 ; 95   |        int VBUSDISCXIE    :1;
                            11256 ; 96   |        int CLKOFF         :1;
                            11257 ; 97   |        int SUSP           :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11258 ; 98   |        int SUSPF          :1;
                            11259 ; 99   |        int UTMITST        :1;
                            11260 ; 100  |        int ARCCONNECT     :1;
                            11261 ; 101  |        int PLUGGEDIN_EN   :1;
                            11262 ; 102  |        int PLUGGEDIN      :1;
                            11263 ; 103  |        int                :8;
                            11264 ; 104  |        int HOSTDISCONNECT :1;
                            11265 ; 105  |        int VBUSSENSE      :1;
                            11266 ; 106  |    } B;
                            11267 ; 107  |    int I;
                            11268 ; 108  |} usbcsr_type;
                            11269 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            11270 ; 110  |
                            11271 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11272 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11273 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11274 ; 114  |
                            11275 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11276 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11277 ; 117  |
                            11278 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            11279 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11280 ; 120  |
                            11281 ; 121  |typedef union               
                            11282 ; 122  |{
                            11283 ; 123  |    struct {
                            11284 ; 124  |        int ADD            :16;
                            11285 ; 125  |        int MEM            :2;
                            11286 ; 126  |        int                :6;
                            11287 ; 127  |    } B;
                            11288 ; 128  |    int I;
                            11289 ; 129  |} usbdmaoff_type;
                            11290 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11291 ; 131  |
                            11292 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11293 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11294 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11295 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11296 ; 136  |
                            11297 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11298 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11299 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11300 ; 140  |
                            11301 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11302 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11303 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11304 ; 144  |
                            11305 ; 145  |typedef union               
                            11306 ; 146  |{
                            11307 ; 147  |    struct {
                            11308 ; 148  |        int ADD            :9;
                            11309 ; 149  |        int                :7;
                            11310 ; 150  |        int RWB            :1;
                            11311 ; 151  |        int                :14;
                            11312 ; 152  |        int KICK           :1;
                            11313 ; 153  |    } B;
                            11314 ; 154  |    int I;
                            11315 ; 155  |} usbarcaccess_type;
                            11316 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11317 ; 157  |
                            11318 ; 158  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11319 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11320 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11321 ; 161  |
                            11322 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11323 ; 163  |
                            11324 ; 164  |typedef union               
                            11325 ; 165  |{
                            11326 ; 166  |    struct {
                            11327 ; 167  |        int DATA           :16;
                            11328 ; 168  |        int                :8;
                            11329 ; 169  |    } B;
                            11330 ; 170  |    int I;
                            11331 ; 171  |} usbarcdatalow_type;
                            11332 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            11333 ; 173  |
                            11334 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11335 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11336 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11337 ; 177  |
                            11338 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11339 ; 179  |
                            11340 ; 180  |typedef union               
                            11341 ; 181  |{
                            11342 ; 182  |    struct {
                            11343 ; 183  |        int DATA           :16;
                            11344 ; 184  |        int                :8;
                            11345 ; 185  |    } B;
                            11346 ; 186  |    int I;
                            11347 ; 187  |} usbarcdatahigh_type;
                            11348 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            11349 ; 189  |
                            11350 ; 190  |
                            11351 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11352 ; 192  |//   USB2.0 ARC Registers 
                            11353 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11354 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11355 ; 195  |
                            11356 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11357 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11358 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11359 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11360 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11361 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11362 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11363 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11364 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11365 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11366 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11367 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11368 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11369 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11370 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11371 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11372 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11373 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11374 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11375 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11376 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11377 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11378 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11379 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11380 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11381 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11382 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11383 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11384 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11385 ; 225  |
                            11386 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11387 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11388 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11389 ; 229  |
                            11390 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11391 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11392 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11393 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11394 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11395 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11396 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11397 ; 237  |
                            11398 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11399 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11400 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11401 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11402 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11403 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11404 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11405 ; 245  |
                            11406 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11407 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11408 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11409 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11410 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11411 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11412 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11413 ; 253  |
                            11414 ; 254  |typedef union               
                            11415 ; 255  |{
                            11416 ; 256  |    struct {
                            11417 ; 257  |        int N_PORTS         :4;
                            11418 ; 258  |        int PPC             :1;
                            11419 ; 259  |        int                 :3;
                            11420 ; 260  |        int N_PCC           :4;
                            11421 ; 261  |        int N_CC            :4;
                            11422 ; 262  |        int PI              :1;
                            11423 ; 263  |        int                 :3;
                            11424 ; 264  |        int N_PTT           :4;
                            11425 ; 265  |        int N_TT            :4;
                            11426 ; 266  |        int                 :20;
                            11427 ; 267  |    } B;
                            11428 ; 268  |    DWORD I;
                            11429 ; 269  |} hcsparams_type;
                            11430 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11431 ; 271  |
                            11432 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11433 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11434 ; 274  |
                            11435 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11436 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11437 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11438 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11439 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11440 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11441 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11442 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11443 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11444 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11445 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11446 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11447 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11448 ; 288  |
                            11449 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11450 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11451 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11452 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11453 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11454 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11455 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11456 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11457 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11458 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11459 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11460 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11461 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11462 ; 302  |
                            11463 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11464 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11465 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11466 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11467 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11468 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11469 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11470 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11471 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11472 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11473 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11474 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11475 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11476 ; 316  |
                            11477 ; 317  |typedef union               
                            11478 ; 318  |{
                            11479 ; 319  |    struct {
                            11480 ; 320  |        int RS              :1;
                            11481 ; 321  |        int RST             :1;
                            11482 ; 322  |        int FS0             :1;
                            11483 ; 323  |        int FS1             :1;
                            11484 ; 324  |        int PSE             :1;
                            11485 ; 325  |        int ASE             :1;
                            11486 ; 326  |        int IAA             :1;
                            11487 ; 327  |        int LR              :1;
                            11488 ; 328  |        int ASP0            :1;
                            11489 ; 329  |        int ASP1            :1;
                            11490 ; 330  |        int                 :1;
                            11491 ; 331  |        int ASPE            :1;
                            11492 ; 332  |        int                 :3;
                            11493 ; 333  |        int FS2             :1;
                            11494 ; 334  |        int ITC             :8;
                            11495 ; 335  |        int                 :24;
                            11496 ; 336  |    } B;
                            11497 ; 337  |    DWORD I;
                            11498 ; 338  |} usbcmd_type;
                            11499 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11500 ; 340  |
                            11501 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11502 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11503 ; 343  |
                            11504 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11505 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11506 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11507 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11508 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11509 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11510 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11511 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11512 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11513 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11514 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11515 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11516 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11517 ; 357  |
                            11518 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11519 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11520 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11521 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11522 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11523 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11524 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11525 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11526 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11527 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11528 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11529 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11530 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11531 ; 371  |
                            11532 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11533 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11534 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11535 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11536 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11537 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11538 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11539 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11540 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11541 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11542 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11543 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11544 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11545 ; 385  |
                            11546 ; 386  |
                            11547 ; 387  |typedef union               
                            11548 ; 388  |{
                            11549 ; 389  |    struct {
                            11550 ; 390  |        int UI              :1;
                            11551 ; 391  |        int UEI             :1;
                            11552 ; 392  |        int PCI             :1;
                            11553 ; 393  |        int FRI             :1;
                            11554 ; 394  |        int SEI             :1;
                            11555 ; 395  |        int AAI             :1;
                            11556 ; 396  |        int URI             :1;
                            11557 ; 397  |        int STI             :1;
                            11558 ; 398  |        int SLI             :1;
                            11559 ; 399  |        int                 :3;
                            11560 ; 400  |        int HCH             :1;
                            11561 ; 401  |        int RCL             :1;
                            11562 ; 402  |        int PS              :1;
                            11563 ; 403  |        int AS              :1;
                            11564 ; 404  |        int                 :24;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11565 ; 405  |    } B;
                            11566 ; 406  |    DWORD I;
                            11567 ; 407  |} usbsts_type;
                            11568 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11569 ; 409  |
                            11570 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11571 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11572 ; 412  |
                            11573 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11574 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11575 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11576 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11577 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11578 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11579 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11580 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11581 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11582 ; 422  |
                            11583 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11584 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11585 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11586 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11587 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11588 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11589 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11590 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11591 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11592 ; 432  |
                            11593 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11594 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11595 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11596 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11597 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11598 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11599 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11600 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11601 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11602 ; 442  |
                            11603 ; 443  |
                            11604 ; 444  |typedef union               
                            11605 ; 445  |{
                            11606 ; 446  |    struct {
                            11607 ; 447  |        int UE              :1;
                            11608 ; 448  |        int UEE             :1;
                            11609 ; 449  |        int PCE             :1;
                            11610 ; 450  |        int FRE             :1;
                            11611 ; 451  |        int SEE             :1;
                            11612 ; 452  |        int AAE             :1;
                            11613 ; 453  |        int URE             :1;
                            11614 ; 454  |        int STE             :1;
                            11615 ; 455  |        int SLE             :1;
                            11616 ; 456  |        int                 :39;
                            11617 ; 457  |    } B;
                            11618 ; 458  |    DWORD I;
                            11619 ; 459  |} usbintr_type;
                            11620 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11621 ; 461  |
                            11622 ; 462  |
                            11623 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11624 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11625 ; 465  |
                            11626 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11627 ; 467  |
                            11628 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11629 ; 469  |
                            11630 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11631 ; 471  |
                            11632 ; 472  |typedef union               
                            11633 ; 473  |{
                            11634 ; 474  |    struct {
                            11635 ; 475  |        int                 :25;
                            11636 ; 476  |        int ADD             :7;
                            11637 ; 477  |        int                 :16;
                            11638 ; 478  |    } B;
                            11639 ; 479  |    DWORD I;
                            11640 ; 480  |} devaddr_type;
                            11641 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11642 ; 482  |
                            11643 ; 483  |
                            11644 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11645 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11646 ; 486  |
                            11647 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11648 ; 488  |
                            11649 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11650 ; 490  |
                            11651 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11652 ; 492  |
                            11653 ; 493  |typedef union               
                            11654 ; 494  |{
                            11655 ; 495  |    struct {
                            11656 ; 496  |        int                 :10;
                            11657 ; 497  |        int ADD             :22;
                            11658 ; 498  |        int                 :16;
                            11659 ; 499  |    } B;
                            11660 ; 500  |    DWORD I;
                            11661 ; 501  |} endptlistaddr_type;
                            11662 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            11663 ; 503  |
                            11664 ; 504  |
                            11665 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11666 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11667 ; 507  |
                            11668 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11669 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11670 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11671 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11672 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11673 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11674 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11675 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11676 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11677 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11678 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11679 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11680 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11681 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11682 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11683 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11684 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11685 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11686 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11687 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11688 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11689 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11690 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11691 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11692 ; 532  |
                            11693 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11694 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11695 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11696 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11697 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11698 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11699 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11700 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11701 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11702 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11703 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11704 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11705 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11706 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11707 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11708 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11709 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11710 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11711 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11712 ; 552  |
                            11713 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11714 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11715 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11716 ; 556  |
                            11717 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11718 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11719 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11720 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11721 ; 561  |
                            11722 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11723 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11724 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11725 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11726 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11727 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11728 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11729 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11730 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11731 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11732 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11733 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11734 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11735 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11736 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11737 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11738 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11739 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11740 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11741 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11742 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11743 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11744 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11745 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11746 ; 586  |
                            11747 ; 587  |typedef union               
                            11748 ; 588  |{
                            11749 ; 589  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11750 ; 590  |        int CCS             :1;
                            11751 ; 591  |        int CSC             :1;
                            11752 ; 592  |        int PE              :1;
                            11753 ; 593  |        int PEC             :1;
                            11754 ; 594  |        int OCA             :1;
                            11755 ; 595  |        int OCC             :1;
                            11756 ; 596  |        int FPR             :1;
                            11757 ; 597  |        int SUSP            :1;
                            11758 ; 598  |        int PR              :1;
                            11759 ; 599  |        int HSP             :1;
                            11760 ; 600  |        int LS              :2;
                            11761 ; 601  |        int PP              :1;
                            11762 ; 602  |        int PO              :1;
                            11763 ; 603  |        int PIC             :2;
                            11764 ; 604  |        int PTC             :4;
                            11765 ; 605  |        int WKCN            :1;
                            11766 ; 606  |        int WKDS            :1;
                            11767 ; 607  |        int WKOC            :1;
                            11768 ; 608  |        int PHCD            :1;
                            11769 ; 609  |        int PFSC            :1;
                            11770 ; 610  |        int                 :1;
                            11771 ; 611  |        int PSPD            :2;
                            11772 ; 612  |        int                 :1;
                            11773 ; 613  |        int PTW             :1;
                            11774 ; 614  |        int STS             :1;
                            11775 ; 615  |        int PTS             :1;
                            11776 ; 616  |        int                 :16;
                            11777 ; 617  |    } B;
                            11778 ; 618  |    DWORD I;
                            11779 ; 619  |} portsc1_type;
                            11780 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11781 ; 621  |
                            11782 ; 622  |
                            11783 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11784 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11785 ; 625  |
                            11786 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11787 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11788 ; 628  |
                            11789 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11790 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11791 ; 631  |
                            11792 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11793 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11794 ; 634  |
                            11795 ; 635  |typedef union               
                            11796 ; 636  |{
                            11797 ; 637  |    struct {
                            11798 ; 638  |        int CM              :2;
                            11799 ; 639  |        int ES              :1;
                            11800 ; 640  |        int                 :46;
                            11801 ; 641  |    } B;
                            11802 ; 642  |    DWORD I;
                            11803 ; 643  |} usbmode_type;
                            11804 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11805 ; 645  |
                            11806 ; 646  |
                            11807 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11808 ; 648  |//  The following endpoint equates are common for the following registers
                            11809 ; 649  |
                            11810 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11811 ; 651  |#define ENDPOINT1_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11812 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11813 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11814 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11815 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11816 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11817 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11818 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11819 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11820 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11821 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11822 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11823 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11824 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11825 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11826 ; 666  |
                            11827 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11828 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11829 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11830 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11831 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11832 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11833 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11834 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11835 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11836 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11837 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11838 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11839 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11840 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11841 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11842 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11843 ; 683  |
                            11844 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11845 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11846 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11847 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11848 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11849 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11850 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11851 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11852 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11853 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11854 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11855 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11856 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11857 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11858 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11859 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11860 ; 700  |
                            11861 ; 701  |typedef union               
                            11862 ; 702  |{
                            11863 ; 703  |    struct {
                            11864 ; 704  |        int EP0              :1;
                            11865 ; 705  |        int EP1              :1;
                            11866 ; 706  |        int EP2              :1;
                            11867 ; 707  |        int EP3              :1;
                            11868 ; 708  |        int EP4              :1;
                            11869 ; 709  |        int EP5              :1;
                            11870 ; 710  |        int EP6              :1;
                            11871 ; 711  |        int EP7              :1;
                            11872 ; 712  |        int EP8              :1;
                            11873 ; 713  |        int EP9              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11874 ; 714  |        int EP10             :1;
                            11875 ; 715  |        int EP11             :1;
                            11876 ; 716  |        int EP12             :1;
                            11877 ; 717  |        int EP13             :1;
                            11878 ; 718  |        int EP14             :1;
                            11879 ; 719  |        int EP15             :1;
                            11880 ; 720  |        int                  :32;
                            11881 ; 721  |    } B;
                            11882 ; 722  |    DWORD I;
                            11883 ; 723  |} endpsetupstat_type;
                            11884 ; 724  |
                            11885 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            11886 ; 726  |
                            11887 ; 727  |typedef union               
                            11888 ; 728  |{
                            11889 ; 729  |    struct {
                            11890 ; 730  |        int EP0              :1;
                            11891 ; 731  |        int EP1              :1;
                            11892 ; 732  |        int EP2              :1;
                            11893 ; 733  |        int EP3              :1;
                            11894 ; 734  |        int EP4              :1;
                            11895 ; 735  |        int EP5              :1;
                            11896 ; 736  |        int EP6              :1;
                            11897 ; 737  |        int EP7              :1;
                            11898 ; 738  |        int EP8              :1;
                            11899 ; 739  |        int EP9              :1;
                            11900 ; 740  |        int EP10             :1;
                            11901 ; 741  |        int EP11             :1;
                            11902 ; 742  |        int EP12             :1;
                            11903 ; 743  |        int EP13             :1;
                            11904 ; 744  |        int EP14             :1;
                            11905 ; 745  |        int EP15             :1;
                            11906 ; 746  |        int                  :8;
                            11907 ; 747  |    } B;
                            11908 ; 748  |    WORD I;
                            11909 ; 749  |} endpt_type;
                            11910 
                            11948 
                            11949 ; 750  |
                            11950 ; 751  |typedef union
                            11951 ; 752  |{
                            11952 ; 753  |   struct {
                            11953 ; 754  |       endpt_type  RX;
                            11954 ; 755  |       endpt_type  TX;
                            11955 ; 756  |   } W;
                            11956 ; 757  |   DWORD DW;
                            11957 ; 758  |} endptrxtx_type;
                            11958 ; 759  |
                            11959 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            11960 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            11961 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            11962 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            11963 ; 764  |
                            11964 ; 765  |
                            11965 ; 766  |
                            11966 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11967 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11968 ; 769  |
                            11969 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11970 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11971 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11972 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11973 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11974 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11975 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11976 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11977 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11978 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11979 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11980 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11981 ; 782  |
                            11982 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11983 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11984 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11985 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11986 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11987 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11988 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11989 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11990 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11991 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11992 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11993 ; 794  |
                            11994 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11995 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11996 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11997 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11998 ; 799  |
                            11999 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            12000 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            12001 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            12002 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            12003 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            12004 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            12005 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            12006 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            12007 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            12008 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            12009 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            12010 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            12011 ; 812  |
                            12012 ; 813  |
                            12013 ; 814  |typedef union               
                            12014 ; 815  |{
                            12015 ; 816  |    struct {
                            12016 ; 817  |        int RXS             :1;
                            12017 ; 818  |        int RXD             :1;
                            12018 ; 819  |        int RXT             :2;
                            12019 ; 820  |        int                 :1;
                            12020 ; 821  |        int RXI             :1;
                            12021 ; 822  |        int RXR             :1;
                            12022 ; 823  |        int RXE             :1;
                            12023 ; 824  |        int                 :8;
                            12024 ; 825  |        int TXS             :1;
                            12025 ; 826  |        int TXD             :1;
                            12026 ; 827  |        int TXT             :2;
                            12027 ; 828  |        int                 :1;
                            12028 ; 829  |        int TXI             :1;
                            12029 ; 830  |        int TXR             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12030 ; 831  |        int TXE             :1;
                            12031 ; 832  |        int                 :24;
                            12032 ; 833  |    } B;
                            12033 ; 834  |    DWORD I;
                            12034 ; 835  |} endptctrl_type;
                            12035 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            12036 ; 837  |
                            12037 ; 838  |#endif
                            12038 ; 839  |
                            12039 ; 840  |
                            12040 
                            12042 
                            12043 ; 37   |#include "regsusb20phy.h"
                            12044 
                            12046 
                            12047 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12048 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12049 ; 3    |//;  File        : regsusbphy.inc
                            12050 ; 4    |//;  Description : USB20 PHY Register definition
                            12051 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12052 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12053 ; 7    |
                            12054 ; 8    |// The following naming conventions are followed in this file.
                            12055 ; 9    |// All registers are named using the format...
                            12056 ; 10   |//     HW_<module>_<regname>
                            12057 ; 11   |// where <module> is the module name which can be any of the following...
                            12058 ; 12   |//     USB20
                            12059 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12060 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12061 ; 15   |// that module)
                            12062 ; 16   |// <regname> is the specific register within that module
                            12063 ; 17   |// We also define the following...
                            12064 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12065 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12066 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12067 ; 21   |// which does something else, and
                            12068 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12069 ; 23   |// which does something else.
                            12070 ; 24   |// Other rules
                            12071 ; 25   |//     All caps
                            12072 ; 26   |//     Numeric identifiers start at 0
                            12073 ; 27   |
                            12074 ; 28   |#if !(defined(regsusbphyinc))
                            12075 ; 29   |#define regsusbphyinc 1
                            12076 ; 30   |
                            12077 ; 31   |#include "types.h"
                            12078 
                            12080 
                            12081 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12082 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12083 ; 3    |//
                            12084 ; 4    |// Filename: types.h
                            12085 ; 5    |// Description: Standard data types
                            12086 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12087 ; 7    |
                            12088 ; 8    |#ifndef _TYPES_H
                            12089 ; 9    |#define _TYPES_H
                            12090 ; 10   |
                            12091 ; 11   |// TODO:  move this outta here!
                            12092 ; 12   |#if !defined(NOERROR)
                            12093 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12094 ; 14   |#define SUCCESS 0
                            12095 ; 15   |#endif 
                            12096 ; 16   |#if !defined(SUCCESS)
                            12097 ; 17   |#define SUCCESS  0
                            12098 ; 18   |#endif
                            12099 ; 19   |#if !defined(ERROR)
                            12100 ; 20   |#define ERROR   -1
                            12101 ; 21   |#endif
                            12102 ; 22   |#if !defined(FALSE)
                            12103 ; 23   |#define FALSE 0
                            12104 ; 24   |#endif
                            12105 ; 25   |#if !defined(TRUE)
                            12106 ; 26   |#define TRUE  1
                            12107 ; 27   |#endif
                            12108 ; 28   |
                            12109 ; 29   |#if !defined(NULL)
                            12110 ; 30   |#define NULL 0
                            12111 ; 31   |#endif
                            12112 ; 32   |
                            12113 ; 33   |#define MAX_INT     0x7FFFFF
                            12114 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12115 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12116 ; 36   |#define MAX_ULONG   (-1) 
                            12117 ; 37   |
                            12118 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12119 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12120 ; 40   |
                            12121 ; 41   |
                            12122 ; 42   |#define BYTE    unsigned char       // btVarName
                            12123 ; 43   |#define CHAR    signed char         // cVarName
                            12124 ; 44   |#define USHORT  unsigned short      // usVarName
                            12125 ; 45   |#define SHORT   unsigned short      // sVarName
                            12126 ; 46   |#define WORD    unsigned int        // wVarName
                            12127 ; 47   |#define INT     signed int          // iVarName
                            12128 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12129 ; 49   |#define LONG    signed long         // lVarName
                            12130 ; 50   |#define BOOL    unsigned int        // bVarName
                            12131 ; 51   |#define FRACT   _fract              // frVarName
                            12132 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12133 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12134 ; 54   |#define FLOAT   float               // fVarName
                            12135 ; 55   |#define DBL     double              // dVarName
                            12136 ; 56   |#define ENUM    enum                // eVarName
                            12137 ; 57   |#define CMX     _complex            // cmxVarName
                            12138 ; 58   |typedef WORD UCS3;                   // 
                            12139 ; 59   |
                            12140 ; 60   |#define UINT16  unsigned short
                            12141 ; 61   |#define UINT8   unsigned char   
                            12142 ; 62   |#define UINT32  unsigned long
                            12143 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12144 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12145 ; 65   |#define WCHAR   UINT16
                            12146 ; 66   |
                            12147 ; 67   |//UINT128 is 16 bytes or 6 words
                            12148 ; 68   |typedef struct UINT128_3500 {   
                            12149 ; 69   |    int val[6];     
                            12150 ; 70   |} UINT128_3500;
                            12151 ; 71   |
                            12152 ; 72   |#define UINT128   UINT128_3500
                            12153 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12154 ; 74   |// Little endian word packed byte strings:   
                            12155 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12156 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12157 ; 77   |// Little endian word packed byte strings:   
                            12158 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12159 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12160 ; 80   |
                            12161 ; 81   |// Declare Memory Spaces To Use When Coding
                            12162 ; 82   |// A. Sector Buffers
                            12163 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12164 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12165 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12166 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12167 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12168 ; 88   |// B. Media DDI Memory
                            12169 ; 89   |#define MEDIA_DDI_MEM _Y
                            12170 ; 90   |
                            12171 ; 91   |
                            12172 ; 92   |
                            12173 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12174 ; 94   |// Examples of circular pointers:
                            12175 ; 95   |//    INT CIRC cpiVarName
                            12176 ; 96   |//    DWORD CIRC cpdwVarName
                            12177 ; 97   |
                            12178 ; 98   |#define RETCODE INT                 // rcVarName
                            12179 ; 99   |
                            12180 ; 100  |// generic bitfield structure
                            12181 ; 101  |struct Bitfield {
                            12182 ; 102  |    unsigned int B0  :1;
                            12183 ; 103  |    unsigned int B1  :1;
                            12184 ; 104  |    unsigned int B2  :1;
                            12185 ; 105  |    unsigned int B3  :1;
                            12186 ; 106  |    unsigned int B4  :1;
                            12187 ; 107  |    unsigned int B5  :1;
                            12188 ; 108  |    unsigned int B6  :1;
                            12189 ; 109  |    unsigned int B7  :1;
                            12190 ; 110  |    unsigned int B8  :1;
                            12191 ; 111  |    unsigned int B9  :1;
                            12192 ; 112  |    unsigned int B10 :1;
                            12193 ; 113  |    unsigned int B11 :1;
                            12194 ; 114  |    unsigned int B12 :1;
                            12195 ; 115  |    unsigned int B13 :1;
                            12196 ; 116  |    unsigned int B14 :1;
                            12197 ; 117  |    unsigned int B15 :1;
                            12198 ; 118  |    unsigned int B16 :1;
                            12199 ; 119  |    unsigned int B17 :1;
                            12200 ; 120  |    unsigned int B18 :1;
                            12201 ; 121  |    unsigned int B19 :1;
                            12202 ; 122  |    unsigned int B20 :1;
                            12203 ; 123  |    unsigned int B21 :1;
                            12204 ; 124  |    unsigned int B22 :1;
                            12205 ; 125  |    unsigned int B23 :1;
                            12206 ; 126  |};
                            12207 ; 127  |
                            12208 ; 128  |union BitInt {
                            12209 ; 129  |        struct Bitfield B;
                            12210 ; 130  |        int        I;
                            12211 ; 131  |};
                            12212 ; 132  |
                            12213 ; 133  |#define MAX_MSG_LENGTH 10
                            12214 ; 134  |struct CMessage
                            12215 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12216 ; 136  |        unsigned int m_uLength;
                            12217 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12218 ; 138  |};
                            12219 ; 139  |
                            12220 ; 140  |typedef struct {
                            12221 ; 141  |    WORD m_wLength;
                            12222 ; 142  |    WORD m_wMessage;
                            12223 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12224 ; 144  |} Message;
                            12225 ; 145  |
                            12226 ; 146  |struct MessageQueueDescriptor
                            12227 ; 147  |{
                            12228 ; 148  |        int *m_pBase;
                            12229 ; 149  |        int m_iModulo;
                            12230 ; 150  |        int m_iSize;
                            12231 ; 151  |        int *m_pHead;
                            12232 ; 152  |        int *m_pTail;
                            12233 ; 153  |};
                            12234 ; 154  |
                            12235 ; 155  |struct ModuleEntry
                            12236 ; 156  |{
                            12237 ; 157  |    int m_iSignaledEventMask;
                            12238 ; 158  |    int m_iWaitEventMask;
                            12239 ; 159  |    int m_iResourceOfCode;
                            12240 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12241 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12242 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12243 ; 163  |    int m_uTimeOutHigh;
                            12244 ; 164  |    int m_uTimeOutLow;
                            12245 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12246 ; 166  |};
                            12247 ; 167  |
                            12248 ; 168  |union WaitMask{
                            12249 ; 169  |    struct B{
                            12250 ; 170  |        unsigned int m_bNone     :1;
                            12251 ; 171  |        unsigned int m_bMessage  :1;
                            12252 ; 172  |        unsigned int m_bTimer    :1;
                            12253 ; 173  |        unsigned int m_bButton   :1;
                            12254 ; 174  |    } B;
                            12255 ; 175  |    int I;
                            12256 ; 176  |} ;
                            12257 ; 177  |
                            12258 ; 178  |
                            12259 ; 179  |struct Button {
                            12260 ; 180  |        WORD wButtonEvent;
                            12261 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12262 ; 182  |};
                            12263 ; 183  |
                            12264 ; 184  |struct Message {
                            12265 ; 185  |        WORD wMsgLength;
                            12266 ; 186  |        WORD wMsgCommand;
                            12267 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12268 ; 188  |};
                            12269 ; 189  |
                            12270 ; 190  |union EventTypes {
                            12271 ; 191  |        struct CMessage msg;
                            12272 ; 192  |        struct Button Button ;
                            12273 ; 193  |        struct Message Message;
                            12274 ; 194  |};
                            12275 ; 195  |
                            12276 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12277 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12278 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12279 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12280 ; 200  |
                            12281 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12282 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12283 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12284 ; 204  |
                            12285 ; 205  |#if DEBUG
                            12286 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12287 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12288 ; 208  |#else 
                            12289 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            12290 ; 210  |#define DebugBuildAssert(x)    
                            12291 ; 211  |#endif
                            12292 ; 212  |
                            12293 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12294 ; 214  |//  #pragma asm
                            12295 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12296 ; 216  |//  #pragma endasm
                            12297 ; 217  |
                            12298 ; 218  |
                            12299 ; 219  |#ifdef COLOR_262K
                            12300 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            12301 ; 221  |#elif defined(COLOR_65K)
                            12302 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            12303 ; 223  |#else
                            12304 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            12305 ; 225  |#endif
                            12306 ; 226  |    
                            12307 ; 227  |#endif // #ifndef _TYPES_H
                            12308 
                            12310 
                            12311 ; 32   |
                            12312 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12313 ; 34   |//   USB2.0 PHY STMP Registers 
                            12314 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12315 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12316 ; 37   |
                            12317 ; 38   |
                            12318 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12319 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12320 ; 41   |
                            12321 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12322 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12323 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12324 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12325 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12326 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12327 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12328 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12329 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12330 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12331 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12332 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12333 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12334 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12335 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12336 ; 57   |
                            12337 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12338 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12339 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12340 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12341 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12342 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12343 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12344 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12345 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12346 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12347 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12348 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12349 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12350 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12351 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12352 ; 73   |
                            12353 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12354 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12355 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12356 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12357 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12358 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12359 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12360 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12361 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12362 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12363 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12364 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12365 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12366 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12367 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12368 ; 89   |
                            12369 ; 90   |typedef union               
                            12370 ; 91   |{
                            12371 ; 92   |    struct {
                            12372 ; 93   |        int RSVD0          :5;
                            12373 ; 94   |        int TXDISCON1500   :1;
                            12374 ; 95   |        int PLLVCOPWD      :1;
                            12375 ; 96   |        int PLLVCPPWD      :1;
                            12376 ; 97   |        int RSVD1          :2;
                            12377 ; 98   |        int TXPWDFS        :1;
                            12378 ; 99   |        int TXPWDIBIAS     :1;
                            12379 ; 100  |        int TXPWDV2I       :1;
                            12380 ; 101  |        int TXPWDVBG       :1;
                            12381 ; 102  |        int TXPWDCOMP      :1;
                            12382 ; 103  |        int RSVD2          :1;
                            12383 ; 104  |        int RXPWDDISCONDET :1;
                            12384 ; 105  |        int RXPWDENV       :1;
                            12385 ; 106  |        int RXPWD1PT1      :1;
                            12386 ; 107  |        int RXPWDDIFF      :1;
                            12387 ; 108  |        int RXPWDRX        :1;
                            12388 ; 109  |        int RSVD3          :1;
                            12389 ; 110  |        int PWDIBIAS       :1;
                            12390 ; 111  |        int REGRESET       :1;
                            12391 ; 112  |    } B;
                            12392 ; 113  |    int I;
                            12393 ; 114  |} usbphypwd_type;
                            12394 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            12395 ; 116  |
                            12396 ; 117  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12397 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12398 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12399 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12400 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12401 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12402 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12403 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12404 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12405 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12406 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12407 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12408 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12409 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12410 ; 131  |
                            12411 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12412 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12413 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12414 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12415 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12416 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12417 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12418 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12419 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12420 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12421 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12422 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12423 ; 144  |
                            12424 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            12425 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            12426 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            12427 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            12428 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            12429 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                            12430 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            12431 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                            12432 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            12433 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            12434 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            12435 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            12436 ; 157  |
                            12437 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12438 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12439 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12440 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12441 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12442 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12443 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12444 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12445 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12446 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12447 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12448 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12449 ; 170  |
                            12450 ; 171  |typedef union               
                            12451 ; 172  |{
                            12452 ; 173  |    struct {
                            12453 ; 174  |        int TXCAL1500          :4;
                            12454 ; 175  |        int RSVD0              :1;
                            12455 ; 176  |        int TXENCAL1500        :1;
                            12456 ; 177  |        int TXHSXCVR           :1;
                            12457 ; 178  |        int TXCALIBRATE        :1;
                            12458 ; 179  |        int TXCAL45DN          :4;
                            12459 ; 180  |        int RSVD1              :1;
                            12460 ; 181  |        int TXENCAL45DN        :1;
                            12461 ; 182  |        int TXHSTERM           :1;
                            12462 ; 183  |        int TXSKEW             :1;
                            12463 ; 184  |        int TXCAL45DP          :4;
                            12464 ; 185  |        int RSVD2              :1;
                            12465 ; 186  |        int TXENCAL45DP        :1;
                            12466 ; 187  |        int TXFSHIZ            :1;
                            12467 ; 188  |        int TXCOMPOUT          :1;
                            12468 ; 189  |    } B;
                            12469 ; 190  |    int I;
                            12470 ; 191  |} usbphytx_type;
                            12471 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12472 ; 193  |
                            12473 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12474 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12475 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12476 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12477 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12478 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12479 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12480 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12481 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12482 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12483 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12484 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12485 ; 206  |
                            12486 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12487 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12488 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12489 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12490 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12491 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12492 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12493 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12494 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12495 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12496 ; 217  |
                            12497 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            12498 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            12499 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            12500 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            12501 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            12502 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12503 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            12504 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12505 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            12506 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12507 ; 228  |
                            12508 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12509 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12510 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12511 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12512 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12513 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12514 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12515 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12516 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12517 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12518 ; 239  |
                            12519 ; 240  |typedef union               
                            12520 ; 241  |{
                            12521 ; 242  |    struct {
                            12522 ; 243  |        int PLLV2ISEL        :4;
                            12523 ; 244  |        int RSVD0            :1;
                            12524 ; 245  |        int PLLCPDBLIP       :1;
                            12525 ; 246  |        int PLLVCOCLK2       :1;
                            12526 ; 247  |        int PLLVCOCLK24      :1;
                            12527 ; 248  |        int PLLCPNSEL        :4;
                            12528 ; 249  |        int PLLCLKDIVSEL     :4;
                            12529 ; 250  |        int RSVD1            :4;
                            12530 ; 251  |        int PLLPFDRST        :1;
                            12531 ; 252  |        int PLLCPSHORTLFR    :1;
                            12532 ; 253  |        int PLLVCOKSTART     :1;
                            12533 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12534 ; 255  |    } B;
                            12535 ; 256  |    int I;
                            12536 ; 257  |} usbphypll_type;
                            12537 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12538 ; 259  |
                            12539 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12540 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12541 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12542 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12543 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12544 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12545 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12546 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12547 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12548 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12549 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12550 ; 271  |
                            12551 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12552 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12553 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12554 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12555 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12556 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12557 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12558 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12559 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12560 ; 281  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12561 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12562 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            12563 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            12564 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            12565 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            12566 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12567 ; 288  |//              480Mhz/7 =68.57Mhz
                            12568 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12569 ; 290  |
                            12570 ; 291  |//              480Mhz/8 ~60Mhz
                            12571 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12572 ; 293  |
                            12573 ; 294  |//              480Mhz/9 =53.3Mhz
                            12574 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12575 ; 296  |
                            12576 ; 297  |//              480Mhz/10 =48Mhz
                            12577 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            12578 ; 299  |
                            12579 ; 300  |
                            12580 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            12581 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            12582 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            12583 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            12584 ; 305  |
                            12585 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12586 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12587 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12588 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12589 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12590 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            12591 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12592 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12593 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12594 ; 315  |
                            12595 ; 316  |typedef union               
                            12596 ; 317  |{
                            12597 ; 318  |    struct {
                            12598 ; 319  |     int ENVADJ               :4;
                            12599 ; 320  |     int DISCONADJ            :4;
                            12600 ; 321  |     int DEBUGMODE            :4;
                            12601 ; 322  |     int PLLLKTIMECTL         :4;
                            12602 ; 323  |     int PLLCKDIVCTL          :4;
                            12603 ; 324  |     int HOSTMODETEST         :1;
                            12604 ; 325  |     int FSCKSOURCESEL        :1;
                            12605 ; 326  |     int REGRXDBYPASS         :1;
                            12606 ; 327  |     int PLLLOCKED            :1;
                            12607 ; 328  |    } B;
                            12608 ; 329  |    int I;
                            12609 ; 330  |} usbphyrx_type;
                            12610 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12611 ; 332  |
                            12612 ; 333  |#endif
                            12613 ; 334  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12614 
                            12616 
                            12617 ; 38   |
                            12618 ; 39   |
                            12619 ; 40   |#endif // if (!@def(hwequ))
                            12620 ; 41   |
                            12621 
                            12623 
                            12624 ; 11   |#include "project.h"
                            12625 
                            12627 
                            12628 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            12629 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            12630 ; 3    |//  Filename: project.inc
                            12631 ; 4    |//  Description: 
                            12632 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            12633 ; 6    |
                            12634 ; 7    |#if (!defined(_PROJECT_INC))
                            12635 ; 8    |#define _PROJECT_INC 1
                            12636 ; 9    |
                            12637 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            12638 ; 11   |#include "hwequ.h"
                            12639 
                            12641 
                            12642 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            12643 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                            12644 ; 3    |//  File        : hwequ.inc
                            12645 ; 4    |//  Description : STMP Hardware Constants
                            12646 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            12647 ; 6    |
                            12648 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                            12649 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                            12650 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                            12651 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                            12652 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                            12653 ; 12   |
                            12654 ; 13   |#if (!defined(HWEQU_INC))
                            12655 ; 14   |#define HWEQU_INC 1
                            12656 ; 15   |
                            12657 ; 16   |#include "types.h"
                            12658 ; 17   |#include "regsclkctrl.h"
                            12659 ; 18   |#include "regscore.h"
                            12660 ; 19   |#include "regscodec.h"
                            12661 ; 20   |#include "regsdcdc.h"
                            12662 ; 21   |#include "regsemc.h"
                            12663 ; 22   |#include "regsgpio.h"
                            12664 ; 23   |#include "regsi2c.h"
                            12665 ; 24   |#include "regsi2s.h"
                            12666 ; 25   |#include "regsicoll.h"
                            12667 ; 26   |#include "regslradc.h"
                            12668 ; 27   |#include "regspwm.h"
                            12669 ; 28   |#include "regsrevision.h"
                            12670 ; 29   |#include "regsrtc.h"
                            12671 ; 30   |#include "regsspare.h"
                            12672 ; 31   |#include "regsspi.h"
                            12673 ; 32   |#include "regsswizzle.h"
                            12674 ; 33   |#include "regssdram.h"
                            12675 ; 34   |#include "regstb.h"
                            12676 ; 35   |#include "regstimer.h"
                            12677 ; 36   |#include "regsusb20.h"
                            12678 ; 37   |#include "regsusb20phy.h"
                            12679 ; 38   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12680 ; 39   |
                            12681 ; 40   |#endif // if (!@def(hwequ))
                            12682 ; 41   |
                            12683 
                            12685 
                            12686 ; 12   |#else 
                            12687 ; 13   |//include "regscodec.inc"
                            12688 ; 14   |#endif
                            12689 ; 15   |
                            12690 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            12691 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            12692 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            12693 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            12694 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            12695 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            12696 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            12697 ; 23   |
                            12698 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            12699 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            12700 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            12701 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            12702 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            12703 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            12704 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            12705 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            12706 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            12707 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            12708 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            12709 ; 35   |
                            12710 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            12711 ; 37   |// MEDIA DEFINITIONS
                            12712 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            12713 ; 39   |
                            12714 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            12715 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            12716 ; 42   |#if defined(NAND1)
                            12717 ; 43   |#define SM_INTERNAL_CHIPS 1
                            12718 ; 44   |#else 
                            12719 ; 45   |#if defined(NAND2)
                            12720 ; 46   |#define SM_INTERNAL_CHIPS 2
                            12721 ; 47   |#else 
                            12722 ; 48   |#if defined(NAND3)
                            12723 ; 49   |#define SM_INTERNAL_CHIPS 3
                            12724 ; 50   |#else 
                            12725 ; 51   |#if defined(NAND4)
                            12726 ; 52   |#define SM_INTERNAL_CHIPS 4
                            12727 ; 53   |#else 
                            12728 ; 54   |#define SM_INTERNAL_CHIPS 1
                            12729 ; 55   |#endif
                            12730 ; 56   |#endif
                            12731 ; 57   |#endif
                            12732 ; 58   |#endif
                            12733 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12734 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            12735 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            12736 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            12737 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            12738 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            12739 ; 65   |//*** comment out if active high ****
                            12740 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            12741 ; 67   |
                            12742 ; 68   |#if defined(SMEDIA)
                            12743 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            12744 ; 70   |#define NUM_SM_EXTERNAL 1
                            12745 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12746 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            12747 ; 73   |#else 
                            12748 ; 74   |#if defined(MMC)
                            12749 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            12750 ; 76   |#define NUM_SM_EXTERNAL 0
                            12751 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            12752 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            12753 ; 79   |#else 
                            12754 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            12755 ; 81   |#define NUM_SM_EXTERNAL 0
                            12756 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12757 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            12758 ; 84   |#endif
                            12759 ; 85   |#endif
                            12760 ; 86   |
                            12761 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            12762 ; 88   |// Mass Storage Class definitions
                            12763 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            12764 ; 90   |// Set to 0 if Composite Device build is desired.    
                            12765 ; 91   |#define MULTI_LUN_BUILD 1   
                            12766 ; 92   |
                            12767 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            12768 ; 94   |//  SCSI
                            12769 ; 95   |#if (MULTI_LUN_BUILD==0)
                            12770 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12771 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            12772 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12773 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            12774 ; 100  |  #else
                            12775 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            12776 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12777 ; 103  |  #endif
                            12778 ; 104  |#else
                            12779 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            12780 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12781 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            12782 ; 108  |  #else
                            12783 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            12784 ; 110  |  #endif
                            12785 ; 111  |#endif
                            12786 ; 112  |
                            12787 ; 113  |
                            12788 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            12789 ; 115  |
                            12790 ; 116  |
                            12791 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            12792 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            12793 ; 119  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12794 ; 120  |#ifdef MMC
                            12795 ; 121  |#ifdef MTP_BUILD
                            12796 ; 122  |// --------------------
                            12797 ; 123  |// MTP and MMC
                            12798 ; 124  |// --------------------
                            12799 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            12800 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            12801 ; 127  |#else  // ifndef MTP_BUILD
                            12802 ; 128  |#ifdef STMP_BUILD_PLAYER
                            12803 ; 129  |// --------------------
                            12804 ; 130  |// Player and MMC
                            12805 ; 131  |// --------------------
                            12806 ; 132  |#else
                            12807 ; 133  |// --------------------
                            12808 ; 134  |// USBMSC and MMC
                            12809 ; 135  |// --------------------
                            12810 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            12811 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            12812 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            12813 ; 139  |#endif // ifdef MTP_BUILD
                            12814 ; 140  |#else  // ifndef MMC
                            12815 ; 141  |#ifdef MTP_BUILD
                            12816 ; 142  |// --------------------
                            12817 ; 143  |// MTP and NAND only
                            12818 ; 144  |// --------------------
                            12819 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            12820 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            12821 ; 147  |#else  // ifndef MTP_BUILD
                            12822 ; 148  |#ifdef STMP_BUILD_PLAYER
                            12823 ; 149  |// --------------------
                            12824 ; 150  |// Player and NAND only
                            12825 ; 151  |// --------------------
                            12826 ; 152  |#else
                            12827 ; 153  |// --------------------
                            12828 ; 154  |// USBMSC and NAND only
                            12829 ; 155  |// --------------------
                            12830 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            12831 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            12832 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            12833 ; 159  |#endif // ifdef MTP_BUILD
                            12834 ; 160  |#endif // ifdef MMC 
                            12835 ; 161  |
                            12836 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            12837 ; 163  |#if (defined(MTP_BUILD))
                            12838 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            12839 ; 165  |
                            12840 ; 166  |////!
                            12841 ; 167  |////! This varible holds the watchdog count for the store flush.
                            12842 ; 168  |////!
                            12843 ; 169  |///
                            12844 ; 170  |#include <types.h>
                            12845 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            12846 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            12847 ; 173  |#endif
                            12848 ; 174  |
                            12849 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            12850 ; 176  |// These are needed here for Mass Storage Class
                            12851 ; 177  |// Needs to be cleaned up
                            12852 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            12853 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            12854 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            12855 ; 181  |#define SCRATCH_USER_X_SIZE 512
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12856 ; 182  |
                            12857 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            12858 ; 184  |
                            12859 ; 185  |#endif
                            12860 ; 186  |
                            12861 ; 187  |
                            12862 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            12863 ; 189  |// SmartMedia/NAND defs
                            12864 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12865 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            12866 ; 192  |
                            12867 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            12868 ; 194  |// Sysloadresources defs
                            12869 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12870 ; 196  |
                            12871 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            12872 ; 198  |// MMC defs
                            12873 ; 199  |#define MMC_MAX_PARTITIONS 1
                            12874 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            12875 ; 201  |
                            12876 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            12877 ; 203  |// SPI defs
                            12878 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            12879 ; 205  |
                            12880 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            12881 ; 207  |// Global media defs
                            12882 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            12883 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            12884 ; 210  |
                            12885 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            12886 ; 212  |// DO NOT CHANGE THESE!!!
                            12887 ; 213  |#define SM_MAX_PARTITIONS 4
                            12888 ; 214  |#define MAX_HANDLES 2
                            12889 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            12890 ; 216  |
                            12891 ; 217  |
                            12892 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            12893 ; 219  |// Battery LRADC Values 
                            12894 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            12895 ; 221  |// brownout trip point in mV (moved by RS)
                            12896 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            12897 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            12898 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            12899 ; 225  |//     audio recording to media.
                            12900 ; 226  |#define BATT_SAFETY_MARGIN 10
                            12901 ; 227  |
                            12902 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            12903 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            12904 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            12905 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            12906 ; 232  |
                            12907 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            12908 ; 234  |
                            12909 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            12910 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            12911 ; 237  |#if (!defined(CLCD))
                            12912 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            12913 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12914 ; 240  |#else 
                            12915 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            12916 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            12917 ; 243  |#endif
                            12918 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            12919 ; 245  |
                            12920 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            12921 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            12922 ; 248  |// See mp3 encoder overlay.
                            12923 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            12924 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            12925 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            12926 ; 252  |
                            12927 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            12928 ; 254  |// Voice recording filenames
                            12929 ; 255  |// number of digits in filename Vxxx.wav
                            12930 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            12931 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            12932 ; 258  |
                            12933 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            12934 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            12935 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            12936 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            12937 ; 263  |#if defined(DEVICE_3500)
                            12938 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            12939 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            12940 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            12941 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            12942 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12943 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            12944 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            12945 ; 271  |
                            12946 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            12947 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            12948 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            12949 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            12950 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            12951 ; 277  |
                            12952 ; 278  |#else 
                            12953 ; 279  |// STMP3410
                            12954 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            12955 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12956 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            12957 ; 283  |#endif
                            12958 ; 284  |
                            12959 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            12960 ; 286  |// Number of available soft timers
                            12961 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            12962 ; 288  |#if defined(SYNC_LYRICS)
                            12963 ; 289  |#define SOFT_TIMERS 10
                            12964 ; 290  |#else 
                            12965 ; 291  |#if defined(JPEG_DECODER)
                            12966 ; 292  |#define SOFT_TIMERS 10
                            12967 ; 293  |#else 
                            12968 ; 294  |#define SOFT_TIMERS 9
                            12969 ; 295  |#endif
                            12970 ; 296  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12971 ; 297  |
                            12972 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            12973 ; 299  |//  sizes
                            12974 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            12975 ; 301  |#if defined(MMC)
                            12976 ; 302  |#if defined(USE_PLAYLIST5)
                            12977 ; 303  |#define MENU_STACK_SIZE 1500
                            12978 ; 304  |#else 
                            12979 ; 305  |#define MENU_STACK_SIZE 1250
                            12980 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            12981 ; 307  |#else 
                            12982 ; 308  |#if defined(USE_PLAYLIST5)
                            12983 ; 309  |#define MENU_STACK_SIZE 1500
                            12984 ; 310  |#else 
                            12985 ; 311  |#define MENU_STACK_SIZE 1250
                            12986 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            12987 ; 313  |#endif //if @def('MMC')
                            12988 ; 314  |
                            12989 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            12990 ; 316  |// 
                            12991 ; 317  |#define STACK_L1_SIZE 750
                            12992 ; 318  |#define STACK_L2_SIZE 100
                            12993 ; 319  |#define STACK_L3_SIZE 160
                            12994 ; 320  |
                            12995 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            12996 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            12997 ; 323  |// is ok with switching code.
                            12998 ; 324  |#if defined(MTP_BUILD)
                            12999 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            13000 ; 326  |#endif
                            13001 ; 327  |
                            13002 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            13003 ; 329  |// maximum number of nested funclets 
                            13004 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            13005 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            13006 ; 332  |
                            13007 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            13008 ; 334  |//    LCD DEFINITIONS
                            13009 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            13010 ; 336  |
                            13011 ; 337  |#define SPACE_CHAR 0x000020          
                            13012 ; 338  |#define ZERO_CHAR 0x000030
                            13013 ; 339  |#define COLON_CHAR 0x00003A
                            13014 ; 340  |#define PERIOD_CHAR 0x00002E
                            13015 ; 341  |
                            13016 ; 342  |#if (defined(S6B33B0A_LCD))
                            13017 ; 343  |#define LCD_X_SIZE 128
                            13018 ; 344  |#define LCD_Y_SIZE 159
                            13019 ; 345  |#endif
                            13020 ; 346  |
                            13021 ; 347  |#if (defined(SED15XX_LCD))
                            13022 ; 348  |#define LCD_X_SIZE 128
                            13023 ; 349  |#define LCD_Y_SIZE 64
                            13024 ; 350  |#endif
                            13025 ; 351  |
                            13026 ; 352  |
                            13027 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            13028 ; 354  |//   Details on Customizing Contrast
                            13029 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            13030 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            13031 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13032 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            13033 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            13034 ; 360  |//   unless the ezact sequence is remembered.
                            13035 ; 361  |//   To find out what range your player supports: 
                            13036 ; 362  |//   change these equs to full range or comment out (full range is default)
                            13037 ; 363  |//;;;;;;
                            13038 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            13039 ; 365  |// recommended calibration using player -- uncomment 
                            13040 ; 366  |//;;;;;;
                            13041 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            13042 ; 368  |////////////////////////////
                            13043 ; 369  |#if (defined(DEMO_HW))
                            13044 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            13045 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            13046 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            13047 ; 373  |#else 
                            13048 ; 374  |
                            13049 ; 375  |#if (defined(S6B33B0A_LCD))
                            13050 ; 376  |#define LCD_MAX_CONTRAST 210
                            13051 ; 377  |#define LCD_MIN_CONTRAST 160    
                            13052 ; 378  |#endif
                            13053 ; 379  |
                            13054 ; 380  |#if (defined(SED15XX_LCD))
                            13055 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            13056 ; 382  |// Engineering board regs support range [17-37].
                            13057 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            13058 ; 384  |//   One default contrast range [24-42] works for both.
                            13059 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            13060 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            13061 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            13062 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            13063 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            13064 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            13065 ; 391  |
                            13066 ; 392  |#if (defined(NEWSHINGYIH))
                            13067 ; 393  |#define LCD_MAX_CONTRAST 250
                            13068 ; 394  |#define LCD_MIN_CONTRAST 0
                            13069 ; 395  |#else 
                            13070 ; 396  |//-----
                            13071 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            13072 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            13073 ; 399  |#define LCD_MAX_CONTRAST 250
                            13074 ; 400  |#define LCD_MIN_CONTRAST 0
                            13075 ; 401  |
                            13076 ; 402  |//=====
                            13077 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            13078 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            13079 ; 405  |//LCD_MAX_CONTRAST equ 42
                            13080 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            13081 ; 407  |
                            13082 ; 408  |#endif
                            13083 ; 409  |#endif
                            13084 ; 410  |
                            13085 ; 411  |#endif
                            13086 ; 412  |
                            13087 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            13088 ; 414  |// The default value of the lcd contrast in % of range
                            13089 ; 415  |//   the default value is used when no settings.dat is available
                            13090 ; 416  |//////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13091 ; 417  |
                            13092 ; 418  |#if (defined(S6B33B0A_LCD))
                            13093 ; 419  |// 60% of range is default value
                            13094 ; 420  |#define DEFAULT_CONTRAST 50 
                            13095 ; 421  |#endif
                            13096 ; 422  |
                            13097 ; 423  |#if (defined(SED15XX_LCD))
                            13098 ; 424  |// % of range is default value (was 60%)
                            13099 ; 425  |#define DEFAULT_CONTRAST 50 
                            13100 ; 426  |#endif
                            13101 ; 427  |
                            13102 ; 428  |
                            13103 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13104 ; 430  |// make lower when doing calibration
                            13105 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13106 ; 432  |
                            13107 ; 433  |
                            13108 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13109 ; 435  |// For FFWD and RWND
                            13110 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13111 ; 437  |#define SECONDS_TO_SKIP 1
                            13112 ; 438  |#define SECONDS_TO_SKIP1 3
                            13113 ; 439  |#define SECONDS_TO_SKIP2 6
                            13114 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13115 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13116 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13117 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13118 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13119 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13120 ; 446  |
                            13121 ; 447  |// For audible FFW/RWD
                            13122 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13123 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13124 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13125 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13126 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13127 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13128 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13129 ; 455  |#define LEVEL2_BOUNDARY 33 
                            13130 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13131 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13132 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13133 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13134 ; 460  |// Short Song Time, songs too short to play.
                            13135 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13136 ; 462  |
                            13137 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13138 ; 464  |// MP3 Sync Values
                            13139 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13140 ; 466  |// # bytes to look for sync before marking it bad
                            13141 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13142 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13143 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13144 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13145 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13146 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13147 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13148 ; 474  |
                            13149 ; 475  |
                            13150 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13151 ; 477  |//// Multi-Stage Volume Control Definitions
                            13152 ; 478  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13153 ; 479  |//// Use Multi-Stage Volume
                            13154 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13155 ; 481  |
                            13156 ; 482  |//// Master Volume definitions
                            13157 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13158 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13159 ; 485  |
                            13160 ; 486  |//// DAC-Mode definitions
                            13161 ; 487  |//// Adjusts 0dB point
                            13162 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13163 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13164 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            13165 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13166 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            13167 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            13168 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13169 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13170 ; 496  |
                            13171 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13172 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13173 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            13174 ; 500  |
                            13175 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            13176 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            13177 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13178 ; 504  |
                            13179 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            13180 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13181 ; 507  |
                            13182 ; 508  |
                            13183 ; 509  |//// Line In definitions (used for Line-In 1)
                            13184 ; 510  |//// 0dB point of the Line In
                            13185 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13186 ; 512  |//// Minimum volume of Line In
                            13187 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13188 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13189 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13190 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13191 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13192 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            13193 ; 519  |
                            13194 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13195 ; 521  |//// 0dB point of the Line In
                            13196 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13197 ; 523  |//// Minimum volume of Line In
                            13198 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13199 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13200 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13201 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13202 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13203 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13204 ; 530  |
                            13205 ; 531  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13206 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            13207 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13208 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13209 ; 535  |
                            13210 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13211 ; 537  |////
                            13212 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13213 ; 539  |////
                            13214 ; 540  |///
                            13215 ; 541  |#include <types.h>
                            13216 ; 542  |extern volatile WORD g_wActivityState;
                            13217 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13218 ; 544  |
                            13219 ; 545  |void _reentrant Init5VSense(void);
                            13220 ; 546  |void _reentrant ServiceDCDC(void);
                            13221 ; 547  |
                            13222 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13223 ; 549  |//// JPEG Thumbnail Mode Setting
                            13224 ; 550  |//// number of column in thumbnail mode
                            13225 ; 551  |#define THUMBNAIL_X 2           
                            13226 ; 552  |//// number of row in  thumbnail mode
                            13227 ; 553  |#define THUMBNAIL_Y 2           
                            13228 ; 554  |//// thumbnail boundary offset x
                            13229 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13230 ; 556  |//// thumbnail boundary offset y
                            13231 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13232 ; 558  |
                            13233 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13234 ; 560  |
                            13235 
                            13237 
                            13238 ; 12   |#include "FileSystem.h"
                            13239 
                            13241 
                            13242 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13243 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                            13244 ; 3    |//
                            13245 ; 4    |//  File        : FileSystem.h
                            13246 ; 5    |//  Description : Header File for File System
                            13247 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13248 ; 7    |
                            13249 ; 8    |#ifndef _FILESYSTEM_H
                            13250 ; 9    |#define _FILESYSTEM_H
                            13251 ; 10   |
                            13252 ; 11   |#include "types.h"
                            13253 
                            13255 
                            13256 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13257 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13258 ; 3    |//
                            13259 ; 4    |// Filename: types.h
                            13260 ; 5    |// Description: Standard data types
                            13261 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13262 ; 7    |
                            13263 ; 8    |#ifndef _TYPES_H
                            13264 ; 9    |#define _TYPES_H
                            13265 ; 10   |
                            13266 ; 11   |// TODO:  move this outta here!
                            13267 ; 12   |#if !defined(NOERROR)
                            13268 ; 13   |#define NOERROR 0
                            13269 ; 14   |#define SUCCESS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13270 ; 15   |#endif 
                            13271 ; 16   |#if !defined(SUCCESS)
                            13272 ; 17   |#define SUCCESS  0
                            13273 ; 18   |#endif
                            13274 ; 19   |#if !defined(ERROR)
                            13275 ; 20   |#define ERROR   -1
                            13276 ; 21   |#endif
                            13277 ; 22   |#if !defined(FALSE)
                            13278 ; 23   |#define FALSE 0
                            13279 ; 24   |#endif
                            13280 ; 25   |#if !defined(TRUE)
                            13281 ; 26   |#define TRUE  1
                            13282 ; 27   |#endif
                            13283 ; 28   |
                            13284 ; 29   |#if !defined(NULL)
                            13285 ; 30   |#define NULL 0
                            13286 ; 31   |#endif
                            13287 ; 32   |
                            13288 ; 33   |#define MAX_INT     0x7FFFFF
                            13289 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13290 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13291 ; 36   |#define MAX_ULONG   (-1) 
                            13292 ; 37   |
                            13293 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13294 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13295 ; 40   |
                            13296 ; 41   |
                            13297 ; 42   |#define BYTE    unsigned char       // btVarName
                            13298 ; 43   |#define CHAR    signed char         // cVarName
                            13299 ; 44   |#define USHORT  unsigned short      // usVarName
                            13300 ; 45   |#define SHORT   unsigned short      // sVarName
                            13301 ; 46   |#define WORD    unsigned int        // wVarName
                            13302 ; 47   |#define INT     signed int          // iVarName
                            13303 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13304 ; 49   |#define LONG    signed long         // lVarName
                            13305 ; 50   |#define BOOL    unsigned int        // bVarName
                            13306 ; 51   |#define FRACT   _fract              // frVarName
                            13307 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13308 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13309 ; 54   |#define FLOAT   float               // fVarName
                            13310 ; 55   |#define DBL     double              // dVarName
                            13311 ; 56   |#define ENUM    enum                // eVarName
                            13312 ; 57   |#define CMX     _complex            // cmxVarName
                            13313 ; 58   |typedef WORD UCS3;                   // 
                            13314 ; 59   |
                            13315 ; 60   |#define UINT16  unsigned short
                            13316 ; 61   |#define UINT8   unsigned char   
                            13317 ; 62   |#define UINT32  unsigned long
                            13318 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            13319 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            13320 ; 65   |#define WCHAR   UINT16
                            13321 ; 66   |
                            13322 ; 67   |//UINT128 is 16 bytes or 6 words
                            13323 ; 68   |typedef struct UINT128_3500 {   
                            13324 ; 69   |    int val[6];     
                            13325 ; 70   |} UINT128_3500;
                            13326 ; 71   |
                            13327 ; 72   |#define UINT128   UINT128_3500
                            13328 ; 73   |
                            13329 ; 74   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13330 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13331 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13332 ; 77   |// Little endian word packed byte strings:   
                            13333 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13334 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13335 ; 80   |
                            13336 ; 81   |// Declare Memory Spaces To Use When Coding
                            13337 ; 82   |// A. Sector Buffers
                            13338 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13339 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13340 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13341 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13342 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13343 ; 88   |// B. Media DDI Memory
                            13344 ; 89   |#define MEDIA_DDI_MEM _Y
                            13345 ; 90   |
                            13346 ; 91   |
                            13347 ; 92   |
                            13348 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13349 ; 94   |// Examples of circular pointers:
                            13350 ; 95   |//    INT CIRC cpiVarName
                            13351 ; 96   |//    DWORD CIRC cpdwVarName
                            13352 ; 97   |
                            13353 ; 98   |#define RETCODE INT                 // rcVarName
                            13354 ; 99   |
                            13355 ; 100  |// generic bitfield structure
                            13356 ; 101  |struct Bitfield {
                            13357 ; 102  |    unsigned int B0  :1;
                            13358 ; 103  |    unsigned int B1  :1;
                            13359 ; 104  |    unsigned int B2  :1;
                            13360 ; 105  |    unsigned int B3  :1;
                            13361 ; 106  |    unsigned int B4  :1;
                            13362 ; 107  |    unsigned int B5  :1;
                            13363 ; 108  |    unsigned int B6  :1;
                            13364 ; 109  |    unsigned int B7  :1;
                            13365 ; 110  |    unsigned int B8  :1;
                            13366 ; 111  |    unsigned int B9  :1;
                            13367 ; 112  |    unsigned int B10 :1;
                            13368 ; 113  |    unsigned int B11 :1;
                            13369 ; 114  |    unsigned int B12 :1;
                            13370 ; 115  |    unsigned int B13 :1;
                            13371 ; 116  |    unsigned int B14 :1;
                            13372 ; 117  |    unsigned int B15 :1;
                            13373 ; 118  |    unsigned int B16 :1;
                            13374 ; 119  |    unsigned int B17 :1;
                            13375 ; 120  |    unsigned int B18 :1;
                            13376 ; 121  |    unsigned int B19 :1;
                            13377 ; 122  |    unsigned int B20 :1;
                            13378 ; 123  |    unsigned int B21 :1;
                            13379 ; 124  |    unsigned int B22 :1;
                            13380 ; 125  |    unsigned int B23 :1;
                            13381 ; 126  |};
                            13382 ; 127  |
                            13383 ; 128  |union BitInt {
                            13384 ; 129  |        struct Bitfield B;
                            13385 ; 130  |        int        I;
                            13386 ; 131  |};
                            13387 ; 132  |
                            13388 ; 133  |#define MAX_MSG_LENGTH 10
                            13389 ; 134  |struct CMessage
                            13390 ; 135  |{
                            13391 ; 136  |        unsigned int m_uLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13392 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13393 ; 138  |};
                            13394 ; 139  |
                            13395 ; 140  |typedef struct {
                            13396 ; 141  |    WORD m_wLength;
                            13397 ; 142  |    WORD m_wMessage;
                            13398 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13399 ; 144  |} Message;
                            13400 ; 145  |
                            13401 ; 146  |struct MessageQueueDescriptor
                            13402 ; 147  |{
                            13403 ; 148  |        int *m_pBase;
                            13404 ; 149  |        int m_iModulo;
                            13405 ; 150  |        int m_iSize;
                            13406 ; 151  |        int *m_pHead;
                            13407 ; 152  |        int *m_pTail;
                            13408 ; 153  |};
                            13409 ; 154  |
                            13410 ; 155  |struct ModuleEntry
                            13411 ; 156  |{
                            13412 ; 157  |    int m_iSignaledEventMask;
                            13413 ; 158  |    int m_iWaitEventMask;
                            13414 ; 159  |    int m_iResourceOfCode;
                            13415 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13416 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            13417 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13418 ; 163  |    int m_uTimeOutHigh;
                            13419 ; 164  |    int m_uTimeOutLow;
                            13420 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13421 ; 166  |};
                            13422 ; 167  |
                            13423 ; 168  |union WaitMask{
                            13424 ; 169  |    struct B{
                            13425 ; 170  |        unsigned int m_bNone     :1;
                            13426 ; 171  |        unsigned int m_bMessage  :1;
                            13427 ; 172  |        unsigned int m_bTimer    :1;
                            13428 ; 173  |        unsigned int m_bButton   :1;
                            13429 ; 174  |    } B;
                            13430 ; 175  |    int I;
                            13431 ; 176  |} ;
                            13432 ; 177  |
                            13433 ; 178  |
                            13434 ; 179  |struct Button {
                            13435 ; 180  |        WORD wButtonEvent;
                            13436 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13437 ; 182  |};
                            13438 ; 183  |
                            13439 ; 184  |struct Message {
                            13440 ; 185  |        WORD wMsgLength;
                            13441 ; 186  |        WORD wMsgCommand;
                            13442 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13443 ; 188  |};
                            13444 ; 189  |
                            13445 ; 190  |union EventTypes {
                            13446 ; 191  |        struct CMessage msg;
                            13447 ; 192  |        struct Button Button ;
                            13448 ; 193  |        struct Message Message;
                            13449 ; 194  |};
                            13450 ; 195  |
                            13451 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13452 ; 197  |#define BUILD_TYPE_UPDATER  0x100
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13453 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13454 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13455 ; 200  |
                            13456 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13457 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13458 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13459 ; 204  |
                            13460 ; 205  |#if DEBUG
                            13461 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13462 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13463 ; 208  |#else 
                            13464 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            13465 ; 210  |#define DebugBuildAssert(x)    
                            13466 ; 211  |#endif
                            13467 ; 212  |
                            13468 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13469 ; 214  |//  #pragma asm
                            13470 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13471 ; 216  |//  #pragma endasm
                            13472 ; 217  |
                            13473 ; 218  |
                            13474 ; 219  |#ifdef COLOR_262K
                            13475 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            13476 ; 221  |#elif defined(COLOR_65K)
                            13477 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            13478 ; 223  |#else
                            13479 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            13480 ; 225  |#endif
                            13481 ; 226  |    
                            13482 ; 227  |#endif // #ifndef _TYPES_H
                            13483 
                            13485 
                            13486 ; 12   |
                            13487 ; 13   |
                            13488 ; 14   |// File attributes
                            13489 ; 15   |#ifndef _FS_ATTRIBUTES
                            13490 ; 16   |#define _FS_ATTRIBUTES
                            13491 ; 17   |#define READ        1
                            13492 ; 18   |#define WRITE       2
                            13493 ; 19   |#define WRITE_PLUS  3
                            13494 ; 20   |#define APPEND      4
                            13495 ; 21   |#define TRUNCATE    8
                            13496 ; 22   |#define CREATE      16
                            13497 ; 23   |#endif
                            13498 ; 24   |
                            13499 ; 25   |//#ifndef FAT12
                            13500 ; 26   |//#define FAT12   1
                            13501 ; 27   |//#endif
                            13502 ; 28   |//
                            13503 ; 29   |#ifndef FAT16
                            13504 ; 30   |#define FAT16   2
                            13505 ; 31   |#endif
                            13506 ; 32   |
                            13507 ; 33   |#define MEM_SPACE_P 0x100000
                            13508 ; 34   |#define MEM_SPACE_Y 0x400000
                            13509 ; 35   |#define MEM_SPACE_X 0x800000
                            13510 ; 36   |
                            13511 ; 37   |#define FILE_SYS_MODE_READ  0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13512 ; 38   |#define FILE_SYS_MODE_WRITE 1
                            13513 ; 39   | 
                            13514 ; 40   |#define ATTR_READ_ONLY      0x01
                            13515 ; 41   |#define ATTR_HIDDEN         0x02
                            13516 ; 42   |#define ATTR_SYSTEM         0x04
                            13517 ; 43   |#define ATTR_VOLUME_ID      0x08
                            13518 ; 44   |#define ATTR_DIRECTORY      0x10
                            13519 ; 45   |#define ATTR_ARCHIVE        0x20
                            13520 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                            13521 ; 47   |
                            13522 ; 48   |#define SEEK_SET           -1
                            13523 ; 49   |#define SEEK_CUR            0
                            13524 ; 50   |#define SEEK_END            1
                            13525 ; 51   |
                            13526 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                            13527 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                            13528 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                            13529 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                            13530 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                            13531 ; 57   |
                            13532 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                            13533 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                            13534 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                            13535 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                            13536 ; 62   |
                            13537 ; 63   |#define READ_TYPE_NORMAL            0
                            13538 ; 64   |#define READ_TYPE_FAT               1
                            13539 ; 65   |#define READ_TYPE_RAW               2
                            13540 ; 66   |
                            13541 ; 67   |
                            13542 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            13543 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                            13544 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                            13545 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            13546 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                            13547 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                            13548 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                            13549 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                            13550 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            13551 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                            13552 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                            13553 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                            13554 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                            13555 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                            13556 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                            13557 ; 83   |    #endif
                            13558 ; 84   |#else
                            13559 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                            13560 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                            13561 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            13562 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            13563 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                            13564 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                            13565 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                            13566 ; 92   |    #endif
                            13567 ; 93   |#endif
                            13568 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                            13569 ; 95   |
                            13570 ; 96   |
                            13571 ; 97   |#ifndef MAX_FILENAME_LENGTH
                            13572 ; 98   |#define MAX_FILENAME_LENGTH 256
                            13573 ; 99   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13574 ; 100  |
                            13575 ; 101  |typedef struct {
                            13576 ; 102  |    WORD wNumberOfZones;
                            13577 ; 103  |    WORD wSizeInMegaBytes;
                            13578 ; 104  |} SMARTMEDIA_CHIP_INFO;
                            13579 ; 105  |
                            13580 ; 106  |typedef struct {
                            13581 ; 107  |    WORD wBootIdentification;
                            13582 ; 108  |    WORD wStartHeadNumber;
                            13583 ; 109  |    WORD wStartSectorNumber;
                            13584 ; 110  |    WORD wStartCylinderNumber;
                            13585 ; 111  |    WORD wSystemIdentification;
                            13586 ; 112  |    WORD wEndHeadNumber;
                            13587 ; 113  |    WORD wEndSectorNumber;
                            13588 ; 114  |    WORD wEndCylinderNumber;
                            13589 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                            13590 ; 116  |    WORD wStartLogicalSectorNumberLow;
                            13591 ; 117  |    WORD wPartitionSizeHigh;
                            13592 ; 118  |    WORD wPartitionSizeLow;
                            13593 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                            13594 ; 120  |
                            13595 ; 121  |typedef struct {
                            13596 ; 122  |    WORD wWord0;
                            13597 ; 123  |    WORD wWord1;
                            13598 ; 124  |    WORD wWord2;
                            13599 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                            13600 ; 126  |
                            13601 ; 127  |typedef struct {
                            13602 ; 128  |    WORD wWord0;
                            13603 ; 129  |    WORD wWord1;
                            13604 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                            13605 ; 131  |
                            13606 ; 132  |typedef struct {
                            13607 ; 133  |    WORD wWord0;
                            13608 ; 134  |    WORD wWord1;
                            13609 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                            13610 ; 136  |
                            13611 ; 137  |typedef struct {
                            13612 ; 138  |    WORD wWord0;
                            13613 ; 139  |    WORD wWord1;
                            13614 ; 140  |    WORD wWord2;
                            13615 ; 141  |    WORD wWord3;
                            13616 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                            13617 ; 143  |
                            13618 ; 144  |typedef struct {
                            13619 ; 145  |    WORD wWord0;
                            13620 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                            13621 
                            13644 
                            13645 ; 147  |
                            13646 ; 148  |typedef struct {
                            13647 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                            13648 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                            13649 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                            13650 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                            13651 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                            13652 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                            13653 
                            13675 
                            13676 ; 155  |   
                            13677 ; 156  |typedef struct {
                            13678 ; 157  |    WORD wPageSizeInBytes;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13679 ; 158  |    WORD wRedundantAreaSizeInBytes;
                            13680 ; 159  |    WORD wNumberOfPagesPerBlock;
                            13681 ; 160  |    WORD wNumberOfBlocksPerZone;
                            13682 ; 161  |    WORD wNumberOfZonesInMedia;
                            13683 ; 162  |    WORD wMediaSizeInMBytes;
                            13684 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                            13685 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                            13686 ; 165  |    WORD wMediaFlagStatus;
                            13687 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                            13688 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                            13689 ; 168  |    WORD wNumberOfSystemBlocks;
                            13690 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                            13691 ; 170  |
                            13692 ; 171  |typedef struct {
                            13693 ; 172  |    WORD wDevice;        
                            13694 ; 173  |    WORD wDirtyBlockFlag;
                            13695 ; 174  |    WORD wCleanTailFlag; 
                            13696 ; 175  |    WORD wLogDOSPage;    
                            13697 ; 176  |    WORD wSrcLogBlock;   
                            13698 ; 177  |    WORD wSrcPhyBlock;   
                            13699 ; 178  |    WORD wDestPhyBlock;  
                            13700 ; 179  |    WORD wStartSrcPage;  
                            13701 ; 180  |    WORD wStartDestPage; 
                            13702 ; 181  |    WORD wPagesToCopy;   
                            13703 ; 182  |    WORD wReplaceBuff;   
                            13704 ; 183  |    WORD wReplaceRdnt;
                            13705 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            13706 ; 185  |        WORD wFirstCount;
                            13707 ; 186  |        WORD wNextCount;
                            13708 ; 187  |        WORD wLastCount;
                            13709 ; 188  |    #endif
                            13710 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                            13711 ; 190  |
                            13712 ; 191  |typedef struct {
                            13713 ; 192  |    WORD wWord0;
                            13714 ; 193  |    WORD wWord1;
                            13715 ; 194  |    WORD wWord2;
                            13716 ; 195  |    WORD wWord3;
                            13717 ; 196  |} DIRECTORY_NAME;
                            13718 ; 197  |
                            13719 ; 198  |typedef struct {
                            13720 ; 199  |    WORD wWord0;
                            13721 ; 200  |    WORD wWord1;
                            13722 ; 201  |} DIRECTORY_EXTENSION;
                            13723 ; 202  |
                            13724 ; 203  |typedef struct {
                            13725 ; 204  |    WORD wWord0;
                            13726 ; 205  |    WORD wWord1;
                            13727 ; 206  |} DIRECTORY_SIZE;
                            13728 
                            13743 
                            13744 ; 207  |
                            13745 ; 208  |typedef struct {
                            13746 ; 209  |    DIRECTORY_NAME Name;
                            13747 ; 210  |    DIRECTORY_EXTENSION Extension;
                            13748 ; 211  |    WORD wAttribute;
                            13749 ; 212  |    WORD wReserved[4];
                            13750 ; 213  |    WORD wCreationTime;
                            13751 ; 214  |    WORD wCreationData;
                            13752 ; 215  |    WORD wFirstCluster;
                            13753 ; 216  |    DIRECTORY_SIZE Size;
                            13754 ; 217  |    WORD wCurrentCluster;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13755 ; 218  |    WORD wPointer;
                            13756 ; 219  |    WORD wRecord;
                            13757 ; 220  |    WORD wRd;
                            13758 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                            13759 ; 222  |
                            13760 ; 223  |// TODO:  clean this up.  There are two versions.
                            13761 ; 224  |struct FCB
                            13762 ; 225  |{
                            13763 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                            13764 ; 227  |    int     m_wReserved;                //3
                            13765 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                            13766 ; 229  |    int     m_wAttributes;              //6
                            13767 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                            13768 ; 231  |    int     m_wTimeofCreation;          //b
                            13769 ; 232  |    int     m_wDateofCreation;          //c
                            13770 ; 233  |    int     m_wFirstCluster;            //d
                            13771 ; 234  |    int     m_wFileSizeHigh;            //e
                            13772 ; 235  |    int     m_wFileSizeLow;             //f
                            13773 ; 236  |};
                            13774 
                            13790 
                            13791 ; 237  |
                            13792 ; 238  |
                            13793 ; 239  |typedef struct {
                            13794 ; 240  |    WORD wFirstClusterCurrentDirectory;
                            13795 ; 241  |    WORD wFirstClusterParentDirectory;
                            13796 ; 242  |    WORD wAbsSectorCurrentlyCached;
                            13797 ; 243  |    WORD wCurrentRelativeSector;
                            13798 ; 244  |    WORD wNumberOfSectors;
                            13799 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                            13800 ; 246  |    WORD wBufferedRecord;
                            13801 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                            13802 ; 248  |    WORD * pwPointerToBuffer;
                            13803 ; 249  |    WORD * pwPointerToPath;
                            13804 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                            13805 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                            13806 ; 252  |
                            13807 ; 253  |typedef struct {
                            13808 ; 254  |    WORD wWord0;
                            13809 ; 255  |    WORD wWord1;
                            13810 ; 256  |    WORD wWord2;
                            13811 ; 257  |    WORD wWord3;
                            13812 ; 258  |} FILE_NAME;
                            13813 ; 259  |
                            13814 ; 260  |typedef struct {
                            13815 ; 261  |    WORD wWord0;
                            13816 ; 262  |    WORD wWord1;
                            13817 ; 263  |} FILE_EXTENSION;
                            13818 ; 264  |
                            13819 ; 265  |typedef struct {
                            13820 ; 266  |    WORD wWord0;
                            13821 ; 267  |    WORD wWord1;
                            13822 ; 268  |} FILE_SIZE;
                            13823 ; 269  |
                            13824 ; 270  |typedef union {
                            13825 ; 271  |    struct {
                            13826 ; 272  |        int Read        :1;
                            13827 ; 273  |        int Write       :1;
                            13828 ; 274  |        int Append      :1;
                            13829 ; 275  |        int Truncate    :1;
                            13830 ; 276  |        int Create      :1;
                            13831 ; 277  |        int Rsrv        :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13832 ; 278  |        int Mode        :8;
                            13833 ; 279  |        int Device      :8;
                            13834 ; 280  |    } B;
                            13835 ; 281  |    int I;
                            13836 ; 282  |} FILE_FLAGS;
                            13837 ; 283  |
                            13838 ; 284  |typedef struct {
                            13839 ; 285  |    WORD wWord0;
                            13840 ; 286  |    WORD wWord1;
                            13841 ; 287  |} FILE_BYTE_CURRENT;
                            13842 
                            13882 
                            13883 ; 288  |
                            13884 ; 289  |typedef struct {
                            13885 ; 290  |    FILE_NAME Name;
                            13886 ; 291  |    FILE_EXTENSION Extension;
                            13887 ; 292  |    WORD wAttributes;
                            13888 ; 293  |    WORD wReserved[4];
                            13889 ; 294  |    WORD wCreationTime;
                            13890 ; 295  |    WORD wCreationData;
                            13891 ; 296  |    WORD wFirstCluster;
                            13892 ; 297  |    FILE_SIZE Size;
                            13893 ; 298  |    WORD wCurrentCluster;
                            13894 ; 299  |    WORD wPointer;
                            13895 ; 300  |    WORD wRecord;
                            13896 ; 301  |    WORD wRd;
                            13897 ; 302  |    FILE_FLAGS Flags;
                            13898 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                            13899 ; 304  |    WORD wFcbFlagEndOfCx;
                            13900 ; 305  |} FILE_CONTROL_BLOCK;    
                            13901 ; 306  |
                            13902 ; 307  |typedef struct {
                            13903 ; 308  |    WORD wWord0;
                            13904 ; 309  |    WORD wWord1;
                            13905 ; 310  |    WORD wWord2;
                            13906 ; 311  |    WORD wWord3;
                            13907 ; 312  |} VOLUME_LABEL;
                            13908 ; 313  |
                            13909 ; 314  |typedef struct {
                            13910 ; 315  |    WORD wFATPhysicalBlock1;
                            13911 ; 316  |    WORD wFATPhysicalBlock2;
                            13912 ; 317  |    WORD wFATPhysicalBlock3;
                            13913 ; 318  |    WORD wFATPhysicalBlock4;
                            13914 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                            13915 
                            13922 
                            13923 ; 320  |
                            13924 ; 321  |typedef struct {
                            13925 ; 322  |    WORD wFATSectorInCache;
                            13926 ; 323  |    WORD wLastClusterFree;
                            13927 ; 324  |    WORD wNumberOfUsedClusters;
                            13928 ; 325  |    WORD wNumberOfFreeClusters;
                            13929 ; 326  |    WORD wNumberOfBadClusters;
                            13930 ; 327  |    WORD wNumberOfReservedClusters;
                            13931 ; 328  |    WORD wControl;
                            13932 ; 329  |    WORD * pwSectorCache;
                            13933 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                            13934 ; 331  |} FAT_TABLE;
                            13935 
                            13942 
                            13943 ; 332  |
                            13944 ; 333  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13945 ; 334  |    WORD wStateMediaTable;
                            13946 ; 335  |    WORD wTypeFs;
                            13947 ; 336  |    WORD wBytesPerSector;
                            13948 ; 337  |    WORD wSectorsPerCluster;
                            13949 ; 338  |    WORD wNumberOfReservedSectors;
                            13950 ; 339  |    WORD wMaximumNumberOfFATs;
                            13951 ; 340  |    WORD wMaxRootDirectoryEntries;
                            13952 ; 341  |    WORD wTotalSectors;
                            13953 ; 342  |    WORD wNumberOfFATSectors;
                            13954 ; 343  |    WORD wNumberOfSectorsPerTrack;
                            13955 ; 344  |    WORD wNumberOfHeads;
                            13956 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                            13957 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                            13958 ; 347  |    WORD wTotalSectors32MSB;
                            13959 ; 348  |    WORD wTotalSectors32LSB;
                            13960 ; 349  |    WORD wDriverNumber;
                            13961 ; 350  |    WORD wExtendedBootSignature;
                            13962 ; 351  |    WORD wVolumeIDMSB;
                            13963 ; 352  |    WORD wVolumeIDLSB;
                            13964 ; 353  |    VOLUME_LABEL VolumeLabel;
                            13965 ; 354  |    WORD * pwWriteBuffer;
                            13966 ; 355  |    WORD wPrimaryFATRelativeSector;
                            13967 ; 356  |    WORD wSecondaryFATRelativeSector;
                            13968 ; 357  |    WORD wRootDirectoryRelativeSector;
                            13969 ; 358  |    WORD wFirstSectorNumberDataZone;
                            13970 ; 359  |    WORD wMaxNumberOfFATEntries;
                            13971 ; 360  |    WORD wRootDirectorySizeInSectors;
                            13972 ; 361  |    WORD wDataAreaSizeInSectors;
                            13973 ; 362  |} MEDIA_TABLE;
                            13974 
                            14033 
                            14034 ; 363  |
                            14035 ; 364  |typedef struct {
                            14036 ; 365  |    MEDIA_TABLE * pMediaTable;
                            14037 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                            14038 ; 367  |    FAT_TABLE * pFATTable;
                            14039 ; 368  |} DEVICE_CONTROL_TABLE;
                            14040 ; 369  |    
                            14041 ; 370  |typedef struct {
                            14042 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                            14043 ; 372  |                                        //  to 2-bytes for compatibility with
                            14044 ; 373  |                                        //  older host drivers.
                            14045 ; 374  |    DWORD dwTotalNumberOfSectors;
                            14046 ; 375  |    DWORD dwTotalNumberOfBytes;
                            14047 ; 376  |    WORD wSectorSizeInBytes;
                            14048 ; 377  |} MEDIA_SIZE;
                            14049 ; 378  |
                            14050 ; 379  |typedef struct {
                            14051 ; 380  |    BOOL    bInstalled;
                            14052 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                            14053 ; 382  |    DWORD   dwSize;
                            14054 ; 383  |} DATA_DRIVE_PBS_LOC;
                            14055 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                            14056 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                            14057 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                            14058 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                            14059 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                            14060 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                            14061 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                            14062 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                            14063 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14064 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                            14065 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                            14066 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                            14067 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                            14068 ; 397  |extern  INT FSFreeClusters(INT Device);
                            14069 ; 398  |extern  INT BytesPerCluster(INT Device);
                            14070 ; 399  |
                            14071 ; 400  |
                            14072 ; 401  |
                            14073 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                            14074 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                            14075 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
                            14076 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
                            14077 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                            14078 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                            14079 ; 408  |//extern  INT FSFileClose(INT bHandle);
                            14080 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                            14081 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                            14082 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                            14083 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                            14084 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                            14085 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                            14086 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                            14087 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                            14088 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                            14089 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                            14090 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                            14091 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                            14092 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                            14093 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                            14094 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                            14095 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                            14096 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                            14097 ; 426  |
                            14098 ; 427  |#endif
                            14099 
                            14101 
                            14102 ; 13   |#include "metadata.h"
                            14103 
                            14105 
                            14106 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14107 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                            14108 ; 3    |//
                            14109 ; 4    |// Filename: metadata.h
                            14110 ; 5    |// Description:
                            14111 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14112 ; 7    |
                            14113 ; 8    |#ifndef _METADATA_H
                            14114 ; 9    |#define _METADATA_H
                            14115 ; 10   |
                            14116 ; 11   |///////////////////////////////////////////////////////////////////////////////
                            14117 ; 12   |// MetaData definitions
                            14118 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            14119 ; 14   |
                            14120 ; 15   |//#define MMC_CMD59       0x40|59
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14121 ; 16   |
                            14122 ; 17   |///////////////////////////////////////////////////////////////////////////////
                            14123 ; 18   |// Meta Data structure definitions
                            14124 ; 19   |///////////////////////////////////////////////////////////////////////////////
                            14125 ; 20   |
                            14126 ; 21   |///////////////////////////////////////////////////////////////////////////////
                            14127 ; 22   |// MetaData definitions
                            14128 ; 23   |
                            14129 ; 24   |#define META_DATA_FOUND                     (WORD)(0)
                            14130 ; 25   |#define META_DATA_NOT_FOUND                 (WORD)(0x100)
                            14131 ; 26   |#define META_DATA_FILE_NOT_SUPPORTED        (WORD)(0x101)
                            14132 ; 27   |#define META_DATA_FILEOPEN_ERROR            (WORD)(0x200)
                            14133 ; 28   |#define META_DATA_FILEREAD_ERROR            (WORD)(0x201)
                            14134 ; 29   |#define META_DATA_FILECLOSE_ERROR           (WORD)(0x202)
                            14135 ; 30   |#define META_DATA_FILESEEK_ERROR            (WORD)(0x203)
                            14136 ; 31   |#define META_DATA_FILEWRITE_ERROR           (WORD)(0x204)
                            14137 ; 32   |#define META_DATA_SUCCESS                               (WORD)(0x205)
                            14138 ; 33   |
                            14139 ; 34   |#define META_DATA_NOT_VBR_FORMAT            (WORD)(0x102)
                            14140 ; 35   |
                            14141 ; 36   |// VBR
                            14142 ; 37   |#define VBR_NOT_DETERMINED 0
                            14143 ; 38   |#define VBR_TRUE 1
                            14144 ; 39   |
                            14145 ; 40   |#ifndef TITLE_SIZE
                            14146 ; 41   |//#define TITLE_SIZE 30
                            14147 ; 42   |#ifndef USE_PLAYLIST3
                            14148 ; 43   |#define TITLE_SIZE 256          //was 30 but LFNs require up to 256!
                            14149 ; 44   |#else
                            14150 ; 45   |#define TITLE_SIZE 80           //was 256 but music library only store up to 129!
                            14151 ; 46   |#endif
                            14152 ; 47   |#endif
                            14153 ; 48   |
                            14154 ; 49   |#ifndef ARTIST_SIZE
                            14155 ; 50   |#ifndef USE_PLAYLIST3
                            14156 ; 51   |//#define ARTIST_SIZE 30
                            14157 ; 52   |#define ARTIST_SIZE 100         // increase artist size for use with ID3V2 tags (Stmp00003
                                  110)
                            14158 ; 53   |#else
                            14159 ; 54   |#define ARTIST_SIZE 48          // increase artist size for use with ID3V2 tags (Stmp00003
                                  110)
                            14160 ; 55   |#endif
                            14161 ; 56   |#endif
                            14162 ; 57   |
                            14163 ; 58   |#ifndef ALBUM_SIZE
                            14164 ; 59   |#ifndef USE_PLAYLIST3
                            14165 ; 60   |//#define ALBUM_SIZE 30
                            14166 ; 61   |#define ALBUM_SIZE 50           // increase album size (not as much) for use with ID3V2 ta
                                  gs (Stmp00003110)
                            14167 ; 62   |#else
                            14168 ; 63   |#define ALBUM_SIZE 48           // increase album size (not as much) for use with ID3V2 ta
                                  gs (Stmp00003110)
                            14169 ; 64   |#endif
                            14170 ; 65   |#endif
                            14171 ; 66   |
                            14172 ; 67   |#ifdef USE_PLAYLIST3
                            14173 ; 68   |#ifndef GENRE_SIZE
                            14174 ; 69   |#define GENRE_SIZE 20
                            14175 ; 70   |#endif
                            14176 ; 71   |
                            14177 ; 72   |#ifndef YEAR_SIZE
                            14178 ; 73   |#define YEAR_SIZE 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14179 ; 74   |#endif
                            14180 ; 75   |
                            14181 ; 76   |#ifndef TRACKNUM_SIZE
                            14182 ; 77   |#define TRACKNUM_SIZE 5 // assume track number is smaller than 0xfff (12bit or 4095)
                            14183 ; 78   |#endif
                            14184 ; 79   |
                            14185 ; 80   |#define MAX_TRACK_NUMBER 0x000fff
                            14186 ; 81   |#define UNKNOWN_TRACK_NUMBER MAX_TRACK_NUMBER
                            14187 ; 82   |#endif
                            14188 ; 83   |
                            14189 ; 84   |#define XING_TOC_SIZE   100
                            14190 ; 85   |#if MTP_BUILD
                            14191 ; 86   |// This size is used to build table for FF/RW for vbr songs,
                            14192 ; 87   |// and as there is no such function in mtp mode, it is reduced to release y-memory.
                            14193 ; 88   |#define VBR_TOC_SIZE    2
                            14194 ; 89   |#else
                            14195 ; 90   |#define VBR_TOC_SIZE    200
                            14196 ; 91   |#endif
                            14197 ; 92   |
                            14198 ; 93   |extern UCS3 g_wSongTitle[TITLE_SIZE];
                            14199 ; 94   |extern UCS3 g_wSongArtist[ARTIST_SIZE];
                            14200 ; 95   |extern UCS3 g_wSongAlbum[ALBUM_SIZE];
                            14201 ; 96   |#ifdef USE_PLAYLIST3
                            14202 ; 97   |extern UCS3 g_wSongGenre[GENRE_SIZE];
                            14203 ; 98   |extern UCS3 g_wSongYear[YEAR_SIZE];
                            14204 ; 99   |extern WORD g_wSongTrackNum;
                            14205 ; 100  |#endif
                            14206 ; 101  |
                            14207 ; 102  |extern WORD g_wVBRTOCTable[VBR_TOC_SIZE];
                            14208 ; 103  |
                            14209 ; 104  |typedef struct {
                            14210 ; 105  |    WORD        iTitleBufferLength;
                            14211 ; 106  |        UCS3       *wTitle;        // Title of Song
                            14212 ; 107  |    WORD        iArtistBufferLength;
                            14213 ; 108  |    UCS3       *wArtist;
                            14214 ; 109  |    WORD        iAlbumBufferLength;
                            14215 ; 110  |    UCS3       *wAlbum;
                            14216 ; 111  |#ifdef USE_PLAYLIST3
                            14217 ; 112  |    WORD        iGenreBufferLength;
                            14218 ; 113  |    UCS3       *wGenre;
                            14219 ; 114  |    WORD        iYearBufferLength;
                            14220 ; 115  |    UCS3       *wYear;
                            14221 ; 116  |    WORD        wTrackNum;
                            14222 ; 117  |#endif
                            14223 ; 118  |    BYTE       btGenre;       // Genre of audio file -- if MP3, use the ID3v1 tag byte
                            14224 ; 119  |        WORD       wSampRate;     // Sample Rate of song (Hz)
                            14225 ; 120  |        WORD       wNumChannels;
                            14226 ; 121  |        WORD       wBitRate;      // Bitrate of song (for MP3 VBR, this will be first bitr
                                  ate found)
                            14227 ; 122  |        LONG       iTime;                 // Length of song in seconds
                            14228 ; 123  |        DWORD      dwStartPos;    // Position where audio starts. (if required by the deco
                                  der)
                            14229 ; 124  |        DWORD      dwNumBytes;    // Total Bytes in audio part of song
                            14230 ; 125  |    DWORD      dwDataBytes;   // for wma; (total bytes - header bytes)
                            14231 ; 126  |        DWORD      dwNumFrames;   // See note below on frames
                            14232 ; 127  |        BOOL       bVBR;                  // 0 = CBR or does not apply , 1 = VBR (**see qu
                                  estion below**)
                            14233 ; 128  |        INT                iFileType;     // 0 = unknown, 1 = MP3, 2 = WMA, 4 = AAC, 8 = I
                                  MA ADPCM, etc (use defines below)
                            14234 ; 129  |        INT                iResourceNum;  // Resource number of the decoder that needed fo
                                  r this file
                            14235 ; 130  |} FILE_META_DATA;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14236 ; 131  |
                            14237 ; 132  |// File Type Defines (use for iFileType) -- matches bit defines in sysequ.inc
                            14238 ; 133  |#define UNKNOWN_TYPE   0
                            14239 ; 134  |#define MP3_TYPE       1
                            14240 ; 135  |#define WMA_TYPE       2
                            14241 ; 136  |#define AAC_TYPE       4
                            14242 ; 137  |#define IMA_ADPCM_TYPE 8
                            14243 ; 138  |#define MS_ADPCM_TYPE  16
                            14244 ; 139  |#define PCM_WAV_TYPE   32
                            14245 ; 140  |#define ASF_TYPE       64
                            14246 ; 141  |#define AUDIBLE_ACELP_TYPE 128
                            14247 ; 142  |#define AUDIBLE_MP3_TYPE   256          // 9/28/04 mmiu
                            14248 ; 143  |
                            14249 ; 144  |#define SMV_ADPCM_TYPE 512
                            14250 ; 145  |
                            14251 ; 146  |
                            14252 ; 147  |//////SRS WOW DEFS/////////////////////////////////////////////////////////////
                            14253 ; 148  |// Sample rates
                            14254 ; 149  |#ifdef WOW
                            14255 ; 150  |#define SR_48KHZ        48000
                            14256 ; 151  |#define SR_44KHZ        44100
                            14257 ; 152  |#define SR_32KHZ        32000
                            14258 ; 153  |#define SR_24KHZ        24000
                            14259 ; 154  |#define SR_22KHZ        22050
                            14260 ; 155  |#define SR_16KHZ        16000
                            14261 ; 156  |#define SR_12KHZ        12000
                            14262 ; 157  |#define SR_11KHZ        11025
                            14263 ; 158  |#define SR_8KHZ          8000
                            14264 ; 159  |#endif
                            14265 ; 160  |
                            14266 ; 161  |
                            14267 ; 162  |///////////////////////////////////////////////////////////////////////////////
                            14268 ; 163  |// MetaData prototypes
                            14269 ; 164  |///////////////////////////////////////////////////////////////////////////////
                            14270 ; 165  |
                            14271 ; 166  |RETCODE _reentrant GetFileMetaData(INT PackedPathNameAddress, INT btCurrentDevice, FILE_ME
                                  TA_DATA *MetaData);
                            14272 
                            14300 
                            14301 ; 167  |#ifdef USE_PLAYLIST3
                            14302 ; 168  |INT _reentrant GetRelativePath(int highlight_index, int browse_type, INT* PackedPathNameAd
                                  dress);
                            14303 ; 169  |INT _reentrant RetrieveSongInfo(INT a, INT b, INT *p_path);
                            14304 ; 170  |#endif
                            14305 ; 171  |
                            14306 ; 172  |#endif // #ifndef _METADATA_H
                            14307 
                            14309 
                            14310 ; 14   |#include "wavmetadata.h"
                            14311 
                            14313 
                            14314 ; 1    |///////////////////////////////////////////////////////////////////////////////
                            14315 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                            14316 ; 3    |//
                            14317 ; 4    |// Filename: wavmetadata.h
                            14318 ; 5    |// Description: Includes header data for wav meta-data functions.
                            14319 ; 6    |///////////////////////////////////////////////////////////////////////////////
                            14320 ; 7    |
                            14321 ; 8    |#define ADPCM_READ_BUFFER_SIZE 156
                            14322 ; 9    |
                            14323 ; 10   |
                            14324 ; 11   |/* WAVE form wFormatTag IDs */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14325 ; 12   |#define  WAVE_FORMAT_UNKNOWN    0x0000  /*  Microsoft Corporation  */
                            14326 ; 13   |#define  WAVE_FORMAT_PCM        0x0001  /* Microsoft PCM */
                            14327 ; 14   |#define  WAVE_FORMAT_ADPCM      0x0002  /*  Microsoft Corporation  */
                            14328 ; 15   |#define  WAVE_FORMAT_IBM_CVSD   0x0005  /*  IBM Corporation  */
                            14329 ; 16   |#define  WAVE_FORMAT_ALAW       0x0006  /*  Microsoft Corporation  */
                            14330 ; 17   |#define  WAVE_FORMAT_MULAW      0x0007  /*  Microsoft Corporation  */
                            14331 ; 18   |#define  WAVE_FORMAT_OKI_ADPCM  0x0010  /*  OKI  */
                            14332 ; 19   |#define  WAVE_FORMAT_DVI_ADPCM  0x0011  /*  Intel Corporation  */
                            14333 ; 20   |#define  WAVE_FORMAT_IMA_ADPCM  (WAVE_FORMAT_DVI_ADPCM) /*  Intel Corporation  */
                            14334 ; 21   |#define  WAVE_FORMAT_MEDIASPACE_ADPCM   0x0012  /*  Videologic  */
                            14335 ; 22   |#define  WAVE_FORMAT_SIERRA_ADPCM       0x0013  /*  Sierra Semiconductor Corp  */
                            14336 ; 23   |#define  WAVE_FORMAT_G723_ADPCM 0x0014  /*  Antex Electronics Corporation  */
                            14337 ; 24   |#define  WAVE_FORMAT_DIGISTD    0x0015  /*  DSP Solutions, Inc.  */
                            14338 ; 25   |#define  WAVE_FORMAT_DIGIFIX    0x0016  /*  DSP Solutions, Inc.  */
                            14339 ; 26   |#define  WAVE_FORMAT_DIALOGIC_OKI_ADPCM 0x0017  /*  Dialogic Corporation  */
                            14340 ; 27   |#define  WAVE_FORMAT_YAMAHA_ADPCM       0x0020  /*  Yamaha Corporation of America  */
                            14341 ; 28   |#define  WAVE_FORMAT_SONARC     0x0021  /*  Speech Compression  */
                            14342 ; 29   |#define  WAVE_FORMAT_DSPGROUP_TRUESPEECH        0x0022  /*  DSP Group, Inc  */
                            14343 ; 30   |#define  WAVE_FORMAT_ECHOSC1    0x0023  /*  Echo Speech Corporation  */
                            14344 ; 31   |#define  WAVE_FORMAT_AUDIOFILE_AF36     0x0024  /*    */
                            14345 ; 32   |#define  WAVE_FORMAT_APTX       0x0025  /*  Audio Processing Technology  */
                            14346 ; 33   |#define  WAVE_FORMAT_AUDIOFILE_AF10     0x0026  /*    */
                            14347 ; 34   |#define  WAVE_FORMAT_DOLBY_AC2  0x0030  /*  Dolby Laboratories  */
                            14348 ; 35   |#define  WAVE_FORMAT_GSM610     0x0031  /*  Microsoft Corporation  */
                            14349 ; 36   |#define  WAVE_FORMAT_ANTEX_ADPCME       0x0033  /*  Antex Electronics Corporation  */
                            14350 ; 37   |#define  WAVE_FORMAT_CONTROL_RES_VQLPC  0x0034  /*  Control Resources Limited  */
                            14351 ; 38   |#define  WAVE_FORMAT_DIGIREAL   0x0035  /*  DSP Solutions, Inc.  */
                            14352 ; 39   |#define  WAVE_FORMAT_DIGIADPCM  0x0036  /*  DSP Solutions, Inc.  */
                            14353 ; 40   |#define  WAVE_FORMAT_CONTROL_RES_CR10   0x0037  /*  Control Resources Limited  */
                            14354 ; 41   |#define  WAVE_FORMAT_NMS_VBXADPCM       0x0038  /*  Natural MicroSystems  */
                            14355 ; 42   |#define  WAVE_FORMAT_G721_ADPCM 0x0040  /*  Antex Electronics Corporation  */
                            14356 ; 43   |#define  WAVE_FORMAT_MPEG       0x0050  /*  Microsoft Corporation  */
                            14357 ; 44   |#define  WAVE_FORMAT_CREATIVE_ADPCM     0x0200  /*  Creative Labs, Inc  */
                            14358 ; 45   |#define  WAVE_FORMAT_CREATIVE_FASTSPEECH8       0x0202  /*  Creative Labs, Inc  */
                            14359 ; 46   |#define  WAVE_FORMAT_CREATIVE_FASTSPEECH10      0x0203  /*  Creative Labs, Inc  */
                            14360 ; 47   |#define  WAVE_FORMAT_FM_TOWNS_SND       0x0300  /*  Fujitsu Corp.  */
                            14361 ; 48   |#define  WAVE_FORMAT_OLIGSM     0x1000  /*  Ing C. Olivetti & C., S.p.A.  */
                            14362 ; 49   |#define  WAVE_FORMAT_OLIADPCM   0x1001  /*  Ing C. Olivetti & C., S.p.A.  */
                            14363 ; 50   |#define  WAVE_FORMAT_OLICELP    0x1002  /*  Ing C. Olivetti & C., S.p.A.  */
                            14364 ; 51   |#define  WAVE_FORMAT_OLISBC     0x1003  /*  Ing C. Olivetti & C., S.p.A.  */
                            14365 ; 52   |#define  WAVE_FORMAT_OLIOPR     0x1004  /*  Ing C. Olivetti & C., S.p.A.  */
                            14366 ; 53   |
                            14367 ; 54   |// Function Prototypes
                            14368 ; 55   |INT _reentrant GetRiffInfo(FILE_META_DATA * MetaData,  _packed BYTE *buf);
                            14369 ; 56   |RETCODE _reentrant GetWavMetaData (INT PackedPathNameAddress, INT btCurrentDevice, FILE_ME
                                  TA_DATA *MetaData);
                            14370 ; 57   |#ifdef MOTION_VIDEO
                            14371 ; 58   |RETCODE _reentrant GetSMVMetaData(INT PackedPathNameAddress, INT btCurrentDevice, FILE_MET
                                  A_DATA * MetaData);
                            14372 ; 59   |#endif
                            14373 
                            14375 
                            14376 ; 15   |#include "resource.h"
                            14377 
                            14379 
                            14380 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            14381 ; 2    |//  Do not edit it directly.
                            14382 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            14383 ; 4    |
                            14384 ; 5    |
                            14385 ; 6    |
                            14386 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14387 ; 8    |//  Do not edit it directly.
                            14388 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            14389 ; 10   |
                            14390 ; 11   |
                            14391 ; 12   |
                            14392 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14393 ; 14   |//  Do not edit it directly.
                            14394 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            14395 ; 16   |
                            14396 ; 17   |
                            14397 ; 18   |
                            14398 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14399 ; 20   |//  Do not edit it directly.
                            14400 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            14401 ; 22   |
                            14402 ; 23   |
                            14403 ; 24   |
                            14404 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14405 ; 26   |//  Do not edit it directly.
                            14406 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            14407 ; 28   |
                            14408 ; 29   |
                            14409 ; 30   |
                            14410 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14411 ; 32   |//  Do not edit it directly.
                            14412 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            14413 ; 34   |
                            14414 ; 35   |
                            14415 ; 36   |
                            14416 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14417 ; 38   |//  Do not edit it directly.
                            14418 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            14419 ; 40   |
                            14420 ; 41   |
                            14421 ; 42   |
                            14422 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14423 ; 44   |//  Do not edit it directly.
                            14424 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            14425 ; 46   |
                            14426 ; 47   |
                            14427 ; 48   |
                            14428 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14429 ; 50   |//  Do not edit it directly.
                            14430 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            14431 ; 52   |
                            14432 ; 53   |
                            14433 ; 54   |
                            14434 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14435 ; 56   |//  Do not edit it directly.
                            14436 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            14437 ; 58   |
                            14438 ; 59   |
                            14439 ; 60   |
                            14440 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14441 ; 62   |//  Do not edit it directly.
                            14442 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            14443 ; 64   |
                            14444 ; 65   |
                            14445 ; 66   |
                            14446 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14447 ; 68   |//  Do not edit it directly.
                            14448 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14449 ; 70   |
                            14450 ; 71   |
                            14451 ; 72   |
                            14452 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14453 ; 74   |//  Do not edit it directly.
                            14454 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            14455 ; 76   |
                            14456 ; 77   |
                            14457 ; 78   |
                            14458 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14459 ; 80   |//  Do not edit it directly.
                            14460 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            14461 ; 82   |
                            14462 ; 83   |
                            14463 ; 84   |
                            14464 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14465 ; 86   |//  Do not edit it directly.
                            14466 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            14467 ; 88   |
                            14468 ; 89   |
                            14469 ; 90   |
                            14470 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14471 ; 92   |//  Do not edit it directly.
                            14472 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            14473 ; 94   |
                            14474 ; 95   |
                            14475 ; 96   |
                            14476 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            14477 ; 98   |//  Do not edit it directly.
                            14478 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            14479 ; 100  |
                            14480 ; 101  |
                            14481 ; 102  |
                            14482 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14483 ; 104  |//  Do not edit it directly.
                            14484 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            14485 ; 106  |
                            14486 ; 107  |
                            14487 ; 108  |
                            14488 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14489 ; 110  |//  Do not edit it directly.
                            14490 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            14491 ; 112  |
                            14492 ; 113  |
                            14493 ; 114  |
                            14494 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14495 ; 116  |//  Do not edit it directly.
                            14496 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            14497 ; 118  |
                            14498 ; 119  |
                            14499 ; 120  |
                            14500 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                            14501 ; 122  |//  Do not edit it directly.
                            14502 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            14503 ; 124  |
                            14504 ; 125  |
                            14505 ; 126  |
                            14506 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            14507 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            14508 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                            14509 ; 130  |// LCD example resource listing
                            14510 ; 131  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14511 ; 132  |
                            14512 ; 133  |#if (!defined(resources))
                            14513 ; 134  |#define resources 1
                            14514 ; 135  |
                            14515 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            14516 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            14517 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            14518 ; 139  |
                            14519 ; 140  |#define VERSION_MAJOR 3
                            14520 ; 141  |#define VERSION_MIDDLE 200
                            14521 ; 142  |#define VERSION_MINOR 910
                            14522 ; 143  |
                            14523 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            14524 ; 145  |#define NUMBER_OF_PRESETS 10
                            14525 ; 146  |
                            14526 ; 147  |
                            14527 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            14528 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            14529 ; 150  |//  the resource index cache if it was added.
                            14530 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            14531 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            14532 ; 153  |
                            14533 ; 154  |//$FILENAME searchdirectory.src
                            14534 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            14535 ; 156  |//$FILENAME shortdirmatch.src
                            14536 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            14537 ; 158  |//$FILENAME fopen.src
                            14538 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            14539 ; 160  |//$FILENAME musicmenu.src
                            14540 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            14541 ; 162  |//$FILENAME changepath.src
                            14542 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            14543 ; 164  |//$FILENAME _openandverifyslot.src
                            14544 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            14545 ; 166  |//$FILENAME _loadslot.src
                            14546 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            14547 ; 168  |//$FILENAME getname.src
                            14548 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            14549 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            14550 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            14551 ; 172  |//$FILENAME sethandleforsearch.src
                            14552 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            14553 ; 174  |//$FILENAME wmaWrap.src
                            14554 ; 175  |#define RSRC_WMADEC_CODE 11    
                            14555 ; 176  |//$FILENAME extractfilename.src
                            14556 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            14557 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            14558 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            14559 ; 180  |//$FILENAME SoftTimerMod.src
                            14560 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            14561 ; 182  |//$FILENAME GetShortfilename.src
                            14562 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                            14563 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                            14564 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            14565 ; 186  |//$FILENAME playerstatemachine.src
                            14566 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            14567 ; 188  |//$FILENAME SysMod.src
                            14568 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            14569 ; 190  |//$FILENAME drm_b64_decodew.src
                            14570 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                            14571 ; 192  |//$FILENAME discardtrailigperiods.src
                            14572 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14573 ; 194  |//$FILENAME uppercase.src
                            14574 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            14575 ; 196  |//$FILENAME strlength.src
                            14576 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            14577 ; 198  |//$FILENAME ConverToShortname.src
                            14578 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            14579 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            14580 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            14581 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            14582 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            14583 ; 204  |//$FILENAME drm_sst_closekey.src
                            14584 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            14585 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            14586 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            14587 ; 208  |//$FILENAME freehandle.src
                            14588 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            14589 ; 210  |//$FILENAME searchfreehandleallocate.src
                            14590 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            14591 ; 212  |//$FILENAME _parselicenseattributes.src
                            14592 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            14593 ; 214  |//$FILENAME variablesecstategetorset.src
                            14594 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            14595 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            14596 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            14597 ; 218  |//$FILENAME drm_mgr_initialize.src
                            14598 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            14599 ; 220  |//$FILENAME display.src
                            14600 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            14601 ; 222  |//$FILENAME DisplayModule.src
                            14602 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            14603 ; 224  |//$FILENAME extractpath.src
                            14604 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            14605 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            14606 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            14607 ; 228  |//$FILENAME _getprivatekey.src
                            14608 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            14609 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            14610 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            14611 ; 232  |//$FILENAME drm_hds_openslot.src
                            14612 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            14613 ; 234  |//$FILENAME fclose.src
                            14614 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            14615 ; 236  |//$FILENAME drm_cphr_init.src
                            14616 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            14617 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            14618 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            14619 ; 240  |//$FILENAME drm_mgr_bind.src
                            14620 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            14621 ; 242  |//$FILENAME _decryptcontentkey.src
                            14622 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            14623 ; 244  |//$FILENAME drm_mac_inv32.src
                            14624 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                            14625 ; 246  |//$FILENAME drm_lic_getattribute.src
                            14626 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            14627 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            14628 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            14629 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            14630 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            14631 ; 252  |//$FILENAME effectsmodules.src
                            14632 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                            14633 ; 254  |//$FILENAME janusx.src
                            14634 ; 255  |#define RSRC_JANUSX_CODE 51    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14635 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            14636 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            14637 ; 258  |//$FILENAME eval.src
                            14638 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            14639 ; 260  |//$FILENAME _verifyslothash.src
                            14640 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            14641 ; 262  |//$FILENAME januscommon.src
                            14642 ; 263  |#define RSRC_JANUS_COMMON 55    
                            14643 ; 264  |//$FILENAME changecase.src
                            14644 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            14645 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            14646 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            14647 ; 268  |//$FILENAME _loadlicenseattributes.src
                            14648 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            14649 ; 270  |//$FILENAME drm_hds_slotseek.src
                            14650 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            14651 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            14652 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            14653 ; 274  |//$FILENAME drm_levl_performoperations.src
                            14654 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            14655 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            14656 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            14657 ; 278  |//$FILENAME drm_lst_getlicense.src
                            14658 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            14659 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            14660 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            14661 ; 282  |//$FILENAME oem_writefile.src
                            14662 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            14663 ; 284  |//$FILENAME drm_sst_getdata.src
                            14664 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            14665 ; 286  |//$FILENAME updatehandlemode.src
                            14666 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                            14667 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            14668 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            14669 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            14670 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            14671 ; 292  |//$FILENAME doplay_p.src
                            14672 ; 293  |#define RSRC_DOPLAY_P 70    
                            14673 ; 294  |//$FILENAME fatwritep.src
                            14674 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            14675 ; 296  |//$FILENAME findfirst.src
                            14676 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            14677 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            14678 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            14679 ; 300  |//$FILENAME changetorootdirectory.src
                            14680 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            14681 ; 302  |//$FILENAME _findkeypair.src
                            14682 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            14683 ; 304  |//$FILENAME variablemachinegetorset.src
                            14684 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            14685 ; 306  |//$FILENAME _hdsslotenumnext.src
                            14686 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                            14687 ; 308  |//$FILENAME getlspubkey.src
                            14688 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            14689 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            14690 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            14691 ; 312  |//$FILENAME drm_utl_decodekid.src
                            14692 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            14693 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            14694 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                            14695 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                            14696 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14697 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            14698 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            14699 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            14700 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            14701 ; 322  |//$FILENAME aes_enc.src
                            14702 ; 323  |#define RSRC_AES_ENC 85    
                            14703 ; 324  |//$FILENAME getprivkey.src
                            14704 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            14705 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            14706 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            14707 ; 328  |//$FILENAME playlist_codebank.src
                            14708 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            14709 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            14710 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            14711 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            14712 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            14713 ; 334  |//$FILENAME _getdevicecert.src
                            14714 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            14715 ; 336  |//$FILENAME drm_lic_reportactions.src
                            14716 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            14717 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            14718 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            14719 ; 340  |//$FILENAME _basicheaderchecks.src
                            14720 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            14721 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            14722 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            14723 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            14724 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            14725 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            14726 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            14727 ; 348  |//$FILENAME drm_lst_open.src
                            14728 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            14729 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            14730 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            14731 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            14732 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            14733 ; 354  |//$FILENAME oem_openfile.src
                            14734 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            14735 ; 356  |//$FILENAME _getdrmfullpathname.src
                            14736 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            14737 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            14738 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            14739 ; 360  |//$FILENAME _applydiffstostore.src
                            14740 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            14741 ; 362  |//$FILENAME drm_sst_setdata.src
                            14742 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            14743 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            14744 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            14745 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            14746 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            14747 ; 368  |//$FILENAME playerlib_extra.src
                            14748 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                            14749 ; 370  |//$FILENAME wmaCommon.src
                            14750 ; 371  |#define RSRC_WMA_COMMON 109    
                            14751 ; 372  |//$FILENAME wmainit.src
                            14752 ; 373  |#define RSRC_WMA_INIT 110    
                            14753 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            14754 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            14755 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            14756 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                            14757 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            14758 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14759 ; 380  |//$FILENAME drm_hds_closestore.src
                            14760 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            14761 ; 382  |//$FILENAME _hdsloadsrn.src
                            14762 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            14763 ; 384  |//$FILENAME _loadproritizedlist.src
                            14764 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            14765 ; 386  |//$FILENAME drm_lst_initenum.src
                            14766 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            14767 ; 388  |//$FILENAME _loadattributesintocache.src
                            14768 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            14769 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            14770 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            14771 ; 392  |
                            14772 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            14773 ; 394  |//  Menu Modules (codebanks)
                            14774 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            14775 ; 396  |//$FILENAME mainmenu.src
                            14776 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            14777 ; 398  |//$FILENAME displaylists.src
                            14778 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            14779 ; 400  |
                            14780 ; 401  |//$FILENAME voicemenu.src
                            14781 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            14782 ; 403  |//$FILENAME fmtunermenu.src
                            14783 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            14784 ; 405  |//$FILENAME recorderstatemachine.src
                            14785 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            14786 ; 407  |
                            14787 ; 408  |//$FILENAME eqmenu.src
                            14788 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            14789 ; 410  |//$FILENAME playmodemenu.src
                            14790 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            14791 ; 412  |//$FILENAME contrastmenu.src
                            14792 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            14793 ; 414  |//$FILENAME pwrsettingsmenu.src
                            14794 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            14795 ; 416  |//$FILENAME timedatemenu.src
                            14796 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            14797 ; 418  |//$FILENAME settimemenu.src
                            14798 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            14799 ; 420  |//$FILENAME setdatemenu.src
                            14800 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            14801 ; 422  |//$FILENAME settingsmenu.src
                            14802 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            14803 ; 424  |//$FILENAME string_system_menu.src
                            14804 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            14805 ; 426  |//$FILENAME deletemenu.src
                            14806 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            14807 ; 428  |//$FILENAME aboutmenu.src
                            14808 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            14809 ; 430  |
                            14810 ; 431  |//$FILENAME spectrogram.src
                            14811 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                            14812 ; 433  |
                            14813 ; 434  |//$FILENAME motionvideomenu.src
                            14814 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            14815 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            14816 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            14817 ; 438  |//$FILENAME jpegdisplaymenu.src
                            14818 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                            14819 ; 440  |//$FILENAME jpegmanualmenu.src
                            14820 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14821 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            14822 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            14823 ; 444  |//$FILENAME jpegslideshowmenu.src
                            14824 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            14825 ; 446  |//$FILENAME albumartmenu.src
                            14826 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            14827 ; 448  |//$FILENAME jpegfileutilextra.src
                            14828 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            14829 ; 450  |
                            14830 ; 451  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14831 ; 452  |// General Modules
                            14832 ; 453  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14833 ; 454  |//$FILENAME MixMod.src
                            14834 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            14835 ; 456  |//$FILENAME TunerModule.src
                            14836 ; 457  |#define RSRC_TUNER_MODULE 146    
                            14837 ; 458  |//$FILENAME geqoverlay.src
                            14838 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            14839 ; 460  |
                            14840 ; 461  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14841 ; 462  |// Decoders/Encoders
                            14842 ; 463  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14843 ; 464  |//$FILENAME DecMod.src
                            14844 ; 465  |#define RSRC_DECMOD_CODE 148    
                            14845 ; 466  |//$FILENAME mp3p.src
                            14846 ; 467  |#define RSRC_MP3P_CODE 149    
                            14847 ; 468  |//$FILENAME mp3x.src
                            14848 ; 469  |#define RSRC_MP3X_CODE 150    
                            14849 ; 470  |//$FILENAME mp3y.src
                            14850 ; 471  |#define RSRC_MP3Y_CODE 151    
                            14851 ; 472  |//$FILENAME janusp.src
                            14852 ; 473  |#define RSRC_JANUSP_CODE 152    
                            14853 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            14854 ; 475  |
                            14855 ; 476  |//$FILENAME decadpcmimamod.src
                            14856 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            14857 ; 478  |//$FILENAME dec_adpcmp.src
                            14858 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            14859 ; 480  |//$FILENAME dec_adpcmx.src
                            14860 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            14861 ; 482  |//$FILENAME dec_adpcmy.src
                            14862 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            14863 ; 484  |
                            14864 ; 485  |//$FILENAME decadpcmsmvmod.src
                            14865 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            14866 ; 487  |//$FILENAME dec_smvadpcmp.src
                            14867 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            14868 ; 489  |//$FILENAME dec_smvadpcmx.src
                            14869 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                            14870 ; 491  |//$FILENAME dec_smvadpcmy.src
                            14871 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            14872 ; 493  |
                            14873 ; 494  |//$FILENAME encadpcmimamod.src
                            14874 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            14875 ; 496  |//$FILENAME enc_adpcmp.src
                            14876 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                            14877 ; 498  |//$FILENAME enc_adpcmx.src
                            14878 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14879 ; 500  |//$FILENAME enc_adpcmy.src
                            14880 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            14881 ; 502  |
                            14882 ; 503  |//$FILENAME jpeg_p.src
                            14883 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            14884 ; 505  |//$FILENAME jpeg_x.src
                            14885 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            14886 ; 507  |//$FILENAME jpeg_y.src
                            14887 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            14888 ; 509  |//$FILENAME jpeg2_y.src
                            14889 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            14890 ; 511  |//$FILENAME bmp2_y.src
                            14891 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            14892 ; 513  |//$FILENAME bmp_p.src
                            14893 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            14894 ; 515  |
                            14895 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            14896 ; 517  |//$FILENAME smvjpeg_x.src
                            14897 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            14898 ; 519  |//$FILENAME smvjpeg_y.src
                            14899 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            14900 ; 521  |
                            14901 ; 522  |
                            14902 ; 523  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14903 ; 524  |// System Settings
                            14904 ; 525  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14905 ; 526  |//$FILENAME settings.src
                            14906 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            14907 ; 528  |
                            14908 ; 529  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14909 ; 530  |// Media Device Drivers
                            14910 ; 531  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14911 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            14912 ; 533  |//$FILENAME null.src
                            14913 ; 534  |#define RSRC_MMCDD_CODE 174    
                            14914 ; 535  |//$FILENAME null.src
                            14915 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            14916 ; 537  |
                            14917 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                            14918 ; 539  |//  PlayState resources
                            14919 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            14920 ; 541  |//$FILENAME play_icon_with_border.src
                            14921 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            14922 ; 543  |//$FILENAME pause_icon_with_border.src
                            14923 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            14924 ; 545  |//$FILENAME stop_icon_with_border.src
                            14925 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            14926 ; 547  |//$FILENAME record_icon_with_border.src
                            14927 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                            14928 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            14929 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            14930 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            14931 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            14932 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            14933 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            14934 ; 555  |
                            14935 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            14936 ; 557  |//  PlayMode resources
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14937 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            14938 ; 559  |//$FILENAME repeatall_icon.src
                            14939 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            14940 ; 561  |//$FILENAME repeatsong_icon.src
                            14941 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            14942 ; 563  |//$FILENAME shuffle_icon.src
                            14943 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            14944 ; 565  |//$FILENAME random_icon.src
                            14945 ; 566  |#define RSRC_RANDOM_ICON 186    
                            14946 ; 567  |//$FILENAME repeatallclear_icon.src
                            14947 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            14948 ; 569  |//$FILENAME repeatsongclear_icon.src
                            14949 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            14950 ; 571  |//$FILENAME shuffleclear_icon.src
                            14951 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            14952 ; 573  |
                            14953 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            14954 ; 575  |//  Battery Status
                            14955 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            14956 ; 577  |//$FILENAME battery_00.src
                            14957 ; 578  |#define RSRC_BATTERY_00 190    
                            14958 ; 579  |//$FILENAME battery_01.src
                            14959 ; 580  |#define RSRC_BATTERY_01 191    
                            14960 ; 581  |//$FILENAME battery_02.src
                            14961 ; 582  |#define RSRC_BATTERY_02 192    
                            14962 ; 583  |//$FILENAME battery_03.src
                            14963 ; 584  |#define RSRC_BATTERY_03 193    
                            14964 ; 585  |//$FILENAME battery_04.src
                            14965 ; 586  |#define RSRC_BATTERY_04 194    
                            14966 ; 587  |//$FILENAME battery_05.src
                            14967 ; 588  |#define RSRC_BATTERY_05 195    
                            14968 ; 589  |//$FILENAME battery_06.src
                            14969 ; 590  |#define RSRC_BATTERY_06 196    
                            14970 ; 591  |//$FILENAME battery_07.src
                            14971 ; 592  |#define RSRC_BATTERY_07 197    
                            14972 ; 593  |//$FILENAME battery_08.src
                            14973 ; 594  |#define RSRC_BATTERY_08 198    
                            14974 ; 595  |//$FILENAME battery_09.src
                            14975 ; 596  |#define RSRC_BATTERY_09 199    
                            14976 ; 597  |//$FILENAME battery_10.src
                            14977 ; 598  |#define RSRC_BATTERY_10 200    
                            14978 ; 599  |
                            14979 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            14980 ; 601  |//  System Icons
                            14981 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            14982 ; 603  |//$FILENAME disk_small.src
                            14983 ; 604  |#define RSRC_DISK_ICON 201    
                            14984 ; 605  |//$FILENAME lock_small.src
                            14985 ; 606  |#define RSRC_LOCK_ICON 202    
                            14986 ; 607  |//$FILENAME icon_music_mode.src
                            14987 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            14988 ; 609  |//$FILENAME icon_voice_mode.src
                            14989 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                            14990 ; 611  |
                            14991 ; 612  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14992 ; 613  |// Volume Bitmaps
                            14993 ; 614  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14994 ; 615  |//$FILENAME icon_vol_00.src
                            14995 ; 616  |#define RSRC_ICON_VOL_00 205    
                            14996 ; 617  |//$FILENAME icon_vol_01.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14997 ; 618  |#define RSRC_ICON_VOL_01 206    
                            14998 ; 619  |//$FILENAME icon_vol_02.src
                            14999 ; 620  |#define RSRC_ICON_VOL_02 207    
                            15000 ; 621  |//$FILENAME icon_vol_03.src
                            15001 ; 622  |#define RSRC_ICON_VOL_03 208    
                            15002 ; 623  |//$FILENAME icon_vol_04.src
                            15003 ; 624  |#define RSRC_ICON_VOL_04 209    
                            15004 ; 625  |//$FILENAME icon_vol_05.src
                            15005 ; 626  |#define RSRC_ICON_VOL_05 210    
                            15006 ; 627  |//$FILENAME icon_vol_06.src
                            15007 ; 628  |#define RSRC_ICON_VOL_06 211    
                            15008 ; 629  |//$FILENAME icon_vol_07.src
                            15009 ; 630  |#define RSRC_ICON_VOL_07 212    
                            15010 ; 631  |//$FILENAME icon_vol_08.src
                            15011 ; 632  |#define RSRC_ICON_VOL_08 213    
                            15012 ; 633  |//$FILENAME icon_vol_09.src
                            15013 ; 634  |#define RSRC_ICON_VOL_09 214    
                            15014 ; 635  |//$FILENAME icon_vol_10.src
                            15015 ; 636  |#define RSRC_ICON_VOL_10 215    
                            15016 ; 637  |//$FILENAME icon_vol_11.src
                            15017 ; 638  |#define RSRC_ICON_VOL_11 216    
                            15018 ; 639  |//$FILENAME icon_vol_12.src
                            15019 ; 640  |#define RSRC_ICON_VOL_12 217    
                            15020 ; 641  |//$FILENAME icon_vol_13.src
                            15021 ; 642  |#define RSRC_ICON_VOL_13 218    
                            15022 ; 643  |//$FILENAME icon_vol_14.src
                            15023 ; 644  |#define RSRC_ICON_VOL_14 219    
                            15024 ; 645  |//$FILENAME icon_vol_15.src
                            15025 ; 646  |#define RSRC_ICON_VOL_15 220    
                            15026 ; 647  |//$FILENAME icon_vol_16.src
                            15027 ; 648  |#define RSRC_ICON_VOL_16 221    
                            15028 ; 649  |//$FILENAME icon_vol_17.src
                            15029 ; 650  |#define RSRC_ICON_VOL_17 222    
                            15030 ; 651  |//$FILENAME icon_vol_18.src
                            15031 ; 652  |#define RSRC_ICON_VOL_18 223    
                            15032 ; 653  |//$FILENAME icon_vol_19.src
                            15033 ; 654  |#define RSRC_ICON_VOL_19 224    
                            15034 ; 655  |//$FILENAME icon_vol_20.src
                            15035 ; 656  |#define RSRC_ICON_VOL_20 225    
                            15036 ; 657  |//$FILENAME icon_vol_21.src
                            15037 ; 658  |#define RSRC_ICON_VOL_21 226    
                            15038 ; 659  |//$FILENAME icon_vol_22.src
                            15039 ; 660  |#define RSRC_ICON_VOL_22 227    
                            15040 ; 661  |//$FILENAME icon_vol_23.src
                            15041 ; 662  |#define RSRC_ICON_VOL_23 228    
                            15042 ; 663  |//$FILENAME icon_vol_24.src
                            15043 ; 664  |#define RSRC_ICON_VOL_24 229    
                            15044 ; 665  |//$FILENAME icon_vol_25.src
                            15045 ; 666  |#define RSRC_ICON_VOL_25 230    
                            15046 ; 667  |//$FILENAME icon_vol_26.src
                            15047 ; 668  |#define RSRC_ICON_VOL_26 231    
                            15048 ; 669  |//$FILENAME icon_vol_27.src
                            15049 ; 670  |#define RSRC_ICON_VOL_27 232    
                            15050 ; 671  |//$FILENAME icon_vol_28.src
                            15051 ; 672  |#define RSRC_ICON_VOL_28 233    
                            15052 ; 673  |//$FILENAME icon_vol_29.src
                            15053 ; 674  |#define RSRC_ICON_VOL_29 234    
                            15054 ; 675  |//$FILENAME icon_vol_30.src
                            15055 ; 676  |#define RSRC_ICON_VOL_30 235    
                            15056 ; 677  |//$FILENAME icon_vol_31.src
                            15057 ; 678  |#define RSRC_ICON_VOL_31 236    
                            15058 ; 679  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15059 ; 680  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15060 ; 681  |// Splash Screen Stuff
                            15061 ; 682  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15062 ; 683  |//$FILENAME st_bw1.src
                            15063 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            15064 ; 685  |//$FILENAME siglogo1.src
                            15065 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            15066 ; 687  |//$FILENAME siglogo2.src
                            15067 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            15068 ; 689  |//$FILENAME siglogo3.src
                            15069 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            15070 ; 691  |//$FILENAME siglogo4.src
                            15071 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            15072 ; 693  |//$FILENAME siglogo5.src
                            15073 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            15074 ; 695  |//$FILENAME siglogo6.src
                            15075 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            15076 ; 697  |//$FILENAME siglogo7.src
                            15077 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            15078 ; 699  |//$FILENAME siglogo8.src
                            15079 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            15080 ; 701  |//$FILENAME siglogo9.src
                            15081 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            15082 ; 703  |//$FILENAME siglogo10.src
                            15083 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            15084 ; 705  |//$FILENAME siglogo11.src
                            15085 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            15086 ; 707  |//$FILENAME siglogo12.src
                            15087 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            15088 ; 709  |//$FILENAME siglogo13.src
                            15089 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            15090 ; 711  |//$FILENAME siglogo.src
                            15091 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            15092 ; 713  |
                            15093 ; 714  |//$FILENAME locked.src
                            15094 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            15095 ; 716  |
                            15096 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            15097 ; 718  |//  Shutdown
                            15098 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            15099 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            15100 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            15101 ; 722  |//$FILENAME status_16_6_steps_0.src
                            15102 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            15103 ; 724  |//$FILENAME status_16_6_steps_1.src
                            15104 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            15105 ; 726  |//$FILENAME status_16_6_steps_2.src
                            15106 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            15107 ; 728  |//$FILENAME status_16_6_steps_3.src
                            15108 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                            15109 ; 730  |//$FILENAME status_16_6_steps_4.src
                            15110 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            15111 ; 732  |//$FILENAME status_16_6_steps_5.src
                            15112 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            15113 ; 734  |//$FILENAME status_16_6_steps_6.src
                            15114 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            15115 ; 736  |
                            15116 ; 737  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15117 ; 738  |// EQ
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15118 ; 739  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15119 ; 740  |//$FILENAME eq_clear_icon.src
                            15120 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            15121 ; 742  |//$FILENAME rock_icon.src
                            15122 ; 743  |#define RSRC_ROCK_ICON 262    
                            15123 ; 744  |//$FILENAME jazz_icon.src
                            15124 ; 745  |#define RSRC_JAZZ_ICON 263    
                            15125 ; 746  |//$FILENAME classic_icon.src
                            15126 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            15127 ; 748  |//$FILENAME pop_icon.src
                            15128 ; 749  |#define RSRC_POP_ICON 265    
                            15129 ; 750  |//$FILENAME custom_icon.src
                            15130 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            15131 ; 752  |
                            15132 ; 753  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15133 ; 754  |// AB
                            15134 ; 755  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15135 ; 756  |//$FILENAME ab_mark_a.src
                            15136 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            15137 ; 758  |//$FILENAME ab_mark_b.src
                            15138 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            15139 ; 760  |
                            15140 ; 761  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15141 ; 762  |// Menu Display Resources
                            15142 ; 763  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15143 ; 764  |//$FILENAME string_music_menu.src
                            15144 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            15145 ; 766  |//$FILENAME string_mvideo_menu.src
                            15146 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            15147 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            15148 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            15149 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            15150 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            15151 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            15152 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            15153 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            15154 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            15155 ; 776  |//$FILENAME string_voice_menu.src
                            15156 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            15157 ; 778  |//$FILENAME string_audible_menu.src
                            15158 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            15159 ; 780  |//$FILENAME string_fmtuner_menu.src
                            15160 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            15161 ; 782  |//$FILENAME string_settings_menu.src
                            15162 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            15163 ; 784  |//$FILENAME string_eq_menu.src
                            15164 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                            15165 ; 786  |//$FILENAME string_playmode_menu.src
                            15166 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            15167 ; 788  |//$FILENAME string_contrast_menu.src
                            15168 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                            15169 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            15170 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            15171 ; 792  |//$FILENAME string_time_date_menu.src
                            15172 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            15173 ; 794  |//$FILENAME string_set_time_menu.src
                            15174 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15175 ; 796  |//$FILENAME string_set_date_menu.src
                            15176 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            15177 ; 798  |//$FILENAME string_exit_menu.src
                            15178 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            15179 ; 800  |//$FILENAME string_rock_menu.src
                            15180 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            15181 ; 802  |//$FILENAME string_pop_menu.src
                            15182 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            15183 ; 804  |//$FILENAME string_classic_menu.src
                            15184 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            15185 ; 806  |//$FILENAME string_normal_menu.src
                            15186 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            15187 ; 808  |//$FILENAME string_jazz_menu.src
                            15188 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            15189 ; 810  |//$FILENAME string_repeat1_menu.src
                            15190 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            15191 ; 812  |//$FILENAME string_repeatall_menu.src
                            15192 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            15193 ; 814  |//$FILENAME string_shuffle_menu.src
                            15194 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            15195 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            15196 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                            15197 ; 818  |//$FILENAME string_disable_menu.src
                            15198 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            15199 ; 820  |//$FILENAME string_1min_menu.src
                            15200 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            15201 ; 822  |//$FILENAME string_2min_menu.src
                            15202 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            15203 ; 824  |//$FILENAME string_5min_menu.src
                            15204 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            15205 ; 826  |//$FILENAME string_10min_menu.src
                            15206 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            15207 ; 828  |//$FILENAME string_system_menu.src
                            15208 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            15209 ; 830  |//$FILENAME string_about_menu.src
                            15210 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            15211 ; 832  |//$FILENAME string_delete_menu.src
                            15212 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            15213 ; 834  |//$FILENAME string_record_menu.src
                            15214 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            15215 ; 836  |//$FILENAME string_spectrogram_menu.src
                            15216 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            15217 ; 838  |
                            15218 ; 839  |//$FILENAME string_end_of_slide_show.src
                            15219 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            15220 ; 841  |
                            15221 ; 842  |//$FILENAME string_mb.src
                            15222 ; 843  |#define RSRC_STRING_MB 307    
                            15223 ; 844  |
                            15224 ; 845  |//$FILENAME internal_media.src
                            15225 ; 846  |#define RSRC_INT_MEDIA 308    
                            15226 ; 847  |//$FILENAME external_media.src
                            15227 ; 848  |#define RSRC_EXT_MEDIA 309    
                            15228 ; 849  |
                            15229 ; 850  |//$FILENAME about_title.src
                            15230 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            15231 ; 852  |//$FILENAME player_name.src
                            15232 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            15233 ; 854  |
                            15234 ; 855  |//$FILENAME settings_title.src
                            15235 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            15236 ; 857  |//$FILENAME jpeg_display_title.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15237 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            15238 ; 859  |//$FILENAME erase_title.src
                            15239 ; 860  |#define RSRC_ERASE_TITLE 314    
                            15240 ; 861  |
                            15241 ; 862  |//$FILENAME del_warning_no.src
                            15242 ; 863  |#define RSRC_DELETE_NO 315    
                            15243 ; 864  |//$FILENAME del_warning_yes.src
                            15244 ; 865  |#define RSRC_DELETE_YES 316    
                            15245 ; 866  |//$FILENAME del_warning_line1.src
                            15246 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            15247 ; 868  |//$FILENAME del_warning_line2.src
                            15248 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            15249 ; 870  |//$FILENAME lowbattery.src
                            15250 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            15251 ; 872  |//$FILENAME vbr.src
                            15252 ; 873  |#define RSRC_VBR_BITMAP 320    
                            15253 ; 874  |
                            15254 ; 875  |//$FILENAME string_song.src
                            15255 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            15256 ; 877  |//$FILENAME string_voice.src
                            15257 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            15258 ; 879  |
                            15259 ; 880  |//$FILENAME time_date_title.src
                            15260 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            15261 ; 882  |//$FILENAME set_time_title.src
                            15262 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            15263 ; 884  |//$FILENAME set_date_title.src
                            15264 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            15265 ; 886  |//$FILENAME string_searching.src
                            15266 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            15267 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            15268 ; 889  |//  Save Changes
                            15269 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            15270 ; 891  |//$FILENAME save_changes_yes.src
                            15271 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            15272 ; 893  |//$FILENAME save_changes_no.src
                            15273 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            15274 ; 895  |//$FILENAME save_changes_cancel.src
                            15275 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            15276 ; 897  |//$FILENAME save_changes_clear.src
                            15277 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            15278 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            15279 ; 900  |//  Contrast
                            15280 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            15281 ; 902  |//$FILENAME contrast_title.src
                            15282 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            15283 ; 904  |//$FILENAME contrast_frame.src
                            15284 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            15285 ; 906  |//$FILENAME contrast_level0.src
                            15286 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            15287 ; 908  |//$FILENAME contrast_level1.src
                            15288 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                            15289 ; 910  |//$FILENAME contrast_level2.src
                            15290 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            15291 ; 912  |//$FILENAME contrast_level3.src
                            15292 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            15293 ; 914  |//$FILENAME contrast_level4.src
                            15294 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            15295 ; 916  |//$FILENAME contrast_level5.src
                            15296 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            15297 ; 918  |//$FILENAME contrast_level6.src
                            15298 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15299 ; 920  |//$FILENAME contrast_level7.src
                            15300 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            15301 ; 922  |//$FILENAME contrast_level8.src
                            15302 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            15303 ; 924  |//$FILENAME contrast_level9.src
                            15304 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            15305 ; 926  |//$FILENAME contrast_level10.src
                            15306 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            15307 ; 928  |
                            15308 ; 929  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15309 ; 930  |// Funclets
                            15310 ; 931  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15311 ; 932  |//$FILENAME Funclet_SetRTC.src
                            15312 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            15313 ; 934  |//$FILENAME Funclet_InitRTC.src
                            15314 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            15315 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            15316 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            15317 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            15318 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            15319 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            15320 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            15321 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            15322 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            15323 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            15324 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            15325 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            15326 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            15327 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            15328 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            15329 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            15330 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            15331 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            15332 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            15333 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            15334 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            15335 ; 956  |//$FILENAME Funclet_StartProject.src
                            15336 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            15337 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            15338 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            15339 ; 960  |//$FILENAME null.src
                            15340 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            15341 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            15342 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            15343 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            15344 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            15345 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            15346 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            15347 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            15348 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                            15349 ; 970  |//$FILENAME null.src
                            15350 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            15351 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            15352 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            15353 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            15354 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            15355 ; 976  |//$FILENAME null.src
                            15356 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            15357 ; 978  |//$FILENAME null.src
                            15358 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15359 ; 980  |//$FILENAME null.src
                            15360 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            15361 ; 982  |//$FILENAME null.src
                            15362 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            15363 ; 984  |//$FILENAME null.src
                            15364 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            15365 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            15366 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            15367 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            15368 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            15369 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            15370 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            15371 ; 992  |//$FILENAME null.src
                            15372 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            15373 ; 994  |//$FILENAME null.src
                            15374 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            15375 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            15376 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            15377 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            15378 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            15379 ; 1000 |///////////////////////////////////////////////////////////////
                            15380 ; 1001 |// Sanyo FM Tuner Fuclet
                            15381 ; 1002 |///////////////////////////////////////////////////////////////
                            15382 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                                  
                            15383 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations
                                  .src
                            15384 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.
                                  src
                            15385 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoSte
                                  reo.src
                            15386 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                                  
                            15387 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            15388 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.s
                                  rc
                            15389 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            15390 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.sr
                                  c
                            15391 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFiel
                                  dStrength.src
                            15392 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapO
                                  sc.src
                            15393 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmSt
                                  ation.src
                            15394 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPre
                                  set.src
                            15395 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            15396 ; 1017 |
                            15397 ; 1018 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15398 ; 1019 |// WMA Resources
                            15399 ; 1020 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15400 ; 1021 |//$FILENAME wmaCore.src
                            15401 ; 1022 |#define RSRC_WMA_CORE 378    
                            15402 ; 1023 |//$FILENAME wmaMidLow.src
                            15403 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            15404 ; 1025 |//$FILENAME wmaHigh.src
                            15405 ; 1026 |#define RSRC_WMA_HIGH 380    
                            15406 ; 1027 |//$FILENAME wmaHighMid.src
                            15407 ; 1028 |#define RSRC_WMA_HIGHMID 381    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15408 ; 1029 |//$FILENAME wmaMid.src
                            15409 ; 1030 |#define RSRC_WMA_MID 382    
                            15410 ; 1031 |//$FILENAME wmaLow.src
                            15411 ; 1032 |#define RSRC_WMA_LOW 383    
                            15412 ; 1033 |//$FILENAME wmaX1mem.src
                            15413 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            15414 ; 1035 |//$FILENAME wmaYmem.src
                            15415 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            15416 ; 1037 |//$FILENAME wmaLXmem.src
                            15417 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            15418 ; 1039 |//$FILENAME wmaLYmem.src
                            15419 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                            15420 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            15421 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            15422 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            15423 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            15424 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            15425 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            15426 ; 1047 |//$FILENAME drmpdcommon.src
                            15427 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            15428 ; 1049 |//$FILENAME januswmasupport.src
                            15429 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            15430 ; 1051 |//$FILENAME wmalicenseinit.src
                            15431 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            15432 ; 1053 |//$FILENAME wma_tables.src
                            15433 ; 1054 |#define RSRC_WMA_TABLES 394    
                            15434 ; 1055 |//$FILENAME janus_tables.src
                            15435 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            15436 ; 1057 |//$FILENAME wma_constants.src
                            15437 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            15438 ; 1059 |//$FILENAME janus_constants.src
                            15439 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            15440 ; 1061 |//$FILENAME janus_xmem.src
                            15441 ; 1062 |#define RSRC_JANUS_X 398    
                            15442 ; 1063 |//$FILENAME janusy_data.src
                            15443 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            15444 ; 1065 |
                            15445 ; 1066 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15446 ; 1067 |// Fonts -- these are last because they are very large
                            15447 ; 1068 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15448 ; 1069 |//$FILENAME font_table.src
                            15449 ; 1070 |#define RSRC_FONT_TABLE 400    
                            15450 ; 1071 |//$FILENAME font_PGM.src
                            15451 ; 1072 |#define RSRC_PGM_8 401    
                            15452 ; 1073 |//$FILENAME font_SGMs.src
                            15453 ; 1074 |#define RSRC_SGMS_8 402    
                            15454 ; 1075 |//$FILENAME font_script_00.src
                            15455 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            15456 ; 1077 |//$FILENAME font_scripts.src
                            15457 ; 1078 |#define RSRC_SCRIPTS_8 404    
                            15458 ; 1079 |//$FILENAME font_PDM.src
                            15459 ; 1080 |#define RSRC_PDM 405    
                            15460 ; 1081 |//$FILENAME font_SDMs.src
                            15461 ; 1082 |#define RSRC_SDMS 406    
                            15462 ; 1083 |//$FILENAME bitmap_warning.src
                            15463 ; 1084 |#define RSRC_WARNING 407    
                            15464 ; 1085 |//$FILENAME bitmap_device_full.src
                            15465 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            15466 ; 1087 |
                            15467 ; 1088 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15468 ; 1089 |//$FILENAME lcd_controller_init.src
                            15469 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            15470 ; 1091 |
                            15471 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            15472 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            15473 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            15474 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            15475 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            15476 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            15477 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            15478 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            15479 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            15480 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            15481 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            15482 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            15483 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            15484 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            15485 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            15486 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            15487 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            15488 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            15489 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            15490 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            15491 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            15492 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            15493 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            15494 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            15495 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            15496 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            15497 ; 1118 |
                            15498 ; 1119 |
                            15499 ; 1120 |//$FILENAME sysrecord.src
                            15500 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            15501 ; 1122 |
                            15502 ; 1123 |//$FILENAME string_record_settings.src
                            15503 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            15504 ; 1125 |//$FILENAME string_sample_rate.src
                            15505 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            15506 ; 1127 |//$FILENAME string_encoder.src
                            15507 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            15508 ; 1129 |//$FILENAME string_adpcm.src
                            15509 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            15510 ; 1131 |//$FILENAME string_msadpcm.src
                            15511 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            15512 ; 1133 |//$FILENAME string_imadpcm.src
                            15513 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            15514 ; 1135 |//$FILENAME string_pcm.src
                            15515 ; 1136 |#define RSRC_STRING_PCM 430    
                            15516 ; 1137 |//$FILENAME string_internal.src
                            15517 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            15518 ; 1139 |//$FILENAME string_external.src
                            15519 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                            15520 ; 1141 |//$FILENAME string_device.src
                            15521 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            15522 ; 1143 |//$FILENAME string_source.src
                            15523 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            15524 ; 1145 |//$FILENAME string_microphone.src
                            15525 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            15526 ; 1147 |//$FILENAME string_linein.src
                            15527 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            15528 ; 1149 |//$FILENAME string_bits.src
                            15529 ; 1150 |#define RSRC_STRING_BITS 437    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15530 ; 1151 |//$FILENAME string_4.src
                            15531 ; 1152 |#define RSRC_STRING_4 438    
                            15532 ; 1153 |//$FILENAME string_8.src
                            15533 ; 1154 |#define RSRC_STRING_8 439    
                            15534 ; 1155 |//$FILENAME string_16.src
                            15535 ; 1156 |#define RSRC_STRING_16 440    
                            15536 ; 1157 |//$FILENAME string_24.src
                            15537 ; 1158 |#define RSRC_STRING_24 441    
                            15538 ; 1159 |//$FILENAME string_fm.src
                            15539 ; 1160 |#define RSRC_STRING_FM 442    
                            15540 ; 1161 |//$FILENAME string_mono.src
                            15541 ; 1162 |#define RSRC_STRING_MONO 443    
                            15542 ; 1163 |//$FILENAME string_stereo.src
                            15543 ; 1164 |#define RSRC_STRING_STEREO 444    
                            15544 ; 1165 |//$FILENAME string_8000hz.src
                            15545 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            15546 ; 1167 |//$FILENAME string_11025hz.src
                            15547 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            15548 ; 1169 |//$FILENAME string_16000hz.src
                            15549 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            15550 ; 1171 |//$FILENAME string_22050hz.src
                            15551 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            15552 ; 1173 |//$FILENAME string_32000hz.src
                            15553 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            15554 ; 1175 |//$FILENAME string_44100hz.src
                            15555 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            15556 ; 1177 |//$FILENAME string_48000hz.src
                            15557 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            15558 ; 1179 |//$FILENAME string_channels.src
                            15559 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            15560 ; 1181 |//$FILENAME string_spaces.src
                            15561 ; 1182 |#define RSRC_STRING_SPACES 453    
                            15562 ; 1183 |//$FILENAME slider_bar.src
                            15563 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            15564 ; 1185 |//$FILENAME slider_bar_inv.src
                            15565 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            15566 ; 1187 |//$FILENAME slider_track.src
                            15567 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            15568 ; 1189 |//$FILENAME string_no_files.src
                            15569 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            15570 ; 1191 |
                            15571 ; 1192 |/////////////////////////////////////////////////////////////////////
                            15572 ; 1193 |//  Time and Date Resource Strings
                            15573 ; 1194 |/////////////////////////////////////////////////////////////////////
                            15574 ; 1195 |//$FILENAME string_sunday.src
                            15575 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            15576 ; 1197 |//$FILENAME string_monday.src
                            15577 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            15578 ; 1199 |//$FILENAME string_tuesday.src
                            15579 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            15580 ; 1201 |//$FILENAME string_wednesday.src
                            15581 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                            15582 ; 1203 |//$FILENAME string_thursday.src
                            15583 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            15584 ; 1205 |//$FILENAME string_friday.src
                            15585 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            15586 ; 1207 |//$FILENAME string_saturday.src
                            15587 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            15588 ; 1209 |//$FILENAME string_am.src
                            15589 ; 1210 |#define RSRC_STRING_AM 465    
                            15590 ; 1211 |//$FILENAME string_pm.src
                            15591 ; 1212 |#define RSRC_STRING_PM 466    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15592 ; 1213 |//$FILENAME string_amclear.src
                            15593 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            15594 ; 1215 |//$FILENAME string_slash.src
                            15595 ; 1216 |#define RSRC_STRING_SLASH 468    
                            15596 ; 1217 |//$FILENAME string_colon.src
                            15597 ; 1218 |#define RSRC_STRING_COLON 469    
                            15598 ; 1219 |//$FILENAME string_12hour.src
                            15599 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            15600 ; 1221 |//$FILENAME string_24hour.src
                            15601 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            15602 ; 1223 |//$FILENAME string_format.src
                            15603 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            15604 ; 1225 |//$FILENAME string_mmddyyyy.src
                            15605 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            15606 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            15607 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            15608 ; 1229 |//$FILENAME string_yyyymmdd.src
                            15609 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            15610 ; 1231 |//$FILENAME string_ok.src
                            15611 ; 1232 |#define RSRC_STRING_OK 476    
                            15612 ; 1233 |//$FILENAME string_cancel.src
                            15613 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            15614 ; 1235 |//$FILENAME negative_sign.src
                            15615 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            15616 ; 1237 |//$FILENAME string_dec_pt5.src
                            15617 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            15618 ; 1239 |//$FILENAME string_dec_pt0.src
                            15619 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            15620 ; 1241 |//$FILENAME string_db.src
                            15621 ; 1242 |#define RSRC_DB_STRING 481    
                            15622 ; 1243 |//$FILENAME string_hz2.src
                            15623 ; 1244 |#define RSRC_HZ2_STRING 482    
                            15624 ; 1245 |
                            15625 ; 1246 |
                            15626 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            15627 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            15628 ; 1249 |//$FILENAME metadata_codebank.src
                            15629 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            15630 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            15631 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            15632 ; 1253 |//$FILENAME wmametadata_codebank.src
                            15633 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            15634 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            15635 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            15636 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            15637 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            15638 ; 1259 |//$FILENAME playlist2init_codebank.src
                            15639 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            15640 ; 1261 |
                            15641 ; 1262 |//$FILENAME delete_successful.src
                            15642 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            15643 ; 1264 |//$FILENAME delete_error.src
                            15644 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            15645 ; 1266 |//$FILENAME lic_expired.src
                            15646 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            15647 ; 1268 |//$FILENAME id3v2_codebank.src
                            15648 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            15649 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            15650 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                            15651 ; 1272 |//$FILENAME lyrics3_codebank.src
                            15652 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            15653 ; 1274 |//$FILENAME lrc_codebank.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15654 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            15655 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            15656 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            15657 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            15658 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            15659 ; 1280 |//$FILENAME apicframe_codebank.src
                            15660 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            15661 ; 1282 |
                            15662 ; 1283 |//$FILENAME exmediaerror1.src
                            15663 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            15664 ; 1285 |//$FILENAME exmediaerror2.src
                            15665 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            15666 ; 1287 |//$FILENAME inmediaerror1.src
                            15667 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            15668 ; 1289 |
                            15669 ; 1290 |//$FILENAME backlight_title.src
                            15670 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                            15671 ; 1292 |//$FILENAME backlight_state_on.src
                            15672 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            15673 ; 1294 |//$FILENAME backlight_state_off.src
                            15674 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            15675 ; 1296 |//$FILENAME backlightmenu.src
                            15676 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            15677 ; 1298 |//$FILENAME string_backlight_menu.src
                            15678 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            15679 ; 1300 |
                            15680 ; 1301 |//$FILENAME enc_mp3mod.src
                            15681 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            15682 ; 1303 |//$FILENAME enc_mp3p.src
                            15683 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            15684 ; 1305 |//$FILENAME enc_mp3x.src
                            15685 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            15686 ; 1307 |//$FILENAME enc_mp3y.src
                            15687 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            15688 ; 1309 |//$FILENAME mp3_implementation.src
                            15689 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            15690 ; 1311 |//$FILENAME string_mp3.src
                            15691 ; 1312 |#define RSRC_STRING_MP3 513    
                            15692 ; 1313 |//$FILENAME string_all.src
                            15693 ; 1314 |#define RSRC_STRING_ALL 514    
                            15694 ; 1315 |
                            15695 ; 1316 |//$FILENAME mediastartup.src
                            15696 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            15697 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            15698 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                            15699 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                            15700 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            15701 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            15702 ; 1323 |
                            15703 ; 1324 |//$FILENAME nanddatadriveinit.src
                            15704 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            15705 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                            15706 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            15707 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            15708 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            15709 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            15710 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            15711 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            15712 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                            15713 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            15714 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            15715 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15716 ; 1337 |
                            15717 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            15718 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            15719 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            15720 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            15721 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            15722 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            15723 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            15724 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            15725 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            15726 ; 1347 |
                            15727 ; 1348 |//$FILENAME vbr_codebank.src
                            15728 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            15729 ; 1350 |
                            15730 ; 1351 |//$FILENAME string_recordtest_menu.src
                            15731 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            15732 ; 1353 |//$FILENAME string_recordtest_duration.src
                            15733 ; 1354 |#define RSRC_STRING_DURATION 520    
                            15734 ; 1355 |//$FILENAME string_recordtest_time5.src
                            15735 ; 1356 |#define RSRC_STRING_TIME5 521    
                            15736 ; 1357 |//$FILENAME string_recordtest_time10.src
                            15737 ; 1358 |#define RSRC_STRING_TIME10 522    
                            15738 ; 1359 |//$FILENAME string_recordtest_time30.src
                            15739 ; 1360 |#define RSRC_STRING_TIME30 523    
                            15740 ; 1361 |//$FILENAME string_recordtest_time60.src
                            15741 ; 1362 |#define RSRC_STRING_TIME60 524    
                            15742 ; 1363 |//$FILENAME string_recordtest_time300.src
                            15743 ; 1364 |#define RSRC_STRING_TIME300 525    
                            15744 ; 1365 |//$FILENAME string_recordtest_time600.src
                            15745 ; 1366 |#define RSRC_STRING_TIME600 526    
                            15746 ; 1367 |
                            15747 ; 1368 |//$FILENAME test_title.src
                            15748 ; 1369 |#define RSRC_TEST_TITLE 527    
                            15749 ; 1370 |//$FILENAME testmenu.src
                            15750 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            15751 ; 1372 |
                            15752 ; 1373 |
                            15753 ; 1374 |//$FILENAME mmcmediastartup.src
                            15754 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            15755 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            15756 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            15757 ; 1378 |//$FILENAME mmcinfo.src
                            15758 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            15759 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            15760 ; 1381 |//$FILENAME mmcerase.src
                            15761 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            15762 ; 1383 |
                            15763 ; 1384 |
                            15764 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            15765 ; 1386 |
                            15766 ; 1387 |//$FILENAME mmcenumerate.src
                            15767 ; 1388 |#define RSRC_MMCENUMERATE 532    
                            15768 ; 1389 |//$FILENAME mmcresetdevice.src
                            15769 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            15770 ; 1391 |//$FILENAME mmcprocesscsd.src
                            15771 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            15772 ; 1393 |//$FILENAME mmcprocesscid.src
                            15773 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            15774 ; 1395 |//$FILENAME mmcprocesscid2.src
                            15775 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            15776 ; 1397 |//$FILENAME mmcdetectpresence.src
                            15777 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15778 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            15779 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            15780 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            15781 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            15782 ; 1403 |
                            15783 ; 1404 |//$FILENAME mmcread.src
                            15784 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            15785 ; 1406 |//$FILENAME mmcmediainit.src
                            15786 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            15787 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            15788 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            15789 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            15790 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            15791 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            15792 ; 1413 |
                            15793 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            15794 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            15795 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            15796 ; 1417 |
                            15797 ; 1418 |
                            15798 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            15799 ; 1420 |//  File system
                            15800 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            15801 ; 1422 |//$FILENAME arrangefilename.src
                            15802 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            15803 ; 1424 |//$FILENAME clearcluster.src
                            15804 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            15805 ; 1426 |//$FILENAME createdirectory.src
                            15806 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            15807 ; 1428 |//$FILENAME deletecontent.src
                            15808 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            15809 ; 1430 |//$FILENAME deleterecord.src
                            15810 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            15811 ; 1432 |//$FILENAME fastopen.src
                            15812 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            15813 ; 1434 |//$FILENAME fcreate.src
                            15814 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            15815 ; 1436 |//$FILENAME filegetattrib.src
                            15816 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            15817 ; 1438 |//$FILENAME filegetdate.src
                            15818 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            15819 ; 1440 |//$FILENAME filesetattrib.src
                            15820 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            15821 ; 1442 |//$FILENAME filesetdate.src
                            15822 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            15823 ; 1444 |//$FILENAME fsinit.src
                            15824 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            15825 ; 1446 |//$FILENAME fsshutdown.src
                            15826 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            15827 ; 1448 |//$FILENAME readdevicerecord.src
                            15828 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            15829 ; 1450 |//$FILENAME checkspaceinrootdir.src
                            15830 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            15831 ; 1452 |//$FILENAME setcwdhandle.src
                            15832 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            15833 ; 1454 |//$FILENAME fsdriveinit.src
                            15834 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            15835 ; 1456 |//$FILENAME fsclearBuf.src
                            15836 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                            15837 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            15838 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.s
                                  rc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15839 ; 1460 |//$FILENAME fgetfasthandle.src
                            15840 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            15841 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            15842 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            15843 ; 1464 |//$FILENAME isfileopen.src
                            15844 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            15845 ; 1466 |//$FILENAME iscurrworkdir.src
                            15846 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            15847 ; 1468 |//$FILENAME chdir.src
                            15848 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            15849 ; 1470 |//$FILENAME chdirFromOffset.src
                            15850 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            15851 ; 1472 |//$FILENAME deletetree.src
                            15852 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            15853 ; 1474 |//$FILENAME deleteallrecords.src
                            15854 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            15855 ; 1476 |//$FILENAME cleardata.src
                            15856 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            15857 ; 1478 |//$FILENAME changetolowleveldir.src
                            15858 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            15859 ; 1480 |//$FILENAME getrecordnumber.src
                            15860 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            15861 ; 1482 |//$FILENAME fileremove.src
                            15862 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            15863 ; 1484 |//$FILENAME charactersearch.src
                            15864 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            15865 ; 1486 |//$FILENAME stringcompare.src
                            15866 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            15867 ; 1488 |//$FILENAME fopenw.src
                            15868 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            15869 ; 1490 |//$FILENAME fremove.src
                            15870 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            15871 ; 1492 |//$FILENAME fremovew.src
                            15872 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            15873 ; 1494 |//$FILENAME mkdir.src
                            15874 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            15875 ; 1496 |//$FILENAME mkdirw.src
                            15876 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            15877 ; 1498 |//$FILENAME rmdir.src
                            15878 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            15879 ; 1500 |//$FILENAME rmdirw.src
                            15880 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            15881 ; 1502 |//$FILENAME fgetc.src
                            15882 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            15883 ; 1504 |//$FILENAME fgets.src
                            15884 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            15885 ; 1506 |//$FILENAME fputc.src
                            15886 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            15887 ; 1508 |//$FILENAME fputs.src
                            15888 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            15889 ; 1510 |//$FILENAME arrangelongfilename.src
                            15890 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                            15891 ; 1512 |//$FILENAME convert_itoa.src
                            15892 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            15893 ; 1514 |//$FILENAME createdirrecord.src
                            15894 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            15895 ; 1516 |//$FILENAME chksum.src
                            15896 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            15897 ; 1518 |//$FILENAME createshortdirrecord.src
                            15898 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            15899 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            15900 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15901 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            15902 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            15903 ; 1524 |//$FILENAME extractfilenamew.src
                            15904 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            15905 ; 1526 |//$FILENAME extractpathw.src
                            15906 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            15907 ; 1528 |//$FILENAME findfreerecord.src
                            15908 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            15909 ; 1530 |//$FILENAME getnamew.src
                            15910 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            15911 ; 1532 |//$FILENAME isdirectoryempty.src
                            15912 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            15913 ; 1534 |//$FILENAME isshortnamevalid.src
                            15914 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            15915 ; 1536 |//$FILENAME longdirmatch.src
                            15916 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            15917 ; 1538 |//$FILENAME unicodetooem.src
                            15918 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            15919 ; 1540 |//$FILENAME matchdirrecordw.src
                            15920 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            15921 ; 1542 |//$FILENAME setcwd.src
                            15922 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            15923 ; 1544 |//$FILENAME setshortfilename.src
                            15924 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            15925 ; 1546 |//$FILENAME generatefilenametail.src
                            15926 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            15927 ; 1548 |//$FILENAME dbcstounicode.src
                            15928 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            15929 ; 1550 |//$FILENAME strcpy.src
                            15930 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            15931 ; 1552 |//$FILENAME strcpyw.src
                            15932 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            15933 ; 1554 |//$FILENAME strlengthw.src
                            15934 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            15935 ; 1556 |//$FILENAME filesystempresent.src
                            15936 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            15937 ; 1558 |//$FILENAME DataDriveInit.src
                            15938 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            15939 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            15940 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            15941 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            15942 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            15943 ; 1564 |//$FILENAME DataDriveGetSize.src
                            15944 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            15945 ; 1566 |//$FILENAME ConstructLongFileName.src
                            15946 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            15947 ; 1568 |//$FILENAME strcpyucs3_2.src
                            15948 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            15949 ; 1570 |//$FILENAME getvolumelabel.src
                            15950 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                            15951 ; 1572 |//$FILENAME setvolumelabel.src
                            15952 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                            15953 ; 1574 |//$FILENAME disk_full.src
                            15954 ; 1575 |#define RSRC_DISK_FULL 619    
                            15955 ; 1576 |//$FILENAME chkdskstartup.src
                            15956 ; 1577 |#define RSRC_CHECKDISK 620    
                            15957 ; 1578 |//$FILENAME chkdskstartupy.src
                            15958 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            15959 ; 1580 |//$FILENAME low_level_pwr_line1.src
                            15960 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            15961 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            15962 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15963 ; 1584 |//$FILENAME string_bit_rate.src
                            15964 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            15965 ; 1586 |//$FILENAME string_96000hz.src
                            15966 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            15967 ; 1588 |//$FILENAME string_112000hz.src
                            15968 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            15969 ; 1590 |//$FILENAME string_128000hz.src
                            15970 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            15971 ; 1592 |//$FILENAME string_160000hz.src
                            15972 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            15973 ; 1594 |//$FILENAME string_192000hz.src
                            15974 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            15975 ; 1596 |//$FILENAME string_224000hz.src
                            15976 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            15977 ; 1598 |//$FILENAME string_256000hz.src
                            15978 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            15979 ; 1600 |//$FILENAME string_320000hz.src
                            15980 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            15981 ; 1602 |//$FILENAME string_hz.src
                            15982 ; 1603 |#define RSRC_STRING_HZ 633    
                            15983 ; 1604 |//$FILENAME EncCommonp.src
                            15984 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            15985 ; 1606 |//$FILENAME adc_adcx.src
                            15986 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            15987 ; 1608 |//$FILENAME adc_adcy.src
                            15988 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            15989 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            15990 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            15991 ; 1612 |//$FILENAME string_album.src
                            15992 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            15993 ; 1614 |//$FILENAME string_encoder_song.src
                            15994 ; 1615 |#define RSRC_STRING_SONG 639    
                            15995 ; 1616 |//$FILENAME string_mode.src
                            15996 ; 1617 |#define RSRC_STRING_MODE 640    
                            15997 ; 1618 |
                            15998 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            15999 ; 1620 |// display related
                            16000 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            16001 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            16002 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            16003 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            16004 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            16005 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            16006 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            16007 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            16008 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            16009 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            16010 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            16011 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            16012 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            16013 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            16014 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                            16015 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            16016 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            16017 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            16018 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            16019 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            16020 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            16021 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                            16022 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            16023 ; 1644 |
                            16024 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16025 ; 1646 |//WMDRM Related
                            16026 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            16027 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            16028 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            16029 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            16030 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            16031 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            16032 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            16033 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            16034 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            16035 ; 1656 |//$FILENAME verifychecksum.src
                            16036 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            16037 ; 1658 |//$FILENAME drm_b64_encodew.src
                            16038 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            16039 ; 1660 |//$FILENAME _performactions.src
                            16040 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            16041 ; 1662 |//$FILENAME _processendofchain.src
                            16042 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            16043 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            16044 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            16045 ; 1666 |//$FILENAME drmcrt_towlower.src
                            16046 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            16047 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            16048 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            16049 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            16050 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            16051 ; 1672 |//$FILENAME drmcrt_memmove.src
                            16052 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            16053 ; 1674 |//$FILENAME performoperation_part1.src
                            16054 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            16055 ; 1676 |//$FILENAME performoperation_part2.src
                            16056 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            16057 ; 1678 |//$FILENAME performoperation_part3.src
                            16058 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            16059 ; 1680 |//$FILENAME performoperation_part4.src
                            16060 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            16061 ; 1682 |//$FILENAME performoperation_part5.src
                            16062 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            16063 ; 1684 |//$FILENAME performoperation_part6.src
                            16064 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            16065 ; 1686 |//$FILENAME isvalidfunction.src
                            16066 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            16067 ; 1688 |//$FILENAME functiongetvalue.src
                            16068 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            16069 ; 1690 |//$FILENAME globalsetvariable.src
                            16070 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            16071 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            16072 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            16073 ; 1694 |//$FILENAME variabledrmgetorset.src
                            16074 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            16075 ; 1696 |//$FILENAME variableappgetorset.src
                            16076 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                            16077 ; 1698 |//$FILENAME variablelicensegetorset.src
                            16078 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            16079 ; 1700 |//$FILENAME variablecontentgetorset.src
                            16080 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            16081 ; 1702 |//$FILENAME variabledevicegetorset.src
                            16082 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            16083 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                            16084 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            16085 ; 1706 |//$FILENAME drm_hds_createstore.src
                            16086 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16087 ; 1708 |//$FILENAME drm_hds_init.src
                            16088 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            16089 ; 1710 |//$FILENAME drm_hds_uninit.src
                            16090 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            16091 ; 1712 |//$FILENAME drm_hds_openstore.src
                            16092 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            16093 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            16094 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            16095 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            16096 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            16097 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            16098 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            16099 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            16100 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            16101 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            16102 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            16103 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            16104 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            16105 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            16106 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            16107 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            16108 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            16109 ; 1730 |//$FILENAME _hdscleanupstore.src
                            16110 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            16111 ; 1732 |//$FILENAME drm_lst_clean.src
                            16112 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            16113 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            16114 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            16115 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            16116 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            16117 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            16118 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            16119 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            16120 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            16121 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            16122 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            16123 ; 1744 |//$FILENAME _writesrn.src
                            16124 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            16125 ; 1746 |//$FILENAME _writecommonblockheader.src
                            16126 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            16127 ; 1748 |//$FILENAME _writechildblockheader.src
                            16128 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            16129 ; 1750 |//$FILENAME _readdatablockheader.src
                            16130 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            16131 ; 1752 |//$FILENAME _writedatablockheader.src
                            16132 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            16133 ; 1754 |//$FILENAME _hdsexpandstore.src
                            16134 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            16135 ; 1756 |//$FILENAME _hdsallocblock.src
                            16136 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            16137 ; 1758 |//$FILENAME _hdsfreeblock.src
                            16138 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                            16139 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            16140 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            16141 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            16142 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            16143 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            16144 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            16145 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                            16146 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            16147 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            16148 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16149 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            16150 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            16151 ; 1772 |//$FILENAME _hdsremoveslot.src
                            16152 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            16153 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            16154 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            16155 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            16156 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            16157 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            16158 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            16159 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            16160 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            16161 ; 1782 |//$FILENAME _hdsslotresize.src
                            16162 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            16163 ; 1784 |//$FILENAME _isnull.src
                            16164 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            16165 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            16166 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            16167 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            16168 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            16169 ; 1790 |//$FILENAME _readsrn.src
                            16170 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            16171 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            16172 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                            16173 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            16174 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            16175 ; 1796 |//$FILENAME _hdsslotwrite.src
                            16176 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            16177 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            16178 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            16179 ; 1800 |//$FILENAME drm_lst_close.src
                            16180 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            16181 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            16182 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            16183 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            16184 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            16185 ; 1806 |//$FILENAME _processextensions.src
                            16186 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            16187 ; 1808 |//$FILENAME _processidlist.src
                            16188 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            16189 ; 1810 |//$FILENAME _processexclusions.src
                            16190 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            16191 ; 1812 |//$FILENAME _processinclusions.src
                            16192 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            16193 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            16194 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            16195 ; 1816 |//$FILENAME _getopllevel.src
                            16196 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            16197 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            16198 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            16199 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            16200 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                            16201 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                            16202 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            16203 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            16204 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            16205 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            16206 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            16207 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                            16208 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            16209 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            16210 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 270

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16211 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            16212 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            16213 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            16214 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            16215 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            16216 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            16217 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            16218 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            16219 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            16220 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            16221 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            16222 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            16223 ; 1844 |//$FILENAME overlappingdates.src
                            16224 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            16225 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            16226 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            16227 ; 1848 |//$FILENAME neginfdate.src
                            16228 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            16229 ; 1850 |//$FILENAME infdate.src
                            16230 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            16231 ; 1852 |//$FILENAME isexpired.src
                            16232 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            16233 ; 1854 |//$FILENAME getsecstateattr.src
                            16234 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            16235 ; 1856 |//$FILENAME setexpirycategory.src
                            16236 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            16237 ; 1858 |//$FILENAME getv2licenseinfo.src
                            16238 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            16239 ; 1860 |//$FILENAME getnextlicense.src
                            16240 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            16241 ; 1862 |//$FILENAME aggregate.src
                            16242 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            16243 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            16244 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            16245 ; 1866 |//$FILENAME _scannodeforattributew.src
                            16246 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            16247 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            16248 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            16249 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            16250 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            16251 ; 1872 |//$FILENAME _createdevicestore.src
                            16252 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            16253 ; 1874 |//$FILENAME _mapdrmerror.src
                            16254 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            16255 ; 1876 |//$FILENAME _comparemachineid.src
                            16256 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            16257 ; 1878 |//$FILENAME initmgrcontext.src
                            16258 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            16259 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            16260 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            16261 ; 1882 |//$FILENAME drm_mgr_commit.src
                            16262 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                            16263 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            16264 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            16265 ; 1886 |//$FILENAME januscleandatastore.src
                            16266 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            16267 ; 1888 |//$FILENAME drm_mtr_openid.src
                            16268 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            16269 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                            16270 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            16271 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            16272 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 271

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16273 ; 1894 |//$FILENAME oem_setendoffile.src
                            16274 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            16275 ; 1896 |//$FILENAME oem_genrandombytes.src
                            16276 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            16277 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            16278 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            16279 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            16280 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            16281 ; 1902 |//$FILENAME oem_setdevicecert.src
                            16282 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            16283 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            16284 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            16285 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            16286 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            16287 ; 1908 |//$FILENAME oem_getuniqueid.src
                            16288 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            16289 ; 1910 |//$FILENAME oem_getdevicecert.src
                            16290 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            16291 ; 1912 |//$FILENAME drm_snc_openstore.src
                            16292 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            16293 ; 1914 |//$FILENAME drm_snc_closestore.src
                            16294 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            16295 ; 1916 |//$FILENAME _setkidstoredata.src
                            16296 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            16297 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            16298 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            16299 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            16300 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            16301 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            16302 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            16303 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            16304 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            16305 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            16306 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            16307 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            16308 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            16309 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            16310 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            16311 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            16312 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            16313 ; 1934 |//$FILENAME _hdsprealloc.src
                            16314 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            16315 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            16316 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            16317 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            16318 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            16319 ; 1940 |//$FILENAME gendevicecertificate.src
                            16320 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            16321 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            16322 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            16323 ; 1944 |//$FILENAME copyhdsdtore.src
                            16324 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                            16325 ; 1946 |//$FILENAME generatedevicecert.src
                            16326 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            16327 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            16328 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            16329 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            16330 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            16331 ; 1952 |//$FILENAME _hdsupdatesrn.src
                            16332 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            16333 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            16334 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 272

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16335 ; 1956 |//$FILENAME _checksecureclock.src
                            16336 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            16337 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            16338 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            16339 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            16340 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            16341 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            16342 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            16343 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            16344 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            16345 ; 1966 |//$FILENAME strtol.src
                            16346 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            16347 ; 1968 |//$FILENAME mktime.src
                            16348 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            16349 ; 1970 |//$FILENAME gmtime.src
                            16350 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            16351 ; 1972 |//$FILENAME localtime.src
                            16352 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            16353 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            16354 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            16355 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            16356 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            16357 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            16358 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            16359 ; 1980 |//$FILENAME oem_setsystemtime.src
                            16360 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            16361 ; 1982 |//$FILENAME const_pkcrypto.src
                            16362 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            16363 ; 1984 |//$FILENAME const_y.src
                            16364 ; 1985 |#define RSRC_CONST_Y 820    
                            16365 ; 1986 |//$FILENAME aes_dec_table.src
                            16366 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            16367 ; 1988 |//$FILENAME aes_key_table.src
                            16368 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            16369 ; 1990 |//$FILENAME aes_enc_table.src
                            16370 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            16371 ; 1992 |//$FILENAME device_cert.src
                            16372 ; 1993 |#define RSRC_DEVCERT 824    
                            16373 ; 1994 |//$FILENAME devcert_template.src
                            16374 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            16375 ; 1996 |//$FILENAME getbase64decodedkey.src
                            16376 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            16377 ; 1998 |//$FILENAME _initslot.src
                            16378 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            16379 ; 2000 |//$FILENAME hdsimplcommon.src
                            16380 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            16381 ; 2002 |//$FILENAME hdsimpl_p.src
                            16382 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            16383 ; 2004 |
                            16384 ; 2005 |
                            16385 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            16386 ; 2007 |//pkcrypto Related
                            16387 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            16388 ; 2009 |//$FILENAME two_adic_inverse.src
                            16389 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            16390 ; 2011 |//$FILENAME mp_shift.src
                            16391 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            16392 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            16393 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                            16394 ; 2015 |//$FILENAME set_immediate.src
                            16395 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            16396 ; 2017 |//$FILENAME multiply_immediate.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 273

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16397 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            16398 ; 2019 |//$FILENAME multiply.src
                            16399 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            16400 ; 2021 |//$FILENAME divide_precondition_1.src
                            16401 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            16402 ; 2023 |//$FILENAME divide_immediate.src
                            16403 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            16404 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            16405 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            16406 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            16407 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            16408 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            16409 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            16410 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            16411 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            16412 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            16413 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            16414 ; 2035 |//$FILENAME ecaffine_addition.src
                            16415 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            16416 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            16417 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            16418 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            16419 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            16420 ; 2041 |//$FILENAME kfdesc_initialize.src
                            16421 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            16422 ; 2043 |//$FILENAME kimmediate.src
                            16423 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                            16424 ; 2045 |//$FILENAME kprime_immediater.src
                            16425 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            16426 ; 2047 |//$FILENAME kprime_sqrter.src
                            16427 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            16428 ; 2049 |//$FILENAME kinitialize_prime.src
                            16429 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            16430 ; 2051 |//$FILENAME mod_lucasuv.src
                            16431 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            16432 ; 2053 |//$FILENAME mod_lucas.src
                            16433 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            16434 ; 2055 |//$FILENAME bucket_multiply.src
                            16435 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            16436 ; 2057 |//$FILENAME mod_exp2000.src
                            16437 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            16438 ; 2059 |//$FILENAME mod_exp.src
                            16439 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            16440 ; 2061 |//$FILENAME modmul_choices1.src
                            16441 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            16442 ; 2063 |//$FILENAME mod_sqrt.src
                            16443 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            16444 ; 2065 |//$FILENAME create_modulus.src
                            16445 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            16446 ; 2067 |//$FILENAME from_modular.src
                            16447 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            16448 ; 2069 |//$FILENAME add_immediate.src
                            16449 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            16450 ; 2071 |//$FILENAME add_diff.src
                            16451 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                            16452 ; 2073 |//$FILENAME add_full.src
                            16453 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            16454 ; 2075 |//$FILENAME compare_sum_same.src
                            16455 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                            16456 ; 2077 |//$FILENAME sub_immediate.src
                            16457 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            16458 ; 2079 |//$FILENAME mp_initialization.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 274

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16459 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            16460 ; 2081 |//$FILENAME new_random_bytes.src
                            16461 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            16462 ; 2083 |//$FILENAME new_random_dword_interval.src
                            16463 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            16464 ; 2085 |//$FILENAME new_random_digit_interval.src
                            16465 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            16466 ; 2087 |//$FILENAME new_random_mod.src
                            16467 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            16468 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            16469 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            16470 ; 2091 |//$FILENAME new_random_digits.src
                            16471 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            16472 ; 2093 |//$FILENAME words_to_ecaffine.src
                            16473 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            16474 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            16475 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            16476 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            16477 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            16478 ; 2099 |//$FILENAME pkinit.src
                            16479 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            16480 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            16481 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            16482 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            16483 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            16484 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            16485 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            16486 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            16487 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            16488 ; 2109 |//$FILENAME fe2ipmod.src
                            16489 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            16490 ; 2111 |//$FILENAME drm_pk_sign.src
                            16491 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            16492 ; 2113 |//$FILENAME drm_pk_verify.src
                            16493 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            16494 ; 2115 |//$FILENAME random_bytes.src
                            16495 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            16496 ; 2117 |//$FILENAME mp_gcdex.src
                            16497 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            16498 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            16499 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            16500 ; 2121 |//$FILENAME pkcrypto_p.src
                            16501 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            16502 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            16503 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            16504 ; 2125 |//$FILENAME del_all_warning_line2.src
                            16505 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            16506 ; 2127 |//$FILENAME del_all_file_star.src
                            16507 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            16508 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            16509 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            16510 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                            16511 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            16512 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            16513 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            16514 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            16515 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            16516 ; 2137 |
                            16517 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                            16518 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            16519 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            16520 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 275

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16521 ; 2142 |
                            16522 ; 2143 |
                            16523 ; 2144 |// Added to allow rechargeable battery configurations to build
                            16524 ; 2145 |//$FILENAME battery_charging.src
                            16525 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            16526 ; 2147 |//$FILENAME batterychargecodebank.src
                            16527 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            16528 ; 2149 |//$FILENAME updatevolume.src
                            16529 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            16530 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            16531 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            16532 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            16533 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            16534 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            16535 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            16536 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            16537 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            16538 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            16539 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            16540 ; 2161 |//$FILENAME _iscachedevent.src
                            16541 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            16542 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            16543 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            16544 ; 2165 |//$FILENAME oem_data.src
                            16545 ; 2166 |#define RSRC_OEM_DATA 906    
                            16546 ; 2167 |//$FILENAME gpk_p.src
                            16547 ; 2168 |#define RSRC_GPK_P 907    
                            16548 ; 2169 |//$FILENAME key_data.src
                            16549 ; 2170 |#define RSRC_KEY_DATA 908    
                            16550 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            16551 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            16552 ; 2173 |//$FILENAME string_working.src
                            16553 ; 2174 |#define RSRC_STRING_WORKING 910    
                            16554 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            16555 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            16556 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            16557 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            16558 ; 2179 |
                            16559 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            16560 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            16561 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            16562 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            16563 ; 2184 |
                            16564 ; 2185 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16565 ; 2186 |// Audible ACELP Resources
                            16566 ; 2187 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16567 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            16568 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            16569 ; 2190 |//$FILENAME AudibleAcelpP.src
                            16570 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                            16571 ; 2192 |//$FILENAME AudibleAcelpX.src
                            16572 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            16573 ; 2194 |//$FILENAME AudibleAcelpY.src
                            16574 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            16575 ; 2196 |
                            16576 ; 2197 |//$FILENAME AudibleDecMod.src
                            16577 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                            16578 ; 2199 |//$FILENAME audiblemp3p.src
                            16579 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            16580 ; 2201 |//$FILENAME audiblemp3x.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 276

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16581 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            16582 ; 2203 |//$FILENAME audiblemp3y.src
                            16583 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            16584 ; 2205 |
                            16585 ; 2206 |//$FILENAME audiblemetadata_p.src
                            16586 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            16587 ; 2208 |//$FILENAME audiblemetadata_y.src
                            16588 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            16589 ; 2210 |//$FILENAME audiblesongposition_p.src
                            16590 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            16591 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            16592 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            16593 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            16594 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            16595 ; 2216 |//$FILENAME audibledsa_p.src
                            16596 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            16597 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            16598 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            16599 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            16600 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            16601 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            16602 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            16603 ; 2224 |
                            16604 ; 2225 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16605 ; 2226 |// Effects and SRS Resources
                            16606 ; 2227 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16607 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            16608 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            16609 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            16610 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            16611 ; 2232 |//$FILENAME wowctrl.src
                            16612 ; 2233 |#define RSRC_WOW_CTRL 934    
                            16613 ; 2234 |
                            16614 ; 2235 |//$FILENAME wowmenu.src
                            16615 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            16616 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            16617 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            16618 ; 2239 |//$FILENAME string_wow_menu.src
                            16619 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            16620 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            16621 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            16622 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            16623 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            16624 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            16625 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            16626 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            16627 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            16628 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            16629 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            16630 ; 2251 |//$FILENAME wow_icon.src
                            16631 ; 2252 |#define RSRC_WOW_ICON 943    
                            16632 ; 2253 |
                            16633 ; 2254 |//$FILENAME wow16k.src
                            16634 ; 2255 |#define RSRC_WOW16K 944    
                            16635 ; 2256 |//$FILENAME wow32k.src
                            16636 ; 2257 |#define RSRC_WOW32K 945    
                            16637 ; 2258 |//$FILENAME wow8k.src
                            16638 ; 2259 |#define RSRC_WOW8K 946    
                            16639 ; 2260 |//$FILENAME wow11k.src
                            16640 ; 2261 |#define RSRC_WOW11K 947    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 277

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16641 ; 2262 |//$FILENAME wow22k.src
                            16642 ; 2263 |#define RSRC_WOW22K 948    
                            16643 ; 2264 |//$FILENAME wow24k.src
                            16644 ; 2265 |#define RSRC_WOW24K 949    
                            16645 ; 2266 |//$FILENAME wow44k.src
                            16646 ; 2267 |#define RSRC_WOW44K 950    
                            16647 ; 2268 |//$FILENAME wow48k.src
                            16648 ; 2269 |#define RSRC_WOW48K 951    
                            16649 ; 2270 |
                            16650 ; 2271 |//$FILENAME wow16k_Y.src
                            16651 ; 2272 |#define RSRC_WOW16K_Y 952    
                            16652 ; 2273 |//$FILENAME wow32k_Y.src
                            16653 ; 2274 |#define RSRC_WOW32K_Y 953    
                            16654 ; 2275 |//$FILENAME wow8k_Y.src
                            16655 ; 2276 |#define RSRC_WOW8K_Y 954    
                            16656 ; 2277 |//$FILENAME wow11k_Y.src
                            16657 ; 2278 |#define RSRC_WOW11K_Y 955    
                            16658 ; 2279 |//$FILENAME wow22k_Y.src
                            16659 ; 2280 |#define RSRC_WOW22K_Y 956    
                            16660 ; 2281 |//$FILENAME wow24k_Y.src
                            16661 ; 2282 |#define RSRC_WOW24K_Y 957    
                            16662 ; 2283 |//$FILENAME wow44k_Y.src
                            16663 ; 2284 |#define RSRC_WOW44K_Y 958    
                            16664 ; 2285 |//$FILENAME wow48k_Y.src
                            16665 ; 2286 |#define RSRC_WOW48K_Y 959    
                            16666 ; 2287 |
                            16667 ; 2288 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            16668 ; 2289 |// Audible Section Navigation
                            16669 ; 2290 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            16670 ; 2291 |//$FILENAME audible_secnav.src
                            16671 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            16672 ; 2293 |
                            16673 ; 2294 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16674 ; 2295 |// PLAYLIST3 and Music Library
                            16675 ; 2296 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            16676 ; 2297 |
                            16677 ; 2298 |//$FILENAME build_ml.src
                            16678 ; 2299 |#define RSRC_BUILD_ML 961    
                            16679 ; 2300 |//$FILENAME build_ml_warning.src
                            16680 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            16681 ; 2302 |//$FILENAME build_ml_warning2.src
                            16682 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            16683 ; 2304 |//$FILENAME build_flash1.src
                            16684 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            16685 ; 2306 |//$FILENAME build_flash2.src
                            16686 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            16687 ; 2308 |//$FILENAME build_flash3.src
                            16688 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                            16689 ; 2310 |//$FILENAME build_sd1.src
                            16690 ; 2311 |#define RSRC_BUILD_SD1 967    
                            16691 ; 2312 |//$FILENAME build_sd2.src
                            16692 ; 2313 |#define RSRC_BUILD_SD2 968    
                            16693 ; 2314 |//$FILENAME build_sd3.src
                            16694 ; 2315 |#define RSRC_BUILD_SD3 969    
                            16695 ; 2316 |//$FILENAME build_newmusic.src
                            16696 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            16697 ; 2318 |//$FILENAME sdmd.src
                            16698 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 278

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16699 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            16700 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            16701 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            16702 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                            16703 ; 2324 |//$FILENAME MusicLibBuildModule.src
                            16704 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            16705 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            16706 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            16707 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            16708 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            16709 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            16710 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            16711 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            16712 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            16713 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            16714 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            16715 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            16716 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            16717 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            16718 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            16719 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            16720 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            16721 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            16722 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            16723 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            16724 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            16725 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            16726 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            16727 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            16728 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            16729 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            16730 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            16731 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            16732 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            16733 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            16734 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            16735 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            16736 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            16737 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            16738 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            16739 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            16740 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            16741 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            16742 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            16743 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            16744 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            16745 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            16746 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            16747 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            16748 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            16749 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            16750 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                            16751 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            16752 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            16753 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            16754 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            16755 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            16756 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            16757 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                            16758 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            16759 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            16760 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 279

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16761 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            16762 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            16763 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            16764 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            16765 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            16766 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            16767 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            16768 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            16769 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            16770 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            16771 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            16772 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            16773 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            16774 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            16775 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            16776 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            16777 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            16778 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            16779 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            16780 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            16781 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            16782 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            16783 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            16784 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            16785 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            16786 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            16787 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            16788 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            16789 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            16790 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            16791 ; 2412 |//$FILENAME playmusicmenu.src
                            16792 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            16793 ; 2414 |//$FILENAME browsemenu.src
                            16794 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            16795 ; 2416 |//$FILENAME browsemenu_extra.src
                            16796 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            16797 ; 2418 |//$FILENAME string_play_all.src
                            16798 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            16799 ; 2420 |//$FILENAME string_play.src
                            16800 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            16801 ; 2422 |//$FILENAME string_unknown_year.src
                            16802 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            16803 ; 2424 |//$FILENAME string_year_width.src
                            16804 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            16805 ; 2426 |//$FILENAME string_artist.src
                            16806 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            16807 ; 2428 |//$FILENAME string_songs.src
                            16808 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            16809 ; 2430 |//$FILENAME string_on_the_fly.src
                            16810 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            16811 ; 2432 |//$FILENAME string_new_music.src
                            16812 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                            16813 ; 2434 |//$FILENAME string_genre.src
                            16814 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            16815 ; 2436 |//$FILENAME string_year.src
                            16816 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            16817 ; 2438 |//$FILENAME string_playlist.src
                            16818 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            16819 ; 2440 |//$FILENAME string_fm_rec.src
                            16820 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            16821 ; 2442 |//$FILENAME string_linein_rec.src
                            16822 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 280

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16823 ; 2444 |//$FILENAME string_play_music.src
                            16824 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            16825 ; 2446 |//$FILENAME highlight_back.src
                            16826 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            16827 ; 2448 |//$FILENAME newmusicmenu.src
                            16828 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            16829 ; 2450 |//$FILENAME string_1_day.src
                            16830 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            16831 ; 2452 |//$FILENAME string_1_week.src
                            16832 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            16833 ; 2454 |//$FILENAME string_1_month.src
                            16834 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            16835 ; 2456 |//$FILENAME on_the_fly_full.src
                            16836 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            16837 ; 2458 |//$FILENAME on_the_fly_free1.src
                            16838 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            16839 ; 2460 |//$FILENAME on_the_fly_free2.src
                            16840 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            16841 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            16842 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            16843 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            16844 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            16845 ; 2466 |//$FILENAME empty_favourite.src
                            16846 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            16847 ; 2468 |//$FILENAME sd_remove.src
                            16848 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            16849 ; 2470 |//$FILENAME sd_insert.src
                            16850 ; 2471 |#define RSRC_SD_INSERT 1047    
                            16851 ; 2472 |//$FILENAME check_disk_1.src
                            16852 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            16853 ; 2474 |//$FILENAME check_disk_2.src
                            16854 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            16855 ; 2476 |//$FILENAME check_disk_3.src
                            16856 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            16857 ; 2478 |//$FILENAME flash_error.src
                            16858 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            16859 ; 2480 |
                            16860 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16861 ; 2482 |// STFM1000 Tuner funclet
                            16862 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16863 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            16864 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            16865 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            16866 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            16867 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            16868 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            16869 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            16870 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            16871 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            16872 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            16873 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            16874 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                            16875 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            16876 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            16877 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            16878 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            16879 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            16880 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            16881 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                            16882 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            16883 ; 2504 |//$FILENAME decstfmmod.src
                            16884 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 281

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16885 ; 2506 |//$FILENAME dec_stfmp.src
                            16886 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            16887 ; 2508 |//$FILENAME dec_stfmx.src
                            16888 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            16889 ; 2510 |//$FILENAME dec_stfmy.src
                            16890 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            16891 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            16892 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            16893 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            16894 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            16895 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            16896 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            16897 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            16898 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            16899 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            16900 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            16901 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            16902 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            16903 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            16904 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            16905 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            16906 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            16907 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            16908 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            16909 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            16910 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            16911 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            16912 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            16913 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            16914 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            16915 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaB
                                  ias.src
                            16916 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookF
                                  orPilot.src
                            16917 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            16918 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            16919 ; 2540 |// for RestoreDriveFromBackup
                            16920 ; 2541 |//$FILENAME restoresysdrive.src
                            16921 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            16922 ; 2543 |
                            16923 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16924 ; 2545 |// Playlist5 sources
                            16925 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16926 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            16927 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            16928 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            16929 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            16930 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            16931 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            16932 ; 2553 |//$FILENAME playlist5_playback_module.src
                            16933 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            16934 ; 2555 |//$FILENAME playlist5_browse_module.src
                            16935 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            16936 ; 2557 |
                            16937 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            16938 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            16939 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            16940 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            16941 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                            16942 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            16943 ; 2564 |
                            16944 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 282

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16945 ; 2566 |// DanhNguyen added bitmaps
                            16946 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16947 ; 2568 |//$FILENAME icon_folder.src
                            16948 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            16949 ; 2570 |//$FILENAME icon_song.src
                            16950 ; 2571 |#define RSRC_ICON_SONG 1089    
                            16951 ; 2572 |
                            16952 ; 2573 |//$FILENAME menu_music.src
                            16953 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                            16954 ; 2575 |//$FILENAME vie_menu_music.src
                            16955 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            16956 ; 2577 |
                            16957 ; 2578 |//$FILENAME menu_voice.src
                            16958 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            16959 ; 2580 |//$FILENAME vie_menu_voice.src
                            16960 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            16961 ; 2582 |
                            16962 ; 2583 |//$FILENAME menu_fmtuner.src
                            16963 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            16964 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            16965 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            16966 ; 2587 |
                            16967 ; 2588 |//$FILENAME menu_record.src
                            16968 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            16969 ; 2590 |//$FILENAME vie_menu_record.src
                            16970 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            16971 ; 2592 |
                            16972 ; 2593 |//$FILENAME menu_settings.src
                            16973 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            16974 ; 2595 |//$FILENAME vie_menu_settings.src
                            16975 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            16976 ; 2597 |
                            16977 ; 2598 |//$FILENAME menu_shutdown.src
                            16978 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            16979 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            16980 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            16981 ; 2602 |
                            16982 ; 2603 |//$FILENAME menu_clock.src
                            16983 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            16984 ; 2605 |//$FILENAME vie_menu_clock.src
                            16985 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            16986 ; 2607 |
                            16987 ; 2608 |//$FILENAME menu_ab.src
                            16988 ; 2609 |#define RSRC_MENU_AB 1104    
                            16989 ; 2610 |//$FILENAME vie_menu_ab.src
                            16990 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            16991 ; 2612 |
                            16992 ; 2613 |//$FILENAME menu_delete.src
                            16993 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            16994 ; 2615 |//$FILENAME vie_menu_delete.src
                            16995 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            16996 ; 2617 |
                            16997 ; 2618 |//$FILENAME menu_about.src
                            16998 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            16999 ; 2620 |//$FILENAME vie_menu_about.src
                            17000 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            17001 ; 2622 |
                            17002 ; 2623 |//$FILENAME menu_exit.src
                            17003 ; 2624 |#define RSRC_MENU_EXIT 1110    
                            17004 ; 2625 |//$FILENAME vie_menu_exit.src
                            17005 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            17006 ; 2627 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 283

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17007 ; 2628 |//$FILENAME music_play_all.src
                            17008 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            17009 ; 2630 |//$FILENAME vie_music_play_all.src
                            17010 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            17011 ; 2632 |
                            17012 ; 2633 |//$FILENAME music_folder_internal.src
                            17013 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            17014 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            17015 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            17016 ; 2637 |
                            17017 ; 2638 |//$FILENAME music_folder_external.src
                            17018 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            17019 ; 2640 |//$FILENAME vie_music_folder_external.src
                            17020 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            17021 ; 2642 |
                            17022 ; 2643 |//$FILENAME music_songs.src
                            17023 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            17024 ; 2645 |//$FILENAME vie_music_songs.src
                            17025 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            17026 ; 2647 |
                            17027 ; 2648 |//$FILENAME music_favorites.src
                            17028 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            17029 ; 2650 |//$FILENAME vie_music_favorites.src
                            17030 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            17031 ; 2652 |
                            17032 ; 2653 |//$FILENAME music_fm_record.src
                            17033 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            17034 ; 2655 |//$FILENAME vie_music_fm_record.src
                            17035 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            17036 ; 2657 |
                            17037 ; 2658 |//$FILENAME music_exit.src
                            17038 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            17039 ; 2660 |//$FILENAME vie_music_exit.src
                            17040 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            17041 ; 2662 |
                            17042 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            17043 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            17044 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            17045 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            17046 ; 2667 |
                            17047 ; 2668 |//$FILENAME browse_music_folder_external.src
                            17048 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            17049 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            17050 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            17051 ; 2672 |
                            17052 ; 2673 |//$FILENAME browse_music_list_songs.src
                            17053 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            17054 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            17055 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            17056 ; 2677 |
                            17057 ; 2678 |//$FILENAME browse_music_favourites.src
                            17058 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                            17059 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            17060 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            17061 ; 2682 |
                            17062 ; 2683 |//$FILENAME browse_music_fm_files.src
                            17063 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            17064 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            17065 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                            17066 ; 2687 |
                            17067 ; 2688 |//$FILENAME browse_voice.src
                            17068 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 284

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17069 ; 2690 |//$FILENAME vie_browse_voice.src
                            17070 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            17071 ; 2692 |
                            17072 ; 2693 |//$FILENAME favourites_list_add.src
                            17073 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            17074 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            17075 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            17076 ; 2697 |
                            17077 ; 2698 |//$FILENAME favourites_list_remove.src
                            17078 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            17079 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            17080 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            17081 ; 2702 |
                            17082 ; 2703 |//$FILENAME favourites_list_is_full.src
                            17083 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            17084 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            17085 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            17086 ; 2707 |
                            17087 ; 2708 |//$FILENAME about_screen_1.src
                            17088 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            17089 ; 2710 |//$FILENAME vie_about_screen_1.src
                            17090 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            17091 ; 2712 |
                            17092 ; 2713 |//$FILENAME about_screen_2.src
                            17093 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            17094 ; 2715 |//$FILENAME vie_about_screen_2.src
                            17095 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            17096 ; 2717 |
                            17097 ; 2718 |//$FILENAME about_screen_3.src
                            17098 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            17099 ; 2720 |//$FILENAME vie_about_screen_3.src
                            17100 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            17101 ; 2722 |
                            17102 ; 2723 |//$FILENAME about_screen_4.src
                            17103 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            17104 ; 2725 |//$FILENAME vie_about_screen_4.src
                            17105 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            17106 ; 2727 |
                            17107 ; 2728 |//$FILENAME time_date_exit_title.src
                            17108 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            17109 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            17110 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            17111 ; 2732 |
                            17112 ; 2733 |//$FILENAME time_clean_desktop.src
                            17113 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            17114 ; 2735 |//$FILENAME time_dash.src
                            17115 ; 2736 |#define RSRC_TIME_DASH 1155    
                            17116 ; 2737 |
                            17117 ; 2738 |//$FILENAME time_day_7.src
                            17118 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            17119 ; 2740 |//$FILENAME vie_time_day_7.src
                            17120 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                            17121 ; 2742 |//$FILENAME time_day_cn.src
                            17122 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            17123 ; 2744 |//$FILENAME vie_time_day_cn.src
                            17124 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            17125 ; 2746 |//$FILENAME time_day_2.src
                            17126 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            17127 ; 2748 |//$FILENAME vie_time_day_2.src
                            17128 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            17129 ; 2750 |//$FILENAME time_day_3.src
                            17130 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 285

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17131 ; 2752 |//$FILENAME vie_time_day_3.src
                            17132 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            17133 ; 2754 |//$FILENAME time_day_4.src
                            17134 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            17135 ; 2756 |//$FILENAME vie_time_day_4.src
                            17136 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            17137 ; 2758 |//$FILENAME time_day_5.src
                            17138 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            17139 ; 2760 |//$FILENAME vie_time_day_5.src
                            17140 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            17141 ; 2762 |//$FILENAME time_day_6.src
                            17142 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            17143 ; 2764 |//$FILENAME vie_time_day_6.src
                            17144 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            17145 ; 2766 |
                            17146 ; 2767 |//$FILENAME time_month_1.src
                            17147 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            17148 ; 2769 |//$FILENAME vie_time_month_1.src
                            17149 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            17150 ; 2771 |//$FILENAME time_month_2.src
                            17151 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            17152 ; 2773 |//$FILENAME vie_time_month_2.src
                            17153 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            17154 ; 2775 |//$FILENAME time_month_3.src
                            17155 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            17156 ; 2777 |//$FILENAME vie_time_month_3.src
                            17157 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            17158 ; 2779 |//$FILENAME time_month_4.src
                            17159 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            17160 ; 2781 |//$FILENAME vie_time_month_4.src
                            17161 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            17162 ; 2783 |//$FILENAME time_month_5.src
                            17163 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            17164 ; 2785 |//$FILENAME vie_time_month_5.src
                            17165 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            17166 ; 2787 |//$FILENAME time_month_6.src
                            17167 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            17168 ; 2789 |//$FILENAME vie_time_month_6.src
                            17169 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            17170 ; 2791 |//$FILENAME time_month_7.src
                            17171 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            17172 ; 2793 |//$FILENAME vie_time_month_7.src
                            17173 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            17174 ; 2795 |//$FILENAME time_month_8.src
                            17175 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            17176 ; 2797 |//$FILENAME vie_time_month_8.src
                            17177 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            17178 ; 2799 |//$FILENAME time_month_9.src
                            17179 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            17180 ; 2801 |//$FILENAME vie_time_month_9.src
                            17181 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            17182 ; 2803 |//$FILENAME time_month_10.src
                            17183 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            17184 ; 2805 |//$FILENAME vie_time_month_10.src
                            17185 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            17186 ; 2807 |//$FILENAME time_month_11.src
                            17187 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            17188 ; 2809 |//$FILENAME vie_time_month_11.src
                            17189 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                            17190 ; 2811 |//$FILENAME time_month_12.src
                            17191 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            17192 ; 2813 |//$FILENAME vie_time_month_12.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 286

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17193 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            17194 ; 2815 |
                            17195 ; 2816 |//$FILENAME time_num_am.src
                            17196 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            17197 ; 2818 |//$FILENAME time_num_am.src
                            17198 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            17199 ; 2820 |//$FILENAME settime_format_12h.src
                            17200 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            17201 ; 2822 |//$FILENAME settime_format_24h.src
                            17202 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            17203 ; 2824 |//$FILENAME setdate_format_dmy.src
                            17204 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                            17205 ; 2826 |//$FILENAME setdate_format_mdy.src
                            17206 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            17207 ; 2828 |//$FILENAME setdate_format_ymd.src
                            17208 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            17209 ; 2830 |
                            17210 ; 2831 |//$FILENAME time_num_large_0.src
                            17211 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            17212 ; 2833 |//$FILENAME time_num_large_1.src
                            17213 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            17214 ; 2835 |//$FILENAME time_num_large_2.src
                            17215 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            17216 ; 2837 |//$FILENAME time_num_large_3.src
                            17217 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            17218 ; 2839 |//$FILENAME time_num_large_4.src
                            17219 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            17220 ; 2841 |//$FILENAME time_num_large_5.src
                            17221 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            17222 ; 2843 |//$FILENAME time_num_large_6.src
                            17223 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            17224 ; 2845 |//$FILENAME time_num_large_7.src
                            17225 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            17226 ; 2847 |//$FILENAME time_num_large_8.src
                            17227 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            17228 ; 2849 |//$FILENAME time_num_large_9.src
                            17229 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            17230 ; 2851 |
                            17231 ; 2852 |//$FILENAME time_num_medium_0.src
                            17232 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            17233 ; 2854 |//$FILENAME time_num_medium_1.src
                            17234 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            17235 ; 2856 |//$FILENAME time_num_medium_2.src
                            17236 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            17237 ; 2858 |//$FILENAME time_num_medium_3.src
                            17238 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            17239 ; 2860 |//$FILENAME time_num_medium_4.src
                            17240 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            17241 ; 2862 |//$FILENAME time_num_medium_5.src
                            17242 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            17243 ; 2864 |//$FILENAME time_num_medium_6.src
                            17244 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                            17245 ; 2866 |//$FILENAME time_num_medium_7.src
                            17246 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            17247 ; 2868 |//$FILENAME time_num_medium_8.src
                            17248 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            17249 ; 2870 |//$FILENAME time_num_medium_9.src
                            17250 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            17251 ; 2872 |
                            17252 ; 2873 |//$FILENAME time_colon.src
                            17253 ; 2874 |#define RSRC_TIME_COLON 1221    
                            17254 ; 2875 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 287

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17255 ; 2876 |//$FILENAME settings_backlight_title.src
                            17256 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            17257 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            17258 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            17259 ; 2880 |//$FILENAME settings_playmode_title.src
                            17260 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            17261 ; 2882 |
                            17262 ; 2883 |//$FILENAME settings_contrast_title.src
                            17263 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            17264 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            17265 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            17266 ; 2887 |
                            17267 ; 2888 |//$FILENAME settings_eq_title.src
                            17268 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            17269 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            17270 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            17271 ; 2892 |
                            17272 ; 2893 |//$FILENAME settings_exit_title.src
                            17273 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            17274 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            17275 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            17276 ; 2897 |
                            17277 ; 2898 |//$FILENAME settings_set_date_title.src
                            17278 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            17279 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            17280 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            17281 ; 2902 |
                            17282 ; 2903 |//$FILENAME settings_set_time_title.src
                            17283 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            17284 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            17285 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            17286 ; 2907 |
                            17287 ; 2908 |//$FILENAME settings_playmode_normal.src
                            17288 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            17289 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            17290 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            17291 ; 2912 |
                            17292 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            17293 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            17294 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            17295 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            17296 ; 2917 |
                            17297 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            17298 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            17299 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            17300 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            17301 ; 2922 |
                            17302 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            17303 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            17304 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            17305 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            17306 ; 2927 |
                            17307 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            17308 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            17309 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            17310 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            17311 ; 2932 |
                            17312 ; 2933 |//$FILENAME settings_backlight_on.src
                            17313 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                            17314 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            17315 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            17316 ; 2937 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 288

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17317 ; 2938 |//$FILENAME settings_backlight_10s.src
                            17318 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            17319 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            17320 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            17321 ; 2942 |
                            17322 ; 2943 |//$FILENAME settings_backlight_20s.src
                            17323 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            17324 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            17325 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            17326 ; 2947 |
                            17327 ; 2948 |//$FILENAME settings_backlight_30s.src
                            17328 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            17329 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            17330 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            17331 ; 2952 |
                            17332 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            17333 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            17334 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            17335 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            17336 ; 2957 |
                            17337 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            17338 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            17339 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            17340 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            17341 ; 2962 |
                            17342 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            17343 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            17344 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            17345 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            17346 ; 2967 |
                            17347 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            17348 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            17349 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            17350 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            17351 ; 2972 |
                            17352 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            17353 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            17354 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            17355 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            17356 ; 2977 |
                            17357 ; 2978 |//$FILENAME settings_languages_eng.src
                            17358 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            17359 ; 2980 |//$FILENAME settings_languages_vie.src
                            17360 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            17361 ; 2982 |
                            17362 ; 2983 |//$FILENAME fraction_dot.src
                            17363 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            17364 ; 2985 |
                            17365 ; 2986 |//$FILENAME fm_background.src
                            17366 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            17367 ; 2988 |//$FILENAME vie_fm_background.src
                            17368 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                            17369 ; 2990 |
                            17370 ; 2991 |//$FILENAME searching_please_wait.src
                            17371 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            17372 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            17373 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            17374 ; 2995 |
                            17375 ; 2996 |//$FILENAME fm_auto_search.src
                            17376 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            17377 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            17378 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 289

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17379 ; 3000 |
                            17380 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            17381 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            17382 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            17383 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            17384 ; 3005 |
                            17385 ; 3006 |#endif //IF (!@def(resources))
                            17386 ; 3007 |
                            17387 
                            17389 
                            17390 ; 16   |#ifdef USE_PLAYLIST3
                            17391 ; 17   |#include "fsapi.h"
                            17392 
                            17394 
                            17395 ; 1    |#ifndef _FSAPI_H_
                            17396 ; 2    |#define _FSAPI_H_
                            17397 ; 3    |#include "filespec.h"
                            17398 
                            17400 
                            17401 ; 1    |#ifndef _FILESPEC_H_
                            17402 ; 2    |#define _FILESPEC_H_
                            17403 ; 3    |#include  "fstypes.h"
                            17404 
                            17406 
                            17407 ; 1    |#ifndef _FS_TYPE_H_
                            17408 ; 2    |#define _FS_TYPE_H_
                            17409 ; 3    |
                            17410 ; 4    |#include   "types.h"
                            17411 
                            17413 
                            17414 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17415 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17416 ; 3    |//
                            17417 ; 4    |// Filename: types.h
                            17418 ; 5    |// Description: Standard data types
                            17419 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17420 ; 7    |
                            17421 ; 8    |#ifndef _TYPES_H
                            17422 ; 9    |#define _TYPES_H
                            17423 ; 10   |
                            17424 ; 11   |// TODO:  move this outta here!
                            17425 ; 12   |#if !defined(NOERROR)
                            17426 ; 13   |#define NOERROR 0
                            17427 ; 14   |#define SUCCESS 0
                            17428 ; 15   |#endif 
                            17429 ; 16   |#if !defined(SUCCESS)
                            17430 ; 17   |#define SUCCESS  0
                            17431 ; 18   |#endif
                            17432 ; 19   |#if !defined(ERROR)
                            17433 ; 20   |#define ERROR   -1
                            17434 ; 21   |#endif
                            17435 ; 22   |#if !defined(FALSE)
                            17436 ; 23   |#define FALSE 0
                            17437 ; 24   |#endif
                            17438 ; 25   |#if !defined(TRUE)
                            17439 ; 26   |#define TRUE  1
                            17440 ; 27   |#endif
                            17441 ; 28   |
                            17442 ; 29   |#if !defined(NULL)
                            17443 ; 30   |#define NULL 0
                            17444 ; 31   |#endif
                            17445 ; 32   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 290

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17446 ; 33   |#define MAX_INT     0x7FFFFF
                            17447 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17448 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17449 ; 36   |#define MAX_ULONG   (-1) 
                            17450 ; 37   |
                            17451 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17452 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17453 ; 40   |
                            17454 ; 41   |
                            17455 ; 42   |#define BYTE    unsigned char       // btVarName
                            17456 ; 43   |#define CHAR    signed char         // cVarName
                            17457 ; 44   |#define USHORT  unsigned short      // usVarName
                            17458 ; 45   |#define SHORT   unsigned short      // sVarName
                            17459 ; 46   |#define WORD    unsigned int        // wVarName
                            17460 ; 47   |#define INT     signed int          // iVarName
                            17461 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17462 ; 49   |#define LONG    signed long         // lVarName
                            17463 ; 50   |#define BOOL    unsigned int        // bVarName
                            17464 ; 51   |#define FRACT   _fract              // frVarName
                            17465 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17466 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17467 ; 54   |#define FLOAT   float               // fVarName
                            17468 ; 55   |#define DBL     double              // dVarName
                            17469 ; 56   |#define ENUM    enum                // eVarName
                            17470 ; 57   |#define CMX     _complex            // cmxVarName
                            17471 ; 58   |typedef WORD UCS3;                   // 
                            17472 ; 59   |
                            17473 ; 60   |#define UINT16  unsigned short
                            17474 ; 61   |#define UINT8   unsigned char   
                            17475 ; 62   |#define UINT32  unsigned long
                            17476 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17477 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17478 ; 65   |#define WCHAR   UINT16
                            17479 ; 66   |
                            17480 ; 67   |//UINT128 is 16 bytes or 6 words
                            17481 ; 68   |typedef struct UINT128_3500 {   
                            17482 ; 69   |    int val[6];     
                            17483 ; 70   |} UINT128_3500;
                            17484 ; 71   |
                            17485 ; 72   |#define UINT128   UINT128_3500
                            17486 ; 73   |
                            17487 ; 74   |// Little endian word packed byte strings:   
                            17488 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17489 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17490 ; 77   |// Little endian word packed byte strings:   
                            17491 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17492 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17493 ; 80   |
                            17494 ; 81   |// Declare Memory Spaces To Use When Coding
                            17495 ; 82   |// A. Sector Buffers
                            17496 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17497 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17498 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17499 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17500 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17501 ; 88   |// B. Media DDI Memory
                            17502 ; 89   |#define MEDIA_DDI_MEM _Y
                            17503 ; 90   |
                            17504 ; 91   |
                            17505 ; 92   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 291

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17506 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17507 ; 94   |// Examples of circular pointers:
                            17508 ; 95   |//    INT CIRC cpiVarName
                            17509 ; 96   |//    DWORD CIRC cpdwVarName
                            17510 ; 97   |
                            17511 ; 98   |#define RETCODE INT                 // rcVarName
                            17512 ; 99   |
                            17513 ; 100  |// generic bitfield structure
                            17514 ; 101  |struct Bitfield {
                            17515 ; 102  |    unsigned int B0  :1;
                            17516 ; 103  |    unsigned int B1  :1;
                            17517 ; 104  |    unsigned int B2  :1;
                            17518 ; 105  |    unsigned int B3  :1;
                            17519 ; 106  |    unsigned int B4  :1;
                            17520 ; 107  |    unsigned int B5  :1;
                            17521 ; 108  |    unsigned int B6  :1;
                            17522 ; 109  |    unsigned int B7  :1;
                            17523 ; 110  |    unsigned int B8  :1;
                            17524 ; 111  |    unsigned int B9  :1;
                            17525 ; 112  |    unsigned int B10 :1;
                            17526 ; 113  |    unsigned int B11 :1;
                            17527 ; 114  |    unsigned int B12 :1;
                            17528 ; 115  |    unsigned int B13 :1;
                            17529 ; 116  |    unsigned int B14 :1;
                            17530 ; 117  |    unsigned int B15 :1;
                            17531 ; 118  |    unsigned int B16 :1;
                            17532 ; 119  |    unsigned int B17 :1;
                            17533 ; 120  |    unsigned int B18 :1;
                            17534 ; 121  |    unsigned int B19 :1;
                            17535 ; 122  |    unsigned int B20 :1;
                            17536 ; 123  |    unsigned int B21 :1;
                            17537 ; 124  |    unsigned int B22 :1;
                            17538 ; 125  |    unsigned int B23 :1;
                            17539 ; 126  |};
                            17540 ; 127  |
                            17541 ; 128  |union BitInt {
                            17542 ; 129  |        struct Bitfield B;
                            17543 ; 130  |        int        I;
                            17544 ; 131  |};
                            17545 ; 132  |
                            17546 ; 133  |#define MAX_MSG_LENGTH 10
                            17547 ; 134  |struct CMessage
                            17548 ; 135  |{
                            17549 ; 136  |        unsigned int m_uLength;
                            17550 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17551 ; 138  |};
                            17552 ; 139  |
                            17553 ; 140  |typedef struct {
                            17554 ; 141  |    WORD m_wLength;
                            17555 ; 142  |    WORD m_wMessage;
                            17556 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17557 ; 144  |} Message;
                            17558 ; 145  |
                            17559 ; 146  |struct MessageQueueDescriptor
                            17560 ; 147  |{
                            17561 ; 148  |        int *m_pBase;
                            17562 ; 149  |        int m_iModulo;
                            17563 ; 150  |        int m_iSize;
                            17564 ; 151  |        int *m_pHead;
                            17565 ; 152  |        int *m_pTail;
                            17566 ; 153  |};
                            17567 ; 154  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 292

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17568 ; 155  |struct ModuleEntry
                            17569 ; 156  |{
                            17570 ; 157  |    int m_iSignaledEventMask;
                            17571 ; 158  |    int m_iWaitEventMask;
                            17572 ; 159  |    int m_iResourceOfCode;
                            17573 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17574 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            17575 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17576 ; 163  |    int m_uTimeOutHigh;
                            17577 ; 164  |    int m_uTimeOutLow;
                            17578 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17579 ; 166  |};
                            17580 ; 167  |
                            17581 ; 168  |union WaitMask{
                            17582 ; 169  |    struct B{
                            17583 ; 170  |        unsigned int m_bNone     :1;
                            17584 ; 171  |        unsigned int m_bMessage  :1;
                            17585 ; 172  |        unsigned int m_bTimer    :1;
                            17586 ; 173  |        unsigned int m_bButton   :1;
                            17587 ; 174  |    } B;
                            17588 ; 175  |    int I;
                            17589 ; 176  |} ;
                            17590 ; 177  |
                            17591 ; 178  |
                            17592 ; 179  |struct Button {
                            17593 ; 180  |        WORD wButtonEvent;
                            17594 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17595 ; 182  |};
                            17596 ; 183  |
                            17597 ; 184  |struct Message {
                            17598 ; 185  |        WORD wMsgLength;
                            17599 ; 186  |        WORD wMsgCommand;
                            17600 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17601 ; 188  |};
                            17602 ; 189  |
                            17603 ; 190  |union EventTypes {
                            17604 ; 191  |        struct CMessage msg;
                            17605 ; 192  |        struct Button Button ;
                            17606 ; 193  |        struct Message Message;
                            17607 ; 194  |};
                            17608 ; 195  |
                            17609 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17610 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17611 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17612 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17613 ; 200  |
                            17614 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17615 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17616 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17617 ; 204  |
                            17618 ; 205  |#if DEBUG
                            17619 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17620 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17621 ; 208  |#else 
                            17622 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17623 ; 210  |#define DebugBuildAssert(x)    
                            17624 ; 211  |#endif
                            17625 ; 212  |
                            17626 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17627 ; 214  |//  #pragma asm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 293

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17628 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17629 ; 216  |//  #pragma endasm
                            17630 ; 217  |
                            17631 ; 218  |
                            17632 ; 219  |#ifdef COLOR_262K
                            17633 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17634 ; 221  |#elif defined(COLOR_65K)
                            17635 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17636 ; 223  |#else
                            17637 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17638 ; 225  |#endif
                            17639 ; 226  |    
                            17640 ; 227  |#endif // #ifndef _TYPES_H
                            17641 
                            17643 
                            17644 ; 5    |
                            17645 ; 6    |// move FSMEDIA_TABLE from devicetable.h  15Apr2005   First moved in SDK2.6.
                            17646 ; 7    |typedef struct
                            17647 ; 8    |{
                            17648 ; 9    |
                            17649 ; 10   |INT     _Y BytesPerSector;
                            17650 ; 11   |INT     _Y SectorsPerCluster;
                            17651 ; 12   |INT     _Y RsvdSectors;
                            17652 ; 13   |INT     _Y NoOfFATs;
                            17653 ; 14   |INT     _Y MaxRootDirEntries;
                            17654 ; 15   |LONG    _Y TotalSectors;
                            17655 ; 16   |LONG    _Y FATSize;
                            17656 ; 17   |LONG    _Y RootdirCluster;
                            17657 ; 18   |//INT   _Y FSInfoSector;
                            17658 ; 19   |//INT   _Y BkBootSector;
                            17659 ; 20   |LONG    _Y NextFreeCluster;
                            17660 ; 21   |LONG    _Y TotalFreeClusters;
                            17661 ; 22   |INT     _Y RootDirSectors;
                            17662 ; 23   |INT     _Y FIRSTDataSector;
                            17663 ; 24   |INT    _Y FATType;
                            17664 ; 25   |LONG   _Y TotalNoofclusters;
                            17665 ; 26   |INT    _Y ClusterMask;
                            17666 ; 27   |INT    _Y ClusterShift;
                            17667 ; 28   |INT    _Y SectorShift;
                            17668 ; 29   |INT    _Y SectorMask;
                            17669 ; 30   |INT    _Y DevicePresent;
                            17670 ; 31   |LONG   _Y FirRootdirsec;
                            17671 ; 32   |INT             _Y FSInfoSector;
                            17672 ; 33   |}FSMEDIA_TABLE;
                            17673 ; 34   |
                            17674 ; 35   |
                            17675 ; 36   |#define         MAXDEVICES              2
                            17676 ; 37   |//#define       NUMCACHES               8  // this is already in fsproj.h (2 for player 2 
                                  for mtp as of 28jun2005) TOVERIFY 2 ok for player and mtp. 
                            17677 ; 38   |
                            17678 ; 39   |// NOTE:  This offset is the same no matter what the sector actual size!  
                            17679 ; 40   |//        TOVERIFY 3.0 doesn't have this defined but uses it in filesystempresent.c. lbmlc
                                   def'd it here so I insert it here.
                            17680 ; 41   |#define         FATFS_SIGNATURE_OFFSET  510
                            17681 ; 42   |#define         BOOTSECTOR              0
                            17682 ; 43   |#define     FSINFOSECTOR        1
                            17683 ; 44   |
                            17684 ; 45   |#define     READ_MODE           1
                            17685 ; 46   |#define     WRITE_MODE          2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 294

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17686 ; 47   |#define     APPEND_MODE         4
                            17687 ; 48   |#define     SEQ_WRITE_MODE      8
                            17688 ; 49   |#define     DIRECTORY_MODE         16
                            17689 ; 50   |#define     CREATE_MODE        32
                            17690 ; 51   |
                            17691 ; 52   |#define     RPLUS               5
                            17692 ; 53   |#define     WPLUS                   6
                            17693 ; 54   |#define     APLUS               7
                            17694 ; 55   |
                            17695 ; 56   |
                            17696 ; 57   |
                            17697 ; 58   |#define     X_MEMORY            0
                            17698 ; 59   |#define     Y_MEMORY            2
                            17699 ; 60   |#define     P_MEMORY            4
                            17700 ; 61   |
                            17701 ; 62   |#define     FAT12               0 
                            17702 ; 63   |#define     FAT16               1   
                            17703 ; 64   |#define     FAT32               2 
                            17704 ; 65   |
                            17705 ; 66   |
                            17706 ; 67   |#define FAT12EOF            0x0FFF
                            17707 ; 68   |#define FAT16EOF            0xFFFF
                            17708 ; 69   |#define FAT32EOF            0x0FFFFFFF
                            17709 ; 70   |
                            17710 ; 71   |
                            17711 ; 72   |
                            17712 ; 73   |#define FAT12FREECX         0x000
                            17713 ; 74   |#define FAT16FREECX         0x0000
                            17714 ; 75   |#define FAT32FREECX         0x00000000
                            17715 ; 76   |
                            17716 ; 77   |
                            17717 ; 78   |#define  DBCS               1
                            17718 ; 79   |#define  UNICODE            2
                            17719 ; 80   |
                            17720 ; 81   |
                            17721 ; 82   |#define     CREATION_DATE       1
                            17722 ; 83   |#define     CREATION_TIME       2
                            17723 ; 84   |#define     MODIFICATION_DATE   3
                            17724 ; 85   |#define     MODIFICATION_TIME   4
                            17725 ; 86   |
                            17726 ; 87   |
                            17727 ; 88   |#define     READ_ONLY      0X01
                            17728 ; 89   |#define     HIDDEN         0X02
                            17729 ; 90   |#define     SYSTEM         0X04
                            17730 ; 91   |#define     VOLUME_ID      0X08
                            17731 ; 92   |#define     DIRECTORY      0X10
                            17732 ; 93   |#define     ARCHIVE        0X20
                            17733 ; 94   |
                            17734 ; 95   |#define READCOUNTER         105
                            17735 ; 96   |#define WRITECOUNTER        100
                            17736 ; 97   |#define FLUSHCOUNTER        200
                            17737 ; 98   |
                            17738 ; 99   |
                            17739 ; 100  |#define DEFAULT_MEMORY      Y_MEMORY
                            17740 ; 101  |
                            17741 ; 102  |#define  CWD_HANDLE           0
                            17742 ; 103  |#define  DIRECTORY_HANDLE     1
                            17743 ; 104  |#define  FIRST_VALID_HANDLE   2
                            17744 ; 105  |#define  END_OF_DIR_PATH      3
                            17745 ; 106  |
                            17746 ; 107  |//Constants for Sector read and write (Normal and FAT 
                            17747 ; 108  |#define         NORMALTYPE              0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 295

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17748 ; 109  |#define         FATTYPE                 1
                            17749 ; 110  |#define     RAWTYPE         2
                            17750 ; 111  |
                            17751 ; 112  |#define  SHORTNAMERES_CH      6
                            17752 ; 113  |#define  LONGNAMERES_CH       9
                            17753 ; 114  |#define  MAXFILENAME_CH       260
                            17754 ; 115  |
                            17755 ; 116  |#define VOLUME_TYPE          0
                            17756 ; 117  |#define DIR_TYPE             1
                            17757 ; 118  |#define FILE_TYPE            2
                            17758 ; 119  |                                           
                            17759 ; 120  |#define WRITE_TYPE_RANDOM               0
                            17760 ; 121  |#define WRITE_TYPE_SEQ_FIRST    1
                            17761 ; 122  |#define WRITE_TYPE_SEQ_NEXT             2
                            17762 ; 123  |#define WRITE_TYPE_NOREADBACK   3
                            17763 ; 124  |                  
                            17764 ; 125  |
                            17765 ; 126  |#define     HANDLEENTRYSIZE         19
                            17766 ; 127  |
                            17767 ; 128  |// DEVICERECORDSIZE is now only defined in cachedef.h so deleted from here in first 3.1 pr
                                  elim 
                            17768 ; 129  |
                            17769 ; 130  |#define     CACHEDESCRSIZE          8
                            17770 ; 131  |#define     CACHEBUFSIZE            705
                            17771 ; 132  |
                            17772 ; 133  |#define     UCS2s                     0
                            17773 ; 134  |#define     UCS3s                     1
                            17774 ; 135  |
                            17775 ; 136  |#define     FAT32FSIFREECOUNTSIZE       4
                            17776 ; 137  |
                            17777 ; 138  |#endif // _FS_TYPE_H_
                            17778 ; 139  |
                            17779 
                            17781 
                            17782 ; 4    |#define MAX_FILESNAME   13
                            17783 ; 5    |
                            17784 ; 6    |typedef struct {
                            17785 ; 7    |    INT     gCurrentRecord;
                            17786 ; 8    |    INT     DirAttribute;
                            17787 ; 9    |    _packed char    FileName[9];
                            17788 ; 10   |    _packed char    FileExtension[4];
                            17789 ; 11   |}FILESPEC;
                            17790 ; 12   |
                            17791 ; 13   |typedef struct {
                            17792 ; 14   |    INT attrib;
                            17793 ; 15   |        LONG FileSize;
                            17794 ; 16   |    int  device;
                            17795 ; 17   |    INT startrecord;
                            17796 ; 18   |    _packed char name[MAX_FILESNAME];
                            17797 ; 19   |        LONG Key;
                            17798 ; 20   |}Finddata;
                            17799 ; 21   |#endif
                            17800 ; 22   |
                            17801 
                            17803 
                            17804 ; 4    |extern _reentrant LONG Ftell(INT HandleNumber);
                            17805 ; 5    |extern _reentrant LONG Feof(INT HandleNumber);
                            17806 ; 6    |extern _reentrant INT *Fputs(INT HandleNumber,INT *Buffer);
                            17807 ; 7    |extern _reentrant LONG Fread(INT HandleNumber,INT *Buffer,LONG NumBytesToRead,INT Source_M
                                  emory,INT MOdulo);
                            17808 ; 8    |extern _reentrant INT Fgetc(INT HandleNumber);
                            17809 ; 9    |extern _reentrant INT Fputc(INT HandleNumber,INT ByteToWrite);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 296

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17810 ; 10   |extern _reentrant LONG ReadDirectoryRecord(INT HandleNumber,INT RecordNumber,INT *Buffer);
                                  
                            17811 ; 11   |extern _reentrant INT Fseek(INT HandleNumber,LONG NumBytesToSeek,INT SeekPosition);
                            17812 ; 12   |extern _reentrant INT Fopen(_packed char *filepath,_packed char *mode);
                            17813 ; 13   |extern _reentrant LONG Fwrite(INT HandleNumber,INT  *Buffer,LONG NumBytesToWrite,INT Sourc
                                  e_Memory,INT MOdulo);
                            17814 ; 14   |extern _reentrant LONG Totalfreecluster(INT DeviceNum);
                            17815 ; 15   |extern _reentrant INT Rmdir(_packed char *filepath);
                            17816 ; 16   |extern _reentrant INT Rmdirw(_packed char *filepath);
                            17817 ; 17   |extern _reentrant INT Mkdir(_packed char *filepath);
                            17818 ; 18   |
                            17819 ; 19   |        //      SGTL-HK 27-05-2005
                            17820 ; 20   |extern _reentrant INT Mkdirw(UCS3 *filepath);
                            17821 ; 21   |
                            17822 ; 22   |extern _reentrant INT Chdir(_packed char *filepath);
                            17823 ; 23   |extern _reentrant INT FastOpen(LONG Key,_packed char *mode);
                            17824 ; 24   |
                            17825 ; 25   |extern _reentrant INT Setcwd(_packed char *filepath, _packed char *gCworkingDir,INT index,
                                  INT length);
                            17826 ; 26   |extern _reentrant _packed char *Getcwd(void);
                            17827 ; 27   |extern  _reentrant _packed char *Fgets(INT HandleNumber,INT NumBytesToRead, _packed char *
                                  Buffer);
                            17828 ; 28   |extern INT  FSInit(INT _X *bufx, INT _Y *bufy, INT maxdevices, INT maxhandles, INT maxcach
                                  es);
                            17829 ; 29   |extern INT  FlushCache(void);
                            17830 ; 30   |extern _reentrant INT FsShutDown(void);
                            17831 ; 31   |extern _reentrant LONG GetFileSize(INT HandleNumber);
                            17832 ; 32   |
                            17833 ; 33   |extern _reentrant INT filegetattrib(_packed char *FilePath);
                            17834 ; 34   |extern _reentrant INT Fopenw(INT *filepath,_packed char *mode);
                            17835 ; 35   |extern _reentrant INT Fremove(_packed char *filepath);
                            17836 ; 36   |extern _reentrant INT Fremovew(_packed char *filepath);
                            17837 ; 37   |extern _reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLen
                                  gth);
                            17838 ; 38   |extern INT FlushCache(void);
                            17839 ; 39   |extern _reentrant INT DeleteTree(_packed char *Path);
                            17840 ; 40   |extern _reentrant INT Fclose(INT HandleNumber);
                            17841 ; 41   |extern INT FSMediaPresent(INT DeviceNum);
                            17842 ; 42   |extern INT FSFATType (INT DeviceNum);
                            17843 ; 43   |extern  INT _reentrant  GetVolumeLabel(_packed char *Buffer,INT DeviceNum);
                            17844 ; 44   |extern _reentrant INT SetVolumeLabel(_packed char *Buffer,INT DeviceNum);
                            17845 ; 45   |extern _reentrant LONG FgetFastHandle(INT HandleNumber);
                            17846 ; 46   |
                            17847 ; 47   |extern _reentrant INT ConstructLongFileName(INT HandleNumber, INT RecordNumber, INT *LFNBu
                                  ffer);
                            17848 ; 48   |extern _reentrant void Uppercase(_packed char *file); 
                            17849 ; 49   |extern _reentrant INT FindNext(INT HandleNumber,Finddata *_finddata);
                            17850 
                            17860 
                            17861 ; 50   |extern _reentrant INT FindFirst(Finddata *_finddata,_packed char *FileName);
                            17862 ; 51   |extern _reentrant void ClearData(Finddata *_finddata);
                            17863 ; 52   |extern _reentrant INT GetShortfilename(LONG Key,INT *Buffer);
                            17864 ; 53   |
                            17865 ; 54   |
                            17866 ; 55   |
                            17867 ; 56   |
                            17868 ; 57   |typedef struct
                            17869 ; 58   |{
                            17870 ; 59   |
                            17871 ; 60   |INT             Day;
                            17872 ; 61   |INT             Month;
                            17873 ; 62   |INT             Year;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 297

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17874 ; 63   |}DIR_DATE;
                            17875 ; 64   |
                            17876 ; 65   |
                            17877 ; 66   |typedef struct
                            17878 ; 67   |{
                            17879 ; 68   |
                            17880 ; 69   |INT             Second;
                            17881 ; 70   |INT             Minute;
                            17882 ; 71   |INT             Hour;
                            17883 ; 72   |}DIR_TIME;
                            17884 ; 73   |
                            17885 ; 74   |
                            17886 ; 75   |typedef struct
                            17887 ; 76   |{
                            17888 ; 77   |LONG CurrentOffset;     
                            17889 ; 78   |LONG CurrentCluster;
                            17890 ; 79   |}HANDLECONTEXT;
                            17891 ; 80   |
                            17892 ; 81   |extern _reentrant INT filesetattrib(INT HandleNumber,INT dirattribute);
                            17893 ; 82   |extern _reentrant INT filesetdate(_packed char *FilePath,INT crt_mod_date_time_para,DIR_DA
                                  TE *dirdate,DIR_TIME *dirtime);
                            17894 
                            17905 
                            17906 ; 83   |extern _reentrant INT filegetdate(INT HandleNumber,INT crt_mod_date_time_para,DIR_DATE *di
                                  rdate,DIR_TIME *dirtime);
                            17907 ; 84   |#endif
                            17908 
                            17910 
                            17911 ; 18   |#include "fstypes.h"
                            17912 
                            17914 
                            17915 ; 1    |#ifndef _FS_TYPE_H_
                            17916 ; 2    |#define _FS_TYPE_H_
                            17917 ; 3    |
                            17918 ; 4    |#include   "types.h"
                            17919 ; 5    |
                            17920 ; 6    |// move FSMEDIA_TABLE from devicetable.h  15Apr2005   First moved in SDK2.6.
                            17921 ; 7    |typedef struct
                            17922 ; 8    |{
                            17923 ; 9    |
                            17924 ; 10   |INT     _Y BytesPerSector;
                            17925 ; 11   |INT     _Y SectorsPerCluster;
                            17926 ; 12   |INT     _Y RsvdSectors;
                            17927 ; 13   |INT     _Y NoOfFATs;
                            17928 ; 14   |INT     _Y MaxRootDirEntries;
                            17929 ; 15   |LONG    _Y TotalSectors;
                            17930 ; 16   |LONG    _Y FATSize;
                            17931 ; 17   |LONG    _Y RootdirCluster;
                            17932 ; 18   |//INT   _Y FSInfoSector;
                            17933 ; 19   |//INT   _Y BkBootSector;
                            17934 ; 20   |LONG    _Y NextFreeCluster;
                            17935 ; 21   |LONG    _Y TotalFreeClusters;
                            17936 ; 22   |INT     _Y RootDirSectors;
                            17937 ; 23   |INT     _Y FIRSTDataSector;
                            17938 ; 24   |INT    _Y FATType;
                            17939 ; 25   |LONG   _Y TotalNoofclusters;
                            17940 ; 26   |INT    _Y ClusterMask;
                            17941 ; 27   |INT    _Y ClusterShift;
                            17942 ; 28   |INT    _Y SectorShift;
                            17943 ; 29   |INT    _Y SectorMask;
                            17944 ; 30   |INT    _Y DevicePresent;
                            17945 ; 31   |LONG   _Y FirRootdirsec;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 298

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17946 ; 32   |INT             _Y FSInfoSector;
                            17947 ; 33   |}FSMEDIA_TABLE;
                            17948 ; 34   |
                            17949 ; 35   |
                            17950 ; 36   |#define         MAXDEVICES              2
                            17951 ; 37   |//#define       NUMCACHES               8  // this is already in fsproj.h (2 for player 2 
                                  for mtp as of 28jun2005) TOVERIFY 2 ok for player and mtp. 
                            17952 ; 38   |
                            17953 ; 39   |// NOTE:  This offset is the same no matter what the sector actual size!  
                            17954 ; 40   |//        TOVERIFY 3.0 doesn't have this defined but uses it in filesystempresent.c. lbmlc
                                   def'd it here so I insert it here.
                            17955 ; 41   |#define         FATFS_SIGNATURE_OFFSET  510
                            17956 ; 42   |#define         BOOTSECTOR              0
                            17957 ; 43   |#define     FSINFOSECTOR        1
                            17958 ; 44   |
                            17959 ; 45   |#define     READ_MODE           1
                            17960 ; 46   |#define     WRITE_MODE          2
                            17961 ; 47   |#define     APPEND_MODE         4
                            17962 ; 48   |#define     SEQ_WRITE_MODE      8
                            17963 ; 49   |#define     DIRECTORY_MODE         16
                            17964 ; 50   |#define     CREATE_MODE        32
                            17965 ; 51   |
                            17966 ; 52   |#define     RPLUS               5
                            17967 ; 53   |#define     WPLUS                   6
                            17968 ; 54   |#define     APLUS               7
                            17969 ; 55   |
                            17970 ; 56   |
                            17971 ; 57   |
                            17972 ; 58   |#define     X_MEMORY            0
                            17973 ; 59   |#define     Y_MEMORY            2
                            17974 ; 60   |#define     P_MEMORY            4
                            17975 ; 61   |
                            17976 ; 62   |#define     FAT12               0 
                            17977 ; 63   |#define     FAT16               1   
                            17978 ; 64   |#define     FAT32               2 
                            17979 ; 65   |
                            17980 ; 66   |
                            17981 ; 67   |#define FAT12EOF            0x0FFF
                            17982 ; 68   |#define FAT16EOF            0xFFFF
                            17983 ; 69   |#define FAT32EOF            0x0FFFFFFF
                            17984 ; 70   |
                            17985 ; 71   |
                            17986 ; 72   |
                            17987 ; 73   |#define FAT12FREECX         0x000
                            17988 ; 74   |#define FAT16FREECX         0x0000
                            17989 ; 75   |#define FAT32FREECX         0x00000000
                            17990 ; 76   |
                            17991 ; 77   |
                            17992 ; 78   |#define  DBCS               1
                            17993 ; 79   |#define  UNICODE            2
                            17994 ; 80   |
                            17995 ; 81   |
                            17996 ; 82   |#define     CREATION_DATE       1
                            17997 ; 83   |#define     CREATION_TIME       2
                            17998 ; 84   |#define     MODIFICATION_DATE   3
                            17999 ; 85   |#define     MODIFICATION_TIME   4
                            18000 ; 86   |
                            18001 ; 87   |
                            18002 ; 88   |#define     READ_ONLY      0X01
                            18003 ; 89   |#define     HIDDEN         0X02
                            18004 ; 90   |#define     SYSTEM         0X04
                            18005 ; 91   |#define     VOLUME_ID      0X08
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 299

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18006 ; 92   |#define     DIRECTORY      0X10
                            18007 ; 93   |#define     ARCHIVE        0X20
                            18008 ; 94   |
                            18009 ; 95   |#define READCOUNTER         105
                            18010 ; 96   |#define WRITECOUNTER        100
                            18011 ; 97   |#define FLUSHCOUNTER        200
                            18012 ; 98   |
                            18013 ; 99   |
                            18014 ; 100  |#define DEFAULT_MEMORY      Y_MEMORY
                            18015 ; 101  |
                            18016 ; 102  |#define  CWD_HANDLE           0
                            18017 ; 103  |#define  DIRECTORY_HANDLE     1
                            18018 ; 104  |#define  FIRST_VALID_HANDLE   2
                            18019 ; 105  |#define  END_OF_DIR_PATH      3
                            18020 ; 106  |
                            18021 ; 107  |//Constants for Sector read and write (Normal and FAT 
                            18022 ; 108  |#define         NORMALTYPE              0
                            18023 ; 109  |#define         FATTYPE                 1
                            18024 ; 110  |#define     RAWTYPE         2
                            18025 ; 111  |
                            18026 ; 112  |#define  SHORTNAMERES_CH      6
                            18027 ; 113  |#define  LONGNAMERES_CH       9
                            18028 ; 114  |#define  MAXFILENAME_CH       260
                            18029 ; 115  |
                            18030 ; 116  |#define VOLUME_TYPE          0
                            18031 ; 117  |#define DIR_TYPE             1
                            18032 ; 118  |#define FILE_TYPE            2
                            18033 ; 119  |                                           
                            18034 ; 120  |#define WRITE_TYPE_RANDOM               0
                            18035 ; 121  |#define WRITE_TYPE_SEQ_FIRST    1
                            18036 ; 122  |#define WRITE_TYPE_SEQ_NEXT             2
                            18037 ; 123  |#define WRITE_TYPE_NOREADBACK   3
                            18038 ; 124  |                  
                            18039 ; 125  |
                            18040 ; 126  |#define     HANDLEENTRYSIZE         19
                            18041 ; 127  |
                            18042 ; 128  |// DEVICERECORDSIZE is now only defined in cachedef.h so deleted from here in first 3.1 pr
                                  elim 
                            18043 ; 129  |
                            18044 ; 130  |#define     CACHEDESCRSIZE          8
                            18045 ; 131  |#define     CACHEBUFSIZE            705
                            18046 ; 132  |
                            18047 ; 133  |#define     UCS2s                     0
                            18048 ; 134  |#define     UCS3s                     1
                            18049 ; 135  |
                            18050 ; 136  |#define     FAT32FSIFREECOUNTSIZE       4
                            18051 ; 137  |
                            18052 ; 138  |#endif // _FS_TYPE_H_
                            18053 ; 139  |
                            18054 
                            18056 
                            18057 ; 19   |
                            18058 ; 20   |extern _reentrant INT FastOpen(LONG Key,_packed char *mode);
                            18059 ; 21   |
                            18060 ; 22   |extern BOOL g_Rebuild;
                            18061 ; 23   |
                            18062 ; 24   |extern DWORD g_FileKey;
                            18063 ; 25   |extern DWORD g_CurrentSongFastkey;
                            18064 ; 26   |
                            18065 ; 27   |extern DIR_DATE g_dirdate;
                            18066 ; 28   |extern DIR_TIME g_dirtime;
                            18067 ; 29   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 300

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18068 ; 30   |#ifdef USE_PLAYLIST5
                            18069 ; 31   |#include "fsapi.h"
                            18070 ; 32   |#include "playlist5.h"
                            18071 ; 33   |#include "playerlib.h"
                            18072 ; 34   |#endif
                            18073 ; 35   |////////////////////////////////////////////////////////////////////////////////
                            18074 ; 36   |//
                            18075 ; 37   |//>  Name:          GetWavMetaData
                            18076 ; 38   |//
                            18077 ; 39   |//   Type:          Function
                            18078 ; 40   |//
                            18079 ; 41   |//   Description:   Finds the meta-data within a .wav file.
                            18080 ; 42   |//
                            18081 ; 43   |//   Inputs:        Ptr to pathname, current device id, ptr to meta-data struct.
                            18082 ; 44   |//
                            18083 ; 45   |//   Outputs:       RETCODE
                            18084 ; 46   |//
                            18085 ; 47   |//   Notes:         none
                            18086 ; 48   |//<
                            18087 ; 49   |////////////////////////////////////////////////////////////////////////////////
                            18088 ; 50   |RETCODE _reentrant GetWavMetaData(INT PackedPathNameAddress, INT btCurrentDevice, FILE_MET
                                  A_DATA * MetaData)
                            18089 ; 51   |{
                            18090 
P:0000                      18091         org     p,".ptextwavmetadata":
                            18098 FGetWavMetaData:
P:0000 055F7C         2    218099         movec   ssh,y:(r7)+
P:0001 77F400 000141  3    518102         move    #321,n7
P:0003 000000         2    718103         nop
P:0004 204F00         2    918104         move    (r7)+n7
                            18114 
                            18115 ; 52   |    RETCODE rtn = META_DATA_NOT_FOUND;
                            18116 
P:0005 77F400 FFFFF7  3   1218118         move    #-9,n7
P:0007 000000         2   1418119         nop
P:0008 686F00         4   1818120         move    r0,y:(r7+n7)
P:0009 46F400 000100  3   2118123         move    #$100,y0
P:000B 77F400 FFFFF8  3   2418125         move    #-8,n7
P:000D 000000         2   2618126         nop
P:000E 4E6F00         4   3018127         move    y0,y:(r7+n7)
                            18144 
                            18145 ; 53   |    INT iHandle = NOERROR;                          // indicates the handle of file opened
                                   (or error if failure)
                            18146 ; 54   |    DWORD dwNumBytesTemp;                           // stores 48 bits, number of bytes in 
                                  file
                            18147 ; 55   |    DWORD dwAvgBytesPerSec;                         // average bytes per second
                            18148 ; 56   |    WORD wBufferPacked[ADPCM_READ_BUFFER_SIZE];     // read file (packed bytes) into this 
                                  buffer
                            18149 ; 57   |    BYTE btUnpack[ADPCM_READ_BUFFER_SIZE];          // uppack bytes into this buffer
                            18150 ; 58   |
                            18151 ; 59   |    _packed BYTE * pcFilePathName = (_packed BYTE*)PackedPathNameAddress;
                            18152 
P:000F 219000         2   3218154         move    a1,r0
                            18156 
                            18157 ; 60   |
                            18158 ; 61   |    // Open the file.
                            18159 ; 62   |#ifdef USE_PLAYLIST3
                            18160 ; 63   |    if (g_Rebuild == TRUE)
                            18161 
P:0010 5EF000 rrrrrr  3   3518163         move    y:Fg_Rebuild,a
P:0012 47F400 000001  3   3818165         move    #>1,y1
P:0014 2A0000         2   4018166         move    #0,a2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 301

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0015 200075         2   4218167         cmp     y1,a
P:0016 0AF0A2 rrrrrr  6   4818168         jne     L93
                            18169 
                            18170 ; 64   |        iHandle = FSFastOpen(g_FileKey,READ);
                            18171 
P:0018 5EF000 rrrrrr  3   5118173         move    y:Fg_FileKey+1,a
P:001A 58F000 rrrrrr  3   5418174         move    y:Fg_FileKey,a0
P:001C 200079         2   5618175         tfr     y1,b
P:001D 0BF080 rrrrrr  6   6218177         jsr     FFSFastOpen
P:001F 77F400 FFFFF9  3   6518179         move    #-7,n7
P:0021 000000         2   6718180         nop
P:0022 5E6F00         4   7118181         move    a,y:(r7+n7)
P:0023 0AF080 rrrrrr  6   7718183         jmp     L96
                            18184 
                            18185 ; 65   |    else
                            18186 ; 66   |        {
                            18187 ; 67   |                if(g_CurrentSongFastkey==0)
                            18188 
                            18190 L93:
P:0025 5EF000 rrrrrr  3   8018193         move    y:Fg_CurrentSongFastkey+1,a
P:0027 58F000 rrrrrr  3   8318194         move    y:Fg_CurrentSongFastkey,a0
P:0029 2A0000         2   8518195         move    #0,a2
P:002A 200003         2   8718196         tst     a
P:002B 0AF0A2 rrrrrr  6   9318197         jne     L94
                            18198 
                            18199 ; 68   |                {
                            18200 ; 69   |                iHandle = FSFileOpen(pcFilePathName, READ, btCurrentDevice);
                            18201 
P:002D 200071         2   9518203         tfr     y1,a
P:002E 0BF080 rrrrrr  6  10118204         jsr     FFSFileOpen
P:0030 77F400 FFFFF9  3  10418207         move    #-7,n7
P:0032 000000         2  10618208         nop
P:0033 5E6F00         4  11018209         move    a,y:(r7+n7)
                            18210 
                            18211 ; 70   |                        g_CurrentSongFastkey=FgetFastHandle(iHandle);
                            18212 
P:0034 0BF080 rrrrrr  6  11618214         jsr     FFgetFastHandle
P:0036 5C7000 rrrrrr  3  11918215         move    a1,y:Fg_CurrentSongFastkey+1
P:0038 587000 rrrrrr  3  12218216         move    a0,y:Fg_CurrentSongFastkey
                            18217 
                            18218 ; 71   |                }
                            18219 
P:003A 0AF080 rrrrrr  6  12818221         jmp     L96
                            18222 
                            18223 ; 72   |                else
                            18224 ; 73   |                        iHandle = FSFastOpen(g_CurrentSongFastkey,READ);
                            18225 
P:003C 5EF000 rrrrrr  3  13118227 L94:    move    y:Fg_CurrentSongFastkey+1,a
P:003E 58F000 rrrrrr  3  13418228         move    y:Fg_CurrentSongFastkey,a0
P:0040 200079         2  13618229         tfr     y1,b
P:0041 0BF080 rrrrrr  6  14218230         jsr     FFSFastOpen
P:0043 77F400 FFFFF9  3  14518231         move    #-7,n7
P:0045 000000         2  14718232         nop
P:0046 5E6F00         4  15118233         move    a,y:(r7+n7)
                            18234 
                            18235 ; 74   |            //if((iHandle = FSFileOpen(pcFilePathName, READ, btCurrentDevice)) != ERROR)
                            18236 ; 75   |        }
                            18237 ; 76   |#endif
                            18238 ; 77   |#ifdef USE_PLAYLIST2
                            18239 ; 78   |                        iHandle = FSFileOpen(pcFilePathName, READ, btCurrentDevice);
                            18240 ; 79   |#endif
                            18241 ; 80   |#ifdef USE_PLAYLIST5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 302

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18242 ; 81   |        g_CurrentFastKey = (g_PL5_PL_queue.pos + g_PL5_Playback.currentplay)->file.lFastKe
                                  y;
                            18243 ; 82   |        iHandle = FSFastOpen(g_CurrentFastKey,READ);
                            18244 ; 83   |#endif
                            18245 ; 84   |        if(iHandle!= ERROR)
                            18246 
P:0047 77F400 FFFFF9  3  15418248 L96:    move    #-7,n7
P:0049 000000         2  15618249         nop
P:004A 5FEF00         4  16018250         move    y:(r7+n7),b
P:004B 46F400 FFFFFF  3  16318251         move    #>-1,y0
P:004D 20005D         2  16518252         cmp     y0,b
P:004E 0AF0AA rrrrrr  6  17118253         jeq     L131
                            18254 
                            18255 ; 85   |    {
                            18256 ; 86   |#ifdef USE_PLAYLIST3
                            18257 ; 87   |            if (g_Rebuild == TRUE)
                            18258 
P:0050 5EF000 rrrrrr  3  17418260         move    y:Fg_Rebuild,a
P:0052 46F400 000001  3  17718261         move    #>1,y0
P:0054 2A0000         2  17918262         move    #0,a2
P:0055 200055         2  18118263         cmp     y0,a
P:0056 0AF0A2 rrrrrr  6  18718264         jne     L97
                            18265 
                            18266 ; 88   |                {
                            18267 ; 89   |                        filegetdate(iHandle,CREATION_DATE,&g_dirdate,&g_dirtime);
                            18268 
P:0058 200001         2  18918270         tfr     b,a
P:0059 200059         2  19118273         tfr     y0,b
P:005A 64F400 rrrrrr  3  19418274         move    #Fg_dirtime,r4
P:005C 60F400 rrrrrr  3  19718275         move    #Fg_dirdate,r0
P:005E 0BF080 rrrrrr  6  20318276         jsr     Ffilegetdate
                            18279 
                            18280 ; 90   |                }
                            18281 
P:0060 77F400 FFFFF9  3  20618283 L97:    move    #-7,n7
P:0062 000000         2  20818284         nop
P:0063 5EEF00         4  21218285         move    y:(r7+n7),a
                            18288 
                            18289 ; 91   |#endif
                            18290 ; 92   |        // Get the number of bytes in song
                            18291 ; 93   |        dwNumBytesTemp = FSFileSize(iHandle);
                            18292 
P:0064 0BF080 rrrrrr  6  21818294         jsr     FFSFileSize
                            18298 
                            18299 ; 94   |        MetaData->dwNumBytes = dwNumBytesTemp;
                            18300 
P:0066 3C1300         2  22018302         move    #19,n4
P:0067 77F400 FFFFF7  3  22318303         move    #-9,n7
P:0069 000000         2  22518304         nop
P:006A 6CEF00         4  22918305         move    y:(r7+n7),r4
P:006B 000000         2  23118306         nop
P:006C 044C16         4  23518307         lua     (r4)+n4,r6
P:006D 000000         2  23718310         nop
P:006E 585E00         2  23918311         move    a0,y:(r6)+
P:006F 5C5600         2  24118312         move    a1,y:(r6)-
                            18313 
                            18314 ; 95   |
                            18315 ; 96   |        // Clear MetaData members that do not apply
                            18316 ; 97   |        MetaData->dwNumFrames = (DWORD)0;
                            18317 
P:0070 3C1700         2  24318319         move    #23,n4
P:0071 000000         2  24518320         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 303

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0072 044C16         4  24918321         lua     (r4)+n4,r6
P:0073 20001B         2  25118322         clr     b   
P:0074 595E00         2  25318323         move    b0,y:(r6)+
P:0075 5D5600         2  25518324         move    b1,y:(r6)-
                            18325 
                            18326 ; 98   |        MetaData->bVBR = (BOOL)0;
                            18327 
P:0076 3C1900         2  25718329         move    #25,n4
P:0077 000000         2  25918330         nop
P:0078 044C16         4  26318331         lua     (r4)+n4,r6
P:0079 000000         2  26518332         nop
P:007A 5D6600         2  26718333         move    b1,y:(r6)
                            18334 
                            18335 ; 99   |        MetaData->wBitRate = (WORD)0;
                            18336 
P:007B 3C0E00         2  26918338         move    #14,n4
P:007C 000000         2  27118339         nop
P:007D 044C16         4  27518340         lua     (r4)+n4,r6
P:007E 000000         2  27718343         nop
P:007F 5D6600         2  27918344         move    b1,y:(r6)
                            18345 
                            18346 ; 100  |
                            18347 ; 101  |        // Read from start of file
                            18348 ; 102  |        if (FSFileRead(20, iHandle, MEM_SPACE_Y, (INT)(-1), wBufferPacked) != ERROR)  //re
                                  ad RIFF         header
                            18349 
P:0080 77F400 FFFF5B  3  28218351         move    #-165,n7
P:0082 000000         2  28418352         nop
P:0083 044F16         4  28818353         lua     (r7)+n7,r6
P:0084 22D000         2  29018354         move    r6,r0
P:0085 244000         2  29218355         move    #<$40,x0
P:0086 56F400 000014  3  29518356         move    #>20,a
P:0088 77F400 FFFFF9  3  29818358         move    #-7,n7
P:008A 000000         2  30018359         nop
P:008B 5FEF00         4  30418360         move    y:(r7+n7),b
P:008C 46F400 FFFFFF  3  30718363         move    #>-1,y0
P:008E 0BF080 rrrrrr  6  31318364         jsr     FFSFileRead
P:0090 44F400 FFFFFF  3  31618367         move    #>-1,x0
P:0092 200045         2  31818368         cmp     x0,a
P:0093 0AF0AA rrrrrr  6  32418369         jeq     L111
                            18370 
                            18371 ; 103  |        {
                            18372 ; 104  |            unpack_data((_packed BYTE *)wBufferPacked, btUnpack,20);
                            18373 
P:0095 77F400 FFFEBF  3  32718375         move    #-321,n7
P:0097 000000         2  32918376         nop
P:0098 044F16         4  33318377         lua     (r7)+n7,r6
P:0099 77F400 FFFF5B  3  33618378         move    #-165,n7
P:009B 000000         2  33818379         nop
P:009C 044F10         4  34218380         lua     (r7)+n7,r0
P:009D 22D400         2  34418381         move    r6,r4
P:009E 56F400 000014  3  34718382         move    #>20,a
P:00A0 0BF080 rrrrrr  6  35318383         jsr     unpack_data
                            18384 
                            18385 ; 105  |
                            18386 ; 106  |            if ((btUnpack[0]=='R') && (btUnpack[1]=='I') && (btUnpack[2]=='F') && (btUnpac
                                  k[3]=='F') &&
                            18387 ; 107  |                   (btUnpack[8]=='W') && (btUnpack[9]=='A') && (btUnpack[10]=='V') && (btU
                                  npack[11]=='E') &&
                            18388 ; 108  |                   (btUnpack[12]=='f') && (btUnpack[13]=='m') && (btUnpack[14]=='t') && (b
                                  tUnpack[15]==' '))
                            18389 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 304

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00A2 77F400 FFFEBF  3  35618391         move    #-321,n7
P:00A4 000000         2  35818392         nop
P:00A5 5EEF00         4  36218393         move    y:(r7+n7),a
P:00A6 46F400 000052  3  36518394         move    #>82,y0
P:00A8 200055         2  36718395         cmp     y0,a
P:00A9 0AF0A2 rrrrrr  6  37318396         jne     L128
P:00AB 77F400 FFFEC0  3  37618397         move    #-320,n7
P:00AD 000000         2  37818398         nop
P:00AE 5FEF00         4  38218399         move    y:(r7+n7),b
P:00AF 47F400 000049  3  38518400         move    #>73,y1
P:00B1 20007D         2  38718401         cmp     y1,b
P:00B2 0AF0A2 rrrrrr  6  39318402         jne     L128
P:00B4 77F400 FFFEC1  3  39618403         move    #-319,n7
P:00B6 000000         2  39818404         nop
P:00B7 5FEF00         4  40218405         move    y:(r7+n7),b
P:00B8 45F400 000046  3  40518406         move    #>70,x1
P:00BA 20006D         2  40718407         cmp     x1,b
P:00BB 0AF0A2 rrrrrr  6  41318408         jne     L128
P:00BD 77F400 FFFEC2  3  41618409         move    #-318,n7
P:00BF 000000         2  41818410         nop
P:00C0 5EEF00         4  42218411         move    y:(r7+n7),a
P:00C1 200065         2  42418412         cmp     x1,a
P:00C2 0AF0A2 rrrrrr  6  43018413         jne     L128
P:00C4 77F400 FFFEC7  3  43318414         move    #-313,n7
P:00C6 000000         2  43518415         nop
P:00C7 5FEF00         4  43918416         move    y:(r7+n7),b
P:00C8 46F400 000057  3  44218417         move    #>87,y0
P:00CA 20005D         2  44418418         cmp     y0,b
P:00CB 0AF0A2 rrrrrr  6  45018419         jne     L128
P:00CD 77F400 FFFEC8  3  45318420         move    #-312,n7
P:00CF 000000         2  45518421         nop
P:00D0 5FEF00         4  45918422         move    y:(r7+n7),b
P:00D1 47F400 000041  3  46218423         move    #>$41,y1
P:00D3 20007D         2  46418424         cmp     y1,b
P:00D4 0AF0A2 rrrrrr  6  47018425         jne     L128
P:00D6 77F400 FFFEC9  3  47318426         move    #-311,n7
P:00D8 000000         2  47518427         nop
P:00D9 5EEF00         4  47918428         move    y:(r7+n7),a
P:00DA 45F400 000056  3  48218429         move    #>86,x1
P:00DC 200065         2  48418430         cmp     x1,a
P:00DD 0AF0A2 rrrrrr  6  49018431         jne     L128
P:00DF 77F400 FFFECA  3  49318432         move    #-310,n7
P:00E1 000000         2  49518433         nop
P:00E2 5FEF00         4  49918434         move    y:(r7+n7),b
P:00E3 46F400 000045  3  50218435         move    #>69,y0
P:00E5 20005D         2  50418436         cmp     y0,b
P:00E6 0AF0A2 rrrrrr  6  51018437         jne     L128
P:00E8 77F400 FFFECB  3  51318438         move    #-309,n7
P:00EA 000000         2  51518439         nop
P:00EB 5FEF00         4  51918440         move    y:(r7+n7),b
P:00EC 47F400 000066  3  52218441         move    #>102,y1
P:00EE 20007D         2  52418442         cmp     y1,b
P:00EF 0AF0A2 rrrrrr  6  53018443         jne     L128
P:00F1 77F400 FFFECC  3  53318444         move    #-308,n7
P:00F3 000000         2  53518445         nop
P:00F4 5EEF00         4  53918446         move    y:(r7+n7),a
P:00F5 45F400 00006D  3  54218447         move    #>109,x1
P:00F7 200065         2  54418448         cmp     x1,a
P:00F8 0AF0A2 rrrrrr  6  55018449         jne     L128
P:00FA 77F400 FFFECD  3  55318450         move    #-307,n7
P:00FC 000000         2  55518451         nop
P:00FD 5FEF00         4  55918452         move    y:(r7+n7),b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 305

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00FE 47F400 000074  3  56218453         move    #>116,y1
P:0100 20007D         2  56418454         cmp     y1,b
P:0101 0AF0A2 rrrrrr  6  57018455         jne     L128
P:0103 77F400 FFFECE  3  57318456         move    #-306,n7
P:0105 000000         2  57518457         nop
P:0106 5EEF00         4  57918458         move    y:(r7+n7),a
P:0107 44F400 000020  3  58218459         move    #>$20,x0
P:0109 200045         2  58418460         cmp     x0,a
P:010A 0AF0A2 rrrrrr  6  59018461         jne     L128
                            18462 
                            18463 ; 109  |            {
                            18464 ; 110  |                // success, header is found
                            18465 ; 111  |                dwNumBytesTemp = ((DWORD)btUnpack[16] | ((DWORD)btUnpack[17]<<8) |
                            18466 ; 112  |                    ((DWORD)btUnpack[18]<<16) | ((DWORD)btUnpack[19]<<24)) - 12;
                            18467 
P:010C 77F400 FFFECF  3  59318469         move    #-305,n7
P:010E 000000         2  59518470         nop
P:010F 58EF00         4  59918471         move    y:(r7+n7),a0
P:0110 2C0000         2  60118472         move    #0,a1
P:0111 77F400 FFFED0  3  60418473         move    #-304,n7
P:0113 000000         2  60618474         nop
P:0114 59EF00         4  61018475         move    y:(r7+n7),b0
P:0115 2D0000         2  61218476         move    #0,b1
P:0116 060880 rrrrrr  6  61818477         do      #8,L138
P:0118 20003A         2  62018479         asl     b
P:0119 000000         2  62218480         nop
                         (4)18481 L138:
P:011A 212600         2  62418483         move    b0,y0
P:011B 21A700         2  62618484         move    b1,y1
P:011C 218400         2  62818485         move    a1,x0
P:011D 210C00         2  63018486         move    a0,a1
P:011E 200052         2  63218487         or      y0,a
P:011F 218800         2  63418488         move    a1,a0
P:0120 208C00         2  63618489         move    x0,a1
P:0121 200072         2  63818490         or      y1,a
P:0122 77F400 FFFED1  3  64118491         move    #-303,n7
P:0124 000000         2  64318492         nop
P:0125 59EF00         4  64718493         move    y:(r7+n7),b0
P:0126 2D0000         2  64918494         move    #0,b1
P:0127 061080 rrrrrr  6  65518495         do      #16,L139
P:0129 20003A         2  65718497         asl     b
P:012A 000000         2  65918498         nop
                         (4)18499 L139:
P:012B 212600         2  66118501         move    b0,y0
P:012C 21A700         2  66318502         move    b1,y1
P:012D 200009         2  66518503         tfr     a,b
P:012E 21A400         2  66718504         move    b1,x0
P:012F 212D00         2  66918505         move    b0,b1
P:0130 20005A         2  67118506         or      y0,b
P:0131 21A900         2  67318507         move    b1,b0
P:0132 208D00         2  67518508         move    x0,b1
P:0133 20007A         2  67718509         or      y1,b
P:0134 77F400 FFFED2  3  68018510         move    #-302,n7
P:0136 000000         2  68218511         nop
P:0137 58EF00         4  68618512         move    y:(r7+n7),a0
P:0138 2C0000         2  68818513         move    #0,a1
P:0139 210E00         2  69018514         move    a0,a
P:013A 210600         2  69218515         move    a0,y0
P:013B 218700         2  69418516         move    a1,y1
P:013C 21A500         2  69618517         move    b1,x1
P:013D 212D00         2  69818518         move    b0,b1
P:013E 20005A         2  70018519         or      y0,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 306

M:ADDR CODE           CYCLES LINE SOURCELINE
P:013F 21A900         2  70218520         move    b1,b0
P:0140 20AD00         2  70418521         move    x1,b1
P:0141 20007A         2  70618522         or      y1,b
P:0142 200013         2  70818523         clr     a   
P:0143 280C00         2  71018524         move    #12,a0
P:0144 20001C         2  71218525         sub     a,b
P:0145 77F400 FFFFFA  3  71518526         move    #-6,n7
P:0147 205F00         2  71718527         move    (r7)+
P:0148 5D6F00         4  72118529         move    b1,y:(r7+n7)
P:0149 205700         2  72318530         move    (r7)-
P:014A 596F00         4  72718532         move    b0,y:(r7+n7)
                            18534 
                            18535 ; 113  |
                            18536 ; 114  |                MetaData->iResourceNum = -1;           // Set Resource Number to -1 if WAV
                                   file type NOT supported.
                            18537 
P:014B 3B1B00         2  72918539         move    #27,n3
P:014C 77F400 FFFFF7  3  73218540         move    #-9,n7
P:014E 000000         2  73418541         nop
P:014F 6BEF00         4  73818542         move    y:(r7+n7),r3
P:0150 000000         2  74018543         nop
P:0151 044B16         4  74418544         lua     (r3)+n3,r6
P:0152 46F400 FFFFFF  3  74718545         move    #>-1,y0
P:0154 77F400 FFFFFC  3  75018546         move    #-4,n7
P:0156 000000         2  75218547         nop
P:0157 6E6F00         4  75618548         move    r6,y:(r7+n7)
P:0158 4E6600         2  75818549         move    y0,y:(r6)
                            18550 
                            18551 ; 115  |
                            18552 ; 116  |                if (FSFileRead(12, iHandle, MEM_SPACE_Y, (INT)(-1), wBufferPacked) != ERRO
                                  R)   // read 'fmt ' chunk
                            18553 
P:0159 77F400 FFFF5B  3  76118555         move    #-165,n7
P:015B 000000         2  76318556         nop
P:015C 044F10         4  76718557         lua     (r7)+n7,r0
P:015D 244000         2  76918558         move    #<$40,x0
P:015E 77F400 FFFFF9  3  77218559         move    #-7,n7
P:0160 000000         2  77418560         nop
P:0161 5FEF00         4  77818561         move    y:(r7+n7),b
P:0162 210E00         2  78018564         move    a0,a
P:0163 0BF080 rrrrrr  6  78618565         jsr     FFSFileRead
P:0165 57F400 FFFFFF  3  78918568         move    #>-1,b
P:0167 200005         2  79118569         cmp     b,a
P:0168 0AF0AA rrrrrr  6  79718570         jeq     L128
P:016A 77F400 FFFF5B  3  80018571         move    #-165,n7
P:016C 000000         2  80218572         nop
P:016D 044F10         4  80618573         lua     (r7)+n7,r0
P:016E 77F400 FFFEBF  3  80918574         move    #-321,n7
P:0170 000000         2  81118575         nop
P:0171 044F14         4  81518576         lua     (r7)+n7,r4
P:0172 56F400 00000C  3  81818577         move    #>12,a
                            18578 
                            18579 ; 117  |                {
                            18580 ; 118  |                    unpack_data((_packed BYTE *)wBufferPacked, btUnpack,12);
                            18581 
P:0174 0BF080 rrrrrr  6  82418583         jsr     unpack_data
                            18584 
                            18585 ; 119  |
                            18586 ; 120  |                    // Identify the file type with the wformattag (2 bytes)
                            18587 ; 121  |                        switch(((WORD)btUnpack[0])|((WORD)btUnpack[1]<<8))
                            18588 
P:0176 77F400 FFFEC0  3  82718590         move    #-320,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 307

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0178 000000         2  82918591         nop
P:0179 4EEF00         4  83318592         move    y:(r7+n7),y0
P:017A 0110E8         2  83518593         mpy     y0,#16,b
P:017B 77F400 FFFEBF  3  83818594         move    #-321,n7
P:017D 000000         2  84018595         nop
P:017E 5CEF00         4  84418596         move    y:(r7+n7),a1
P:017F 212400         2  84618597         move    b0,x0
P:0180 200042         2  84818598         or      x0,a
P:0181 218E00         2  85018599         move    a1,a
P:0182 57F400 000011  3  85318600         move    #>17,b
P:0184 2A0000         2  85518601         move    #0,a2
P:0185 57F405 000001  3  85818602         cmp     b,a     #>1,b
P:0187 0AF0AA rrrrrr  6  86418603         jeq     L99
P:0189 57F405 000002  3  86718604         cmp     b,a     #>2,b
P:018B 0AF0AA rrrrrr  6  87318605         jeq     L100
P:018D 200005         2  87518606         cmp     b,a
P:018E 0AF0A2 rrrrrr  6  88118607         jne     L103
                            18608 
                            18609 ; 122  |                        {
                            18610 ; 123  |                                case WAVE_FORMAT_ADPCM:
                            18611 ; 124  |                                    MetaData->iFileType = (INT)MS_ADPCM_TYPE;
                            18612 
P:0190 3D1A00         2  88318614         move    #26,n5
P:0191 77F400 FFFFF7  3  88618615         move    #-9,n7
P:0193 000000         2  88818616         nop
P:0194 6DEF00         4  89218617         move    y:(r7+n7),r5
P:0195 000000         2  89418618         nop
P:0196 044D16         4  89818619         lua     (r5)+n5,r6
P:0197 291000         2  90018620         move    #16,b0
P:0198 596600         2  90218621         move    b0,y:(r6)
                            18622 
                            18623 ; 125  |                                    MetaData->iResourceNum = RSRC_DEC_ADPCM_MOD_CODE;
                            18624 
P:0199 0AF080 rrrrrr  6  90818626         jmp     L102
                            18627 
                            18628 ; 126  |                                    break;
                            18629 ; 127  |                                case WAVE_FORMAT_IMA_ADPCM:
                            18630 ; 128  |                                    MetaData->iFileType = (INT)IMA_ADPCM_TYPE;
                            18631 
P:019B 3E1A00         2  91018633 L99:    move    #26,n6
P:019C 77F400 FFFFF7  3  91318634         move    #-9,n7
P:019E 000000         2  91518635         nop
P:019F 6EEF00         4  91918636         move    y:(r7+n7),r6
P:01A0 000000         2  92118637         nop
P:01A1 204E00         2  92318638         move    (r6)+n6
P:01A2 290800         2  92518639         move    #8,b0
P:01A3 596600         2  92718640         move    b0,y:(r6)
                            18641 
                            18642 ; 129  |                                    MetaData->iResourceNum = RSRC_DEC_ADPCM_MOD_CODE;
                            18643 
P:01A4 0AF080 rrrrrr  6  93318645         jmp     L102
                            18646 
                            18647 ; 130  |                                    break;
                            18648 ; 131  |                                case WAVE_FORMAT_PCM:
                            18649 ; 132  |                                    MetaData->iFileType = (INT)PCM_WAV_TYPE;
                            18650 
P:01A6 391A00         2  93518652 L100:   move    #26,n1
P:01A7 77F400 FFFFF7  3  93818653         move    #-9,n7
P:01A9 000000         2  94018654         nop
P:01AA 69EF00         4  94418655         move    y:(r7+n7),r1
P:01AB 000000         2  94618656         nop
P:01AC 044916         4  95018657         lua     (r1)+n1,r6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 308

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01AD 292000         2  95218658         move    #$20,b0
P:01AE 596600         2  95418659         move    b0,y:(r6)
                            18660 
                            18661 ; 133  |                                    MetaData->iResourceNum = RSRC_DEC_ADPCM_MOD_CODE;
                            18662 
P:01AF 77F400 FFFFFC  3  95718664 L102:   move    #-4,n7
P:01B1 000000         2  95918665         nop
P:01B2 6EEF00         4  96318666         move    y:(r7+n7),r6
P:01B3 299900         2  96518667         move    #153,b0
P:01B4 596600         2  96718668         move    b0,y:(r6)
                            18669 
                            18670 ; 134  |                                    break;
                            18671 
P:01B5 0AF080 rrrrrr  6  97318673         jmp     L104
                            18674 
                            18675 ; 135  |                                default:
                            18676 ; 136  |                                    rtn = META_DATA_FILE_NOT_SUPPORTED;
                            18677 
P:01B7 57F400 000101  3  97618679 L103:   move    #$101,b
P:01B9 77F400 FFFFF8  3  97918682         move    #-8,n7
P:01BB 000000         2  98118683         nop
P:01BC 5F6F00         4  98518684         move    b,y:(r7+n7)
                            18687 
                            18688 ; 137  |                        }
                            18689 ; 138  |
                            18690 ; 139  |                    if (rtn != META_DATA_FILE_NOT_SUPPORTED)
                            18691 
P:01BD 77F400 FFFFF8  3  98818693 L104:   move    #-8,n7
P:01BF 000000         2  99018694         nop
P:01C0 5EEF00         4  99418695         move    y:(r7+n7),a
P:01C1 44F400 000101  3  99718696         move    #$101,x0
P:01C3 2A0000         2  99918697         move    #0,a2
P:01C4 200045         2 100118698         cmp     x0,a
P:01C5 0AF0AA rrrrrr  6 100718699         jeq     L128
                            18700 
                            18701 ; 140  |                    {
                            18702 ; 141  |                                // nchannels next 2 bytes
                            18703 ; 142  |                                MetaData->wNumChannels = ((WORD)btUnpack[2])|((WORD)btUnpa
                                  ck[3]<<8);
                            18704 ; 143  |
                            18705 ; 144  |                                // Get nsamplespersec
                            18706 ; 145  |                                MetaData->wSampRate =((WORD)btUnpack[4])|((WORD)btUnpack[5
                                  ]<<8)|((WORD)btUnpack[6]<<16);
                            18707 ; 146  |
                            18708 ; 147  |                                // next byte is 00
                            18709 ; 148  |
                            18710 ; 149  |                                // next 4 bytes are navgbytespersec
                            18711 ; 150  |                                dwAvgBytesPerSec = (DWORD)btUnpack[8] | ((DWORD)btUnpack[9
                                  ]<<8) |
                            18712 ; 151  |                                ((DWORD)btUnpack[10]<<16) | ((DWORD)btUnpack[11]<<24);
                            18713 ; 152  |
                            18714 ; 153  |                             // Calculate the song time
                            18715 ; 154  |                             while (fseek(iHandle,dwNumBytesTemp,SEEK_CUR) != ERROR)      
                                   // search 'data' chunk
                            18716 
P:01C7 44F400 000061  3 101018718         move    #>$61,x0
P:01C9 0AF080 rrrrrr  6 101618719         jmp     L106
                            18720 L105:
P:01CB 77F400 FFFFFC  3 101918724         move    #-4,n7
P:01CD 205F00         2 102118725         move    (r7)+
P:01CE 5C6F00         4 102518727         move    a1,y:(r7+n7)
P:01CF 205700         2 102718728         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 309

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01D0 586F00         4 103118730         move    a0,y:(r7+n7)
P:01D1 77F400 FFFFF7  3 103418733         move    #-9,n7
P:01D3 000000         2 103618734         nop
P:01D4 5D6F00         4 104018735         move    b1,y:(r7+n7)
P:01D5 77F400 FFFF5B  3 104318738         move    #-165,n7
P:01D7 000000         2 104518739         nop
P:01D8 044F10         4 104918740         lua     (r7)+n7,r0
P:01D9 244000         2 105118741         move    #<$40,x0
P:01DA 77F400 FFFFF9  3 105418742         move    #-7,n7
P:01DC 000000         2 105618743         nop
P:01DD 5FEF00         4 106018744         move    y:(r7+n7),b
P:01DE 46F400 FFFFFF  3 106318747         move    #>-1,y0
P:01E0 56F400 000008  3 106618748         move    #>8,a
                            18749 
                            18750 ; 155  |                             {
                            18751 ; 156  |                                if (FSFileRead(8, iHandle, MEM_SPACE_Y, (INT)(-1), wBuffer
                                  Packed) != ERROR)
                            18752 
P:01E2 0BF080 rrrrrr  6 107218754         jsr     FFSFileRead
P:01E4 46F400 FFFFFF  3 107518757         move    #>-1,y0
P:01E6 200055         2 107718758         cmp     y0,a
P:01E7 77F400 FFFF5B  3 108018759         move    #-165,n7
P:01E9 000000         2 108218760         nop
P:01EA 044F10         4 108618761         lua     (r7)+n7,r0
P:01EB 0AF0AA rrrrrr  6 109218762         jeq     L128
P:01ED 77F400 FFFEBF  3 109518763         move    #-321,n7
P:01EF 000000         2 109718764         nop
P:01F0 044F14         4 110118765         lua     (r7)+n7,r4
P:01F1 56F400 000008  3 110418766         move    #>8,a
                            18767 
                            18768 ; 157  |                                    {
                            18769 ; 158  |                                        unpack_data((_packed BYTE *)wBufferPacked, btUnpac
                                  k,8);
                            18770 
P:01F3 0BF080 rrrrrr  6 111018772         jsr     unpack_data
                            18773 
                            18774 ; 159  |
                            18775 ; 160  |                                        dwNumBytesTemp = (DWORD)btUnpack[4] | ((DWORD)btUn
                                  pack[5]<<8) |
                            18776 ; 161  |                                        ((DWORD)btUnpack[6]<<16) | ((DWORD)btUnpack[7]<<24
                                  );
                            18777 
P:01F5 77F400 FFFEC3  3 111318779         move    #-317,n7
P:01F7 000000         2 111518780         nop
P:01F8 4EEF00         4 111918781         move    y:(r7+n7),y0
P:01F9 270000         2 112118782         move    #0,y1
P:01FA 77F400 FFFEC4  3 112418783         move    #-316,n7
P:01FC 000000         2 112618784         nop
P:01FD 58EF00         4 113018785         move    y:(r7+n7),a0
P:01FE 2C0000         2 113218786         move    #0,a1
P:01FF 060880 rrrrrr  6 113818787         do      #8,L140
P:0201 200032         2 114018789         asl     a
P:0202 000000         2 114218790         nop
                         (4)18791 L140:
P:0203 77F400 FFFFFE  3 114518793         move    #-2,n7
P:0205 205F00         2 114718794         move    (r7)+
P:0206 4F6F00         4 115118796         move    y1,y:(r7+n7)
P:0207 205700         2 115318797         move    (r7)-
P:0208 4E6F00         4 115718799         move    y0,y:(r7+n7)
P:0209 210600         2 115918800         move    a0,y0
P:020A 218700         2 116118801         move    a1,y1
P:020B 205F00         2 116318802         move    (r7)+
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 310

M:ADDR CODE           CYCLES LINE SOURCELINE
P:020C 5EEF00         4 116718804         move    y:(r7+n7),a
P:020D 205700         2 116918805         move    (r7)-
P:020E 58EF00         4 117318807         move    y:(r7+n7),a0
P:020F 218400         2 117518808         move    a1,x0
P:0210 210C00         2 117718809         move    a0,a1
P:0211 200052         2 117918810         or      y0,a
P:0212 218800         2 118118811         move    a1,a0
P:0213 208C00         2 118318812         move    x0,a1
P:0214 200072         2 118518813         or      y1,a
P:0215 77F400 FFFEC5  3 118818814         move    #-315,n7
P:0217 000000         2 119018815         nop
P:0218 59EF00         4 119418816         move    y:(r7+n7),b0
P:0219 2D0000         2 119618817         move    #0,b1
P:021A 061080 rrrrrr  6 120218818         do      #16,L141
P:021C 20003A         2 120418820         asl     b
P:021D 000000         2 120618821         nop
                         (4)18822 L141:
P:021E 212600         2 120818824         move    b0,y0
P:021F 21A700         2 121018825         move    b1,y1
P:0220 218400         2 121218826         move    a1,x0
P:0221 210C00         2 121418827         move    a0,a1
P:0222 200052         2 121618828         or      y0,a
P:0223 218800         2 121818829         move    a1,a0
P:0224 208C00         2 122018830         move    x0,a1
P:0225 200072         2 122218831         or      y1,a
P:0226 77F400 FFFEC6  3 122518832         move    #-314,n7
P:0228 000000         2 122718833         nop
P:0229 59EF00         4 123118834         move    y:(r7+n7),b0
P:022A 2D0000         2 123318835         move    #0,b1
P:022B 212F00         2 123518836         move    b0,b
P:022C 212600         2 123718837         move    b0,y0
P:022D 21A700         2 123918838         move    b1,y1
P:022E 218400         2 124118839         move    a1,x0
P:022F 210C00         2 124318840         move    a0,a1
P:0230 200052         2 124518841         or      y0,a
P:0231 218800         2 124718842         move    a1,a0
P:0232 208C00         2 124918843         move    x0,a1
P:0233 200072         2 125118844         or      y1,a
P:0234 77F400 FFFFFA  3 125418845         move    #-6,n7
P:0236 205F00         2 125618846         move    (r7)+
P:0237 5C6F00         4 126018848         move    a1,y:(r7+n7)
P:0238 205700         2 126218849         move    (r7)-
P:0239 586F00         4 126618851         move    a0,y:(r7+n7)
                            18852 
                            18853 ; 162  |                                        if ((btUnpack[0]=='d') && (btUnpack[1]=='a') && (b
                                  tUnpack[2]=='t') && (btUnpack[3]=='a'))
                            18854 
P:023A 77F400 FFFEBF  3 126918856         move    #-321,n7
P:023C 000000         2 127118857         nop
P:023D 5FEF00         4 127518858         move    y:(r7+n7),b
P:023E 46F400 000064  3 127818859         move    #>100,y0
P:0240 20005D         2 128018860         cmp     y0,b
P:0241 77F400 FFFFF7  3 128318861         move    #-9,n7
P:0243 000000         2 128518862         nop
P:0244 6EEF00         4 128918863         move    y:(r7+n7),r6
P:0245 44F400 000061  3 129218866         move    #>$61,x0
P:0247 77F400 FFFFFC  3 129518867         move    #-4,n7
P:0249 205F00         2 129718868         move    (r7)+
P:024A 4FEF00         4 130118870         move    y:(r7+n7),y1
P:024B 205700         2 130318871         move    (r7)-
P:024C 4EEF00         4 130718873         move    y:(r7+n7),y0
P:024D 0AF0A2 rrrrrr  6 131318876         jne     L110
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 311

M:ADDR CODE           CYCLES LINE SOURCELINE
P:024F 77F400 FFFEC0  3 131618877         move    #-320,n7
P:0251 000000         2 131818878         nop
P:0252 5FEF00         4 132218879         move    y:(r7+n7),b
P:0253 20004D         2 132418880         cmp     x0,b
P:0254 0AF0A2 rrrrrr  6 133018881         jne     L110
P:0256 77F400 FFFEC1  3 133318882         move    #-319,n7
P:0258 000000         2 133518883         nop
P:0259 5FEF00         4 133918884         move    y:(r7+n7),b
P:025A 45F400 000074  3 134218885         move    #>116,x1
P:025C 20006D         2 134418886         cmp     x1,b
P:025D 0AF0A2 rrrrrr  6 135018887         jne     L110
P:025F 77F400 FFFEC2  3 135318888         move    #-318,n7
P:0261 000000         2 135518889         nop
P:0262 5FEF00         4 135918890         move    y:(r7+n7),b
P:0263 20004D         2 136118891         cmp     x0,b
P:0264 0AF0A2 rrrrrr  6 136718892         jne     L110
                            18893 
                            18894 ; 163  |                                        {
                            18895 ; 164  |                                        // 'data' chunk is found
                            18896 ; 165  |                                       MetaData->iTime = (DWORD) dwNumBytesTemp / (DWORD)d
                                  wAvgBytesPerSec;
                            18897 
P:0266 0BF080 rrrrrr  6 137318899         jsr     Rdiv_ululul
P:0268 3E0F00         2 137518900         move    #15,n6
P:0269 000000         2 137718901         nop
P:026A 204E00         2 137918902         move    (r6)+n6
P:026B 585E00         2 138118904         move    a0,y:(r6)+
P:026C 5C5600         2 138318905         move    a1,y:(r6)-
                            18906 
                            18907 ; 166  |                                     // get wave length in seconds
                            18908 ; 167  |                                            rtn = META_DATA_FOUND;
                            18909 
P:026D 280000         2 138518911         move    #0,a0
P:026E 77F400 FFFFF8  3 138818914         move    #-8,n7
P:0270 000000         2 139018915         nop
P:0271 586F00         4 139418916         move    a0,y:(r7+n7)
                            18919 
                            18920 ; 168  |                                            break;
                            18921 
P:0272 0AF080 rrrrrr  6 140018923         jmp     L128
                            18925 L106:
P:0274 77F400 FFFEC2  3 140318927         move    #-318,n7
P:0276 000000         2 140518928         nop
P:0277 4EEF00         4 140918929         move    y:(r7+n7),y0
P:0278 0110E0         2 141118930         mpy     y0,#16,a
P:0279 77F400 FFFEC1  3 141418931         move    #-319,n7
P:027B 000000         2 141618932         nop
P:027C 5DEF00         4 142018933         move    y:(r7+n7),b1
P:027D 210600         2 142218934         move    a0,y0
P:027E 20005A         2 142418935         or      y0,b
P:027F 3E0D00         2 142618937         move    #13,n6
P:0280 77F400 FFFFF7  3 142918938         move    #-9,n7
P:0282 000000         2 143118939         nop
P:0283 6EEF00         4 143518940         move    y:(r7+n7),r6
P:0284 000000         2 143718941         nop
P:0285 044E15         4 144118942         lua     (r6)+n6,r5
P:0286 000000         2 144318945         nop
P:0287 5D6500         2 144518946         move    b1,y:(r5)
P:0288 77F400 FFFEC4  3 144818948         move    #-316,n7
P:028A 000000         2 145018949         nop
P:028B 4DEF00         4 145418950         move    y:(r7+n7),x1
P:028C 0110F8         2 145618951         mpy     x1,#16,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 312

M:ADDR CODE           CYCLES LINE SOURCELINE
P:028D 77F400 FFFEC3  3 145918952         move    #-317,n7
P:028F 000000         2 146118953         nop
P:0290 5CEF00         4 146518954         move    y:(r7+n7),a1
P:0291 212600         2 146718955         move    b0,y0
P:0292 200052         2 146918956         or      y0,a
P:0293 77F400 FFFEC5  3 147218957         move    #-315,n7
P:0295 000000         2 147418958         nop
P:0296 4EEF00         4 147818959         move    y:(r7+n7),y0
P:0297 0108E8         2 148018960         mpy     y0,#8,b
P:0298 212700         2 148218961         move    b0,y1
P:0299 200072         2 148418962         or      y1,a
P:029A 3E0C00         2 148618963         move    #12,n6
P:029B 000000         2 148818964         nop
P:029C 044E15         4 149218965         lua     (r6)+n6,r5
P:029D 000000         2 149418966         nop
P:029E 5C6500         2 149618967         move    a1,y:(r5)
P:029F 77F400 FFFEC7  3 149918969         move    #-313,n7
P:02A1 000000         2 150118970         nop
P:02A2 59EF00         4 150518971         move    y:(r7+n7),b0
P:02A3 2D0000         2 150718972         move    #0,b1
P:02A4 77F400 FFFEC8  3 151018973         move    #-312,n7
P:02A6 000000         2 151218974         nop
P:02A7 58EF00         4 151618975         move    y:(r7+n7),a0
P:02A8 2C0000         2 151818976         move    #0,a1
P:02A9 060880 rrrrrr  6 152418977         do      #8,L142
P:02AB 200032         2 152618979         asl     a
P:02AC 000000         2 152818980         nop
                         (4)18981 L142:
P:02AD 210600         2 153018983         move    a0,y0
P:02AE 218700         2 153218984         move    a1,y1
P:02AF 21A500         2 153418985         move    b1,x1
P:02B0 212D00         2 153618986         move    b0,b1
P:02B1 20005A         2 153818987         or      y0,b
P:02B2 21A900         2 154018988         move    b1,b0
P:02B3 20AD00         2 154218989         move    x1,b1
P:02B4 20007A         2 154418990         or      y1,b
P:02B5 77F400 FFFEC9  3 154718991         move    #-311,n7
P:02B7 000000         2 154918992         nop
P:02B8 58EF00         4 155318993         move    y:(r7+n7),a0
P:02B9 2C0000         2 155518994         move    #0,a1
P:02BA 061080 rrrrrr  6 156118995         do      #16,L143
P:02BC 200032         2 156318997         asl     a
P:02BD 000000         2 156518998         nop
                         (4)18999 L143:
P:02BE 210600         2 156719001         move    a0,y0
P:02BF 218700         2 156919002         move    a1,y1
P:02C0 21A500         2 157119003         move    b1,x1
P:02C1 212D00         2 157319004         move    b0,b1
P:02C2 20005A         2 157519005         or      y0,b
P:02C3 21A900         2 157719006         move    b1,b0
P:02C4 20AD00         2 157919007         move    x1,b1
P:02C5 20007A         2 158119008         or      y1,b
P:02C6 77F400 FFFECA  3 158419009         move    #-310,n7
P:02C8 000000         2 158619010         nop
P:02C9 58EF00         4 159019011         move    y:(r7+n7),a0
P:02CA 2C0000         2 159219012         move    #0,a1
P:02CB 210E00         2 159419013         move    a0,a
P:02CC 210600         2 159619014         move    a0,y0
P:02CD 218700         2 159819015         move    a1,y1
P:02CE 21A500         2 160019016         move    b1,x1
P:02CF 212D00         2 160219017         move    b0,b1
P:02D0 20005A         2 160419018         or      y0,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 313

M:ADDR CODE           CYCLES LINE SOURCELINE
P:02D1 21A900         2 160619019         move    b1,b0
P:02D2 20AD00         2 160819020         move    x1,b1
P:02D3 20007A         2 161019021         or      y1,b
P:02D4 212600         2 161219022         move    b0,y0
P:02D5 21A700         2 161419023         move    b1,y1
P:02D6 77F400 FFFFFC  3 161719026 L110:   move    #-4,n7
P:02D8 205F00         2 161919027         move    (r7)+
P:02D9 4F6F00         4 162319029         move    y1,y:(r7+n7)
P:02DA 205700         2 162519030         move    (r7)-
P:02DB 4E6F00         4 162919032         move    y0,y:(r7+n7)
P:02DC 77F400 FFFFF7  3 163219035         move    #-9,n7
P:02DE 000000         2 163419036         nop
P:02DF 6E6F00         4 163819037         move    r6,y:(r7+n7)
P:02E0 77F400 FFFFFA  3 164119040         move    #-6,n7
P:02E2 205F00         2 164319041         move    (r7)+
P:02E3 5EEF00         4 164719043         move    y:(r7+n7),a
P:02E4 205700         2 164919044         move    (r7)-
P:02E5 58EF00         4 165319046         move    y:(r7+n7),a0
P:02E6 77F400 FFFFF9  3 165619050         move    #-7,n7
P:02E8 000000         2 165819051         nop
P:02E9 5FEF00         4 166219052         move    y:(r7+n7),b
P:02EA 240000         2 166419055         move    #0,x0
P:02EB 2A0000         2 166619056         move    #0,a2
P:02EC 0ACC17 rrrrrr  6 167219057         jclr    #23,a1,L144
P:02EE 044AA0         2 167419058         movec   m0,a2
P:02EF 0BF080 rrrrrr  6 168019059 L144:   jsr     Ffseek
P:02F1 44F400 FFFFFF  3 168319062         move    #>-1,x0
P:02F3 200045         2 168519063         cmp     x0,a
P:02F4 77F400 FFFF5B  3 168819064         move    #-165,n7
P:02F6 000000         2 169019065         nop
P:02F7 044F1F         4 169419066         lua     (r7)+n7,n7
P:02F8 23E500         2 169619067         move    n7,x1
P:02F9 77F400 FFFFF7  3 169919068         move    #-9,n7
P:02FB 000000         2 170119069         nop
P:02FC 5DEF00         4 170519070         move    y:(r7+n7),b1
P:02FD 44F400 000061  3 170819073         move    #>$61,x0
P:02FF 46F400 000010  3 171119074         move    #>16,y0
P:0301 47F400 000018  3 171419075         move    #>24,y1
P:0303 77F400 FFFFFC  3 171719076         move    #-4,n7
P:0305 205F00         2 171919077         move    (r7)+
P:0306 5EEF00         4 172319079         move    y:(r7+n7),a
P:0307 205700         2 172519080         move    (r7)-
P:0308 58EF00         4 172919082         move    y:(r7+n7),a0
P:0309 0AF0A2 rrrrrr  6 173519085         jne     L105
                            19086 
                            19087 ; 169  |                                        }
                            19088 ; 170  |                                    }
                            19089 ; 171  |                                    else
                            19090 ; 172  |                                        break;
                            19091 ; 173  |                                }
                            19092 ; 174  |                     }
                            19093 ; 175  |                }
                            19094 ; 176  |            }
                            19095 ; 177  |       }
                            19096 
P:030B 0AF080 rrrrrr  6 174119098         jmp     L128
                            19099 
                            19100 ; 178  |
                            19101 ; 179  |          else
                            19102 ; 180  |            rtn = META_DATA_FILEREAD_ERROR;
                            19103 
P:030D 46F400 000201  3 174419105 L111:   move    #$201,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 314

M:ADDR CODE           CYCLES LINE SOURCELINE
P:030F 77F400 FFFFF8  3 174719108         move    #-8,n7
P:0311 000000         2 174919109         nop
P:0312 4E6F00         4 175319110         move    y0,y:(r7+n7)
                            19113 
                            19114 ; 181  |
                            19115 ; 182  |#ifdef USE_PLAYLIST3
                            19116 ; 183  |        if (g_Rebuild == TRUE)
                            19117 
P:0313 5EF000 rrrrrr  3 175619119 L128:   move    y:Fg_Rebuild,a
P:0315 45F400 000001  3 175919121         move    #>1,x1
P:0317 2A0000         2 176119122         move    #0,a2
P:0318 200065         2 176319123         cmp     x1,a
P:0319 0AF0A2 rrrrrr  6 176919124         jne     L129
P:031B 77F400 FFFFF9  3 177219125         move    #-7,n7
P:031D 000000         2 177419126         nop
P:031E 5EEF00         4 177819127         move    y:(r7+n7),a
                            19130 
                            19131 ; 184  |        {
                            19132 ; 185  |            if ((Fclose(iHandle)) == ERROR)
                            19133 
P:031F 0BF080 rrrrrr  6 178419135         jsr     FFclose
P:0321 45F400 FFFFFF  3 178719139         move    #>-1,x1
P:0323 200065         2 178919140         cmp     x1,a
                            19141 
                            19142 ; 186  |                rtn = META_DATA_FILECLOSE_ERROR;
                            19143 
P:0324 0AF080 rrrrrr  6 179519145         jmp     L130
                            19146 
                            19147 ; 187  |         }
                            19148 
P:0326 77F400 FFFFF9  3 179819150 L129:   move    #-7,n7
P:0328 000000         2 180019151         nop
P:0329 5EEF00         4 180419152         move    y:(r7+n7),a
                            19155 
                            19156 ; 188  |        else
                            19157 ; 189  |#endif
                            19158 ; 190  |        {
                            19159 ; 191  |        if ((FSFileClose(iHandle)) == ERROR)
                            19160 
P:032A 0BF080 rrrrrr  6 181019162         jsr     FFSFileClose
P:032C 47F400 FFFFFF  3 181319165         move    #>-1,y1
P:032E 200075         2 181519166         cmp     y1,a
                            19167 
                            19168 ; 192  |          rtn = META_DATA_FILECLOSE_ERROR;
                            19169 
                            19171 L130:
P:032F 0AF0A2 rrrrrr  6 182119173         jne     L134
P:0331 46F400 000202  3 182419175         move    #514,y0
P:0333 77F400 FFFFF8  3 182719178         move    #-8,n7
P:0335 000000         2 182919179         nop
P:0336 4E6F00         4 183319180         move    y0,y:(r7+n7)
                            19183 
                            19184 ; 193  |        }
                            19185 ; 194  |    }
                            19186 
P:0337 0AF080 rrrrrr  6 183919188         jmp     L134
                            19189 
                            19190 ; 195  |    else
                            19191 ; 196  |      rtn = META_DATA_FILEOPEN_ERROR;
                            19192 
P:0339 47F400 000200  3 184219194 L131:   move    #$200,y1
P:033B 77F400 FFFFF8  3 184519197         move    #-8,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 315

M:ADDR CODE           CYCLES LINE SOURCELINE
P:033D 000000         2 184719198         nop
P:033E 4F6F00         4 185119199         move    y1,y:(r7+n7)
                            19202 
                            19203 ; 197  |
                            19204 ; 198  |#ifdef USE_PLAYLIST3
                            19205 ; 199  |        if (g_Rebuild == TRUE)
                            19206 
P:033F 5EF000 rrrrrr  3 185419208 L134:   move    y:Fg_Rebuild,a
P:0341 47F400 000001  3 185719209         move    #>1,y1
P:0343 2A0000         2 185919210         move    #0,a2
P:0344 200075         2 186119211         cmp     y1,a
P:0345 0AF0A2 rrrrrr  6 186719212         jne     L137
                            19213 
                            19214 ; 200  |        {
                            19215 ; 201  |            if(iHandle)
                            19216 
P:0347 77F400 FFFFF9  3 187019218         move    #-7,n7
P:0349 000000         2 187219219         nop
P:034A 5EEF00         4 187619220         move    y:(r7+n7),a
P:034B 200003         2 187819221         tst     a
P:034C 0AF0AA rrrrrr  6 188419224         jeq     L137
                            19225 
                            19226 ; 202  |                        {
                            19227 ; 203  |                    if ((Fclose(iHandle)) == ERROR)
                            19228 
P:034E 0BF080 rrrrrr  6 189019230         jsr     FFclose
P:0350 44F400 FFFFFF  3 189319232         move    #>-1,x0
P:0352 200045         2 189519233         cmp     x0,a
P:0353 0AF0A2 rrrrrr  6 190119234         jne     L137
                            19235 
                            19236 ; 204  |                                rtn = META_DATA_FILECLOSE_ERROR;
                            19237 
P:0355 44F400 000202  3 190419239         move    #514,x0
P:0357 77F400 FFFFF8  3 190719242         move    #-8,n7
P:0359 000000         2 190919243         nop
P:035A 4C6F00         4 191319244         move    x0,y:(r7+n7)
                            19247 
                            19248 ; 205  |                        }
                            19249 ; 206  |        }
                            19250 ; 207  |#endif
                            19251 ; 208  |
                            19252 ; 209  |    return(rtn);
                            19253 
P:035B 77F400 FFFFF8  3 191619255 L137:   move    #-8,n7
P:035D 000000         2 191819256         nop
P:035E 5EEF00         4 192219257         move    y:(r7+n7),a
                            19260 
                            19261 ; 210  |}
                            19262 
P:035F 77F400 FFFEBE  3 192519264         move    #-322,n7
P:0361 000000         2 192719265         nop
P:0362 05EF7C         4 193119266         movec   y:(r7+n7),ssh
P:0363 204F00         2 193319268         move    (r7)+n7
P:0364 00000C         4 193719270         rts
                            19273 
                            19274 ; 211  |
                            19275 ; 212  |///////////////////////////////////////////////////////////////////////////////
                            19276 ; 213  |//> Name:        GetRiffInfo
                            19277 ; 214  |//
                            19278 ; 215  |//  Type:        Function
                            19279 ; 216  |//
                            19280 ; 217  |//  Description: Used to extract Riff information from the RIFF header.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 316

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19281 ; 218  |//
                            19282 ; 219  |//  Inputs:  FILE_META_DATA struct pointer, pointer to buffer containing packed header dat
                                  a
                            19283 ; 220  |//  Outputs: Fills in the following FILE_META_DATA members:
                            19284 ; 221  |//              iFileType
                            19285 ; 222  |//              iResourceNum
                            19286 ; 223  |//              wSampRate
                            19287 ; 224  |//              iTime
                            19288 ; 225  |//
                            19289 ; 226  |//<
                            19290 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            19291 ; 228  |/*INT _reentrant GetRiffInfo(FILE_META_DATA * MetaData,  _packed BYTE *buf)
                            19292 ; 229  |{
                            19293 ; 230  |  BYTE btRiffUnpack[36];
                            19294 ; 231  |  WORD wPcmType = 0;
                            19295 ; 232  |  WORD wBitsPerSample = 0;
                            19296 ; 233  |
                            19297 ; 234  |  // Initialize the Resource Number to -1 (Error case)
                            19298 ; 235  |  // This will be overwritten if proper RIFF header found.
                            19299 ; 236  |  MetaData->iResourceNum = -1;
                            19300 ; 237  |
                            19301 ; 238  |  // unpack first 36 bytes
                            19302 ; 239  |  unpack_data(buf,btRiffUnpack,36);
                            19303 ; 240  |
                            19304 ; 241  |  if( btRiffUnpack[0] != 'R' ) return META_DATA_NOT_FOUND;  // fail
                            19305 ; 242  |  if( btRiffUnpack[1] != 'I' ) return META_DATA_NOT_FOUND;  // header not found
                            19306 ; 243  |  if( btRiffUnpack[2] != 'F' ) return META_DATA_NOT_FOUND;
                            19307 ; 244  |  if( btRiffUnpack[3] != 'F' ) return META_DATA_NOT_FOUND;
                            19308 ; 245  |
                            19309 ; 246  |  // if we get this far, we have found "RIFF" in the header
                            19310 ; 247  |  // (+4,+5,+6,+7)next 4 bytes represent "chunksize" -- not needed here (?)
                            19311 ; 248  |
                            19312 ; 249  |  // added code start
                            19313 ; 250  |  MetaData->dwNumBytes = (DWORD)btRiffUnpack[4] | ((DWORD)btRiffUnpack[5] << 8)
                            19314 ; 251  |          | ((DWORD)btRiffUnpack[6] << 16) | ((DWORD)btRiffUnpack[7] << 24);
                            19315 ; 252  |  MetaData->dwNumBytes += 8; // Add the length of RIFF header and chunksize DWORD.
                            19316 ; 253  |  // added code end
                            19317 ; 254  |
                            19318 ; 255  |  // Check for "WAVE" and "fmt" tags
                            19319 ; 256  |  if( btRiffUnpack[8]  != 'W' ) return META_DATA_NOT_FOUND;
                            19320 ; 257  |  if( btRiffUnpack[9]  != 'A' ) return META_DATA_NOT_FOUND;
                            19321 ; 258  |  if( btRiffUnpack[10] != 'V' ) return META_DATA_NOT_FOUND;
                            19322 ; 259  |  if( btRiffUnpack[11] != 'E' ) return META_DATA_NOT_FOUND;
                            19323 ; 260  |  if( btRiffUnpack[12] != 'f' ) return META_DATA_NOT_FOUND;
                            19324 ; 261  |  if( btRiffUnpack[13] != 'm' ) return META_DATA_NOT_FOUND;
                            19325 ; 262  |  if( btRiffUnpack[14] != 't' ) return META_DATA_NOT_FOUND;
                            19326 ; 263  |  if( btRiffUnpack[15] != ' ' ) return META_DATA_NOT_FOUND;
                            19327 ; 264  |
                            19328 ; 265  |  // wavechunksize next 3 bytes and a zero byte (16,17,18,19)
                            19329 ; 266  |
                            19330 ; 267  |  // Identify the file type with the wformattag (2 bytes)
                            19331 ; 268  |  wPcmType = (((WORD)btRiffUnpack[20])|((WORD)btRiffUnpack[21]<<8));
                            19332 ; 269  |
                            19333 ; 270  |  switch(wPcmType)
                            19334 ; 271  |  {
                            19335 ; 272  |  case WAVE_FORMAT_ADPCM:
                            19336 ; 273  |    MetaData->iFileType = (INT)MS_ADPCM_TYPE;
                            19337 ; 274  |    MetaData->iResourceNum = RSRC_DEC_ADPCM_MOD_CODE;
                            19338 ; 275  |    break;
                            19339 ; 276  |  case WAVE_FORMAT_IMA_ADPCM:
                            19340 ; 277  |    MetaData->iFileType = (INT)IMA_ADPCM_TYPE;
                            19341 ; 278  |    MetaData->iResourceNum = RSRC_DEC_ADPCM_MOD_CODE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 317

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19342 ; 279  |    break;
                            19343 ; 280  |  case WAVE_FORMAT_PCM:
                            19344 ; 281  |    MetaData->iFileType = (INT)PCM_WAV_TYPE;
                            19345 ; 282  |    MetaData->iResourceNum = RSRC_DEC_ADPCM_MOD_CODE;
                            19346 ; 283  |    break;
                            19347 ; 284  |  default:
                            19348 ; 285  |    MetaData->iResourceNum = -1;           // Set Resource Number to -1 if WAV file type N
                                  OT supported.
                            19349 ; 286  |    return META_DATA_FILE_NOT_SUPPORTED;
                            19350 ; 287  |  }
                            19351 ; 288  |
                            19352 ; 289  |
                            19353 ; 290  |  // nchannels next 2 bytes [22,23]
                            19354 ; 291  |  MetaData->wNumChannels = (((WORD)btRiffUnpack[22])|((WORD)btRiffUnpack[23]<<8));
                            19355 ; 292  |
                            19356 ; 293  |  // Get nsamplespersec
                            19357 ; 294  |  MetaData->wSampRate = (((WORD)btRiffUnpack[24])|((WORD)btRiffUnpack[25]<<8)|((WORD)btRif
                                  fUnpack[26]<<16));
                            19358 ; 295  |
                            19359 ; 296  |  // next byte [27] is 00
                            19360 ; 297  |
                            19361 ; 298  |  // next bytes [28,29,30] are navgbytespersec and [31] is 00
                            19362 ; 299  |
                            19363 ; 300  |  // next bytes [32,33] are nblockalign
                            19364 ; 301  |
                            19365 ; 302  |  // Get wbitspersample -- use to calculate the time
                            19366 ; 303  |  wBitsPerSample = (((WORD)btRiffUnpack[34])|((WORD)btRiffUnpack[35]<<8));
                            19367 ; 304  |
                            19368 ; 305  |  // Calculate the song time
                            19369 ; 306  |  MetaData->iTime = (INT) (MetaData->dwNumBytes * (DWORD)8 / (MetaData->wSampRate * wBitsP
                                  erSample * MetaData->wNumChannels));
                            19370 ; 307  |
                            19371 ; 308  |  if(MetaData->iTime <= 0)
                            19372 ; 309  |    return META_DATA_FILE_NOT_SUPPORTED;    // don't play the 0 byte file
                            19373 ; 310  |
                            19374 ; 311  |  return META_DATA_FOUND;
                            19375 ; 312  |} */
                            19376 
                            19405 
                            19406         extern  Rdiv_ululul, unpack_data, FFSFastOpen, FFSFileClose
                            19407         extern  FFSFileOpen, FFSFileRead, FFSFileSize, FFclose
                            19408         extern  FFgetFastHandle, Ffilegetdate, Ffseek
                            19409         extern  y:Fg_CurrentSongFastkey, y:Fg_FileKey, y:Fg_Rebuild
                            19410         extern  y:Fg_dirdate, y:Fg_dirtime
                            19411 
                            19412         global  FGetWavMetaData
                            19413 
                            19414         local   L93, L94, L96, L97, L99, L100, L102, L103, L104, L105, L106
                            19415         local   L110, L111, L128, L129, L130, L131, L134, L137, L138, L139
                            19416         local   L140, L141, L142, L143, L144
                            19417 
                            19418         calls   "GetWavMetaData", "FSFastOpen", "FSFileClose", "FSFileOpen"
                            19419         calls   "GetWavMetaData", "FSFileRead", "FSFileSize", "Fclose"
                            19420         calls   "GetWavMetaData", "FgetFastHandle", "Rdiv_ululul"
                            19421         calls   "GetWavMetaData", "filegetdate", "fseek", "unpack_data"
                            19422 
