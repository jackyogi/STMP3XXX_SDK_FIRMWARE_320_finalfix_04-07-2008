TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd25fb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;       chkdsk.c:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                               98 ; 3    |//
                               99 ; 4    |// Filename: chkdsk.c
                              100 ; 5    |// Description: Check Disk Utility Main Program
                              101 ; 6    |// Limitations:
                              102 ; 7    |//  1 - Only works for 512 bytes sectors
                              103 ; 8    |//  2 - Because of the recursivity for CountSubDirs(), each sub directory
                              104 ; 9    |//      takes 2 words in the stack. Watch for stack overflows.
                              105 ; 10   |//
                              106 ; 11   |// To do:
                              107 ; 12   |////////////////////////////////////////////////////////////////////////////////
                              108 ; 13   |
                              109 ; 14   |////////////////////////////////////////////////////////////////////////////////
                              110 ; 15   |//   Includes and external references
                              111 ; 16   |////////////////////////////////////////////////////////////////////////////////
                              112 ; 17   |#include "types.h"
                              113 
                              115 
                              116 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              117 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              118 ; 3    |//
                              119 ; 4    |// Filename: types.h
                              120 ; 5    |// Description: Standard data types
                              121 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              122 ; 7    |
                              123 ; 8    |#ifndef _TYPES_H
                              124 ; 9    |#define _TYPES_H
                              125 ; 10   |
                              126 ; 11   |// TODO:  move this outta here!
                              127 ; 12   |#if !defined(NOERROR)
                              128 ; 13   |#define NOERROR 0
                              129 ; 14   |#define SUCCESS 0
                              130 ; 15   |#endif 
                              131 ; 16   |#if !defined(SUCCESS)
                              132 ; 17   |#define SUCCESS  0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 18   |#endif
                              134 ; 19   |#if !defined(ERROR)
                              135 ; 20   |#define ERROR   -1
                              136 ; 21   |#endif
                              137 ; 22   |#if !defined(FALSE)
                              138 ; 23   |#define FALSE 0
                              139 ; 24   |#endif
                              140 ; 25   |#if !defined(TRUE)
                              141 ; 26   |#define TRUE  1
                              142 ; 27   |#endif
                              143 ; 28   |
                              144 ; 29   |#if !defined(NULL)
                              145 ; 30   |#define NULL 0
                              146 ; 31   |#endif
                              147 ; 32   |
                              148 ; 33   |#define MAX_INT     0x7FFFFF
                              149 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              150 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              151 ; 36   |#define MAX_ULONG   (-1) 
                              152 ; 37   |
                              153 ; 38   |#define WORD_SIZE   24              // word size in bits
                              154 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              155 ; 40   |
                              156 ; 41   |
                              157 ; 42   |#define BYTE    unsigned char       // btVarName
                              158 ; 43   |#define CHAR    signed char         // cVarName
                              159 ; 44   |#define USHORT  unsigned short      // usVarName
                              160 ; 45   |#define SHORT   unsigned short      // sVarName
                              161 ; 46   |#define WORD    unsigned int        // wVarName
                              162 ; 47   |#define INT     signed int          // iVarName
                              163 ; 48   |#define DWORD   unsigned long       // dwVarName
                              164 ; 49   |#define LONG    signed long         // lVarName
                              165 ; 50   |#define BOOL    unsigned int        // bVarName
                              166 ; 51   |#define FRACT   _fract              // frVarName
                              167 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              168 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              169 ; 54   |#define FLOAT   float               // fVarName
                              170 ; 55   |#define DBL     double              // dVarName
                              171 ; 56   |#define ENUM    enum                // eVarName
                              172 ; 57   |#define CMX     _complex            // cmxVarName
                              173 ; 58   |typedef WORD UCS3;                   // 
                              174 ; 59   |
                              175 ; 60   |#define UINT16  unsigned short
                              176 ; 61   |#define UINT8   unsigned char   
                              177 ; 62   |#define UINT32  unsigned long
                              178 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              179 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              180 ; 65   |#define WCHAR   UINT16
                              181 ; 66   |
                              182 ; 67   |//UINT128 is 16 bytes or 6 words
                              183 ; 68   |typedef struct UINT128_3500 {   
                              184 ; 69   |    int val[6];     
                              185 ; 70   |} UINT128_3500;
                              186 ; 71   |
                              187 ; 72   |#define UINT128   UINT128_3500
                              188 ; 73   |
                              189 ; 74   |// Little endian word packed byte strings:   
                              190 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              191 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              192 ; 77   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              194 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              195 ; 80   |
                              196 ; 81   |// Declare Memory Spaces To Use When Coding
                              197 ; 82   |// A. Sector Buffers
                              198 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              199 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              200 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              201 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              202 
                              204 
                              205 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              206 ; 88   |// B. Media DDI Memory
                              207 ; 89   |#define MEDIA_DDI_MEM _Y
                              208 ; 90   |
                              209 ; 91   |
                              210 ; 92   |
                              211 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              212 ; 94   |// Examples of circular pointers:
                              213 ; 95   |//    INT CIRC cpiVarName
                              214 ; 96   |//    DWORD CIRC cpdwVarName
                              215 ; 97   |
                              216 ; 98   |#define RETCODE INT                 // rcVarName
                              217 ; 99   |
                              218 ; 100  |// generic bitfield structure
                              219 ; 101  |struct Bitfield {
                              220 ; 102  |    unsigned int B0  :1;
                              221 ; 103  |    unsigned int B1  :1;
                              222 ; 104  |    unsigned int B2  :1;
                              223 ; 105  |    unsigned int B3  :1;
                              224 ; 106  |    unsigned int B4  :1;
                              225 ; 107  |    unsigned int B5  :1;
                              226 ; 108  |    unsigned int B6  :1;
                              227 ; 109  |    unsigned int B7  :1;
                              228 ; 110  |    unsigned int B8  :1;
                              229 ; 111  |    unsigned int B9  :1;
                              230 ; 112  |    unsigned int B10 :1;
                              231 ; 113  |    unsigned int B11 :1;
                              232 ; 114  |    unsigned int B12 :1;
                              233 ; 115  |    unsigned int B13 :1;
                              234 ; 116  |    unsigned int B14 :1;
                              235 ; 117  |    unsigned int B15 :1;
                              236 ; 118  |    unsigned int B16 :1;
                              237 ; 119  |    unsigned int B17 :1;
                              238 ; 120  |    unsigned int B18 :1;
                              239 ; 121  |    unsigned int B19 :1;
                              240 ; 122  |    unsigned int B20 :1;
                              241 ; 123  |    unsigned int B21 :1;
                              242 ; 124  |    unsigned int B22 :1;
                              243 ; 125  |    unsigned int B23 :1;
                              244 ; 126  |};
                              245 ; 127  |
                              246 ; 128  |union BitInt {
                              247 ; 129  |        struct Bitfield B;
                              248 ; 130  |        int        I;
                              249 ; 131  |};
                              250 ; 132  |
                              251 ; 133  |#define MAX_MSG_LENGTH 10
                              252 ; 134  |struct CMessage
                              253 ; 135  |{
                              254 ; 136  |        unsigned int m_uLength;
                              255 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 138  |};
                              257 ; 139  |
                              258 ; 140  |typedef struct {
                              259 ; 141  |    WORD m_wLength;
                              260 ; 142  |    WORD m_wMessage;
                              261 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              262 ; 144  |} Message;
                              263 ; 145  |
                              264 ; 146  |struct MessageQueueDescriptor
                              265 ; 147  |{
                              266 ; 148  |        int *m_pBase;
                              267 ; 149  |        int m_iModulo;
                              268 ; 150  |        int m_iSize;
                              269 ; 151  |        int *m_pHead;
                              270 ; 152  |        int *m_pTail;
                              271 ; 153  |};
                              272 ; 154  |
                              273 ; 155  |struct ModuleEntry
                              274 ; 156  |{
                              275 ; 157  |    int m_iSignaledEventMask;
                              276 ; 158  |    int m_iWaitEventMask;
                              277 ; 159  |    int m_iResourceOfCode;
                              278 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              279 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              280 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              281 ; 163  |    int m_uTimeOutHigh;
                              282 ; 164  |    int m_uTimeOutLow;
                              283 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              284 ; 166  |};
                              285 ; 167  |
                              286 ; 168  |union WaitMask{
                              287 ; 169  |    struct B{
                              288 ; 170  |        unsigned int m_bNone     :1;
                              289 ; 171  |        unsigned int m_bMessage  :1;
                              290 ; 172  |        unsigned int m_bTimer    :1;
                              291 ; 173  |        unsigned int m_bButton   :1;
                              292 ; 174  |    } B;
                              293 ; 175  |    int I;
                              294 ; 176  |} ;
                              295 ; 177  |
                              296 ; 178  |
                              297 ; 179  |struct Button {
                              298 ; 180  |        WORD wButtonEvent;
                              299 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              300 ; 182  |};
                              301 ; 183  |
                              302 ; 184  |struct Message {
                              303 ; 185  |        WORD wMsgLength;
                              304 ; 186  |        WORD wMsgCommand;
                              305 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              306 ; 188  |};
                              307 ; 189  |
                              308 ; 190  |union EventTypes {
                              309 ; 191  |        struct CMessage msg;
                              310 ; 192  |        struct Button Button ;
                              311 ; 193  |        struct Message Message;
                              312 ; 194  |};
                              313 ; 195  |
                              314 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              315 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              316 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              318 ; 200  |
                              319 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              320 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              321 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              322 ; 204  |
                              323 ; 205  |#if DEBUG
                              324 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              325 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              326 ; 208  |#else 
                              327 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              328 ; 210  |#define DebugBuildAssert(x)    
                              329 ; 211  |#endif
                              330 ; 212  |
                              331 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              332 ; 214  |//  #pragma asm
                              333 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              334 ; 216  |//  #pragma endasm
                              335 ; 217  |
                              336 ; 218  |
                              337 ; 219  |#ifdef COLOR_262K
                              338 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              339 ; 221  |#elif defined(COLOR_65K)
                              340 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              341 ; 223  |#else
                              342 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              343 ; 225  |#endif
                              344 ; 226  |    
                              345 ; 227  |#endif // #ifndef _TYPES_H
                              346 
                              348 
                              349 ; 18   |#include "platform.h"
                              350 
                              352 
                              353 ; 1    |// Plafform API
                              354 ; 2    |
                              355 ; 3    |extern void EnterNonReentrantSection(void);
                              356 ; 4    |extern void LeaveNonReentrantSection(void);
                              357 ; 5    |
                              358 ; 6    |extern INT FSGetByte(void *buffer, INT Offset,INT MemoryType);
                              359 ; 7    |extern INT FSGetWord(void *buffer, INT Offset,INT MemoryType);
                              360 ; 8    |extern LONG FSGetDWord(void *buffer, INT Offset,INT MemoryType);
                              361 ; 9    |extern void FsCopyBuffer(void *Dest_Buffer,INT Dest_Offset,void *Source_Buffer,INT Source_
                                  Offset,INT Size,INT Source_MemoryType,INT Dest_MemoryType,INT Dest_modulo,INT SourceModule);
                              362 ; 10   |extern void PutByte(void *buffer, INT byte,INT Offset ,INT MemoryType);
                              363 ; 11   |extern void PutWord(void *buffer, INT word, INT Offset,INT MemoryType);
                              364 ; 12   |extern void PutDword(void *buffer,  LONG dword,INT Offset,INT MemoryType);
                              365 ; 13   |extern LONG GetDWordY(void *buffer, INT Offset,INT MemoryType);
                              366 
                              368 
                              369 ; 19   |#include "chkdsk.h"
                              370 
                              372 
                              373 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              374 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              375 ; 3    |//
                              376 ; 4    |// Filename: chkdsk.h (historic name fattest.h)
                              377 ; 5    |// Description: 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              379 ; 7    |#include "types.h"
                              380 
                              382 
                              383 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              384 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              385 ; 3    |//
                              386 ; 4    |// Filename: types.h
                              387 ; 5    |// Description: Standard data types
                              388 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              389 ; 7    |
                              390 ; 8    |#ifndef _TYPES_H
                              391 ; 9    |#define _TYPES_H
                              392 ; 10   |
                              393 ; 11   |// TODO:  move this outta here!
                              394 ; 12   |#if !defined(NOERROR)
                              395 ; 13   |#define NOERROR 0
                              396 ; 14   |#define SUCCESS 0
                              397 ; 15   |#endif 
                              398 ; 16   |#if !defined(SUCCESS)
                              399 ; 17   |#define SUCCESS  0
                              400 ; 18   |#endif
                              401 ; 19   |#if !defined(ERROR)
                              402 ; 20   |#define ERROR   -1
                              403 ; 21   |#endif
                              404 ; 22   |#if !defined(FALSE)
                              405 ; 23   |#define FALSE 0
                              406 ; 24   |#endif
                              407 ; 25   |#if !defined(TRUE)
                              408 ; 26   |#define TRUE  1
                              409 ; 27   |#endif
                              410 ; 28   |
                              411 ; 29   |#if !defined(NULL)
                              412 ; 30   |#define NULL 0
                              413 ; 31   |#endif
                              414 ; 32   |
                              415 ; 33   |#define MAX_INT     0x7FFFFF
                              416 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              417 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              418 ; 36   |#define MAX_ULONG   (-1) 
                              419 ; 37   |
                              420 ; 38   |#define WORD_SIZE   24              // word size in bits
                              421 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              422 ; 40   |
                              423 ; 41   |
                              424 ; 42   |#define BYTE    unsigned char       // btVarName
                              425 ; 43   |#define CHAR    signed char         // cVarName
                              426 ; 44   |#define USHORT  unsigned short      // usVarName
                              427 ; 45   |#define SHORT   unsigned short      // sVarName
                              428 ; 46   |#define WORD    unsigned int        // wVarName
                              429 ; 47   |#define INT     signed int          // iVarName
                              430 ; 48   |#define DWORD   unsigned long       // dwVarName
                              431 ; 49   |#define LONG    signed long         // lVarName
                              432 ; 50   |#define BOOL    unsigned int        // bVarName
                              433 ; 51   |#define FRACT   _fract              // frVarName
                              434 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              435 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              436 ; 54   |#define FLOAT   float               // fVarName
                              437 ; 55   |#define DBL     double              // dVarName
                              438 ; 56   |#define ENUM    enum                // eVarName
                              439 ; 57   |#define CMX     _complex            // cmxVarName
                              440 ; 58   |typedef WORD UCS3;                   // 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              441 ; 59   |
                              442 ; 60   |#define UINT16  unsigned short
                              443 ; 61   |#define UINT8   unsigned char   
                              444 ; 62   |#define UINT32  unsigned long
                              445 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              446 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              447 ; 65   |#define WCHAR   UINT16
                              448 ; 66   |
                              449 ; 67   |//UINT128 is 16 bytes or 6 words
                              450 ; 68   |typedef struct UINT128_3500 {   
                              451 ; 69   |    int val[6];     
                              452 ; 70   |} UINT128_3500;
                              453 ; 71   |
                              454 ; 72   |#define UINT128   UINT128_3500
                              455 ; 73   |
                              456 ; 74   |// Little endian word packed byte strings:   
                              457 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              458 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              459 ; 77   |// Little endian word packed byte strings:   
                              460 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              461 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              462 ; 80   |
                              463 ; 81   |// Declare Memory Spaces To Use When Coding
                              464 ; 82   |// A. Sector Buffers
                              465 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              466 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              467 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              468 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              469 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              470 ; 88   |// B. Media DDI Memory
                              471 ; 89   |#define MEDIA_DDI_MEM _Y
                              472 ; 90   |
                              473 ; 91   |
                              474 ; 92   |
                              475 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              476 ; 94   |// Examples of circular pointers:
                              477 ; 95   |//    INT CIRC cpiVarName
                              478 ; 96   |//    DWORD CIRC cpdwVarName
                              479 ; 97   |
                              480 ; 98   |#define RETCODE INT                 // rcVarName
                              481 ; 99   |
                              482 ; 100  |// generic bitfield structure
                              483 ; 101  |struct Bitfield {
                              484 ; 102  |    unsigned int B0  :1;
                              485 ; 103  |    unsigned int B1  :1;
                              486 ; 104  |    unsigned int B2  :1;
                              487 ; 105  |    unsigned int B3  :1;
                              488 ; 106  |    unsigned int B4  :1;
                              489 ; 107  |    unsigned int B5  :1;
                              490 ; 108  |    unsigned int B6  :1;
                              491 ; 109  |    unsigned int B7  :1;
                              492 ; 110  |    unsigned int B8  :1;
                              493 ; 111  |    unsigned int B9  :1;
                              494 ; 112  |    unsigned int B10 :1;
                              495 ; 113  |    unsigned int B11 :1;
                              496 ; 114  |    unsigned int B12 :1;
                              497 ; 115  |    unsigned int B13 :1;
                              498 ; 116  |    unsigned int B14 :1;
                              499 ; 117  |    unsigned int B15 :1;
                              500 ; 118  |    unsigned int B16 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              501 ; 119  |    unsigned int B17 :1;
                              502 ; 120  |    unsigned int B18 :1;
                              503 ; 121  |    unsigned int B19 :1;
                              504 ; 122  |    unsigned int B20 :1;
                              505 ; 123  |    unsigned int B21 :1;
                              506 ; 124  |    unsigned int B22 :1;
                              507 ; 125  |    unsigned int B23 :1;
                              508 ; 126  |};
                              509 ; 127  |
                              510 ; 128  |union BitInt {
                              511 ; 129  |        struct Bitfield B;
                              512 ; 130  |        int        I;
                              513 ; 131  |};
                              514 ; 132  |
                              515 ; 133  |#define MAX_MSG_LENGTH 10
                              516 ; 134  |struct CMessage
                              517 ; 135  |{
                              518 ; 136  |        unsigned int m_uLength;
                              519 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              520 ; 138  |};
                              521 ; 139  |
                              522 ; 140  |typedef struct {
                              523 ; 141  |    WORD m_wLength;
                              524 ; 142  |    WORD m_wMessage;
                              525 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              526 ; 144  |} Message;
                              527 ; 145  |
                              528 ; 146  |struct MessageQueueDescriptor
                              529 ; 147  |{
                              530 ; 148  |        int *m_pBase;
                              531 ; 149  |        int m_iModulo;
                              532 ; 150  |        int m_iSize;
                              533 ; 151  |        int *m_pHead;
                              534 ; 152  |        int *m_pTail;
                              535 ; 153  |};
                              536 ; 154  |
                              537 ; 155  |struct ModuleEntry
                              538 ; 156  |{
                              539 ; 157  |    int m_iSignaledEventMask;
                              540 ; 158  |    int m_iWaitEventMask;
                              541 ; 159  |    int m_iResourceOfCode;
                              542 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              543 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              544 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              545 ; 163  |    int m_uTimeOutHigh;
                              546 ; 164  |    int m_uTimeOutLow;
                              547 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              548 ; 166  |};
                              549 ; 167  |
                              550 ; 168  |union WaitMask{
                              551 ; 169  |    struct B{
                              552 ; 170  |        unsigned int m_bNone     :1;
                              553 ; 171  |        unsigned int m_bMessage  :1;
                              554 ; 172  |        unsigned int m_bTimer    :1;
                              555 ; 173  |        unsigned int m_bButton   :1;
                              556 ; 174  |    } B;
                              557 ; 175  |    int I;
                              558 ; 176  |} ;
                              559 ; 177  |
                              560 ; 178  |
                              561 ; 179  |struct Button {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              562 ; 180  |        WORD wButtonEvent;
                              563 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              564 ; 182  |};
                              565 ; 183  |
                              566 ; 184  |struct Message {
                              567 ; 185  |        WORD wMsgLength;
                              568 ; 186  |        WORD wMsgCommand;
                              569 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              570 ; 188  |};
                              571 ; 189  |
                              572 ; 190  |union EventTypes {
                              573 ; 191  |        struct CMessage msg;
                              574 ; 192  |        struct Button Button ;
                              575 ; 193  |        struct Message Message;
                              576 ; 194  |};
                              577 ; 195  |
                              578 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              579 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              580 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              581 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              582 ; 200  |
                              583 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              584 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              585 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              586 ; 204  |
                              587 ; 205  |#if DEBUG
                              588 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              589 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              590 ; 208  |#else 
                              591 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              592 ; 210  |#define DebugBuildAssert(x)    
                              593 ; 211  |#endif
                              594 ; 212  |
                              595 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              596 ; 214  |//  #pragma asm
                              597 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              598 ; 216  |//  #pragma endasm
                              599 ; 217  |
                              600 ; 218  |
                              601 ; 219  |#ifdef COLOR_262K
                              602 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              603 ; 221  |#elif defined(COLOR_65K)
                              604 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              605 ; 223  |#else
                              606 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              607 ; 225  |#endif
                              608 ; 226  |    
                              609 ; 227  |#endif // #ifndef _TYPES_H
                              610 
                              612 
                              613 ; 8    |
                              614 ; 9    |#ifndef _CHKDSK_H
                              615 ; 10   |#define _CHKDSK_H
                              616 ; 11   |
                              617 ; 12   |extern WORD _X cachedSectorSize;
                              618 ; 13   |extern WORD _X cachedSectorSizeInWords;
                              619 ; 14   |extern WORD _X cachedClusterEntryPerSectorShift;
                              620 ; 15   |extern WORD _X cachedDirRecordsPerSector;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              621 ; 16   |
                              622 ; 17   |#define BYTE_POS_SIGNATURE          0x1fe
                              623 ; 18   |#define BYTE_POS_NUM_SECT_PER_CX    0x0d
                              624 ; 19   |#define BYTE_POS_NUM_RES_SECT       0x0e
                              625 ; 20   |#define BYTE_POS_NUM_FAT            0x10
                              626 ; 21   |#define BYTE_POS_NUM_ROOT_SECT      0x11
                              627 ; 22   |#define BYTE_POS_NUM_FAT_SECT       0x16
                              628 ; 23   |#define BYTE_POS_NUM_HIDDEN_SECT    0x1C
                              629 ; 24   |#define BYTE_POS_NUM_FAT_SECT_32        0x24
                              630 ; 25   |#define BYTE_POS_ROOT_DIR_CX            0x2C
                              631 ; 26   |#define BYTE_POS_TOTAL_SECTS        0x13
                              632 ; 27   |#define BYTE_POS_TOTAL_SECTS_32     0x20
                              633 ; 28   |
                              634 ; 29   |#define DIR_REC_ATT_POS             0x0b
                              635 ; 30   |#define DIR_REC_FIRST_CX_POS        0x1a
                              636 ; 31   |#define DIR_REC_SIZE_POS            0x1c       
                              637 ; 32   |#define DIR_REC_FIRST_CX_HIGH_POS       0x14
                              638 ; 33   |#define SIGN_WORD_VALUE     0x00AA55
                              639 ; 34   |#define FAT_WORD            18
                              640 ; 35   |#define FAT_1ST_WORD        0x544146       
                              641 ; 36   |#define FAT12_SIGN_VALUE    0x203231
                              642 ; 37   |#define FAT16_SIGN_VALUE    0x203631
                              643 ; 38   |#define FAT32_SIGN_VALUE    0x203233
                              644 ; 39   |
                              645 ; 40   |#define DIR_REC_PER_SECTOR  (cachedDirRecordsPerSector)     // Number of directory records
                                   per sector
                              646 ; 41   |
                              647 ; 42   |#define MAX_ENTRIES_LONG_FILE_NAME  20      // Any long file name can be up to 255 bytes l
                                  ong
                              648 ; 43   |                                            // and each entry can hold up to 13 characters
                                  
                              649 ; 44   |                                            // there can only be up to 20 entries of LFN
                              650 ; 45   |                                            // per file.
                              651 ; 46   |#define BYTES_PER_DIR_RECORD    32
                              652 ; 47   |#define BYTES_PER_SECT          (cachedSectorSize)
                              653 ; 48   |
                              654 ; 49   |#define FILE_DELETED_CODE       0xe5
                              655 ; 50   |#define CLUSTER_ENTRY_PER_SECTOR_SHIFT  (cachedClusterEntryPerSectorShift)
                              656 ; 51   |
                              657 ; 52   |#define  MAX_CACHES             5   // 9
                              658 ; 53   |#define WORDS_IN_CACHE_ENTRY  705   // 705
                              659 ; 54   |#define     X_MEMORY            0
                              660 ; 55   |#define     Y_MEMORY            2
                              661 ; 56   |#define     P_MEMORY            4
                              662 ; 57   |#define READCOUNTER         105
                              663 ; 58   |#define WRITECOUNTER        100
                              664 ; 59   |#define FLUSHCOUNTER        200
                              665 ; 60   |
                              666 ; 61   |
                              667 ; 62   |#define DEFAULT_MEMORY      Y_MEMORY
                              668 ; 63   |
                              669 ; 64   |#include "sectordef.h"
                              670 
                              672 
                              673 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              674 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                              675 ; 3    |//
                              676 ; 4    |// Filename:     sectordef.h
                              677 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal & other 
                              678 ; 6    |//               routines.
                              679 ; 7    |////////////////////////////////////////////////////////////////////////////////
                              680 ; 8    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              681 ; 9    |#ifndef _SECTORDEF_H
                              682 ; 10   |#define _SECTORDEF_H
                              683 ; 11   |
                              684 ; 12   |    #define RAM_SECTOR_TOTAL_SIZE                 (528)
                              685 ; 13   |    #define RAM_SECTOR_DATA_SIZE                  (512)
                              686 ; 14   |    #define RAM_SECTOR_REDUNDANT_SIZE             (16)
                              687 ; 15   |
                              688 ; 16   |
                              689 ; 17   |    #define MMC_SECTOR_TOTAL_SIZE                 (528)
                              690 ; 18   |    #define MMC_SECTOR_DATA_SIZE                  (512)
                              691 ; 19   |    #define MMC_SECTOR_REDUNDANT_SIZE             (16)
                              692 ; 20   |
                              693 ; 21   |
                              694 ; 22   |    #define SSFDC_SECTOR_TOTAL_SIZE                 (528)
                              695 ; 23   |    #define SSFDC_SECTOR_DATA_SIZE                  (512)
                              696 ; 24   |    #define SSFDC_SECTOR_REDUNDANT_SIZE             (16)
                              697 ; 25   |
                              698 ; 26   | // Define large sector macros as small ones so sdk3.x fits in ram and mtp with small 
                              699 ; 27   | // sector flash gets the performance boosts from optimized nand timings, etc. 
                              700 ; 28   | // TOVERIFY: Comment out the next macro def when you want large sector support as 
                              701 ; 29   | // in sdk2.6 and you can find the free data RAM. Or uncomment if you want to save data ra
                                  m
                              702 ; 30   | // and only support 512 byte sectors and their associated flash types. 
                              703 ; 31   |//#define LARGE_SECTOR_DEFS_AS_SMALL_SECTOR
                              704 ; 32   |#ifdef LARGE_SECTOR_DEFS_AS_SMALL_SECTOR 
                              705 ; 33   |    #define LARGE_SECTOR_TOTAL_SIZE                 (528)
                              706 ; 34   |    #define LARGE_SECTOR_DATA_SIZE                  (512)
                              707 ; 35   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (16)
                              708 ; 36   |#else
                              709 ; 37   |    // Real large sector defines to use when large sector flash support is desired.
                              710 ; 38   |    #define LARGE_SECTOR_TOTAL_SIZE                 (2112)
                              711 ; 39   |    #define LARGE_SECTOR_DATA_SIZE                  (2048)
                              712 ; 40   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (64)
                              713 ; 41   |#endif
                              714 ; 42   |    
                              715 ; 43   |    // round up to the nearest WORD, then add one to pad for the ECC DMA bug
                              716 ; 44   |    #define SECTOR_BUFFER_ALLOC_SIZE(a)             (((a+2)/3)+1)
                              717 ; 45   |
                              718 ; 46   |
                              719 ; 47   |    // These are moved here from chkdsk.h     TOVERIFY. 
                              720 ; 48   |    #define SEC_512_BYTES_PER_SECTOR                        SSFDC_SECTOR_DATA_SIZE
                              721 ; 49   |        #define SEC_512_BYTES_TOTAL_SIZE                                                SS
                                  FDC_SECTOR_TOTAL_SIZE
                              722 ; 50   |        #define SEC_512_WORDS_TOTAL_SIZE                                                17
                                  6
                              723 ; 51   |    #define SEC_512_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT    12
                              724 ; 52   |    #define SEC_512_BYTES_DIR_REC_PER_SECTOR                16
                              725 ; 53   |    #define SEC_512_BYTES_WORDS_PER_SECTOR                  177
                              726 ; 54   |    #define SEC_2K_BYTES_PER_SECTOR                         LARGE_SECTOR_DATA_SIZE
                              727 ; 55   |        #define SEC_2K_BYTES_TOTAL_SIZE                                                 LA
                                  RGE_SECTOR_TOTAL_SIZE
                              728 ; 56   |    #define SEC_2K_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT     12
                              729 ; 57   |    #define SEC_2K_BYTES_DIR_REC_PER_SECTOR                 64
                              730 ; 58   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR                   705
                              731 ; 59   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR_NO_RA             683
                              732 ; 60   |
                              733 ; 61   |    // Next 5 lines imported from nandsystemdrivewritesector.c
                              734 ; 62   |    #define RA_ATTR_MEMORY_OFFSET           682
                              735 ; 63   |    #define NUMBER_OF_WORDS_IN_512BYTES     171
                              736 ; 64   |    #define NUM_ECC_DATA_IN_WORDS           3
                              737 ; 65   |    #define SEC_512_WORD1_RA_SWAP           171
                              738 ; 66   |    #define SEC_512_WORD2_RA_SWAP           173
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              739 ; 67   |
                              740 ; 68   |#endif  // _SECTORDEF_H
                              741 ; 69   |
                              742 
                              744 
                              745 ; 65   |// exported defines that were here into sectordef.h    
                              746 ; 66   |
                              747 ; 67   |
                              748 ; 68   |//#define BOOL    unsigned int        // bVarName
                              749 ; 69   |//#define FALSE 0
                              750 ; 70   |//#define TRUE  1
                              751 ; 71   |//#define NOERROR 0
                              752 ; 72   |
                              753 ; 73   |// A sector group is the number of sectors in the FAT buffer
                              754 ; 74   |// To improve speed and program writting this buffer 
                              755 ; 75   |// should be a multiple of 3 sectors
                              756 ; 76   |#define FAT12_ENTRIES_PER_SECT_GROUP  ((cachedSectorSize*3)*2/3)  // was 1024   (NumberBuf
                                  ferSect*sectorSize)/1.5
                              757 ; 77   |#define FAT16_ENTRIES_PER_SECT_GROUP  ((cachedSectorSize*3)/2)    // was  768   (NumberBuf
                                  ferSect*sectorSize)/2
                              758 ; 78   |#define FAT32_ENTRIES_PER_SECT_GROUP  ((cachedSectorSize*3)/4)    // was  384   (NumberBuf
                                  ferSect*sectorSize)/4
                              759 ; 79   |
                              760 ; 80   |#define  SET_BIT     1
                              761 ; 81   |#define  FREE_BIT    2
                              762 ; 82   |#define  GET_BIT     0
                              763 ; 83   |
                              764 ; 84   |typedef enum {
                              765 ; 85   |    FS_FAT12 = 0,
                              766 ; 86   |    FS_FAT16,
                              767 ; 87   |        FS_FAT32,
                              768 ; 88   |    FATUNSUPPORTED
                              769 ; 89   |    }FAT_TYPE;
                              770 ; 90   |    
                              771 ; 91   |typedef enum {
                              772 ; 92   |    CLEAN = 0,
                              773 ; 93   |    DIRTY
                              774 ; 94   |    } SECT_CTRL;    
                              775 
                              782 
                              783 ; 95   |    
                              784 ; 96   |typedef struct {
                              785 ; 97   |    FAT_TYPE    TypeFileSystem;
                              786 ; 98   |    BYTE        bSectPerCx;        
                              787 ; 99   |    BYTE        bNumberFats;
                              788 ; 100  |    WORD        wNumberRootDirEntries;
                              789 ; 101  |    DWORD        wNumberFatSectors;
                              790 ; 102  |    DWORD        wStartSectDataArea;
                              791 ; 103  |    DWORD        wStartSectPrimaryFat;
                              792 ; 104  |    DWORD        wStartSectSecondaryFat;
                              793 ; 105  |    DWORD        wStartSectRootDir;
                              794 ; 106  |    DWORD        wStartSectData;
                              795 ; 107  |    DWORD        dwNumHiddenSectors;
                              796 ; 108  |    DWORD        wNumberRootDirSectors;
                              797 ; 109  |        DWORD        Rootdirstartcx;
                              798 ; 110  |        DWORD            dwTotalsectors;
                              799 ; 111  |        DWORD            dwTotalclusters;
                              800 ; 112  |} PARTITION_BOOT_SECTOR;
                              801 
                              806 
                              807 ; 113  |
                              808 ; 114  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              809 ; 115  |    BYTE        Device;                     // Logical device number
                              810 ; 116  |    DWORD        StartSectCurDir;            // Start Sector for the current directory
                              811 ; 117  |    DWORD        wStartCxCurDir;             // Start Cluster Number for current directory
                                  
                              812 ; 118  |    SECT_CTRL   Control;                                            // 0 means Root Direct
                                  ory
                              813 ; 119  |    DWORD        CurSect;                    // Current Sector Number Loaded in Buffer
                              814 ; 120  |    WORD        NumberFiles;                // Number of files in the current dir
                              815 ; 121  |    WORD _X     *pwBuffer;                  // Buffer to read device
                              816 ; 122  |} DIR_CTRL_BLK;
                              817 ; 123  |
                              818 ; 124  |typedef struct {
                              819 ; 125  |    BYTE        StartNameCharacter;        
                              820 ; 126  |    WORD        Attribut;
                              821 ; 127  |    DWORD        StartCluster;
                              822 ; 128  |    DWORD       Size;
                              823 ; 129  |} FILE_CTRL_BLK;
                              824 ; 130  |
                              825 ; 131  |typedef struct {
                              826 ; 132  |    BYTE        Device;
                              827 ; 133  |    WORD        FatSectorCached;    // Absolute sector cached in Fat buffer
                              828 ; 134  |    SECT_CTRL   Control;
                              829 ; 135  |    DWORD        FirstPrimaryFatSect;
                              830 ; 136  |    DWORD        FirstSecondaryFatSect;
                              831 ; 137  |    WORD _Y     *pwBuffer;
                              832 ; 138  |    } FAT_STRUCT;
                              833 ; 139  |
                              834 ; 140  |typedef struct {
                              835 ; 141  |    BYTE        RecordNumber;
                              836 ; 142  |    DWORD        SectorNumber;
                              837 ; 143  |} DIR_REC_LOCATION;
                              838 ; 144  |
                              839 ; 145  |
                              840 ; 146  |typedef struct {
                              841 ; 147  |        INT CacheValid;
                              842 ; 148  |        LONG SectorNumber;
                              843 ; 149  |        INT WriteAttribute;
                              844 ; 150  |        INT CacheCounter;
                              845 ; 151  |} tCACHEDESCR_checkdisk;
                              846 ; 152  |
                              847 ; 153  |    
                              848 ; 154  |
                              849 ; 155  |void chkdskall(void);
                              850 ; 156  |void CheckDisk(BYTE bDiskNum);
                              851 ; 157  |BOOL _reentrant InitPartitionBootSectorStruct(BYTE bLogDevNumber);
                              852 
                              864 
                              865 ; 158  |BOOL _reentrant ScanFilesAndSubDirs(DIR_CTRL_BLK *pstDirCtrlBlk);
                              866 ; 159  |void _reentrant HandleFailReadSector(void);
                              867 ; 160  |BOOL _reentrant DeleteFileRecord(BYTE bRecordNumber, DWORD wSectNumber, DIR_CTRL_BLK *pstD
                                  irCtrlBlk);
                              868 ; 161  |BOOL _reentrant GetFileCtrlBlk(BYTE bRecordNumber, DWORD wSectNumber, DIR_CTRL_BLK *pstDir
                                  CtrlBlk, FILE_CTRL_BLK *pstFileCtrlBlk);
                              869 
                              876 
                              877 ; 162  |//BOOL _reentrant ScanFileList(DIR_CTRL_BLK *pstDirCtrlBlk, DIR_REC_LOCATION *pstFileList)
                                  ;
                              878 ; 163  |DWORD _reentrant CxToSect(DWORD wCx);
                              879 ; 164  |BOOL _reentrant ReadDirSector(DWORD wSectNumber, DIR_CTRL_BLK *pstDirCtrlBlk);
                              880 ; 165  |LONG _reentrant CheckCrossLinkFile(DWORD wStartCluster,BYTE blogdevicenumber);
                              881 ; 166  |void _reentrant ReserveCluster(DWORD wStartCluster,BYTE blogdevicenumber);
                              882 ; 167  |BOOL _reentrant ScanDirectory(DIR_CTRL_BLK *pstDirCtrlBlk);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              883 ; 168  |BOOL _reentrant ScanAndUpdateFat(BYTE blogdevicenumber,FAT_TYPE TypeFileSystem);
                              884 ; 169  |#ifdef STMP_BUILD_DCC
                              885 ; 170  |void InitTime(void);
                              886 ; 171  |DWORD GetTime(void);
                              887 ; 172  |#endif
                              888 ; 173  |#endif 
                              889 
                              891 
                              892 ; 20   |#include "cwrapfunc.h"
                              893 
                              895 
                              896 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              897 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              898 ; 3    |//
                              899 ; 4    |// Filename: cwrapfunc.h
                              900 ; 5    |// Description: 
                              901 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              902 ; 7    |
                              903 ; 8    |#ifndef _CHKDSK_CWRAPFUNC_H
                              904 ; 9    |#define _CHKDSK_CWRAPFUNC_H
                              905 ; 10   |
                              906 ; 11   |#include "types.h"
                              907 
                              909 
                              910 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              911 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              912 ; 3    |//
                              913 ; 4    |// Filename: types.h
                              914 ; 5    |// Description: Standard data types
                              915 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              916 ; 7    |
                              917 ; 8    |#ifndef _TYPES_H
                              918 ; 9    |#define _TYPES_H
                              919 ; 10   |
                              920 ; 11   |// TODO:  move this outta here!
                              921 ; 12   |#if !defined(NOERROR)
                              922 ; 13   |#define NOERROR 0
                              923 ; 14   |#define SUCCESS 0
                              924 ; 15   |#endif 
                              925 ; 16   |#if !defined(SUCCESS)
                              926 ; 17   |#define SUCCESS  0
                              927 ; 18   |#endif
                              928 ; 19   |#if !defined(ERROR)
                              929 ; 20   |#define ERROR   -1
                              930 ; 21   |#endif
                              931 ; 22   |#if !defined(FALSE)
                              932 ; 23   |#define FALSE 0
                              933 ; 24   |#endif
                              934 ; 25   |#if !defined(TRUE)
                              935 ; 26   |#define TRUE  1
                              936 ; 27   |#endif
                              937 ; 28   |
                              938 ; 29   |#if !defined(NULL)
                              939 ; 30   |#define NULL 0
                              940 ; 31   |#endif
                              941 ; 32   |
                              942 ; 33   |#define MAX_INT     0x7FFFFF
                              943 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              944 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              945 ; 36   |#define MAX_ULONG   (-1) 
                              946 ; 37   |
                              947 ; 38   |#define WORD_SIZE   24              // word size in bits
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              948 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              949 ; 40   |
                              950 ; 41   |
                              951 ; 42   |#define BYTE    unsigned char       // btVarName
                              952 ; 43   |#define CHAR    signed char         // cVarName
                              953 ; 44   |#define USHORT  unsigned short      // usVarName
                              954 ; 45   |#define SHORT   unsigned short      // sVarName
                              955 ; 46   |#define WORD    unsigned int        // wVarName
                              956 ; 47   |#define INT     signed int          // iVarName
                              957 ; 48   |#define DWORD   unsigned long       // dwVarName
                              958 ; 49   |#define LONG    signed long         // lVarName
                              959 ; 50   |#define BOOL    unsigned int        // bVarName
                              960 ; 51   |#define FRACT   _fract              // frVarName
                              961 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              962 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              963 ; 54   |#define FLOAT   float               // fVarName
                              964 ; 55   |#define DBL     double              // dVarName
                              965 ; 56   |#define ENUM    enum                // eVarName
                              966 ; 57   |#define CMX     _complex            // cmxVarName
                              967 ; 58   |typedef WORD UCS3;                   // 
                              968 ; 59   |
                              969 ; 60   |#define UINT16  unsigned short
                              970 ; 61   |#define UINT8   unsigned char   
                              971 ; 62   |#define UINT32  unsigned long
                              972 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              973 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              974 ; 65   |#define WCHAR   UINT16
                              975 ; 66   |
                              976 ; 67   |//UINT128 is 16 bytes or 6 words
                              977 ; 68   |typedef struct UINT128_3500 {   
                              978 ; 69   |    int val[6];     
                              979 ; 70   |} UINT128_3500;
                              980 ; 71   |
                              981 ; 72   |#define UINT128   UINT128_3500
                              982 ; 73   |
                              983 ; 74   |// Little endian word packed byte strings:   
                              984 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              985 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              986 ; 77   |// Little endian word packed byte strings:   
                              987 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              988 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              989 ; 80   |
                              990 ; 81   |// Declare Memory Spaces To Use When Coding
                              991 ; 82   |// A. Sector Buffers
                              992 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              993 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              994 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              995 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              996 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              997 ; 88   |// B. Media DDI Memory
                              998 ; 89   |#define MEDIA_DDI_MEM _Y
                              999 ; 90   |
                             1000 ; 91   |
                             1001 ; 92   |
                             1002 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1003 ; 94   |// Examples of circular pointers:
                             1004 ; 95   |//    INT CIRC cpiVarName
                             1005 ; 96   |//    DWORD CIRC cpdwVarName
                             1006 ; 97   |
                             1007 ; 98   |#define RETCODE INT                 // rcVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1008 ; 99   |
                             1009 ; 100  |// generic bitfield structure
                             1010 ; 101  |struct Bitfield {
                             1011 ; 102  |    unsigned int B0  :1;
                             1012 ; 103  |    unsigned int B1  :1;
                             1013 ; 104  |    unsigned int B2  :1;
                             1014 ; 105  |    unsigned int B3  :1;
                             1015 ; 106  |    unsigned int B4  :1;
                             1016 ; 107  |    unsigned int B5  :1;
                             1017 ; 108  |    unsigned int B6  :1;
                             1018 ; 109  |    unsigned int B7  :1;
                             1019 ; 110  |    unsigned int B8  :1;
                             1020 ; 111  |    unsigned int B9  :1;
                             1021 ; 112  |    unsigned int B10 :1;
                             1022 ; 113  |    unsigned int B11 :1;
                             1023 ; 114  |    unsigned int B12 :1;
                             1024 ; 115  |    unsigned int B13 :1;
                             1025 ; 116  |    unsigned int B14 :1;
                             1026 ; 117  |    unsigned int B15 :1;
                             1027 ; 118  |    unsigned int B16 :1;
                             1028 ; 119  |    unsigned int B17 :1;
                             1029 ; 120  |    unsigned int B18 :1;
                             1030 ; 121  |    unsigned int B19 :1;
                             1031 ; 122  |    unsigned int B20 :1;
                             1032 ; 123  |    unsigned int B21 :1;
                             1033 ; 124  |    unsigned int B22 :1;
                             1034 ; 125  |    unsigned int B23 :1;
                             1035 ; 126  |};
                             1036 ; 127  |
                             1037 ; 128  |union BitInt {
                             1038 ; 129  |        struct Bitfield B;
                             1039 ; 130  |        int        I;
                             1040 ; 131  |};
                             1041 ; 132  |
                             1042 ; 133  |#define MAX_MSG_LENGTH 10
                             1043 ; 134  |struct CMessage
                             1044 ; 135  |{
                             1045 ; 136  |        unsigned int m_uLength;
                             1046 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1047 ; 138  |};
                             1048 ; 139  |
                             1049 ; 140  |typedef struct {
                             1050 ; 141  |    WORD m_wLength;
                             1051 ; 142  |    WORD m_wMessage;
                             1052 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1053 ; 144  |} Message;
                             1054 ; 145  |
                             1055 ; 146  |struct MessageQueueDescriptor
                             1056 ; 147  |{
                             1057 ; 148  |        int *m_pBase;
                             1058 ; 149  |        int m_iModulo;
                             1059 ; 150  |        int m_iSize;
                             1060 ; 151  |        int *m_pHead;
                             1061 ; 152  |        int *m_pTail;
                             1062 ; 153  |};
                             1063 ; 154  |
                             1064 ; 155  |struct ModuleEntry
                             1065 ; 156  |{
                             1066 ; 157  |    int m_iSignaledEventMask;
                             1067 ; 158  |    int m_iWaitEventMask;
                             1068 ; 159  |    int m_iResourceOfCode;
                             1069 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1070 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1071 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1072 ; 163  |    int m_uTimeOutHigh;
                             1073 ; 164  |    int m_uTimeOutLow;
                             1074 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1075 ; 166  |};
                             1076 ; 167  |
                             1077 ; 168  |union WaitMask{
                             1078 ; 169  |    struct B{
                             1079 ; 170  |        unsigned int m_bNone     :1;
                             1080 ; 171  |        unsigned int m_bMessage  :1;
                             1081 ; 172  |        unsigned int m_bTimer    :1;
                             1082 ; 173  |        unsigned int m_bButton   :1;
                             1083 ; 174  |    } B;
                             1084 ; 175  |    int I;
                             1085 ; 176  |} ;
                             1086 ; 177  |
                             1087 ; 178  |
                             1088 ; 179  |struct Button {
                             1089 ; 180  |        WORD wButtonEvent;
                             1090 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1091 ; 182  |};
                             1092 ; 183  |
                             1093 ; 184  |struct Message {
                             1094 ; 185  |        WORD wMsgLength;
                             1095 ; 186  |        WORD wMsgCommand;
                             1096 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1097 ; 188  |};
                             1098 ; 189  |
                             1099 ; 190  |union EventTypes {
                             1100 ; 191  |        struct CMessage msg;
                             1101 ; 192  |        struct Button Button ;
                             1102 ; 193  |        struct Message Message;
                             1103 ; 194  |};
                             1104 ; 195  |
                             1105 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1106 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1107 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1108 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1109 ; 200  |
                             1110 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1111 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1112 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1113 ; 204  |
                             1114 ; 205  |#if DEBUG
                             1115 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1116 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1117 ; 208  |#else 
                             1118 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1119 ; 210  |#define DebugBuildAssert(x)    
                             1120 ; 211  |#endif
                             1121 ; 212  |
                             1122 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1123 ; 214  |//  #pragma asm
                             1124 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1125 ; 216  |//  #pragma endasm
                             1126 ; 217  |
                             1127 ; 218  |
                             1128 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1129 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1130 ; 221  |#elif defined(COLOR_65K)
                             1131 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1132 ; 223  |#else
                             1133 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1134 ; 225  |#endif
                             1135 ; 226  |    
                             1136 ; 227  |#endif // #ifndef _TYPES_H
                             1137 
                             1139 
                             1140 ; 12   |
                             1141 ; 13   |_asmfunc void SetupSwizzleAddrXY(WORD _X *pwSource, WORD _Y *pwDest);
                             1142 ; 14   |_asmfunc void SetupSwizzleAddrYX(WORD _Y *pwSource, WORD _X *pwDest);
                             1143 ; 15   |
                             1144 ; 16   |#endif 
                             1145 
                             1147 
                             1148 ; 21   |#include "bitio.h"
                             1149 
                             1151 
                             1152 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1153 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1154 ; 3    |//
                             1155 ; 4    |// Filename: BitIo.h
                             1156 ; 5    |// Description: 
                             1157 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1158 ; 7    |#include "types.h"
                             1159 
                             1161 
                             1162 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1163 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1164 ; 3    |//
                             1165 ; 4    |// Filename: types.h
                             1166 ; 5    |// Description: Standard data types
                             1167 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1168 ; 7    |
                             1169 ; 8    |#ifndef _TYPES_H
                             1170 ; 9    |#define _TYPES_H
                             1171 ; 10   |
                             1172 ; 11   |// TODO:  move this outta here!
                             1173 ; 12   |#if !defined(NOERROR)
                             1174 ; 13   |#define NOERROR 0
                             1175 ; 14   |#define SUCCESS 0
                             1176 ; 15   |#endif 
                             1177 ; 16   |#if !defined(SUCCESS)
                             1178 ; 17   |#define SUCCESS  0
                             1179 ; 18   |#endif
                             1180 ; 19   |#if !defined(ERROR)
                             1181 ; 20   |#define ERROR   -1
                             1182 ; 21   |#endif
                             1183 ; 22   |#if !defined(FALSE)
                             1184 ; 23   |#define FALSE 0
                             1185 ; 24   |#endif
                             1186 ; 25   |#if !defined(TRUE)
                             1187 ; 26   |#define TRUE  1
                             1188 ; 27   |#endif
                             1189 ; 28   |
                             1190 ; 29   |#if !defined(NULL)
                             1191 ; 30   |#define NULL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1192 ; 31   |#endif
                             1193 ; 32   |
                             1194 ; 33   |#define MAX_INT     0x7FFFFF
                             1195 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1196 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1197 ; 36   |#define MAX_ULONG   (-1) 
                             1198 ; 37   |
                             1199 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1200 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1201 ; 40   |
                             1202 ; 41   |
                             1203 ; 42   |#define BYTE    unsigned char       // btVarName
                             1204 ; 43   |#define CHAR    signed char         // cVarName
                             1205 ; 44   |#define USHORT  unsigned short      // usVarName
                             1206 ; 45   |#define SHORT   unsigned short      // sVarName
                             1207 ; 46   |#define WORD    unsigned int        // wVarName
                             1208 ; 47   |#define INT     signed int          // iVarName
                             1209 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1210 ; 49   |#define LONG    signed long         // lVarName
                             1211 ; 50   |#define BOOL    unsigned int        // bVarName
                             1212 ; 51   |#define FRACT   _fract              // frVarName
                             1213 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1214 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1215 ; 54   |#define FLOAT   float               // fVarName
                             1216 ; 55   |#define DBL     double              // dVarName
                             1217 ; 56   |#define ENUM    enum                // eVarName
                             1218 ; 57   |#define CMX     _complex            // cmxVarName
                             1219 ; 58   |typedef WORD UCS3;                   // 
                             1220 ; 59   |
                             1221 ; 60   |#define UINT16  unsigned short
                             1222 ; 61   |#define UINT8   unsigned char   
                             1223 ; 62   |#define UINT32  unsigned long
                             1224 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1225 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1226 ; 65   |#define WCHAR   UINT16
                             1227 ; 66   |
                             1228 ; 67   |//UINT128 is 16 bytes or 6 words
                             1229 ; 68   |typedef struct UINT128_3500 {   
                             1230 ; 69   |    int val[6];     
                             1231 ; 70   |} UINT128_3500;
                             1232 ; 71   |
                             1233 ; 72   |#define UINT128   UINT128_3500
                             1234 ; 73   |
                             1235 ; 74   |// Little endian word packed byte strings:   
                             1236 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1237 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1238 ; 77   |// Little endian word packed byte strings:   
                             1239 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1240 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1241 ; 80   |
                             1242 ; 81   |// Declare Memory Spaces To Use When Coding
                             1243 ; 82   |// A. Sector Buffers
                             1244 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1245 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1246 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1247 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1248 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1249 ; 88   |// B. Media DDI Memory
                             1250 ; 89   |#define MEDIA_DDI_MEM _Y
                             1251 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1252 ; 91   |
                             1253 ; 92   |
                             1254 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1255 ; 94   |// Examples of circular pointers:
                             1256 ; 95   |//    INT CIRC cpiVarName
                             1257 ; 96   |//    DWORD CIRC cpdwVarName
                             1258 ; 97   |
                             1259 ; 98   |#define RETCODE INT                 // rcVarName
                             1260 ; 99   |
                             1261 ; 100  |// generic bitfield structure
                             1262 ; 101  |struct Bitfield {
                             1263 ; 102  |    unsigned int B0  :1;
                             1264 ; 103  |    unsigned int B1  :1;
                             1265 ; 104  |    unsigned int B2  :1;
                             1266 ; 105  |    unsigned int B3  :1;
                             1267 ; 106  |    unsigned int B4  :1;
                             1268 ; 107  |    unsigned int B5  :1;
                             1269 ; 108  |    unsigned int B6  :1;
                             1270 ; 109  |    unsigned int B7  :1;
                             1271 ; 110  |    unsigned int B8  :1;
                             1272 ; 111  |    unsigned int B9  :1;
                             1273 ; 112  |    unsigned int B10 :1;
                             1274 ; 113  |    unsigned int B11 :1;
                             1275 ; 114  |    unsigned int B12 :1;
                             1276 ; 115  |    unsigned int B13 :1;
                             1277 ; 116  |    unsigned int B14 :1;
                             1278 ; 117  |    unsigned int B15 :1;
                             1279 ; 118  |    unsigned int B16 :1;
                             1280 ; 119  |    unsigned int B17 :1;
                             1281 ; 120  |    unsigned int B18 :1;
                             1282 ; 121  |    unsigned int B19 :1;
                             1283 ; 122  |    unsigned int B20 :1;
                             1284 ; 123  |    unsigned int B21 :1;
                             1285 ; 124  |    unsigned int B22 :1;
                             1286 ; 125  |    unsigned int B23 :1;
                             1287 ; 126  |};
                             1288 ; 127  |
                             1289 ; 128  |union BitInt {
                             1290 ; 129  |        struct Bitfield B;
                             1291 ; 130  |        int        I;
                             1292 ; 131  |};
                             1293 ; 132  |
                             1294 ; 133  |#define MAX_MSG_LENGTH 10
                             1295 ; 134  |struct CMessage
                             1296 ; 135  |{
                             1297 ; 136  |        unsigned int m_uLength;
                             1298 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1299 ; 138  |};
                             1300 ; 139  |
                             1301 ; 140  |typedef struct {
                             1302 ; 141  |    WORD m_wLength;
                             1303 ; 142  |    WORD m_wMessage;
                             1304 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1305 ; 144  |} Message;
                             1306 ; 145  |
                             1307 ; 146  |struct MessageQueueDescriptor
                             1308 ; 147  |{
                             1309 ; 148  |        int *m_pBase;
                             1310 ; 149  |        int m_iModulo;
                             1311 ; 150  |        int m_iSize;
                             1312 ; 151  |        int *m_pHead;
                             1313 ; 152  |        int *m_pTail;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1314 ; 153  |};
                             1315 ; 154  |
                             1316 ; 155  |struct ModuleEntry
                             1317 ; 156  |{
                             1318 ; 157  |    int m_iSignaledEventMask;
                             1319 ; 158  |    int m_iWaitEventMask;
                             1320 ; 159  |    int m_iResourceOfCode;
                             1321 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1322 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1323 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1324 ; 163  |    int m_uTimeOutHigh;
                             1325 ; 164  |    int m_uTimeOutLow;
                             1326 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1327 ; 166  |};
                             1328 ; 167  |
                             1329 ; 168  |union WaitMask{
                             1330 ; 169  |    struct B{
                             1331 ; 170  |        unsigned int m_bNone     :1;
                             1332 ; 171  |        unsigned int m_bMessage  :1;
                             1333 ; 172  |        unsigned int m_bTimer    :1;
                             1334 ; 173  |        unsigned int m_bButton   :1;
                             1335 ; 174  |    } B;
                             1336 ; 175  |    int I;
                             1337 ; 176  |} ;
                             1338 ; 177  |
                             1339 ; 178  |
                             1340 ; 179  |struct Button {
                             1341 ; 180  |        WORD wButtonEvent;
                             1342 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1343 ; 182  |};
                             1344 ; 183  |
                             1345 ; 184  |struct Message {
                             1346 ; 185  |        WORD wMsgLength;
                             1347 ; 186  |        WORD wMsgCommand;
                             1348 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1349 ; 188  |};
                             1350 ; 189  |
                             1351 ; 190  |union EventTypes {
                             1352 ; 191  |        struct CMessage msg;
                             1353 ; 192  |        struct Button Button ;
                             1354 ; 193  |        struct Message Message;
                             1355 ; 194  |};
                             1356 ; 195  |
                             1357 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1358 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1359 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1360 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1361 ; 200  |
                             1362 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1363 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1364 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1365 ; 204  |
                             1366 ; 205  |#if DEBUG
                             1367 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1368 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1369 ; 208  |#else 
                             1370 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1371 ; 210  |#define DebugBuildAssert(x)    
                             1372 ; 211  |#endif
                             1373 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1374 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1375 ; 214  |//  #pragma asm
                             1376 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1377 ; 216  |//  #pragma endasm
                             1378 ; 217  |
                             1379 ; 218  |
                             1380 ; 219  |#ifdef COLOR_262K
                             1381 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1382 ; 221  |#elif defined(COLOR_65K)
                             1383 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1384 ; 223  |#else
                             1385 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1386 ; 225  |#endif
                             1387 ; 226  |    
                             1388 ; 227  |#endif // #ifndef _TYPES_H
                             1389 
                             1391 
                             1392 ; 8    |
                             1393 ; 9    |
                             1394 ; 10   |#ifndef _BITIO_H
                             1395 ; 11   |#define _BITIO_H
                             1396 ; 12   |
                             1397 ; 13   |
                             1398 ; 14   |WORD _reentrant UpdateBit(DWORD wBitNumber, WORD _X *pwBuffer,BYTE bLogDevNumber,FAT_TYPE 
                                   TypeFileSystem,WORD Bittype);
                             1399 ; 15   |
                             1400 ; 16   |#endif 
                             1401 
                             1403 
                             1404 ; 22   |#include "fatutils.h"
                             1405 
                             1407 
                             1408 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1409 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1410 ; 3    |//
                             1411 ; 4    |// Filename: Fattest.h
                             1412 ; 5    |// Description: 
                             1413 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1414 ; 7    |
                             1415 ; 8    |#ifndef _CHKDSK_FATUTILS_H
                             1416 ; 9    |#define _CHKDSK_FATUTILS_H
                             1417 ; 10   |
                             1418 ; 11   |BOOL _reentrant LoadFatSector(DWORD wSect, WORD _X *pwBuffer);
                             1419 ; 12   |BOOL _reentrant WriteFatSector(DWORD wSect, WORD _X *pwBuffer);
                             1420 ; 13   |BOOL _reentrant IsLastCx(DWORD wCluster);
                             1421 ; 14   |LONG _reentrant GetNextCx(DWORD wCurCx);
                             1422 ; 15   |LONG _reentrant GetNextCxFat12(DWORD wCurCx);
                             1423 ; 16   |LONG _reentrant GetNextCxFat16(DWORD wCurCx);
                             1424 ; 17   |LONG _reentrant GetNextCxFat32(DWORD wCurCx);
                             1425 ; 18   |
                             1426 ; 19   |LONG _reentrant FetchCxFat12(DWORD wCurCx);
                             1427 ; 20   |LONG _reentrant GetLengthCxChain(DWORD wCluster);
                             1428 ; 21   |BOOL _reentrant FreeCxFat(DWORD wCluster);
                             1429 ; 22   |extern BOOL _reentrant FreeCxFat12(DWORD wCluster);
                             1430 ; 23   |BOOL _reentrant FreeCxFat16(DWORD wCluster);
                             1431 ; 24   |extern BOOL _reentrant FreeCxFat32(DWORD wCluster);
                             1432 ; 25   |DWORD _reentrant Getsectorno(DWORD wCluster);
                             1433 ; 26   |WORD SearchmatchingSector(LONG sectorNumber,INT MAXCACHES, tCACHEDESCR_checkdisk *CacheDes
                                  c_chkdsk);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1434 
                             1441 
                             1442 ; 27   |   
                             1443 ; 28   |#endif 
                             1444 ; 29   |
                             1445 ; 30   |
                             1446 
                             1448 
                             1449 ; 23   |#include "project.h"
                             1450 
                             1452 
                             1453 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1454 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1455 ; 3    |//  Filename: project.inc
                             1456 ; 4    |//  Description: 
                             1457 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1458 ; 6    |
                             1459 ; 7    |#if (!defined(_PROJECT_INC))
                             1460 ; 8    |#define _PROJECT_INC 1
                             1461 ; 9    |
                             1462 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1463 ; 11   |#include "hwequ.h"
                             1464 
                             1466 
                             1467 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1468 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                             1469 ; 3    |//  File        : hwequ.inc
                             1470 ; 4    |//  Description : STMP Hardware Constants
                             1471 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1472 ; 6    |
                             1473 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                             1474 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                             1475 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                             1476 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                             1477 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                             1478 ; 12   |
                             1479 ; 13   |#if (!defined(HWEQU_INC))
                             1480 ; 14   |#define HWEQU_INC 1
                             1481 ; 15   |
                             1482 ; 16   |#include "types.h"
                             1483 
                             1485 
                             1486 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1487 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1488 ; 3    |//
                             1489 ; 4    |// Filename: types.h
                             1490 ; 5    |// Description: Standard data types
                             1491 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1492 ; 7    |
                             1493 ; 8    |#ifndef _TYPES_H
                             1494 ; 9    |#define _TYPES_H
                             1495 ; 10   |
                             1496 ; 11   |// TODO:  move this outta here!
                             1497 ; 12   |#if !defined(NOERROR)
                             1498 ; 13   |#define NOERROR 0
                             1499 ; 14   |#define SUCCESS 0
                             1500 ; 15   |#endif 
                             1501 ; 16   |#if !defined(SUCCESS)
                             1502 ; 17   |#define SUCCESS  0
                             1503 ; 18   |#endif
                             1504 ; 19   |#if !defined(ERROR)
                             1505 ; 20   |#define ERROR   -1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1506 ; 21   |#endif
                             1507 ; 22   |#if !defined(FALSE)
                             1508 ; 23   |#define FALSE 0
                             1509 ; 24   |#endif
                             1510 ; 25   |#if !defined(TRUE)
                             1511 ; 26   |#define TRUE  1
                             1512 ; 27   |#endif
                             1513 ; 28   |
                             1514 ; 29   |#if !defined(NULL)
                             1515 ; 30   |#define NULL 0
                             1516 ; 31   |#endif
                             1517 ; 32   |
                             1518 ; 33   |#define MAX_INT     0x7FFFFF
                             1519 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1520 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1521 ; 36   |#define MAX_ULONG   (-1) 
                             1522 ; 37   |
                             1523 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1524 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1525 ; 40   |
                             1526 ; 41   |
                             1527 ; 42   |#define BYTE    unsigned char       // btVarName
                             1528 ; 43   |#define CHAR    signed char         // cVarName
                             1529 ; 44   |#define USHORT  unsigned short      // usVarName
                             1530 ; 45   |#define SHORT   unsigned short      // sVarName
                             1531 ; 46   |#define WORD    unsigned int        // wVarName
                             1532 ; 47   |#define INT     signed int          // iVarName
                             1533 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1534 ; 49   |#define LONG    signed long         // lVarName
                             1535 ; 50   |#define BOOL    unsigned int        // bVarName
                             1536 ; 51   |#define FRACT   _fract              // frVarName
                             1537 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1538 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1539 ; 54   |#define FLOAT   float               // fVarName
                             1540 ; 55   |#define DBL     double              // dVarName
                             1541 ; 56   |#define ENUM    enum                // eVarName
                             1542 ; 57   |#define CMX     _complex            // cmxVarName
                             1543 ; 58   |typedef WORD UCS3;                   // 
                             1544 ; 59   |
                             1545 ; 60   |#define UINT16  unsigned short
                             1546 ; 61   |#define UINT8   unsigned char   
                             1547 ; 62   |#define UINT32  unsigned long
                             1548 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1549 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1550 ; 65   |#define WCHAR   UINT16
                             1551 ; 66   |
                             1552 ; 67   |//UINT128 is 16 bytes or 6 words
                             1553 ; 68   |typedef struct UINT128_3500 {   
                             1554 ; 69   |    int val[6];     
                             1555 ; 70   |} UINT128_3500;
                             1556 ; 71   |
                             1557 ; 72   |#define UINT128   UINT128_3500
                             1558 ; 73   |
                             1559 ; 74   |// Little endian word packed byte strings:   
                             1560 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1561 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1562 ; 77   |// Little endian word packed byte strings:   
                             1563 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1564 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1565 ; 80   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1566 ; 81   |// Declare Memory Spaces To Use When Coding
                             1567 ; 82   |// A. Sector Buffers
                             1568 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1569 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1570 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1571 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1572 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1573 ; 88   |// B. Media DDI Memory
                             1574 ; 89   |#define MEDIA_DDI_MEM _Y
                             1575 ; 90   |
                             1576 ; 91   |
                             1577 ; 92   |
                             1578 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1579 ; 94   |// Examples of circular pointers:
                             1580 ; 95   |//    INT CIRC cpiVarName
                             1581 ; 96   |//    DWORD CIRC cpdwVarName
                             1582 ; 97   |
                             1583 ; 98   |#define RETCODE INT                 // rcVarName
                             1584 ; 99   |
                             1585 ; 100  |// generic bitfield structure
                             1586 ; 101  |struct Bitfield {
                             1587 ; 102  |    unsigned int B0  :1;
                             1588 ; 103  |    unsigned int B1  :1;
                             1589 ; 104  |    unsigned int B2  :1;
                             1590 ; 105  |    unsigned int B3  :1;
                             1591 ; 106  |    unsigned int B4  :1;
                             1592 ; 107  |    unsigned int B5  :1;
                             1593 ; 108  |    unsigned int B6  :1;
                             1594 ; 109  |    unsigned int B7  :1;
                             1595 ; 110  |    unsigned int B8  :1;
                             1596 ; 111  |    unsigned int B9  :1;
                             1597 ; 112  |    unsigned int B10 :1;
                             1598 ; 113  |    unsigned int B11 :1;
                             1599 ; 114  |    unsigned int B12 :1;
                             1600 ; 115  |    unsigned int B13 :1;
                             1601 ; 116  |    unsigned int B14 :1;
                             1602 ; 117  |    unsigned int B15 :1;
                             1603 ; 118  |    unsigned int B16 :1;
                             1604 ; 119  |    unsigned int B17 :1;
                             1605 ; 120  |    unsigned int B18 :1;
                             1606 ; 121  |    unsigned int B19 :1;
                             1607 ; 122  |    unsigned int B20 :1;
                             1608 ; 123  |    unsigned int B21 :1;
                             1609 ; 124  |    unsigned int B22 :1;
                             1610 ; 125  |    unsigned int B23 :1;
                             1611 ; 126  |};
                             1612 ; 127  |
                             1613 ; 128  |union BitInt {
                             1614 ; 129  |        struct Bitfield B;
                             1615 ; 130  |        int        I;
                             1616 ; 131  |};
                             1617 ; 132  |
                             1618 ; 133  |#define MAX_MSG_LENGTH 10
                             1619 ; 134  |struct CMessage
                             1620 ; 135  |{
                             1621 ; 136  |        unsigned int m_uLength;
                             1622 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1623 ; 138  |};
                             1624 ; 139  |
                             1625 ; 140  |typedef struct {
                             1626 ; 141  |    WORD m_wLength;
                             1627 ; 142  |    WORD m_wMessage;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1628 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1629 ; 144  |} Message;
                             1630 ; 145  |
                             1631 ; 146  |struct MessageQueueDescriptor
                             1632 ; 147  |{
                             1633 ; 148  |        int *m_pBase;
                             1634 ; 149  |        int m_iModulo;
                             1635 ; 150  |        int m_iSize;
                             1636 ; 151  |        int *m_pHead;
                             1637 ; 152  |        int *m_pTail;
                             1638 ; 153  |};
                             1639 ; 154  |
                             1640 ; 155  |struct ModuleEntry
                             1641 ; 156  |{
                             1642 ; 157  |    int m_iSignaledEventMask;
                             1643 ; 158  |    int m_iWaitEventMask;
                             1644 ; 159  |    int m_iResourceOfCode;
                             1645 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1646 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1647 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1648 ; 163  |    int m_uTimeOutHigh;
                             1649 ; 164  |    int m_uTimeOutLow;
                             1650 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1651 ; 166  |};
                             1652 ; 167  |
                             1653 ; 168  |union WaitMask{
                             1654 ; 169  |    struct B{
                             1655 ; 170  |        unsigned int m_bNone     :1;
                             1656 ; 171  |        unsigned int m_bMessage  :1;
                             1657 ; 172  |        unsigned int m_bTimer    :1;
                             1658 ; 173  |        unsigned int m_bButton   :1;
                             1659 ; 174  |    } B;
                             1660 ; 175  |    int I;
                             1661 ; 176  |} ;
                             1662 ; 177  |
                             1663 ; 178  |
                             1664 ; 179  |struct Button {
                             1665 ; 180  |        WORD wButtonEvent;
                             1666 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1667 ; 182  |};
                             1668 ; 183  |
                             1669 ; 184  |struct Message {
                             1670 ; 185  |        WORD wMsgLength;
                             1671 ; 186  |        WORD wMsgCommand;
                             1672 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1673 ; 188  |};
                             1674 ; 189  |
                             1675 ; 190  |union EventTypes {
                             1676 ; 191  |        struct CMessage msg;
                             1677 ; 192  |        struct Button Button ;
                             1678 ; 193  |        struct Message Message;
                             1679 ; 194  |};
                             1680 ; 195  |
                             1681 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1682 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1683 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1684 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1685 ; 200  |
                             1686 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1687 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1688 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1689 ; 204  |
                             1690 ; 205  |#if DEBUG
                             1691 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1692 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1693 ; 208  |#else 
                             1694 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1695 ; 210  |#define DebugBuildAssert(x)    
                             1696 ; 211  |#endif
                             1697 ; 212  |
                             1698 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1699 ; 214  |//  #pragma asm
                             1700 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1701 ; 216  |//  #pragma endasm
                             1702 ; 217  |
                             1703 ; 218  |
                             1704 ; 219  |#ifdef COLOR_262K
                             1705 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1706 ; 221  |#elif defined(COLOR_65K)
                             1707 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1708 ; 223  |#else
                             1709 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1710 ; 225  |#endif
                             1711 ; 226  |    
                             1712 ; 227  |#endif // #ifndef _TYPES_H
                             1713 
                             1715 
                             1716 ; 17   |#include "regsclkctrl.h"
                             1717 
                             1719 
                             1720 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             1721 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             1722 ; 3    |
                             1723 ; 4    |
                             1724 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1725 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             1726 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             1727 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             1728 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             1729 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             1730 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                             1731 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             1732 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             1733 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             1734 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             1735 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             1736 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             1737 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             1738 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             1739 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             1740 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             1741 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             1742 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             1743 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             1744 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             1745 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             1746 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             1747 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             1748 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1749 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             1750 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             1751 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             1752 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             1753 ; 34   |
                             1754 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             1755 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             1756 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             1757 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             1758 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             1759 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             1760 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             1761 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             1762 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             1763 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             1764 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             1765 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             1766 ; 47   |
                             1767 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             1768 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             1769 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             1770 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             1771 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             1772 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             1773 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             1774 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             1775 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             1776 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             1777 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             1778 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             1779 ; 60   |
                             1780 ; 61   |typedef union               
                             1781 ; 62   |{
                             1782 ; 63   |    struct
                             1783 ; 64   |    {
                             1784 ; 65   |        int CKRST       :1; // Clock Reset
                             1785 ; 66   |        int LTC         :1;
                             1786 ; 67   |        int PLLEN       :1;
                             1787 ; 68   |        int XTLEN       :1;
                             1788 ; 69   |        int FLB         :1;
                             1789 ; 70   |        unsigned ADIV   :3;
                             1790 ; 71   |        int CKSRC       :1;
                             1791 ; 72   |        unsigned DDIV   :3;
                             1792 ; 73   |        unsigned PDIV   :5;
                             1793 ; 74   |        int PWDN        :1;
                             1794 ; 75   |        int ACKEN       :1;
                             1795 ; 76   |        int LOCK        :1;
                             1796 ; 77   |        unsigned ADIV1  :3;
                             1797 ; 78   |        unsigned DDIV_MSB:1;
                             1798 ; 79   |    } B;
                             1799 ; 80   |
                             1800 ; 81   |    int I;
                             1801 ; 82   |    unsigned int U;
                             1802 ; 83   |
                             1803 ; 84   |} ccr_type;
                             1804 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             1805 ; 86   |
                             1806 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1807 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             1808 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             1809 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             1810 ; 91   |#define HW_RCR_IRQA_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1811 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             1812 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             1813 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             1814 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             1815 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             1816 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             1817 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             1818 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             1819 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             1820 ; 101  |
                             1821 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             1822 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             1823 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             1824 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             1825 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             1826 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             1827 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             1828 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             1829 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             1830 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             1831 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             1832 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             1833 ; 114  |
                             1834 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             1835 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             1836 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             1837 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             1838 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             1839 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             1840 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             1841 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             1842 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             1843 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             1844 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             1845 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             1846 ; 127  |
                             1847 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             1848 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             1849 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             1850 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             1851 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             1852 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             1853 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             1854 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                             1855 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             1856 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             1857 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             1858 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             1859 ; 140  |
                             1860 ; 141  |typedef union               
                             1861 ; 142  |{
                             1862 ; 143  |    struct
                             1863 ; 144  |   {
                             1864 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             1865 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             1866 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             1867 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             1868 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             1869 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             1870 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             1871 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             1872 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1873 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             1874 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             1875 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             1876 ; 157  |    } B;
                             1877 ; 158  |
                             1878 ; 159  |    int I;
                             1879 ; 160  |    unsigned int U;
                             1880 ; 161  |
                             1881 ; 162  |} rcr_type;
                             1882 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             1883 ; 164  |
                             1884 ; 165  |
                             1885 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             1886 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             1887 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             1888 ; 169  |
                             1889 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             1890 ; 171  |
                             1891 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             1892 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             1893 ; 174  |typedef union               
                             1894 ; 175  |{
                             1895 ; 176  |    struct
                             1896 ; 177  |   {
                             1897 ; 178  |        int LOW;
                             1898 ; 179  |    } B;
                             1899 ; 180  |
                             1900 ; 181  |    int I;
                             1901 ; 182  |    unsigned int U;
                             1902 ; 183  |
                             1903 ; 184  |} dclkcntl_type;
                             1904 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             1905 ; 186  |
                             1906 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1907 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             1908 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             1909 ; 190  |
                             1910 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             1911 ; 192  |
                             1912 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             1913 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             1914 ; 195  |typedef union               
                             1915 ; 196  |{
                             1916 ; 197  |    struct
                             1917 ; 198  |   {
                             1918 ; 199  |        int HIGH;
                             1919 ; 200  |    } B;
                             1920 ; 201  |
                             1921 ; 202  |    int I;
                             1922 ; 203  |    unsigned int U;
                             1923 ; 204  |
                             1924 ; 205  |} dclkcntu_type;
                             1925 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             1926 ; 207  |
                             1927 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             1928 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             1929 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             1930 ; 211  |
                             1931 ; 212  |// Clock count register (lower)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1932 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             1933 ; 214  |// Clock count register (upper)
                             1934 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             1935 ; 216  |// Cycle steal count register
                             1936 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             1937 ; 218  |
                             1938 ; 219  |#endif
                             1939 ; 220  |
                             1940 ; 221  |
                             1941 
                             1943 
                             1944 ; 18   |#include "regscore.h"
                             1945 
                             1947 
                             1948 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             1949 ; 2    |#define __REGS_STATUS_INC 1
                             1950 ; 3    |
                             1951 ; 4    |
                             1952 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1953 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             1954 ; 7    |#define HW_OMR_MA_BITPOS 0
                             1955 ; 8    |#define HW_OMR_MB_BITPOS 1
                             1956 ; 9    |#define HW_OMR_DE_BITPOS 2
                             1957 ; 10   |#define HW_OMR_YE_BITPOS 3
                             1958 ; 11   |#define HW_OMR_MC_BITPOS 4
                             1959 ; 12   |#define HW_OMR_SD_BITPOS 6
                             1960 ; 13   |
                             1961 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             1962 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             1963 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             1964 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             1965 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             1966 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             1967 ; 20   |
                             1968 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             1969 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             1970 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             1971 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             1972 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             1973 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             1974 ; 27   |
                             1975 ; 28   |
                             1976 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             1977 ; 30   |//  Status Register (HW_SR) Bit Positions
                             1978 ; 31   |#define HW_SR_C_BITPOS 0
                             1979 ; 32   |#define HW_SR_O_BITPOS 1
                             1980 ; 33   |#define HW_SR_Z_BITPOS 2
                             1981 ; 34   |#define HW_SR_N_BITPOS 3
                             1982 ; 35   |#define HW_SR_U_BITPOS 4
                             1983 ; 36   |#define HW_SR_E_BITPOS 5
                             1984 ; 37   |#define HW_SR_L_BITPOS 6
                             1985 ; 38   |#define HW_SR_IM_BITPOS 8
                             1986 ; 39   |#define HW_SR_IM0_BITPOS 8
                             1987 ; 40   |#define HW_SR_IM1_BITPOS 9
                             1988 ; 41   |#define HW_SR_SM_BITPOS 10
                             1989 ; 42   |#define HW_SR_SM0_BITPOS 10
                             1990 ; 43   |#define HW_SR_SM1_BITPOS 11
                             1991 ; 44   |#define HW_SR_TM_BITPOS 13
                             1992 ; 45   |#define HW_SR_DP_BITPOS 14
                             1993 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             1994 ; 47   |
                             1995 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1996 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             1997 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             1998 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             1999 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             2000 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             2001 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             2002 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             2003 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             2004 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             2005 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             2006 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             2007 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             2008 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             2009 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             2010 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             2011 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             2012 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             2013 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             2014 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             2015 ; 68   |
                             2016 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             2017 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             2018 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             2019 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             2020 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             2021 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             2022 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             2023 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             2024 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             2025 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             2026 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             2027 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             2028 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             2029 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             2030 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             2031 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             2032 ; 85   |
                             2033 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             2034 ; 87   |//  RAM/ROM Config Register Bit Positions
                             2035 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             2036 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             2037 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             2038 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             2039 ; 92   |#endif
                             2040 ; 93   |
                             2041 ; 94   |
                             2042 
                             2044 
                             2045 ; 19   |#include "regscodec.h"
                             2046 
                             2048 
                             2049 ; 1    |#if !(defined(regscodecinc))
                             2050 ; 2    |#define regscodecinc 1
                             2051 ; 3    |
                             2052 ; 4    |
                             2053 ; 5    |
                             2054 ; 6    |#include "types.h"
                             2055 
                             2057 
                             2058 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2059 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2060 ; 3    |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2061 ; 4    |// Filename: types.h
                             2062 ; 5    |// Description: Standard data types
                             2063 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2064 ; 7    |
                             2065 ; 8    |#ifndef _TYPES_H
                             2066 ; 9    |#define _TYPES_H
                             2067 ; 10   |
                             2068 ; 11   |// TODO:  move this outta here!
                             2069 ; 12   |#if !defined(NOERROR)
                             2070 ; 13   |#define NOERROR 0
                             2071 ; 14   |#define SUCCESS 0
                             2072 ; 15   |#endif 
                             2073 ; 16   |#if !defined(SUCCESS)
                             2074 ; 17   |#define SUCCESS  0
                             2075 ; 18   |#endif
                             2076 ; 19   |#if !defined(ERROR)
                             2077 ; 20   |#define ERROR   -1
                             2078 ; 21   |#endif
                             2079 ; 22   |#if !defined(FALSE)
                             2080 ; 23   |#define FALSE 0
                             2081 ; 24   |#endif
                             2082 ; 25   |#if !defined(TRUE)
                             2083 ; 26   |#define TRUE  1
                             2084 ; 27   |#endif
                             2085 ; 28   |
                             2086 ; 29   |#if !defined(NULL)
                             2087 ; 30   |#define NULL 0
                             2088 ; 31   |#endif
                             2089 ; 32   |
                             2090 ; 33   |#define MAX_INT     0x7FFFFF
                             2091 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2092 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2093 ; 36   |#define MAX_ULONG   (-1) 
                             2094 ; 37   |
                             2095 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2096 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2097 ; 40   |
                             2098 ; 41   |
                             2099 ; 42   |#define BYTE    unsigned char       // btVarName
                             2100 ; 43   |#define CHAR    signed char         // cVarName
                             2101 ; 44   |#define USHORT  unsigned short      // usVarName
                             2102 ; 45   |#define SHORT   unsigned short      // sVarName
                             2103 ; 46   |#define WORD    unsigned int        // wVarName
                             2104 ; 47   |#define INT     signed int          // iVarName
                             2105 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2106 ; 49   |#define LONG    signed long         // lVarName
                             2107 ; 50   |#define BOOL    unsigned int        // bVarName
                             2108 ; 51   |#define FRACT   _fract              // frVarName
                             2109 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2110 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2111 ; 54   |#define FLOAT   float               // fVarName
                             2112 ; 55   |#define DBL     double              // dVarName
                             2113 ; 56   |#define ENUM    enum                // eVarName
                             2114 ; 57   |#define CMX     _complex            // cmxVarName
                             2115 ; 58   |typedef WORD UCS3;                   // 
                             2116 ; 59   |
                             2117 ; 60   |#define UINT16  unsigned short
                             2118 ; 61   |#define UINT8   unsigned char   
                             2119 ; 62   |#define UINT32  unsigned long
                             2120 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2121 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2122 ; 65   |#define WCHAR   UINT16
                             2123 ; 66   |
                             2124 ; 67   |//UINT128 is 16 bytes or 6 words
                             2125 ; 68   |typedef struct UINT128_3500 {   
                             2126 ; 69   |    int val[6];     
                             2127 ; 70   |} UINT128_3500;
                             2128 ; 71   |
                             2129 ; 72   |#define UINT128   UINT128_3500
                             2130 ; 73   |
                             2131 ; 74   |// Little endian word packed byte strings:   
                             2132 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2133 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2134 ; 77   |// Little endian word packed byte strings:   
                             2135 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2136 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2137 ; 80   |
                             2138 ; 81   |// Declare Memory Spaces To Use When Coding
                             2139 ; 82   |// A. Sector Buffers
                             2140 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2141 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2142 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2143 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2144 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2145 ; 88   |// B. Media DDI Memory
                             2146 ; 89   |#define MEDIA_DDI_MEM _Y
                             2147 ; 90   |
                             2148 ; 91   |
                             2149 ; 92   |
                             2150 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2151 ; 94   |// Examples of circular pointers:
                             2152 ; 95   |//    INT CIRC cpiVarName
                             2153 ; 96   |//    DWORD CIRC cpdwVarName
                             2154 ; 97   |
                             2155 ; 98   |#define RETCODE INT                 // rcVarName
                             2156 ; 99   |
                             2157 ; 100  |// generic bitfield structure
                             2158 ; 101  |struct Bitfield {
                             2159 ; 102  |    unsigned int B0  :1;
                             2160 ; 103  |    unsigned int B1  :1;
                             2161 ; 104  |    unsigned int B2  :1;
                             2162 ; 105  |    unsigned int B3  :1;
                             2163 ; 106  |    unsigned int B4  :1;
                             2164 ; 107  |    unsigned int B5  :1;
                             2165 ; 108  |    unsigned int B6  :1;
                             2166 ; 109  |    unsigned int B7  :1;
                             2167 ; 110  |    unsigned int B8  :1;
                             2168 ; 111  |    unsigned int B9  :1;
                             2169 ; 112  |    unsigned int B10 :1;
                             2170 ; 113  |    unsigned int B11 :1;
                             2171 ; 114  |    unsigned int B12 :1;
                             2172 ; 115  |    unsigned int B13 :1;
                             2173 ; 116  |    unsigned int B14 :1;
                             2174 ; 117  |    unsigned int B15 :1;
                             2175 ; 118  |    unsigned int B16 :1;
                             2176 ; 119  |    unsigned int B17 :1;
                             2177 ; 120  |    unsigned int B18 :1;
                             2178 ; 121  |    unsigned int B19 :1;
                             2179 ; 122  |    unsigned int B20 :1;
                             2180 ; 123  |    unsigned int B21 :1;
                             2181 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2182 ; 125  |    unsigned int B23 :1;
                             2183 ; 126  |};
                             2184 ; 127  |
                             2185 ; 128  |union BitInt {
                             2186 ; 129  |        struct Bitfield B;
                             2187 ; 130  |        int        I;
                             2188 ; 131  |};
                             2189 ; 132  |
                             2190 ; 133  |#define MAX_MSG_LENGTH 10
                             2191 ; 134  |struct CMessage
                             2192 ; 135  |{
                             2193 ; 136  |        unsigned int m_uLength;
                             2194 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2195 ; 138  |};
                             2196 ; 139  |
                             2197 ; 140  |typedef struct {
                             2198 ; 141  |    WORD m_wLength;
                             2199 ; 142  |    WORD m_wMessage;
                             2200 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2201 ; 144  |} Message;
                             2202 ; 145  |
                             2203 ; 146  |struct MessageQueueDescriptor
                             2204 ; 147  |{
                             2205 ; 148  |        int *m_pBase;
                             2206 ; 149  |        int m_iModulo;
                             2207 ; 150  |        int m_iSize;
                             2208 ; 151  |        int *m_pHead;
                             2209 ; 152  |        int *m_pTail;
                             2210 ; 153  |};
                             2211 ; 154  |
                             2212 ; 155  |struct ModuleEntry
                             2213 ; 156  |{
                             2214 ; 157  |    int m_iSignaledEventMask;
                             2215 ; 158  |    int m_iWaitEventMask;
                             2216 ; 159  |    int m_iResourceOfCode;
                             2217 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2218 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2219 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2220 ; 163  |    int m_uTimeOutHigh;
                             2221 ; 164  |    int m_uTimeOutLow;
                             2222 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2223 ; 166  |};
                             2224 ; 167  |
                             2225 ; 168  |union WaitMask{
                             2226 ; 169  |    struct B{
                             2227 ; 170  |        unsigned int m_bNone     :1;
                             2228 ; 171  |        unsigned int m_bMessage  :1;
                             2229 ; 172  |        unsigned int m_bTimer    :1;
                             2230 ; 173  |        unsigned int m_bButton   :1;
                             2231 ; 174  |    } B;
                             2232 ; 175  |    int I;
                             2233 ; 176  |} ;
                             2234 ; 177  |
                             2235 ; 178  |
                             2236 ; 179  |struct Button {
                             2237 ; 180  |        WORD wButtonEvent;
                             2238 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2239 ; 182  |};
                             2240 ; 183  |
                             2241 ; 184  |struct Message {
                             2242 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2243 ; 186  |        WORD wMsgCommand;
                             2244 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2245 ; 188  |};
                             2246 ; 189  |
                             2247 ; 190  |union EventTypes {
                             2248 ; 191  |        struct CMessage msg;
                             2249 ; 192  |        struct Button Button ;
                             2250 ; 193  |        struct Message Message;
                             2251 ; 194  |};
                             2252 ; 195  |
                             2253 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2254 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2255 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2256 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2257 ; 200  |
                             2258 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2259 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2260 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2261 ; 204  |
                             2262 ; 205  |#if DEBUG
                             2263 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2264 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2265 ; 208  |#else 
                             2266 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2267 ; 210  |#define DebugBuildAssert(x)    
                             2268 ; 211  |#endif
                             2269 ; 212  |
                             2270 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2271 ; 214  |//  #pragma asm
                             2272 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2273 ; 216  |//  #pragma endasm
                             2274 ; 217  |
                             2275 ; 218  |
                             2276 ; 219  |#ifdef COLOR_262K
                             2277 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2278 ; 221  |#elif defined(COLOR_65K)
                             2279 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2280 ; 223  |#else
                             2281 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2282 ; 225  |#endif
                             2283 ; 226  |    
                             2284 ; 227  |#endif // #ifndef _TYPES_H
                             2285 
                             2287 
                             2288 ; 7    |
                             2289 ; 8    |
                             2290 ; 9    |
                             2291 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2292 ; 11   |
                             2293 ; 12   |//   SYSTEM STMP Registers 
                             2294 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             2295 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2296 ; 15   |
                             2297 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             2298 ; 17   |
                             2299 ; 18   |
                             2300 ; 19   |
                             2301 ; 20   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2302 ; 21   |
                             2303 ; 22   |
                             2304 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             2305 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             2306 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             2307 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             2308 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             2309 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             2310 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             2311 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             2312 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             2313 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             2314 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             2315 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             2316 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             2317 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             2318 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             2319 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             2320 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             2321 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             2322 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             2323 ; 42   |
                             2324 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             2325 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             2326 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             2327 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             2328 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             2329 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             2330 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             2331 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             2332 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             2333 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             2334 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             2335 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             2336 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             2337 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             2338 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             2339 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             2340 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             2341 ; 60   |
                             2342 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             2343 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             2344 ; 63   |
                             2345 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2346 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2347 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2348 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2349 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2350 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2351 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2352 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2353 ; 72   |
                             2354 ; 73   |#if defined(CAPLESS_HP)
                             2355 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             2356 ; 75   |#else 
                             2357 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             2358 ; 77   |#endif
                             2359 ; 78   |
                             2360 ; 79   |// Headphone control register
                             2361 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             2362 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             2363 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2364 ; 83   |typedef union               
                             2365 ; 84   |{
                             2366 ; 85   |    struct {
                             2367 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             2368 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             2369 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             2370 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             2371 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             2372 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             2373 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             2374 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             2375 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             2376 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             2377 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             2378 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             2379 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             2380 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             2381 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             2382 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             2383 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             2384 ; 103  |    } B;
                             2385 ; 104  |    int I;
                             2386 ; 105  |    unsigned int U;
                             2387 ; 106  |} hpctrl_type;
                             2388 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             2389 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             2390 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             2391 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             2392 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             2393 ; 112  |
                             2394 ; 113  |
                             2395 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             2396 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             2397 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             2398 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             2399 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             2400 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2401 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             2402 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             2403 ; 122  |
                             2404 ; 123  |
                             2405 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             2406 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             2407 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             2408 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             2409 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             2410 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             2411 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             2412 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             2413 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             2414 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             2415 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             2416 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             2417 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             2418 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             2419 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             2420 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             2421 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             2422 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             2423 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             2424 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             2425 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2426 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             2427 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             2428 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             2429 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             2430 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             2431 ; 150  |
                             2432 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             2433 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             2434 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             2435 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             2436 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             2437 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             2438 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             2439 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             2440 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             2441 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             2442 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             2443 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             2444 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             2445 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             2446 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             2447 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             2448 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             2449 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             2450 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             2451 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             2452 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             2453 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             2454 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             2455 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             2456 ; 175  |
                             2457 ; 176  |
                             2458 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             2459 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             2460 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             2461 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             2462 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             2463 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             2464 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             2465 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             2466 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             2467 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             2468 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             2469 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             2470 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             2471 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             2472 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             2473 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             2474 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             2475 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             2476 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             2477 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             2478 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             2479 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             2480 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             2481 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             2482 ; 201  |
                             2483 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             2484 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             2485 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             2486 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             2487 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2488 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             2489 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             2490 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             2491 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             2492 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             2493 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             2494 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             2495 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             2496 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             2497 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             2498 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             2499 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             2500 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             2501 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             2502 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             2503 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             2504 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             2505 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             2506 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             2507 ; 226  |
                             2508 ; 227  |typedef union               
                             2509 ; 228  |{
                             2510 ; 229  |    struct {
                             2511 ; 230  |        int INV_USB_CLK            : 1;
                             2512 ; 231  |        int USB_DFF_BYPASS         : 1;
                             2513 ; 232  |        int HOLD_GND               : 1;
                             2514 ; 233  |        int ACKI                   : 1;
                             2515 ; 234  |        int ASD2X                  : 1;
                             2516 ; 235  |        int PCPCU                  : 1;
                             2517 ; 236  |        int PCPCD                  : 1;
                             2518 ; 237  |        int DCKI                   : 1;
                             2519 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             2520 ; 239  |        int PSRN                   : 1;
                             2521 ; 240  |        int FX2                    : 1;
                             2522 ; 241  |        int VCOS                   : 1;
                             2523 ; 242  |        int XBCO                   : 1;
                             2524 ; 243  |        int XBGC                   : 1;
                             2525 ; 244  |        int ADTHD                  : 1;
                             2526 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             2527 ; 246  |        int PWDADC                 : 1;
                             2528 ; 247  |        int MICBIAS1               : 1;
                             2529 ; 248  |        int EZD                    : 1;
                             2530 ; 249  |        int DZCDA                  : 1;
                             2531 ; 250  |        int DZCFM                  : 1;
                             2532 ; 251  |        int DZCLI                  : 1;
                             2533 ; 252  |        int DZCMI                  : 1;
                             2534 ; 253  |        int DZCMA                  : 1;
                             2535 ; 254  |    } B;
                             2536 ; 255  |    int I;
                             2537 ; 256  |    unsigned int U;
                             2538 ; 257  |} mix_tbr_type;
                             2539 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             2540 ; 259  |
                             2541 ; 260  |
                             2542 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             2543 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             2544 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             2545 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             2546 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             2547 ; 266  |
                             2548 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             2549 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2550 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             2551 ; 270  |
                             2552 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             2553 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             2554 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             2555 ; 274  |
                             2556 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             2557 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             2558 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             2559 ; 278  |
                             2560 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             2561 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             2562 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             2563 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             2564 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             2565 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             2566 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             2567 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             2568 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             2569 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             2570 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             2571 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             2572 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             2573 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             2574 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             2575 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             2576 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             2577 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             2578 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             2579 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             2580 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             2581 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             2582 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             2583 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             2584 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             2585 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             2586 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             2587 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             2588 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             2589 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             2590 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             2591 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             2592 ; 311  |
                             2593 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             2594 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             2595 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             2596 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             2597 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             2598 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             2599 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             2600 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             2601 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             2602 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             2603 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             2604 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             2605 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             2606 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             2607 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             2608 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             2609 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             2610 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             2611 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2612 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             2613 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             2614 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             2615 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             2616 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             2617 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             2618 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             2619 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             2620 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             2621 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             2622 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             2623 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             2624 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             2625 ; 344  |
                             2626 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             2627 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             2628 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             2629 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             2630 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             2631 ; 350  |
                             2632 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             2633 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             2634 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             2635 ; 354  |
                             2636 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             2637 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             2638 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             2639 ; 358  |
                             2640 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             2641 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             2642 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             2643 ; 362  |
                             2644 ; 363  |
                             2645 ; 364  |typedef union               
                             2646 ; 365  |{
                             2647 ; 366  |    struct
                             2648 ; 367  |    {
                             2649 ; 368  |        unsigned MR :5;
                             2650 ; 369  |        int         :3;
                             2651 ; 370  |        unsigned ML :5;
                             2652 ; 371  |        int         :2;
                             2653 ; 372  |        int MUTE    :1;
                             2654 ; 373  |    } B;
                             2655 ; 374  |    int I;
                             2656 ; 375  |    unsigned int U;
                             2657 ; 376  |} mix_mastervr_type;
                             2658 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             2659 ; 378  |
                             2660 ; 379  |
                             2661 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             2662 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             2663 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             2664 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             2665 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             2666 ; 385  |
                             2667 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             2668 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             2669 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             2670 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             2671 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             2672 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             2673 ; 392  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2674 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             2675 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             2676 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             2677 ; 396  |
                             2678 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             2679 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             2680 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             2681 ; 400  |
                             2682 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             2683 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             2684 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             2685 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             2686 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             2687 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             2688 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             2689 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             2690 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             2691 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             2692 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             2693 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             2694 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             2695 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             2696 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             2697 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             2698 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             2699 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             2700 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             2701 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             2702 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             2703 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             2704 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             2705 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             2706 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             2707 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             2708 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             2709 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             2710 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             2711 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             2712 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             2713 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             2714 ; 433  |
                             2715 ; 434  |typedef union               
                             2716 ; 435  |{
                             2717 ; 436  |    struct {
                             2718 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             2719 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             2720 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             2721 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             2722 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             2723 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             2724 ; 443  |    } B;
                             2725 ; 444  |    int I;
                             2726 ; 445  |    unsigned int U;
                             2727 ; 446  |} mix_micinvr_type;
                             2728 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             2729 ; 448  |
                             2730 ; 449  |
                             2731 ; 450  |
                             2732 ; 451  |
                             2733 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             2734 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             2735 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2736 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             2737 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             2738 ; 457  |
                             2739 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             2740 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             2741 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             2742 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             2743 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             2744 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             2745 ; 464  |
                             2746 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             2747 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             2748 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             2749 ; 468  |
                             2750 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             2751 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             2752 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             2753 ; 472  |
                             2754 ; 473  |typedef union               
                             2755 ; 474  |{
                             2756 ; 475  |    struct {
                             2757 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             2758 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             2759 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             2760 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             2761 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             2762 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             2763 ; 482  |    } B;
                             2764 ; 483  |    int I;
                             2765 ; 484  |    unsigned int U;
                             2766 ; 485  |} mix_line1invr_type;
                             2767 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             2768 ; 487  |
                             2769 ; 488  |
                             2770 ; 489  |
                             2771 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             2772 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             2773 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             2774 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             2775 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             2776 ; 495  |
                             2777 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             2778 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             2779 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             2780 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             2781 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             2782 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             2783 ; 502  |
                             2784 ; 503  |
                             2785 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             2786 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             2787 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             2788 ; 507  |
                             2789 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             2790 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             2791 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             2792 ; 511  |
                             2793 ; 512  |typedef union               
                             2794 ; 513  |{
                             2795 ; 514  |    struct {
                             2796 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             2797 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2798 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             2799 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             2800 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             2801 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             2802 ; 521  |    } B;
                             2803 ; 522  |    int I;
                             2804 ; 523  |    unsigned int U;
                             2805 ; 524  |} mix_line2invr_type;
                             2806 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             2807 ; 526  |
                             2808 ; 527  |
                             2809 ; 528  |
                             2810 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             2811 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             2812 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             2813 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             2814 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             2815 ; 534  |
                             2816 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             2817 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             2818 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             2819 ; 538  |
                             2820 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             2821 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             2822 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             2823 ; 542  |
                             2824 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             2825 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             2826 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             2827 ; 546  |
                             2828 ; 547  |typedef union               
                             2829 ; 548  |{
                             2830 ; 549  |    struct {
                             2831 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             2832 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             2833 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             2834 ; 553  |    } B;
                             2835 ; 554  |    int I;
                             2836 ; 555  |    unsigned int U;
                             2837 ; 556  |} mix_dacinvr_type;
                             2838 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             2839 ; 558  |
                             2840 ; 559  |
                             2841 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             2842 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             2843 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             2844 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             2845 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             2846 ; 565  |
                             2847 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             2848 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             2849 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             2850 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             2851 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             2852 ; 571  |
                             2853 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             2854 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             2855 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             2856 ; 575  |
                             2857 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             2858 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             2859 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2860 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             2861 ; 580  |
                             2862 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             2863 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             2864 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             2865 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             2866 ; 585  |
                             2867 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             2868 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             2869 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             2870 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             2871 ; 590  |
                             2872 ; 591  |typedef union               
                             2873 ; 592  |{
                             2874 ; 593  |    struct {
                             2875 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             2876 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             2877 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             2878 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             2879 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             2880 ; 599  |    } B;
                             2881 ; 600  |    int I;
                             2882 ; 601  |    unsigned int U;
                             2883 ; 602  |} mix_recselr_type;
                             2884 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             2885 ; 604  |
                             2886 ; 605  |
                             2887 ; 606  |
                             2888 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             2889 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             2890 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             2891 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             2892 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             2893 ; 612  |
                             2894 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             2895 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             2896 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             2897 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             2898 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             2899 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             2900 ; 619  |
                             2901 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             2902 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             2903 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             2904 ; 623  |
                             2905 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             2906 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             2907 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             2908 ; 627  |
                             2909 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             2910 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             2911 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             2912 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             2913 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             2914 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             2915 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             2916 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             2917 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             2918 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             2919 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             2920 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2921 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             2922 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             2923 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             2924 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             2925 ; 644  |
                             2926 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             2927 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             2928 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             2929 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             2930 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             2931 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             2932 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             2933 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             2934 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             2935 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             2936 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             2937 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             2938 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             2939 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             2940 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             2941 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             2942 ; 661  |
                             2943 ; 662  |typedef union               
                             2944 ; 663  |{
                             2945 ; 664  |    struct {
                             2946 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             2947 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             2948 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             2949 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             2950 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             2951 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             2952 ; 671  |    } B;
                             2953 ; 672  |    int I;
                             2954 ; 673  |    unsigned int U;
                             2955 ; 674  |} mix_adcgainr_type;
                             2956 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             2957 ; 676  |
                             2958 ; 677  |
                             2959 ; 678  |
                             2960 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             2961 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             2962 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             2963 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             2964 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             2965 ; 684  |
                             2966 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             2967 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             2968 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             2969 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             2970 ; 689  |
                             2971 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             2972 ; 691  |
                             2973 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             2974 ; 693  |
                             2975 ; 694  |typedef union               
                             2976 ; 695  |{
                             2977 ; 696  |    struct {
                             2978 ; 697  |                int                     : 9;
                             2979 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             2980 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             2981 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             2982 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2983 ; 702  |    } B;
                             2984 ; 703  |    int I;
                             2985 ; 704  |    unsigned int U;
                             2986 ; 705  |} mix_pwrdnr_type;
                             2987 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             2988 ; 707  |
                             2989 ; 708  |
                             2990 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             2991 ; 710  |
                             2992 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             2993 ; 712  |
                             2994 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             2995 ; 714  |
                             2996 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             2997 ; 716  |
                             2998 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             2999 ; 718  |
                             3000 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             3001 ; 720  |
                             3002 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             3003 ; 722  |
                             3004 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             3005 ; 724  |
                             3006 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             3007 ; 726  |
                             3008 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             3009 ; 728  |
                             3010 ; 729  |
                             3011 ; 730  |
                             3012 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             3013 ; 732  |
                             3014 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             3015 ; 734  |
                             3016 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             3017 ; 736  |
                             3018 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             3019 ; 738  |
                             3020 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             3021 ; 740  |
                             3022 ; 741  |
                             3023 ; 742  |
                             3024 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             3025 ; 744  |
                             3026 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             3027 ; 746  |
                             3028 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             3029 ; 748  |
                             3030 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             3031 ; 750  |
                             3032 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             3033 ; 752  |
                             3034 ; 753  |
                             3035 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             3036 ; 755  |
                             3037 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             3038 ; 757  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3039 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             3040 ; 759  |
                             3041 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             3042 ; 761  |
                             3043 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             3044 ; 763  |
                             3045 ; 764  |
                             3046 ; 765  |typedef union               
                             3047 ; 766  |{
                             3048 ; 767  |    struct {
                             3049 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             3050 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             3051 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             3052 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             3053 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             3054 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             3055 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             3056 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             3057 ; 776  |    } B;
                             3058 ; 777  |    int I;
                             3059 ; 778  |    unsigned int U;
                             3060 ; 779  |} mix_test_type;
                             3061 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             3062 ; 781  |
                             3063 ; 782  |
                             3064 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             3065 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             3066 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             3067 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             3068 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             3069 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             3070 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             3071 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             3072 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             3073 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             3074 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             3075 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             3076 ; 795  |
                             3077 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             3078 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             3079 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             3080 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             3081 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             3082 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             3083 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             3084 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             3085 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             3086 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             3087 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             3088 ; 807  |
                             3089 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             3090 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             3091 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             3092 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             3093 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3094 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             3095 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             3096 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             3097 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             3098 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             3099 ; 818  |
                             3100 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             3101 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             3102 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             3103 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             3104 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             3105 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             3106 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             3107 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             3108 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             3109 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             3110 ; 829  |
                             3111 ; 830  |typedef union               
                             3112 ; 831  |{
                             3113 ; 832  |    struct {
                             3114 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             3115 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             3116 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             3117 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             3118 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             3119 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             3120 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             3121 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             3122 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             3123 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             3124 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             3125 ; 844  |    } B;
                             3126 ; 845  |    int I;
                             3127 ; 846  |    unsigned int U;
                             3128 ; 847  |} ref_ctrl_type;
                             3129 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             3130 ; 849  |
                             3131 ; 850  |
                             3132 ; 851  |
                             3133 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             3134 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             3135 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             3136 ; 855  |//////  DAC Registers
                             3137 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             3138 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             3139 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             3140 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             3141 ; 860  |
                             3142 ; 861  |
                             3143 ; 862  |
                             3144 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             3145 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             3146 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             3147 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             3148 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             3149 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             3150 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3151 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             3152 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             3153 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             3154 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             3155 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             3156 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             3157 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             3158 ; 877  |
                             3159 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             3160 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             3161 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             3162 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             3163 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             3164 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             3165 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             3166 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             3167 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             3168 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             3169 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             3170 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             3171 ; 890  |
                             3172 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             3173 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             3174 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             3175 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             3176 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             3177 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             3178 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             3179 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             3180 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             3181 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             3182 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             3183 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             3184 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             3185 ; 904  |
                             3186 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             3187 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             3188 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             3189 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             3190 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             3191 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             3192 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             3193 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             3194 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             3195 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             3196 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             3197 ; 916  |
                             3198 ; 917  |
                             3199 ; 918  |typedef union               
                             3200 ; 919  |{
                             3201 ; 920  |    struct {
                             3202 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             3203 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             3204 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             3205 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             3206 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             3207 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             3208 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             3209 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             3210 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             3211 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             3212 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3213 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             3214 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             3215 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             3216 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             3217 ; 936  |    } B;
                             3218 ; 937  |    int I;
                             3219 ; 938  |    unsigned int U;
                             3220 ; 939  |} dac_csr_type;
                             3221 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             3222 ; 941  |
                             3223 ; 942  |
                             3224 ; 943  |
                             3225 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             3226 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             3227 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             3228 ; 947  |
                             3229 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             3230 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             3231 ; 950  |
                             3232 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             3233 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             3234 ; 953  |
                             3235 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             3236 ; 955  |
                             3237 ; 956  |typedef union               
                             3238 ; 957  |{
                             3239 ; 958  |    struct {
                             3240 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             3241 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             3242 ; 961  |    } B;
                             3243 ; 962  |    int I;
                             3244 ; 963  |    unsigned int U;
                             3245 ; 964  |} dac_srr_type;
                             3246 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             3247 ; 966  |
                             3248 ; 967  |
                             3249 ; 968  |
                             3250 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             3251 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             3252 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             3253 ; 972  |
                             3254 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             3255 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             3256 ; 975  |
                             3257 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             3258 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             3259 ; 978  |
                             3260 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             3261 ; 980  |
                             3262 ; 981  |typedef union               
                             3263 ; 982  |{
                             3264 ; 983  |    struct {
                             3265 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             3266 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             3267 ; 986  |    } B;
                             3268 ; 987  |    int I;
                             3269 ; 988  |    unsigned int U;
                             3270 ; 989  |} dac_wcr_type;
                             3271 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             3272 ; 991  |
                             3273 ; 992  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3274 ; 993  |
                             3275 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             3276 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             3277 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             3278 ; 997  |
                             3279 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             3280 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             3281 ; 1000 |
                             3282 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             3283 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             3284 ; 1003 |
                             3285 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             3286 ; 1005 |
                             3287 ; 1006 |typedef union               
                             3288 ; 1007 |{
                             3289 ; 1008 |    struct {
                             3290 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             3291 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             3292 ; 1011 |    } B;
                             3293 ; 1012 |    int I;
                             3294 ; 1013 |    unsigned int U;
                             3295 ; 1014 |} dac_cpr_type;
                             3296 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             3297 ; 1016 |
                             3298 ; 1017 |
                             3299 ; 1018 |
                             3300 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             3301 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             3302 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             3303 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             3304 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             3305 ; 1024 |
                             3306 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             3307 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             3308 ; 1027 |
                             3309 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             3310 ; 1029 |
                             3311 ; 1030 |typedef union               
                             3312 ; 1031 |{
                             3313 ; 1032 |    struct {
                             3314 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             3315 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             3316 ; 1035 |    } B;
                             3317 ; 1036 |    int I;
                             3318 ; 1037 |    unsigned int U;
                             3319 ; 1038 |} dac_mr_type;
                             3320 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             3321 ; 1040 |
                             3322 ; 1041 |
                             3323 ; 1042 |
                             3324 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             3325 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             3326 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             3327 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             3328 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             3329 ; 1048 |
                             3330 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             3331 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             3332 ; 1051 |
                             3333 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3334 ; 1053 |
                             3335 ; 1054 |typedef union               
                             3336 ; 1055 |{
                             3337 ; 1056 |    struct {
                             3338 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             3339 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             3340 ; 1059 |    } B;
                             3341 ; 1060 |    int I;
                             3342 ; 1061 |    unsigned int U;
                             3343 ; 1062 |} dac_bar_type;
                             3344 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             3345 ; 1064 |
                             3346 ; 1065 |
                             3347 ; 1066 |
                             3348 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             3349 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             3350 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             3351 ; 1070 |
                             3352 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             3353 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             3354 ; 1073 |
                             3355 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             3356 ; 1075 |
                             3357 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             3358 ; 1077 |
                             3359 ; 1078 |typedef union               
                             3360 ; 1079 |{
                             3361 ; 1080 |    struct {
                             3362 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             3363 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             3364 ; 1083 |    } B;
                             3365 ; 1084 |    int I;
                             3366 ; 1085 |    unsigned int U;
                             3367 ; 1086 |} dac_icr_type;
                             3368 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             3369 ; 1088 |
                             3370 ; 1089 |
                             3371 ; 1090 |
                             3372 ; 1091 |
                             3373 ; 1092 |
                             3374 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             3375 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             3376 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             3377 ; 1096 |//////  ADC Registers
                             3378 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             3379 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             3380 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             3381 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             3382 ; 1101 |
                             3383 ; 1102 |
                             3384 ; 1103 |
                             3385 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             3386 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             3387 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             3388 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             3389 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             3390 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             3391 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             3392 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             3393 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             3394 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3395 ; 1114 |
                             3396 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             3397 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             3398 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             3399 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             3400 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             3401 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             3402 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             3403 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             3404 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             3405 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             3406 ; 1125 |
                             3407 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             3408 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             3409 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             3410 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             3411 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             3412 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             3413 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             3414 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             3415 ; 1134 |
                             3416 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             3417 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             3418 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             3419 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             3420 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             3421 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             3422 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             3423 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             3424 ; 1143 |
                             3425 ; 1144 |typedef union               
                             3426 ; 1145 |{
                             3427 ; 1146 |    struct {
                             3428 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             3429 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             3430 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             3431 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             3432 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             3433 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             3434 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             3435 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             3436 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             3437 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             3438 ; 1157 |    } B;
                             3439 ; 1158 |    int I;
                             3440 ; 1159 |    unsigned int U;
                             3441 ; 1160 |} adc_csr_type;
                             3442 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             3443 ; 1162 |
                             3444 ; 1163 |
                             3445 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             3446 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             3447 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             3448 ; 1167 |
                             3449 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             3450 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             3451 ; 1170 |
                             3452 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             3453 ; 1172 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3454 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             3455 ; 1174 |
                             3456 ; 1175 |typedef union               
                             3457 ; 1176 |{
                             3458 ; 1177 |    struct {
                             3459 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             3460 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             3461 ; 1180 |    } B;
                             3462 ; 1181 |    int I;
                             3463 ; 1182 |    unsigned int U;
                             3464 ; 1183 |} adc_wcr_type;
                             3465 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             3466 ; 1185 |
                             3467 ; 1186 |
                             3468 ; 1187 |
                             3469 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             3470 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             3471 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             3472 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             3473 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             3474 ; 1193 |
                             3475 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             3476 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             3477 ; 1196 |
                             3478 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             3479 ; 1198 |
                             3480 ; 1199 |typedef union               
                             3481 ; 1200 |{
                             3482 ; 1201 |    struct {
                             3483 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             3484 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             3485 ; 1204 |    } B;
                             3486 ; 1205 |    int I;
                             3487 ; 1206 |    unsigned int U;
                             3488 ; 1207 |} adc_bar_type;
                             3489 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             3490 ; 1209 |
                             3491 ; 1210 |
                             3492 ; 1211 |
                             3493 ; 1212 |
                             3494 ; 1213 |
                             3495 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             3496 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             3497 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             3498 ; 1217 |
                             3499 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             3500 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             3501 ; 1220 |
                             3502 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             3503 ; 1222 |
                             3504 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             3505 ; 1224 |
                             3506 ; 1225 |typedef union               
                             3507 ; 1226 |{
                             3508 ; 1227 |    struct {
                             3509 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             3510 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             3511 ; 1230 |    } B;
                             3512 ; 1231 |    int I;
                             3513 ; 1232 |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3514 ; 1233 |} adc_cpr_type;
                             3515 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             3516 ; 1235 |
                             3517 ; 1236 |
                             3518 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             3519 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             3520 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             3521 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             3522 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             3523 ; 1242 |
                             3524 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             3525 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             3526 ; 1245 |
                             3527 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             3528 ; 1247 |
                             3529 ; 1248 |typedef union               
                             3530 ; 1249 |{
                             3531 ; 1250 |    struct {
                             3532 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             3533 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             3534 ; 1253 |    } B;
                             3535 ; 1254 |    int I;
                             3536 ; 1255 |    unsigned int U;
                             3537 ; 1256 |} adc_mr_type;
                             3538 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             3539 ; 1258 |
                             3540 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             3541 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             3542 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             3543 ; 1262 |
                             3544 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             3545 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             3546 ; 1265 |
                             3547 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             3548 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             3549 ; 1268 |
                             3550 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             3551 ; 1270 |
                             3552 ; 1271 |typedef union               
                             3553 ; 1272 |{
                             3554 ; 1273 |    struct {
                             3555 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             3556 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             3557 ; 1276 |    } B;
                             3558 ; 1277 |    int I;
                             3559 ; 1278 |    unsigned int U;
                             3560 ; 1279 |} adc_srr_type;
                             3561 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             3562 ; 1281 |
                             3563 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             3564 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             3565 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             3566 ; 1285 |
                             3567 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             3568 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             3569 ; 1288 |
                             3570 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             3571 ; 1290 |
                             3572 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             3573 ; 1292 |
                             3574 ; 1293 |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3575 ; 1294 |{
                             3576 ; 1295 |    struct {
                             3577 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             3578 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             3579 ; 1298 |    } B;
                             3580 ; 1299 |    int I;
                             3581 ; 1300 |    unsigned int U;
                             3582 ; 1301 |} adc_icr_type;
                             3583 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             3584 ; 1303 |
                             3585 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             3586 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             3587 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3588 ; 1307 |
                             3589 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             3590 ; 1309 |
                             3591 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             3592 ; 1311 |
                             3593 ; 1312 |#endif
                             3594 ; 1313 |
                             3595 
                             3597 
                             3598 ; 20   |#include "regsdcdc.h"
                             3599 
                             3601 
                             3602 ; 1    |#if !(defined(regsdcdcinc))
                             3603 ; 2    |
                             3604 ; 3    |#define regssysteminc 1
                             3605 ; 4    |
                             3606 ; 5    |
                             3607 ; 6    |
                             3608 ; 7    |#include "types.h"
                             3609 
                             3611 
                             3612 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3613 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3614 ; 3    |//
                             3615 ; 4    |// Filename: types.h
                             3616 ; 5    |// Description: Standard data types
                             3617 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3618 ; 7    |
                             3619 ; 8    |#ifndef _TYPES_H
                             3620 ; 9    |#define _TYPES_H
                             3621 ; 10   |
                             3622 ; 11   |// TODO:  move this outta here!
                             3623 ; 12   |#if !defined(NOERROR)
                             3624 ; 13   |#define NOERROR 0
                             3625 ; 14   |#define SUCCESS 0
                             3626 ; 15   |#endif 
                             3627 ; 16   |#if !defined(SUCCESS)
                             3628 ; 17   |#define SUCCESS  0
                             3629 ; 18   |#endif
                             3630 ; 19   |#if !defined(ERROR)
                             3631 ; 20   |#define ERROR   -1
                             3632 ; 21   |#endif
                             3633 ; 22   |#if !defined(FALSE)
                             3634 ; 23   |#define FALSE 0
                             3635 ; 24   |#endif
                             3636 ; 25   |#if !defined(TRUE)
                             3637 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3638 ; 27   |#endif
                             3639 ; 28   |
                             3640 ; 29   |#if !defined(NULL)
                             3641 ; 30   |#define NULL 0
                             3642 ; 31   |#endif
                             3643 ; 32   |
                             3644 ; 33   |#define MAX_INT     0x7FFFFF
                             3645 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3646 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3647 ; 36   |#define MAX_ULONG   (-1) 
                             3648 ; 37   |
                             3649 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3650 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3651 ; 40   |
                             3652 ; 41   |
                             3653 ; 42   |#define BYTE    unsigned char       // btVarName
                             3654 ; 43   |#define CHAR    signed char         // cVarName
                             3655 ; 44   |#define USHORT  unsigned short      // usVarName
                             3656 ; 45   |#define SHORT   unsigned short      // sVarName
                             3657 ; 46   |#define WORD    unsigned int        // wVarName
                             3658 ; 47   |#define INT     signed int          // iVarName
                             3659 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3660 ; 49   |#define LONG    signed long         // lVarName
                             3661 ; 50   |#define BOOL    unsigned int        // bVarName
                             3662 ; 51   |#define FRACT   _fract              // frVarName
                             3663 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3664 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3665 ; 54   |#define FLOAT   float               // fVarName
                             3666 ; 55   |#define DBL     double              // dVarName
                             3667 ; 56   |#define ENUM    enum                // eVarName
                             3668 ; 57   |#define CMX     _complex            // cmxVarName
                             3669 ; 58   |typedef WORD UCS3;                   // 
                             3670 ; 59   |
                             3671 ; 60   |#define UINT16  unsigned short
                             3672 ; 61   |#define UINT8   unsigned char   
                             3673 ; 62   |#define UINT32  unsigned long
                             3674 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3675 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3676 ; 65   |#define WCHAR   UINT16
                             3677 ; 66   |
                             3678 ; 67   |//UINT128 is 16 bytes or 6 words
                             3679 ; 68   |typedef struct UINT128_3500 {   
                             3680 ; 69   |    int val[6];     
                             3681 ; 70   |} UINT128_3500;
                             3682 ; 71   |
                             3683 ; 72   |#define UINT128   UINT128_3500
                             3684 ; 73   |
                             3685 ; 74   |// Little endian word packed byte strings:   
                             3686 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3687 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3688 ; 77   |// Little endian word packed byte strings:   
                             3689 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3690 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3691 ; 80   |
                             3692 ; 81   |// Declare Memory Spaces To Use When Coding
                             3693 ; 82   |// A. Sector Buffers
                             3694 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3695 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3696 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3697 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3698 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3699 ; 88   |// B. Media DDI Memory
                             3700 ; 89   |#define MEDIA_DDI_MEM _Y
                             3701 ; 90   |
                             3702 ; 91   |
                             3703 ; 92   |
                             3704 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3705 ; 94   |// Examples of circular pointers:
                             3706 ; 95   |//    INT CIRC cpiVarName
                             3707 ; 96   |//    DWORD CIRC cpdwVarName
                             3708 ; 97   |
                             3709 ; 98   |#define RETCODE INT                 // rcVarName
                             3710 ; 99   |
                             3711 ; 100  |// generic bitfield structure
                             3712 ; 101  |struct Bitfield {
                             3713 ; 102  |    unsigned int B0  :1;
                             3714 ; 103  |    unsigned int B1  :1;
                             3715 ; 104  |    unsigned int B2  :1;
                             3716 ; 105  |    unsigned int B3  :1;
                             3717 ; 106  |    unsigned int B4  :1;
                             3718 ; 107  |    unsigned int B5  :1;
                             3719 ; 108  |    unsigned int B6  :1;
                             3720 ; 109  |    unsigned int B7  :1;
                             3721 ; 110  |    unsigned int B8  :1;
                             3722 ; 111  |    unsigned int B9  :1;
                             3723 ; 112  |    unsigned int B10 :1;
                             3724 ; 113  |    unsigned int B11 :1;
                             3725 ; 114  |    unsigned int B12 :1;
                             3726 ; 115  |    unsigned int B13 :1;
                             3727 ; 116  |    unsigned int B14 :1;
                             3728 ; 117  |    unsigned int B15 :1;
                             3729 ; 118  |    unsigned int B16 :1;
                             3730 ; 119  |    unsigned int B17 :1;
                             3731 ; 120  |    unsigned int B18 :1;
                             3732 ; 121  |    unsigned int B19 :1;
                             3733 ; 122  |    unsigned int B20 :1;
                             3734 ; 123  |    unsigned int B21 :1;
                             3735 ; 124  |    unsigned int B22 :1;
                             3736 ; 125  |    unsigned int B23 :1;
                             3737 ; 126  |};
                             3738 ; 127  |
                             3739 ; 128  |union BitInt {
                             3740 ; 129  |        struct Bitfield B;
                             3741 ; 130  |        int        I;
                             3742 ; 131  |};
                             3743 ; 132  |
                             3744 ; 133  |#define MAX_MSG_LENGTH 10
                             3745 ; 134  |struct CMessage
                             3746 ; 135  |{
                             3747 ; 136  |        unsigned int m_uLength;
                             3748 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3749 ; 138  |};
                             3750 ; 139  |
                             3751 ; 140  |typedef struct {
                             3752 ; 141  |    WORD m_wLength;
                             3753 ; 142  |    WORD m_wMessage;
                             3754 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3755 ; 144  |} Message;
                             3756 ; 145  |
                             3757 ; 146  |struct MessageQueueDescriptor
                             3758 ; 147  |{
                             3759 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3760 ; 149  |        int m_iModulo;
                             3761 ; 150  |        int m_iSize;
                             3762 ; 151  |        int *m_pHead;
                             3763 ; 152  |        int *m_pTail;
                             3764 ; 153  |};
                             3765 ; 154  |
                             3766 ; 155  |struct ModuleEntry
                             3767 ; 156  |{
                             3768 ; 157  |    int m_iSignaledEventMask;
                             3769 ; 158  |    int m_iWaitEventMask;
                             3770 ; 159  |    int m_iResourceOfCode;
                             3771 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3772 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3773 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3774 ; 163  |    int m_uTimeOutHigh;
                             3775 ; 164  |    int m_uTimeOutLow;
                             3776 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3777 ; 166  |};
                             3778 ; 167  |
                             3779 ; 168  |union WaitMask{
                             3780 ; 169  |    struct B{
                             3781 ; 170  |        unsigned int m_bNone     :1;
                             3782 ; 171  |        unsigned int m_bMessage  :1;
                             3783 ; 172  |        unsigned int m_bTimer    :1;
                             3784 ; 173  |        unsigned int m_bButton   :1;
                             3785 ; 174  |    } B;
                             3786 ; 175  |    int I;
                             3787 ; 176  |} ;
                             3788 ; 177  |
                             3789 ; 178  |
                             3790 ; 179  |struct Button {
                             3791 ; 180  |        WORD wButtonEvent;
                             3792 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3793 ; 182  |};
                             3794 ; 183  |
                             3795 ; 184  |struct Message {
                             3796 ; 185  |        WORD wMsgLength;
                             3797 ; 186  |        WORD wMsgCommand;
                             3798 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3799 ; 188  |};
                             3800 ; 189  |
                             3801 ; 190  |union EventTypes {
                             3802 ; 191  |        struct CMessage msg;
                             3803 ; 192  |        struct Button Button ;
                             3804 ; 193  |        struct Message Message;
                             3805 ; 194  |};
                             3806 ; 195  |
                             3807 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3808 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3809 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3810 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3811 ; 200  |
                             3812 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3813 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3814 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3815 ; 204  |
                             3816 ; 205  |#if DEBUG
                             3817 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3818 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3819 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3820 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3821 ; 210  |#define DebugBuildAssert(x)    
                             3822 ; 211  |#endif
                             3823 ; 212  |
                             3824 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3825 ; 214  |//  #pragma asm
                             3826 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3827 ; 216  |//  #pragma endasm
                             3828 ; 217  |
                             3829 ; 218  |
                             3830 ; 219  |#ifdef COLOR_262K
                             3831 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3832 ; 221  |#elif defined(COLOR_65K)
                             3833 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3834 ; 223  |#else
                             3835 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3836 ; 225  |#endif
                             3837 ; 226  |    
                             3838 ; 227  |#endif // #ifndef _TYPES_H
                             3839 
                             3841 
                             3842 ; 8    |
                             3843 ; 9    |
                             3844 ; 10   |
                             3845 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3846 ; 12   |
                             3847 ; 13   |//   SYSTEM STMP Registers 
                             3848 ; 14   |//      Last Edited 2.19.2003 M. May
                             3849 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3850 ; 16   |
                             3851 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             3852 ; 18   |
                             3853 ; 19   |
                             3854 ; 20   |
                             3855 ; 21   |
                             3856 ; 22   |
                             3857 ; 23   |
                             3858 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3859 ; 25   |
                             3860 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             3861 ; 27   |
                             3862 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             3863 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             3864 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             3865 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             3866 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             3867 ; 33   |
                             3868 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             3869 ; 35   |
                             3870 ; 36   |
                             3871 ; 37   |
                             3872 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             3873 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             3874 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             3875 ; 41   |
                             3876 ; 42   |
                             3877 ; 43   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3878 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             3879 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             3880 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             3881 ; 47   |
                             3882 ; 48   |
                             3883 ; 49   |
                             3884 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             3885 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             3886 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             3887 ; 53   |
                             3888 ; 54   |
                             3889 ; 55   |
                             3890 ; 56   |
                             3891 ; 57   |
                             3892 ; 58   |typedef union               
                             3893 ; 59   |{
                             3894 ; 60   |    struct {
                             3895 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             3896 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             3897 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             3898 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             3899 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             3900 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             3901 ; 67   |    } B;
                             3902 ; 68   |    unsigned int I;
                             3903 ; 69   |} dcdc1_ctrl0_type;
                             3904 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             3905 ; 71   |
                             3906 ; 72   |
                             3907 ; 73   |
                             3908 ; 74   |
                             3909 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             3910 ; 76   |
                             3911 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             3912 ; 78   |
                             3913 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             3914 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             3915 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             3916 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             3917 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             3918 ; 84   |
                             3919 ; 85   |
                             3920 ; 86   |
                             3921 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             3922 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             3923 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             3924 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             3925 ; 91   |
                             3926 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             3927 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             3928 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             3929 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             3930 ; 96   |
                             3931 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3932 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             3933 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             3934 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             3935 ; 101  |
                             3936 ; 102  |
                             3937 ; 103  |typedef union               
                             3938 ; 104  |{
                             3939 ; 105  |    struct {
                             3940 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             3941 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             3942 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3943 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             3944 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3945 ; 111  |    } B;
                             3946 ; 112  |    unsigned int I;
                             3947 ; 113  |} dcdc1_ctrl1_type;
                             3948 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             3949 ; 115  |
                             3950 ; 116  |
                             3951 ; 117  |
                             3952 ; 118  |
                             3953 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             3954 ; 120  |
                             3955 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             3956 ; 122  |
                             3957 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             3958 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             3959 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             3960 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             3961 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             3962 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             3963 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             3964 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             3965 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             3966 ; 132  |
                             3967 ; 133  |
                             3968 ; 134  |
                             3969 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             3970 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             3971 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             3972 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             3973 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             3974 ; 140  |
                             3975 ; 141  |
                             3976 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             3977 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             3978 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             3979 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             3980 ; 146  |
                             3981 ; 147  |
                             3982 ; 148  |
                             3983 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             3984 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             3985 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3986 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             3987 ; 153  |
                             3988 ; 154  |
                             3989 ; 155  |typedef union               
                             3990 ; 156  |{
                             3991 ; 157  |    struct {
                             3992 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             3993 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             3994 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             3995 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             3996 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             3997 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             3998 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             3999 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             4000 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             4001 ; 167  |    } B;
                             4002 ; 168  |    unsigned int I;
                             4003 ; 169  |} dcdc_vddio_type;
                             4004 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             4005 ; 171  |
                             4006 ; 172  |
                             4007 ; 173  |
                             4008 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             4009 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             4010 ; 176  |
                             4011 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             4012 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             4013 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             4014 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             4015 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             4016 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             4017 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             4018 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             4019 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             4020 ; 186  |
                             4021 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             4022 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             4023 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             4024 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             4025 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             4026 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             4027 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             4028 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             4029 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             4030 ; 196  |
                             4031 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             4032 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             4033 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             4034 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             4035 ; 201  |
                             4036 ; 202  |typedef union               
                             4037 ; 203  |{
                             4038 ; 204  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4039 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             4040 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             4041 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             4042 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             4043 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             4044 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             4045 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             4046 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             4047 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             4048 ; 214  |    } B;
                             4049 ; 215  |   unsigned int I;
                             4050 ; 216  |        unsigned U;
                             4051 ; 217  |} dcdc_vddd_type;
                             4052 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             4053 ; 219  |
                             4054 ; 220  |
                             4055 ; 221  |
                             4056 ; 222  |
                             4057 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             4058 ; 224  |
                             4059 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             4060 ; 226  |
                             4061 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             4062 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             4063 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             4064 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             4065 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             4066 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             4067 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             4068 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             4069 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             4070 ; 236  |
                             4071 ; 237  |
                             4072 ; 238  |
                             4073 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             4074 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             4075 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             4076 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             4077 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             4078 ; 244  |
                             4079 ; 245  |
                             4080 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             4081 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             4082 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             4083 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             4084 ; 250  |
                             4085 ; 251  |
                             4086 ; 252  |
                             4087 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             4088 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             4089 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             4090 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             4091 ; 257  |
                             4092 ; 258  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4093 ; 259  |typedef union               
                             4094 ; 260  |{
                             4095 ; 261  |    struct {
                             4096 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             4097 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             4098 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             4099 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             4100 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             4101 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             4102 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             4103 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             4104 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             4105 ; 271  |    } B;
                             4106 ; 272  |    unsigned int I;
                             4107 ; 273  |} dcdc_vdda_type;
                             4108 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             4109 ; 275  |
                             4110 ; 276  |
                             4111 ; 277  |
                             4112 ; 278  |
                             4113 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             4114 ; 280  |
                             4115 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             4116 ; 282  |
                             4117 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             4118 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             4119 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             4120 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             4121 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             4122 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             4123 ; 289  |
                             4124 ; 290  |
                             4125 ; 291  |
                             4126 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             4127 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             4128 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             4129 ; 295  |
                             4130 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             4131 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             4132 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             4133 ; 299  |
                             4134 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             4135 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             4136 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             4137 ; 303  |
                             4138 ; 304  |
                             4139 ; 305  |typedef union               
                             4140 ; 306  |{
                             4141 ; 307  |    struct {
                             4142 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             4143 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             4144 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             4145 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             4146 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             4147 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             4148 ; 314  |    } B;
                             4149 ; 315  |    unsigned int I;
                             4150 ; 316  |} dcdc2_ctrl0_type; 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4151 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             4152 ; 318  |
                             4153 ; 319  |
                             4154 ; 320  |
                             4155 ; 321  |
                             4156 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             4157 ; 323  |
                             4158 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             4159 ; 325  |
                             4160 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             4161 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             4162 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             4163 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             4164 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             4165 ; 331  |
                             4166 ; 332  |
                             4167 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             4168 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             4169 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             4170 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             4171 ; 337  |
                             4172 ; 338  |
                             4173 ; 339  |
                             4174 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             4175 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             4176 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             4177 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             4178 ; 344  |
                             4179 ; 345  |
                             4180 ; 346  |
                             4181 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             4182 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             4183 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             4184 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             4185 ; 351  |
                             4186 ; 352  |
                             4187 ; 353  |typedef union               
                             4188 ; 354  |{
                             4189 ; 355  |    struct {
                             4190 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             4191 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             4192 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             4193 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             4194 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             4195 ; 361  |    } B;
                             4196 ; 362  |    unsigned int I;
                             4197 ; 363  |} dcdc2_ctrl1_type;
                             4198 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             4199 ; 365  |
                             4200 ; 366  |
                             4201 ; 367  |
                             4202 ; 368  |
                             4203 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             4204 ; 370  |
                             4205 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             4206 ; 372  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4207 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             4208 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             4209 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             4210 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             4211 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             4212 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             4213 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             4214 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             4215 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             4216 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             4217 ; 383  |
                             4218 ; 384  |
                             4219 ; 385  |
                             4220 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             4221 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             4222 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             4223 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             4224 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             4225 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             4226 ; 392  |
                             4227 ; 393  |
                             4228 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             4229 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             4230 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             4231 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             4232 ; 398  |
                             4233 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             4234 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             4235 ; 401  |
                             4236 ; 402  |
                             4237 ; 403  |
                             4238 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             4239 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             4240 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             4241 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             4242 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             4243 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             4244 ; 410  |
                             4245 ; 411  |
                             4246 ; 412  |typedef union               
                             4247 ; 413  |{
                             4248 ; 414  |    struct {
                             4249 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             4250 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             4251 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             4252 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             4253 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             4254 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             4255 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             4256 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             4257 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             4258 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             4259 ; 425  |    } B;
                             4260 ; 426  |    unsigned int I;
                             4261 ; 427  |} speed_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4262 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             4263 ; 429  |
                             4264 ; 430  |
                             4265 ; 431  |
                             4266 ; 432  |
                             4267 ; 433  |
                             4268 ; 434  |
                             4269 ; 435  |
                             4270 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             4271 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             4272 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             4273 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             4274 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             4275 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             4276 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             4277 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             4278 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             4279 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             4280 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             4281 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             4282 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             4283 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             4284 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             4285 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             4286 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             4287 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             4288 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             4289 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             4290 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             4291 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             4292 ; 458  |
                             4293 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             4294 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             4295 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             4296 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             4297 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             4298 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             4299 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             4300 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             4301 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             4302 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             4303 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             4304 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             4305 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             4306 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             4307 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             4308 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             4309 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             4310 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             4311 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             4312 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             4313 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             4314 ; 480  |
                             4315 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             4316 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             4317 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             4318 ; 484  |
                             4319 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4320 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             4321 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             4322 ; 488  |
                             4323 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             4324 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             4325 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             4326 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             4327 ; 493  |
                             4328 ; 494  |typedef union               
                             4329 ; 495  |{
                             4330 ; 496  |    struct {
                             4331 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             4332 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             4333 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             4334 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             4335 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             4336 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             4337 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             4338 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             4339 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             4340 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             4341 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             4342 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             4343 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             4344 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             4345 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             4346 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             4347 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             4348 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             4349 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             4350 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             4351 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             4352 ; 518  |    } B;
                             4353 ; 519  |    unsigned int I;
                             4354 ; 520  |} usb_dcdctbr_type;
                             4355 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             4356 ; 522  |
                             4357 ; 523  |
                             4358 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             4359 ; 525  |
                             4360 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             4361 ; 527  |
                             4362 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             4363 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             4364 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             4365 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             4366 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             4367 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             4368 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             4369 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             4370 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             4371 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             4372 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             4373 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             4374 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4375 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             4376 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             4377 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             4378 ; 544  |
                             4379 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             4380 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             4381 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             4382 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             4383 ; 549  |
                             4384 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             4385 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             4386 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             4387 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             4388 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             4389 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             4390 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             4391 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             4392 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             4393 ; 559  |
                             4394 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             4395 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             4396 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             4397 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             4398 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             4399 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             4400 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             4401 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             4402 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             4403 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             4404 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             4405 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             4406 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             4407 ; 573  |
                             4408 ; 574  |
                             4409 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             4410 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             4411 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             4412 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             4413 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             4414 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             4415 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             4416 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             4417 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4418 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             4419 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             4420 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             4421 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             4422 ; 588  |
                             4423 ; 589  |typedef union               
                             4424 ; 590  |{
                             4425 ; 591  |    struct {
                             4426 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             4427 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             4428 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             4429 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             4430 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             4431 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             4432 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             4433 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             4434 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             4435 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             4436 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             4437 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             4438 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             4439 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             4440 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             4441 ; 607  |    } B;
                             4442 ; 608  |    unsigned int I;
                             4443 ; 609  |} usb_pwr_charge_type;
                             4444 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             4445 ; 611  |
                             4446 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             4447 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             4448 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             4449 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             4450 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             4451 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             4452 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             4453 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             4454 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             4455 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             4456 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             4457 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             4458 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             4459 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             4460 ; 626  |
                             4461 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             4462 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             4463 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             4464 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             4465 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             4466 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             4467 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             4468 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             4469 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             4470 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             4471 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4472 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             4473 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             4474 ; 640  |
                             4475 ; 641  |typedef union               
                             4476 ; 642  |{
                             4477 ; 643  |    struct {       
                             4478 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             4479 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             4480 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             4481 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             4482 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             4483 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             4484 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             4485 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             4486 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             4487 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             4488 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             4489 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             4490 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             4491 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             4492 ; 658  |    } B;
                             4493 ; 659  |    int I;
                             4494 ; 660  |} usb_dcdcpersist_type;
                             4495 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             4496 ; 662  |
                             4497 ; 663  |
                             4498 ; 664  |
                             4499 ; 665  |#endif
                             4500 ; 666  |
                             4501 ; 667  |
                             4502 ; 668  |
                             4503 
                             4505 
                             4506 ; 21   |#include "regsemc.h"
                             4507 
                             4509 
                             4510 ; 1    |#if !(defined(__REGS_EMC_INC))
                             4511 ; 2    |#define __REGS_EMC_INC 1
                             4512 ; 3    |
                             4513 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             4514 ; 5    |//   Module base addresses
                             4515 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4516 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             4517 ; 8    |
                             4518 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             4519 ; 10   |//  EMC Registers
                             4520 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             4521 ; 12   |
                             4522 ; 13   |
                             4523 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             4524 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             4525 ; 16   |
                             4526 ; 17   |typedef union               /*Flash Control Register*/
                             4527 ; 18   |{
                             4528 ; 19   |    struct
                             4529 ; 20   |    {
                             4530 ; 21   |    int KICK        :1;
                             4531 ; 22   |    int RW          :1;
                             4532 ; 23   |    int TCIE        :1;
                             4533 ; 24   |    int IRQP        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4534 ; 25   |    unsigned MMD    :2;
                             4535 ; 26   |    unsigned NB     :11;
                             4536 ; 27   |    unsigned RSVD   :4;
                             4537 ; 28   |    int SRST        :1;
                             4538 ; 29   |    } B;
                             4539 ; 30   |    int I;
                             4540 ; 31   |} flcr_type;
                             4541 ; 32   |
                             4542 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             4543 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             4544 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             4545 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             4546 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             4547 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             4548 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             4549 ; 40   |
                             4550 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             4551 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             4552 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             4553 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             4554 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             4555 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             4556 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             4557 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             4558 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             4559 ; 50   |
                             4560 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             4561 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             4562 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             4563 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             4564 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             4565 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             4566 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             4567 ; 58   |
                             4568 ; 59   |
                             4569 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             4570 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             4571 ; 62   |
                             4572 ; 63   |typedef union           /* Flash Start Address Low*/
                             4573 ; 64   |{
                             4574 ; 65   |    struct
                             4575 ; 66   |    {
                             4576 ; 67   |    unsigned XA     : 24;
                             4577 ; 68   |    } B;
                             4578 ; 69   |    int I;
                             4579 ; 70   |} flsalr_type;
                             4580 ; 71   |
                             4581 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             4582 ; 73   |
                             4583 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             4584 ; 75   |
                             4585 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             4586 ; 77   |
                             4587 ; 78   |
                             4588 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             4589 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             4590 ; 81   |
                             4591 ; 82   |typedef union           /* Flash Start Address High*/
                             4592 ; 83   |{
                             4593 ; 84   |    struct
                             4594 ; 85   |    {
                             4595 ; 86   |    unsigned XA     :8;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4596 ; 87   |    unsigned DA     :16;
                             4597 ; 88   |    } B;
                             4598 ; 89   |    int I;
                             4599 ; 90   |} flsahr_type;
                             4600 ; 91   |
                             4601 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             4602 ; 93   |
                             4603 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             4604 ; 95   |
                             4605 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             4606 ; 97   |
                             4607 ; 98   |
                             4608 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             4609 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             4610 ; 101  |
                             4611 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             4612 ; 103  |{
                             4613 ; 104  |    struct
                             4614 ; 105  |    {
                             4615 ; 106  |        int WP          :1;
                             4616 ; 107  |        int CDP         :1;
                             4617 ; 108  |        unsigned SM     :2;
                             4618 ; 109  |        int XATTR       :1;
                             4619 ; 110  |        int CRST        :1;
                             4620 ; 111  |        int XWT         :1;
                             4621 ; 112  |        int RI          :1;
                             4622 ; 113  |        int IFCE        :1;
                             4623 ; 114  |        int ISCE        :1;
                             4624 ; 115  |        int INCE        :1;
                             4625 ; 116  |        int IFCS        :1;
                             4626 ; 117  |        int ISCS        :1;
                             4627 ; 118  |        int INCS        :1;
                             4628 ; 119  |        unsigned CFAI   :2;
                             4629 ; 120  |        int XDDI        :1;
                             4630 ; 121  |        unsigned CS     :2;
                             4631 ; 122  |        int CRE         :1;
                             4632 ; 123  |        unsigned VS     :2;
                             4633 ; 124  |        int DASP        :1;
                             4634 ; 125  |        int MODE16      :1; 
                             4635 ; 126  |    } B;
                             4636 ; 127  |    int I;
                             4637 ; 128  |} flcfcr_type;
                             4638 ; 129  |
                             4639 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             4640 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             4641 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             4642 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             4643 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             4644 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             4645 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             4646 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             4647 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             4648 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             4649 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             4650 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             4651 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             4652 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             4653 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             4654 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             4655 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             4656 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             4657 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4658 ; 149  |
                             4659 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             4660 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             4661 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             4662 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             4663 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             4664 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             4665 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             4666 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             4667 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             4668 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             4669 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             4670 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             4671 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             4672 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             4673 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             4674 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             4675 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             4676 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             4677 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             4678 ; 169  |
                             4679 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             4680 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             4681 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             4682 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             4683 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             4684 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             4685 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             4686 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             4687 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             4688 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             4689 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             4690 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             4691 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             4692 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             4693 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             4694 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             4695 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             4696 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             4697 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             4698 ; 189  |
                             4699 ; 190  |
                             4700 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             4701 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             4702 ; 193  |
                             4703 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             4704 ; 195  |{
                             4705 ; 196  |    struct
                             4706 ; 197  |    {
                             4707 ; 198  |        unsigned TRWSU  :5;
                             4708 ; 199  |        unsigned TRPW   :7;
                             4709 ; 200  |        unsigned TWPW   :7;
                             4710 ; 201  |        unsigned TRWH   :5;
                             4711 ; 202  |    } B;
                             4712 ; 203  |    int I;
                             4713 ; 204  |} flcftmr1r_type;
                             4714 ; 205  |
                             4715 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             4716 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             4717 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             4718 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             4719 ; 210  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4720 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             4721 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             4722 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             4723 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             4724 ; 215  |
                             4725 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             4726 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             4727 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             4728 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             4729 ; 220  |
                             4730 ; 221  |
                             4731 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             4732 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             4733 ; 224  |
                             4734 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             4735 ; 226  |{
                             4736 ; 227  |    struct
                             4737 ; 228  |    {
                             4738 ; 229  |        unsigned TWW    :4;
                             4739 ; 230  |        unsigned TWTO   :10;
                             4740 ; 231  |        unsigned THW    :5; 
                             4741 ; 232  |        unsigned TRAQ   :5;
                             4742 ; 233  |    } B;
                             4743 ; 234  |    int I;
                             4744 ; 235  |} flcftmr2r_type;
                             4745 ; 236  |
                             4746 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             4747 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             4748 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             4749 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             4750 ; 241  |
                             4751 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             4752 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             4753 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             4754 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             4755 ; 246  |
                             4756 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             4757 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             4758 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             4759 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             4760 ; 251  |
                             4761 ; 252  |
                             4762 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             4763 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             4764 ; 255  |
                             4765 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             4766 ; 257  |{
                             4767 ; 258  |    struct
                             4768 ; 259  |    {
                             4769 ; 260  |        unsigned CS     :2;
                             4770 ; 261  |        int SE          :1;
                             4771 ; 262  |        int WP          :1;
                             4772 ; 263  |        int SIZE        :1;
                             4773 ; 264  |        int ICMD        :8;
                             4774 ; 265  |        int TOIE        :1;
                             4775 ; 266  |        int BPIE        :1;
                             4776 ; 267  |        int TOIRQ       :1;
                             4777 ; 268  |        int BPIRQ       :1;
                             4778 ; 269  |    } B;
                             4779 ; 270  |    int I;
                             4780 ; 271  |} flsmcr_type;
                             4781 ; 272  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4782 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             4783 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             4784 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             4785 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             4786 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             4787 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             4788 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             4789 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             4790 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             4791 ; 282  |
                             4792 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             4793 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             4794 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             4795 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             4796 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             4797 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             4798 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             4799 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             4800 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             4801 ; 292  |
                             4802 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             4803 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             4804 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             4805 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             4806 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             4807 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             4808 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             4809 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             4810 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             4811 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             4812 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             4813 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             4814 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             4815 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             4816 ; 307  |
                             4817 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             4818 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             4819 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             4820 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             4821 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             4822 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             4823 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             4824 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             4825 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             4826 ; 317  |
                             4827 ; 318  |
                             4828 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             4829 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             4830 ; 321  |
                             4831 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             4832 ; 323  |{
                             4833 ; 324  |    struct
                             4834 ; 325  |    {
                             4835 ; 326  |        unsigned TRWSU  :5;
                             4836 ; 327  |        unsigned TRPW   :6;
                             4837 ; 328  |        unsigned TWPW   :6;
                             4838 ; 329  |        unsigned TRWH   :5;
                             4839 ; 330  |    } B;
                             4840 ; 331  |    int I;
                             4841 ; 332  |} flsmtmr1r_type;
                             4842 ; 333  |
                             4843 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4844 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             4845 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             4846 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             4847 ; 338  |
                             4848 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             4849 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             4850 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             4851 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             4852 ; 343  |
                             4853 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             4854 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             4855 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             4856 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             4857 ; 348  |
                             4858 ; 349  |
                             4859 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             4860 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             4861 ; 352  |
                             4862 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             4863 ; 354  |{
                             4864 ; 355  |    struct
                             4865 ; 356  |    {
                             4866 ; 357  |        unsigned TWT    :6;
                             4867 ; 358  |        unsigned TWTO   :18;
                             4868 ; 359  |    } B;
                             4869 ; 360  |    int I;
                             4870 ; 361  |} flsmtmr2r_type;
                             4871 ; 362  |
                             4872 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             4873 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             4874 ; 365  |
                             4875 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             4876 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             4877 ; 368  |
                             4878 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             4879 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             4880 ; 371  |
                             4881 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             4882 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             4883 ; 374  |typedef union 
                             4884 ; 375  |{
                             4885 ; 376  |  struct
                             4886 ; 377  |  {
                             4887 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             4888 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             4889 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
                             4890 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             4891 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             4892 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             4893 ; 384  |    int PAD0          :17;    
                             4894 ; 385  |  } B;
                             4895 ; 386  |  int I;
                             4896 ; 387  |} flcr2_type;
                             4897 ; 388  |
                             4898 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             4899 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             4900 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             4901 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             4902 ; 393  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4903 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             4904 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             4905 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             4906 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             4907 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             4908 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             4909 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             4910 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             4911 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             4912 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             4913 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             4914 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             4915 ; 406  |
                             4916 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             4917 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             4918 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             4919 ; 410  |
                             4920 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             4921 ; 412  |
                             4922 ; 413  |#endif
                             4923 ; 414  |
                             4924 
                             4926 
                             4927 ; 22   |#include "regsgpio.h"
                             4928 
                             4930 
                             4931 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             4932 ; 2    |#define __REGS_GPIO_INC 1
                             4933 ; 3    |
                             4934 ; 4    |#include "types.h"
                             4935 
                             4937 
                             4938 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4939 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4940 ; 3    |//
                             4941 ; 4    |// Filename: types.h
                             4942 ; 5    |// Description: Standard data types
                             4943 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4944 ; 7    |
                             4945 ; 8    |#ifndef _TYPES_H
                             4946 ; 9    |#define _TYPES_H
                             4947 ; 10   |
                             4948 ; 11   |// TODO:  move this outta here!
                             4949 ; 12   |#if !defined(NOERROR)
                             4950 ; 13   |#define NOERROR 0
                             4951 ; 14   |#define SUCCESS 0
                             4952 ; 15   |#endif 
                             4953 ; 16   |#if !defined(SUCCESS)
                             4954 ; 17   |#define SUCCESS  0
                             4955 ; 18   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4956 ; 19   |#if !defined(ERROR)
                             4957 ; 20   |#define ERROR   -1
                             4958 ; 21   |#endif
                             4959 ; 22   |#if !defined(FALSE)
                             4960 ; 23   |#define FALSE 0
                             4961 ; 24   |#endif
                             4962 ; 25   |#if !defined(TRUE)
                             4963 ; 26   |#define TRUE  1
                             4964 ; 27   |#endif
                             4965 ; 28   |
                             4966 ; 29   |#if !defined(NULL)
                             4967 ; 30   |#define NULL 0
                             4968 ; 31   |#endif
                             4969 ; 32   |
                             4970 ; 33   |#define MAX_INT     0x7FFFFF
                             4971 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4972 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4973 ; 36   |#define MAX_ULONG   (-1) 
                             4974 ; 37   |
                             4975 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4976 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4977 ; 40   |
                             4978 ; 41   |
                             4979 ; 42   |#define BYTE    unsigned char       // btVarName
                             4980 ; 43   |#define CHAR    signed char         // cVarName
                             4981 ; 44   |#define USHORT  unsigned short      // usVarName
                             4982 ; 45   |#define SHORT   unsigned short      // sVarName
                             4983 ; 46   |#define WORD    unsigned int        // wVarName
                             4984 ; 47   |#define INT     signed int          // iVarName
                             4985 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4986 ; 49   |#define LONG    signed long         // lVarName
                             4987 ; 50   |#define BOOL    unsigned int        // bVarName
                             4988 ; 51   |#define FRACT   _fract              // frVarName
                             4989 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4990 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4991 ; 54   |#define FLOAT   float               // fVarName
                             4992 ; 55   |#define DBL     double              // dVarName
                             4993 ; 56   |#define ENUM    enum                // eVarName
                             4994 ; 57   |#define CMX     _complex            // cmxVarName
                             4995 ; 58   |typedef WORD UCS3;                   // 
                             4996 ; 59   |
                             4997 ; 60   |#define UINT16  unsigned short
                             4998 ; 61   |#define UINT8   unsigned char   
                             4999 ; 62   |#define UINT32  unsigned long
                             5000 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5001 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5002 ; 65   |#define WCHAR   UINT16
                             5003 ; 66   |
                             5004 ; 67   |//UINT128 is 16 bytes or 6 words
                             5005 ; 68   |typedef struct UINT128_3500 {   
                             5006 ; 69   |    int val[6];     
                             5007 ; 70   |} UINT128_3500;
                             5008 ; 71   |
                             5009 ; 72   |#define UINT128   UINT128_3500
                             5010 ; 73   |
                             5011 ; 74   |// Little endian word packed byte strings:   
                             5012 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5013 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5014 ; 77   |// Little endian word packed byte strings:   
                             5015 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5016 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5017 ; 80   |
                             5018 ; 81   |// Declare Memory Spaces To Use When Coding
                             5019 ; 82   |// A. Sector Buffers
                             5020 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5021 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5022 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5023 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5024 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5025 ; 88   |// B. Media DDI Memory
                             5026 ; 89   |#define MEDIA_DDI_MEM _Y
                             5027 ; 90   |
                             5028 ; 91   |
                             5029 ; 92   |
                             5030 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5031 ; 94   |// Examples of circular pointers:
                             5032 ; 95   |//    INT CIRC cpiVarName
                             5033 ; 96   |//    DWORD CIRC cpdwVarName
                             5034 ; 97   |
                             5035 ; 98   |#define RETCODE INT                 // rcVarName
                             5036 ; 99   |
                             5037 ; 100  |// generic bitfield structure
                             5038 ; 101  |struct Bitfield {
                             5039 ; 102  |    unsigned int B0  :1;
                             5040 ; 103  |    unsigned int B1  :1;
                             5041 ; 104  |    unsigned int B2  :1;
                             5042 ; 105  |    unsigned int B3  :1;
                             5043 ; 106  |    unsigned int B4  :1;
                             5044 ; 107  |    unsigned int B5  :1;
                             5045 ; 108  |    unsigned int B6  :1;
                             5046 ; 109  |    unsigned int B7  :1;
                             5047 ; 110  |    unsigned int B8  :1;
                             5048 ; 111  |    unsigned int B9  :1;
                             5049 ; 112  |    unsigned int B10 :1;
                             5050 ; 113  |    unsigned int B11 :1;
                             5051 ; 114  |    unsigned int B12 :1;
                             5052 ; 115  |    unsigned int B13 :1;
                             5053 ; 116  |    unsigned int B14 :1;
                             5054 ; 117  |    unsigned int B15 :1;
                             5055 ; 118  |    unsigned int B16 :1;
                             5056 ; 119  |    unsigned int B17 :1;
                             5057 ; 120  |    unsigned int B18 :1;
                             5058 ; 121  |    unsigned int B19 :1;
                             5059 ; 122  |    unsigned int B20 :1;
                             5060 ; 123  |    unsigned int B21 :1;
                             5061 ; 124  |    unsigned int B22 :1;
                             5062 ; 125  |    unsigned int B23 :1;
                             5063 ; 126  |};
                             5064 ; 127  |
                             5065 ; 128  |union BitInt {
                             5066 ; 129  |        struct Bitfield B;
                             5067 ; 130  |        int        I;
                             5068 ; 131  |};
                             5069 ; 132  |
                             5070 ; 133  |#define MAX_MSG_LENGTH 10
                             5071 ; 134  |struct CMessage
                             5072 ; 135  |{
                             5073 ; 136  |        unsigned int m_uLength;
                             5074 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5075 ; 138  |};
                             5076 ; 139  |
                             5077 ; 140  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5078 ; 141  |    WORD m_wLength;
                             5079 ; 142  |    WORD m_wMessage;
                             5080 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5081 ; 144  |} Message;
                             5082 ; 145  |
                             5083 ; 146  |struct MessageQueueDescriptor
                             5084 ; 147  |{
                             5085 ; 148  |        int *m_pBase;
                             5086 ; 149  |        int m_iModulo;
                             5087 ; 150  |        int m_iSize;
                             5088 ; 151  |        int *m_pHead;
                             5089 ; 152  |        int *m_pTail;
                             5090 ; 153  |};
                             5091 ; 154  |
                             5092 ; 155  |struct ModuleEntry
                             5093 ; 156  |{
                             5094 ; 157  |    int m_iSignaledEventMask;
                             5095 ; 158  |    int m_iWaitEventMask;
                             5096 ; 159  |    int m_iResourceOfCode;
                             5097 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5098 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5099 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5100 ; 163  |    int m_uTimeOutHigh;
                             5101 ; 164  |    int m_uTimeOutLow;
                             5102 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5103 ; 166  |};
                             5104 ; 167  |
                             5105 ; 168  |union WaitMask{
                             5106 ; 169  |    struct B{
                             5107 ; 170  |        unsigned int m_bNone     :1;
                             5108 ; 171  |        unsigned int m_bMessage  :1;
                             5109 ; 172  |        unsigned int m_bTimer    :1;
                             5110 ; 173  |        unsigned int m_bButton   :1;
                             5111 ; 174  |    } B;
                             5112 ; 175  |    int I;
                             5113 ; 176  |} ;
                             5114 ; 177  |
                             5115 ; 178  |
                             5116 ; 179  |struct Button {
                             5117 ; 180  |        WORD wButtonEvent;
                             5118 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5119 ; 182  |};
                             5120 ; 183  |
                             5121 ; 184  |struct Message {
                             5122 ; 185  |        WORD wMsgLength;
                             5123 ; 186  |        WORD wMsgCommand;
                             5124 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5125 ; 188  |};
                             5126 ; 189  |
                             5127 ; 190  |union EventTypes {
                             5128 ; 191  |        struct CMessage msg;
                             5129 ; 192  |        struct Button Button ;
                             5130 ; 193  |        struct Message Message;
                             5131 ; 194  |};
                             5132 ; 195  |
                             5133 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5134 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5135 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5136 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5137 ; 200  |
                             5138 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5139 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5140 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5141 ; 204  |
                             5142 ; 205  |#if DEBUG
                             5143 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5144 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5145 ; 208  |#else 
                             5146 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5147 ; 210  |#define DebugBuildAssert(x)    
                             5148 ; 211  |#endif
                             5149 ; 212  |
                             5150 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5151 ; 214  |//  #pragma asm
                             5152 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5153 ; 216  |//  #pragma endasm
                             5154 ; 217  |
                             5155 ; 218  |
                             5156 ; 219  |#ifdef COLOR_262K
                             5157 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5158 ; 221  |#elif defined(COLOR_65K)
                             5159 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5160 ; 223  |#else
                             5161 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5162 ; 225  |#endif
                             5163 ; 226  |    
                             5164 ; 227  |#endif // #ifndef _TYPES_H
                             5165 
                             5167 
                             5168 ; 5    |
                             5169 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5170 ; 7    |//  Interrupt Collector Registers
                             5171 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             5172 ; 9    |
                             5173 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             5174 ; 11   |
                             5175 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             5176 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             5177 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             5178 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             5179 ; 16   |
                             5180 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             5181 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             5182 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             5183 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             5184 ; 21   |
                             5185 ; 22   |#define HW_GPB_GPENR 0
                             5186 ; 23   |#define HW_GPB_GPDOR 1
                             5187 ; 24   |#define HW_GPB_GPDIR 2
                             5188 ; 25   |#define HW_GPB_GPDOER 3
                             5189 ; 26   |#define HW_GPB_GPIPENR 4
                             5190 ; 27   |#define HW_GPB_GPIENR 5
                             5191 ; 28   |#define HW_GPB_GPILVLR 6
                             5192 ; 29   |#define HW_GPB_GPIPOLR 7
                             5193 ; 30   |#define HW_GPB_GPISTATR 8
                             5194 ; 31   |#define HW_GPB_GPPWR 9
                             5195 ; 32   |#define HW_GPB_GP8MA 10
                             5196 ; 33   |
                             5197 ; 34   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5198 ; 35   |
                             5199 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             5200 ; 37   |//  GPIO Register Bit Positions
                             5201 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             5202 ; 39   |{
                             5203 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             5204 ; 41   |    unsigned int I;
                             5205 ; 42   |    unsigned int U;
                             5206 ; 43   |} gpr_type;
                             5207 ; 44   |
                             5208 ; 45   |#define HW_GP_B0_BITPOS 0
                             5209 ; 46   |#define HW_GP_B1_BITPOS 1
                             5210 ; 47   |#define HW_GP_B2_BITPOS 2
                             5211 ; 48   |#define HW_GP_B3_BITPOS 3
                             5212 ; 49   |#define HW_GP_B4_BITPOS 4
                             5213 ; 50   |#define HW_GP_B5_BITPOS 5
                             5214 ; 51   |#define HW_GP_B6_BITPOS 6
                             5215 ; 52   |#define HW_GP_B7_BITPOS 7
                             5216 ; 53   |#define HW_GP_B8_BITPOS 8
                             5217 ; 54   |#define HW_GP_B9_BITPOS 9
                             5218 ; 55   |#define HW_GP_B10_BITPOS 10
                             5219 ; 56   |#define HW_GP_B11_BITPOS 11
                             5220 ; 57   |#define HW_GP_B12_BITPOS 12
                             5221 ; 58   |#define HW_GP_B13_BITPOS 13
                             5222 ; 59   |#define HW_GP_B14_BITPOS 14
                             5223 ; 60   |#define HW_GP_B15_BITPOS 15
                             5224 ; 61   |#define HW_GP_B16_BITPOS 16
                             5225 ; 62   |#define HW_GP_B17_BITPOS 17
                             5226 ; 63   |#define HW_GP_B18_BITPOS 18
                             5227 ; 64   |#define HW_GP_B19_BITPOS 19
                             5228 ; 65   |#define HW_GP_B20_BITPOS 20
                             5229 ; 66   |#define HW_GP_B21_BITPOS 21
                             5230 ; 67   |#define HW_GP_B22_BITPOS 22
                             5231 ; 68   |#define HW_GP_B23_BITPOS 23
                             5232 ; 69   |
                             5233 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             5234 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             5235 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             5236 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             5237 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             5238 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             5239 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             5240 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             5241 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             5242 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             5243 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             5244 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             5245 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             5246 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             5247 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             5248 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             5249 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             5250 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             5251 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             5252 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             5253 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             5254 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             5255 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             5256 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             5257 ; 94   |
                             5258 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             5259 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5260 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             5261 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             5262 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             5263 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             5264 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             5265 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             5266 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             5267 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             5268 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             5269 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             5270 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             5271 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             5272 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             5273 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             5274 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             5275 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             5276 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             5277 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             5278 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             5279 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             5280 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             5281 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             5282 ; 119  |
                             5283 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             5284 ; 121  |//  GPIO 8mA Register Bit Positions
                             5285 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             5286 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             5287 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             5288 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             5289 ; 126  |
                             5290 ; 127  |
                             5291 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             5292 ; 129  |//  Logical GPIO numbers
                             5293 ; 130  |#define HW_GPIO_000 0
                             5294 ; 131  |#define HW_GPIO_001 1
                             5295 ; 132  |#define HW_GPIO_002 2
                             5296 ; 133  |#define HW_GPIO_003 3
                             5297 ; 134  |#define HW_GPIO_004 4
                             5298 ; 135  |#define HW_GPIO_005 5
                             5299 ; 136  |#define HW_GPIO_006 6
                             5300 ; 137  |#define HW_GPIO_007 7
                             5301 ; 138  |#define HW_GPIO_008 8
                             5302 ; 139  |#define HW_GPIO_009 9
                             5303 ; 140  |#define HW_GPIO_010 10
                             5304 ; 141  |#define HW_GPIO_011 11
                             5305 ; 142  |#define HW_GPIO_012 12
                             5306 ; 143  |#define HW_GPIO_013 13
                             5307 ; 144  |#define HW_GPIO_014 14
                             5308 ; 145  |#define HW_GPIO_015 15
                             5309 ; 146  |#define HW_GPIO_016 16
                             5310 ; 147  |#define HW_GPIO_017 17
                             5311 ; 148  |#define HW_GPIO_018 18
                             5312 ; 149  |#define HW_GPIO_019 19
                             5313 ; 150  |#define HW_GPIO_020 20
                             5314 ; 151  |#define HW_GPIO_021 21
                             5315 ; 152  |#define HW_GPIO_022 22
                             5316 ; 153  |#define HW_GPIO_023 23
                             5317 ; 154  |#define HW_GPIO_024 24
                             5318 ; 155  |#define HW_GPIO_025 25
                             5319 ; 156  |#define HW_GPIO_026 26
                             5320 ; 157  |#define HW_GPIO_027 27
                             5321 ; 158  |#define HW_GPIO_028 28
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5322 ; 159  |#define HW_GPIO_029 29
                             5323 ; 160  |#define HW_GPIO_030 30
                             5324 ; 161  |#define HW_GPIO_031 31
                             5325 ; 162  |#define HW_GPIO_032 32
                             5326 ; 163  |#define HW_GPIO_033 33
                             5327 ; 164  |#define HW_GPIO_034 34
                             5328 ; 165  |#define HW_GPIO_035 35
                             5329 ; 166  |#define HW_GPIO_036 36
                             5330 ; 167  |#define HW_GPIO_037 37
                             5331 ; 168  |#define HW_GPIO_038 38
                             5332 ; 169  |#define HW_GPIO_039 39
                             5333 ; 170  |#define HW_GPIO_040 40
                             5334 ; 171  |#define HW_GPIO_041 41
                             5335 ; 172  |#define HW_GPIO_042 42
                             5336 ; 173  |#define HW_GPIO_043 43
                             5337 ; 174  |#define HW_GPIO_044 44
                             5338 ; 175  |#define HW_GPIO_045 45
                             5339 ; 176  |#define HW_GPIO_046 46
                             5340 ; 177  |#define HW_GPIO_047 47
                             5341 ; 178  |#define HW_GPIO_048 48
                             5342 ; 179  |#define HW_GPIO_049 49
                             5343 ; 180  |#define HW_GPIO_050 50
                             5344 ; 181  |#define HW_GPIO_051 51
                             5345 ; 182  |#define HW_GPIO_052 52
                             5346 ; 183  |#define HW_GPIO_053 53
                             5347 ; 184  |#define HW_GPIO_054 54
                             5348 ; 185  |#define HW_GPIO_055 55
                             5349 ; 186  |#define HW_GPIO_056 56
                             5350 ; 187  |#define HW_GPIO_057 57
                             5351 ; 188  |#define HW_GPIO_058 58
                             5352 ; 189  |#define HW_GPIO_059 59
                             5353 ; 190  |#define HW_GPIO_060 60
                             5354 ; 191  |#define HW_GPIO_061 61
                             5355 ; 192  |#define HW_GPIO_062 62
                             5356 ; 193  |#define HW_GPIO_063 63
                             5357 ; 194  |#define HW_GPIO_064 64
                             5358 ; 195  |#define HW_GPIO_065 65
                             5359 ; 196  |#define HW_GPIO_066 66
                             5360 ; 197  |#define HW_GPIO_067 67
                             5361 ; 198  |#define HW_GPIO_068 68
                             5362 ; 199  |#define HW_GPIO_069 69
                             5363 ; 200  |#define HW_GPIO_070 70
                             5364 ; 201  |#define HW_GPIO_071 71
                             5365 ; 202  |#define HW_GPIO_072 72
                             5366 ; 203  |#define HW_GPIO_073 73
                             5367 ; 204  |#define HW_GPIO_074 74
                             5368 ; 205  |#define HW_GPIO_075 75
                             5369 ; 206  |#define HW_GPIO_076 76
                             5370 ; 207  |#define HW_GPIO_077 77
                             5371 ; 208  |#define HW_GPIO_078 78
                             5372 ; 209  |#define HW_GPIO_079 79
                             5373 ; 210  |#define HW_GPIO_080 80
                             5374 ; 211  |#define HW_GPIO_081 81
                             5375 ; 212  |#define HW_GPIO_082 82
                             5376 ; 213  |#define HW_GPIO_083 83
                             5377 ; 214  |#define HW_GPIO_084 84
                             5378 ; 215  |#define HW_GPIO_085 85
                             5379 ; 216  |#define HW_GPIO_086 86
                             5380 ; 217  |#define HW_GPIO_087 87
                             5381 ; 218  |#define HW_GPIO_088 88
                             5382 ; 219  |#define HW_GPIO_089 89
                             5383 ; 220  |#define HW_GPIO_090 90
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5384 ; 221  |#define HW_GPIO_091 91
                             5385 ; 222  |#define HW_GPIO_092 92
                             5386 ; 223  |#define HW_GPIO_093 93
                             5387 ; 224  |#define HW_GPIO_094 94
                             5388 ; 225  |#define HW_GPIO_095 95
                             5389 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             5390 ; 227  |
                             5391 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             5392 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             5393 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             5394 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             5395 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             5396 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             5397 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             5398 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             5399 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             5400 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5401 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             5402 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             5403 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             5404 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             5405 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             5406 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             5407 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             5408 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             5409 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             5410 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             5411 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5412 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             5413 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             5414 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             5415 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             5416 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             5417 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             5418 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5419 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             5420 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             5421 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             5422 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5423 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             5424 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             5425 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             5426 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             5427 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             5428 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             5429 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             5430 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             5431 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             5432 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             5433 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             5434 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             5435 ; 272  |
                             5436 ; 273  |#endif
                             5437 ; 274  |
                             5438 
                             5440 
                             5441 ; 23   |#include "regsi2c.h"
                             5442 
                             5444 
                             5445 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5446 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             5447 ; 3    |// Filename: regsI2C.inc
                             5448 ; 4    |// Description: Register definitions for GPFLASH interface
                             5449 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             5450 ; 6    |// The following naming conventions are followed in this file.
                             5451 ; 7    |// All registers are named using the format...
                             5452 ; 8    |//     HW_<module>_<regname>
                             5453 ; 9    |// where <module> is the module name which can be any of the following...
                             5454 ; 10   |//     USB20
                             5455 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5456 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5457 ; 13   |// that module)
                             5458 ; 14   |// <regname> is the specific register within that module
                             5459 ; 15   |// We also define the following...
                             5460 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5461 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5462 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5463 ; 19   |// which does something else, and
                             5464 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5465 ; 21   |// which does something else.
                             5466 ; 22   |// Other rules
                             5467 ; 23   |//     All caps
                             5468 ; 24   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5469 ; 25   |#if !(defined(regsi2cinc))
                             5470 ; 26   |#define regsi2cinc 1
                             5471 ; 27   |
                             5472 ; 28   |#include "types.h"
                             5473 
                             5475 
                             5476 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5477 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5478 ; 3    |//
                             5479 ; 4    |// Filename: types.h
                             5480 ; 5    |// Description: Standard data types
                             5481 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5482 ; 7    |
                             5483 ; 8    |#ifndef _TYPES_H
                             5484 ; 9    |#define _TYPES_H
                             5485 ; 10   |
                             5486 ; 11   |// TODO:  move this outta here!
                             5487 ; 12   |#if !defined(NOERROR)
                             5488 ; 13   |#define NOERROR 0
                             5489 ; 14   |#define SUCCESS 0
                             5490 ; 15   |#endif 
                             5491 ; 16   |#if !defined(SUCCESS)
                             5492 ; 17   |#define SUCCESS  0
                             5493 ; 18   |#endif
                             5494 ; 19   |#if !defined(ERROR)
                             5495 ; 20   |#define ERROR   -1
                             5496 ; 21   |#endif
                             5497 ; 22   |#if !defined(FALSE)
                             5498 ; 23   |#define FALSE 0
                             5499 ; 24   |#endif
                             5500 ; 25   |#if !defined(TRUE)
                             5501 ; 26   |#define TRUE  1
                             5502 ; 27   |#endif
                             5503 ; 28   |
                             5504 ; 29   |#if !defined(NULL)
                             5505 ; 30   |#define NULL 0
                             5506 ; 31   |#endif
                             5507 ; 32   |
                             5508 ; 33   |#define MAX_INT     0x7FFFFF
                             5509 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5510 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5511 ; 36   |#define MAX_ULONG   (-1) 
                             5512 ; 37   |
                             5513 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5514 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5515 ; 40   |
                             5516 ; 41   |
                             5517 ; 42   |#define BYTE    unsigned char       // btVarName
                             5518 ; 43   |#define CHAR    signed char         // cVarName
                             5519 ; 44   |#define USHORT  unsigned short      // usVarName
                             5520 ; 45   |#define SHORT   unsigned short      // sVarName
                             5521 ; 46   |#define WORD    unsigned int        // wVarName
                             5522 ; 47   |#define INT     signed int          // iVarName
                             5523 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5524 ; 49   |#define LONG    signed long         // lVarName
                             5525 ; 50   |#define BOOL    unsigned int        // bVarName
                             5526 ; 51   |#define FRACT   _fract              // frVarName
                             5527 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5528 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5529 ; 54   |#define FLOAT   float               // fVarName
                             5530 ; 55   |#define DBL     double              // dVarName
                             5531 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5532 ; 57   |#define CMX     _complex            // cmxVarName
                             5533 ; 58   |typedef WORD UCS3;                   // 
                             5534 ; 59   |
                             5535 ; 60   |#define UINT16  unsigned short
                             5536 ; 61   |#define UINT8   unsigned char   
                             5537 ; 62   |#define UINT32  unsigned long
                             5538 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5539 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5540 ; 65   |#define WCHAR   UINT16
                             5541 ; 66   |
                             5542 ; 67   |//UINT128 is 16 bytes or 6 words
                             5543 ; 68   |typedef struct UINT128_3500 {   
                             5544 ; 69   |    int val[6];     
                             5545 ; 70   |} UINT128_3500;
                             5546 ; 71   |
                             5547 ; 72   |#define UINT128   UINT128_3500
                             5548 ; 73   |
                             5549 ; 74   |// Little endian word packed byte strings:   
                             5550 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5551 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5552 ; 77   |// Little endian word packed byte strings:   
                             5553 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5554 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5555 ; 80   |
                             5556 ; 81   |// Declare Memory Spaces To Use When Coding
                             5557 ; 82   |// A. Sector Buffers
                             5558 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5559 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5560 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5561 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5562 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5563 ; 88   |// B. Media DDI Memory
                             5564 ; 89   |#define MEDIA_DDI_MEM _Y
                             5565 ; 90   |
                             5566 ; 91   |
                             5567 ; 92   |
                             5568 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5569 ; 94   |// Examples of circular pointers:
                             5570 ; 95   |//    INT CIRC cpiVarName
                             5571 ; 96   |//    DWORD CIRC cpdwVarName
                             5572 ; 97   |
                             5573 ; 98   |#define RETCODE INT                 // rcVarName
                             5574 ; 99   |
                             5575 ; 100  |// generic bitfield structure
                             5576 ; 101  |struct Bitfield {
                             5577 ; 102  |    unsigned int B0  :1;
                             5578 ; 103  |    unsigned int B1  :1;
                             5579 ; 104  |    unsigned int B2  :1;
                             5580 ; 105  |    unsigned int B3  :1;
                             5581 ; 106  |    unsigned int B4  :1;
                             5582 ; 107  |    unsigned int B5  :1;
                             5583 ; 108  |    unsigned int B6  :1;
                             5584 ; 109  |    unsigned int B7  :1;
                             5585 ; 110  |    unsigned int B8  :1;
                             5586 ; 111  |    unsigned int B9  :1;
                             5587 ; 112  |    unsigned int B10 :1;
                             5588 ; 113  |    unsigned int B11 :1;
                             5589 ; 114  |    unsigned int B12 :1;
                             5590 ; 115  |    unsigned int B13 :1;
                             5591 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5592 ; 117  |    unsigned int B15 :1;
                             5593 ; 118  |    unsigned int B16 :1;
                             5594 ; 119  |    unsigned int B17 :1;
                             5595 ; 120  |    unsigned int B18 :1;
                             5596 ; 121  |    unsigned int B19 :1;
                             5597 ; 122  |    unsigned int B20 :1;
                             5598 ; 123  |    unsigned int B21 :1;
                             5599 ; 124  |    unsigned int B22 :1;
                             5600 ; 125  |    unsigned int B23 :1;
                             5601 ; 126  |};
                             5602 ; 127  |
                             5603 ; 128  |union BitInt {
                             5604 ; 129  |        struct Bitfield B;
                             5605 ; 130  |        int        I;
                             5606 ; 131  |};
                             5607 ; 132  |
                             5608 ; 133  |#define MAX_MSG_LENGTH 10
                             5609 ; 134  |struct CMessage
                             5610 ; 135  |{
                             5611 ; 136  |        unsigned int m_uLength;
                             5612 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5613 ; 138  |};
                             5614 ; 139  |
                             5615 ; 140  |typedef struct {
                             5616 ; 141  |    WORD m_wLength;
                             5617 ; 142  |    WORD m_wMessage;
                             5618 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5619 ; 144  |} Message;
                             5620 ; 145  |
                             5621 ; 146  |struct MessageQueueDescriptor
                             5622 ; 147  |{
                             5623 ; 148  |        int *m_pBase;
                             5624 ; 149  |        int m_iModulo;
                             5625 ; 150  |        int m_iSize;
                             5626 ; 151  |        int *m_pHead;
                             5627 ; 152  |        int *m_pTail;
                             5628 ; 153  |};
                             5629 ; 154  |
                             5630 ; 155  |struct ModuleEntry
                             5631 ; 156  |{
                             5632 ; 157  |    int m_iSignaledEventMask;
                             5633 ; 158  |    int m_iWaitEventMask;
                             5634 ; 159  |    int m_iResourceOfCode;
                             5635 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5636 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5637 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5638 ; 163  |    int m_uTimeOutHigh;
                             5639 ; 164  |    int m_uTimeOutLow;
                             5640 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5641 ; 166  |};
                             5642 ; 167  |
                             5643 ; 168  |union WaitMask{
                             5644 ; 169  |    struct B{
                             5645 ; 170  |        unsigned int m_bNone     :1;
                             5646 ; 171  |        unsigned int m_bMessage  :1;
                             5647 ; 172  |        unsigned int m_bTimer    :1;
                             5648 ; 173  |        unsigned int m_bButton   :1;
                             5649 ; 174  |    } B;
                             5650 ; 175  |    int I;
                             5651 ; 176  |} ;
                             5652 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5653 ; 178  |
                             5654 ; 179  |struct Button {
                             5655 ; 180  |        WORD wButtonEvent;
                             5656 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5657 ; 182  |};
                             5658 ; 183  |
                             5659 ; 184  |struct Message {
                             5660 ; 185  |        WORD wMsgLength;
                             5661 ; 186  |        WORD wMsgCommand;
                             5662 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5663 ; 188  |};
                             5664 ; 189  |
                             5665 ; 190  |union EventTypes {
                             5666 ; 191  |        struct CMessage msg;
                             5667 ; 192  |        struct Button Button ;
                             5668 ; 193  |        struct Message Message;
                             5669 ; 194  |};
                             5670 ; 195  |
                             5671 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5672 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5673 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5674 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5675 ; 200  |
                             5676 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5677 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5678 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5679 ; 204  |
                             5680 ; 205  |#if DEBUG
                             5681 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5682 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5683 ; 208  |#else 
                             5684 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5685 ; 210  |#define DebugBuildAssert(x)    
                             5686 ; 211  |#endif
                             5687 ; 212  |
                             5688 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5689 ; 214  |//  #pragma asm
                             5690 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5691 ; 216  |//  #pragma endasm
                             5692 ; 217  |
                             5693 ; 218  |
                             5694 ; 219  |#ifdef COLOR_262K
                             5695 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5696 ; 221  |#elif defined(COLOR_65K)
                             5697 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5698 ; 223  |#else
                             5699 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5700 ; 225  |#endif
                             5701 ; 226  |    
                             5702 ; 227  |#endif // #ifndef _TYPES_H
                             5703 
                             5705 
                             5706 ; 29   |
                             5707 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             5708 ; 31   |////   I2C STMP Registers
                             5709 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             5710 ; 33   |
                             5711 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5712 ; 35   |
                             5713 ; 36   |
                             5714 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             5715 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             5716 ; 39   |
                             5717 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             5718 ; 41   |
                             5719 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             5720 ; 43   |
                             5721 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             5722 ; 45   |
                             5723 ; 46   |typedef union               /* I2C Clock Divider Register */
                             5724 ; 47   |{
                             5725 ; 48   |    struct {
                             5726 ; 49   |        int                :1; 
                             5727 ; 50   |        unsigned FACT      :8;
                             5728 ; 51   |    } B;
                             5729 ; 52   |    int I;
                             5730 ; 53   |    unsigned U;
                             5731 ; 54   |} i2cdivr_type;
                             5732 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             5733 ; 56   |
                             5734 ; 57   |
                             5735 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             5736 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             5737 ; 60   |
                             5738 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             5739 ; 62   |
                             5740 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             5741 ; 64   |
                             5742 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             5743 ; 66   |
                             5744 ; 67   |typedef union               /* I2C Data Register */
                             5745 ; 68   |{
                             5746 ; 69   |    struct {
                             5747 ; 70   |         unsigned DATA :24; 
                             5748 ; 71   |    } B;
                             5749 ; 72   |    int I;
                             5750 ; 73   |    unsigned U;
                             5751 ; 74   |} i2cdatr_type;
                             5752 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                             5753 ; 76   |
                             5754 ; 77   |
                             5755 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             5756 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             5757 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             5758 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             5759 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             5760 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             5761 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             5762 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             5763 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             5764 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             5765 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             5766 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             5767 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             5768 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             5769 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             5770 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             5771 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5772 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             5773 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             5774 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             5775 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             5776 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             5777 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             5778 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             5779 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             5780 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             5781 ; 104  |
                             5782 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             5783 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             5784 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             5785 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             5786 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             5787 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             5788 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             5789 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             5790 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             5791 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             5792 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             5793 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             5794 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             5795 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             5796 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             5797 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             5798 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             5799 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             5800 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             5801 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             5802 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             5803 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             5804 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             5805 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             5806 ; 129  |
                             5807 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             5808 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             5809 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             5810 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             5811 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             5812 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             5813 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             5814 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             5815 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             5816 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             5817 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             5818 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             5819 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             5820 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             5821 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             5822 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             5823 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             5824 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             5825 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             5826 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             5827 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             5828 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             5829 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             5830 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             5831 ; 154  |
                             5832 ; 155  |typedef union               /* I2C Control Register         */
                             5833 ; 156  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5834 ; 157  |    struct {
                             5835 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             5836 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             5837 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             5838 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             5839 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             5840 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             5841 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             5842 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             5843 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             5844 ; 167  |       unsigned WL     :2; /* Word Length              */
                             5845 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             5846 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             5847 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             5848 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             5849 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             5850 ; 173  |        int LWORD       :1; /* Last Word                */
                             5851 ; 174  |        int SUBA        :1; /* Sub Address              */
                             5852 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             5853 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             5854 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             5855 ; 178  |    } B;
                             5856 ; 179  |    int I;
                             5857 ; 180  |    unsigned U;
                             5858 ; 181  |} i2ccsr_type;
                             5859 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             5860 ; 183  |
                             5861 ; 184  |#endif
                             5862 
                             5864 
                             5865 ; 24   |#include "regsi2s.h"
                             5866 
                             5868 
                             5869 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5870 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             5871 ; 3    |// Filename: regsi2s.inc
                             5872 ; 4    |// Description: Register definitions for I2S interface
                             5873 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             5874 ; 6    |// The following naming conventions are followed in this file.
                             5875 ; 7    |// All registers are named using the format...
                             5876 ; 8    |//     HW_<module>_<regname>
                             5877 ; 9    |// where <module> is the module name which can be any of the following...
                             5878 ; 10   |//     USB20
                             5879 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5880 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5881 ; 13   |// that module)
                             5882 ; 14   |// <regname> is the specific register within that module
                             5883 ; 15   |// We also define the following...
                             5884 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5885 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5886 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5887 ; 19   |// which does something else, and
                             5888 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5889 ; 21   |// which does something else.
                             5890 ; 22   |// Other rules
                             5891 ; 23   |//     All caps
                             5892 ; 24   |//     Numeric identifiers start at 0
                             5893 ; 25   |#if !(defined(regsi2sinc))
                             5894 ; 26   |#define regsi2sinc 1
                             5895 ; 27   |
                             5896 ; 28   |#include "types.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5897 
                             5899 
                             5900 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5901 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5902 ; 3    |//
                             5903 ; 4    |// Filename: types.h
                             5904 ; 5    |// Description: Standard data types
                             5905 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5906 ; 7    |
                             5907 ; 8    |#ifndef _TYPES_H
                             5908 ; 9    |#define _TYPES_H
                             5909 ; 10   |
                             5910 ; 11   |// TODO:  move this outta here!
                             5911 ; 12   |#if !defined(NOERROR)
                             5912 ; 13   |#define NOERROR 0
                             5913 ; 14   |#define SUCCESS 0
                             5914 ; 15   |#endif 
                             5915 ; 16   |#if !defined(SUCCESS)
                             5916 ; 17   |#define SUCCESS  0
                             5917 ; 18   |#endif
                             5918 ; 19   |#if !defined(ERROR)
                             5919 ; 20   |#define ERROR   -1
                             5920 ; 21   |#endif
                             5921 ; 22   |#if !defined(FALSE)
                             5922 ; 23   |#define FALSE 0
                             5923 ; 24   |#endif
                             5924 ; 25   |#if !defined(TRUE)
                             5925 ; 26   |#define TRUE  1
                             5926 ; 27   |#endif
                             5927 ; 28   |
                             5928 ; 29   |#if !defined(NULL)
                             5929 ; 30   |#define NULL 0
                             5930 ; 31   |#endif
                             5931 ; 32   |
                             5932 ; 33   |#define MAX_INT     0x7FFFFF
                             5933 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5934 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5935 ; 36   |#define MAX_ULONG   (-1) 
                             5936 ; 37   |
                             5937 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5938 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5939 ; 40   |
                             5940 ; 41   |
                             5941 ; 42   |#define BYTE    unsigned char       // btVarName
                             5942 ; 43   |#define CHAR    signed char         // cVarName
                             5943 ; 44   |#define USHORT  unsigned short      // usVarName
                             5944 ; 45   |#define SHORT   unsigned short      // sVarName
                             5945 ; 46   |#define WORD    unsigned int        // wVarName
                             5946 ; 47   |#define INT     signed int          // iVarName
                             5947 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5948 ; 49   |#define LONG    signed long         // lVarName
                             5949 ; 50   |#define BOOL    unsigned int        // bVarName
                             5950 ; 51   |#define FRACT   _fract              // frVarName
                             5951 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5952 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5953 ; 54   |#define FLOAT   float               // fVarName
                             5954 ; 55   |#define DBL     double              // dVarName
                             5955 ; 56   |#define ENUM    enum                // eVarName
                             5956 ; 57   |#define CMX     _complex            // cmxVarName
                             5957 ; 58   |typedef WORD UCS3;                   // 
                             5958 ; 59   |
                             5959 ; 60   |#define UINT16  unsigned short
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5960 ; 61   |#define UINT8   unsigned char   
                             5961 ; 62   |#define UINT32  unsigned long
                             5962 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5963 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5964 ; 65   |#define WCHAR   UINT16
                             5965 ; 66   |
                             5966 ; 67   |//UINT128 is 16 bytes or 6 words
                             5967 ; 68   |typedef struct UINT128_3500 {   
                             5968 ; 69   |    int val[6];     
                             5969 ; 70   |} UINT128_3500;
                             5970 ; 71   |
                             5971 ; 72   |#define UINT128   UINT128_3500
                             5972 ; 73   |
                             5973 ; 74   |// Little endian word packed byte strings:   
                             5974 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5975 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5976 ; 77   |// Little endian word packed byte strings:   
                             5977 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5978 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5979 ; 80   |
                             5980 ; 81   |// Declare Memory Spaces To Use When Coding
                             5981 ; 82   |// A. Sector Buffers
                             5982 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5983 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5984 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5985 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5986 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5987 ; 88   |// B. Media DDI Memory
                             5988 ; 89   |#define MEDIA_DDI_MEM _Y
                             5989 ; 90   |
                             5990 ; 91   |
                             5991 ; 92   |
                             5992 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5993 ; 94   |// Examples of circular pointers:
                             5994 ; 95   |//    INT CIRC cpiVarName
                             5995 ; 96   |//    DWORD CIRC cpdwVarName
                             5996 ; 97   |
                             5997 ; 98   |#define RETCODE INT                 // rcVarName
                             5998 ; 99   |
                             5999 ; 100  |// generic bitfield structure
                             6000 ; 101  |struct Bitfield {
                             6001 ; 102  |    unsigned int B0  :1;
                             6002 ; 103  |    unsigned int B1  :1;
                             6003 ; 104  |    unsigned int B2  :1;
                             6004 ; 105  |    unsigned int B3  :1;
                             6005 ; 106  |    unsigned int B4  :1;
                             6006 ; 107  |    unsigned int B5  :1;
                             6007 ; 108  |    unsigned int B6  :1;
                             6008 ; 109  |    unsigned int B7  :1;
                             6009 ; 110  |    unsigned int B8  :1;
                             6010 ; 111  |    unsigned int B9  :1;
                             6011 ; 112  |    unsigned int B10 :1;
                             6012 ; 113  |    unsigned int B11 :1;
                             6013 ; 114  |    unsigned int B12 :1;
                             6014 ; 115  |    unsigned int B13 :1;
                             6015 ; 116  |    unsigned int B14 :1;
                             6016 ; 117  |    unsigned int B15 :1;
                             6017 ; 118  |    unsigned int B16 :1;
                             6018 ; 119  |    unsigned int B17 :1;
                             6019 ; 120  |    unsigned int B18 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6020 ; 121  |    unsigned int B19 :1;
                             6021 ; 122  |    unsigned int B20 :1;
                             6022 ; 123  |    unsigned int B21 :1;
                             6023 ; 124  |    unsigned int B22 :1;
                             6024 ; 125  |    unsigned int B23 :1;
                             6025 ; 126  |};
                             6026 ; 127  |
                             6027 ; 128  |union BitInt {
                             6028 ; 129  |        struct Bitfield B;
                             6029 ; 130  |        int        I;
                             6030 ; 131  |};
                             6031 ; 132  |
                             6032 ; 133  |#define MAX_MSG_LENGTH 10
                             6033 ; 134  |struct CMessage
                             6034 ; 135  |{
                             6035 ; 136  |        unsigned int m_uLength;
                             6036 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6037 ; 138  |};
                             6038 ; 139  |
                             6039 ; 140  |typedef struct {
                             6040 ; 141  |    WORD m_wLength;
                             6041 ; 142  |    WORD m_wMessage;
                             6042 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6043 ; 144  |} Message;
                             6044 ; 145  |
                             6045 ; 146  |struct MessageQueueDescriptor
                             6046 ; 147  |{
                             6047 ; 148  |        int *m_pBase;
                             6048 ; 149  |        int m_iModulo;
                             6049 ; 150  |        int m_iSize;
                             6050 ; 151  |        int *m_pHead;
                             6051 ; 152  |        int *m_pTail;
                             6052 ; 153  |};
                             6053 ; 154  |
                             6054 ; 155  |struct ModuleEntry
                             6055 ; 156  |{
                             6056 ; 157  |    int m_iSignaledEventMask;
                             6057 ; 158  |    int m_iWaitEventMask;
                             6058 ; 159  |    int m_iResourceOfCode;
                             6059 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6060 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6061 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6062 ; 163  |    int m_uTimeOutHigh;
                             6063 ; 164  |    int m_uTimeOutLow;
                             6064 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6065 ; 166  |};
                             6066 ; 167  |
                             6067 ; 168  |union WaitMask{
                             6068 ; 169  |    struct B{
                             6069 ; 170  |        unsigned int m_bNone     :1;
                             6070 ; 171  |        unsigned int m_bMessage  :1;
                             6071 ; 172  |        unsigned int m_bTimer    :1;
                             6072 ; 173  |        unsigned int m_bButton   :1;
                             6073 ; 174  |    } B;
                             6074 ; 175  |    int I;
                             6075 ; 176  |} ;
                             6076 ; 177  |
                             6077 ; 178  |
                             6078 ; 179  |struct Button {
                             6079 ; 180  |        WORD wButtonEvent;
                             6080 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6081 ; 182  |};
                             6082 ; 183  |
                             6083 ; 184  |struct Message {
                             6084 ; 185  |        WORD wMsgLength;
                             6085 ; 186  |        WORD wMsgCommand;
                             6086 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6087 ; 188  |};
                             6088 ; 189  |
                             6089 ; 190  |union EventTypes {
                             6090 ; 191  |        struct CMessage msg;
                             6091 ; 192  |        struct Button Button ;
                             6092 ; 193  |        struct Message Message;
                             6093 ; 194  |};
                             6094 ; 195  |
                             6095 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6096 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6097 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6098 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6099 ; 200  |
                             6100 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6101 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6102 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6103 ; 204  |
                             6104 ; 205  |#if DEBUG
                             6105 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6106 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6107 ; 208  |#else 
                             6108 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6109 ; 210  |#define DebugBuildAssert(x)    
                             6110 ; 211  |#endif
                             6111 ; 212  |
                             6112 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6113 ; 214  |//  #pragma asm
                             6114 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6115 ; 216  |//  #pragma endasm
                             6116 ; 217  |
                             6117 ; 218  |
                             6118 ; 219  |#ifdef COLOR_262K
                             6119 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6120 ; 221  |#elif defined(COLOR_65K)
                             6121 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             6122 ; 223  |#else
                             6123 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6124 ; 225  |#endif
                             6125 ; 226  |    
                             6126 ; 227  |#endif // #ifndef _TYPES_H
                             6127 
                             6129 
                             6130 ; 29   |
                             6131 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             6132 ; 31   |////  I2S Registers (SAI)
                             6133 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             6134 ; 33   |
                             6135 ; 34   |
                             6136 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             6137 ; 36   |
                             6138 ; 37   |
                             6139 ; 38   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6140 ; 39   |
                             6141 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             6142 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             6143 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             6144 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             6145 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             6146 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             6147 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             6148 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             6149 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             6150 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             6151 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             6152 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             6153 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             6154 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             6155 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             6156 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             6157 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             6158 ; 57   |
                             6159 ; 58   |
                             6160 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             6161 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             6162 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             6163 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             6164 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             6165 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             6166 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             6167 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             6168 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             6169 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             6170 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             6171 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             6172 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             6173 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             6174 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             6175 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             6176 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             6177 ; 76   |
                             6178 ; 77   |
                             6179 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             6180 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             6181 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             6182 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             6183 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             6184 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             6185 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             6186 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             6187 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             6188 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             6189 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             6190 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             6191 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             6192 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             6193 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             6194 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             6195 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             6196 ; 95   |
                             6197 ; 96   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6198 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             6199 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             6200 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             6201 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             6202 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             6203 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             6204 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             6205 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             6206 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             6207 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             6208 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             6209 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             6210 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             6211 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             6212 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             6213 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             6214 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             6215 ; 114  |
                             6216 ; 115  |typedef union
                             6217 ; 116  |{
                             6218 ; 117  |    struct {
                             6219 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             6220 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             6221 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             6222 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             6223 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             6224 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             6225 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             6226 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             6227 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             6228 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             6229 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             6230 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             6231 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             6232 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             6233 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             6234 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             6235 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             6236 ; 135  |    } B;
                             6237 ; 136  |    int I;
                             6238 ; 137  |    unsigned U;
                             6239 ; 138  |} saircsr_type;
                             6240 ; 139  |
                             6241 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             6242 ; 141  |
                             6243 ; 142  |typedef union
                             6244 ; 143  |{
                             6245 ; 144  |    struct {
                             6246 ; 145  |        unsigned SAI :24;
                             6247 ; 146  |    } B;
                             6248 ; 147  |    int I;
                             6249 ; 148  |    unsigned U;
                             6250 ; 149  |} saixr_type;
                             6251 ; 150  |
                             6252 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             6253 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             6254 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6255 ; 154  |
                             6256 ; 155  |
                             6257 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             6258 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             6259 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             6260 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             6261 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             6262 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             6263 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             6264 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             6265 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             6266 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             6267 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             6268 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             6269 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             6270 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             6271 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             6272 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             6273 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             6274 ; 173  |
                             6275 ; 174  |
                             6276 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             6277 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             6278 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             6279 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             6280 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             6281 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             6282 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             6283 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             6284 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             6285 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             6286 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             6287 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             6288 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             6289 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             6290 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             6291 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             6292 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             6293 ; 192  |
                             6294 ; 193  |
                             6295 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             6296 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             6297 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             6298 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             6299 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             6300 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             6301 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             6302 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             6303 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             6304 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             6305 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             6306 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             6307 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             6308 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             6309 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             6310 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             6311 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             6312 ; 211  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6313 ; 212  |
                             6314 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             6315 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             6316 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             6317 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             6318 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             6319 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             6320 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             6321 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             6322 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             6323 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             6324 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             6325 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             6326 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             6327 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             6328 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             6329 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             6330 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             6331 ; 230  |
                             6332 ; 231  |
                             6333 ; 232  |typedef union
                             6334 ; 233  |{
                             6335 ; 234  |    struct {
                             6336 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             6337 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             6338 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             6339 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             6340 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             6341 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             6342 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             6343 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             6344 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             6345 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             6346 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             6347 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             6348 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             6349 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             6350 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             6351 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             6352 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             6353 ; 252  |    } B;
                             6354 ; 253  |    int I;
                             6355 ; 254  |    unsigned U;
                             6356 ; 255  |} saitcsr_type;
                             6357 ; 256  |
                             6358 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
                             6359 ; 258  |
                             6360 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             6361 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             6362 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             6363 ; 262  |
                             6364 ; 263  |#endif
                             6365 
                             6367 
                             6368 ; 25   |#include "regsicoll.h"
                             6369 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6371 
                             6372 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             6373 ; 2    |#define __REGS_ICOLL_INC 1
                             6374 ; 3    |
                             6375 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             6376 ; 5    |//  Interrupt Collector Registers
                             6377 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             6378 ; 7    |
                             6379 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             6380 ; 9    |
                             6381 ; 10   |
                             6382 ; 11   |
                             6383 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             6384 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             6385 ; 14   |
                             6386 ; 15   |typedef union
                             6387 ; 16   |{
                             6388 ; 17   |    struct {
                             6389 ; 18   |        int SEN0        :1;
                             6390 ; 19   |        int SEN1        :1;
                             6391 ; 20   |        int SEN2        :1;
                             6392 ; 21   |        int SEN3        :1;
                             6393 ; 22   |        int SEN4        :1;
                             6394 ; 23   |        int SEN5        :1;
                             6395 ; 24   |        int SEN6        :1;
                             6396 ; 25   |        int SEN7        :1;
                             6397 ; 26   |        int SEN8        :1;
                             6398 ; 27   |        int SEN9        :1;
                             6399 ; 28   |        int SEN10       :1;
                             6400 ; 29   |        int SEN11       :1;
                             6401 ; 30   |        int SEN12       :1;
                             6402 ; 31   |        int SEN13       :1;
                             6403 ; 32   |        int SEN14       :1;
                             6404 ; 33   |        int SEN15       :1;
                             6405 ; 34   |        int SEN16       :1;
                             6406 ; 35   |        int SEN17       :1;
                             6407 ; 36   |        int SEN18       :1;
                             6408 ; 37   |        int SEN19       :1;
                             6409 ; 38   |        int SEN20       :1;
                             6410 ; 39   |        int SEN21       :1;
                             6411 ; 40   |        int SEN22       :1;
                             6412 ; 41   |        int SEN23       :1;
                             6413 ; 42   |    } B;
                             6414 ; 43   |    int I;
                             6415 ; 44   |} iclenable0_type;
                             6416 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             6417 ; 46   |
                             6418 ; 47   |
                             6419 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             6420 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             6421 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             6422 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             6423 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             6424 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             6425 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             6426 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             6427 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             6428 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             6429 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             6430 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             6431 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6432 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             6433 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             6434 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             6435 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             6436 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             6437 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             6438 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             6439 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             6440 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             6441 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             6442 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             6443 ; 72   |
                             6444 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             6445 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             6446 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             6447 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             6448 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             6449 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             6450 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             6451 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             6452 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             6453 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             6454 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             6455 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             6456 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             6457 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             6458 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             6459 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             6460 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             6461 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             6462 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             6463 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             6464 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             6465 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             6466 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             6467 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             6468 ; 97   |
                             6469 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             6470 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             6471 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             6472 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             6473 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             6474 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             6475 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             6476 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             6477 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             6478 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             6479 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             6480 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             6481 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             6482 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             6483 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             6484 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             6485 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             6486 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             6487 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             6488 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             6489 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             6490 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             6491 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             6492 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             6493 ; 122  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6494 ; 123  |
                             6495 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             6496 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             6497 ; 126  |typedef union
                             6498 ; 127  |{
                             6499 ; 128  |    struct {
                             6500 ; 129  |        
                             6501 ; 130  |        int SEN24       :1;
                             6502 ; 131  |        int SEN25       :1;
                             6503 ; 132  |        int SEN26       :1;
                             6504 ; 133  |        int SEN27       :1;
                             6505 ; 134  |        int SEN28       :1;
                             6506 ; 135  |        int SEN29       :1;
                             6507 ; 136  |        int SEN30       :1;
                             6508 ; 137  |        int SEN31       :1;
                             6509 ; 138  |        int SEN32       :1;
                             6510 ; 139  |        int SEN33       :1;
                             6511 ; 140  |    } B;
                             6512 ; 141  |    int I;
                             6513 ; 142  |} iclenable1_type;
                             6514 ; 143  |
                             6515 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             6516 ; 145  |
                             6517 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             6518 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             6519 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             6520 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             6521 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             6522 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             6523 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             6524 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             6525 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             6526 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             6527 ; 156  |
                             6528 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             6529 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             6530 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             6531 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             6532 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             6533 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             6534 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             6535 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             6536 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             6537 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             6538 ; 167  |
                             6539 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             6540 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             6541 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             6542 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             6543 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             6544 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             6545 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             6546 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             6547 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             6548 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             6549 ; 178  |
                             6550 ; 179  |
                             6551 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             6552 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             6553 ; 182  |typedef union
                             6554 ; 183  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6555 ; 184  |    struct {
                             6556 ; 185  |        int SST0        :1;
                             6557 ; 186  |        int SST1        :1;
                             6558 ; 187  |        int SST2        :1;
                             6559 ; 188  |        int SST3        :1;
                             6560 ; 189  |        int SST4        :1;
                             6561 ; 190  |        int SST5        :1;
                             6562 ; 191  |        int SST6        :1;
                             6563 ; 192  |        int SST7        :1;
                             6564 ; 193  |        int SST8        :1;
                             6565 ; 194  |        int SST9        :1;
                             6566 ; 195  |        int SST10       :1;
                             6567 ; 196  |        int SST11       :1;
                             6568 ; 197  |        int SST12       :1;
                             6569 ; 198  |        int SST13       :1;
                             6570 ; 199  |        int SST14       :1;
                             6571 ; 200  |        int SST15       :1;
                             6572 ; 201  |        int SST16       :1;
                             6573 ; 202  |        int SST17       :1;
                             6574 ; 203  |        int SST18       :1;
                             6575 ; 204  |        int SST19       :1;
                             6576 ; 205  |        int SST20       :1;
                             6577 ; 206  |        int SST21       :1;
                             6578 ; 207  |        int SST22       :1;
                             6579 ; 208  |        int SST23       :1;
                             6580 ; 209  |    } B;
                             6581 ; 210  |    int I;
                             6582 ; 211  |} iclstatus0_type;
                             6583 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             6584 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             6585 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             6586 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             6587 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             6588 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             6589 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             6590 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             6591 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             6592 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             6593 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             6594 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             6595 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             6596 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             6597 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             6598 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             6599 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             6600 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             6601 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             6602 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             6603 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             6604 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             6605 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             6606 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             6607 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             6608 ; 237  |
                             6609 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             6610 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             6611 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             6612 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             6613 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             6614 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             6615 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6616 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             6617 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             6618 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             6619 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             6620 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             6621 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             6622 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             6623 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             6624 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             6625 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             6626 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             6627 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             6628 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             6629 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             6630 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             6631 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             6632 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             6633 ; 262  |
                             6634 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             6635 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             6636 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             6637 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             6638 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             6639 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             6640 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             6641 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             6642 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             6643 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             6644 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             6645 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             6646 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             6647 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             6648 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             6649 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             6650 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             6651 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             6652 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             6653 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             6654 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             6655 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             6656 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             6657 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             6658 ; 287  |
                             6659 ; 288  |
                             6660 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             6661 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             6662 ; 291  |typedef union
                             6663 ; 292  |{
                             6664 ; 293  |    struct {
                             6665 ; 294  |        int SST24       :1;
                             6666 ; 295  |        int SST25       :1;
                             6667 ; 296  |        int SST26       :1;
                             6668 ; 297  |        int SST27       :1;
                             6669 ; 298  |        int SST28       :1;
                             6670 ; 299  |        int SST29       :1;
                             6671 ; 300  |        int SST30       :1;
                             6672 ; 301  |        int SST31       :1;
                             6673 ; 302  |        int SST32       :1;
                             6674 ; 303  |        int SST33       :1;
                             6675 ; 304  |    } B;
                             6676 ; 305  |    int I;
                             6677 ; 306  |} iclstatus1_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6678 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             6679 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             6680 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             6681 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             6682 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             6683 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             6684 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             6685 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             6686 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             6687 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             6688 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             6689 ; 318  |
                             6690 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             6691 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             6692 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             6693 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             6694 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             6695 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             6696 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             6697 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             6698 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             6699 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             6700 ; 329  |
                             6701 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             6702 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             6703 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             6704 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             6705 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             6706 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             6707 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             6708 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             6709 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             6710 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             6711 ; 340  |
                             6712 ; 341  |
                             6713 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             6714 ; 343  |//  Interrupt Collector Priority Defs
                             6715 ; 344  |typedef union
                             6716 ; 345  |{
                             6717 ; 346  |    struct {
                             6718 ; 347  |        unsigned S0P    :3;
                             6719 ; 348  |        unsigned S1P    :3;
                             6720 ; 349  |        unsigned S2P    :3;
                             6721 ; 350  |        unsigned S3P    :3;
                             6722 ; 351  |        unsigned S4P    :3;
                             6723 ; 352  |        unsigned S5P    :3;
                             6724 ; 353  |        unsigned S6P    :3;
                             6725 ; 354  |        unsigned S7P    :3;
                             6726 ; 355  |    } B;
                             6727 ; 356  |    int I;
                             6728 ; 357  |
                             6729 ; 358  |} iclprior0_type;
                             6730 ; 359  |
                             6731 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             6732 ; 361  |
                             6733 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             6734 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             6735 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             6736 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             6737 ; 366  |#define HW_ICLPRIORR_SP_4 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6738 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             6739 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             6740 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             6741 ; 370  |
                             6742 ; 371  |
                             6743 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             6744 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             6745 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             6746 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             6747 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             6748 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             6749 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             6750 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             6751 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             6752 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             6753 ; 382  |
                             6754 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             6755 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             6756 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             6757 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             6758 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             6759 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             6760 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             6761 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             6762 ; 391  |
                             6763 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             6764 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             6765 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             6766 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             6767 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             6768 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             6769 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             6770 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             6771 ; 400  |
                             6772 ; 401  |
                             6773 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             6774 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             6775 ; 404  |typedef union
                             6776 ; 405  |{
                             6777 ; 406  |    struct {
                             6778 ; 407  |        unsigned S8P    :3;
                             6779 ; 408  |        unsigned S9P    :3;
                             6780 ; 409  |        unsigned S10P   :3;
                             6781 ; 410  |        unsigned S11P   :3;
                             6782 ; 411  |        unsigned S12P   :3;
                             6783 ; 412  |        unsigned S13P   :3;
                             6784 ; 413  |        unsigned S14P   :3;
                             6785 ; 414  |        unsigned S15P   :3;
                             6786 ; 415  |    } B;
                             6787 ; 416  |    int I;
                             6788 ; 417  |} iclprior1_type;
                             6789 ; 418  |
                             6790 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             6791 ; 420  |
                             6792 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             6793 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             6794 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             6795 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             6796 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             6797 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             6798 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6799 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             6800 ; 429  |
                             6801 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             6802 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             6803 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             6804 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             6805 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             6806 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             6807 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             6808 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             6809 ; 438  |
                             6810 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             6811 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             6812 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             6813 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             6814 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             6815 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             6816 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             6817 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             6818 ; 447  |
                             6819 ; 448  |
                             6820 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             6821 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             6822 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             6823 ; 452  |{
                             6824 ; 453  |    struct {
                             6825 ; 454  |        unsigned S16P   :3;
                             6826 ; 455  |        unsigned S17P   :3;
                             6827 ; 456  |        unsigned S18P   :3;
                             6828 ; 457  |        unsigned S19P   :3;
                             6829 ; 458  |        unsigned S20P   :3;
                             6830 ; 459  |        unsigned S21P   :3;
                             6831 ; 460  |        unsigned S22P   :3;
                             6832 ; 461  |        unsigned S23P   :3;
                             6833 ; 462  |    } B;
                             6834 ; 463  |    int I;
                             6835 ; 464  |} iclprior2_type;
                             6836 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             6837 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             6838 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             6839 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             6840 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             6841 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             6842 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             6843 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             6844 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             6845 ; 474  |
                             6846 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             6847 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             6848 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             6849 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             6850 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             6851 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             6852 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             6853 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             6854 ; 483  |
                             6855 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             6856 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             6857 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             6858 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             6859 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6860 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             6861 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             6862 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             6863 ; 492  |
                             6864 ; 493  |
                             6865 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             6866 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             6867 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6868 ; 497  |{
                             6869 ; 498  |    struct {
                             6870 ; 499  |        unsigned S24P   :3;
                             6871 ; 500  |        unsigned S25P   :3;
                             6872 ; 501  |        unsigned S26P   :3;
                             6873 ; 502  |        unsigned S27P   :3;
                             6874 ; 503  |        unsigned S28P   :3;
                             6875 ; 504  |        unsigned S29P   :3;
                             6876 ; 505  |        unsigned S30P   :3;
                             6877 ; 506  |        unsigned S31P   :3;
                             6878 ; 507  |    } B;
                             6879 ; 508  |    int I;
                             6880 ; 509  |} iclprior3_type;
                             6881 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             6882 ; 511  |
                             6883 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             6884 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             6885 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             6886 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             6887 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             6888 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             6889 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             6890 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             6891 ; 520  |
                             6892 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             6893 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             6894 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             6895 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             6896 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             6897 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             6898 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             6899 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             6900 ; 529  |
                             6901 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             6902 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             6903 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             6904 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             6905 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             6906 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             6907 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             6908 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             6909 ; 538  |
                             6910 ; 539  |
                             6911 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             6912 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             6913 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6914 ; 543  |{
                             6915 ; 544  |    struct {
                             6916 ; 545  |        unsigned S32P   :3;
                             6917 ; 546  |        unsigned S33P   :3;
                             6918 ; 547  |    } B;
                             6919 ; 548  |    int I;
                             6920 ; 549  |} iclprior4_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6921 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             6922 ; 551  |
                             6923 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             6924 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             6925 ; 554  |
                             6926 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             6927 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             6928 ; 557  |
                             6929 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             6930 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             6931 ; 560  |
                             6932 ; 561  |
                             6933 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             6934 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6935 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             6936 ; 565  |{
                             6937 ; 566  |    struct {
                             6938 ; 567  |        unsigned S0S    :2;
                             6939 ; 568  |        unsigned S1S    :2;
                             6940 ; 569  |        unsigned S2S    :2;
                             6941 ; 570  |        unsigned S3S    :2;
                             6942 ; 571  |        unsigned S4S    :2;
                             6943 ; 572  |        unsigned S5S    :2;
                             6944 ; 573  |        unsigned S6S    :2;
                             6945 ; 574  |        unsigned S7S    :2;
                             6946 ; 575  |        unsigned S8S    :2;
                             6947 ; 576  |        unsigned S9S    :2;
                             6948 ; 577  |        unsigned S10S   :2;
                             6949 ; 578  |        unsigned S11S   :2;
                             6950 ; 579  |    } B;
                             6951 ; 580  |    int I;
                             6952 ; 581  |} iclsteer0_type;
                             6953 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             6954 ; 583  |
                             6955 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             6956 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             6957 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             6958 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             6959 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             6960 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             6961 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             6962 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             6963 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             6964 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             6965 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             6966 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             6967 ; 596  |
                             6968 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             6969 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             6970 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             6971 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             6972 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             6973 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             6974 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             6975 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             6976 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             6977 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             6978 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             6979 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             6980 ; 609  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6981 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             6982 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             6983 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             6984 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             6985 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             6986 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             6987 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             6988 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             6989 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             6990 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             6991 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             6992 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             6993 ; 622  |
                             6994 ; 623  |
                             6995 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             6996 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             6997 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             6998 ; 627  |{
                             6999 ; 628  |    struct {
                             7000 ; 629  |        unsigned S12S   :2;
                             7001 ; 630  |        unsigned S13S   :2;
                             7002 ; 631  |        unsigned S14S   :2;
                             7003 ; 632  |        unsigned S15S   :2;
                             7004 ; 633  |        unsigned S16S   :2;
                             7005 ; 634  |        unsigned S17S   :2;
                             7006 ; 635  |        unsigned S18S   :2;
                             7007 ; 636  |        unsigned S19S   :2;
                             7008 ; 637  |        unsigned S20S   :2;
                             7009 ; 638  |        unsigned S21S   :2;
                             7010 ; 639  |        unsigned S22S   :2;
                             7011 ; 640  |        unsigned S23S   :2;
                             7012 ; 641  |    } B;
                             7013 ; 642  |    int I;
                             7014 ; 643  |} iclsteer1_type;
                             7015 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             7016 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             7017 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             7018 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             7019 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             7020 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             7021 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             7022 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             7023 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             7024 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             7025 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             7026 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             7027 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             7028 ; 657  |
                             7029 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             7030 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             7031 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             7032 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             7033 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             7034 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             7035 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             7036 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             7037 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             7038 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             7039 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             7040 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             7041 ; 670  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7042 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             7043 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             7044 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             7045 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             7046 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             7047 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             7048 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             7049 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             7050 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             7051 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             7052 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             7053 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             7054 ; 683  |
                             7055 ; 684  |
                             7056 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             7057 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             7058 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             7059 ; 688  |{
                             7060 ; 689  |    struct {
                             7061 ; 690  |        unsigned S24S   :2;
                             7062 ; 691  |        unsigned S25S   :2;
                             7063 ; 692  |        unsigned S26S   :2;
                             7064 ; 693  |        unsigned S27S   :2;
                             7065 ; 694  |        unsigned S28S   :2;
                             7066 ; 695  |        unsigned S29S   :2;
                             7067 ; 696  |        unsigned S30S   :2;
                             7068 ; 697  |        unsigned S31S   :2;
                             7069 ; 698  |        unsigned S32S   :2;
                             7070 ; 699  |        unsigned S33S   :2;
                             7071 ; 700  |    } B;
                             7072 ; 701  |    int I;
                             7073 ; 702  |} iclsteer2_type;
                             7074 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             7075 ; 704  |
                             7076 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             7077 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             7078 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             7079 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             7080 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             7081 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             7082 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             7083 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             7084 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             7085 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             7086 ; 715  |
                             7087 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             7088 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             7089 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             7090 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             7091 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             7092 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             7093 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             7094 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             7095 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             7096 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             7097 ; 726  |
                             7098 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             7099 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             7100 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             7101 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             7102 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7103 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             7104 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             7105 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             7106 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             7107 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             7108 ; 737  |
                             7109 ; 738  |
                             7110 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             7111 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             7112 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             7113 ; 742  |{
                             7114 ; 743  |    struct {
                             7115 ; 744  |        int S0FV        :1;
                             7116 ; 745  |        int S1FV        :1;
                             7117 ; 746  |        int S2FV        :1;
                             7118 ; 747  |        int S3FV        :1;
                             7119 ; 748  |        int S4FV        :1;
                             7120 ; 749  |        int S5FV        :1;
                             7121 ; 750  |        int S6FV        :1;
                             7122 ; 751  |        int S7FV        :1;
                             7123 ; 752  |        int S8FV        :1;
                             7124 ; 753  |        int S9FV        :1;
                             7125 ; 754  |        int S10FV       :1;
                             7126 ; 755  |        int S11FV       :1;
                             7127 ; 756  |        int S12FV       :1;
                             7128 ; 757  |        int S13FV       :1;
                             7129 ; 758  |        int S14FV       :1;
                             7130 ; 759  |        int S15FV       :1;
                             7131 ; 760  |        int S16FV       :1;
                             7132 ; 761  |        int S17FV       :1;
                             7133 ; 762  |        int S18FV       :1;
                             7134 ; 763  |        int S19FV       :1;
                             7135 ; 764  |        int S20FV       :1;
                             7136 ; 765  |        int S21FV       :1;
                             7137 ; 766  |        int S22FV       :1;
                             7138 ; 767  |        int S23FV       :1;
                             7139 ; 768  |    } B;
                             7140 ; 769  |    int I;
                             7141 ; 770  |} iclforce0_type;
                             7142 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             7143 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             7144 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             7145 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             7146 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             7147 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             7148 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             7149 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             7150 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             7151 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             7152 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             7153 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             7154 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             7155 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             7156 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             7157 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             7158 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             7159 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             7160 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             7161 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             7162 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             7163 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7164 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             7165 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             7166 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             7167 ; 796  |
                             7168 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             7169 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             7170 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             7171 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             7172 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             7173 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             7174 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             7175 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             7176 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             7177 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             7178 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             7179 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             7180 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             7181 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             7182 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             7183 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             7184 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             7185 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             7186 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             7187 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             7188 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             7189 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             7190 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             7191 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             7192 ; 821  |
                             7193 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             7194 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             7195 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             7196 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             7197 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             7198 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             7199 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             7200 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             7201 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             7202 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             7203 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             7204 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             7205 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             7206 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             7207 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             7208 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             7209 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             7210 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             7211 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             7212 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             7213 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             7214 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             7215 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             7216 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             7217 ; 846  |
                             7218 ; 847  |
                             7219 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             7220 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             7221 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             7222 ; 851  |{
                             7223 ; 852  |    struct {
                             7224 ; 853  |        int S24FV       :1;
                             7225 ; 854  |        int S25FV       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7226 ; 855  |        int S26FV       :1;
                             7227 ; 856  |        int S27FV       :1;
                             7228 ; 857  |        int S28FV       :1;
                             7229 ; 858  |        int S29FV       :1;
                             7230 ; 859  |        int S30FV       :1;
                             7231 ; 860  |        int S31FV       :1;
                             7232 ; 861  |        int S32FV       :1;
                             7233 ; 862  |        int S33FV       :1;
                             7234 ; 863  |    } B;
                             7235 ; 864  |    int I;
                             7236 ; 865  |} iclforce1_type;
                             7237 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             7238 ; 867  |
                             7239 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             7240 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             7241 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             7242 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             7243 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             7244 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             7245 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             7246 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             7247 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             7248 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             7249 ; 878  |
                             7250 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             7251 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             7252 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             7253 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             7254 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             7255 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             7256 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             7257 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             7258 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             7259 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             7260 ; 889  |
                             7261 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             7262 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             7263 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             7264 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             7265 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             7266 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             7267 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             7268 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             7269 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             7270 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             7271 ; 900  |
                             7272 ; 901  |
                             7273 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             7274 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             7275 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             7276 ; 905  |{
                             7277 ; 906  |    struct {
                             7278 ; 907  |        int S0FE        :1;
                             7279 ; 908  |        int S1FE        :1;
                             7280 ; 909  |        int S2FE        :1;
                             7281 ; 910  |        int S3FE        :1;
                             7282 ; 911  |        int S4FE        :1;
                             7283 ; 912  |        int S5FE        :1;
                             7284 ; 913  |        int S6FE        :1;
                             7285 ; 914  |        int S7FE        :1;
                             7286 ; 915  |        int S8FE        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7287 ; 916  |        int S9FE        :1;
                             7288 ; 917  |        int S10FE       :1;
                             7289 ; 918  |        int S11FE       :1;
                             7290 ; 919  |        int S12FE       :1;
                             7291 ; 920  |        int S13FE       :1;
                             7292 ; 921  |        int S14FE       :1;
                             7293 ; 922  |        int S15FE       :1;
                             7294 ; 923  |        int S16FE       :1;
                             7295 ; 924  |        int S17FE       :1;
                             7296 ; 925  |        int S18FE       :1;
                             7297 ; 926  |        int S19FE       :1;
                             7298 ; 927  |        int S20FE       :1;
                             7299 ; 928  |        int S21FE       :1;
                             7300 ; 929  |        int S22FE       :1;
                             7301 ; 930  |        int S23FE       :1;
                             7302 ; 931  |    } B;
                             7303 ; 932  |    int I;
                             7304 ; 933  |} iclfenable0_type;
                             7305 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             7306 ; 935  |
                             7307 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             7308 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             7309 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             7310 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             7311 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             7312 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             7313 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             7314 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             7315 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             7316 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             7317 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             7318 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             7319 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             7320 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             7321 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             7322 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             7323 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             7324 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             7325 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             7326 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             7327 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             7328 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             7329 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             7330 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             7331 ; 960  |
                             7332 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             7333 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             7334 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             7335 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             7336 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             7337 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             7338 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             7339 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             7340 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             7341 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             7342 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             7343 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             7344 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             7345 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             7346 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             7347 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7348 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             7349 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             7350 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             7351 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             7352 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             7353 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             7354 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             7355 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             7356 ; 985  |
                             7357 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             7358 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             7359 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             7360 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             7361 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             7362 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             7363 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             7364 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             7365 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             7366 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             7367 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             7368 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             7369 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             7370 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             7371 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             7372 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             7373 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             7374 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             7375 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             7376 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             7377 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             7378 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             7379 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             7380 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             7381 ; 1010 |
                             7382 ; 1011 |
                             7383 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             7384 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             7385 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             7386 ; 1015 |{
                             7387 ; 1016 |    struct {
                             7388 ; 1017 |        int S24FE       :1;
                             7389 ; 1018 |        int S25FE       :1;
                             7390 ; 1019 |        int S26FE       :1;
                             7391 ; 1020 |        int S27FE       :1;
                             7392 ; 1021 |        int S28FE       :1;
                             7393 ; 1022 |        int S29FE       :1;
                             7394 ; 1023 |        int S30FE       :1;
                             7395 ; 1024 |        int S31FE       :1;
                             7396 ; 1025 |        int S32FE       :1;
                             7397 ; 1026 |        int S33FE       :1;
                             7398 ; 1027 |    } B;
                             7399 ; 1028 |    int I;
                             7400 ; 1029 |} iclfenable1_type;
                             7401 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             7402 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             7403 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             7404 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             7405 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             7406 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             7407 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             7408 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7409 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             7410 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             7411 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             7412 ; 1041 |
                             7413 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             7414 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             7415 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             7416 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             7417 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             7418 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             7419 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             7420 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             7421 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             7422 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             7423 ; 1052 |
                             7424 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             7425 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             7426 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             7427 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             7428 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             7429 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             7430 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             7431 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             7432 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             7433 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             7434 ; 1063 |
                             7435 ; 1064 |
                             7436 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             7437 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             7438 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             7439 ; 1068 |{
                             7440 ; 1069 |    struct {
                             7441 ; 1070 |        unsigned RQ     :7;
                             7442 ; 1071 |        unsigned IVA    :7;
                             7443 ; 1072 |        unsigned IVB    :7;
                             7444 ; 1073 |    } B;
                             7445 ; 1074 |    int I;
                             7446 ; 1075 |} iclobsvz0_type;
                             7447 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             7448 ; 1077 |
                             7449 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             7450 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             7451 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             7452 ; 1081 |
                             7453 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             7454 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             7455 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             7456 ; 1085 |
                             7457 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             7458 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             7459 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             7460 ; 1089 |
                             7461 ; 1090 |
                             7462 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             7463 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             7464 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             7465 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             7466 ; 1095 |
                             7467 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             7468 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             7469 ; 1098 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7470 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             7471 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             7472 ; 1101 |
                             7473 ; 1102 |
                             7474 ; 1103 |
                             7475 ; 1104 |
                             7476 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             7477 ; 1106 |//  Interrupt Vectors
                             7478 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             7479 ; 1108 |// Reset Vector
                             7480 ; 1109 |#define HW_IVECRESET 0x0000           
                             7481 ; 1110 |// Stack Error
                             7482 ; 1111 |#define HW_IVECSTERR 0x0002           
                             7483 ; 1112 |// Trace
                             7484 ; 1113 |#define HW_IVECTRAC 0x0004           
                             7485 ; 1114 |// SWI
                             7486 ; 1115 |#define HW_IVECSWI 0x0006           
                             7487 ; 1116 |// ~IRQA
                             7488 ; 1117 |#define HW_IVECIRQA 0x0008           
                             7489 ; 1118 |// ~IRQB - BROWNOUT
                             7490 ; 1119 |#define HW_IVECIRQB 0x000A           
                             7491 ; 1120 |// Fatal Error
                             7492 ; 1121 |#define HW_IVECERROR 0x000C           
                             7493 ; 1122 |// SPI
                             7494 ; 1123 |#define HW_IVECSPI 0x000E           
                             7495 ; 1124 |// I2S TX Data Empty
                             7496 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             7497 ; 1126 |// I2S TX Underflow
                             7498 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             7499 ; 1128 |// I2S RX Data Full
                             7500 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             7501 ; 1130 |// I2S RX Overflow
                             7502 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             7503 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             7504 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             7505 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             7506 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             7507 ; 1136 |// GPIO1
                             7508 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             7509 ; 1138 |// GPIO2
                             7510 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             7511 ; 1140 |// GPIO0
                             7512 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             7513 ; 1142 |// TIMER0
                             7514 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             7515 ; 1144 |// TIMER1
                             7516 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             7517 ; 1146 |// TIMER2
                             7518 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             7519 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             7520 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             7521 ; 1150 |// I2C RX Data Ready
                             7522 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             7523 ; 1152 |// I2C RX Overflow
                             7524 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             7525 ; 1154 |// I2C TX Data Empty
                             7526 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7527 ; 1156 |// I2C TX Underflow
                             7528 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             7529 ; 1158 |// Illegal Instruction
                             7530 ; 1159 |#define HW_IVECILI 0x0038           
                             7531 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             7532 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             7533 ; 1162 |#define HW_IVECDACE 0x003C           
                             7534 ; 1163 |// DAC Underflow ISR
                             7535 ; 1164 |#define HW_IVECDACUF 0x003E           
                             7536 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             7537 ; 1166 |// ADC Full ISR
                             7538 ; 1167 |#define HW_IVECADCF 0x0042           
                             7539 ; 1168 |// ADC Overflow ISR
                             7540 ; 1169 |#define HW_IVECADCOF 0x0044           
                             7541 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             7542 ; 1171 |// TIMER3
                             7543 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             7544 ; 1173 |// GPIO3
                             7545 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             7546 ; 1175 |// SDRAM
                             7547 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             7548 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             7549 ; 1178 |// 5 volt power connected
                             7550 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             7551 ; 1180 |// USB Controller
                             7552 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             7553 ; 1182 |// USB Wakeup 
                             7554 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             7555 ; 1184 |// 5 volt power disconnected
                             7556 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             7557 ; 1186 |// enhanced SPI
                             7558 ; 1187 |#define HW_IVECESPI 0x0058           
                             7559 ; 1188 |// filter coprocessor
                             7560 ; 1189 |#define HW_IVECFILCO 0x005A           
                             7561 ; 1190 |// low res ADC #1
                             7562 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             7563 ; 1192 |// real time clock alarm
                             7564 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             7565 ; 1194 |// low res ADC #2
                             7566 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             7567 ; 1196 |// flash hardware ECC
                             7568 ; 1197 |#define HW_IVECHWECC 0x0062           
                             7569 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             7570 ; 1199 |// CDSYNC Interrupt
                             7571 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             7572 ; 1201 |// CDSYNC Exception
                             7573 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             7574 ; 1203 |// RS
                             7575 ; 1204 |#define HW_IVECRS 0x006A           
                             7576 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             7577 ; 1206 |// Flash Done ISR
                             7578 ; 1207 |#define HW_IVECFD 0x006E           
                             7579 ; 1208 |// CompactFlash ISR
                             7580 ; 1209 |#define HW_IVECCF 0x0070           
                             7581 ; 1210 |// SmartMedia Timeout ISR
                             7582 ; 1211 |#define HW_IVECSMTO 0x0072           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7583 ; 1212 |// SmartMedia Invalid Programming
                             7584 ; 1213 |#define HW_IVECSMIP 0x0074           
                             7585 ; 1214 |// CompactFlash No Card ISR
                             7586 ; 1215 |#define HW_IVECCFNC 0x0076           
                             7587 ; 1216 |// CompactFlash Status Change ISR
                             7588 ; 1217 |#define HW_IVECCFSC 0x0078           
                             7589 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             7590 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             7591 ; 1220 |// CDI
                             7592 ; 1221 |#define HW_IVECCDI 0x007E           
                             7593 ; 1222 |
                             7594 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             7595 ; 1224 |//  Interrupt Vectors
                             7596 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             7597 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             7598 ; 1227 |#define VECTOR(address,isr) \ 
                             7599 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             7600 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             7601 ; 1230 |
                             7602 ; 1231 |
                             7603 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             7604 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             7605 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             7606 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             7607 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             7608 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             7609 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             7610 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             7611 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             7612 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             7613 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             7614 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             7615 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             7616 ; 1245 |
                             7617 ; 1246 |// Interrupt Disabled
                             7618 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             7619 ; 1248 |// Interrupt Priority Level 0
                             7620 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             7621 ; 1250 |// Interrupt Priority Level 1
                             7622 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             7623 ; 1252 |// Interrupt Priority Level 2
                             7624 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             7625 ; 1254 |
                             7626 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             7627 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             7628 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             7629 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             7630 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             7631 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             7632 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             7633 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             7634 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             7635 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             7636 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             7637 ; 1266 |
                             7638 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             7639 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             7640 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             7641 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             7642 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7643 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             7644 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             7645 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             7646 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             7647 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             7648 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             7649 ; 1278 |
                             7650 ; 1279 |// Interrupt Priority register
                             7651 ; 1280 |typedef union               
                             7652 ; 1281 |{
                             7653 ; 1282 |    struct {
                             7654 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             7655 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             7656 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             7657 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             7658 ; 1287 |        int                 :4; /* Reserved */
                             7659 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             7660 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             7661 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             7662 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             7663 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             7664 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             7665 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             7666 ; 1295 |    } B;
                             7667 ; 1296 |
                             7668 ; 1297 |    int I;
                             7669 ; 1298 |
                             7670 ; 1299 |} ipr_type;
                             7671 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             7672 ; 1301 |
                             7673 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7674 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7675 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             7676 ; 1305 |
                             7677 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             7678 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             7679 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             7680 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             7681 ; 1310 |
                             7682 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             7683 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             7684 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             7685 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             7686 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             7687 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             7688 ; 1317 |
                             7689 ; 1318 |#endif
                             7690 ; 1319 |
                             7691 
                             7693 
                             7694 ; 26   |#include "regslradc.h"
                             7695 
                             7697 
                             7698 ; 1    |#if !(defined(regslradcinc))
                             7699 ; 2    |
                             7700 ; 3    |#define regslradcinc 1
                             7701 ; 4    |
                             7702 ; 5    |#include "types.h"
                             7703 
                             7705 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7706 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7707 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7708 ; 3    |//
                             7709 ; 4    |// Filename: types.h
                             7710 ; 5    |// Description: Standard data types
                             7711 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7712 ; 7    |
                             7713 ; 8    |#ifndef _TYPES_H
                             7714 ; 9    |#define _TYPES_H
                             7715 ; 10   |
                             7716 ; 11   |// TODO:  move this outta here!
                             7717 ; 12   |#if !defined(NOERROR)
                             7718 ; 13   |#define NOERROR 0
                             7719 ; 14   |#define SUCCESS 0
                             7720 ; 15   |#endif 
                             7721 ; 16   |#if !defined(SUCCESS)
                             7722 ; 17   |#define SUCCESS  0
                             7723 ; 18   |#endif
                             7724 ; 19   |#if !defined(ERROR)
                             7725 ; 20   |#define ERROR   -1
                             7726 ; 21   |#endif
                             7727 ; 22   |#if !defined(FALSE)
                             7728 ; 23   |#define FALSE 0
                             7729 ; 24   |#endif
                             7730 ; 25   |#if !defined(TRUE)
                             7731 ; 26   |#define TRUE  1
                             7732 ; 27   |#endif
                             7733 ; 28   |
                             7734 ; 29   |#if !defined(NULL)
                             7735 ; 30   |#define NULL 0
                             7736 ; 31   |#endif
                             7737 ; 32   |
                             7738 ; 33   |#define MAX_INT     0x7FFFFF
                             7739 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7740 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7741 ; 36   |#define MAX_ULONG   (-1) 
                             7742 ; 37   |
                             7743 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7744 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7745 ; 40   |
                             7746 ; 41   |
                             7747 ; 42   |#define BYTE    unsigned char       // btVarName
                             7748 ; 43   |#define CHAR    signed char         // cVarName
                             7749 ; 44   |#define USHORT  unsigned short      // usVarName
                             7750 ; 45   |#define SHORT   unsigned short      // sVarName
                             7751 ; 46   |#define WORD    unsigned int        // wVarName
                             7752 ; 47   |#define INT     signed int          // iVarName
                             7753 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7754 ; 49   |#define LONG    signed long         // lVarName
                             7755 ; 50   |#define BOOL    unsigned int        // bVarName
                             7756 ; 51   |#define FRACT   _fract              // frVarName
                             7757 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7758 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7759 ; 54   |#define FLOAT   float               // fVarName
                             7760 ; 55   |#define DBL     double              // dVarName
                             7761 ; 56   |#define ENUM    enum                // eVarName
                             7762 ; 57   |#define CMX     _complex            // cmxVarName
                             7763 ; 58   |typedef WORD UCS3;                   // 
                             7764 ; 59   |
                             7765 ; 60   |#define UINT16  unsigned short
                             7766 ; 61   |#define UINT8   unsigned char   
                             7767 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7768 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7769 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7770 ; 65   |#define WCHAR   UINT16
                             7771 ; 66   |
                             7772 ; 67   |//UINT128 is 16 bytes or 6 words
                             7773 ; 68   |typedef struct UINT128_3500 {   
                             7774 ; 69   |    int val[6];     
                             7775 ; 70   |} UINT128_3500;
                             7776 ; 71   |
                             7777 ; 72   |#define UINT128   UINT128_3500
                             7778 ; 73   |
                             7779 ; 74   |// Little endian word packed byte strings:   
                             7780 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7781 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7782 ; 77   |// Little endian word packed byte strings:   
                             7783 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7784 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7785 ; 80   |
                             7786 ; 81   |// Declare Memory Spaces To Use When Coding
                             7787 ; 82   |// A. Sector Buffers
                             7788 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7789 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7790 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7791 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7792 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7793 ; 88   |// B. Media DDI Memory
                             7794 ; 89   |#define MEDIA_DDI_MEM _Y
                             7795 ; 90   |
                             7796 ; 91   |
                             7797 ; 92   |
                             7798 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7799 ; 94   |// Examples of circular pointers:
                             7800 ; 95   |//    INT CIRC cpiVarName
                             7801 ; 96   |//    DWORD CIRC cpdwVarName
                             7802 ; 97   |
                             7803 ; 98   |#define RETCODE INT                 // rcVarName
                             7804 ; 99   |
                             7805 ; 100  |// generic bitfield structure
                             7806 ; 101  |struct Bitfield {
                             7807 ; 102  |    unsigned int B0  :1;
                             7808 ; 103  |    unsigned int B1  :1;
                             7809 ; 104  |    unsigned int B2  :1;
                             7810 ; 105  |    unsigned int B3  :1;
                             7811 ; 106  |    unsigned int B4  :1;
                             7812 ; 107  |    unsigned int B5  :1;
                             7813 ; 108  |    unsigned int B6  :1;
                             7814 ; 109  |    unsigned int B7  :1;
                             7815 ; 110  |    unsigned int B8  :1;
                             7816 ; 111  |    unsigned int B9  :1;
                             7817 ; 112  |    unsigned int B10 :1;
                             7818 ; 113  |    unsigned int B11 :1;
                             7819 ; 114  |    unsigned int B12 :1;
                             7820 ; 115  |    unsigned int B13 :1;
                             7821 ; 116  |    unsigned int B14 :1;
                             7822 ; 117  |    unsigned int B15 :1;
                             7823 ; 118  |    unsigned int B16 :1;
                             7824 ; 119  |    unsigned int B17 :1;
                             7825 ; 120  |    unsigned int B18 :1;
                             7826 ; 121  |    unsigned int B19 :1;
                             7827 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7828 ; 123  |    unsigned int B21 :1;
                             7829 ; 124  |    unsigned int B22 :1;
                             7830 ; 125  |    unsigned int B23 :1;
                             7831 ; 126  |};
                             7832 ; 127  |
                             7833 ; 128  |union BitInt {
                             7834 ; 129  |        struct Bitfield B;
                             7835 ; 130  |        int        I;
                             7836 ; 131  |};
                             7837 ; 132  |
                             7838 ; 133  |#define MAX_MSG_LENGTH 10
                             7839 ; 134  |struct CMessage
                             7840 ; 135  |{
                             7841 ; 136  |        unsigned int m_uLength;
                             7842 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7843 ; 138  |};
                             7844 ; 139  |
                             7845 ; 140  |typedef struct {
                             7846 ; 141  |    WORD m_wLength;
                             7847 ; 142  |    WORD m_wMessage;
                             7848 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7849 ; 144  |} Message;
                             7850 ; 145  |
                             7851 ; 146  |struct MessageQueueDescriptor
                             7852 ; 147  |{
                             7853 ; 148  |        int *m_pBase;
                             7854 ; 149  |        int m_iModulo;
                             7855 ; 150  |        int m_iSize;
                             7856 ; 151  |        int *m_pHead;
                             7857 ; 152  |        int *m_pTail;
                             7858 ; 153  |};
                             7859 ; 154  |
                             7860 ; 155  |struct ModuleEntry
                             7861 ; 156  |{
                             7862 ; 157  |    int m_iSignaledEventMask;
                             7863 ; 158  |    int m_iWaitEventMask;
                             7864 ; 159  |    int m_iResourceOfCode;
                             7865 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7866 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7867 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7868 ; 163  |    int m_uTimeOutHigh;
                             7869 ; 164  |    int m_uTimeOutLow;
                             7870 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7871 ; 166  |};
                             7872 ; 167  |
                             7873 ; 168  |union WaitMask{
                             7874 ; 169  |    struct B{
                             7875 ; 170  |        unsigned int m_bNone     :1;
                             7876 ; 171  |        unsigned int m_bMessage  :1;
                             7877 ; 172  |        unsigned int m_bTimer    :1;
                             7878 ; 173  |        unsigned int m_bButton   :1;
                             7879 ; 174  |    } B;
                             7880 ; 175  |    int I;
                             7881 ; 176  |} ;
                             7882 ; 177  |
                             7883 ; 178  |
                             7884 ; 179  |struct Button {
                             7885 ; 180  |        WORD wButtonEvent;
                             7886 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7887 ; 182  |};
                             7888 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7889 ; 184  |struct Message {
                             7890 ; 185  |        WORD wMsgLength;
                             7891 ; 186  |        WORD wMsgCommand;
                             7892 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7893 ; 188  |};
                             7894 ; 189  |
                             7895 ; 190  |union EventTypes {
                             7896 ; 191  |        struct CMessage msg;
                             7897 ; 192  |        struct Button Button ;
                             7898 ; 193  |        struct Message Message;
                             7899 ; 194  |};
                             7900 ; 195  |
                             7901 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7902 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7903 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7904 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7905 ; 200  |
                             7906 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7907 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7908 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7909 ; 204  |
                             7910 ; 205  |#if DEBUG
                             7911 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7912 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7913 ; 208  |#else 
                             7914 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7915 ; 210  |#define DebugBuildAssert(x)    
                             7916 ; 211  |#endif
                             7917 ; 212  |
                             7918 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7919 ; 214  |//  #pragma asm
                             7920 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7921 ; 216  |//  #pragma endasm
                             7922 ; 217  |
                             7923 ; 218  |
                             7924 ; 219  |#ifdef COLOR_262K
                             7925 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7926 ; 221  |#elif defined(COLOR_65K)
                             7927 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7928 ; 223  |#else
                             7929 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7930 ; 225  |#endif
                             7931 ; 226  |    
                             7932 ; 227  |#endif // #ifndef _TYPES_H
                             7933 
                             7935 
                             7936 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7937 ; 7    |
                             7938 ; 8    |//   SYSTEM STMP Registers 
                             7939 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             7940 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7941 ; 11   |
                             7942 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             7943 ; 13   |
                             7944 ; 14   |
                             7945 ; 15   |
                             7946 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             7947 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7948 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             7949 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             7950 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7951 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             7952 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             7953 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             7954 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             7955 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             7956 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             7957 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             7958 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             7959 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             7960 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             7961 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             7962 ; 32   |
                             7963 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             7964 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7965 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             7966 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             7967 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             7968 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             7969 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             7970 ; 40   |
                             7971 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             7972 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             7973 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             7974 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             7975 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             7976 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             7977 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             7978 ; 48   |
                             7979 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             7980 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             7981 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             7982 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             7983 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             7984 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             7985 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             7986 ; 56   |
                             7987 ; 57   |typedef union               
                             7988 ; 58   |{
                             7989 ; 59   |    struct {
                             7990 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             7991 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             7992 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             7993 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             7994 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             7995 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             7996 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             7997 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             7998 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             7999 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             8000 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8001 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             8002 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             8003 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             8004 ; 74   |    } B;
                             8005 ; 75   |   unsigned int I;
                             8006 ; 76   |        unsigned int U;
                             8007 ; 77   |} lradc_ctrl_type;
                             8008 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             8009 ; 79   |
                             8010 ; 80   |
                             8011 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             8012 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             8013 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             8014 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             8015 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             8016 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             8017 ; 87   |
                             8018 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             8019 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             8020 ; 90   |
                             8021 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             8022 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             8023 ; 93   |
                             8024 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             8025 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             8026 ; 96   |
                             8027 ; 97   |
                             8028 ; 98   |typedef union               
                             8029 ; 99   |{
                             8030 ; 100  |    struct {
                             8031 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             8032 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             8033 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             8034 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             8035 ; 105  |    } B;
                             8036 ; 106  |    unsigned int I;
                             8037 ; 107  |} lradc_thrsh_type;
                             8038 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             8039 ; 109  |
                             8040 ; 110  |
                             8041 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             8042 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             8043 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             8044 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             8045 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             8046 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             8047 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             8048 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             8049 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             8050 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             8051 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             8052 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             8053 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8054 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             8055 ; 125  |
                             8056 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             8057 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             8058 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             8059 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             8060 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             8061 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             8062 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             8063 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             8064 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             8065 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             8066 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             8067 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             8068 ; 138  |
                             8069 ; 139  |
                             8070 ; 140  |
                             8071 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             8072 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             8073 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             8074 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             8075 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             8076 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             8077 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             8078 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             8079 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             8080 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             8081 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             8082 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             8083 ; 153  |
                             8084 ; 154  |
                             8085 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             8086 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             8087 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             8088 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             8089 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             8090 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             8091 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             8092 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             8093 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             8094 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             8095 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             8096 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             8097 ; 167  |
                             8098 ; 168  |typedef union               
                             8099 ; 169  |{
                             8100 ; 170  |    struct {
                             8101 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             8102 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             8103 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8104 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             8105 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             8106 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             8107 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             8108 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             8109 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             8110 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             8111 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             8112 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             8113 ; 183  |    } B;
                             8114 ; 184  |    unsigned int I;
                             8115 ; 185  |} lradc_result_type;
                             8116 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             8117 ; 187  |
                             8118 ; 188  |
                             8119 ; 189  |
                             8120 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             8121 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             8122 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             8123 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             8124 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             8125 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             8126 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             8127 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             8128 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             8129 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             8130 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             8131 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             8132 ; 202  |
                             8133 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             8134 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             8135 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             8136 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             8137 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             8138 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             8139 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             8140 ; 210  |
                             8141 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             8142 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             8143 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             8144 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             8145 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             8146 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             8147 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             8148 ; 218  |
                             8149 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             8150 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             8151 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             8152 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8153 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             8154 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             8155 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             8156 ; 226  |
                             8157 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             8158 ; 228  |
                             8159 ; 229  |
                             8160 ; 230  |
                             8161 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             8162 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             8163 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             8164 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             8165 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             8166 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             8167 ; 237  |
                             8168 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             8169 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             8170 ; 240  |
                             8171 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             8172 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             8173 ; 243  |
                             8174 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             8175 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             8176 ; 246  |
                             8177 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             8178 ; 248  |
                             8179 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             8180 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             8181 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             8182 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             8183 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             8184 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             8185 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             8186 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             8187 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             8188 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             8189 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             8190 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             8191 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             8192 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             8193 ; 263  |
                             8194 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             8195 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             8196 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             8197 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             8198 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             8199 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             8200 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             8201 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             8202 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             8203 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             8204 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             8205 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             8206 ; 276  |
                             8207 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8208 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             8209 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             8210 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             8211 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             8212 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             8213 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             8214 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             8215 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             8216 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             8217 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             8218 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             8219 ; 289  |
                             8220 ; 290  |
                             8221 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             8222 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             8223 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             8224 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             8225 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             8226 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             8227 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             8228 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             8229 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             8230 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             8231 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             8232 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             8233 ; 303  |
                             8234 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             8235 ; 305  |
                             8236 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             8237 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             8238 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             8239 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             8240 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             8241 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             8242 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             8243 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             8244 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             8245 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             8246 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             8247 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             8248 ; 318  |
                             8249 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             8250 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             8251 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             8252 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             8253 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             8254 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             8255 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             8256 ; 326  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8257 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             8258 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             8259 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             8260 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             8261 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             8262 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             8263 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             8264 ; 334  |
                             8265 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             8266 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             8267 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             8268 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             8269 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             8270 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             8271 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             8272 ; 342  |
                             8273 ; 343  |
                             8274 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             8275 ; 345  |
                             8276 ; 346  |
                             8277 ; 347  |
                             8278 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             8279 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             8280 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             8281 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             8282 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             8283 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             8284 ; 354  |
                             8285 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             8286 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             8287 ; 357  |
                             8288 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             8289 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             8290 ; 360  |
                             8291 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             8292 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             8293 ; 363  |
                             8294 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             8295 ; 365  |
                             8296 ; 366  |
                             8297 ; 367  |
                             8298 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             8299 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             8300 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8301 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             8302 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             8303 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             8304 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             8305 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             8306 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             8307 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             8308 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             8309 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             8310 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             8311 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             8312 ; 382  |
                             8313 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             8314 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             8315 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             8316 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             8317 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             8318 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             8319 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             8320 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             8321 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             8322 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             8323 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             8324 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             8325 ; 395  |
                             8326 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             8327 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             8328 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             8329 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             8330 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             8331 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             8332 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             8333 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             8334 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             8335 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             8336 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             8337 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             8338 ; 408  |
                             8339 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             8340 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             8341 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             8342 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             8343 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             8344 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             8345 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             8346 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             8347 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             8348 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             8349 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             8350 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8351 ; 421  |
                             8352 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             8353 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8354 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8355 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8356 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8357 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8358 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8359 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8360 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             8361 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             8362 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             8363 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             8364 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             8365 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             8366 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             8367 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             8368 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             8369 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             8370 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             8371 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             8372 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             8373 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             8374 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             8375 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             8376 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             8377 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             8378 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             8379 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             8380 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             8381 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             8382 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             8383 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             8384 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             8385 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             8386 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             8387 ; 457  |
                             8388 ; 458  |//Needed by button.asm
                             8389 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             8390 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             8391 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             8392 ; 462  |
                             8393 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8394 ; 464  |
                             8395 ; 465  |#endif
                             8396 ; 466  |
                             8397 ; 467  |
                             8398 
                             8400 
                             8401 ; 27   |#include "regspwm.h"
                             8402 
                             8404 
                             8405 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8406 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             8407 ; 3    |// Filename: regspwm.inc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8408 ; 4    |// Description: Register definitions for PWM interface
                             8409 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8410 ; 6    |// The following naming conventions are followed in this file.
                             8411 ; 7    |// All registers are named using the format...
                             8412 ; 8    |//     HW_<module>_<regname>
                             8413 ; 9    |// where <module> is the module name which can be any of the following...
                             8414 ; 10   |//     USB20
                             8415 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8416 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8417 ; 13   |// that module)
                             8418 ; 14   |// <regname> is the specific register within that module
                             8419 ; 15   |// We also define the following...
                             8420 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8421 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8422 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8423 ; 19   |// which does something else, and
                             8424 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8425 ; 21   |// which does something else.
                             8426 ; 22   |// Other rules
                             8427 ; 23   |//     All caps
                             8428 ; 24   |//     Numeric identifiers start at 0
                             8429 ; 25   |#if !(defined(regspwminc))
                             8430 ; 26   |#define regspwminc 1
                             8431 ; 27   |
                             8432 ; 28   |#include "types.h"
                             8433 
                             8435 
                             8436 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8437 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8438 ; 3    |//
                             8439 ; 4    |// Filename: types.h
                             8440 ; 5    |// Description: Standard data types
                             8441 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8442 ; 7    |
                             8443 ; 8    |#ifndef _TYPES_H
                             8444 ; 9    |#define _TYPES_H
                             8445 ; 10   |
                             8446 ; 11   |// TODO:  move this outta here!
                             8447 ; 12   |#if !defined(NOERROR)
                             8448 ; 13   |#define NOERROR 0
                             8449 ; 14   |#define SUCCESS 0
                             8450 ; 15   |#endif 
                             8451 ; 16   |#if !defined(SUCCESS)
                             8452 ; 17   |#define SUCCESS  0
                             8453 ; 18   |#endif
                             8454 ; 19   |#if !defined(ERROR)
                             8455 ; 20   |#define ERROR   -1
                             8456 ; 21   |#endif
                             8457 ; 22   |#if !defined(FALSE)
                             8458 ; 23   |#define FALSE 0
                             8459 ; 24   |#endif
                             8460 ; 25   |#if !defined(TRUE)
                             8461 ; 26   |#define TRUE  1
                             8462 ; 27   |#endif
                             8463 ; 28   |
                             8464 ; 29   |#if !defined(NULL)
                             8465 ; 30   |#define NULL 0
                             8466 ; 31   |#endif
                             8467 ; 32   |
                             8468 ; 33   |#define MAX_INT     0x7FFFFF
                             8469 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8470 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8471 ; 36   |#define MAX_ULONG   (-1) 
                             8472 ; 37   |
                             8473 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8474 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8475 ; 40   |
                             8476 ; 41   |
                             8477 ; 42   |#define BYTE    unsigned char       // btVarName
                             8478 ; 43   |#define CHAR    signed char         // cVarName
                             8479 ; 44   |#define USHORT  unsigned short      // usVarName
                             8480 ; 45   |#define SHORT   unsigned short      // sVarName
                             8481 ; 46   |#define WORD    unsigned int        // wVarName
                             8482 ; 47   |#define INT     signed int          // iVarName
                             8483 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8484 ; 49   |#define LONG    signed long         // lVarName
                             8485 ; 50   |#define BOOL    unsigned int        // bVarName
                             8486 ; 51   |#define FRACT   _fract              // frVarName
                             8487 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8488 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8489 ; 54   |#define FLOAT   float               // fVarName
                             8490 ; 55   |#define DBL     double              // dVarName
                             8491 ; 56   |#define ENUM    enum                // eVarName
                             8492 ; 57   |#define CMX     _complex            // cmxVarName
                             8493 ; 58   |typedef WORD UCS3;                   // 
                             8494 ; 59   |
                             8495 ; 60   |#define UINT16  unsigned short
                             8496 ; 61   |#define UINT8   unsigned char   
                             8497 ; 62   |#define UINT32  unsigned long
                             8498 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8499 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8500 ; 65   |#define WCHAR   UINT16
                             8501 ; 66   |
                             8502 ; 67   |//UINT128 is 16 bytes or 6 words
                             8503 ; 68   |typedef struct UINT128_3500 {   
                             8504 ; 69   |    int val[6];     
                             8505 ; 70   |} UINT128_3500;
                             8506 ; 71   |
                             8507 ; 72   |#define UINT128   UINT128_3500
                             8508 ; 73   |
                             8509 ; 74   |// Little endian word packed byte strings:   
                             8510 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8511 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8512 ; 77   |// Little endian word packed byte strings:   
                             8513 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8514 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8515 ; 80   |
                             8516 ; 81   |// Declare Memory Spaces To Use When Coding
                             8517 ; 82   |// A. Sector Buffers
                             8518 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8519 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8520 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8521 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8522 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8523 ; 88   |// B. Media DDI Memory
                             8524 ; 89   |#define MEDIA_DDI_MEM _Y
                             8525 ; 90   |
                             8526 ; 91   |
                             8527 ; 92   |
                             8528 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8529 ; 94   |// Examples of circular pointers:
                             8530 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8531 ; 96   |//    DWORD CIRC cpdwVarName
                             8532 ; 97   |
                             8533 ; 98   |#define RETCODE INT                 // rcVarName
                             8534 ; 99   |
                             8535 ; 100  |// generic bitfield structure
                             8536 ; 101  |struct Bitfield {
                             8537 ; 102  |    unsigned int B0  :1;
                             8538 ; 103  |    unsigned int B1  :1;
                             8539 ; 104  |    unsigned int B2  :1;
                             8540 ; 105  |    unsigned int B3  :1;
                             8541 ; 106  |    unsigned int B4  :1;
                             8542 ; 107  |    unsigned int B5  :1;
                             8543 ; 108  |    unsigned int B6  :1;
                             8544 ; 109  |    unsigned int B7  :1;
                             8545 ; 110  |    unsigned int B8  :1;
                             8546 ; 111  |    unsigned int B9  :1;
                             8547 ; 112  |    unsigned int B10 :1;
                             8548 ; 113  |    unsigned int B11 :1;
                             8549 ; 114  |    unsigned int B12 :1;
                             8550 ; 115  |    unsigned int B13 :1;
                             8551 ; 116  |    unsigned int B14 :1;
                             8552 ; 117  |    unsigned int B15 :1;
                             8553 ; 118  |    unsigned int B16 :1;
                             8554 ; 119  |    unsigned int B17 :1;
                             8555 ; 120  |    unsigned int B18 :1;
                             8556 ; 121  |    unsigned int B19 :1;
                             8557 ; 122  |    unsigned int B20 :1;
                             8558 ; 123  |    unsigned int B21 :1;
                             8559 ; 124  |    unsigned int B22 :1;
                             8560 ; 125  |    unsigned int B23 :1;
                             8561 ; 126  |};
                             8562 ; 127  |
                             8563 ; 128  |union BitInt {
                             8564 ; 129  |        struct Bitfield B;
                             8565 ; 130  |        int        I;
                             8566 ; 131  |};
                             8567 ; 132  |
                             8568 ; 133  |#define MAX_MSG_LENGTH 10
                             8569 ; 134  |struct CMessage
                             8570 ; 135  |{
                             8571 ; 136  |        unsigned int m_uLength;
                             8572 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8573 ; 138  |};
                             8574 ; 139  |
                             8575 ; 140  |typedef struct {
                             8576 ; 141  |    WORD m_wLength;
                             8577 ; 142  |    WORD m_wMessage;
                             8578 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8579 ; 144  |} Message;
                             8580 ; 145  |
                             8581 ; 146  |struct MessageQueueDescriptor
                             8582 ; 147  |{
                             8583 ; 148  |        int *m_pBase;
                             8584 ; 149  |        int m_iModulo;
                             8585 ; 150  |        int m_iSize;
                             8586 ; 151  |        int *m_pHead;
                             8587 ; 152  |        int *m_pTail;
                             8588 ; 153  |};
                             8589 ; 154  |
                             8590 ; 155  |struct ModuleEntry
                             8591 ; 156  |{
                             8592 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8593 ; 158  |    int m_iWaitEventMask;
                             8594 ; 159  |    int m_iResourceOfCode;
                             8595 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8596 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8597 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8598 ; 163  |    int m_uTimeOutHigh;
                             8599 ; 164  |    int m_uTimeOutLow;
                             8600 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8601 ; 166  |};
                             8602 ; 167  |
                             8603 ; 168  |union WaitMask{
                             8604 ; 169  |    struct B{
                             8605 ; 170  |        unsigned int m_bNone     :1;
                             8606 ; 171  |        unsigned int m_bMessage  :1;
                             8607 ; 172  |        unsigned int m_bTimer    :1;
                             8608 ; 173  |        unsigned int m_bButton   :1;
                             8609 ; 174  |    } B;
                             8610 ; 175  |    int I;
                             8611 ; 176  |} ;
                             8612 ; 177  |
                             8613 ; 178  |
                             8614 ; 179  |struct Button {
                             8615 ; 180  |        WORD wButtonEvent;
                             8616 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8617 ; 182  |};
                             8618 ; 183  |
                             8619 ; 184  |struct Message {
                             8620 ; 185  |        WORD wMsgLength;
                             8621 ; 186  |        WORD wMsgCommand;
                             8622 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8623 ; 188  |};
                             8624 ; 189  |
                             8625 ; 190  |union EventTypes {
                             8626 ; 191  |        struct CMessage msg;
                             8627 ; 192  |        struct Button Button ;
                             8628 ; 193  |        struct Message Message;
                             8629 ; 194  |};
                             8630 ; 195  |
                             8631 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8632 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8633 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8634 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8635 ; 200  |
                             8636 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8637 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8638 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8639 ; 204  |
                             8640 ; 205  |#if DEBUG
                             8641 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8642 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8643 ; 208  |#else 
                             8644 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8645 ; 210  |#define DebugBuildAssert(x)    
                             8646 ; 211  |#endif
                             8647 ; 212  |
                             8648 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8649 ; 214  |//  #pragma asm
                             8650 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8651 ; 216  |//  #pragma endasm
                             8652 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8653 ; 218  |
                             8654 ; 219  |#ifdef COLOR_262K
                             8655 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8656 ; 221  |#elif defined(COLOR_65K)
                             8657 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8658 ; 223  |#else
                             8659 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8660 ; 225  |#endif
                             8661 ; 226  |    
                             8662 ; 227  |#endif // #ifndef _TYPES_H
                             8663 
                             8665 
                             8666 ; 29   |
                             8667 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8668 ; 31   |//   Pulse Width Modulator STMP Registers 
                             8669 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8670 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             8671 ; 34   |
                             8672 ; 35   |
                             8673 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8674 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             8675 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             8676 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             8677 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             8678 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             8679 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             8680 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             8681 ; 44   |
                             8682 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             8683 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             8684 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             8685 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             8686 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             8687 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             8688 ; 51   |
                             8689 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             8690 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
                             8691 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             8692 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             8693 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             8694 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
                             8695 ; 58   |
                             8696 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             8697 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             8698 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             8699 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             8700 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             8701 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             8702 ; 65   |
                             8703 ; 66   |typedef union               
                             8704 ; 67   |{
                             8705 ; 68   |    struct {
                             8706 ; 69   |        int PWM0_EN                    :1;
                             8707 ; 70   |        int PWM1_EN                    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8708 ; 71   |        int PWM2_EN                    :1;
                             8709 ; 72   |        int PWM3_EN                    :1;
                             8710 ; 73   |        int RSVD0                      :4;
                             8711 ; 74   |        int CDIV                       :2;
                             8712 ; 75   |        int RSVD1                      :13;
                             8713 ; 76   |        int MSTR_EN                    :1;
                             8714 ; 77   |    } B;
                             8715 ; 78   |    int I;
                             8716 ; 79   |} pwmcsr_type;
                             8717 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             8718 ; 81   |
                             8719 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             8720 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             8721 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             8722 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             8723 ; 86   |
                             8724 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             8725 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             8726 ; 89   |
                             8727 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                             8728 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             8729 ; 92   |
                             8730 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             8731 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             8732 ; 95   |
                             8733 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             8734 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             8735 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             8736 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             8737 ; 100  |
                             8738 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             8739 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             8740 ; 103  |
                             8741 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             8742 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             8743 ; 106  |
                             8744 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             8745 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             8746 ; 109  |
                             8747 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             8748 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             8749 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             8750 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             8751 ; 114  |
                             8752 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             8753 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             8754 ; 117  |
                             8755 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             8756 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             8757 ; 120  |
                             8758 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             8759 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             8760 ; 123  |
                             8761 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8762 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8763 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             8764 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             8765 ; 128  |
                             8766 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             8767 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             8768 ; 131  |
                             8769 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             8770 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             8771 ; 134  |
                             8772 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             8773 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             8774 ; 137  |
                             8775 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             8776 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             8777 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             8778 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             8779 ; 142  |
                             8780 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             8781 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             8782 ; 145  |
                             8783 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             8784 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             8785 ; 148  |
                             8786 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             8787 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             8788 ; 151  |
                             8789 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             8790 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             8791 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             8792 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             8793 ; 156  |
                             8794 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             8795 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             8796 ; 159  |
                             8797 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             8798 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
                             8799 ; 162  |
                             8800 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             8801 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             8802 ; 165  |
                             8803 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             8804 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             8805 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             8806 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             8807 ; 170  |
                             8808 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             8809 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             8810 ; 173  |
                             8811 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             8812 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             8813 ; 176  |
                             8814 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             8815 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             8816 ; 179  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8817 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             8818 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             8819 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             8820 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             8821 ; 184  |
                             8822 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             8823 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             8824 ; 187  |
                             8825 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             8826 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             8827 ; 190  |
                             8828 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             8829 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             8830 ; 193  |
                             8831 ; 194  |typedef union               
                             8832 ; 195  |{
                             8833 ; 196  |    struct {
                             8834 ; 197  |       int ACTIVE                    :12;
                             8835 ; 198  |       int INACTIVE                  :12;
                             8836 ; 199  |    } B;
                             8837 ; 200  |    int I;
                             8838 ; 201  |} pwmchan_type;
                             8839 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             8840 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             8841 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             8842 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             8843 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             8844 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                             8845 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             8846 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             8847 ; 210  |
                             8848 ; 211  |#endif
                             8849 ; 212  |
                             8850 ; 213  |
                             8851 ; 214  |
                             8852 ; 215  |
                             8853 
                             8855 
                             8856 ; 28   |#include "regsrevision.h"
                             8857 
                             8859 
                             8860 ; 1    |#if !(defined(__HW_REVR))
                             8861 ; 2    |#define __HW_REVR 1
                             8862 ; 3    |
                             8863 ; 4    |
                             8864 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             8865 ; 6    |
                             8866 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             8867 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             8868 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             8869 ; 10   |
                             8870 ; 11   |#define HW_REVR_RMN_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8871 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             8872 ; 13   |
                             8873 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             8874 ; 15   |
                             8875 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             8876 ; 17   |
                             8877 ; 18   |
                             8878 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             8879 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             8880 ; 21   |//  June15 2004: C struct updated to be correct: 
                             8881 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             8882 ; 23   |typedef union               
                             8883 ; 24   |{
                             8884 ; 25   |    struct {
                             8885 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             8886 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             8887 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             8888 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             8889 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             8890 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             8891 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             8892 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             8893 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             8894 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             8895 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             8896 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             8897 ; 38   |    } B;
                             8898 ; 39   |
                             8899 ; 40   |    int I;
                             8900 ; 41   |
                             8901 ; 42   |} revr_type;
                             8902 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             8903 ; 44   |
                             8904 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             8905 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             8906 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             8907 ; 48   |
                             8908 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             8909 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             8910 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             8911 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             8912 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             8913 ; 54   |
                             8914 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             8915 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             8916 ; 57   |
                             8917 ; 58   |#endif //!@def(__HW_REVR)
                             8918 ; 59   |
                             8919 
                             8921 
                             8922 ; 29   |#include "regsrtc.h"
                             8923 
                             8925 
                             8926 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8927 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8928 ; 3    |// Filename: regsrtc.inc
                             8929 ; 4    |// Description: Register definitions for RTC interface
                             8930 ; 5    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8931 ; 6    |// The following naming conventions are followed in this file.
                             8932 ; 7    |// All registers are named using the format...
                             8933 ; 8    |//     HW_<module>_<regname>
                             8934 ; 9    |// where <module> is the module name which can be any of the following...
                             8935 ; 10   |//     USB20
                             8936 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8937 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8938 ; 13   |// that module)
                             8939 ; 14   |// <regname> is the specific register within that module
                             8940 ; 15   |// We also define the following...
                             8941 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8942 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8943 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8944 ; 19   |// which does something else, and
                             8945 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8946 ; 21   |// which does something else.
                             8947 ; 22   |// Other rules
                             8948 ; 23   |//     All caps
                             8949 ; 24   |//     Numeric identifiers start at 0
                             8950 ; 25   |#if !(defined(regsrtcinc))
                             8951 ; 26   |#define regsrtcinc 1
                             8952 ; 27   |
                             8953 ; 28   |#include "types.h"
                             8954 
                             8956 
                             8957 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8958 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8959 ; 3    |//
                             8960 ; 4    |// Filename: types.h
                             8961 ; 5    |// Description: Standard data types
                             8962 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8963 ; 7    |
                             8964 ; 8    |#ifndef _TYPES_H
                             8965 ; 9    |#define _TYPES_H
                             8966 ; 10   |
                             8967 ; 11   |// TODO:  move this outta here!
                             8968 ; 12   |#if !defined(NOERROR)
                             8969 ; 13   |#define NOERROR 0
                             8970 ; 14   |#define SUCCESS 0
                             8971 ; 15   |#endif 
                             8972 ; 16   |#if !defined(SUCCESS)
                             8973 ; 17   |#define SUCCESS  0
                             8974 ; 18   |#endif
                             8975 ; 19   |#if !defined(ERROR)
                             8976 ; 20   |#define ERROR   -1
                             8977 ; 21   |#endif
                             8978 ; 22   |#if !defined(FALSE)
                             8979 ; 23   |#define FALSE 0
                             8980 ; 24   |#endif
                             8981 ; 25   |#if !defined(TRUE)
                             8982 ; 26   |#define TRUE  1
                             8983 ; 27   |#endif
                             8984 ; 28   |
                             8985 ; 29   |#if !defined(NULL)
                             8986 ; 30   |#define NULL 0
                             8987 ; 31   |#endif
                             8988 ; 32   |
                             8989 ; 33   |#define MAX_INT     0x7FFFFF
                             8990 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8991 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8992 ; 36   |#define MAX_ULONG   (-1) 
                             8993 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8994 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8995 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8996 ; 40   |
                             8997 ; 41   |
                             8998 ; 42   |#define BYTE    unsigned char       // btVarName
                             8999 ; 43   |#define CHAR    signed char         // cVarName
                             9000 ; 44   |#define USHORT  unsigned short      // usVarName
                             9001 ; 45   |#define SHORT   unsigned short      // sVarName
                             9002 ; 46   |#define WORD    unsigned int        // wVarName
                             9003 ; 47   |#define INT     signed int          // iVarName
                             9004 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9005 ; 49   |#define LONG    signed long         // lVarName
                             9006 ; 50   |#define BOOL    unsigned int        // bVarName
                             9007 ; 51   |#define FRACT   _fract              // frVarName
                             9008 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9009 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9010 ; 54   |#define FLOAT   float               // fVarName
                             9011 ; 55   |#define DBL     double              // dVarName
                             9012 ; 56   |#define ENUM    enum                // eVarName
                             9013 ; 57   |#define CMX     _complex            // cmxVarName
                             9014 ; 58   |typedef WORD UCS3;                   // 
                             9015 ; 59   |
                             9016 ; 60   |#define UINT16  unsigned short
                             9017 ; 61   |#define UINT8   unsigned char   
                             9018 ; 62   |#define UINT32  unsigned long
                             9019 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9020 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9021 ; 65   |#define WCHAR   UINT16
                             9022 ; 66   |
                             9023 ; 67   |//UINT128 is 16 bytes or 6 words
                             9024 ; 68   |typedef struct UINT128_3500 {   
                             9025 ; 69   |    int val[6];     
                             9026 ; 70   |} UINT128_3500;
                             9027 ; 71   |
                             9028 ; 72   |#define UINT128   UINT128_3500
                             9029 ; 73   |
                             9030 ; 74   |// Little endian word packed byte strings:   
                             9031 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9032 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9033 ; 77   |// Little endian word packed byte strings:   
                             9034 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9035 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9036 ; 80   |
                             9037 ; 81   |// Declare Memory Spaces To Use When Coding
                             9038 ; 82   |// A. Sector Buffers
                             9039 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9040 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9041 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9042 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9043 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9044 ; 88   |// B. Media DDI Memory
                             9045 ; 89   |#define MEDIA_DDI_MEM _Y
                             9046 ; 90   |
                             9047 ; 91   |
                             9048 ; 92   |
                             9049 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9050 ; 94   |// Examples of circular pointers:
                             9051 ; 95   |//    INT CIRC cpiVarName
                             9052 ; 96   |//    DWORD CIRC cpdwVarName
                             9053 ; 97   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9054 ; 98   |#define RETCODE INT                 // rcVarName
                             9055 ; 99   |
                             9056 ; 100  |// generic bitfield structure
                             9057 ; 101  |struct Bitfield {
                             9058 ; 102  |    unsigned int B0  :1;
                             9059 ; 103  |    unsigned int B1  :1;
                             9060 ; 104  |    unsigned int B2  :1;
                             9061 ; 105  |    unsigned int B3  :1;
                             9062 ; 106  |    unsigned int B4  :1;
                             9063 ; 107  |    unsigned int B5  :1;
                             9064 ; 108  |    unsigned int B6  :1;
                             9065 ; 109  |    unsigned int B7  :1;
                             9066 ; 110  |    unsigned int B8  :1;
                             9067 ; 111  |    unsigned int B9  :1;
                             9068 ; 112  |    unsigned int B10 :1;
                             9069 ; 113  |    unsigned int B11 :1;
                             9070 ; 114  |    unsigned int B12 :1;
                             9071 ; 115  |    unsigned int B13 :1;
                             9072 ; 116  |    unsigned int B14 :1;
                             9073 ; 117  |    unsigned int B15 :1;
                             9074 ; 118  |    unsigned int B16 :1;
                             9075 ; 119  |    unsigned int B17 :1;
                             9076 ; 120  |    unsigned int B18 :1;
                             9077 ; 121  |    unsigned int B19 :1;
                             9078 ; 122  |    unsigned int B20 :1;
                             9079 ; 123  |    unsigned int B21 :1;
                             9080 ; 124  |    unsigned int B22 :1;
                             9081 ; 125  |    unsigned int B23 :1;
                             9082 ; 126  |};
                             9083 ; 127  |
                             9084 ; 128  |union BitInt {
                             9085 ; 129  |        struct Bitfield B;
                             9086 ; 130  |        int        I;
                             9087 ; 131  |};
                             9088 ; 132  |
                             9089 ; 133  |#define MAX_MSG_LENGTH 10
                             9090 ; 134  |struct CMessage
                             9091 ; 135  |{
                             9092 ; 136  |        unsigned int m_uLength;
                             9093 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9094 ; 138  |};
                             9095 ; 139  |
                             9096 ; 140  |typedef struct {
                             9097 ; 141  |    WORD m_wLength;
                             9098 ; 142  |    WORD m_wMessage;
                             9099 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9100 ; 144  |} Message;
                             9101 ; 145  |
                             9102 ; 146  |struct MessageQueueDescriptor
                             9103 ; 147  |{
                             9104 ; 148  |        int *m_pBase;
                             9105 ; 149  |        int m_iModulo;
                             9106 ; 150  |        int m_iSize;
                             9107 ; 151  |        int *m_pHead;
                             9108 ; 152  |        int *m_pTail;
                             9109 ; 153  |};
                             9110 ; 154  |
                             9111 ; 155  |struct ModuleEntry
                             9112 ; 156  |{
                             9113 ; 157  |    int m_iSignaledEventMask;
                             9114 ; 158  |    int m_iWaitEventMask;
                             9115 ; 159  |    int m_iResourceOfCode;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9116 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9117 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9118 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9119 ; 163  |    int m_uTimeOutHigh;
                             9120 ; 164  |    int m_uTimeOutLow;
                             9121 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9122 ; 166  |};
                             9123 ; 167  |
                             9124 ; 168  |union WaitMask{
                             9125 ; 169  |    struct B{
                             9126 ; 170  |        unsigned int m_bNone     :1;
                             9127 ; 171  |        unsigned int m_bMessage  :1;
                             9128 ; 172  |        unsigned int m_bTimer    :1;
                             9129 ; 173  |        unsigned int m_bButton   :1;
                             9130 ; 174  |    } B;
                             9131 ; 175  |    int I;
                             9132 ; 176  |} ;
                             9133 ; 177  |
                             9134 ; 178  |
                             9135 ; 179  |struct Button {
                             9136 ; 180  |        WORD wButtonEvent;
                             9137 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9138 ; 182  |};
                             9139 ; 183  |
                             9140 ; 184  |struct Message {
                             9141 ; 185  |        WORD wMsgLength;
                             9142 ; 186  |        WORD wMsgCommand;
                             9143 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9144 ; 188  |};
                             9145 ; 189  |
                             9146 ; 190  |union EventTypes {
                             9147 ; 191  |        struct CMessage msg;
                             9148 ; 192  |        struct Button Button ;
                             9149 ; 193  |        struct Message Message;
                             9150 ; 194  |};
                             9151 ; 195  |
                             9152 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9153 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9154 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9155 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9156 ; 200  |
                             9157 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9158 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9159 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9160 ; 204  |
                             9161 ; 205  |#if DEBUG
                             9162 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9163 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9164 ; 208  |#else 
                             9165 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9166 ; 210  |#define DebugBuildAssert(x)    
                             9167 ; 211  |#endif
                             9168 ; 212  |
                             9169 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9170 ; 214  |//  #pragma asm
                             9171 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9172 ; 216  |//  #pragma endasm
                             9173 ; 217  |
                             9174 ; 218  |
                             9175 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9176 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9177 ; 221  |#elif defined(COLOR_65K)
                             9178 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9179 ; 223  |#else
                             9180 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9181 ; 225  |#endif
                             9182 ; 226  |    
                             9183 ; 227  |#endif // #ifndef _TYPES_H
                             9184 
                             9186 
                             9187 ; 29   |
                             9188 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9189 ; 31   |
                             9190 ; 32   |//   RTC STMP Registers 
                             9191 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             9192 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9193 ; 35   |
                             9194 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             9195 ; 37   |
                             9196 ; 38   |
                             9197 ; 39   |
                             9198 ; 40   |
                             9199 ; 41   |
                             9200 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             9201 ; 43   |
                             9202 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             9203 ; 45   |
                             9204 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             9205 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             9206 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             9207 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             9208 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             9209 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             9210 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             9211 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             9212 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             9213 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             9214 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             9215 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             9216 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             9217 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             9218 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             9219 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             9220 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             9221 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             9222 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             9223 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             9224 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             9225 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             9226 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             9227 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             9228 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             9229 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             9230 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             9231 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             9232 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             9233 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             9234 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9235 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             9236 ; 78   |
                             9237 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             9238 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             9239 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             9240 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             9241 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             9242 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             9243 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             9244 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             9245 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             9246 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             9247 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             9248 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             9249 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             9250 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             9251 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             9252 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             9253 ; 95   |
                             9254 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             9255 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             9256 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             9257 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             9258 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             9259 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             9260 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             9261 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             9262 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             9263 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             9264 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             9265 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             9266 ; 108  |
                             9267 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             9268 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             9269 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             9270 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             9271 ; 113  |
                             9272 ; 114  |
                             9273 ; 115  |typedef union               
                             9274 ; 116  |{
                             9275 ; 117  |    struct {
                             9276 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             9277 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             9278 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             9279 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9280 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             9281 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             9282 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             9283 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             9284 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             9285 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             9286 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             9287 ; 129  |    } B;
                             9288 ; 130  |    int I;
                             9289 ; 131  |    unsigned int U;
                             9290 ; 132  |} rtc_csr_type;
                             9291 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             9292 ; 134  |
                             9293 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             9294 ; 136  |
                             9295 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             9296 ; 138  |
                             9297 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             9298 ; 140  |
                             9299 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             9300 ; 142  |
                             9301 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             9302 ; 144  |
                             9303 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             9304 ; 146  |
                             9305 ; 147  |typedef union               
                             9306 ; 148  |{
                             9307 ; 149  |    struct {
                             9308 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             9309 ; 151  |    } B;
                             9310 ; 152  |    int I;
                             9311 ; 153  |    unsigned int U;
                             9312 ; 154  |} rtc_mseconds0_type;
                             9313 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             9314 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             9315 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             9316 ; 158  |
                             9317 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             9318 ; 160  |
                             9319 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             9320 ; 162  |
                             9321 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             9322 ; 164  |
                             9323 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             9324 ; 166  |
                             9325 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             9326 ; 168  |
                             9327 ; 169  |typedef union               
                             9328 ; 170  |{
                             9329 ; 171  |    struct {
                             9330 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             9331 ; 173  |    } B;
                             9332 ; 174  |    int I;
                             9333 ; 175  |    unsigned int U;
                             9334 ; 176  |} rtc_mseconds1_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9335 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             9336 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             9337 ; 179  |
                             9338 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             9339 ; 181  |#define HW_RTC_UP_OFFSET 2
                             9340 ; 182  |
                             9341 ; 183  |
                             9342 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             9343 ; 185  |
                             9344 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             9345 ; 187  |
                             9346 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             9347 ; 189  |
                             9348 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             9349 ; 191  |
                             9350 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             9351 ; 193  |
                             9352 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             9353 ; 195  |
                             9354 ; 196  |typedef union               
                             9355 ; 197  |{
                             9356 ; 198  |    struct {
                             9357 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             9358 ; 200  |    } B;
                             9359 ; 201  |    int I;
                             9360 ; 202  |    unsigned int U;
                             9361 ; 203  |} rtc_watchdog_type;
                             9362 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             9363 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             9364 ; 206  |
                             9365 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             9366 ; 208  |
                             9367 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             9368 ; 210  |
                             9369 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             9370 ; 212  |
                             9371 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             9372 ; 214  |
                             9373 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             9374 ; 216  |
                             9375 ; 217  |typedef union               
                             9376 ; 218  |{
                             9377 ; 219  |    struct {
                             9378 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             9379 ; 221  |    } B;
                             9380 ; 222  |    int I;
                             9381 ; 223  |    unsigned int U;
                             9382 ; 224  |} rtc_alarm0_type;
                             9383 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             9384 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             9385 ; 227  |
                             9386 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             9387 ; 229  |
                             9388 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             9389 ; 231  |
                             9390 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             9391 ; 233  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9392 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             9393 ; 235  |
                             9394 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             9395 ; 237  |
                             9396 ; 238  |typedef union               
                             9397 ; 239  |{
                             9398 ; 240  |    struct {
                             9399 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             9400 ; 242  |    } B;
                             9401 ; 243  |    int I;
                             9402 ; 244  |    unsigned int U;
                             9403 ; 245  |} rtc_alarm1_type;
                             9404 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             9405 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9406 ; 248  |
                             9407 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             9408 ; 250  |
                             9409 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             9410 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             9411 ; 253  |
                             9412 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             9413 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             9414 ; 256  |
                             9415 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             9416 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             9417 ; 259  |
                             9418 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             9419 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             9420 ; 262  |
                             9421 ; 263  |typedef union               
                             9422 ; 264  |{
                             9423 ; 265  |    struct {
                             9424 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             9425 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             9426 ; 268  |    } B;
                             9427 ; 269  |    int I;
                             9428 ; 270  |    unsigned int U;
                             9429 ; 271  |} rtc_xtaldivide_type;
                             9430 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             9431 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             9432 ; 274  |
                             9433 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             9434 ; 276  |
                             9435 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             9436 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             9437 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             9438 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             9439 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             9440 ; 282  |
                             9441 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             9442 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             9443 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             9444 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             9445 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             9446 ; 288  |
                             9447 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9448 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             9449 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             9450 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             9451 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             9452 ; 294  |
                             9453 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             9454 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             9455 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             9456 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             9457 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             9458 ; 300  |
                             9459 ; 301  |typedef union               
                             9460 ; 302  |{
                             9461 ; 303  |   struct {
                             9462 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             9463 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             9464 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             9465 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             9466 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             9467 ; 309  |   } B;
                             9468 ; 310  |    int I;
                             9469 ; 311  |    unsigned int U;
                             9470 ; 312  |} rtc_PERSISTENT0_type;
                             9471 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             9472 ; 314  |
                             9473 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             9474 ; 316  |
                             9475 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             9476 ; 318  |
                             9477 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             9478 ; 320  |
                             9479 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             9480 ; 322  |
                             9481 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             9482 ; 324  |
                             9483 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             9484 ; 326  |
                             9485 ; 327  |
                             9486 ; 328  |typedef union               
                             9487 ; 329  |{
                             9488 ; 330  |    struct {
                             9489 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             9490 ; 332  |    } B;
                             9491 ; 333  |    int I;
                             9492 ; 334  |    unsigned int U;
                             9493 ; 335  |} rtc_PERSISTENT1_type;
                             9494 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             9495 ; 337  |
                             9496 ; 338  |
                             9497 ; 339  |#endif
                             9498 ; 340  |
                             9499 ; 341  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9500 ; 342  |
                             9501 ; 343  |
                             9502 ; 344  |
                             9503 ; 345  |
                             9504 ; 346  |
                             9505 ; 347  |
                             9506 ; 348  |
                             9507 ; 349  |
                             9508 ; 350  |
                             9509 ; 351  |
                             9510 ; 352  |
                             9511 ; 353  |
                             9512 
                             9514 
                             9515 ; 30   |#include "regsspare.h"
                             9516 
                             9518 
                             9519 ; 1    |#if !(defined(RESGSSPARE_INC))
                             9520 ; 2    |#define RESGSSPARE_INC 1
                             9521 ; 3    |
                             9522 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             9523 ; 5    |
                             9524 ; 6    |
                             9525 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             9526 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             9527 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             9528 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             9529 ; 11   |
                             9530 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             9531 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             9532 ; 14   |
                             9533 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             9534 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             9535 ; 17   |
                             9536 ; 18   |
                             9537 ; 19   |
                             9538 ; 20   |typedef union               
                             9539 ; 21   |{
                             9540 ; 22   |    struct {
                             9541 ; 23   |        int      I2SS       :1;     
                             9542 ; 24   |        int      USBSELECT  :1;     
                             9543 ; 25   |        unsigned            :6;
                             9544 ; 26   |        int      USBPLUGIN  :1;     
                             9545 ; 27   |        int      PSWITCH    :1;     
                             9546 ; 28   |    } B;
                             9547 ; 29   |
                             9548 ; 30   |    int I;
                             9549 ; 31   |
                             9550 ; 32   |} spare_type;
                             9551 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             9552 ; 34   |
                             9553 ; 35   |
                             9554 ; 36   |
                             9555 ; 37   |#endif
                             9556 
                             9558 
                             9559 ; 31   |#include "regsspi.h"
                             9560 
                             9562 
                             9563 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9564 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             9565 ; 3    |//;; Filename    : regsspi.inc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9566 ; 4    |//;; Description : Register definitions for SPI interface
                             9567 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9568 ; 6    |
                             9569 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             9570 ; 8    |// The following naming conventions are followed in this file.
                             9571 ; 9    |// All registers are named using the format...
                             9572 ; 10   |//     HW_<module>_<regname>
                             9573 ; 11   |// where <module> is the module name which can be any of the following...
                             9574 ; 12   |//     USB20
                             9575 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             9576 ; 14   |// module name includes a number starting from 0 for the first instance of
                             9577 ; 15   |// that module)
                             9578 ; 16   |// <regname> is the specific register within that module
                             9579 ; 17   |// We also define the following...
                             9580 ; 18   |//     HW_<module>_<regname>_BITPOS
                             9581 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9582 ; 20   |//     HW_<module>_<regname>_SETMASK
                             9583 ; 21   |// which does something else, and
                             9584 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             9585 ; 23   |// which does something else.
                             9586 ; 24   |// Other rules
                             9587 ; 25   |//     All caps
                             9588 ; 26   |//     Numeric identifiers start at 0
                             9589 ; 27   |#if !(defined(regsspiinc))
                             9590 ; 28   |#define regsspiinc 1
                             9591 ; 29   |
                             9592 ; 30   |#include "types.h"
                             9593 
                             9595 
                             9596 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9597 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9598 ; 3    |//
                             9599 ; 4    |// Filename: types.h
                             9600 ; 5    |// Description: Standard data types
                             9601 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9602 ; 7    |
                             9603 ; 8    |#ifndef _TYPES_H
                             9604 ; 9    |#define _TYPES_H
                             9605 ; 10   |
                             9606 ; 11   |// TODO:  move this outta here!
                             9607 ; 12   |#if !defined(NOERROR)
                             9608 ; 13   |#define NOERROR 0
                             9609 ; 14   |#define SUCCESS 0
                             9610 ; 15   |#endif 
                             9611 ; 16   |#if !defined(SUCCESS)
                             9612 ; 17   |#define SUCCESS  0
                             9613 ; 18   |#endif
                             9614 ; 19   |#if !defined(ERROR)
                             9615 ; 20   |#define ERROR   -1
                             9616 ; 21   |#endif
                             9617 ; 22   |#if !defined(FALSE)
                             9618 ; 23   |#define FALSE 0
                             9619 ; 24   |#endif
                             9620 ; 25   |#if !defined(TRUE)
                             9621 ; 26   |#define TRUE  1
                             9622 ; 27   |#endif
                             9623 ; 28   |
                             9624 ; 29   |#if !defined(NULL)
                             9625 ; 30   |#define NULL 0
                             9626 ; 31   |#endif
                             9627 ; 32   |
                             9628 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9629 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9630 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9631 ; 36   |#define MAX_ULONG   (-1) 
                             9632 ; 37   |
                             9633 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9634 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9635 ; 40   |
                             9636 ; 41   |
                             9637 ; 42   |#define BYTE    unsigned char       // btVarName
                             9638 ; 43   |#define CHAR    signed char         // cVarName
                             9639 ; 44   |#define USHORT  unsigned short      // usVarName
                             9640 ; 45   |#define SHORT   unsigned short      // sVarName
                             9641 ; 46   |#define WORD    unsigned int        // wVarName
                             9642 ; 47   |#define INT     signed int          // iVarName
                             9643 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9644 ; 49   |#define LONG    signed long         // lVarName
                             9645 ; 50   |#define BOOL    unsigned int        // bVarName
                             9646 ; 51   |#define FRACT   _fract              // frVarName
                             9647 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9648 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9649 ; 54   |#define FLOAT   float               // fVarName
                             9650 ; 55   |#define DBL     double              // dVarName
                             9651 ; 56   |#define ENUM    enum                // eVarName
                             9652 ; 57   |#define CMX     _complex            // cmxVarName
                             9653 ; 58   |typedef WORD UCS3;                   // 
                             9654 ; 59   |
                             9655 ; 60   |#define UINT16  unsigned short
                             9656 ; 61   |#define UINT8   unsigned char   
                             9657 ; 62   |#define UINT32  unsigned long
                             9658 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9659 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9660 ; 65   |#define WCHAR   UINT16
                             9661 ; 66   |
                             9662 ; 67   |//UINT128 is 16 bytes or 6 words
                             9663 ; 68   |typedef struct UINT128_3500 {   
                             9664 ; 69   |    int val[6];     
                             9665 ; 70   |} UINT128_3500;
                             9666 ; 71   |
                             9667 ; 72   |#define UINT128   UINT128_3500
                             9668 ; 73   |
                             9669 ; 74   |// Little endian word packed byte strings:   
                             9670 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9671 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9672 ; 77   |// Little endian word packed byte strings:   
                             9673 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9674 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9675 ; 80   |
                             9676 ; 81   |// Declare Memory Spaces To Use When Coding
                             9677 ; 82   |// A. Sector Buffers
                             9678 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9679 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9680 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9681 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9682 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9683 ; 88   |// B. Media DDI Memory
                             9684 ; 89   |#define MEDIA_DDI_MEM _Y
                             9685 ; 90   |
                             9686 ; 91   |
                             9687 ; 92   |
                             9688 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9689 ; 94   |// Examples of circular pointers:
                             9690 ; 95   |//    INT CIRC cpiVarName
                             9691 ; 96   |//    DWORD CIRC cpdwVarName
                             9692 ; 97   |
                             9693 ; 98   |#define RETCODE INT                 // rcVarName
                             9694 ; 99   |
                             9695 ; 100  |// generic bitfield structure
                             9696 ; 101  |struct Bitfield {
                             9697 ; 102  |    unsigned int B0  :1;
                             9698 ; 103  |    unsigned int B1  :1;
                             9699 ; 104  |    unsigned int B2  :1;
                             9700 ; 105  |    unsigned int B3  :1;
                             9701 ; 106  |    unsigned int B4  :1;
                             9702 ; 107  |    unsigned int B5  :1;
                             9703 ; 108  |    unsigned int B6  :1;
                             9704 ; 109  |    unsigned int B7  :1;
                             9705 ; 110  |    unsigned int B8  :1;
                             9706 ; 111  |    unsigned int B9  :1;
                             9707 ; 112  |    unsigned int B10 :1;
                             9708 ; 113  |    unsigned int B11 :1;
                             9709 ; 114  |    unsigned int B12 :1;
                             9710 ; 115  |    unsigned int B13 :1;
                             9711 ; 116  |    unsigned int B14 :1;
                             9712 ; 117  |    unsigned int B15 :1;
                             9713 ; 118  |    unsigned int B16 :1;
                             9714 ; 119  |    unsigned int B17 :1;
                             9715 ; 120  |    unsigned int B18 :1;
                             9716 ; 121  |    unsigned int B19 :1;
                             9717 ; 122  |    unsigned int B20 :1;
                             9718 ; 123  |    unsigned int B21 :1;
                             9719 ; 124  |    unsigned int B22 :1;
                             9720 ; 125  |    unsigned int B23 :1;
                             9721 ; 126  |};
                             9722 ; 127  |
                             9723 ; 128  |union BitInt {
                             9724 ; 129  |        struct Bitfield B;
                             9725 ; 130  |        int        I;
                             9726 ; 131  |};
                             9727 ; 132  |
                             9728 ; 133  |#define MAX_MSG_LENGTH 10
                             9729 ; 134  |struct CMessage
                             9730 ; 135  |{
                             9731 ; 136  |        unsigned int m_uLength;
                             9732 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9733 ; 138  |};
                             9734 ; 139  |
                             9735 ; 140  |typedef struct {
                             9736 ; 141  |    WORD m_wLength;
                             9737 ; 142  |    WORD m_wMessage;
                             9738 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9739 ; 144  |} Message;
                             9740 ; 145  |
                             9741 ; 146  |struct MessageQueueDescriptor
                             9742 ; 147  |{
                             9743 ; 148  |        int *m_pBase;
                             9744 ; 149  |        int m_iModulo;
                             9745 ; 150  |        int m_iSize;
                             9746 ; 151  |        int *m_pHead;
                             9747 ; 152  |        int *m_pTail;
                             9748 ; 153  |};
                             9749 ; 154  |
                             9750 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9751 ; 156  |{
                             9752 ; 157  |    int m_iSignaledEventMask;
                             9753 ; 158  |    int m_iWaitEventMask;
                             9754 ; 159  |    int m_iResourceOfCode;
                             9755 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9756 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9757 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9758 ; 163  |    int m_uTimeOutHigh;
                             9759 ; 164  |    int m_uTimeOutLow;
                             9760 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9761 ; 166  |};
                             9762 ; 167  |
                             9763 ; 168  |union WaitMask{
                             9764 ; 169  |    struct B{
                             9765 ; 170  |        unsigned int m_bNone     :1;
                             9766 ; 171  |        unsigned int m_bMessage  :1;
                             9767 ; 172  |        unsigned int m_bTimer    :1;
                             9768 ; 173  |        unsigned int m_bButton   :1;
                             9769 ; 174  |    } B;
                             9770 ; 175  |    int I;
                             9771 ; 176  |} ;
                             9772 ; 177  |
                             9773 ; 178  |
                             9774 ; 179  |struct Button {
                             9775 ; 180  |        WORD wButtonEvent;
                             9776 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9777 ; 182  |};
                             9778 ; 183  |
                             9779 ; 184  |struct Message {
                             9780 ; 185  |        WORD wMsgLength;
                             9781 ; 186  |        WORD wMsgCommand;
                             9782 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9783 ; 188  |};
                             9784 ; 189  |
                             9785 ; 190  |union EventTypes {
                             9786 ; 191  |        struct CMessage msg;
                             9787 ; 192  |        struct Button Button ;
                             9788 ; 193  |        struct Message Message;
                             9789 ; 194  |};
                             9790 ; 195  |
                             9791 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9792 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9793 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9794 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9795 ; 200  |
                             9796 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9797 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9798 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9799 ; 204  |
                             9800 ; 205  |#if DEBUG
                             9801 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9802 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9803 ; 208  |#else 
                             9804 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9805 ; 210  |#define DebugBuildAssert(x)    
                             9806 ; 211  |#endif
                             9807 ; 212  |
                             9808 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9809 ; 214  |//  #pragma asm
                             9810 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9811 ; 216  |//  #pragma endasm
                             9812 ; 217  |
                             9813 ; 218  |
                             9814 ; 219  |#ifdef COLOR_262K
                             9815 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9816 ; 221  |#elif defined(COLOR_65K)
                             9817 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9818 ; 223  |#else
                             9819 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9820 ; 225  |#endif
                             9821 ; 226  |    
                             9822 ; 227  |#endif // #ifndef _TYPES_H
                             9823 
                             9825 
                             9826 ; 31   |
                             9827 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9828 ; 33   |
                             9829 ; 34   |//   SPI STMP3500 Registers 
                             9830 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             9831 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9832 ; 37   |
                             9833 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             9834 ; 39   |
                             9835 ; 40   |
                             9836 ; 41   |
                             9837 ; 42   |// /////////////////////////////////////////////
                             9838 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             9839 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             9840 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             9841 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             9842 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             9843 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             9844 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             9845 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             9846 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             9847 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             9848 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             9849 ; 54   |
                             9850 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             9851 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             9852 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             9853 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             9854 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             9855 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             9856 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             9857 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             9858 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             9859 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             9860 ; 65   |
                             9861 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             9862 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             9863 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             9864 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             9865 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             9866 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             9867 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             9868 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             9869 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             9870 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9871 ; 76   |
                             9872 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             9873 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             9874 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             9875 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             9876 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             9877 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             9878 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             9879 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             9880 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             9881 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             9882 ; 87   |
                             9883 ; 88   |typedef union               
                             9884 ; 89   |{
                             9885 ; 90   |    struct {
                             9886 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             9887 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             9888 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             9889 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             9890 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             9891 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             9892 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             9893 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             9894 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             9895 ; 100  |    } B;
                             9896 ; 101  |
                             9897 ; 102  |    int I;
                             9898 ; 103  |    unsigned int U;
                             9899 ; 104  |} spcsr_type;
                             9900 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             9901 ; 106  |
                             9902 ; 107  |// /////////////////////////////////////////////
                             9903 ; 108  |// //  SPI Data Register Bit Definitions
                             9904 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             9905 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             9906 ; 111  |
                             9907 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             9908 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             9909 ; 114  |
                             9910 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             9911 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             9912 ; 117  |
                             9913 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             9914 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             9915 ; 120  |
                             9916 ; 121  |typedef union               
                             9917 ; 122  |{
                             9918 ; 123  |    struct {
                             9919 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             9920 ; 125  |    } B;
                             9921 ; 126  |
                             9922 ; 127  |    int I;
                             9923 ; 128  |    unsigned int U;
                             9924 ; 129  |} spdr_type;
                             9925 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             9926 ; 131  |
                             9927 ; 132  |
                             9928 ; 133  |#endif
                             9929 ; 134  |
                             9930 ; 135  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9931 
                             9933 
                             9934 ; 32   |#include "regsswizzle.h"
                             9935 
                             9937 
                             9938 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9939 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             9940 ; 3    |//;; Filename    : regsswizzle.inc
                             9941 ; 4    |//;; Description : Register definitions for Swizzle interface
                             9942 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9943 ; 6    |
                             9944 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             9945 ; 8    |// The following naming conventions are followed in this file.
                             9946 ; 9    |// All registers are named using the format...
                             9947 ; 10   |//     HW_<module>_<regname>
                             9948 ; 11   |// where <module> is the module name which can be any of the following...
                             9949 ; 12   |//     USB20
                             9950 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             9951 ; 14   |// module name includes a number starting from 0 for the first instance of
                             9952 ; 15   |// that module)
                             9953 ; 16   |// <regname> is the specific register within that module
                             9954 ; 17   |// We also define the following...
                             9955 ; 18   |//     HW_<module>_<regname>_BITPOS
                             9956 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9957 ; 20   |//     HW_<module>_<regname>_SETMASK
                             9958 ; 21   |// which does something else, and
                             9959 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             9960 ; 23   |// which does something else.
                             9961 ; 24   |// Other rules
                             9962 ; 25   |//     All caps
                             9963 ; 26   |//     Numeric identifiers start at 0
                             9964 ; 27   |#if !(defined(regsswizzleinc))
                             9965 ; 28   |#define regsswizzleinc 1
                             9966 ; 29   |
                             9967 ; 30   |#include "types.h"
                             9968 
                             9970 
                             9971 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9972 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9973 ; 3    |//
                             9974 ; 4    |// Filename: types.h
                             9975 ; 5    |// Description: Standard data types
                             9976 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9977 ; 7    |
                             9978 ; 8    |#ifndef _TYPES_H
                             9979 ; 9    |#define _TYPES_H
                             9980 ; 10   |
                             9981 ; 11   |// TODO:  move this outta here!
                             9982 ; 12   |#if !defined(NOERROR)
                             9983 ; 13   |#define NOERROR 0
                             9984 ; 14   |#define SUCCESS 0
                             9985 ; 15   |#endif 
                             9986 ; 16   |#if !defined(SUCCESS)
                             9987 ; 17   |#define SUCCESS  0
                             9988 ; 18   |#endif
                             9989 ; 19   |#if !defined(ERROR)
                             9990 ; 20   |#define ERROR   -1
                             9991 ; 21   |#endif
                             9992 ; 22   |#if !defined(FALSE)
                             9993 ; 23   |#define FALSE 0
                             9994 ; 24   |#endif
                             9995 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9996 ; 26   |#define TRUE  1
                             9997 ; 27   |#endif
                             9998 ; 28   |
                             9999 ; 29   |#if !defined(NULL)
                            10000 ; 30   |#define NULL 0
                            10001 ; 31   |#endif
                            10002 ; 32   |
                            10003 ; 33   |#define MAX_INT     0x7FFFFF
                            10004 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10005 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10006 ; 36   |#define MAX_ULONG   (-1) 
                            10007 ; 37   |
                            10008 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10009 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10010 ; 40   |
                            10011 ; 41   |
                            10012 ; 42   |#define BYTE    unsigned char       // btVarName
                            10013 ; 43   |#define CHAR    signed char         // cVarName
                            10014 ; 44   |#define USHORT  unsigned short      // usVarName
                            10015 ; 45   |#define SHORT   unsigned short      // sVarName
                            10016 ; 46   |#define WORD    unsigned int        // wVarName
                            10017 ; 47   |#define INT     signed int          // iVarName
                            10018 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10019 ; 49   |#define LONG    signed long         // lVarName
                            10020 ; 50   |#define BOOL    unsigned int        // bVarName
                            10021 ; 51   |#define FRACT   _fract              // frVarName
                            10022 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10023 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10024 ; 54   |#define FLOAT   float               // fVarName
                            10025 ; 55   |#define DBL     double              // dVarName
                            10026 ; 56   |#define ENUM    enum                // eVarName
                            10027 ; 57   |#define CMX     _complex            // cmxVarName
                            10028 ; 58   |typedef WORD UCS3;                   // 
                            10029 ; 59   |
                            10030 ; 60   |#define UINT16  unsigned short
                            10031 ; 61   |#define UINT8   unsigned char   
                            10032 ; 62   |#define UINT32  unsigned long
                            10033 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10034 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10035 ; 65   |#define WCHAR   UINT16
                            10036 ; 66   |
                            10037 ; 67   |//UINT128 is 16 bytes or 6 words
                            10038 ; 68   |typedef struct UINT128_3500 {   
                            10039 ; 69   |    int val[6];     
                            10040 ; 70   |} UINT128_3500;
                            10041 ; 71   |
                            10042 ; 72   |#define UINT128   UINT128_3500
                            10043 ; 73   |
                            10044 ; 74   |// Little endian word packed byte strings:   
                            10045 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10046 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10047 ; 77   |// Little endian word packed byte strings:   
                            10048 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10049 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10050 ; 80   |
                            10051 ; 81   |// Declare Memory Spaces To Use When Coding
                            10052 ; 82   |// A. Sector Buffers
                            10053 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10054 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10055 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10056 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10057 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10058 ; 88   |// B. Media DDI Memory
                            10059 ; 89   |#define MEDIA_DDI_MEM _Y
                            10060 ; 90   |
                            10061 ; 91   |
                            10062 ; 92   |
                            10063 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10064 ; 94   |// Examples of circular pointers:
                            10065 ; 95   |//    INT CIRC cpiVarName
                            10066 ; 96   |//    DWORD CIRC cpdwVarName
                            10067 ; 97   |
                            10068 ; 98   |#define RETCODE INT                 // rcVarName
                            10069 ; 99   |
                            10070 ; 100  |// generic bitfield structure
                            10071 ; 101  |struct Bitfield {
                            10072 ; 102  |    unsigned int B0  :1;
                            10073 ; 103  |    unsigned int B1  :1;
                            10074 ; 104  |    unsigned int B2  :1;
                            10075 ; 105  |    unsigned int B3  :1;
                            10076 ; 106  |    unsigned int B4  :1;
                            10077 ; 107  |    unsigned int B5  :1;
                            10078 ; 108  |    unsigned int B6  :1;
                            10079 ; 109  |    unsigned int B7  :1;
                            10080 ; 110  |    unsigned int B8  :1;
                            10081 ; 111  |    unsigned int B9  :1;
                            10082 ; 112  |    unsigned int B10 :1;
                            10083 ; 113  |    unsigned int B11 :1;
                            10084 ; 114  |    unsigned int B12 :1;
                            10085 ; 115  |    unsigned int B13 :1;
                            10086 ; 116  |    unsigned int B14 :1;
                            10087 ; 117  |    unsigned int B15 :1;
                            10088 ; 118  |    unsigned int B16 :1;
                            10089 ; 119  |    unsigned int B17 :1;
                            10090 ; 120  |    unsigned int B18 :1;
                            10091 ; 121  |    unsigned int B19 :1;
                            10092 ; 122  |    unsigned int B20 :1;
                            10093 ; 123  |    unsigned int B21 :1;
                            10094 ; 124  |    unsigned int B22 :1;
                            10095 ; 125  |    unsigned int B23 :1;
                            10096 ; 126  |};
                            10097 ; 127  |
                            10098 ; 128  |union BitInt {
                            10099 ; 129  |        struct Bitfield B;
                            10100 ; 130  |        int        I;
                            10101 ; 131  |};
                            10102 ; 132  |
                            10103 ; 133  |#define MAX_MSG_LENGTH 10
                            10104 ; 134  |struct CMessage
                            10105 ; 135  |{
                            10106 ; 136  |        unsigned int m_uLength;
                            10107 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10108 ; 138  |};
                            10109 ; 139  |
                            10110 ; 140  |typedef struct {
                            10111 ; 141  |    WORD m_wLength;
                            10112 ; 142  |    WORD m_wMessage;
                            10113 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10114 ; 144  |} Message;
                            10115 ; 145  |
                            10116 ; 146  |struct MessageQueueDescriptor
                            10117 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10118 ; 148  |        int *m_pBase;
                            10119 ; 149  |        int m_iModulo;
                            10120 ; 150  |        int m_iSize;
                            10121 ; 151  |        int *m_pHead;
                            10122 ; 152  |        int *m_pTail;
                            10123 ; 153  |};
                            10124 ; 154  |
                            10125 ; 155  |struct ModuleEntry
                            10126 ; 156  |{
                            10127 ; 157  |    int m_iSignaledEventMask;
                            10128 ; 158  |    int m_iWaitEventMask;
                            10129 ; 159  |    int m_iResourceOfCode;
                            10130 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10131 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10132 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10133 ; 163  |    int m_uTimeOutHigh;
                            10134 ; 164  |    int m_uTimeOutLow;
                            10135 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10136 ; 166  |};
                            10137 ; 167  |
                            10138 ; 168  |union WaitMask{
                            10139 ; 169  |    struct B{
                            10140 ; 170  |        unsigned int m_bNone     :1;
                            10141 ; 171  |        unsigned int m_bMessage  :1;
                            10142 ; 172  |        unsigned int m_bTimer    :1;
                            10143 ; 173  |        unsigned int m_bButton   :1;
                            10144 ; 174  |    } B;
                            10145 ; 175  |    int I;
                            10146 ; 176  |} ;
                            10147 ; 177  |
                            10148 ; 178  |
                            10149 ; 179  |struct Button {
                            10150 ; 180  |        WORD wButtonEvent;
                            10151 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10152 ; 182  |};
                            10153 ; 183  |
                            10154 ; 184  |struct Message {
                            10155 ; 185  |        WORD wMsgLength;
                            10156 ; 186  |        WORD wMsgCommand;
                            10157 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10158 ; 188  |};
                            10159 ; 189  |
                            10160 ; 190  |union EventTypes {
                            10161 ; 191  |        struct CMessage msg;
                            10162 ; 192  |        struct Button Button ;
                            10163 ; 193  |        struct Message Message;
                            10164 ; 194  |};
                            10165 ; 195  |
                            10166 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10167 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10168 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10169 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10170 ; 200  |
                            10171 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10172 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10173 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10174 ; 204  |
                            10175 ; 205  |#if DEBUG
                            10176 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10177 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10178 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10179 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10180 ; 210  |#define DebugBuildAssert(x)    
                            10181 ; 211  |#endif
                            10182 ; 212  |
                            10183 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10184 ; 214  |//  #pragma asm
                            10185 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10186 ; 216  |//  #pragma endasm
                            10187 ; 217  |
                            10188 ; 218  |
                            10189 ; 219  |#ifdef COLOR_262K
                            10190 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10191 ; 221  |#elif defined(COLOR_65K)
                            10192 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10193 ; 223  |#else
                            10194 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10195 ; 225  |#endif
                            10196 ; 226  |    
                            10197 ; 227  |#endif // #ifndef _TYPES_H
                            10198 
                            10200 
                            10201 ; 31   |
                            10202 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10203 ; 33   |
                            10204 ; 34   |//   SWIZZLE STMP3500 Registers 
                            10205 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                            10206 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10207 ; 37   |
                            10208 ; 38   |
                            10209 ; 39   |
                            10210 ; 40   |
                            10211 ; 41   |
                            10212 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                            10213 ; 43   |
                            10214 ; 44   |
                            10215 ; 45   |
                            10216 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                            10217 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                            10218 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                            10219 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                            10220 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                            10221 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                            10222 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                            10223 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                            10224 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                            10225 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                            10226 ; 56   |
                            10227 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                            10228 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                            10229 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                            10230 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                            10231 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                            10232 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                            10233 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                            10234 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                            10235 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                            10236 ; 66   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10237 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                            10238 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                            10239 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                            10240 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                            10241 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                            10242 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                            10243 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                            10244 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                            10245 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                            10246 ; 76   |
                            10247 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                            10248 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                            10249 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                            10250 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                            10251 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                            10252 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                            10253 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                            10254 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                            10255 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                            10256 ; 86   |
                            10257 ; 87   |////////////////////////////////////////////////////////////////////////////////
                            10258 ; 88   |//  Bit Manipulation Unit Registers
                            10259 ; 89   |////////////////////////////////////////////////////////////////////////////////
                            10260 ; 90   |typedef union
                            10261 ; 91   |{
                            10262 ; 92   |    struct
                            10263 ; 93   |    {
                            10264 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                            10265 ; 95   |    int LA      :1;     /* Left Align Data                          */
                            10266 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                            10267 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                            10268 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                            10269 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                            10270 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                            10271 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                            10272 ; 102  |    } B;
                            10273 ; 103  |    int I;
                            10274 ; 104  |    unsigned U;
                            10275 ; 105  |} swizzlecsr1_type;
                            10276 ; 106  |////////////////////////////////////////////////////////////////////////////////
                            10277 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
                            10278 ; 108  |
                            10279 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                            10280 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                            10281 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                            10282 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                            10283 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                            10284 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                            10285 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                            10286 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                            10287 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                            10288 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10289 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                            10290 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                            10291 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                            10292 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                            10293 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                            10294 ; 124  |
                            10295 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                            10296 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                            10297 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                            10298 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                            10299 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                            10300 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                            10301 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                            10302 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                            10303 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                            10304 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                            10305 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                            10306 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                            10307 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                            10308 ; 138  |
                            10309 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                            10310 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                            10311 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                            10312 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                            10313 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                            10314 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                            10315 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                            10316 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                            10317 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                            10318 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                            10319 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
                            10320 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                            10321 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                            10322 ; 152  |
                            10323 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                            10324 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                            10325 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                            10326 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                            10327 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                            10328 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                            10329 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                            10330 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                            10331 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                            10332 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                            10333 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                            10334 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                            10335 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                            10336 ; 166  |
                            10337 ; 167  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10338 ; 168  |typedef union
                            10339 ; 169  |{
                            10340 ; 170  |    struct
                            10341 ; 171  |    {
                            10342 ; 172  |    int KICK    :1;         /* Start transfer                      */
                            10343 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                            10344 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                            10345 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                            10346 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                            10347 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                            10348 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                            10349 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                            10350 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                            10351 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                            10352 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                            10353 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                            10354 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                            10355 ; 185  |    } B;
                            10356 ; 186  |    unsigned int I;
                            10357 ; 187  |    unsigned int U;
                            10358 ; 188  |} swizzlecsr2_type;
                            10359 ; 189  |///////////////////////////////////////////////////////////////////////////////
                            10360 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                            10361 ; 191  |
                            10362 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                            10363 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                            10364 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                            10365 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                            10366 ; 196  |
                            10367 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                            10368 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                            10369 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                            10370 ; 200  |
                            10371 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                            10372 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                            10373 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                            10374 ; 204  |
                            10375 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                            10376 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                            10377 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                            10378 ; 208  |
                            10379 ; 209  |///////////////////////////////////////////////////////////////////////////////
                            10380 ; 210  |typedef union
                            10381 ; 211  |{
                            10382 ; 212  |    struct
                            10383 ; 213  |    {
                            10384 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                            10385 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                            10386 ; 216  |    } B;
                            10387 ; 217  |    int I;
                            10388 ; 218  |    unsigned U;
                            10389 ; 219  |} swizzlesizer_type;
                            10390 ; 220  |///////////////////////////////////////////////////////////////////////////////
                            10391 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                            10392 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10393 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                            10394 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                            10395 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                            10396 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                            10397 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                            10398 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                            10399 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                            10400 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                            10401 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                            10402 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                            10403 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                            10404 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                            10405 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                            10406 ; 236  |
                            10407 ; 237  |
                            10408 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                            10409 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                            10410 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                            10411 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                            10412 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                            10413 ; 243  |
                            10414 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                            10415 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                            10416 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                            10417 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                            10418 ; 248  |
                            10419 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                            10420 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
                            10421 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                            10422 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                            10423 ; 253  |
                            10424 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                            10425 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                            10426 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                            10427 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                            10428 ; 258  |
                            10429 ; 259  |///////////////////////////////////////////////////////////////////////////////
                            10430 ; 260  |typedef union
                            10431 ; 261  |{
                            10432 ; 262  |    struct
                            10433 ; 263  |    {
                            10434 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                            10435 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                            10436 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                            10437 ; 267  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10438 ; 268  |    int I;
                            10439 ; 269  |    unsigned U;
                            10440 ; 270  |} swizzlediv3ur_type;
                            10441 ; 271  |///////////////////////////////////////////////////////////////////////////////
                            10442 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                            10443 ; 273  |
                            10444 ; 274  |#endif
                            10445 ; 275  |
                            10446 
                            10448 
                            10449 ; 33   |#include "regssdram.h"
                            10450 
                            10452 
                            10453 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10454 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10455 ; 3    |//;  File        : regssdram.inc
                            10456 ; 4    |//;  Description : Mixed Signal IP Register definition
                            10457 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10458 ; 6    |
                            10459 ; 7    |// The following naming conventions are followed in this file.
                            10460 ; 8    |// All registers are named using the format...
                            10461 ; 9    |//     HW_<module>_<regname>
                            10462 ; 10   |// where <module> is the module name which can be any of the following...
                            10463 ; 11   |//     SYSTEM
                            10464 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10465 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10466 ; 14   |// that module)
                            10467 ; 15   |// <regname> is the specific register within that module
                            10468 ; 16   |// We also define the following...
                            10469 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10470 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10471 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10472 ; 20   |// which does something else, and
                            10473 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10474 ; 22   |// which does something else.
                            10475 ; 23   |// Other rules
                            10476 ; 24   |//     All caps
                            10477 ; 25   |//     Numeric identifiers start at 0
                            10478 ; 26   |
                            10479 ; 27   |#if !(defined(regssdraminc))
                            10480 ; 28   |#define regssdraminc 1
                            10481 ; 29   |
                            10482 ; 30   |#include "types.h"
                            10483 
                            10485 
                            10486 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10487 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10488 ; 3    |//
                            10489 ; 4    |// Filename: types.h
                            10490 ; 5    |// Description: Standard data types
                            10491 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10492 ; 7    |
                            10493 ; 8    |#ifndef _TYPES_H
                            10494 ; 9    |#define _TYPES_H
                            10495 ; 10   |
                            10496 ; 11   |// TODO:  move this outta here!
                            10497 ; 12   |#if !defined(NOERROR)
                            10498 ; 13   |#define NOERROR 0
                            10499 ; 14   |#define SUCCESS 0
                            10500 ; 15   |#endif 
                            10501 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10502 ; 17   |#define SUCCESS  0
                            10503 ; 18   |#endif
                            10504 ; 19   |#if !defined(ERROR)
                            10505 ; 20   |#define ERROR   -1
                            10506 ; 21   |#endif
                            10507 ; 22   |#if !defined(FALSE)
                            10508 ; 23   |#define FALSE 0
                            10509 ; 24   |#endif
                            10510 ; 25   |#if !defined(TRUE)
                            10511 ; 26   |#define TRUE  1
                            10512 ; 27   |#endif
                            10513 ; 28   |
                            10514 ; 29   |#if !defined(NULL)
                            10515 ; 30   |#define NULL 0
                            10516 ; 31   |#endif
                            10517 ; 32   |
                            10518 ; 33   |#define MAX_INT     0x7FFFFF
                            10519 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10520 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10521 ; 36   |#define MAX_ULONG   (-1) 
                            10522 ; 37   |
                            10523 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10524 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10525 ; 40   |
                            10526 ; 41   |
                            10527 ; 42   |#define BYTE    unsigned char       // btVarName
                            10528 ; 43   |#define CHAR    signed char         // cVarName
                            10529 ; 44   |#define USHORT  unsigned short      // usVarName
                            10530 ; 45   |#define SHORT   unsigned short      // sVarName
                            10531 ; 46   |#define WORD    unsigned int        // wVarName
                            10532 ; 47   |#define INT     signed int          // iVarName
                            10533 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10534 ; 49   |#define LONG    signed long         // lVarName
                            10535 ; 50   |#define BOOL    unsigned int        // bVarName
                            10536 ; 51   |#define FRACT   _fract              // frVarName
                            10537 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10538 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10539 ; 54   |#define FLOAT   float               // fVarName
                            10540 ; 55   |#define DBL     double              // dVarName
                            10541 ; 56   |#define ENUM    enum                // eVarName
                            10542 ; 57   |#define CMX     _complex            // cmxVarName
                            10543 ; 58   |typedef WORD UCS3;                   // 
                            10544 ; 59   |
                            10545 ; 60   |#define UINT16  unsigned short
                            10546 ; 61   |#define UINT8   unsigned char   
                            10547 ; 62   |#define UINT32  unsigned long
                            10548 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10549 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10550 ; 65   |#define WCHAR   UINT16
                            10551 ; 66   |
                            10552 ; 67   |//UINT128 is 16 bytes or 6 words
                            10553 ; 68   |typedef struct UINT128_3500 {   
                            10554 ; 69   |    int val[6];     
                            10555 ; 70   |} UINT128_3500;
                            10556 ; 71   |
                            10557 ; 72   |#define UINT128   UINT128_3500
                            10558 ; 73   |
                            10559 ; 74   |// Little endian word packed byte strings:   
                            10560 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10561 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10562 ; 77   |// Little endian word packed byte strings:   
                            10563 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10564 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10565 ; 80   |
                            10566 ; 81   |// Declare Memory Spaces To Use When Coding
                            10567 ; 82   |// A. Sector Buffers
                            10568 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10569 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10570 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10571 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10572 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10573 ; 88   |// B. Media DDI Memory
                            10574 ; 89   |#define MEDIA_DDI_MEM _Y
                            10575 ; 90   |
                            10576 ; 91   |
                            10577 ; 92   |
                            10578 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10579 ; 94   |// Examples of circular pointers:
                            10580 ; 95   |//    INT CIRC cpiVarName
                            10581 ; 96   |//    DWORD CIRC cpdwVarName
                            10582 ; 97   |
                            10583 ; 98   |#define RETCODE INT                 // rcVarName
                            10584 ; 99   |
                            10585 ; 100  |// generic bitfield structure
                            10586 ; 101  |struct Bitfield {
                            10587 ; 102  |    unsigned int B0  :1;
                            10588 ; 103  |    unsigned int B1  :1;
                            10589 ; 104  |    unsigned int B2  :1;
                            10590 ; 105  |    unsigned int B3  :1;
                            10591 ; 106  |    unsigned int B4  :1;
                            10592 ; 107  |    unsigned int B5  :1;
                            10593 ; 108  |    unsigned int B6  :1;
                            10594 ; 109  |    unsigned int B7  :1;
                            10595 ; 110  |    unsigned int B8  :1;
                            10596 ; 111  |    unsigned int B9  :1;
                            10597 ; 112  |    unsigned int B10 :1;
                            10598 ; 113  |    unsigned int B11 :1;
                            10599 ; 114  |    unsigned int B12 :1;
                            10600 ; 115  |    unsigned int B13 :1;
                            10601 ; 116  |    unsigned int B14 :1;
                            10602 ; 117  |    unsigned int B15 :1;
                            10603 ; 118  |    unsigned int B16 :1;
                            10604 ; 119  |    unsigned int B17 :1;
                            10605 ; 120  |    unsigned int B18 :1;
                            10606 ; 121  |    unsigned int B19 :1;
                            10607 ; 122  |    unsigned int B20 :1;
                            10608 ; 123  |    unsigned int B21 :1;
                            10609 ; 124  |    unsigned int B22 :1;
                            10610 ; 125  |    unsigned int B23 :1;
                            10611 ; 126  |};
                            10612 ; 127  |
                            10613 ; 128  |union BitInt {
                            10614 ; 129  |        struct Bitfield B;
                            10615 ; 130  |        int        I;
                            10616 ; 131  |};
                            10617 ; 132  |
                            10618 ; 133  |#define MAX_MSG_LENGTH 10
                            10619 ; 134  |struct CMessage
                            10620 ; 135  |{
                            10621 ; 136  |        unsigned int m_uLength;
                            10622 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10623 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10624 ; 139  |
                            10625 ; 140  |typedef struct {
                            10626 ; 141  |    WORD m_wLength;
                            10627 ; 142  |    WORD m_wMessage;
                            10628 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10629 ; 144  |} Message;
                            10630 ; 145  |
                            10631 ; 146  |struct MessageQueueDescriptor
                            10632 ; 147  |{
                            10633 ; 148  |        int *m_pBase;
                            10634 ; 149  |        int m_iModulo;
                            10635 ; 150  |        int m_iSize;
                            10636 ; 151  |        int *m_pHead;
                            10637 ; 152  |        int *m_pTail;
                            10638 ; 153  |};
                            10639 ; 154  |
                            10640 ; 155  |struct ModuleEntry
                            10641 ; 156  |{
                            10642 ; 157  |    int m_iSignaledEventMask;
                            10643 ; 158  |    int m_iWaitEventMask;
                            10644 ; 159  |    int m_iResourceOfCode;
                            10645 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10646 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10647 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10648 ; 163  |    int m_uTimeOutHigh;
                            10649 ; 164  |    int m_uTimeOutLow;
                            10650 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10651 ; 166  |};
                            10652 ; 167  |
                            10653 ; 168  |union WaitMask{
                            10654 ; 169  |    struct B{
                            10655 ; 170  |        unsigned int m_bNone     :1;
                            10656 ; 171  |        unsigned int m_bMessage  :1;
                            10657 ; 172  |        unsigned int m_bTimer    :1;
                            10658 ; 173  |        unsigned int m_bButton   :1;
                            10659 ; 174  |    } B;
                            10660 ; 175  |    int I;
                            10661 ; 176  |} ;
                            10662 ; 177  |
                            10663 ; 178  |
                            10664 ; 179  |struct Button {
                            10665 ; 180  |        WORD wButtonEvent;
                            10666 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10667 ; 182  |};
                            10668 ; 183  |
                            10669 ; 184  |struct Message {
                            10670 ; 185  |        WORD wMsgLength;
                            10671 ; 186  |        WORD wMsgCommand;
                            10672 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10673 ; 188  |};
                            10674 ; 189  |
                            10675 ; 190  |union EventTypes {
                            10676 ; 191  |        struct CMessage msg;
                            10677 ; 192  |        struct Button Button ;
                            10678 ; 193  |        struct Message Message;
                            10679 ; 194  |};
                            10680 ; 195  |
                            10681 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10682 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10683 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10684 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10685 ; 200  |
                            10686 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10687 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10688 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10689 ; 204  |
                            10690 ; 205  |#if DEBUG
                            10691 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10692 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10693 ; 208  |#else 
                            10694 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10695 ; 210  |#define DebugBuildAssert(x)    
                            10696 ; 211  |#endif
                            10697 ; 212  |
                            10698 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10699 ; 214  |//  #pragma asm
                            10700 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10701 ; 216  |//  #pragma endasm
                            10702 ; 217  |
                            10703 ; 218  |
                            10704 ; 219  |#ifdef COLOR_262K
                            10705 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10706 ; 221  |#elif defined(COLOR_65K)
                            10707 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10708 ; 223  |#else
                            10709 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10710 ; 225  |#endif
                            10711 ; 226  |    
                            10712 ; 227  |#endif // #ifndef _TYPES_H
                            10713 
                            10715 
                            10716 ; 31   |
                            10717 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            10718 ; 33   |
                            10719 ; 34   |
                            10720 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            10721 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            10722 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            10723 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            10724 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            10725 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            10726 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            10727 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            10728 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            10729 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            10730 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            10731 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            10732 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            10733 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                            10734 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            10735 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            10736 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            10737 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            10738 ; 53   |
                            10739 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            10740 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            10741 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            10742 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            10743 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10744 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            10745 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            10746 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            10747 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            10748 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            10749 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            10750 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            10751 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            10752 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            10753 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            10754 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            10755 ; 70   |
                            10756 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                            10757 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            10758 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                            10759 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                            10760 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            10761 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                            10762 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                            10763 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                            10764 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                            10765 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                            10766 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                            10767 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                            10768 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                            10769 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                            10770 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                            10771 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                            10772 ; 87   |
                            10773 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            10774 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            10775 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            10776 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            10777 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            10778 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            10779 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            10780 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            10781 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                            10782 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            10783 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            10784 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            10785 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            10786 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            10787 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            10788 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            10789 ; 104  |
                            10790 ; 105  |typedef union               
                            10791 ; 106  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10792 ; 107  |    struct {
                            10793 ; 108  |        int SDRAMEN                     :1;
                            10794 ; 109  |        int IE                          :1;
                            10795 ; 110  |        int RNW                         :1;
                            10796 ; 111  |        int KICK                        :1;
                            10797 ; 112  |        int LM                          :1;
                            10798 ; 113  |        int ISTAT                       :1;
                            10799 ; 114  |        int PWDN                        :1;
                            10800 ; 115  |        int RSVD                        :1;
                            10801 ; 116  |        int SBYTE                       :2;
                            10802 ; 117  |        int MEM                         :2;
                            10803 ; 118  |        int BIGE                        :1;
                            10804 ; 119  |        int ASIZE                       :3;
                            10805 ; 120  |        int UKICK                       :1;
                            10806 ; 121  |        int DIV                         :4;
                            10807 ; 122  |        int MULTI                       :1;
                            10808 ; 123  |        int SDRAM                       :1;
                            10809 ; 124  |        int SIGN                        :1;
                            10810 ; 125  |    } B;
                            10811 ; 126  |    int I;
                            10812 ; 127  |} sdramcsr_type;
                            10813 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            10814 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            10815 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            10816 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            10817 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            10818 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            10819 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            10820 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            10821 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            10822 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            10823 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            10824 ; 139  |
                            10825 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            10826 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            10827 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            10828 ; 143  |
                            10829 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            10830 ; 145  |
                            10831 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            10832 ; 147  |
                            10833 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            10834 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            10835 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            10836 ; 151  |
                            10837 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            10838 ; 153  |
                            10839 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            10840 ; 155  |
                            10841 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            10842 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            10843 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                            10844 ; 159  |
                            10845 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            10846 ; 161  |
                            10847 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            10848 ; 163  |
                            10849 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            10850 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            10851 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            10852 ; 167  |
                            10853 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10854 ; 169  |
                            10855 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            10856 ; 171  |
                            10857 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            10858 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            10859 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            10860 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            10861 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            10862 ; 177  |
                            10863 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            10864 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            10865 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            10866 ; 181  |
                            10867 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                            10868 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                            10869 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                            10870 ; 185  |
                            10871 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            10872 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            10873 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            10874 ; 189  |
                            10875 ; 190  |typedef union               
                            10876 ; 191  |{
                            10877 ; 192  |    struct {
                            10878 ; 193  |        int INIT                :16;
                            10879 ; 194  |        int TRP                 :4;
                            10880 ; 195  |        int TRFC                :4;
                            10881 ; 196  |    } B;
                            10882 ; 197  |    int I;
                            10883 ; 198  |} sdramtimer1_type;
                            10884 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            10885 ; 200  |
                            10886 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            10887 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            10888 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            10889 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            10890 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            10891 ; 206  |
                            10892 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            10893 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            10894 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            10895 ; 210  |
                            10896 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                            10897 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                            10898 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                            10899 ; 214  |
                            10900 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            10901 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            10902 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            10903 ; 218  |
                            10904 ; 219  |typedef union               
                            10905 ; 220  |{
                            10906 ; 221  |    struct {
                            10907 ; 222  |        int TXSR                :4;
                            10908 ; 223  |        int TREF                :12;
                            10909 ; 224  |        int TRCD                :4;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10910 ; 225  |        int RSVD                :4; 
                            10911 ; 226  |    } B;
                            10912 ; 227  |    int I;
                            10913 ; 228  |} sdramtimer2_type;
                            10914 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            10915 ; 230  |
                            10916 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            10917 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            10918 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            10919 ; 234  |
                            10920 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            10921 ; 236  |
                            10922 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            10923 ; 238  |
                            10924 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            10925 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            10926 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            10927 ; 242  |
                            10928 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            10929 ; 244  |
                            10930 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            10931 ; 246  |
                            10932 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            10933 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            10934 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            10935 ; 250  |
                            10936 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            10937 ; 252  |
                            10938 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                            10939 ; 254  |
                            10940 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            10941 ; 256  |
                            10942 ; 257  |typedef union               
                            10943 ; 258  |{
                            10944 ; 259  |    struct {
                            10945 ; 260  |        int VALUE               :14;
                            10946 ; 261  |        int RSVD                :10; 
                            10947 ; 262  |    } B;
                            10948 ; 263  |    int I;
                            10949 ; 264  |} sdrammode_type;
                            10950 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            10951 ; 266  |
                            10952 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            10953 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            10954 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            10955 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            10956 ; 271  |
                            10957 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            10958 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            10959 ; 274  |
                            10960 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                            10961 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                            10962 ; 277  |
                            10963 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            10964 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            10965 ; 280  |
                            10966 ; 281  |typedef union               
                            10967 ; 282  |{
                            10968 ; 283  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10969 ; 284  |        int COLWIDTH               :4;
                            10970 ; 285  |        int ROWWIDTH               :4; 
                            10971 ; 286  |    } B;
                            10972 ; 287  |    int I;
                            10973 ; 288  |} sdramtype_type;
                            10974 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            10975 ; 290  |
                            10976 ; 291  |#endif
                            10977 ; 292  |
                            10978 ; 293  |
                            10979 ; 294  |
                            10980 ; 295  |
                            10981 ; 296  |
                            10982 ; 297  |
                            10983 
                            10985 
                            10986 ; 34   |#include "regstb.h"
                            10987 
                            10989 
                            10990 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10991 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            10992 ; 3    |// Filename: regstb.inc
                            10993 ; 4    |// Description: Register definitions for Trace Buffer
                            10994 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10995 ; 6    |// The following naming conventions are followed in this file.
                            10996 ; 7    |// All registers are named using the format...
                            10997 ; 8    |//     HW_<module>_<regname>
                            10998 ; 9    |// where <module> is the module name which can be any of the following...
                            10999 ; 10   |//     USB20
                            11000 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11001 ; 12   |// module name includes a number starting from 0 for the first instance of
                            11002 ; 13   |// that module)
                            11003 ; 14   |// <regname> is the specific register within that module
                            11004 ; 15   |// We also define the following...
                            11005 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11006 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11007 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11008 ; 19   |// which does something else, and
                            11009 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11010 ; 21   |// which does something else.
                            11011 ; 22   |// Other rules
                            11012 ; 23   |//     All caps
                            11013 ; 24   |//     Numeric identifiers start at 0
                            11014 ; 25   |#if !(defined(regstbinc))
                            11015 ; 26   |#define regstbinc 1
                            11016 ; 27   |
                            11017 ; 28   |#include "types.h"
                            11018 
                            11020 
                            11021 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11022 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11023 ; 3    |//
                            11024 ; 4    |// Filename: types.h
                            11025 ; 5    |// Description: Standard data types
                            11026 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11027 ; 7    |
                            11028 ; 8    |#ifndef _TYPES_H
                            11029 ; 9    |#define _TYPES_H
                            11030 ; 10   |
                            11031 ; 11   |// TODO:  move this outta here!
                            11032 ; 12   |#if !defined(NOERROR)
                            11033 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11034 ; 14   |#define SUCCESS 0
                            11035 ; 15   |#endif 
                            11036 ; 16   |#if !defined(SUCCESS)
                            11037 ; 17   |#define SUCCESS  0
                            11038 ; 18   |#endif
                            11039 ; 19   |#if !defined(ERROR)
                            11040 ; 20   |#define ERROR   -1
                            11041 ; 21   |#endif
                            11042 ; 22   |#if !defined(FALSE)
                            11043 ; 23   |#define FALSE 0
                            11044 ; 24   |#endif
                            11045 ; 25   |#if !defined(TRUE)
                            11046 ; 26   |#define TRUE  1
                            11047 ; 27   |#endif
                            11048 ; 28   |
                            11049 ; 29   |#if !defined(NULL)
                            11050 ; 30   |#define NULL 0
                            11051 ; 31   |#endif
                            11052 ; 32   |
                            11053 ; 33   |#define MAX_INT     0x7FFFFF
                            11054 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11055 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11056 ; 36   |#define MAX_ULONG   (-1) 
                            11057 ; 37   |
                            11058 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11059 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11060 ; 40   |
                            11061 ; 41   |
                            11062 ; 42   |#define BYTE    unsigned char       // btVarName
                            11063 ; 43   |#define CHAR    signed char         // cVarName
                            11064 ; 44   |#define USHORT  unsigned short      // usVarName
                            11065 ; 45   |#define SHORT   unsigned short      // sVarName
                            11066 ; 46   |#define WORD    unsigned int        // wVarName
                            11067 ; 47   |#define INT     signed int          // iVarName
                            11068 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11069 ; 49   |#define LONG    signed long         // lVarName
                            11070 ; 50   |#define BOOL    unsigned int        // bVarName
                            11071 ; 51   |#define FRACT   _fract              // frVarName
                            11072 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11073 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11074 ; 54   |#define FLOAT   float               // fVarName
                            11075 ; 55   |#define DBL     double              // dVarName
                            11076 ; 56   |#define ENUM    enum                // eVarName
                            11077 ; 57   |#define CMX     _complex            // cmxVarName
                            11078 ; 58   |typedef WORD UCS3;                   // 
                            11079 ; 59   |
                            11080 ; 60   |#define UINT16  unsigned short
                            11081 ; 61   |#define UINT8   unsigned char   
                            11082 ; 62   |#define UINT32  unsigned long
                            11083 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11084 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11085 ; 65   |#define WCHAR   UINT16
                            11086 ; 66   |
                            11087 ; 67   |//UINT128 is 16 bytes or 6 words
                            11088 ; 68   |typedef struct UINT128_3500 {   
                            11089 ; 69   |    int val[6];     
                            11090 ; 70   |} UINT128_3500;
                            11091 ; 71   |
                            11092 ; 72   |#define UINT128   UINT128_3500
                            11093 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11094 ; 74   |// Little endian word packed byte strings:   
                            11095 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11096 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11097 ; 77   |// Little endian word packed byte strings:   
                            11098 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11099 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11100 ; 80   |
                            11101 ; 81   |// Declare Memory Spaces To Use When Coding
                            11102 ; 82   |// A. Sector Buffers
                            11103 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11104 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11105 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11106 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11107 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11108 ; 88   |// B. Media DDI Memory
                            11109 ; 89   |#define MEDIA_DDI_MEM _Y
                            11110 ; 90   |
                            11111 ; 91   |
                            11112 ; 92   |
                            11113 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11114 ; 94   |// Examples of circular pointers:
                            11115 ; 95   |//    INT CIRC cpiVarName
                            11116 ; 96   |//    DWORD CIRC cpdwVarName
                            11117 ; 97   |
                            11118 ; 98   |#define RETCODE INT                 // rcVarName
                            11119 ; 99   |
                            11120 ; 100  |// generic bitfield structure
                            11121 ; 101  |struct Bitfield {
                            11122 ; 102  |    unsigned int B0  :1;
                            11123 ; 103  |    unsigned int B1  :1;
                            11124 ; 104  |    unsigned int B2  :1;
                            11125 ; 105  |    unsigned int B3  :1;
                            11126 ; 106  |    unsigned int B4  :1;
                            11127 ; 107  |    unsigned int B5  :1;
                            11128 ; 108  |    unsigned int B6  :1;
                            11129 ; 109  |    unsigned int B7  :1;
                            11130 ; 110  |    unsigned int B8  :1;
                            11131 ; 111  |    unsigned int B9  :1;
                            11132 ; 112  |    unsigned int B10 :1;
                            11133 ; 113  |    unsigned int B11 :1;
                            11134 ; 114  |    unsigned int B12 :1;
                            11135 ; 115  |    unsigned int B13 :1;
                            11136 ; 116  |    unsigned int B14 :1;
                            11137 ; 117  |    unsigned int B15 :1;
                            11138 ; 118  |    unsigned int B16 :1;
                            11139 ; 119  |    unsigned int B17 :1;
                            11140 ; 120  |    unsigned int B18 :1;
                            11141 ; 121  |    unsigned int B19 :1;
                            11142 ; 122  |    unsigned int B20 :1;
                            11143 ; 123  |    unsigned int B21 :1;
                            11144 ; 124  |    unsigned int B22 :1;
                            11145 ; 125  |    unsigned int B23 :1;
                            11146 ; 126  |};
                            11147 ; 127  |
                            11148 ; 128  |union BitInt {
                            11149 ; 129  |        struct Bitfield B;
                            11150 ; 130  |        int        I;
                            11151 ; 131  |};
                            11152 ; 132  |
                            11153 ; 133  |#define MAX_MSG_LENGTH 10
                            11154 ; 134  |struct CMessage
                            11155 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11156 ; 136  |        unsigned int m_uLength;
                            11157 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11158 ; 138  |};
                            11159 ; 139  |
                            11160 ; 140  |typedef struct {
                            11161 ; 141  |    WORD m_wLength;
                            11162 ; 142  |    WORD m_wMessage;
                            11163 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11164 ; 144  |} Message;
                            11165 ; 145  |
                            11166 ; 146  |struct MessageQueueDescriptor
                            11167 ; 147  |{
                            11168 ; 148  |        int *m_pBase;
                            11169 ; 149  |        int m_iModulo;
                            11170 ; 150  |        int m_iSize;
                            11171 ; 151  |        int *m_pHead;
                            11172 ; 152  |        int *m_pTail;
                            11173 ; 153  |};
                            11174 ; 154  |
                            11175 ; 155  |struct ModuleEntry
                            11176 ; 156  |{
                            11177 ; 157  |    int m_iSignaledEventMask;
                            11178 ; 158  |    int m_iWaitEventMask;
                            11179 ; 159  |    int m_iResourceOfCode;
                            11180 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11181 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11182 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11183 ; 163  |    int m_uTimeOutHigh;
                            11184 ; 164  |    int m_uTimeOutLow;
                            11185 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11186 ; 166  |};
                            11187 ; 167  |
                            11188 ; 168  |union WaitMask{
                            11189 ; 169  |    struct B{
                            11190 ; 170  |        unsigned int m_bNone     :1;
                            11191 ; 171  |        unsigned int m_bMessage  :1;
                            11192 ; 172  |        unsigned int m_bTimer    :1;
                            11193 ; 173  |        unsigned int m_bButton   :1;
                            11194 ; 174  |    } B;
                            11195 ; 175  |    int I;
                            11196 ; 176  |} ;
                            11197 ; 177  |
                            11198 ; 178  |
                            11199 ; 179  |struct Button {
                            11200 ; 180  |        WORD wButtonEvent;
                            11201 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11202 ; 182  |};
                            11203 ; 183  |
                            11204 ; 184  |struct Message {
                            11205 ; 185  |        WORD wMsgLength;
                            11206 ; 186  |        WORD wMsgCommand;
                            11207 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11208 ; 188  |};
                            11209 ; 189  |
                            11210 ; 190  |union EventTypes {
                            11211 ; 191  |        struct CMessage msg;
                            11212 ; 192  |        struct Button Button ;
                            11213 ; 193  |        struct Message Message;
                            11214 ; 194  |};
                            11215 ; 195  |
                            11216 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11217 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11218 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11219 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11220 ; 200  |
                            11221 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11222 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11223 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11224 ; 204  |
                            11225 ; 205  |#if DEBUG
                            11226 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11227 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11228 ; 208  |#else 
                            11229 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11230 ; 210  |#define DebugBuildAssert(x)    
                            11231 ; 211  |#endif
                            11232 ; 212  |
                            11233 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11234 ; 214  |//  #pragma asm
                            11235 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11236 ; 216  |//  #pragma endasm
                            11237 ; 217  |
                            11238 ; 218  |
                            11239 ; 219  |#ifdef COLOR_262K
                            11240 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11241 ; 221  |#elif defined(COLOR_65K)
                            11242 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11243 ; 223  |#else
                            11244 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11245 ; 225  |#endif
                            11246 ; 226  |    
                            11247 ; 227  |#endif // #ifndef _TYPES_H
                            11248 
                            11250 
                            11251 ; 29   |
                            11252 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11253 ; 31   |
                            11254 ; 32   |//   Trace Buffer STMP Registers 
                            11255 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            11256 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11257 ; 35   |
                            11258 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            11259 ; 37   |
                            11260 ; 38   |
                            11261 ; 39   |
                            11262 ; 40   |
                            11263 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            11264 ; 42   |
                            11265 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            11266 ; 44   |
                            11267 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            11268 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            11269 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            11270 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            11271 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            11272 ; 50   |
                            11273 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            11274 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            11275 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11276 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            11277 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            11278 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            11279 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            11280 ; 58   |
                            11281 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            11282 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            11283 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            11284 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            11285 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            11286 ; 64   |
                            11287 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            11288 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            11289 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            11290 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            11291 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            11292 ; 70   |
                            11293 ; 71   |typedef union               
                            11294 ; 72   |{
                            11295 ; 73   |    struct {
                            11296 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            11297 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            11298 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            11299 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            11300 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            11301 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            11302 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            11303 ; 81   |    } B;
                            11304 ; 82   |    int I;
                            11305 ; 83   |    unsigned int U;
                            11306 ; 84   |} tb_cfg_type;
                            11307 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            11308 ; 86   |
                            11309 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            11310 ; 88   |
                            11311 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            11312 ; 90   |
                            11313 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            11314 ; 92   |
                            11315 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            11316 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            11317 ; 95   |
                            11318 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            11319 ; 97   |
                            11320 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            11321 ; 99   |
                            11322 ; 100  |typedef union               
                            11323 ; 101  |{
                            11324 ; 102  |    struct {
                            11325 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            11326 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            11327 ; 105  |    } B;
                            11328 ; 106  |    int I;
                            11329 ; 107  |    unsigned int U;
                            11330 ; 108  |} tb_bar_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11331 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            11332 ; 110  |
                            11333 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11334 ; 112  |
                            11335 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            11336 ; 114  |
                            11337 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            11338 ; 116  |
                            11339 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            11340 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            11341 ; 119  |
                            11342 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            11343 ; 121  |
                            11344 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            11345 ; 123  |
                            11346 ; 124  |typedef union               
                            11347 ; 125  |{
                            11348 ; 126  |    struct {
                            11349 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            11350 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            11351 ; 129  |    } B;
                            11352 ; 130  |    int I;
                            11353 ; 131  |    unsigned int U;
                            11354 ; 132  |} tb_mod_type;
                            11355 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            11356 ; 134  |
                            11357 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            11358 ; 136  |
                            11359 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            11360 ; 138  |
                            11361 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            11362 ; 140  |
                            11363 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            11364 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            11365 ; 143  |
                            11366 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            11367 ; 145  |
                            11368 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            11369 ; 147  |
                            11370 ; 148  |typedef union               
                            11371 ; 149  |{
                            11372 ; 150  |    struct {
                            11373 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            11374 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            11375 ; 153  |    } B;
                            11376 ; 154  |    int I;
                            11377 ; 155  |    unsigned int U;
                            11378 ; 156  |} tb_cir_type;
                            11379 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            11380 ; 158  |
                            11381 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            11382 ; 160  |
                            11383 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            11384 ; 162  |
                            11385 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            11386 ; 164  |
                            11387 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            11388 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11389 ; 167  |
                            11390 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            11391 ; 169  |
                            11392 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            11393 ; 171  |
                            11394 ; 172  |typedef union               
                            11395 ; 173  |{
                            11396 ; 174  |    struct {
                            11397 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            11398 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            11399 ; 177  |    } B;
                            11400 ; 178  |    int I;
                            11401 ; 179  |    unsigned int U;
                            11402 ; 180  |} tb_obc_type;
                            11403 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            11404 ; 182  |
                            11405 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            11406 ; 184  |
                            11407 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            11408 ; 186  |
                            11409 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            11410 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            11411 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            11412 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            11413 ; 191  |
                            11414 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            11415 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            11416 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            11417 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            11418 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            11419 ; 197  |
                            11420 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            11421 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            11422 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            11423 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            11424 ; 202  |
                            11425 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            11426 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            11427 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            11428 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            11429 ; 207  |
                            11430 ; 208  |typedef union               
                            11431 ; 209  |{
                            11432 ; 210  |    struct {
                            11433 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            11434 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            11435 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            11436 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            11437 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            11438 ; 216  |    } B;
                            11439 ; 217  |    int I;
                            11440 ; 218  |    unsigned int U;
                            11441 ; 219  |} tb_tcs_type;
                            11442 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            11443 ; 221  |
                            11444 ; 222  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11445 ; 223  |
                            11446 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            11447 ; 225  |
                            11448 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            11449 ; 227  |
                            11450 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            11451 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            11452 ; 230  |
                            11453 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            11454 ; 232  |
                            11455 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            11456 ; 234  |
                            11457 ; 235  |typedef union               
                            11458 ; 236  |{
                            11459 ; 237  |    struct {
                            11460 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            11461 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            11462 ; 240  |    } B;
                            11463 ; 241  |    int I;
                            11464 ; 242  |    unsigned int U;
                            11465 ; 243  |} tb_tvr_type;
                            11466 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            11467 ; 245  |
                            11468 ; 246  |
                            11469 ; 247  |
                            11470 ; 248  |#endif
                            11471 ; 249  |
                            11472 ; 250  |
                            11473 ; 251  |
                            11474 ; 252  |
                            11475 ; 253  |
                            11476 ; 254  |
                            11477 ; 255  |
                            11478 ; 256  |
                            11479 ; 257  |
                            11480 ; 258  |
                            11481 ; 259  |
                            11482 ; 260  |
                            11483 ; 261  |
                            11484 ; 262  |
                            11485 ; 263  |
                            11486 ; 264  |
                            11487 ; 265  |
                            11488 
                            11490 
                            11491 ; 35   |#include "regstimer.h"
                            11492 
                            11494 
                            11495 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11496 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            11497 ; 3    |// Filename: regstimer.inc
                            11498 ; 4    |// Description: Register definitions for  Timers interface
                            11499 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11500 ; 6    |// The following naming conventions are followed in this file.
                            11501 ; 7    |// All registers are named using the format...
                            11502 ; 8    |//     HW_<module>_<regname>
                            11503 ; 9    |// where <module> is the module name which can be any of the following...
                            11504 ; 10   |//     USB20
                            11505 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11506 ; 12   |// module name includes a number starting from 0 for the first instance of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11507 ; 13   |// that module)
                            11508 ; 14   |// <regname> is the specific register within that module
                            11509 ; 15   |// We also define the following...
                            11510 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11511 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11512 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11513 ; 19   |// which does something else, and
                            11514 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11515 ; 21   |// which does something else.
                            11516 ; 22   |// Other rules
                            11517 ; 23   |//     All caps
                            11518 ; 24   |//     Numeric identifiers start at 0
                            11519 ; 25   |#if !(defined(regstimerinc))
                            11520 ; 26   |#define regstimerinc 1
                            11521 ; 27   |
                            11522 ; 28   |#include "types.h"
                            11523 
                            11525 
                            11526 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11527 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11528 ; 3    |//
                            11529 ; 4    |// Filename: types.h
                            11530 ; 5    |// Description: Standard data types
                            11531 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11532 ; 7    |
                            11533 ; 8    |#ifndef _TYPES_H
                            11534 ; 9    |#define _TYPES_H
                            11535 ; 10   |
                            11536 ; 11   |// TODO:  move this outta here!
                            11537 ; 12   |#if !defined(NOERROR)
                            11538 ; 13   |#define NOERROR 0
                            11539 ; 14   |#define SUCCESS 0
                            11540 ; 15   |#endif 
                            11541 ; 16   |#if !defined(SUCCESS)
                            11542 ; 17   |#define SUCCESS  0
                            11543 ; 18   |#endif
                            11544 ; 19   |#if !defined(ERROR)
                            11545 ; 20   |#define ERROR   -1
                            11546 ; 21   |#endif
                            11547 ; 22   |#if !defined(FALSE)
                            11548 ; 23   |#define FALSE 0
                            11549 ; 24   |#endif
                            11550 ; 25   |#if !defined(TRUE)
                            11551 ; 26   |#define TRUE  1
                            11552 ; 27   |#endif
                            11553 ; 28   |
                            11554 ; 29   |#if !defined(NULL)
                            11555 ; 30   |#define NULL 0
                            11556 ; 31   |#endif
                            11557 ; 32   |
                            11558 ; 33   |#define MAX_INT     0x7FFFFF
                            11559 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11560 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11561 ; 36   |#define MAX_ULONG   (-1) 
                            11562 ; 37   |
                            11563 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11564 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11565 ; 40   |
                            11566 ; 41   |
                            11567 ; 42   |#define BYTE    unsigned char       // btVarName
                            11568 ; 43   |#define CHAR    signed char         // cVarName
                            11569 ; 44   |#define USHORT  unsigned short      // usVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11570 ; 45   |#define SHORT   unsigned short      // sVarName
                            11571 ; 46   |#define WORD    unsigned int        // wVarName
                            11572 ; 47   |#define INT     signed int          // iVarName
                            11573 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11574 ; 49   |#define LONG    signed long         // lVarName
                            11575 ; 50   |#define BOOL    unsigned int        // bVarName
                            11576 ; 51   |#define FRACT   _fract              // frVarName
                            11577 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11578 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11579 ; 54   |#define FLOAT   float               // fVarName
                            11580 ; 55   |#define DBL     double              // dVarName
                            11581 ; 56   |#define ENUM    enum                // eVarName
                            11582 ; 57   |#define CMX     _complex            // cmxVarName
                            11583 ; 58   |typedef WORD UCS3;                   // 
                            11584 ; 59   |
                            11585 ; 60   |#define UINT16  unsigned short
                            11586 ; 61   |#define UINT8   unsigned char   
                            11587 ; 62   |#define UINT32  unsigned long
                            11588 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11589 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11590 ; 65   |#define WCHAR   UINT16
                            11591 ; 66   |
                            11592 ; 67   |//UINT128 is 16 bytes or 6 words
                            11593 ; 68   |typedef struct UINT128_3500 {   
                            11594 ; 69   |    int val[6];     
                            11595 ; 70   |} UINT128_3500;
                            11596 ; 71   |
                            11597 ; 72   |#define UINT128   UINT128_3500
                            11598 ; 73   |
                            11599 ; 74   |// Little endian word packed byte strings:   
                            11600 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11601 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11602 ; 77   |// Little endian word packed byte strings:   
                            11603 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11604 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11605 ; 80   |
                            11606 ; 81   |// Declare Memory Spaces To Use When Coding
                            11607 ; 82   |// A. Sector Buffers
                            11608 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11609 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11610 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11611 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11612 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11613 ; 88   |// B. Media DDI Memory
                            11614 ; 89   |#define MEDIA_DDI_MEM _Y
                            11615 ; 90   |
                            11616 ; 91   |
                            11617 ; 92   |
                            11618 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11619 ; 94   |// Examples of circular pointers:
                            11620 ; 95   |//    INT CIRC cpiVarName
                            11621 ; 96   |//    DWORD CIRC cpdwVarName
                            11622 ; 97   |
                            11623 ; 98   |#define RETCODE INT                 // rcVarName
                            11624 ; 99   |
                            11625 ; 100  |// generic bitfield structure
                            11626 ; 101  |struct Bitfield {
                            11627 ; 102  |    unsigned int B0  :1;
                            11628 ; 103  |    unsigned int B1  :1;
                            11629 ; 104  |    unsigned int B2  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11630 ; 105  |    unsigned int B3  :1;
                            11631 ; 106  |    unsigned int B4  :1;
                            11632 ; 107  |    unsigned int B5  :1;
                            11633 ; 108  |    unsigned int B6  :1;
                            11634 ; 109  |    unsigned int B7  :1;
                            11635 ; 110  |    unsigned int B8  :1;
                            11636 ; 111  |    unsigned int B9  :1;
                            11637 ; 112  |    unsigned int B10 :1;
                            11638 ; 113  |    unsigned int B11 :1;
                            11639 ; 114  |    unsigned int B12 :1;
                            11640 ; 115  |    unsigned int B13 :1;
                            11641 ; 116  |    unsigned int B14 :1;
                            11642 ; 117  |    unsigned int B15 :1;
                            11643 ; 118  |    unsigned int B16 :1;
                            11644 ; 119  |    unsigned int B17 :1;
                            11645 ; 120  |    unsigned int B18 :1;
                            11646 ; 121  |    unsigned int B19 :1;
                            11647 ; 122  |    unsigned int B20 :1;
                            11648 ; 123  |    unsigned int B21 :1;
                            11649 ; 124  |    unsigned int B22 :1;
                            11650 ; 125  |    unsigned int B23 :1;
                            11651 ; 126  |};
                            11652 ; 127  |
                            11653 ; 128  |union BitInt {
                            11654 ; 129  |        struct Bitfield B;
                            11655 ; 130  |        int        I;
                            11656 ; 131  |};
                            11657 ; 132  |
                            11658 ; 133  |#define MAX_MSG_LENGTH 10
                            11659 ; 134  |struct CMessage
                            11660 ; 135  |{
                            11661 ; 136  |        unsigned int m_uLength;
                            11662 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11663 ; 138  |};
                            11664 ; 139  |
                            11665 ; 140  |typedef struct {
                            11666 ; 141  |    WORD m_wLength;
                            11667 ; 142  |    WORD m_wMessage;
                            11668 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11669 ; 144  |} Message;
                            11670 ; 145  |
                            11671 ; 146  |struct MessageQueueDescriptor
                            11672 ; 147  |{
                            11673 ; 148  |        int *m_pBase;
                            11674 ; 149  |        int m_iModulo;
                            11675 ; 150  |        int m_iSize;
                            11676 ; 151  |        int *m_pHead;
                            11677 ; 152  |        int *m_pTail;
                            11678 ; 153  |};
                            11679 ; 154  |
                            11680 ; 155  |struct ModuleEntry
                            11681 ; 156  |{
                            11682 ; 157  |    int m_iSignaledEventMask;
                            11683 ; 158  |    int m_iWaitEventMask;
                            11684 ; 159  |    int m_iResourceOfCode;
                            11685 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11686 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11687 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11688 ; 163  |    int m_uTimeOutHigh;
                            11689 ; 164  |    int m_uTimeOutLow;
                            11690 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11691 ; 166  |};
                            11692 ; 167  |
                            11693 ; 168  |union WaitMask{
                            11694 ; 169  |    struct B{
                            11695 ; 170  |        unsigned int m_bNone     :1;
                            11696 ; 171  |        unsigned int m_bMessage  :1;
                            11697 ; 172  |        unsigned int m_bTimer    :1;
                            11698 ; 173  |        unsigned int m_bButton   :1;
                            11699 ; 174  |    } B;
                            11700 ; 175  |    int I;
                            11701 ; 176  |} ;
                            11702 ; 177  |
                            11703 ; 178  |
                            11704 ; 179  |struct Button {
                            11705 ; 180  |        WORD wButtonEvent;
                            11706 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11707 ; 182  |};
                            11708 ; 183  |
                            11709 ; 184  |struct Message {
                            11710 ; 185  |        WORD wMsgLength;
                            11711 ; 186  |        WORD wMsgCommand;
                            11712 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11713 ; 188  |};
                            11714 ; 189  |
                            11715 ; 190  |union EventTypes {
                            11716 ; 191  |        struct CMessage msg;
                            11717 ; 192  |        struct Button Button ;
                            11718 ; 193  |        struct Message Message;
                            11719 ; 194  |};
                            11720 ; 195  |
                            11721 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11722 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11723 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11724 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11725 ; 200  |
                            11726 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11727 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11728 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11729 ; 204  |
                            11730 ; 205  |#if DEBUG
                            11731 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11732 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11733 ; 208  |#else 
                            11734 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11735 ; 210  |#define DebugBuildAssert(x)    
                            11736 ; 211  |#endif
                            11737 ; 212  |
                            11738 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11739 ; 214  |//  #pragma asm
                            11740 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11741 ; 216  |//  #pragma endasm
                            11742 ; 217  |
                            11743 ; 218  |
                            11744 ; 219  |#ifdef COLOR_262K
                            11745 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11746 ; 221  |#elif defined(COLOR_65K)
                            11747 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11748 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11749 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11750 ; 225  |#endif
                            11751 ; 226  |    
                            11752 ; 227  |#endif // #ifndef _TYPES_H
                            11753 
                            11755 
                            11756 ; 29   |
                            11757 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11758 ; 31   |//   TIMER STMP Registers 
                            11759 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11760 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            11761 ; 34   |
                            11762 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            11763 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            11764 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            11765 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            11766 ; 39   |
                            11767 ; 40   |#define HW_TIMER_NUMBER_0 0
                            11768 ; 41   |#define HW_TIMER_NUMBER_1 1
                            11769 ; 42   |#define HW_TIMER_NUMBER_2 2
                            11770 ; 43   |#define HW_TIMER_NUMBER_3 3
                            11771 ; 44   |
                            11772 ; 45   |#define HW_TMRCSR 0
                            11773 ; 46   |#define HW_TMRCNTR 1
                            11774 ; 47   |
                            11775 ; 48   |
                            11776 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            11777 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            11778 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            11779 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            11780 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            11781 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            11782 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            11783 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            11784 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            11785 ; 58   |
                            11786 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            11787 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            11788 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            11789 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            11790 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            11791 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            11792 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            11793 ; 66   |
                            11794 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            11795 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            11796 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
                            11797 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            11798 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            11799 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            11800 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            11801 ; 74   |
                            11802 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            11803 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11804 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            11805 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            11806 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            11807 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            11808 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            11809 ; 82   |
                            11810 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            11811 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            11812 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            11813 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            11814 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            11815 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            11816 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            11817 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            11818 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            11819 ; 92   |
                            11820 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            11821 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            11822 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            11823 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            11824 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            11825 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            11826 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            11827 ; 100  |
                            11828 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            11829 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            11830 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            11831 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            11832 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            11833 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            11834 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            11835 ; 108  |
                            11836 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            11837 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            11838 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            11839 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            11840 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            11841 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            11842 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            11843 ; 116  |
                            11844 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            11845 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            11846 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            11847 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            11848 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            11849 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            11850 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            11851 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            11852 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            11853 ; 126  |
                            11854 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            11855 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            11856 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            11857 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            11858 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11859 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            11860 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            11861 ; 134  |
                            11862 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            11863 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            11864 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            11865 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            11866 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            11867 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            11868 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            11869 ; 142  |
                            11870 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            11871 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            11872 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            11873 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            11874 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            11875 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            11876 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            11877 ; 150  |
                            11878 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            11879 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            11880 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            11881 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            11882 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            11883 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            11884 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            11885 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            11886 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            11887 ; 160  |
                            11888 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            11889 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            11890 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            11891 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            11892 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            11893 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            11894 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            11895 ; 168  |
                            11896 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            11897 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            11898 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
                            11899 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            11900 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            11901 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            11902 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            11903 ; 176  |
                            11904 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            11905 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            11906 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11907 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            11908 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            11909 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            11910 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            11911 ; 184  |
                            11912 ; 185  |typedef union               
                            11913 ; 186  |{
                            11914 ; 187  |    struct {
                            11915 ; 188  |       int TIMER_ENABLE              :1;
                            11916 ; 189  |       int TIMER_INT_EN              :1;
                            11917 ; 190  |       int INVERT                    :1;
                            11918 ; 191  |       int TIMER_CONTROL             :3;
                            11919 ; 192  |       int RSVD0                     :1;
                            11920 ; 193  |       int TIMER_STATUS              :1;
                            11921 ; 194  |       int TIMER_MODE                :2;
                            11922 ; 195  |       int RSVD1                     :13;
                            11923 ; 196  |       int CLKGT                     :1;
                            11924 ; 197  |    } B;
                            11925 ; 198  |    int I;
                            11926 ; 199  |} timercsr_type;
                            11927 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            11928 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            11929 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            11930 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            11931 ; 204  |
                            11932 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            11933 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            11934 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            11935 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            11936 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            11937 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            11938 ; 211  |
                            11939 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            11940 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            11941 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            11942 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            11943 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            11944 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            11945 ; 218  |
                            11946 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            11947 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            11948 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            11949 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            11950 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            11951 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            11952 ; 225  |
                            11953 ; 226  |typedef union               
                            11954 ; 227  |{
                            11955 ; 228  |    struct {
                            11956 ; 229  |       int COUNT                    :24;
                            11957 ; 230  |    } B;
                            11958 ; 231  |    int I;
                            11959 ; 232  |} tmrcntr_type;
                            11960 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11961 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            11962 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            11963 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            11964 ; 237  |
                            11965 ; 238  |
                            11966 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            11967 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            11968 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            11969 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            11970 ; 243  |
                            11971 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            11972 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            11973 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            11974 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            11975 ; 248  |
                            11976 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            11977 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            11978 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            11979 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            11980 ; 253  |
                            11981 ; 254  |// Timer enable
                            11982 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            11983 ; 256  |// Timer clock gating control
                            11984 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            11985 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            11986 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            11987 ; 260  |#endif
                            11988 ; 261  |
                            11989 ; 262  |
                            11990 ; 263  |
                            11991 ; 264  |
                            11992 
                            11994 
                            11995 ; 36   |#include "regsusb20.h"
                            11996 
                            11998 
                            11999 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12000 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            12001 ; 3    |//;  File        : regsusb20ip.inc
                            12002 ; 4    |//;  Description : USB20 IP Register definition
                            12003 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12004 ; 6    |
                            12005 ; 7    |// The following naming conventions are followed in this file.
                            12006 ; 8    |// All registers are named using the format...
                            12007 ; 9    |//     HW_<module>_<regname>
                            12008 ; 10   |// where <module> is the module name which can be any of the following...
                            12009 ; 11   |//     USB20
                            12010 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            12011 ; 13   |// module name includes a number starting from 0 for the first instance of
                            12012 ; 14   |// that module)
                            12013 ; 15   |// <regname> is the specific register within that module
                            12014 ; 16   |// We also define the following...
                            12015 ; 17   |//     HW_<module>_<regname>_BITPOS
                            12016 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12017 ; 19   |//     HW_<module>_<regname>_SETMASK
                            12018 ; 20   |// which does something else, and
                            12019 ; 21   |//     HW_<module>_<regname>_CLRMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12020 ; 22   |// which does something else.
                            12021 ; 23   |// Other rules
                            12022 ; 24   |//     All caps
                            12023 ; 25   |//     Numeric identifiers start at 0
                            12024 ; 26   |
                            12025 ; 27   |#if !(defined(regsusb20inc))
                            12026 ; 28   |#define regsusb20inc 1
                            12027 ; 29   |
                            12028 ; 30   |#include "types.h"
                            12029 
                            12031 
                            12032 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12033 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12034 ; 3    |//
                            12035 ; 4    |// Filename: types.h
                            12036 ; 5    |// Description: Standard data types
                            12037 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12038 ; 7    |
                            12039 ; 8    |#ifndef _TYPES_H
                            12040 ; 9    |#define _TYPES_H
                            12041 ; 10   |
                            12042 ; 11   |// TODO:  move this outta here!
                            12043 ; 12   |#if !defined(NOERROR)
                            12044 ; 13   |#define NOERROR 0
                            12045 ; 14   |#define SUCCESS 0
                            12046 ; 15   |#endif 
                            12047 ; 16   |#if !defined(SUCCESS)
                            12048 ; 17   |#define SUCCESS  0
                            12049 ; 18   |#endif
                            12050 ; 19   |#if !defined(ERROR)
                            12051 ; 20   |#define ERROR   -1
                            12052 ; 21   |#endif
                            12053 ; 22   |#if !defined(FALSE)
                            12054 ; 23   |#define FALSE 0
                            12055 ; 24   |#endif
                            12056 ; 25   |#if !defined(TRUE)
                            12057 ; 26   |#define TRUE  1
                            12058 ; 27   |#endif
                            12059 ; 28   |
                            12060 ; 29   |#if !defined(NULL)
                            12061 ; 30   |#define NULL 0
                            12062 ; 31   |#endif
                            12063 ; 32   |
                            12064 ; 33   |#define MAX_INT     0x7FFFFF
                            12065 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12066 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12067 ; 36   |#define MAX_ULONG   (-1) 
                            12068 ; 37   |
                            12069 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12070 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12071 ; 40   |
                            12072 ; 41   |
                            12073 ; 42   |#define BYTE    unsigned char       // btVarName
                            12074 ; 43   |#define CHAR    signed char         // cVarName
                            12075 ; 44   |#define USHORT  unsigned short      // usVarName
                            12076 ; 45   |#define SHORT   unsigned short      // sVarName
                            12077 ; 46   |#define WORD    unsigned int        // wVarName
                            12078 ; 47   |#define INT     signed int          // iVarName
                            12079 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12080 ; 49   |#define LONG    signed long         // lVarName
                            12081 ; 50   |#define BOOL    unsigned int        // bVarName
                            12082 ; 51   |#define FRACT   _fract              // frVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12083 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12084 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12085 ; 54   |#define FLOAT   float               // fVarName
                            12086 ; 55   |#define DBL     double              // dVarName
                            12087 ; 56   |#define ENUM    enum                // eVarName
                            12088 ; 57   |#define CMX     _complex            // cmxVarName
                            12089 ; 58   |typedef WORD UCS3;                   // 
                            12090 ; 59   |
                            12091 ; 60   |#define UINT16  unsigned short
                            12092 ; 61   |#define UINT8   unsigned char   
                            12093 ; 62   |#define UINT32  unsigned long
                            12094 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12095 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12096 ; 65   |#define WCHAR   UINT16
                            12097 ; 66   |
                            12098 ; 67   |//UINT128 is 16 bytes or 6 words
                            12099 ; 68   |typedef struct UINT128_3500 {   
                            12100 ; 69   |    int val[6];     
                            12101 ; 70   |} UINT128_3500;
                            12102 ; 71   |
                            12103 ; 72   |#define UINT128   UINT128_3500
                            12104 ; 73   |
                            12105 ; 74   |// Little endian word packed byte strings:   
                            12106 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12107 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12108 ; 77   |// Little endian word packed byte strings:   
                            12109 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12110 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12111 ; 80   |
                            12112 ; 81   |// Declare Memory Spaces To Use When Coding
                            12113 ; 82   |// A. Sector Buffers
                            12114 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12115 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12116 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12117 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12118 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12119 ; 88   |// B. Media DDI Memory
                            12120 ; 89   |#define MEDIA_DDI_MEM _Y
                            12121 ; 90   |
                            12122 ; 91   |
                            12123 ; 92   |
                            12124 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12125 ; 94   |// Examples of circular pointers:
                            12126 ; 95   |//    INT CIRC cpiVarName
                            12127 ; 96   |//    DWORD CIRC cpdwVarName
                            12128 ; 97   |
                            12129 ; 98   |#define RETCODE INT                 // rcVarName
                            12130 ; 99   |
                            12131 ; 100  |// generic bitfield structure
                            12132 ; 101  |struct Bitfield {
                            12133 ; 102  |    unsigned int B0  :1;
                            12134 ; 103  |    unsigned int B1  :1;
                            12135 ; 104  |    unsigned int B2  :1;
                            12136 ; 105  |    unsigned int B3  :1;
                            12137 ; 106  |    unsigned int B4  :1;
                            12138 ; 107  |    unsigned int B5  :1;
                            12139 ; 108  |    unsigned int B6  :1;
                            12140 ; 109  |    unsigned int B7  :1;
                            12141 ; 110  |    unsigned int B8  :1;
                            12142 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12143 ; 112  |    unsigned int B10 :1;
                            12144 ; 113  |    unsigned int B11 :1;
                            12145 ; 114  |    unsigned int B12 :1;
                            12146 ; 115  |    unsigned int B13 :1;
                            12147 ; 116  |    unsigned int B14 :1;
                            12148 ; 117  |    unsigned int B15 :1;
                            12149 ; 118  |    unsigned int B16 :1;
                            12150 ; 119  |    unsigned int B17 :1;
                            12151 ; 120  |    unsigned int B18 :1;
                            12152 ; 121  |    unsigned int B19 :1;
                            12153 ; 122  |    unsigned int B20 :1;
                            12154 ; 123  |    unsigned int B21 :1;
                            12155 ; 124  |    unsigned int B22 :1;
                            12156 ; 125  |    unsigned int B23 :1;
                            12157 ; 126  |};
                            12158 ; 127  |
                            12159 ; 128  |union BitInt {
                            12160 ; 129  |        struct Bitfield B;
                            12161 ; 130  |        int        I;
                            12162 ; 131  |};
                            12163 ; 132  |
                            12164 ; 133  |#define MAX_MSG_LENGTH 10
                            12165 ; 134  |struct CMessage
                            12166 ; 135  |{
                            12167 ; 136  |        unsigned int m_uLength;
                            12168 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12169 ; 138  |};
                            12170 ; 139  |
                            12171 ; 140  |typedef struct {
                            12172 ; 141  |    WORD m_wLength;
                            12173 ; 142  |    WORD m_wMessage;
                            12174 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12175 ; 144  |} Message;
                            12176 ; 145  |
                            12177 ; 146  |struct MessageQueueDescriptor
                            12178 ; 147  |{
                            12179 ; 148  |        int *m_pBase;
                            12180 ; 149  |        int m_iModulo;
                            12181 ; 150  |        int m_iSize;
                            12182 ; 151  |        int *m_pHead;
                            12183 ; 152  |        int *m_pTail;
                            12184 ; 153  |};
                            12185 ; 154  |
                            12186 ; 155  |struct ModuleEntry
                            12187 ; 156  |{
                            12188 ; 157  |    int m_iSignaledEventMask;
                            12189 ; 158  |    int m_iWaitEventMask;
                            12190 ; 159  |    int m_iResourceOfCode;
                            12191 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12192 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12193 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12194 ; 163  |    int m_uTimeOutHigh;
                            12195 ; 164  |    int m_uTimeOutLow;
                            12196 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12197 ; 166  |};
                            12198 ; 167  |
                            12199 ; 168  |union WaitMask{
                            12200 ; 169  |    struct B{
                            12201 ; 170  |        unsigned int m_bNone     :1;
                            12202 ; 171  |        unsigned int m_bMessage  :1;
                            12203 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12204 ; 173  |        unsigned int m_bButton   :1;
                            12205 ; 174  |    } B;
                            12206 ; 175  |    int I;
                            12207 ; 176  |} ;
                            12208 ; 177  |
                            12209 ; 178  |
                            12210 ; 179  |struct Button {
                            12211 ; 180  |        WORD wButtonEvent;
                            12212 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12213 ; 182  |};
                            12214 ; 183  |
                            12215 ; 184  |struct Message {
                            12216 ; 185  |        WORD wMsgLength;
                            12217 ; 186  |        WORD wMsgCommand;
                            12218 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12219 ; 188  |};
                            12220 ; 189  |
                            12221 ; 190  |union EventTypes {
                            12222 ; 191  |        struct CMessage msg;
                            12223 ; 192  |        struct Button Button ;
                            12224 ; 193  |        struct Message Message;
                            12225 ; 194  |};
                            12226 ; 195  |
                            12227 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12228 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12229 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12230 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12231 ; 200  |
                            12232 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12233 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12234 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12235 ; 204  |
                            12236 ; 205  |#if DEBUG
                            12237 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12238 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12239 ; 208  |#else 
                            12240 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            12241 ; 210  |#define DebugBuildAssert(x)    
                            12242 ; 211  |#endif
                            12243 ; 212  |
                            12244 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12245 ; 214  |//  #pragma asm
                            12246 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12247 ; 216  |//  #pragma endasm
                            12248 ; 217  |
                            12249 ; 218  |
                            12250 ; 219  |#ifdef COLOR_262K
                            12251 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            12252 ; 221  |#elif defined(COLOR_65K)
                            12253 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            12254 ; 223  |#else
                            12255 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            12256 ; 225  |#endif
                            12257 ; 226  |    
                            12258 ; 227  |#endif // #ifndef _TYPES_H
                            12259 
                            12261 
                            12262 ; 31   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12263 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12264 ; 33   |//   USB2.0 STMP Registers 
                            12265 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12266 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            12267 ; 36   |
                            12268 ; 37   |
                            12269 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            12270 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            12271 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            12272 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            12273 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            12274 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            12275 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            12276 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            12277 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            12278 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            12279 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            12280 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            12281 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            12282 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            12283 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            12284 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            12285 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            12286 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            12287 ; 56   |
                            12288 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            12289 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            12290 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            12291 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            12292 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            12293 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            12294 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            12295 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            12296 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            12297 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            12298 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            12299 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            12300 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            12301 ; 70   |
                            12302 ; 71   |
                            12303 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            12304 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            12305 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            12306 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            12307 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            12308 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            12309 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            12310 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            12311 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            12312 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            12313 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            12314 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            12315 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            12316 ; 85   |
                            12317 ; 86   |typedef union               
                            12318 ; 87   |{
                            12319 ; 88   |    struct {
                            12320 ; 89   |        int USBEN          :1;
                            12321 ; 90   |        int WAKEUPIRQ      :1;
                            12322 ; 91   |        int WAKEUPIE       :1;
                            12323 ; 92   |        int VBUSCXIRQ      :1;
                            12324 ; 93   |        int VBUSCXIE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12325 ; 94   |        int VBUSDISCXIRQ   :1;
                            12326 ; 95   |        int VBUSDISCXIE    :1;
                            12327 ; 96   |        int CLKOFF         :1;
                            12328 ; 97   |        int SUSP           :1;
                            12329 ; 98   |        int SUSPF          :1;
                            12330 ; 99   |        int UTMITST        :1;
                            12331 ; 100  |        int ARCCONNECT     :1;
                            12332 ; 101  |        int PLUGGEDIN_EN   :1;
                            12333 ; 102  |        int PLUGGEDIN      :1;
                            12334 ; 103  |        int                :8;
                            12335 ; 104  |        int HOSTDISCONNECT :1;
                            12336 ; 105  |        int VBUSSENSE      :1;
                            12337 ; 106  |    } B;
                            12338 ; 107  |    int I;
                            12339 ; 108  |} usbcsr_type;
                            12340 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            12341 ; 110  |
                            12342 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            12343 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            12344 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            12345 ; 114  |
                            12346 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            12347 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            12348 ; 117  |
                            12349 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            12350 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            12351 ; 120  |
                            12352 ; 121  |typedef union               
                            12353 ; 122  |{
                            12354 ; 123  |    struct {
                            12355 ; 124  |        int ADD            :16;
                            12356 ; 125  |        int MEM            :2;
                            12357 ; 126  |        int                :6;
                            12358 ; 127  |    } B;
                            12359 ; 128  |    int I;
                            12360 ; 129  |} usbdmaoff_type;
                            12361 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            12362 ; 131  |
                            12363 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            12364 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            12365 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            12366 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            12367 ; 136  |
                            12368 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            12369 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            12370 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            12371 ; 140  |
                            12372 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            12373 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            12374 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            12375 ; 144  |
                            12376 ; 145  |typedef union               
                            12377 ; 146  |{
                            12378 ; 147  |    struct {
                            12379 ; 148  |        int ADD            :9;
                            12380 ; 149  |        int                :7;
                            12381 ; 150  |        int RWB            :1;
                            12382 ; 151  |        int                :14;
                            12383 ; 152  |        int KICK           :1;
                            12384 ; 153  |    } B;
                            12385 ; 154  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12386 ; 155  |} usbarcaccess_type;
                            12387 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            12388 ; 157  |
                            12389 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            12390 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            12391 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            12392 ; 161  |
                            12393 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            12394 ; 163  |
                            12395 ; 164  |typedef union               
                            12396 ; 165  |{
                            12397 ; 166  |    struct {
                            12398 ; 167  |        int DATA           :16;
                            12399 ; 168  |        int                :8;
                            12400 ; 169  |    } B;
                            12401 ; 170  |    int I;
                            12402 ; 171  |} usbarcdatalow_type;
                            12403 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            12404 ; 173  |
                            12405 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            12406 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            12407 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            12408 ; 177  |
                            12409 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            12410 ; 179  |
                            12411 ; 180  |typedef union               
                            12412 ; 181  |{
                            12413 ; 182  |    struct {
                            12414 ; 183  |        int DATA           :16;
                            12415 ; 184  |        int                :8;
                            12416 ; 185  |    } B;
                            12417 ; 186  |    int I;
                            12418 ; 187  |} usbarcdatahigh_type;
                            12419 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            12420 ; 189  |
                            12421 ; 190  |
                            12422 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12423 ; 192  |//   USB2.0 ARC Registers 
                            12424 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12425 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            12426 ; 195  |
                            12427 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            12428 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            12429 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            12430 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            12431 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            12432 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            12433 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            12434 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            12435 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            12436 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            12437 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            12438 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            12439 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            12440 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            12441 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            12442 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            12443 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            12444 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            12445 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12446 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            12447 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            12448 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            12449 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            12450 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            12451 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            12452 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            12453 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            12454 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            12455 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            12456 ; 225  |
                            12457 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            12458 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            12459 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            12460 ; 229  |
                            12461 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            12462 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            12463 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            12464 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            12465 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            12466 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            12467 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            12468 ; 237  |
                            12469 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            12470 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            12471 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            12472 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            12473 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            12474 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            12475 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            12476 ; 245  |
                            12477 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            12478 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            12479 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            12480 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            12481 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            12482 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            12483 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            12484 ; 253  |
                            12485 ; 254  |typedef union               
                            12486 ; 255  |{
                            12487 ; 256  |    struct {
                            12488 ; 257  |        int N_PORTS         :4;
                            12489 ; 258  |        int PPC             :1;
                            12490 ; 259  |        int                 :3;
                            12491 ; 260  |        int N_PCC           :4;
                            12492 ; 261  |        int N_CC            :4;
                            12493 ; 262  |        int PI              :1;
                            12494 ; 263  |        int                 :3;
                            12495 ; 264  |        int N_PTT           :4;
                            12496 ; 265  |        int N_TT            :4;
                            12497 ; 266  |        int                 :20;
                            12498 ; 267  |    } B;
                            12499 ; 268  |    DWORD I;
                            12500 ; 269  |} hcsparams_type;
                            12501 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            12502 ; 271  |
                            12503 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            12504 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            12505 ; 274  |
                            12506 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            12507 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12508 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            12509 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            12510 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            12511 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            12512 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            12513 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            12514 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            12515 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            12516 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            12517 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            12518 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            12519 ; 288  |
                            12520 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            12521 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            12522 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            12523 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            12524 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            12525 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            12526 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            12527 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            12528 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            12529 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            12530 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            12531 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            12532 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            12533 ; 302  |
                            12534 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            12535 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            12536 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            12537 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            12538 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            12539 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            12540 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            12541 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            12542 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            12543 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            12544 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            12545 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            12546 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            12547 ; 316  |
                            12548 ; 317  |typedef union               
                            12549 ; 318  |{
                            12550 ; 319  |    struct {
                            12551 ; 320  |        int RS              :1;
                            12552 ; 321  |        int RST             :1;
                            12553 ; 322  |        int FS0             :1;
                            12554 ; 323  |        int FS1             :1;
                            12555 ; 324  |        int PSE             :1;
                            12556 ; 325  |        int ASE             :1;
                            12557 ; 326  |        int IAA             :1;
                            12558 ; 327  |        int LR              :1;
                            12559 ; 328  |        int ASP0            :1;
                            12560 ; 329  |        int ASP1            :1;
                            12561 ; 330  |        int                 :1;
                            12562 ; 331  |        int ASPE            :1;
                            12563 ; 332  |        int                 :3;
                            12564 ; 333  |        int FS2             :1;
                            12565 ; 334  |        int ITC             :8;
                            12566 ; 335  |        int                 :24;
                            12567 ; 336  |    } B;
                            12568 ; 337  |    DWORD I;
                            12569 ; 338  |} usbcmd_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12570 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            12571 ; 340  |
                            12572 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            12573 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            12574 ; 343  |
                            12575 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            12576 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            12577 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            12578 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            12579 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            12580 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            12581 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            12582 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            12583 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            12584 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            12585 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            12586 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            12587 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            12588 ; 357  |
                            12589 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            12590 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            12591 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            12592 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            12593 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            12594 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            12595 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            12596 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            12597 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            12598 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            12599 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            12600 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            12601 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            12602 ; 371  |
                            12603 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            12604 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            12605 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            12606 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            12607 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            12608 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            12609 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            12610 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            12611 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            12612 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            12613 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            12614 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            12615 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            12616 ; 385  |
                            12617 ; 386  |
                            12618 ; 387  |typedef union               
                            12619 ; 388  |{
                            12620 ; 389  |    struct {
                            12621 ; 390  |        int UI              :1;
                            12622 ; 391  |        int UEI             :1;
                            12623 ; 392  |        int PCI             :1;
                            12624 ; 393  |        int FRI             :1;
                            12625 ; 394  |        int SEI             :1;
                            12626 ; 395  |        int AAI             :1;
                            12627 ; 396  |        int URI             :1;
                            12628 ; 397  |        int STI             :1;
                            12629 ; 398  |        int SLI             :1;
                            12630 ; 399  |        int                 :3;
                            12631 ; 400  |        int HCH             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12632 ; 401  |        int RCL             :1;
                            12633 ; 402  |        int PS              :1;
                            12634 ; 403  |        int AS              :1;
                            12635 ; 404  |        int                 :24;
                            12636 ; 405  |    } B;
                            12637 ; 406  |    DWORD I;
                            12638 ; 407  |} usbsts_type;
                            12639 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            12640 ; 409  |
                            12641 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            12642 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            12643 ; 412  |
                            12644 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            12645 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            12646 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            12647 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            12648 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            12649 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            12650 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            12651 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            12652 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            12653 ; 422  |
                            12654 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            12655 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            12656 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            12657 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            12658 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            12659 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            12660 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            12661 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            12662 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            12663 ; 432  |
                            12664 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            12665 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            12666 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            12667 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            12668 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            12669 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            12670 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            12671 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            12672 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            12673 ; 442  |
                            12674 ; 443  |
                            12675 ; 444  |typedef union               
                            12676 ; 445  |{
                            12677 ; 446  |    struct {
                            12678 ; 447  |        int UE              :1;
                            12679 ; 448  |        int UEE             :1;
                            12680 ; 449  |        int PCE             :1;
                            12681 ; 450  |        int FRE             :1;
                            12682 ; 451  |        int SEE             :1;
                            12683 ; 452  |        int AAE             :1;
                            12684 ; 453  |        int URE             :1;
                            12685 ; 454  |        int STE             :1;
                            12686 ; 455  |        int SLE             :1;
                            12687 ; 456  |        int                 :39;
                            12688 ; 457  |    } B;
                            12689 ; 458  |    DWORD I;
                            12690 ; 459  |} usbintr_type;
                            12691 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            12692 ; 461  |
                            12693 ; 462  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12694 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            12695 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            12696 ; 465  |
                            12697 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            12698 ; 467  |
                            12699 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            12700 ; 469  |
                            12701 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            12702 ; 471  |
                            12703 ; 472  |typedef union               
                            12704 ; 473  |{
                            12705 ; 474  |    struct {
                            12706 ; 475  |        int                 :25;
                            12707 ; 476  |        int ADD             :7;
                            12708 ; 477  |        int                 :16;
                            12709 ; 478  |    } B;
                            12710 ; 479  |    DWORD I;
                            12711 ; 480  |} devaddr_type;
                            12712 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            12713 ; 482  |
                            12714 ; 483  |
                            12715 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            12716 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            12717 ; 486  |
                            12718 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            12719 ; 488  |
                            12720 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            12721 ; 490  |
                            12722 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            12723 ; 492  |
                            12724 ; 493  |typedef union               
                            12725 ; 494  |{
                            12726 ; 495  |    struct {
                            12727 ; 496  |        int                 :10;
                            12728 ; 497  |        int ADD             :22;
                            12729 ; 498  |        int                 :16;
                            12730 ; 499  |    } B;
                            12731 ; 500  |    DWORD I;
                            12732 ; 501  |} endptlistaddr_type;
                            12733 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            12734 ; 503  |
                            12735 ; 504  |
                            12736 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            12737 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            12738 ; 507  |
                            12739 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            12740 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            12741 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            12742 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            12743 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            12744 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            12745 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            12746 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            12747 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            12748 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            12749 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            12750 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            12751 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            12752 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            12753 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            12754 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12755 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            12756 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            12757 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            12758 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            12759 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            12760 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            12761 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            12762 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            12763 ; 532  |
                            12764 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            12765 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            12766 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            12767 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            12768 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            12769 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            12770 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            12771 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            12772 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            12773 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            12774 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            12775 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            12776 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            12777 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            12778 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            12779 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            12780 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            12781 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            12782 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            12783 ; 552  |
                            12784 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            12785 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            12786 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            12787 ; 556  |
                            12788 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            12789 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            12790 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            12791 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            12792 ; 561  |
                            12793 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            12794 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            12795 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            12796 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            12797 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            12798 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            12799 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            12800 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            12801 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            12802 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            12803 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            12804 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            12805 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            12806 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            12807 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            12808 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            12809 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            12810 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            12811 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            12812 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            12813 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            12814 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            12815 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            12816 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12817 ; 586  |
                            12818 ; 587  |typedef union               
                            12819 ; 588  |{
                            12820 ; 589  |    struct {
                            12821 ; 590  |        int CCS             :1;
                            12822 ; 591  |        int CSC             :1;
                            12823 ; 592  |        int PE              :1;
                            12824 ; 593  |        int PEC             :1;
                            12825 ; 594  |        int OCA             :1;
                            12826 ; 595  |        int OCC             :1;
                            12827 ; 596  |        int FPR             :1;
                            12828 ; 597  |        int SUSP            :1;
                            12829 ; 598  |        int PR              :1;
                            12830 ; 599  |        int HSP             :1;
                            12831 ; 600  |        int LS              :2;
                            12832 ; 601  |        int PP              :1;
                            12833 ; 602  |        int PO              :1;
                            12834 ; 603  |        int PIC             :2;
                            12835 ; 604  |        int PTC             :4;
                            12836 ; 605  |        int WKCN            :1;
                            12837 ; 606  |        int WKDS            :1;
                            12838 ; 607  |        int WKOC            :1;
                            12839 ; 608  |        int PHCD            :1;
                            12840 ; 609  |        int PFSC            :1;
                            12841 ; 610  |        int                 :1;
                            12842 ; 611  |        int PSPD            :2;
                            12843 ; 612  |        int                 :1;
                            12844 ; 613  |        int PTW             :1;
                            12845 ; 614  |        int STS             :1;
                            12846 ; 615  |        int PTS             :1;
                            12847 ; 616  |        int                 :16;
                            12848 ; 617  |    } B;
                            12849 ; 618  |    DWORD I;
                            12850 ; 619  |} portsc1_type;
                            12851 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            12852 ; 621  |
                            12853 ; 622  |
                            12854 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            12855 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            12856 ; 625  |
                            12857 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            12858 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            12859 ; 628  |
                            12860 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            12861 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            12862 ; 631  |
                            12863 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            12864 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            12865 ; 634  |
                            12866 ; 635  |typedef union               
                            12867 ; 636  |{
                            12868 ; 637  |    struct {
                            12869 ; 638  |        int CM              :2;
                            12870 ; 639  |        int ES              :1;
                            12871 ; 640  |        int                 :46;
                            12872 ; 641  |    } B;
                            12873 ; 642  |    DWORD I;
                            12874 ; 643  |} usbmode_type;
                            12875 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            12876 ; 645  |
                            12877 ; 646  |
                            12878 ; 647  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12879 ; 648  |//  The following endpoint equates are common for the following registers
                            12880 ; 649  |
                            12881 ; 650  |#define ENDPOINT0_BITPOS (0)
                            12882 ; 651  |#define ENDPOINT1_BITPOS (1)
                            12883 ; 652  |#define ENDPOINT2_BITPOS (2)
                            12884 ; 653  |#define ENDPOINT3_BITPOS (3)
                            12885 ; 654  |#define ENDPOINT4_BITPOS (4)
                            12886 ; 655  |#define ENDPOINT5_BITPOS (5)
                            12887 ; 656  |#define ENDPOINT6_BITPOS (6)
                            12888 ; 657  |#define ENDPOINT7_BITPOS (7)
                            12889 ; 658  |#define ENDPOINT8_BITPOS (8)
                            12890 ; 659  |#define ENDPOINT9_BITPOS (9)
                            12891 ; 660  |#define ENDPOINT10_BITPOS (10)
                            12892 ; 661  |#define ENDPOINT11_BITPOS (11)
                            12893 ; 662  |#define ENDPOINT12_BITPOS (12)
                            12894 ; 663  |#define ENDPOINT13_BITPOS (13)
                            12895 ; 664  |#define ENDPOINT14_BITPOS (14)
                            12896 ; 665  |#define ENDPOINT15_BITPOS (15)
                            12897 ; 666  |
                            12898 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            12899 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            12900 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            12901 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            12902 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            12903 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            12904 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            12905 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            12906 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            12907 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            12908 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            12909 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            12910 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            12911 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            12912 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            12913 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            12914 ; 683  |
                            12915 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            12916 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            12917 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            12918 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            12919 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            12920 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            12921 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            12922 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            12923 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            12924 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            12925 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            12926 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            12927 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            12928 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            12929 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            12930 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            12931 ; 700  |
                            12932 ; 701  |typedef union               
                            12933 ; 702  |{
                            12934 ; 703  |    struct {
                            12935 ; 704  |        int EP0              :1;
                            12936 ; 705  |        int EP1              :1;
                            12937 ; 706  |        int EP2              :1;
                            12938 ; 707  |        int EP3              :1;
                            12939 ; 708  |        int EP4              :1;
                            12940 ; 709  |        int EP5              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12941 ; 710  |        int EP6              :1;
                            12942 ; 711  |        int EP7              :1;
                            12943 ; 712  |        int EP8              :1;
                            12944 ; 713  |        int EP9              :1;
                            12945 ; 714  |        int EP10             :1;
                            12946 ; 715  |        int EP11             :1;
                            12947 ; 716  |        int EP12             :1;
                            12948 ; 717  |        int EP13             :1;
                            12949 ; 718  |        int EP14             :1;
                            12950 ; 719  |        int EP15             :1;
                            12951 ; 720  |        int                  :32;
                            12952 ; 721  |    } B;
                            12953 ; 722  |    DWORD I;
                            12954 ; 723  |} endpsetupstat_type;
                            12955 ; 724  |
                            12956 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            12957 ; 726  |
                            12958 ; 727  |typedef union               
                            12959 ; 728  |{
                            12960 ; 729  |    struct {
                            12961 ; 730  |        int EP0              :1;
                            12962 ; 731  |        int EP1              :1;
                            12963 ; 732  |        int EP2              :1;
                            12964 ; 733  |        int EP3              :1;
                            12965 ; 734  |        int EP4              :1;
                            12966 ; 735  |        int EP5              :1;
                            12967 ; 736  |        int EP6              :1;
                            12968 ; 737  |        int EP7              :1;
                            12969 ; 738  |        int EP8              :1;
                            12970 ; 739  |        int EP9              :1;
                            12971 ; 740  |        int EP10             :1;
                            12972 ; 741  |        int EP11             :1;
                            12973 ; 742  |        int EP12             :1;
                            12974 ; 743  |        int EP13             :1;
                            12975 ; 744  |        int EP14             :1;
                            12976 ; 745  |        int EP15             :1;
                            12977 ; 746  |        int                  :8;
                            12978 ; 747  |    } B;
                            12979 ; 748  |    WORD I;
                            12980 ; 749  |} endpt_type;
                            12981 
                            13019 
                            13020 ; 750  |
                            13021 ; 751  |typedef union
                            13022 ; 752  |{
                            13023 ; 753  |   struct {
                            13024 ; 754  |       endpt_type  RX;
                            13025 ; 755  |       endpt_type  TX;
                            13026 ; 756  |   } W;
                            13027 ; 757  |   DWORD DW;
                            13028 ; 758  |} endptrxtx_type;
                            13029 ; 759  |
                            13030 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            13031 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            13032 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            13033 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            13034 ; 764  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13035 ; 765  |
                            13036 ; 766  |
                            13037 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            13038 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            13039 ; 769  |
                            13040 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            13041 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            13042 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            13043 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            13044 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            13045 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            13046 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            13047 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            13048 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            13049 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            13050 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            13051 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            13052 ; 782  |
                            13053 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            13054 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            13055 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            13056 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            13057 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            13058 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            13059 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            13060 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            13061 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            13062 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            13063 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            13064 ; 794  |
                            13065 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            13066 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            13067 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            13068 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            13069 ; 799  |
                            13070 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            13071 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            13072 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            13073 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            13074 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            13075 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            13076 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            13077 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            13078 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            13079 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            13080 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            13081 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            13082 ; 812  |
                            13083 ; 813  |
                            13084 ; 814  |typedef union               
                            13085 ; 815  |{
                            13086 ; 816  |    struct {
                            13087 ; 817  |        int RXS             :1;
                            13088 ; 818  |        int RXD             :1;
                            13089 ; 819  |        int RXT             :2;
                            13090 ; 820  |        int                 :1;
                            13091 ; 821  |        int RXI             :1;
                            13092 ; 822  |        int RXR             :1;
                            13093 ; 823  |        int RXE             :1;
                            13094 ; 824  |        int                 :8;
                            13095 ; 825  |        int TXS             :1;
                            13096 ; 826  |        int TXD             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13097 ; 827  |        int TXT             :2;
                            13098 ; 828  |        int                 :1;
                            13099 ; 829  |        int TXI             :1;
                            13100 ; 830  |        int TXR             :1;
                            13101 ; 831  |        int TXE             :1;
                            13102 ; 832  |        int                 :24;
                            13103 ; 833  |    } B;
                            13104 ; 834  |    DWORD I;
                            13105 ; 835  |} endptctrl_type;
                            13106 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            13107 ; 837  |
                            13108 ; 838  |#endif
                            13109 ; 839  |
                            13110 ; 840  |
                            13111 
                            13113 
                            13114 ; 37   |#include "regsusb20phy.h"
                            13115 
                            13117 
                            13118 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13119 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            13120 ; 3    |//;  File        : regsusbphy.inc
                            13121 ; 4    |//;  Description : USB20 PHY Register definition
                            13122 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            13123 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13124 ; 7    |
                            13125 ; 8    |// The following naming conventions are followed in this file.
                            13126 ; 9    |// All registers are named using the format...
                            13127 ; 10   |//     HW_<module>_<regname>
                            13128 ; 11   |// where <module> is the module name which can be any of the following...
                            13129 ; 12   |//     USB20
                            13130 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            13131 ; 14   |// module name includes a number starting from 0 for the first instance of
                            13132 ; 15   |// that module)
                            13133 ; 16   |// <regname> is the specific register within that module
                            13134 ; 17   |// We also define the following...
                            13135 ; 18   |//     HW_<module>_<regname>_BITPOS
                            13136 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            13137 ; 20   |//     HW_<module>_<regname>_SETMASK
                            13138 ; 21   |// which does something else, and
                            13139 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            13140 ; 23   |// which does something else.
                            13141 ; 24   |// Other rules
                            13142 ; 25   |//     All caps
                            13143 ; 26   |//     Numeric identifiers start at 0
                            13144 ; 27   |
                            13145 ; 28   |#if !(defined(regsusbphyinc))
                            13146 ; 29   |#define regsusbphyinc 1
                            13147 ; 30   |
                            13148 ; 31   |#include "types.h"
                            13149 
                            13151 
                            13152 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13153 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13154 ; 3    |//
                            13155 ; 4    |// Filename: types.h
                            13156 ; 5    |// Description: Standard data types
                            13157 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13158 ; 7    |
                            13159 ; 8    |#ifndef _TYPES_H
                            13160 ; 9    |#define _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13161 ; 10   |
                            13162 ; 11   |// TODO:  move this outta here!
                            13163 ; 12   |#if !defined(NOERROR)
                            13164 ; 13   |#define NOERROR 0
                            13165 ; 14   |#define SUCCESS 0
                            13166 ; 15   |#endif 
                            13167 ; 16   |#if !defined(SUCCESS)
                            13168 ; 17   |#define SUCCESS  0
                            13169 ; 18   |#endif
                            13170 ; 19   |#if !defined(ERROR)
                            13171 ; 20   |#define ERROR   -1
                            13172 ; 21   |#endif
                            13173 ; 22   |#if !defined(FALSE)
                            13174 ; 23   |#define FALSE 0
                            13175 ; 24   |#endif
                            13176 ; 25   |#if !defined(TRUE)
                            13177 ; 26   |#define TRUE  1
                            13178 ; 27   |#endif
                            13179 ; 28   |
                            13180 ; 29   |#if !defined(NULL)
                            13181 ; 30   |#define NULL 0
                            13182 ; 31   |#endif
                            13183 ; 32   |
                            13184 ; 33   |#define MAX_INT     0x7FFFFF
                            13185 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13186 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13187 ; 36   |#define MAX_ULONG   (-1) 
                            13188 ; 37   |
                            13189 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13190 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13191 ; 40   |
                            13192 ; 41   |
                            13193 ; 42   |#define BYTE    unsigned char       // btVarName
                            13194 ; 43   |#define CHAR    signed char         // cVarName
                            13195 ; 44   |#define USHORT  unsigned short      // usVarName
                            13196 ; 45   |#define SHORT   unsigned short      // sVarName
                            13197 ; 46   |#define WORD    unsigned int        // wVarName
                            13198 ; 47   |#define INT     signed int          // iVarName
                            13199 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13200 ; 49   |#define LONG    signed long         // lVarName
                            13201 ; 50   |#define BOOL    unsigned int        // bVarName
                            13202 ; 51   |#define FRACT   _fract              // frVarName
                            13203 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13204 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13205 ; 54   |#define FLOAT   float               // fVarName
                            13206 ; 55   |#define DBL     double              // dVarName
                            13207 ; 56   |#define ENUM    enum                // eVarName
                            13208 ; 57   |#define CMX     _complex            // cmxVarName
                            13209 ; 58   |typedef WORD UCS3;                   // 
                            13210 ; 59   |
                            13211 ; 60   |#define UINT16  unsigned short
                            13212 ; 61   |#define UINT8   unsigned char   
                            13213 ; 62   |#define UINT32  unsigned long
                            13214 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            13215 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            13216 ; 65   |#define WCHAR   UINT16
                            13217 ; 66   |
                            13218 ; 67   |//UINT128 is 16 bytes or 6 words
                            13219 ; 68   |typedef struct UINT128_3500 {   
                            13220 ; 69   |    int val[6];     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13221 ; 70   |} UINT128_3500;
                            13222 ; 71   |
                            13223 ; 72   |#define UINT128   UINT128_3500
                            13224 ; 73   |
                            13225 ; 74   |// Little endian word packed byte strings:   
                            13226 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13227 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13228 ; 77   |// Little endian word packed byte strings:   
                            13229 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13230 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13231 ; 80   |
                            13232 ; 81   |// Declare Memory Spaces To Use When Coding
                            13233 ; 82   |// A. Sector Buffers
                            13234 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13235 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13236 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13237 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13238 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13239 ; 88   |// B. Media DDI Memory
                            13240 ; 89   |#define MEDIA_DDI_MEM _Y
                            13241 ; 90   |
                            13242 ; 91   |
                            13243 ; 92   |
                            13244 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13245 ; 94   |// Examples of circular pointers:
                            13246 ; 95   |//    INT CIRC cpiVarName
                            13247 ; 96   |//    DWORD CIRC cpdwVarName
                            13248 ; 97   |
                            13249 ; 98   |#define RETCODE INT                 // rcVarName
                            13250 ; 99   |
                            13251 ; 100  |// generic bitfield structure
                            13252 ; 101  |struct Bitfield {
                            13253 ; 102  |    unsigned int B0  :1;
                            13254 ; 103  |    unsigned int B1  :1;
                            13255 ; 104  |    unsigned int B2  :1;
                            13256 ; 105  |    unsigned int B3  :1;
                            13257 ; 106  |    unsigned int B4  :1;
                            13258 ; 107  |    unsigned int B5  :1;
                            13259 ; 108  |    unsigned int B6  :1;
                            13260 ; 109  |    unsigned int B7  :1;
                            13261 ; 110  |    unsigned int B8  :1;
                            13262 ; 111  |    unsigned int B9  :1;
                            13263 ; 112  |    unsigned int B10 :1;
                            13264 ; 113  |    unsigned int B11 :1;
                            13265 ; 114  |    unsigned int B12 :1;
                            13266 ; 115  |    unsigned int B13 :1;
                            13267 ; 116  |    unsigned int B14 :1;
                            13268 ; 117  |    unsigned int B15 :1;
                            13269 ; 118  |    unsigned int B16 :1;
                            13270 ; 119  |    unsigned int B17 :1;
                            13271 ; 120  |    unsigned int B18 :1;
                            13272 ; 121  |    unsigned int B19 :1;
                            13273 ; 122  |    unsigned int B20 :1;
                            13274 ; 123  |    unsigned int B21 :1;
                            13275 ; 124  |    unsigned int B22 :1;
                            13276 ; 125  |    unsigned int B23 :1;
                            13277 ; 126  |};
                            13278 ; 127  |
                            13279 ; 128  |union BitInt {
                            13280 ; 129  |        struct Bitfield B;
                            13281 ; 130  |        int        I;
                            13282 ; 131  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13283 ; 132  |
                            13284 ; 133  |#define MAX_MSG_LENGTH 10
                            13285 ; 134  |struct CMessage
                            13286 ; 135  |{
                            13287 ; 136  |        unsigned int m_uLength;
                            13288 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13289 ; 138  |};
                            13290 ; 139  |
                            13291 ; 140  |typedef struct {
                            13292 ; 141  |    WORD m_wLength;
                            13293 ; 142  |    WORD m_wMessage;
                            13294 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13295 ; 144  |} Message;
                            13296 ; 145  |
                            13297 ; 146  |struct MessageQueueDescriptor
                            13298 ; 147  |{
                            13299 ; 148  |        int *m_pBase;
                            13300 ; 149  |        int m_iModulo;
                            13301 ; 150  |        int m_iSize;
                            13302 ; 151  |        int *m_pHead;
                            13303 ; 152  |        int *m_pTail;
                            13304 ; 153  |};
                            13305 ; 154  |
                            13306 ; 155  |struct ModuleEntry
                            13307 ; 156  |{
                            13308 ; 157  |    int m_iSignaledEventMask;
                            13309 ; 158  |    int m_iWaitEventMask;
                            13310 ; 159  |    int m_iResourceOfCode;
                            13311 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13312 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            13313 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13314 ; 163  |    int m_uTimeOutHigh;
                            13315 ; 164  |    int m_uTimeOutLow;
                            13316 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13317 ; 166  |};
                            13318 ; 167  |
                            13319 ; 168  |union WaitMask{
                            13320 ; 169  |    struct B{
                            13321 ; 170  |        unsigned int m_bNone     :1;
                            13322 ; 171  |        unsigned int m_bMessage  :1;
                            13323 ; 172  |        unsigned int m_bTimer    :1;
                            13324 ; 173  |        unsigned int m_bButton   :1;
                            13325 ; 174  |    } B;
                            13326 ; 175  |    int I;
                            13327 ; 176  |} ;
                            13328 ; 177  |
                            13329 ; 178  |
                            13330 ; 179  |struct Button {
                            13331 ; 180  |        WORD wButtonEvent;
                            13332 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13333 ; 182  |};
                            13334 ; 183  |
                            13335 ; 184  |struct Message {
                            13336 ; 185  |        WORD wMsgLength;
                            13337 ; 186  |        WORD wMsgCommand;
                            13338 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13339 ; 188  |};
                            13340 ; 189  |
                            13341 ; 190  |union EventTypes {
                            13342 ; 191  |        struct CMessage msg;
                            13343 ; 192  |        struct Button Button ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13344 ; 193  |        struct Message Message;
                            13345 ; 194  |};
                            13346 ; 195  |
                            13347 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13348 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13349 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13350 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13351 ; 200  |
                            13352 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13353 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13354 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13355 ; 204  |
                            13356 ; 205  |#if DEBUG
                            13357 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13358 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13359 ; 208  |#else 
                            13360 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            13361 ; 210  |#define DebugBuildAssert(x)    
                            13362 ; 211  |#endif
                            13363 ; 212  |
                            13364 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13365 ; 214  |//  #pragma asm
                            13366 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13367 ; 216  |//  #pragma endasm
                            13368 ; 217  |
                            13369 ; 218  |
                            13370 ; 219  |#ifdef COLOR_262K
                            13371 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            13372 ; 221  |#elif defined(COLOR_65K)
                            13373 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            13374 ; 223  |#else
                            13375 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            13376 ; 225  |#endif
                            13377 ; 226  |    
                            13378 ; 227  |#endif // #ifndef _TYPES_H
                            13379 
                            13381 
                            13382 ; 32   |
                            13383 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13384 ; 34   |//   USB2.0 PHY STMP Registers 
                            13385 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13386 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            13387 ; 37   |
                            13388 ; 38   |
                            13389 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            13390 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            13391 ; 41   |
                            13392 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            13393 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            13394 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            13395 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            13396 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            13397 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            13398 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            13399 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            13400 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            13401 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            13402 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13403 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            13404 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            13405 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            13406 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            13407 ; 57   |
                            13408 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            13409 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            13410 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            13411 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            13412 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            13413 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            13414 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            13415 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            13416 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            13417 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            13418 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            13419 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            13420 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            13421 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            13422 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            13423 ; 73   |
                            13424 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            13425 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            13426 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            13427 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            13428 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            13429 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            13430 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            13431 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            13432 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            13433 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            13434 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            13435 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            13436 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            13437 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            13438 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            13439 ; 89   |
                            13440 ; 90   |typedef union               
                            13441 ; 91   |{
                            13442 ; 92   |    struct {
                            13443 ; 93   |        int RSVD0          :5;
                            13444 ; 94   |        int TXDISCON1500   :1;
                            13445 ; 95   |        int PLLVCOPWD      :1;
                            13446 ; 96   |        int PLLVCPPWD      :1;
                            13447 ; 97   |        int RSVD1          :2;
                            13448 ; 98   |        int TXPWDFS        :1;
                            13449 ; 99   |        int TXPWDIBIAS     :1;
                            13450 ; 100  |        int TXPWDV2I       :1;
                            13451 ; 101  |        int TXPWDVBG       :1;
                            13452 ; 102  |        int TXPWDCOMP      :1;
                            13453 ; 103  |        int RSVD2          :1;
                            13454 ; 104  |        int RXPWDDISCONDET :1;
                            13455 ; 105  |        int RXPWDENV       :1;
                            13456 ; 106  |        int RXPWD1PT1      :1;
                            13457 ; 107  |        int RXPWDDIFF      :1;
                            13458 ; 108  |        int RXPWDRX        :1;
                            13459 ; 109  |        int RSVD3          :1;
                            13460 ; 110  |        int PWDIBIAS       :1;
                            13461 ; 111  |        int REGRESET       :1;
                            13462 ; 112  |    } B;
                            13463 ; 113  |    int I;
                            13464 ; 114  |} usbphypwd_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13465 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            13466 ; 116  |
                            13467 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            13468 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            13469 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            13470 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            13471 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            13472 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            13473 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            13474 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            13475 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            13476 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            13477 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            13478 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            13479 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            13480 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            13481 ; 131  |
                            13482 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            13483 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            13484 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            13485 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            13486 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            13487 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            13488 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            13489 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            13490 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            13491 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            13492 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            13493 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            13494 ; 144  |
                            13495 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            13496 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            13497 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            13498 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            13499 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            13500 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                            13501 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            13502 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                            13503 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            13504 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            13505 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            13506 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            13507 ; 157  |
                            13508 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            13509 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            13510 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            13511 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            13512 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            13513 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13514 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            13515 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            13516 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            13517 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            13518 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            13519 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            13520 ; 170  |
                            13521 ; 171  |typedef union               
                            13522 ; 172  |{
                            13523 ; 173  |    struct {
                            13524 ; 174  |        int TXCAL1500          :4;
                            13525 ; 175  |        int RSVD0              :1;
                            13526 ; 176  |        int TXENCAL1500        :1;
                            13527 ; 177  |        int TXHSXCVR           :1;
                            13528 ; 178  |        int TXCALIBRATE        :1;
                            13529 ; 179  |        int TXCAL45DN          :4;
                            13530 ; 180  |        int RSVD1              :1;
                            13531 ; 181  |        int TXENCAL45DN        :1;
                            13532 ; 182  |        int TXHSTERM           :1;
                            13533 ; 183  |        int TXSKEW             :1;
                            13534 ; 184  |        int TXCAL45DP          :4;
                            13535 ; 185  |        int RSVD2              :1;
                            13536 ; 186  |        int TXENCAL45DP        :1;
                            13537 ; 187  |        int TXFSHIZ            :1;
                            13538 ; 188  |        int TXCOMPOUT          :1;
                            13539 ; 189  |    } B;
                            13540 ; 190  |    int I;
                            13541 ; 191  |} usbphytx_type;
                            13542 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            13543 ; 193  |
                            13544 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            13545 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            13546 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            13547 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            13548 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            13549 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            13550 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            13551 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            13552 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            13553 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            13554 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            13555 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            13556 ; 206  |
                            13557 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            13558 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            13559 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            13560 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            13561 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            13562 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            13563 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            13564 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            13565 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            13566 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            13567 ; 217  |
                            13568 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            13569 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            13570 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            13571 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13572 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            13573 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            13574 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            13575 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            13576 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            13577 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            13578 ; 228  |
                            13579 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            13580 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            13581 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            13582 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            13583 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            13584 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            13585 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            13586 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            13587 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            13588 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            13589 ; 239  |
                            13590 ; 240  |typedef union               
                            13591 ; 241  |{
                            13592 ; 242  |    struct {
                            13593 ; 243  |        int PLLV2ISEL        :4;
                            13594 ; 244  |        int RSVD0            :1;
                            13595 ; 245  |        int PLLCPDBLIP       :1;
                            13596 ; 246  |        int PLLVCOCLK2       :1;
                            13597 ; 247  |        int PLLVCOCLK24      :1;
                            13598 ; 248  |        int PLLCPNSEL        :4;
                            13599 ; 249  |        int PLLCLKDIVSEL     :4;
                            13600 ; 250  |        int RSVD1            :4;
                            13601 ; 251  |        int PLLPFDRST        :1;
                            13602 ; 252  |        int PLLCPSHORTLFR    :1;
                            13603 ; 253  |        int PLLVCOKSTART     :1;
                            13604 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            13605 ; 255  |    } B;
                            13606 ; 256  |    int I;
                            13607 ; 257  |} usbphypll_type;
                            13608 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            13609 ; 259  |
                            13610 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            13611 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            13612 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            13613 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            13614 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            13615 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            13616 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            13617 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            13618 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            13619 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            13620 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            13621 ; 271  |
                            13622 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            13623 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            13624 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            13625 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            13626 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            13627 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13628 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            13629 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            13630 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            13631 ; 281  |
                            13632 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            13633 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            13634 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            13635 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            13636 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            13637 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            13638 ; 288  |//              480Mhz/7 =68.57Mhz
                            13639 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            13640 ; 290  |
                            13641 ; 291  |//              480Mhz/8 ~60Mhz
                            13642 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            13643 ; 293  |
                            13644 ; 294  |//              480Mhz/9 =53.3Mhz
                            13645 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            13646 ; 296  |
                            13647 ; 297  |//              480Mhz/10 =48Mhz
                            13648 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            13649 ; 299  |
                            13650 ; 300  |
                            13651 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            13652 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            13653 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            13654 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            13655 ; 305  |
                            13656 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            13657 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            13658 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            13659 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            13660 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            13661 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            13662 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            13663 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            13664 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            13665 ; 315  |
                            13666 ; 316  |typedef union               
                            13667 ; 317  |{
                            13668 ; 318  |    struct {
                            13669 ; 319  |     int ENVADJ               :4;
                            13670 ; 320  |     int DISCONADJ            :4;
                            13671 ; 321  |     int DEBUGMODE            :4;
                            13672 ; 322  |     int PLLLKTIMECTL         :4;
                            13673 ; 323  |     int PLLCKDIVCTL          :4;
                            13674 ; 324  |     int HOSTMODETEST         :1;
                            13675 ; 325  |     int FSCKSOURCESEL        :1;
                            13676 ; 326  |     int REGRXDBYPASS         :1;
                            13677 ; 327  |     int PLLLOCKED            :1;
                            13678 ; 328  |    } B;
                            13679 ; 329  |    int I;
                            13680 ; 330  |} usbphyrx_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13681 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            13682 ; 332  |
                            13683 ; 333  |#endif
                            13684 ; 334  |
                            13685 
                            13687 
                            13688 ; 38   |
                            13689 ; 39   |
                            13690 ; 40   |#endif // if (!@def(hwequ))
                            13691 ; 41   |
                            13692 
                            13694 
                            13695 ; 12   |#else 
                            13696 ; 13   |//include "regscodec.inc"
                            13697 ; 14   |#endif
                            13698 ; 15   |
                            13699 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            13700 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            13701 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            13702 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            13703 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            13704 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            13705 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            13706 ; 23   |
                            13707 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            13708 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            13709 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            13710 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            13711 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            13712 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            13713 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            13714 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            13715 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            13716 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            13717 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            13718 ; 35   |
                            13719 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            13720 ; 37   |// MEDIA DEFINITIONS
                            13721 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            13722 ; 39   |
                            13723 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            13724 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            13725 ; 42   |#if defined(NAND1)
                            13726 ; 43   |#define SM_INTERNAL_CHIPS 1
                            13727 ; 44   |#else 
                            13728 ; 45   |#if defined(NAND2)
                            13729 ; 46   |#define SM_INTERNAL_CHIPS 2
                            13730 ; 47   |#else 
                            13731 ; 48   |#if defined(NAND3)
                            13732 ; 49   |#define SM_INTERNAL_CHIPS 3
                            13733 ; 50   |#else 
                            13734 ; 51   |#if defined(NAND4)
                            13735 ; 52   |#define SM_INTERNAL_CHIPS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13736 ; 53   |#else 
                            13737 ; 54   |#define SM_INTERNAL_CHIPS 1
                            13738 ; 55   |#endif
                            13739 ; 56   |#endif
                            13740 ; 57   |#endif
                            13741 ; 58   |#endif
                            13742 ; 59   |
                            13743 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            13744 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            13745 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            13746 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            13747 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            13748 ; 65   |//*** comment out if active high ****
                            13749 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            13750 ; 67   |
                            13751 ; 68   |#if defined(SMEDIA)
                            13752 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            13753 ; 70   |#define NUM_SM_EXTERNAL 1
                            13754 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13755 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            13756 ; 73   |#else 
                            13757 ; 74   |#if defined(MMC)
                            13758 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            13759 ; 76   |#define NUM_SM_EXTERNAL 0
                            13760 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            13761 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            13762 ; 79   |#else 
                            13763 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            13764 ; 81   |#define NUM_SM_EXTERNAL 0
                            13765 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13766 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            13767 ; 84   |#endif
                            13768 ; 85   |#endif
                            13769 ; 86   |
                            13770 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            13771 ; 88   |// Mass Storage Class definitions
                            13772 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            13773 ; 90   |// Set to 0 if Composite Device build is desired.    
                            13774 ; 91   |#define MULTI_LUN_BUILD 1   
                            13775 ; 92   |
                            13776 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            13777 ; 94   |//  SCSI
                            13778 ; 95   |#if (MULTI_LUN_BUILD==0)
                            13779 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13780 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            13781 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13782 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            13783 ; 100  |  #else
                            13784 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            13785 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13786 ; 103  |  #endif
                            13787 ; 104  |#else
                            13788 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            13789 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13790 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            13791 ; 108  |  #else
                            13792 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            13793 ; 110  |  #endif
                            13794 ; 111  |#endif
                            13795 ; 112  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13796 ; 113  |
                            13797 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            13798 ; 115  |
                            13799 ; 116  |
                            13800 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            13801 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            13802 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            13803 ; 120  |#ifdef MMC
                            13804 ; 121  |#ifdef MTP_BUILD
                            13805 ; 122  |// --------------------
                            13806 ; 123  |// MTP and MMC
                            13807 ; 124  |// --------------------
                            13808 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            13809 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            13810 ; 127  |#else  // ifndef MTP_BUILD
                            13811 ; 128  |#ifdef STMP_BUILD_PLAYER
                            13812 ; 129  |// --------------------
                            13813 ; 130  |// Player and MMC
                            13814 ; 131  |// --------------------
                            13815 ; 132  |#else
                            13816 ; 133  |// --------------------
                            13817 ; 134  |// USBMSC and MMC
                            13818 ; 135  |// --------------------
                            13819 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            13820 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            13821 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            13822 ; 139  |#endif // ifdef MTP_BUILD
                            13823 ; 140  |#else  // ifndef MMC
                            13824 ; 141  |#ifdef MTP_BUILD
                            13825 ; 142  |// --------------------
                            13826 ; 143  |// MTP and NAND only
                            13827 ; 144  |// --------------------
                            13828 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            13829 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            13830 ; 147  |#else  // ifndef MTP_BUILD
                            13831 ; 148  |#ifdef STMP_BUILD_PLAYER
                            13832 ; 149  |// --------------------
                            13833 ; 150  |// Player and NAND only
                            13834 ; 151  |// --------------------
                            13835 ; 152  |#else
                            13836 ; 153  |// --------------------
                            13837 ; 154  |// USBMSC and NAND only
                            13838 ; 155  |// --------------------
                            13839 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            13840 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            13841 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            13842 ; 159  |#endif // ifdef MTP_BUILD
                            13843 ; 160  |#endif // ifdef MMC 
                            13844 ; 161  |
                            13845 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            13846 ; 163  |#if (defined(MTP_BUILD))
                            13847 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            13848 ; 165  |
                            13849 ; 166  |////!
                            13850 ; 167  |////! This varible holds the watchdog count for the store flush.
                            13851 ; 168  |////!
                            13852 ; 169  |///
                            13853 ; 170  |#include <types.h>
                            13854 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            13855 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            13856 ; 173  |#endif
                            13857 ; 174  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13858 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            13859 ; 176  |// These are needed here for Mass Storage Class
                            13860 ; 177  |// Needs to be cleaned up
                            13861 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            13862 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            13863 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            13864 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            13865 ; 182  |
                            13866 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            13867 ; 184  |
                            13868 ; 185  |#endif
                            13869 ; 186  |
                            13870 ; 187  |
                            13871 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            13872 ; 189  |// SmartMedia/NAND defs
                            13873 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13874 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            13875 ; 192  |
                            13876 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            13877 ; 194  |// Sysloadresources defs
                            13878 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13879 ; 196  |
                            13880 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            13881 ; 198  |// MMC defs
                            13882 ; 199  |#define MMC_MAX_PARTITIONS 1
                            13883 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            13884 ; 201  |
                            13885 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            13886 ; 203  |// SPI defs
                            13887 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            13888 ; 205  |
                            13889 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            13890 ; 207  |// Global media defs
                            13891 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            13892 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            13893 ; 210  |
                            13894 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            13895 ; 212  |// DO NOT CHANGE THESE!!!
                            13896 ; 213  |#define SM_MAX_PARTITIONS 4
                            13897 ; 214  |#define MAX_HANDLES 2
                            13898 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            13899 ; 216  |
                            13900 ; 217  |
                            13901 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            13902 ; 219  |// Battery LRADC Values 
                            13903 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            13904 ; 221  |// brownout trip point in mV (moved by RS)
                            13905 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            13906 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            13907 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            13908 ; 225  |//     audio recording to media.
                            13909 ; 226  |#define BATT_SAFETY_MARGIN 10
                            13910 ; 227  |
                            13911 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            13912 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            13913 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            13914 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            13915 ; 232  |
                            13916 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13917 ; 234  |
                            13918 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            13919 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            13920 ; 237  |#if (!defined(CLCD))
                            13921 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            13922 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            13923 ; 240  |#else 
                            13924 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            13925 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            13926 ; 243  |#endif
                            13927 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            13928 ; 245  |
                            13929 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            13930 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            13931 ; 248  |// See mp3 encoder overlay.
                            13932 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            13933 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            13934 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            13935 ; 252  |
                            13936 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            13937 ; 254  |// Voice recording filenames
                            13938 ; 255  |// number of digits in filename Vxxx.wav
                            13939 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            13940 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            13941 ; 258  |
                            13942 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            13943 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            13944 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            13945 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            13946 ; 263  |#if defined(DEVICE_3500)
                            13947 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            13948 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            13949 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            13950 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            13951 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13952 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            13953 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            13954 ; 271  |
                            13955 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            13956 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            13957 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            13958 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            13959 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            13960 ; 277  |
                            13961 ; 278  |#else 
                            13962 ; 279  |// STMP3410
                            13963 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            13964 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13965 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            13966 ; 283  |#endif
                            13967 ; 284  |
                            13968 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            13969 ; 286  |// Number of available soft timers
                            13970 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            13971 ; 288  |#if defined(SYNC_LYRICS)
                            13972 ; 289  |#define SOFT_TIMERS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13973 ; 290  |#else 
                            13974 ; 291  |#if defined(JPEG_DECODER)
                            13975 ; 292  |#define SOFT_TIMERS 10
                            13976 ; 293  |#else 
                            13977 ; 294  |#define SOFT_TIMERS 9
                            13978 ; 295  |#endif
                            13979 ; 296  |#endif
                            13980 ; 297  |
                            13981 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            13982 ; 299  |//  sizes
                            13983 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            13984 ; 301  |#if defined(MMC)
                            13985 ; 302  |#if defined(USE_PLAYLIST5)
                            13986 ; 303  |#define MENU_STACK_SIZE 1500
                            13987 ; 304  |#else 
                            13988 ; 305  |#define MENU_STACK_SIZE 1250
                            13989 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            13990 ; 307  |#else 
                            13991 ; 308  |#if defined(USE_PLAYLIST5)
                            13992 ; 309  |#define MENU_STACK_SIZE 1500
                            13993 ; 310  |#else 
                            13994 ; 311  |#define MENU_STACK_SIZE 1250
                            13995 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            13996 ; 313  |#endif //if @def('MMC')
                            13997 ; 314  |
                            13998 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            13999 ; 316  |// 
                            14000 ; 317  |#define STACK_L1_SIZE 750
                            14001 ; 318  |#define STACK_L2_SIZE 100
                            14002 ; 319  |#define STACK_L3_SIZE 160
                            14003 ; 320  |
                            14004 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            14005 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            14006 ; 323  |// is ok with switching code.
                            14007 ; 324  |#if defined(MTP_BUILD)
                            14008 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            14009 ; 326  |#endif
                            14010 ; 327  |
                            14011 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            14012 ; 329  |// maximum number of nested funclets 
                            14013 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            14014 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            14015 ; 332  |
                            14016 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            14017 ; 334  |//    LCD DEFINITIONS
                            14018 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            14019 ; 336  |
                            14020 ; 337  |#define SPACE_CHAR 0x000020          
                            14021 ; 338  |#define ZERO_CHAR 0x000030
                            14022 ; 339  |#define COLON_CHAR 0x00003A
                            14023 ; 340  |#define PERIOD_CHAR 0x00002E
                            14024 ; 341  |
                            14025 ; 342  |#if (defined(S6B33B0A_LCD))
                            14026 ; 343  |#define LCD_X_SIZE 128
                            14027 ; 344  |#define LCD_Y_SIZE 159
                            14028 ; 345  |#endif
                            14029 ; 346  |
                            14030 ; 347  |#if (defined(SED15XX_LCD))
                            14031 ; 348  |#define LCD_X_SIZE 128
                            14032 ; 349  |#define LCD_Y_SIZE 64
                            14033 ; 350  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14034 ; 351  |
                            14035 ; 352  |
                            14036 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            14037 ; 354  |//   Details on Customizing Contrast
                            14038 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            14039 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            14040 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            14041 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            14042 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            14043 ; 360  |//   unless the ezact sequence is remembered.
                            14044 ; 361  |//   To find out what range your player supports: 
                            14045 ; 362  |//   change these equs to full range or comment out (full range is default)
                            14046 ; 363  |//;;;;;;
                            14047 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            14048 ; 365  |// recommended calibration using player -- uncomment 
                            14049 ; 366  |//;;;;;;
                            14050 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            14051 ; 368  |////////////////////////////
                            14052 ; 369  |#if (defined(DEMO_HW))
                            14053 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            14054 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            14055 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            14056 ; 373  |#else 
                            14057 ; 374  |
                            14058 ; 375  |#if (defined(S6B33B0A_LCD))
                            14059 ; 376  |#define LCD_MAX_CONTRAST 210
                            14060 ; 377  |#define LCD_MIN_CONTRAST 160    
                            14061 ; 378  |#endif
                            14062 ; 379  |
                            14063 ; 380  |#if (defined(SED15XX_LCD))
                            14064 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            14065 ; 382  |// Engineering board regs support range [17-37].
                            14066 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            14067 ; 384  |//   One default contrast range [24-42] works for both.
                            14068 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            14069 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            14070 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            14071 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            14072 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            14073 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            14074 ; 391  |
                            14075 ; 392  |#if (defined(NEWSHINGYIH))
                            14076 ; 393  |#define LCD_MAX_CONTRAST 250
                            14077 ; 394  |#define LCD_MIN_CONTRAST 0
                            14078 ; 395  |#else 
                            14079 ; 396  |//-----
                            14080 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            14081 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            14082 ; 399  |#define LCD_MAX_CONTRAST 250
                            14083 ; 400  |#define LCD_MIN_CONTRAST 0
                            14084 ; 401  |
                            14085 ; 402  |//=====
                            14086 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            14087 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            14088 ; 405  |//LCD_MAX_CONTRAST equ 42
                            14089 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            14090 ; 407  |
                            14091 ; 408  |#endif
                            14092 ; 409  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14093 ; 410  |
                            14094 ; 411  |#endif
                            14095 ; 412  |
                            14096 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            14097 ; 414  |// The default value of the lcd contrast in % of range
                            14098 ; 415  |//   the default value is used when no settings.dat is available
                            14099 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            14100 ; 417  |
                            14101 ; 418  |#if (defined(S6B33B0A_LCD))
                            14102 ; 419  |// 60% of range is default value
                            14103 ; 420  |#define DEFAULT_CONTRAST 50 
                            14104 ; 421  |#endif
                            14105 ; 422  |
                            14106 ; 423  |#if (defined(SED15XX_LCD))
                            14107 ; 424  |// % of range is default value (was 60%)
                            14108 ; 425  |#define DEFAULT_CONTRAST 50 
                            14109 ; 426  |#endif
                            14110 ; 427  |
                            14111 ; 428  |
                            14112 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            14113 ; 430  |// make lower when doing calibration
                            14114 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            14115 ; 432  |
                            14116 ; 433  |
                            14117 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            14118 ; 435  |// For FFWD and RWND
                            14119 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            14120 ; 437  |#define SECONDS_TO_SKIP 1
                            14121 ; 438  |#define SECONDS_TO_SKIP1 3
                            14122 ; 439  |#define SECONDS_TO_SKIP2 6
                            14123 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            14124 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            14125 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14126 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            14127 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14128 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            14129 ; 446  |
                            14130 ; 447  |// For audible FFW/RWD
                            14131 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            14132 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            14133 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            14134 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            14135 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14136 ; 453  |#define LEVEL1_BOUNDARY 17 
                            14137 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14138 ; 455  |#define LEVEL2_BOUNDARY 33 
                            14139 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            14140 ; 457  |#define LEVEL3_BOUNDARY 50 
                            14141 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            14142 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            14143 ; 460  |// Short Song Time, songs too short to play.
                            14144 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            14145 ; 462  |
                            14146 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            14147 ; 464  |// MP3 Sync Values
                            14148 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            14149 ; 466  |// # bytes to look for sync before marking it bad
                            14150 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            14151 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            14152 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            14153 ; 470  |// once we have sync'd, the isr should be called this frequently
                            14154 ; 471  |#define MP3_DECODERISR_FAST 7500  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14155 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            14156 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            14157 ; 474  |
                            14158 ; 475  |
                            14159 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            14160 ; 477  |//// Multi-Stage Volume Control Definitions
                            14161 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            14162 ; 479  |//// Use Multi-Stage Volume
                            14163 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            14164 ; 481  |
                            14165 ; 482  |//// Master Volume definitions
                            14166 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            14167 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            14168 ; 485  |
                            14169 ; 486  |//// DAC-Mode definitions
                            14170 ; 487  |//// Adjusts 0dB point
                            14171 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            14172 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            14173 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            14174 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            14175 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            14176 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            14177 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            14178 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            14179 ; 496  |
                            14180 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            14181 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            14182 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            14183 ; 500  |
                            14184 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            14185 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            14186 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            14187 ; 504  |
                            14188 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            14189 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            14190 ; 507  |
                            14191 ; 508  |
                            14192 ; 509  |//// Line In definitions (used for Line-In 1)
                            14193 ; 510  |//// 0dB point of the Line In
                            14194 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            14195 ; 512  |//// Minimum volume of Line In
                            14196 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            14197 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            14198 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            14199 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            14200 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            14201 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            14202 ; 519  |
                            14203 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            14204 ; 521  |//// 0dB point of the Line In
                            14205 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            14206 ; 523  |//// Minimum volume of Line In
                            14207 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            14208 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14209 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            14210 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            14211 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            14212 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            14213 ; 530  |
                            14214 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            14215 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            14216 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            14217 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            14218 ; 535  |
                            14219 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            14220 ; 537  |////
                            14221 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            14222 ; 539  |////
                            14223 ; 540  |///
                            14224 ; 541  |#include <types.h>
                            14225 ; 542  |extern volatile WORD g_wActivityState;
                            14226 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            14227 ; 544  |
                            14228 ; 545  |void _reentrant Init5VSense(void);
                            14229 ; 546  |void _reentrant ServiceDCDC(void);
                            14230 ; 547  |
                            14231 ; 548  |////////////////////////////////////////////////////////////////////////////
                            14232 ; 549  |//// JPEG Thumbnail Mode Setting
                            14233 ; 550  |//// number of column in thumbnail mode
                            14234 ; 551  |#define THUMBNAIL_X 2           
                            14235 ; 552  |//// number of row in  thumbnail mode
                            14236 ; 553  |#define THUMBNAIL_Y 2           
                            14237 ; 554  |//// thumbnail boundary offset x
                            14238 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            14239 ; 556  |//// thumbnail boundary offset y
                            14240 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            14241 ; 558  |
                            14242 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            14243 ; 560  |
                            14244 
                            14246 
                            14247 ; 24   |#include "mediadetection.h"
                            14248 
                            14250 
                            14251 ; 1    |#ifndef _MEDIADETECTION_H
                            14252 ; 2    |#define _MEDIADETECTION_H
                            14253 ; 3    |
                            14254 ; 4    |#define MEDIA_DETECT_POSITIVE_POLARITY  0
                            14255 ; 5    |#define MEDIA_DETECT_NEGATIVE_POLARITY  1
                            14256 ; 6    |
                            14257 ; 7    |#define MEDIA_TYPE_SMARTMEDIA   0
                            14258 ; 8    |#define MEDIA_TYPE_MMC          1
                            14259 ; 9    |
                            14260 ; 10   |//#ifndef NUM_REMOVABLE_MEDIA
                            14261 ; 11   |//#define NUM_REMOVABLE_MEDIA 1
                            14262 ; 12   |//#endif
                            14263 ; 13   |
                            14264 ; 14   |#endif // #ifndef _MEDIADETECTION_H
                            14265 
                            14267 
                            14268 ; 25   |#include "filesystem.h"
                            14269 
                            14271 
                            14272 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14273 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14274 ; 3    |//
                            14275 ; 4    |//  File        : FileSystem.h
                            14276 ; 5    |//  Description : Header File for File System
                            14277 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14278 ; 7    |
                            14279 ; 8    |#ifndef _FILESYSTEM_H
                            14280 ; 9    |#define _FILESYSTEM_H
                            14281 ; 10   |
                            14282 ; 11   |#include "types.h"
                            14283 
                            14285 
                            14286 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14287 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14288 ; 3    |//
                            14289 ; 4    |// Filename: types.h
                            14290 ; 5    |// Description: Standard data types
                            14291 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14292 ; 7    |
                            14293 ; 8    |#ifndef _TYPES_H
                            14294 ; 9    |#define _TYPES_H
                            14295 ; 10   |
                            14296 ; 11   |// TODO:  move this outta here!
                            14297 ; 12   |#if !defined(NOERROR)
                            14298 ; 13   |#define NOERROR 0
                            14299 ; 14   |#define SUCCESS 0
                            14300 ; 15   |#endif 
                            14301 ; 16   |#if !defined(SUCCESS)
                            14302 ; 17   |#define SUCCESS  0
                            14303 ; 18   |#endif
                            14304 ; 19   |#if !defined(ERROR)
                            14305 ; 20   |#define ERROR   -1
                            14306 ; 21   |#endif
                            14307 ; 22   |#if !defined(FALSE)
                            14308 ; 23   |#define FALSE 0
                            14309 ; 24   |#endif
                            14310 ; 25   |#if !defined(TRUE)
                            14311 ; 26   |#define TRUE  1
                            14312 ; 27   |#endif
                            14313 ; 28   |
                            14314 ; 29   |#if !defined(NULL)
                            14315 ; 30   |#define NULL 0
                            14316 ; 31   |#endif
                            14317 ; 32   |
                            14318 ; 33   |#define MAX_INT     0x7FFFFF
                            14319 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14320 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14321 ; 36   |#define MAX_ULONG   (-1) 
                            14322 ; 37   |
                            14323 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14324 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14325 ; 40   |
                            14326 ; 41   |
                            14327 ; 42   |#define BYTE    unsigned char       // btVarName
                            14328 ; 43   |#define CHAR    signed char         // cVarName
                            14329 ; 44   |#define USHORT  unsigned short      // usVarName
                            14330 ; 45   |#define SHORT   unsigned short      // sVarName
                            14331 ; 46   |#define WORD    unsigned int        // wVarName
                            14332 ; 47   |#define INT     signed int          // iVarName
                            14333 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14334 ; 49   |#define LONG    signed long         // lVarName
                            14335 ; 50   |#define BOOL    unsigned int        // bVarName
                            14336 ; 51   |#define FRACT   _fract              // frVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14337 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14338 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14339 ; 54   |#define FLOAT   float               // fVarName
                            14340 ; 55   |#define DBL     double              // dVarName
                            14341 ; 56   |#define ENUM    enum                // eVarName
                            14342 ; 57   |#define CMX     _complex            // cmxVarName
                            14343 ; 58   |typedef WORD UCS3;                   // 
                            14344 ; 59   |
                            14345 ; 60   |#define UINT16  unsigned short
                            14346 ; 61   |#define UINT8   unsigned char   
                            14347 ; 62   |#define UINT32  unsigned long
                            14348 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14349 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14350 ; 65   |#define WCHAR   UINT16
                            14351 ; 66   |
                            14352 ; 67   |//UINT128 is 16 bytes or 6 words
                            14353 ; 68   |typedef struct UINT128_3500 {   
                            14354 ; 69   |    int val[6];     
                            14355 ; 70   |} UINT128_3500;
                            14356 ; 71   |
                            14357 ; 72   |#define UINT128   UINT128_3500
                            14358 ; 73   |
                            14359 ; 74   |// Little endian word packed byte strings:   
                            14360 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14361 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14362 ; 77   |// Little endian word packed byte strings:   
                            14363 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14364 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14365 ; 80   |
                            14366 ; 81   |// Declare Memory Spaces To Use When Coding
                            14367 ; 82   |// A. Sector Buffers
                            14368 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14369 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14370 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14371 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14372 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14373 ; 88   |// B. Media DDI Memory
                            14374 ; 89   |#define MEDIA_DDI_MEM _Y
                            14375 ; 90   |
                            14376 ; 91   |
                            14377 ; 92   |
                            14378 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14379 ; 94   |// Examples of circular pointers:
                            14380 ; 95   |//    INT CIRC cpiVarName
                            14381 ; 96   |//    DWORD CIRC cpdwVarName
                            14382 ; 97   |
                            14383 ; 98   |#define RETCODE INT                 // rcVarName
                            14384 ; 99   |
                            14385 ; 100  |// generic bitfield structure
                            14386 ; 101  |struct Bitfield {
                            14387 ; 102  |    unsigned int B0  :1;
                            14388 ; 103  |    unsigned int B1  :1;
                            14389 ; 104  |    unsigned int B2  :1;
                            14390 ; 105  |    unsigned int B3  :1;
                            14391 ; 106  |    unsigned int B4  :1;
                            14392 ; 107  |    unsigned int B5  :1;
                            14393 ; 108  |    unsigned int B6  :1;
                            14394 ; 109  |    unsigned int B7  :1;
                            14395 ; 110  |    unsigned int B8  :1;
                            14396 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14397 ; 112  |    unsigned int B10 :1;
                            14398 ; 113  |    unsigned int B11 :1;
                            14399 ; 114  |    unsigned int B12 :1;
                            14400 ; 115  |    unsigned int B13 :1;
                            14401 ; 116  |    unsigned int B14 :1;
                            14402 ; 117  |    unsigned int B15 :1;
                            14403 ; 118  |    unsigned int B16 :1;
                            14404 ; 119  |    unsigned int B17 :1;
                            14405 ; 120  |    unsigned int B18 :1;
                            14406 ; 121  |    unsigned int B19 :1;
                            14407 ; 122  |    unsigned int B20 :1;
                            14408 ; 123  |    unsigned int B21 :1;
                            14409 ; 124  |    unsigned int B22 :1;
                            14410 ; 125  |    unsigned int B23 :1;
                            14411 ; 126  |};
                            14412 ; 127  |
                            14413 ; 128  |union BitInt {
                            14414 ; 129  |        struct Bitfield B;
                            14415 ; 130  |        int        I;
                            14416 ; 131  |};
                            14417 ; 132  |
                            14418 ; 133  |#define MAX_MSG_LENGTH 10
                            14419 ; 134  |struct CMessage
                            14420 ; 135  |{
                            14421 ; 136  |        unsigned int m_uLength;
                            14422 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14423 ; 138  |};
                            14424 ; 139  |
                            14425 ; 140  |typedef struct {
                            14426 ; 141  |    WORD m_wLength;
                            14427 ; 142  |    WORD m_wMessage;
                            14428 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14429 ; 144  |} Message;
                            14430 ; 145  |
                            14431 ; 146  |struct MessageQueueDescriptor
                            14432 ; 147  |{
                            14433 ; 148  |        int *m_pBase;
                            14434 ; 149  |        int m_iModulo;
                            14435 ; 150  |        int m_iSize;
                            14436 ; 151  |        int *m_pHead;
                            14437 ; 152  |        int *m_pTail;
                            14438 ; 153  |};
                            14439 ; 154  |
                            14440 ; 155  |struct ModuleEntry
                            14441 ; 156  |{
                            14442 ; 157  |    int m_iSignaledEventMask;
                            14443 ; 158  |    int m_iWaitEventMask;
                            14444 ; 159  |    int m_iResourceOfCode;
                            14445 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14446 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            14447 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14448 ; 163  |    int m_uTimeOutHigh;
                            14449 ; 164  |    int m_uTimeOutLow;
                            14450 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14451 ; 166  |};
                            14452 ; 167  |
                            14453 ; 168  |union WaitMask{
                            14454 ; 169  |    struct B{
                            14455 ; 170  |        unsigned int m_bNone     :1;
                            14456 ; 171  |        unsigned int m_bMessage  :1;
                            14457 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14458 ; 173  |        unsigned int m_bButton   :1;
                            14459 ; 174  |    } B;
                            14460 ; 175  |    int I;
                            14461 ; 176  |} ;
                            14462 ; 177  |
                            14463 ; 178  |
                            14464 ; 179  |struct Button {
                            14465 ; 180  |        WORD wButtonEvent;
                            14466 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14467 ; 182  |};
                            14468 ; 183  |
                            14469 ; 184  |struct Message {
                            14470 ; 185  |        WORD wMsgLength;
                            14471 ; 186  |        WORD wMsgCommand;
                            14472 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14473 ; 188  |};
                            14474 ; 189  |
                            14475 ; 190  |union EventTypes {
                            14476 ; 191  |        struct CMessage msg;
                            14477 ; 192  |        struct Button Button ;
                            14478 ; 193  |        struct Message Message;
                            14479 ; 194  |};
                            14480 ; 195  |
                            14481 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14482 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14483 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14484 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14485 ; 200  |
                            14486 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14487 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14488 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14489 ; 204  |
                            14490 ; 205  |#if DEBUG
                            14491 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14492 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14493 ; 208  |#else 
                            14494 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            14495 ; 210  |#define DebugBuildAssert(x)    
                            14496 ; 211  |#endif
                            14497 ; 212  |
                            14498 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14499 ; 214  |//  #pragma asm
                            14500 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14501 ; 216  |//  #pragma endasm
                            14502 ; 217  |
                            14503 ; 218  |
                            14504 ; 219  |#ifdef COLOR_262K
                            14505 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            14506 ; 221  |#elif defined(COLOR_65K)
                            14507 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            14508 ; 223  |#else
                            14509 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            14510 ; 225  |#endif
                            14511 ; 226  |    
                            14512 ; 227  |#endif // #ifndef _TYPES_H
                            14513 
                            14515 
                            14516 ; 12   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14517 ; 13   |
                            14518 ; 14   |// File attributes
                            14519 ; 15   |#ifndef _FS_ATTRIBUTES
                            14520 ; 16   |#define _FS_ATTRIBUTES
                            14521 ; 17   |#define READ        1
                            14522 ; 18   |#define WRITE       2
                            14523 ; 19   |#define WRITE_PLUS  3
                            14524 ; 20   |#define APPEND      4
                            14525 ; 21   |#define TRUNCATE    8
                            14526 ; 22   |#define CREATE      16
                            14527 ; 23   |#endif
                            14528 ; 24   |
                            14529 ; 25   |//#ifndef FAT12
                            14530 ; 26   |//#define FAT12   1
                            14531 ; 27   |//#endif
                            14532 ; 28   |//
                            14533 ; 29   |#ifndef FAT16
                            14534 ; 30   |#define FAT16   2
                            14535 ; 31   |#endif
                            14536 ; 32   |
                            14537 ; 33   |#define MEM_SPACE_P 0x100000
                            14538 ; 34   |#define MEM_SPACE_Y 0x400000
                            14539 ; 35   |#define MEM_SPACE_X 0x800000
                            14540 ; 36   |
                            14541 ; 37   |#define FILE_SYS_MODE_READ  0
                            14542 ; 38   |#define FILE_SYS_MODE_WRITE 1
                            14543 ; 39   | 
                            14544 ; 40   |#define ATTR_READ_ONLY      0x01
                            14545 ; 41   |#define ATTR_HIDDEN         0x02
                            14546 ; 42   |#define ATTR_SYSTEM         0x04
                            14547 ; 43   |#define ATTR_VOLUME_ID      0x08
                            14548 ; 44   |#define ATTR_DIRECTORY      0x10
                            14549 ; 45   |#define ATTR_ARCHIVE        0x20
                            14550 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                            14551 ; 47   |
                            14552 ; 48   |#define SEEK_SET           -1
                            14553 ; 49   |#define SEEK_CUR            0
                            14554 ; 50   |#define SEEK_END            1
                            14555 ; 51   |
                            14556 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                            14557 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                            14558 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                            14559 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                            14560 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                            14561 ; 57   |
                            14562 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                            14563 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                            14564 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                            14565 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                            14566 ; 62   |
                            14567 ; 63   |#define READ_TYPE_NORMAL            0
                            14568 ; 64   |#define READ_TYPE_FAT               1
                            14569 ; 65   |#define READ_TYPE_RAW               2
                            14570 ; 66   |
                            14571 ; 67   |
                            14572 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            14573 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                            14574 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                            14575 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            14576 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                            14577 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                            14578 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14579 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                            14580 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            14581 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                            14582 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                            14583 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                            14584 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                            14585 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                            14586 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                            14587 ; 83   |    #endif
                            14588 ; 84   |#else
                            14589 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                            14590 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                            14591 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            14592 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            14593 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                            14594 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                            14595 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                            14596 ; 92   |    #endif
                            14597 ; 93   |#endif
                            14598 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                            14599 ; 95   |
                            14600 ; 96   |
                            14601 ; 97   |#ifndef MAX_FILENAME_LENGTH
                            14602 ; 98   |#define MAX_FILENAME_LENGTH 256
                            14603 ; 99   |#endif
                            14604 ; 100  |
                            14605 ; 101  |typedef struct {
                            14606 ; 102  |    WORD wNumberOfZones;
                            14607 ; 103  |    WORD wSizeInMegaBytes;
                            14608 ; 104  |} SMARTMEDIA_CHIP_INFO;
                            14609 ; 105  |
                            14610 ; 106  |typedef struct {
                            14611 ; 107  |    WORD wBootIdentification;
                            14612 ; 108  |    WORD wStartHeadNumber;
                            14613 ; 109  |    WORD wStartSectorNumber;
                            14614 ; 110  |    WORD wStartCylinderNumber;
                            14615 ; 111  |    WORD wSystemIdentification;
                            14616 ; 112  |    WORD wEndHeadNumber;
                            14617 ; 113  |    WORD wEndSectorNumber;
                            14618 ; 114  |    WORD wEndCylinderNumber;
                            14619 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                            14620 ; 116  |    WORD wStartLogicalSectorNumberLow;
                            14621 ; 117  |    WORD wPartitionSizeHigh;
                            14622 ; 118  |    WORD wPartitionSizeLow;
                            14623 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                            14624 ; 120  |
                            14625 ; 121  |typedef struct {
                            14626 ; 122  |    WORD wWord0;
                            14627 ; 123  |    WORD wWord1;
                            14628 ; 124  |    WORD wWord2;
                            14629 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                            14630 ; 126  |
                            14631 ; 127  |typedef struct {
                            14632 ; 128  |    WORD wWord0;
                            14633 ; 129  |    WORD wWord1;
                            14634 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                            14635 ; 131  |
                            14636 ; 132  |typedef struct {
                            14637 ; 133  |    WORD wWord0;
                            14638 ; 134  |    WORD wWord1;
                            14639 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                            14640 ; 136  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14641 ; 137  |typedef struct {
                            14642 ; 138  |    WORD wWord0;
                            14643 ; 139  |    WORD wWord1;
                            14644 ; 140  |    WORD wWord2;
                            14645 ; 141  |    WORD wWord3;
                            14646 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                            14647 ; 143  |
                            14648 ; 144  |typedef struct {
                            14649 ; 145  |    WORD wWord0;
                            14650 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                            14651 
                            14674 
                            14675 ; 147  |
                            14676 ; 148  |typedef struct {
                            14677 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                            14678 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                            14679 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                            14680 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                            14681 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                            14682 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                            14683 
                            14705 
                            14706 ; 155  |   
                            14707 ; 156  |typedef struct {
                            14708 ; 157  |    WORD wPageSizeInBytes;
                            14709 ; 158  |    WORD wRedundantAreaSizeInBytes;
                            14710 ; 159  |    WORD wNumberOfPagesPerBlock;
                            14711 ; 160  |    WORD wNumberOfBlocksPerZone;
                            14712 ; 161  |    WORD wNumberOfZonesInMedia;
                            14713 ; 162  |    WORD wMediaSizeInMBytes;
                            14714 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                            14715 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                            14716 ; 165  |    WORD wMediaFlagStatus;
                            14717 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                            14718 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                            14719 ; 168  |    WORD wNumberOfSystemBlocks;
                            14720 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                            14721 ; 170  |
                            14722 ; 171  |typedef struct {
                            14723 ; 172  |    WORD wDevice;        
                            14724 ; 173  |    WORD wDirtyBlockFlag;
                            14725 ; 174  |    WORD wCleanTailFlag; 
                            14726 ; 175  |    WORD wLogDOSPage;    
                            14727 ; 176  |    WORD wSrcLogBlock;   
                            14728 ; 177  |    WORD wSrcPhyBlock;   
                            14729 ; 178  |    WORD wDestPhyBlock;  
                            14730 ; 179  |    WORD wStartSrcPage;  
                            14731 ; 180  |    WORD wStartDestPage; 
                            14732 ; 181  |    WORD wPagesToCopy;   
                            14733 ; 182  |    WORD wReplaceBuff;   
                            14734 ; 183  |    WORD wReplaceRdnt;
                            14735 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            14736 ; 185  |        WORD wFirstCount;
                            14737 ; 186  |        WORD wNextCount;
                            14738 ; 187  |        WORD wLastCount;
                            14739 ; 188  |    #endif
                            14740 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                            14741 ; 190  |
                            14742 ; 191  |typedef struct {
                            14743 ; 192  |    WORD wWord0;
                            14744 ; 193  |    WORD wWord1;
                            14745 ; 194  |    WORD wWord2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14746 ; 195  |    WORD wWord3;
                            14747 ; 196  |} DIRECTORY_NAME;
                            14748 ; 197  |
                            14749 ; 198  |typedef struct {
                            14750 ; 199  |    WORD wWord0;
                            14751 ; 200  |    WORD wWord1;
                            14752 ; 201  |} DIRECTORY_EXTENSION;
                            14753 ; 202  |
                            14754 ; 203  |typedef struct {
                            14755 ; 204  |    WORD wWord0;
                            14756 ; 205  |    WORD wWord1;
                            14757 ; 206  |} DIRECTORY_SIZE;
                            14758 
                            14773 
                            14774 ; 207  |
                            14775 ; 208  |typedef struct {
                            14776 ; 209  |    DIRECTORY_NAME Name;
                            14777 ; 210  |    DIRECTORY_EXTENSION Extension;
                            14778 ; 211  |    WORD wAttribute;
                            14779 ; 212  |    WORD wReserved[4];
                            14780 ; 213  |    WORD wCreationTime;
                            14781 ; 214  |    WORD wCreationData;
                            14782 ; 215  |    WORD wFirstCluster;
                            14783 ; 216  |    DIRECTORY_SIZE Size;
                            14784 ; 217  |    WORD wCurrentCluster;
                            14785 ; 218  |    WORD wPointer;
                            14786 ; 219  |    WORD wRecord;
                            14787 ; 220  |    WORD wRd;
                            14788 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                            14789 ; 222  |
                            14790 ; 223  |// TODO:  clean this up.  There are two versions.
                            14791 ; 224  |struct FCB
                            14792 ; 225  |{
                            14793 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                            14794 ; 227  |    int     m_wReserved;                //3
                            14795 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                            14796 ; 229  |    int     m_wAttributes;              //6
                            14797 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                            14798 ; 231  |    int     m_wTimeofCreation;          //b
                            14799 ; 232  |    int     m_wDateofCreation;          //c
                            14800 ; 233  |    int     m_wFirstCluster;            //d
                            14801 ; 234  |    int     m_wFileSizeHigh;            //e
                            14802 ; 235  |    int     m_wFileSizeLow;             //f
                            14803 ; 236  |};
                            14804 
                            14820 
                            14821 ; 237  |
                            14822 ; 238  |
                            14823 ; 239  |typedef struct {
                            14824 ; 240  |    WORD wFirstClusterCurrentDirectory;
                            14825 ; 241  |    WORD wFirstClusterParentDirectory;
                            14826 ; 242  |    WORD wAbsSectorCurrentlyCached;
                            14827 ; 243  |    WORD wCurrentRelativeSector;
                            14828 ; 244  |    WORD wNumberOfSectors;
                            14829 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                            14830 ; 246  |    WORD wBufferedRecord;
                            14831 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                            14832 ; 248  |    WORD * pwPointerToBuffer;
                            14833 ; 249  |    WORD * pwPointerToPath;
                            14834 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                            14835 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                            14836 ; 252  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14837 ; 253  |typedef struct {
                            14838 ; 254  |    WORD wWord0;
                            14839 ; 255  |    WORD wWord1;
                            14840 ; 256  |    WORD wWord2;
                            14841 ; 257  |    WORD wWord3;
                            14842 ; 258  |} FILE_NAME;
                            14843 ; 259  |
                            14844 ; 260  |typedef struct {
                            14845 ; 261  |    WORD wWord0;
                            14846 ; 262  |    WORD wWord1;
                            14847 ; 263  |} FILE_EXTENSION;
                            14848 ; 264  |
                            14849 ; 265  |typedef struct {
                            14850 ; 266  |    WORD wWord0;
                            14851 ; 267  |    WORD wWord1;
                            14852 ; 268  |} FILE_SIZE;
                            14853 ; 269  |
                            14854 ; 270  |typedef union {
                            14855 ; 271  |    struct {
                            14856 ; 272  |        int Read        :1;
                            14857 ; 273  |        int Write       :1;
                            14858 ; 274  |        int Append      :1;
                            14859 ; 275  |        int Truncate    :1;
                            14860 ; 276  |        int Create      :1;
                            14861 ; 277  |        int Rsrv        :3;
                            14862 ; 278  |        int Mode        :8;
                            14863 ; 279  |        int Device      :8;
                            14864 ; 280  |    } B;
                            14865 ; 281  |    int I;
                            14866 ; 282  |} FILE_FLAGS;
                            14867 ; 283  |
                            14868 ; 284  |typedef struct {
                            14869 ; 285  |    WORD wWord0;
                            14870 ; 286  |    WORD wWord1;
                            14871 ; 287  |} FILE_BYTE_CURRENT;
                            14872 
                            14912 
                            14913 ; 288  |
                            14914 ; 289  |typedef struct {
                            14915 ; 290  |    FILE_NAME Name;
                            14916 ; 291  |    FILE_EXTENSION Extension;
                            14917 ; 292  |    WORD wAttributes;
                            14918 ; 293  |    WORD wReserved[4];
                            14919 ; 294  |    WORD wCreationTime;
                            14920 ; 295  |    WORD wCreationData;
                            14921 ; 296  |    WORD wFirstCluster;
                            14922 ; 297  |    FILE_SIZE Size;
                            14923 ; 298  |    WORD wCurrentCluster;
                            14924 ; 299  |    WORD wPointer;
                            14925 ; 300  |    WORD wRecord;
                            14926 ; 301  |    WORD wRd;
                            14927 ; 302  |    FILE_FLAGS Flags;
                            14928 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                            14929 ; 304  |    WORD wFcbFlagEndOfCx;
                            14930 ; 305  |} FILE_CONTROL_BLOCK;    
                            14931 ; 306  |
                            14932 ; 307  |typedef struct {
                            14933 ; 308  |    WORD wWord0;
                            14934 ; 309  |    WORD wWord1;
                            14935 ; 310  |    WORD wWord2;
                            14936 ; 311  |    WORD wWord3;
                            14937 ; 312  |} VOLUME_LABEL;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14938 ; 313  |
                            14939 ; 314  |typedef struct {
                            14940 ; 315  |    WORD wFATPhysicalBlock1;
                            14941 ; 316  |    WORD wFATPhysicalBlock2;
                            14942 ; 317  |    WORD wFATPhysicalBlock3;
                            14943 ; 318  |    WORD wFATPhysicalBlock4;
                            14944 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                            14945 
                            14952 
                            14953 ; 320  |
                            14954 ; 321  |typedef struct {
                            14955 ; 322  |    WORD wFATSectorInCache;
                            14956 ; 323  |    WORD wLastClusterFree;
                            14957 ; 324  |    WORD wNumberOfUsedClusters;
                            14958 ; 325  |    WORD wNumberOfFreeClusters;
                            14959 ; 326  |    WORD wNumberOfBadClusters;
                            14960 ; 327  |    WORD wNumberOfReservedClusters;
                            14961 ; 328  |    WORD wControl;
                            14962 ; 329  |    WORD * pwSectorCache;
                            14963 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                            14964 ; 331  |} FAT_TABLE;
                            14965 
                            14972 
                            14973 ; 332  |
                            14974 ; 333  |typedef struct {
                            14975 ; 334  |    WORD wStateMediaTable;
                            14976 ; 335  |    WORD wTypeFs;
                            14977 ; 336  |    WORD wBytesPerSector;
                            14978 ; 337  |    WORD wSectorsPerCluster;
                            14979 ; 338  |    WORD wNumberOfReservedSectors;
                            14980 ; 339  |    WORD wMaximumNumberOfFATs;
                            14981 ; 340  |    WORD wMaxRootDirectoryEntries;
                            14982 ; 341  |    WORD wTotalSectors;
                            14983 ; 342  |    WORD wNumberOfFATSectors;
                            14984 ; 343  |    WORD wNumberOfSectorsPerTrack;
                            14985 ; 344  |    WORD wNumberOfHeads;
                            14986 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                            14987 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                            14988 ; 347  |    WORD wTotalSectors32MSB;
                            14989 ; 348  |    WORD wTotalSectors32LSB;
                            14990 ; 349  |    WORD wDriverNumber;
                            14991 ; 350  |    WORD wExtendedBootSignature;
                            14992 ; 351  |    WORD wVolumeIDMSB;
                            14993 ; 352  |    WORD wVolumeIDLSB;
                            14994 ; 353  |    VOLUME_LABEL VolumeLabel;
                            14995 ; 354  |    WORD * pwWriteBuffer;
                            14996 ; 355  |    WORD wPrimaryFATRelativeSector;
                            14997 ; 356  |    WORD wSecondaryFATRelativeSector;
                            14998 ; 357  |    WORD wRootDirectoryRelativeSector;
                            14999 ; 358  |    WORD wFirstSectorNumberDataZone;
                            15000 ; 359  |    WORD wMaxNumberOfFATEntries;
                            15001 ; 360  |    WORD wRootDirectorySizeInSectors;
                            15002 ; 361  |    WORD wDataAreaSizeInSectors;
                            15003 ; 362  |} MEDIA_TABLE;
                            15004 
                            15063 
                            15064 ; 363  |
                            15065 ; 364  |typedef struct {
                            15066 ; 365  |    MEDIA_TABLE * pMediaTable;
                            15067 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                            15068 ; 367  |    FAT_TABLE * pFATTable;
                            15069 ; 368  |} DEVICE_CONTROL_TABLE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15070 ; 369  |    
                            15071 ; 370  |typedef struct {
                            15072 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                            15073 ; 372  |                                        //  to 2-bytes for compatibility with
                            15074 ; 373  |                                        //  older host drivers.
                            15075 ; 374  |    DWORD dwTotalNumberOfSectors;
                            15076 ; 375  |    DWORD dwTotalNumberOfBytes;
                            15077 ; 376  |    WORD wSectorSizeInBytes;
                            15078 ; 377  |} MEDIA_SIZE;
                            15079 ; 378  |
                            15080 ; 379  |typedef struct {
                            15081 ; 380  |    BOOL    bInstalled;
                            15082 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                            15083 ; 382  |    DWORD   dwSize;
                            15084 ; 383  |} DATA_DRIVE_PBS_LOC;
                            15085 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                            15086 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                            15087 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                            15088 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                            15089 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                            15090 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                            15091 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                            15092 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                            15093 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
                            15094 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                            15095 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                            15096 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                            15097 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                            15098 ; 397  |extern  INT FSFreeClusters(INT Device);
                            15099 ; 398  |extern  INT BytesPerCluster(INT Device);
                            15100 ; 399  |
                            15101 ; 400  |
                            15102 ; 401  |
                            15103 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                            15104 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                            15105 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
                            15106 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
                            15107 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                            15108 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                            15109 ; 408  |//extern  INT FSFileClose(INT bHandle);
                            15110 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                            15111 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                            15112 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                            15113 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                            15114 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                            15115 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                            15116 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                            15117 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                            15118 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                            15119 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                            15120 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                            15121 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                            15122 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                            15123 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15124 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                            15125 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                            15126 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                            15127 ; 426  |
                            15128 ; 427  |#endif
                            15129 
                            15131 
                            15132 ; 26   |#ifdef STMP_BUILD_MSC
                            15133 ; 27   |    #include "misc.h"
                            15134 ; 28   |#endif
                            15135 ; 29   |#include "ddildl.h"
                            15136 
                            15138 
                            15139 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15140 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                            15141 ; 3    |//
                            15142 ; 4    |// Filename: ddildl.h
                            15143 ; 5    |// Description: 
                            15144 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15145 ; 7    |
                            15146 ; 8    |#ifndef _DDILDL_H
                            15147 ; 9    |#define _DDILDL_H
                            15148 ; 10   |
                            15149 ; 11   |///////////////////////////////////////////////////////////////////////////////
                            15150 ; 12   |// Includes
                            15151 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            15152 ; 14   |
                            15153 ; 15   |///////////////////////////////////////////////////////////////////////////////
                            15154 ; 16   |// Definitions
                            15155 ; 17   |///////////////////////////////////////////////////////////////////////////////
                            15156 ; 18   |// version before march 11 2005 
                            15157 ; 19   |//#ifdef PLAYER_BUILD
                            15158 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                            15159 ; 21   |//#else
                            15160 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                            15161 ; 23   |//#endif
                            15162 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                            15163 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                            15164 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                            15165 ; 27   |
                            15166 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                            15167 ; 29   |
                            15168 ; 30   |//
                            15169 ; 31   |// WARNING
                            15170 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                            15171 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                            15172 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                            15173 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                            15174 ; 36   |#ifdef PLAYER_BUILD
                            15175 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                            15176 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                            15177 ; 39   |/********************************************************************************
                            15178 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                            15179 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                            15180 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                            15181 ; 43   | ********************************************************************************/
                            15182 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                            15183 ; 45   |#endif
                            15184 ; 46   |
                            15185 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15186 ; 48   |
                            15187 ; 49   |///////////////////////////////////////////////////////////////////////////////
                            15188 ; 50   |// Error codes
                            15189 ; 51   |///////////////////////////////////////////////////////////////////////////////
                            15190 ; 52   |
                            15191 ; 53   |#include "errors.h"
                            15192 
                            15194 
                            15195 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            15196 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                            15197 ; 3    |////
                            15198 ; 4    |//// Filename: errors.inc
                            15199 ; 5    |//// Description: 
                            15200 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            15201 ; 7    |
                            15202 ; 8    |#if (!defined(ERRORS_INC))
                            15203 ; 9    |#define ERRORS_INC 1
                            15204 ; 10   |
                            15205 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                            15206 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                            15207 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                            15208 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                            15209 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                            15210 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                            15211 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                            15212 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                            15213 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                            15214 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                            15215 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                            15216 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                            15217 ; 23   |// block in the device. The block was marked bad and tables updated.
                            15218 ; 24   |// The application must start over.
                            15219 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                            15220 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                            15221 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                            15222 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                            15223 ; 29   |
                            15224 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                            15225 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                            15226 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                            15227 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                            15228 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                            15229 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                            15230 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                            15231 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                            15232 ; 38   |//Specific to NAND
                            15233 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                            15234 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                            15235 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                            15236 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                            15237 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                            15238 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                            15239 ; 45   |
                            15240 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                            15241 ; 47   |
                            15242 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                            15243 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                            15244 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                            15245 ; 51   |
                            15246 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                            15247 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                            15248 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15249 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                            15250 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                            15251 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                            15252 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                            15253 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                            15254 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                            15255 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                            15256 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                            15257 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                            15258 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                            15259 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                            15260 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                            15261 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                            15262 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                            15263 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                            15264 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                            15265 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                            15266 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                            15267 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                            15268 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                            15269 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                            15270 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                            15271 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                            15272 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                            15273 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                            15274 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                            15275 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                            15276 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                            15277 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                            15278 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                            15279 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                            15280 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                            15281 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                            15282 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                            15283 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                            15284 ; 90   |
                            15285 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                            15286 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                            15287 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                            15288 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                            15289 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                            15290 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                            15291 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                            15292 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                            15293 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                            15294 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                            15295 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                            15296 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                            15297 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                            15298 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                            15299 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                            15300 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                            15301 ; 107  |
                            15302 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                            15303 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                            15304 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                            15305 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                            15306 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                            15307 ; 113  |
                            15308 ; 114  |// indicates that during the NandHalInit, the NandType did not
                            15309 ; 115  |// match the previously initialized Nand chip type.
                            15310 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15311 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                            15312 ; 118  |// Errors from calling HIL functions
                            15313 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                            15314 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                            15315 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                            15316 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                            15317 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                            15318 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                            15319 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                            15320 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                            15321 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                            15322 ; 128  |// for 3410 build
                            15323 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                            15324 ; 130  |// for 3410 build
                            15325 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                            15326 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                            15327 ; 133  |
                            15328 ; 134  |// indicates that the GetStatus returned a FAIL
                            15329 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                            15330 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                            15331 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                            15332 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                            15333 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                            15334 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                            15335 ; 141  |// indicates the NAND was already BUSY
                            15336 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                            15337 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                            15338 ; 144  |// ECC Error Codes
                            15339 ; 145  |// ECC Computation has successfully completed
                            15340 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                            15341 ; 147  |// ECC computation still busy
                            15342 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                            15343 ; 149  |// timed out while waiting on object
                            15344 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                            15345 ; 151  |// flag already set for SDK2.4 lock
                            15346 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                            15347 ; 153  |
                            15348 ; 154  |#define NANDHAL_ECC_NOERROR 0
                            15349 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                            15350 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                            15351 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                            15352 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                            15353 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                            15354 ; 160  |
                            15355 ; 161  |// MMC Errors
                            15356 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                            15357 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                            15358 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                            15359 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                            15360 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                            15361 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                            15362 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                            15363 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                            15364 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                            15365 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                            15366 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                            15367 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                            15368 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                            15369 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                            15370 ; 176  |
                            15371 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                            15372 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15373 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                            15374 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                            15375 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                            15376 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                            15377 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                            15378 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                            15379 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                            15380 ; 186  |
                            15381 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                            15382 ; 188  |//// MMC HAL Error codes
                            15383 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                            15384 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                            15385 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                            15386 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                            15387 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                            15388 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                            15389 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                            15390 ; 196  |
                            15391 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                            15392 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                            15393 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                            15394 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                            15395 ; 201  |
                            15396 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                            15397 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                            15398 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                            15399 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                            15400 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                            15401 ; 207  |
                            15402 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                            15403 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                            15404 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                            15405 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                            15406 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                            15407 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                            15408 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                            15409 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                            15410 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                            15411 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                            15412 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                            15413 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                            15414 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                            15415 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                            15416 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                            15417 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                            15418 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                            15419 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                            15420 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                            15421 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                            15422 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                            15423 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                            15424 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                            15425 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                            15426 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                            15427 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                            15428 ; 234  |
                            15429 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                            15430 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                            15431 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                            15432 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                            15433 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                            15434 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15435 ; 241  |
                            15436 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                            15437 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                            15438 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                            15439 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                            15440 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                            15441 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                            15442 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                            15443 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                            15444 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                            15445 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                            15446 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                            15447 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                            15448 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                            15449 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                            15450 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                            15451 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                            15452 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                            15453 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                            15454 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                            15455 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                            15456 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                            15457 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                            15458 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                            15459 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                            15460 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                            15461 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                            15462 ; 268  |
                            15463 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                            15464 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                            15465 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                            15466 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                            15467 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                            15468 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                            15469 ; 275  |
                            15470 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                            15471 ; 277  |//MATH errors...
                            15472 ; 278  |#define ERRZeroDivide 0x7FFFFF
                            15473 ; 279  |
                            15474 ; 280  |//Memory Pointer errors...
                            15475 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                            15476 ; 282  |//****************************************************************/
                            15477 ; 283  |#if (!defined(NOERROR))
                            15478 ; 284  |#define NOERROR 0
                            15479 ; 285  |#endif
                            15480 ; 286  |
                            15481 ; 287  |////Added by RAKS
                            15482 ; 288  |
                            15483 ; 289  |#define ERRProgram 0x911111
                            15484 ; 290  |#define ERRNoMedia 0x922222
                            15485 ; 291  |#define ERRHwFail 0x933333   
                            15486 ; 292  |#define ERRInvMedia 0x944444
                            15487 ; 293  |#define ERRBlkFail 0x955555
                            15488 ; 294  |#define ERRInvDataStatus 0x966666
                            15489 ; 295  |#define ERRWriteFail 0x977777
                            15490 ; 296  |#define ERRECCCorr 0x988888
                            15491 ; 297  |#define ERRECCFail 0x999999
                            15492 ; 298  |#define ERRZoneFull 0x9aaaaa
                            15493 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                            15494 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                            15495 ; 301  |//invalid partition table signature. 
                            15496 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15497 ; 303  |//boot ID bad
                            15498 ; 304  |#define ERRBootID 0x9BBBBB   
                            15499 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                            15500 ; 306  |////Nothing was here : RAKS
                            15501 ; 307  |//JUMP instruction bad
                            15502 ; 308  |#define ERRBootJump 0x9DDDDD  
                            15503 ; 309  |//ID Byte bad
                            15504 ; 310  |#define ERRIDByte 0x9EEEEE  
                            15505 ; 311  |
                            15506 ; 312  |
                            15507 ; 313  |//****************************************************************
                            15508 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                            15509 ; 315  |//****************************************************************
                            15510 ; 316  |// Master ERROR File
                            15511 ; 317  |//****************************************************************/
                            15512 ; 318  |// FAT File System Error Codes
                            15513 ; 319  |// corrupt FAT
                            15514 ; 320  |#define FATCorrupt -1        
                            15515 ; 321  |// invalid FAT sector
                            15516 ; 322  |#define DIRInvlaidSector -2        
                            15517 ; 323  |
                            15518 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                            15519 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                            15520 ; 326  |#define FATwarningReservedCx 0x0A1111
                            15521 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                            15522 ; 328  |//FATcxsFree==0 
                            15523 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                            15524 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                            15525 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                            15526 ; 332  |
                            15527 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                            15528 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                            15529 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                            15530 ; 336  |
                            15531 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                            15532 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                            15533 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                            15534 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                            15535 ; 341  |//No Free Cxs on FAT Scan!
                            15536 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                            15537 ; 343  |
                            15538 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                            15539 ; 345  |
                            15540 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                            15541 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                            15542 ; 348  |
                            15543 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                            15544 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                            15545 ; 351  |
                            15546 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                            15547 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                            15548 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                            15549 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                            15550 ; 356  |
                            15551 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                            15552 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                            15553 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                            15554 ; 360  |
                            15555 ; 361  |#define SEEKprefix 0x85
                            15556 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                            15557 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                            15558 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15559 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                            15560 ; 366  |
                            15561 ; 367  |#define READprefix 0x86
                            15562 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                            15563 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                            15564 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                            15565 ; 371  |#define READerrorAccessDenied 0x86ADAD
                            15566 ; 372  |#define READerrorFreeCx 0x860000
                            15567 ; 373  |#define READerrorEndOfChain 0x861111
                            15568 ; 374  |#define READerrorReservedCx 0x862222
                            15569 ; 375  |#define READerrorBadCx 0x863333
                            15570 ; 376  |
                            15571 ; 377  |#define WRITEprefix 0x87
                            15572 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                            15573 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                            15574 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                            15575 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                            15576 ; 382  |#define WRITEerrorFreeCx 0x870000
                            15577 ; 383  |#define WRITEerrorEndOfChain 0x871111
                            15578 ; 384  |#define WRITEerrorReservedCx 0x872222
                            15579 ; 385  |#define WRITEerrorBadCx 0x873333
                            15580 ; 386  |
                            15581 ; 387  |#define UTILprefix 0x88
                            15582 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                            15583 ; 389  |
                            15584 ; 390  |// Directory Error Codes
                            15585 ; 391  |
                            15586 ; 392  |// invalid DIR sector specified
                            15587 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                            15588 ; 394  |// PATH search string has invlaid directory
                            15589 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                            15590 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                            15591 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                            15592 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                            15593 ; 399  |// Bad cluster number
                            15594 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                            15595 ; 401  |// Can't open ROOT
                            15596 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                            15597 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                            15598 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                            15599 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                            15600 ; 406  |// bad record number to read
                            15601 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                            15602 ; 408  |// record requeste not in range
                            15603 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                            15604 ; 410  |// record requeste past end of ROOT
                            15605 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                            15606 ; 412  |// device number invalid
                            15607 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                            15608 ; 414  |// FCB Does not popint to a sub-Directory entry
                            15609 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                            15610 ; 416  |// Path specified is invalid
                            15611 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                            15612 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                            15613 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                            15614 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                            15615 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                            15616 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                            15617 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                            15618 ; 424  |
                            15619 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                            15620 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15621 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                            15622 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                            15623 ; 429  |// String Manipulation Error Codes
                            15624 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                            15625 ; 431  |
                            15626 ; 432  |#endif //@DEF(ERRORS_INC)
                            15627 ; 433  |
                            15628 
                            15630 
                            15631 ; 54   |
                            15632 ; 55   |///////////////////////////////////////////////////////////////////////////////
                            15633 ; 56   |// Typedefs
                            15634 ; 57   |///////////////////////////////////////////////////////////////////////////////
                            15635 ; 58   |
                            15636 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                            15637 ; 60   |
                            15638 ; 61   |#include "ddildl\ddildl_defs.h"
                            15639 
                            15641 
                            15642 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15643 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                            15644 ; 3    |//
                            15645 ; 4    |// Filename: ddildl_defs.h
                            15646 ; 5    |// Description: 
                            15647 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15648 ; 7    |
                            15649 ; 8    |#ifndef _DDILDL_DEFS_H
                            15650 ; 9    |#define _DDILDL_DEFS_H
                            15651 ; 10   |
                            15652 ; 11   |///////////////////////////////////////////////////////////////////////////////
                            15653 ; 12   |// Typedefs
                            15654 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            15655 ; 14   |
                            15656 ; 15   |typedef enum {
                            15657 ; 16   |  MediaStateUnknown,
                            15658 ; 17   |  MediaStateErased,
                            15659 ; 18   |  MediaStateAllocated
                            15660 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                            15661 ; 20   |
                            15662 ; 21   |typedef enum {
                            15663 ; 22   |    MediaTypeNand = 0,
                            15664 ; 23   |    MediaTypeMMC = 1,
                            15665 ; 24   |    MediaTypeHDD = 2,
                            15666 ; 25   |    MediaTypeRAM = 3
                            15667 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                            15668 ; 27   |
                            15669 ; 28   |typedef enum {
                            15670 ; 29   |    MediaInfoNumberOfDrives = 0,
                            15671 ; 30   |    MediaInfoSizeInBytes = 1,
                            15672 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                            15673 ; 32   |    MediaInfoIsInitialized = 3,
                            15674 ; 33   |    MediaInfoMediaState = 4,
                            15675 ; 34   |    MediaInfoIsWriteProtected = 5,
                            15676 ; 35   |    MediaInfoPhysicalMediaType = 6,
                            15677 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                            15678 ; 37   |    MediaInfoSerialNumber = 8,
                            15679 ; 38   |    MediaInfoIsSystemMedia = 9,
                            15680 ; 39   |    MediaInfoIsMediaPresent = 10
                            15681 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                            15682 ; 41   |
                            15683 ; 42   |#ifdef MFG_TOOL
                            15684 ; 43   |  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15685 ; 44   |typedef enum {
                            15686 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                            15687 ; 46   |    SerialNoInfoSerialNumber = 1
                            15688 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                            15689 ; 48   |#endif
                            15690 ; 49   |
                            15691 ; 50   |typedef enum {
                            15692 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                            15693 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                            15694 ; 53   |    DriveInfoSizeInBytes = 2,
                            15695 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                            15696 ; 55   |    DriveInfoSizeInSectors = 4,
                            15697 ; 56   |    DriveInfoType = 5,
                            15698 ; 57   |    DriveInfoTag = 6,
                            15699 ; 58   |    DriveInfoComponentVersion = 7,
                            15700 ; 59   |    DriveInfoProjectVersion = 8,
                            15701 ; 60   |    DriveInfoIsWriteProtected = 9,
                            15702 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                            15703 ; 62   |    DriveInfoSerialNumber = 11,
                            15704 ; 63   |    DriveInfoMediaPresent = 12,
                            15705 ; 64   |    DriveInfoMediaChange = 13,
                            15706 ; 65   |    DriveInfoSectorAllocation = 14
                            15707 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                            15708 ; 67   |
                            15709 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                            15710 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                            15711 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                            15712 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                            15713 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                            15714 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                            15715 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                            15716 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                            15717 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                            15718 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                            15719 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                            15720 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                            15721 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                            15722 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                            15723 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                            15724 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                            15725 ; 84   |//  may extend the system drives without DDI source code.
                            15726 ; 85   |/*
                            15727 ; 86   |typedef enum {
                            15728 ; 87   |    ResourceBinDriveTag = 0x00,
                            15729 ; 88   |    BootManagerDriveTag = 0x50,
                            15730 ; 89   |    StmpSysDriveTag = 0x01,
                            15731 ; 90   |    UsbMscDriveTag = 0x02,
                            15732 ; 91   |    DataDriveTag = 0x0A
                            15733 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                            15734 ; 93   |*/
                            15735 ; 94   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15736 ; 95   |typedef enum {
                            15737 ; 96   |    DriveTypeData = 0,
                            15738 ; 97   |    DriveTypeSystem = 1,
                            15739 ; 98   |    DriveTypeHidden = 2,
                            15740 ; 99   |    DriveTypeUnknown = 3
                            15741 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                            15742 
                            15749 
                            15750 ; 101  |
                            15751 ; 102  |typedef struct {
                            15752 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                            15753 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                            15754 ; 105  |    WORD wTag;
                            15755 ; 106  |    DWORD dwSizeInBytes;
                            15756 ; 107  |    BOOL bRequired;
                            15757 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                            15758 
                            15766 
                            15767 ; 109  |
                            15768 ; 110  |typedef struct {
                            15769 ; 111  |    WORD wNumEntries;
                            15770 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                            15771 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                            15772 ; 114  |
                            15773 ; 115  |
                            15774 ; 116  |#define TA6_ROM_REV_ID  6
                            15775 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                            15776 ; 118  |
                            15777 ; 119  | 
                            15778 ; 120  |typedef union {
                            15779 ; 121  |
                            15780 ; 122  |    struct {
                            15781 ; 123  |        WORD MinorL      : 8;
                            15782 ; 124  |        WORD MinorH      : 8;
                            15783 ; 125  |        WORD MiddleL     : 8;
                            15784 ; 126  |        WORD MiddleH     : 8;
                            15785 ; 127  |        WORD MajorL      : 8;
                            15786 ; 128  |        WORD MajorH      : 8;
                            15787 ; 129  |        } PARTIAL_VERSION;
                            15788 ; 130  |        
                            15789 ; 131  |    DWORD   Version;        
                            15790 ; 132  |
                            15791 ; 133  |} SYSTEM_VERSION;
                            15792 ; 134  |
                            15793 ; 135  |
                            15794 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                            15795 
                            15797 
                            15798 ; 62   |
                            15799 ; 63   |///////////////////////////////////////////////////////////////////////////////
                            15800 ; 64   |// Prototypes
                            15801 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                            15802 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                            15803 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                            15804 ; 68   |///////////////////////////////////////////////////////////////////////////////
                            15805 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                            15806 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                            15807 
                            15815 
                            15816 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                            15817 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                            15818 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15819 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                            15820 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                            15821 
                            15835 
                            15836 ; 76   |    void * _Y pInfo);
                            15837 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                            15838 ; 78   |
                            15839 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                            15840 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            15841 
                            15859 
                            15860 ; 81   |    void * pInfo);
                            15861 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            15862 ; 83   |    void * pInfo);
                            15863 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            15864 
                            15868 
                            15869 ; 85   |    P_SECTOR_BUFFER pSectorData);
                            15870 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            15871 ; 87   |    P_SECTOR_BUFFER pSectorData);
                            15872 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                            15873 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                            15874 
                            15879 
                            15880 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                            15881 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                            15882 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                            15883 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                            15884 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                            15885 ; 95   |
                            15886 ; 96   |RETCODE DdiInitAll(void);
                            15887 ; 97   |
                            15888 ; 98   |
                            15889 ; 99   |#endif // #ifndef _DDILDL_H
                            15890 
                            15892 
                            15893 ; 30   |#include "ddildl_internal.h"
                            15894 
                            15896 
                            15897 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15898 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                            15899 ; 3    |//
                            15900 ; 4    |// Filename: ddildl_internal.h
                            15901 ; 5    |// Description: 
                            15902 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15903 ; 7    |#ifndef _DDILDL_INTERNAL_H
                            15904 ; 8    |#define _DDILDL_INTERNAL_H
                            15905 ; 9    |
                            15906 ; 10   |#include "ddildl.h"
                            15907 
                            15909 
                            15910 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15911 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                            15912 ; 3    |//
                            15913 ; 4    |// Filename: ddildl.h
                            15914 ; 5    |// Description: 
                            15915 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15916 ; 7    |
                            15917 ; 8    |#ifndef _DDILDL_H
                            15918 ; 9    |#define _DDILDL_H
                            15919 ; 10   |
                            15920 ; 11   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15921 ; 12   |// Includes
                            15922 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            15923 ; 14   |
                            15924 ; 15   |///////////////////////////////////////////////////////////////////////////////
                            15925 ; 16   |// Definitions
                            15926 ; 17   |///////////////////////////////////////////////////////////////////////////////
                            15927 ; 18   |// version before march 11 2005 
                            15928 ; 19   |//#ifdef PLAYER_BUILD
                            15929 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                            15930 ; 21   |//#else
                            15931 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                            15932 ; 23   |//#endif
                            15933 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                            15934 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                            15935 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                            15936 ; 27   |
                            15937 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                            15938 ; 29   |
                            15939 ; 30   |//
                            15940 ; 31   |// WARNING
                            15941 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                            15942 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                            15943 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                            15944 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                            15945 ; 36   |#ifdef PLAYER_BUILD
                            15946 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                            15947 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                            15948 ; 39   |/********************************************************************************
                            15949 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                            15950 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                            15951 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                            15952 ; 43   | ********************************************************************************/
                            15953 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                            15954 ; 45   |#endif
                            15955 ; 46   |
                            15956 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                            15957 ; 48   |
                            15958 ; 49   |///////////////////////////////////////////////////////////////////////////////
                            15959 ; 50   |// Error codes
                            15960 ; 51   |///////////////////////////////////////////////////////////////////////////////
                            15961 ; 52   |
                            15962 ; 53   |#include "errors.h"
                            15963 ; 54   |
                            15964 ; 55   |///////////////////////////////////////////////////////////////////////////////
                            15965 ; 56   |// Typedefs
                            15966 ; 57   |///////////////////////////////////////////////////////////////////////////////
                            15967 ; 58   |
                            15968 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                            15969 ; 60   |
                            15970 ; 61   |#include "ddildl\ddildl_defs.h"
                            15971 ; 62   |
                            15972 ; 63   |///////////////////////////////////////////////////////////////////////////////
                            15973 ; 64   |// Prototypes
                            15974 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                            15975 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                            15976 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                            15977 ; 68   |///////////////////////////////////////////////////////////////////////////////
                            15978 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                            15979 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                            15980 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15981 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                            15982 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                            15983 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                            15984 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                            15985 ; 76   |    void * _Y pInfo);
                            15986 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                            15987 ; 78   |
                            15988 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                            15989 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            15990 ; 81   |    void * pInfo);
                            15991 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            15992 ; 83   |    void * pInfo);
                            15993 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            15994 ; 85   |    P_SECTOR_BUFFER pSectorData);
                            15995 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            15996 ; 87   |    P_SECTOR_BUFFER pSectorData);
                            15997 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                            15998 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                            15999 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                            16000 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                            16001 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                            16002 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                            16003 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                            16004 ; 95   |
                            16005 ; 96   |RETCODE DdiInitAll(void);
                            16006 ; 97   |
                            16007 ; 98   |
                            16008 ; 99   |#endif // #ifndef _DDILDL_H
                            16009 
                            16022 
                            16023 ; 11   |
                            16024 ; 12   |///////////////////////////////////////
                            16025 ; 13   |// Logical Media structures
                            16026 ; 14   |///////////////////////////////////////
                            16027 ; 15   |
                            16028 ; 16   |typedef struct {
                            16029 ; 17   |    // Discovered at Run Time by MediaInit:
                            16030 ; 18   |    WORD    wMediaNumber;
                            16031 ; 19   |    BOOL    bInitialized;
                            16032 ; 20   |    MEDIA_STATE eState;
                            16033 ; 21   |    BOOL    bAllocated;
                            16034 ; 22   |    BOOL    bWriteProtected;
                            16035 ; 23   |    WORD    wNumberOfDrives;//on this media
                            16036 ; 24   |    DWORD   dwSizeInBytes;
                            16037 ; 25   |    WORD    wAllocationUnitSizeInBytes;
                            16038 ; 26   |    PHYSICAL_MEDIA_TYPE PhysicalType;
                            16039 ; 27   |    void * pMediaInfo;  // same as in LOGICAL_DRIVE_DESCRIPTOR
                            16040 ; 28   |} LOGICAL_MEDIA_DESCRIPTOR, * P_LOGICAL_MEDIA_DESCRIPTOR;
                            16041 
                            16058 
                            16059 ; 29   |
                            16060 ; 30   |// Logical Media API functions
                            16061 ; 31   |typedef _reentrant RETCODE (*P_MEDIA_INIT_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR);
                            16062 ; 32   |typedef RETCODE _reentrant (*P_MEDIA_ALLOCATE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                            16063 ; 33   |    P_MEDIA_ALLOCATION_TABLE);
                            16064 ; 34   |typedef RETCODE _reentrant (*P_MEDIA_DISCOVER_ALLOCATION_FUNCTION)(P_LOGICAL_MEDIA_DESCRIP
                                  TOR);
                            16065 ; 35   |typedef RETCODE _reentrant (*P_MEDIA_GET_MEDIA_TABLE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                                  
                            16066 ; 36   |    P_MEDIA_ALLOCATION_TABLE);
                            16067 ; 37   |typedef RETCODE _reentrant (*P_MEDIA_GET_INFO_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                            16068 ; 38   |    LOGICAL_MEDIA_INFO, void * _Y);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16069 ; 39   |typedef RETCODE _reentrant (*P_MEDIA_ERASE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                            16070 ; 40   |    WORD wMagicNumber);
                            16071 
                            16096 
                            16097 ; 41   |
                            16098 ; 42   |typedef struct {
                            16099 ; 43   |    WORD wInitCodeBank;
                            16100 ; 44   |    P_MEDIA_INIT_FUNCTION pInit;
                            16101 ; 45   |    WORD wAllocateCodeBank;
                            16102 ; 46   |    P_MEDIA_ALLOCATE_FUNCTION pAllocate;
                            16103 ; 47   |    WORD wDiscoverAllocationCodeBank;
                            16104 ; 48   |    P_MEDIA_DISCOVER_ALLOCATION_FUNCTION pDiscoverAllocation;
                            16105 ; 49   |    WORD wGetMediaTableCodeBank;
                            16106 ; 50   |    P_MEDIA_GET_MEDIA_TABLE_FUNCTION pGetMediatable;
                            16107 ; 51   |    WORD wGetInfoCodeBank;
                            16108 ; 52   |    P_MEDIA_GET_INFO_FUNCTION pGetInfo;
                            16109 ; 53   |    WORD wEraseCodeBank;
                            16110 ; 54   |    P_MEDIA_ERASE_FUNCTION pErase;
                            16111 ; 55   |} LOGICAL_MEDIA_API, * P_LOGICAL_MEDIA_API;
                            16112 
                            16129 
                            16130 ; 56   |
                            16131 ; 57   |typedef struct {
                            16132 ; 58   |    P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor;
                            16133 ; 59   |    P_LOGICAL_MEDIA_API pApi;
                            16134 ; 60   |} LOGICAL_MEDIA, * P_LOGICAL_MEDIA;
                            16135 
                            16153 
                            16154 ; 61   |
                            16155 ; 62   |///////////////////////////////////////
                            16156 ; 63   |// Logical Drive structures
                            16157 ; 64   |///////////////////////////////////////
                            16158 ; 65   |
                            16159 ; 66   |typedef struct {
                            16160 ; 67   |    // Discovered at Run Time by MediaDiscover
                            16161 ; 68   |    BOOL    bInitialized;
                            16162 ; 69   |    BOOL    bPresent;       // Indicates if a system drive is present
                            16163 ; 70   |                            // wTag from Config Block matches wTag from Drive
                            16164 ; 71   |                            // redundant area
                            16165 ; 72   |    BOOL    bErased;
                            16166 ; 73   |    BOOL    bWriteProtected;
                            16167 ; 74   |    DWORD   dwNumberOfSectors;
                            16168 ; 75   |    LOGICAL_DRIVE_TYPE Type;
                            16169 ; 76   |    WORD    wTag;
                            16170 ; 77   |    WORD    wDriveNumber;
                            16171 ; 78   |    DWORD   dwSizeInBytes;
                            16172 ; 79   |    WORD    wSectorSizeInBytes; // not included bad blocks (NAND media)
                            16173 ; 80   |    WORD    wEraseSizeInBytes;
                            16174 ; 81   |    SYSTEM_VERSION ProjectVersion;
                            16175 ; 82   |    SYSTEM_VERSION ComponentVersion;
                            16176 ; 83   |    P_LOGICAL_MEDIA_DESCRIPTOR pLogicalMediaDescriptor;
                            16177 ; 84   |    void * pMediaInfo;  // same as in LOGICAL_MEDIA_DESCRIPTOR
                            16178 ; 85   |    void * pDriveInfo;
                            16179 ; 86   |} LOGICAL_DRIVE_DESCRIPTOR, * P_LOGICAL_DRIVE_DESCRIPTOR;
                            16180 
                            16201 
                            16202 ; 87   |
                            16203 ; 88   |// Logical Drive API functions
                            16204 ; 89   |typedef RETCODE _reentrant (*P_DRIVE_INIT_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                            16205 ; 90   |typedef RETCODE _reentrant (*P_DRIVE_GET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                            16206 ; 91   |    LOGICAL_DRIVE_INFO, void *);
                            16207 ; 92   |typedef RETCODE _reentrant (*P_DRIVE_SET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16208 ; 93   |    LOGICAL_DRIVE_INFO, void *);
                            16209 ; 94   |typedef RETCODE _reentrant (*P_DRIVE_READ_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                            16210 ; 95   |    DWORD, P_SECTOR_BUFFER);
                            16211 ; 96   |typedef RETCODE _reentrant (*P_DRIVE_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                            16212 ; 97   |    DWORD, P_SECTOR_BUFFER);
                            16213 ; 98   |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SETUP_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTO
                                  R,
                            16214 ; 99   |    DWORD, WORD, MULTI_WRITE_CALLBACK_FUNCTION);
                            16215 ; 100  |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPT
                                  OR,
                            16216 ; 101  |    P_SECTOR_BUFFER, LONG);
                            16217 ; 102  |typedef RETCODE _reentrant (*P_DRIVE_ERASE_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR, WORD);
                            16218 ; 103  |typedef RETCODE _reentrant (*P_DRIVE_FLUSH_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                            16219 
                            16256 
                            16257 ; 104  |
                            16258 ; 105  |typedef struct {
                            16259 ; 106  |    WORD wInitCodeBank;
                            16260 ; 107  |    P_DRIVE_INIT_FUNCTION pInit;
                            16261 ; 108  |    WORD wGetInfoCodeBank;
                            16262 ; 109  |    P_DRIVE_GET_INFO_FUNCTION pGetInfo;
                            16263 ; 110  |    WORD wSetInfoCodeBank;
                            16264 ; 111  |    P_DRIVE_SET_INFO_FUNCTION pSetInfo;
                            16265 ; 112  |    WORD wReadSectorCodeBank;
                            16266 ; 113  |    P_DRIVE_READ_SECTOR_FUNCTION pReadSector;
                            16267 ; 114  |    WORD wWriteSectorCodeBank;
                            16268 ; 115  |    P_DRIVE_WRITE_SECTOR_FUNCTION pWriteSector;
                            16269 ; 116  |    WORD wMultiWriteSetupCodeBank;
                            16270 ; 117  |    P_DRIVE_MULTI_WRITE_SETUP_FUNCTION pMultiWriteSetup;
                            16271 ; 118  |    WORD wMultiWriteSectorCodeBank;
                            16272 ; 119  |    P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION pMultiWriteSector;
                            16273 ; 120  |    WORD wEraseCodeBank;
                            16274 ; 121  |    P_DRIVE_ERASE_FUNCTION pErase;
                            16275 ; 122  |    WORD wFlushCodeBank;
                            16276 ; 123  |    P_DRIVE_FLUSH_FUNCTION pFlush;
                            16277 ; 124  |} LOGICAL_DRIVE_API, * P_LOGICAL_DRIVE_API;
                            16278 
                            16301 
                            16302 ; 125  |
                            16303 ; 126  |typedef struct {
                            16304 ; 127  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                            16305 ; 128  |    P_LOGICAL_DRIVE_API pApi;
                            16306 ; 129  |} LOGICAL_DRIVE, * P_LOGICAL_DRIVE;
                            16307 
                            16309 
                            16310 ; 130  |
                            16311 ; 131  |///////////////////////////////////////////////////////////////////////////////
                            16312 ; 132  |// Global variables
                            16313 ; 133  |///////////////////////////////////////////////////////////////////////////////
                            16314 ; 134  |extern MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[];
                            16315 
                            16317 
                            16318 ; 135  |extern LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[];
                            16319 
                            16324 
                            16325 ; 136  |extern LOGICAL_MEDIA g_Media[];
                            16326 ; 137  |extern WORD g_wNumMedia;
                            16327 
                            16329 
                            16330 ; 138  |extern LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[];
                            16331 
                            16336 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16337 ; 139  |extern LOGICAL_DRIVE g_Drive[];
                            16338 ; 140  |extern WORD g_wNumDrives;
                            16339 ; 141  |
                            16340 ; 142  |///////////////////////////////////////////////////////////////////////////////
                            16341 ; 143  |// SysCallFunction Variants
                            16342 ; 144  |///////////////////////////////////////////////////////////////////////////////
                            16343 ; 145  |RETCODE _asmfunc SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR_f(WORD * RESOURCE,RETCODE _ree
                                  ntrant (int,int,int*),  int, int, int *);
                            16344 ; 146  |#define SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR(rsrc,func,a,b,p) SysCallFunction_P_LOGI
                                  CAL_MEDIA_DESCRIPTOR_f((void*)rsrc,(func),(a),(b),(p))
                            16345 ; 147  |
                            16346 ; 148  |#endif
                            16347 
                            16349 
                            16350 ; 31   |#include "filesystem.h"
                            16351 
                            16353 
                            16354 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16355 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                            16356 ; 3    |//
                            16357 ; 4    |//  File        : FileSystem.h
                            16358 ; 5    |//  Description : Header File for File System
                            16359 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16360 ; 7    |
                            16361 ; 8    |#ifndef _FILESYSTEM_H
                            16362 ; 9    |#define _FILESYSTEM_H
                            16363 ; 10   |
                            16364 ; 11   |#include "types.h"
                            16365 ; 12   |
                            16366 ; 13   |
                            16367 ; 14   |// File attributes
                            16368 ; 15   |#ifndef _FS_ATTRIBUTES
                            16369 ; 16   |#define _FS_ATTRIBUTES
                            16370 ; 17   |#define READ        1
                            16371 ; 18   |#define WRITE       2
                            16372 ; 19   |#define WRITE_PLUS  3
                            16373 ; 20   |#define APPEND      4
                            16374 ; 21   |#define TRUNCATE    8
                            16375 ; 22   |#define CREATE      16
                            16376 ; 23   |#endif
                            16377 ; 24   |
                            16378 ; 25   |//#ifndef FAT12
                            16379 ; 26   |//#define FAT12   1
                            16380 ; 27   |//#endif
                            16381 ; 28   |//
                            16382 ; 29   |#ifndef FAT16
                            16383 ; 30   |#define FAT16   2
                            16384 ; 31   |#endif
                            16385 ; 32   |
                            16386 ; 33   |#define MEM_SPACE_P 0x100000
                            16387 ; 34   |#define MEM_SPACE_Y 0x400000
                            16388 ; 35   |#define MEM_SPACE_X 0x800000
                            16389 ; 36   |
                            16390 ; 37   |#define FILE_SYS_MODE_READ  0
                            16391 ; 38   |#define FILE_SYS_MODE_WRITE 1
                            16392 ; 39   | 
                            16393 ; 40   |#define ATTR_READ_ONLY      0x01
                            16394 ; 41   |#define ATTR_HIDDEN         0x02
                            16395 ; 42   |#define ATTR_SYSTEM         0x04
                            16396 ; 43   |#define ATTR_VOLUME_ID      0x08
                            16397 ; 44   |#define ATTR_DIRECTORY      0x10
                            16398 ; 45   |#define ATTR_ARCHIVE        0x20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16399 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                            16400 ; 47   |
                            16401 ; 48   |#define SEEK_SET           -1
                            16402 ; 49   |#define SEEK_CUR            0
                            16403 ; 50   |#define SEEK_END            1
                            16404 ; 51   |
                            16405 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                            16406 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                            16407 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                            16408 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                            16409 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                            16410 ; 57   |
                            16411 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                            16412 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                            16413 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                            16414 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                            16415 ; 62   |
                            16416 ; 63   |#define READ_TYPE_NORMAL            0
                            16417 ; 64   |#define READ_TYPE_FAT               1
                            16418 ; 65   |#define READ_TYPE_RAW               2
                            16419 ; 66   |
                            16420 ; 67   |
                            16421 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            16422 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                            16423 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                            16424 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            16425 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                            16426 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                            16427 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                            16428 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                            16429 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            16430 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                            16431 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                            16432 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                            16433 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                            16434 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                            16435 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                            16436 ; 83   |    #endif
                            16437 ; 84   |#else
                            16438 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                            16439 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                            16440 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            16441 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            16442 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                            16443 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                            16444 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                            16445 ; 92   |    #endif
                            16446 ; 93   |#endif
                            16447 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                            16448 ; 95   |
                            16449 ; 96   |
                            16450 ; 97   |#ifndef MAX_FILENAME_LENGTH
                            16451 ; 98   |#define MAX_FILENAME_LENGTH 256
                            16452 ; 99   |#endif
                            16453 ; 100  |
                            16454 ; 101  |typedef struct {
                            16455 ; 102  |    WORD wNumberOfZones;
                            16456 ; 103  |    WORD wSizeInMegaBytes;
                            16457 ; 104  |} SMARTMEDIA_CHIP_INFO;
                            16458 ; 105  |
                            16459 ; 106  |typedef struct {
                            16460 ; 107  |    WORD wBootIdentification;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 270

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16461 ; 108  |    WORD wStartHeadNumber;
                            16462 ; 109  |    WORD wStartSectorNumber;
                            16463 ; 110  |    WORD wStartCylinderNumber;
                            16464 ; 111  |    WORD wSystemIdentification;
                            16465 ; 112  |    WORD wEndHeadNumber;
                            16466 ; 113  |    WORD wEndSectorNumber;
                            16467 ; 114  |    WORD wEndCylinderNumber;
                            16468 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                            16469 ; 116  |    WORD wStartLogicalSectorNumberLow;
                            16470 ; 117  |    WORD wPartitionSizeHigh;
                            16471 ; 118  |    WORD wPartitionSizeLow;
                            16472 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                            16473 ; 120  |
                            16474 ; 121  |typedef struct {
                            16475 ; 122  |    WORD wWord0;
                            16476 ; 123  |    WORD wWord1;
                            16477 ; 124  |    WORD wWord2;
                            16478 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                            16479 ; 126  |
                            16480 ; 127  |typedef struct {
                            16481 ; 128  |    WORD wWord0;
                            16482 ; 129  |    WORD wWord1;
                            16483 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                            16484 ; 131  |
                            16485 ; 132  |typedef struct {
                            16486 ; 133  |    WORD wWord0;
                            16487 ; 134  |    WORD wWord1;
                            16488 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                            16489 ; 136  |
                            16490 ; 137  |typedef struct {
                            16491 ; 138  |    WORD wWord0;
                            16492 ; 139  |    WORD wWord1;
                            16493 ; 140  |    WORD wWord2;
                            16494 ; 141  |    WORD wWord3;
                            16495 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                            16496 ; 143  |
                            16497 ; 144  |typedef struct {
                            16498 ; 145  |    WORD wWord0;
                            16499 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                            16500 ; 147  |
                            16501 ; 148  |typedef struct {
                            16502 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                            16503 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                            16504 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                            16505 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                            16506 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                            16507 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                            16508 ; 155  |   
                            16509 ; 156  |typedef struct {
                            16510 ; 157  |    WORD wPageSizeInBytes;
                            16511 ; 158  |    WORD wRedundantAreaSizeInBytes;
                            16512 ; 159  |    WORD wNumberOfPagesPerBlock;
                            16513 ; 160  |    WORD wNumberOfBlocksPerZone;
                            16514 ; 161  |    WORD wNumberOfZonesInMedia;
                            16515 ; 162  |    WORD wMediaSizeInMBytes;
                            16516 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                            16517 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                            16518 ; 165  |    WORD wMediaFlagStatus;
                            16519 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                            16520 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                            16521 ; 168  |    WORD wNumberOfSystemBlocks;
                            16522 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 271

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16523 ; 170  |
                            16524 ; 171  |typedef struct {
                            16525 ; 172  |    WORD wDevice;        
                            16526 ; 173  |    WORD wDirtyBlockFlag;
                            16527 ; 174  |    WORD wCleanTailFlag; 
                            16528 ; 175  |    WORD wLogDOSPage;    
                            16529 ; 176  |    WORD wSrcLogBlock;   
                            16530 ; 177  |    WORD wSrcPhyBlock;   
                            16531 ; 178  |    WORD wDestPhyBlock;  
                            16532 ; 179  |    WORD wStartSrcPage;  
                            16533 ; 180  |    WORD wStartDestPage; 
                            16534 ; 181  |    WORD wPagesToCopy;   
                            16535 ; 182  |    WORD wReplaceBuff;   
                            16536 ; 183  |    WORD wReplaceRdnt;
                            16537 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            16538 ; 185  |        WORD wFirstCount;
                            16539 ; 186  |        WORD wNextCount;
                            16540 ; 187  |        WORD wLastCount;
                            16541 ; 188  |    #endif
                            16542 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                            16543 ; 190  |
                            16544 ; 191  |typedef struct {
                            16545 ; 192  |    WORD wWord0;
                            16546 ; 193  |    WORD wWord1;
                            16547 ; 194  |    WORD wWord2;
                            16548 ; 195  |    WORD wWord3;
                            16549 ; 196  |} DIRECTORY_NAME;
                            16550 ; 197  |
                            16551 ; 198  |typedef struct {
                            16552 ; 199  |    WORD wWord0;
                            16553 ; 200  |    WORD wWord1;
                            16554 ; 201  |} DIRECTORY_EXTENSION;
                            16555 ; 202  |
                            16556 ; 203  |typedef struct {
                            16557 ; 204  |    WORD wWord0;
                            16558 ; 205  |    WORD wWord1;
                            16559 ; 206  |} DIRECTORY_SIZE;
                            16560 ; 207  |
                            16561 ; 208  |typedef struct {
                            16562 ; 209  |    DIRECTORY_NAME Name;
                            16563 ; 210  |    DIRECTORY_EXTENSION Extension;
                            16564 ; 211  |    WORD wAttribute;
                            16565 ; 212  |    WORD wReserved[4];
                            16566 ; 213  |    WORD wCreationTime;
                            16567 ; 214  |    WORD wCreationData;
                            16568 ; 215  |    WORD wFirstCluster;
                            16569 ; 216  |    DIRECTORY_SIZE Size;
                            16570 ; 217  |    WORD wCurrentCluster;
                            16571 ; 218  |    WORD wPointer;
                            16572 ; 219  |    WORD wRecord;
                            16573 ; 220  |    WORD wRd;
                            16574 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                            16575 ; 222  |
                            16576 ; 223  |// TODO:  clean this up.  There are two versions.
                            16577 ; 224  |struct FCB
                            16578 ; 225  |{
                            16579 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                            16580 ; 227  |    int     m_wReserved;                //3
                            16581 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                            16582 ; 229  |    int     m_wAttributes;              //6
                            16583 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                            16584 ; 231  |    int     m_wTimeofCreation;          //b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 272

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16585 ; 232  |    int     m_wDateofCreation;          //c
                            16586 ; 233  |    int     m_wFirstCluster;            //d
                            16587 ; 234  |    int     m_wFileSizeHigh;            //e
                            16588 ; 235  |    int     m_wFileSizeLow;             //f
                            16589 ; 236  |};
                            16590 ; 237  |
                            16591 ; 238  |
                            16592 ; 239  |typedef struct {
                            16593 ; 240  |    WORD wFirstClusterCurrentDirectory;
                            16594 ; 241  |    WORD wFirstClusterParentDirectory;
                            16595 ; 242  |    WORD wAbsSectorCurrentlyCached;
                            16596 ; 243  |    WORD wCurrentRelativeSector;
                            16597 ; 244  |    WORD wNumberOfSectors;
                            16598 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                            16599 ; 246  |    WORD wBufferedRecord;
                            16600 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                            16601 ; 248  |    WORD * pwPointerToBuffer;
                            16602 ; 249  |    WORD * pwPointerToPath;
                            16603 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                            16604 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                            16605 ; 252  |
                            16606 ; 253  |typedef struct {
                            16607 ; 254  |    WORD wWord0;
                            16608 ; 255  |    WORD wWord1;
                            16609 ; 256  |    WORD wWord2;
                            16610 ; 257  |    WORD wWord3;
                            16611 ; 258  |} FILE_NAME;
                            16612 ; 259  |
                            16613 ; 260  |typedef struct {
                            16614 ; 261  |    WORD wWord0;
                            16615 ; 262  |    WORD wWord1;
                            16616 ; 263  |} FILE_EXTENSION;
                            16617 ; 264  |
                            16618 ; 265  |typedef struct {
                            16619 ; 266  |    WORD wWord0;
                            16620 ; 267  |    WORD wWord1;
                            16621 ; 268  |} FILE_SIZE;
                            16622 ; 269  |
                            16623 ; 270  |typedef union {
                            16624 ; 271  |    struct {
                            16625 ; 272  |        int Read        :1;
                            16626 ; 273  |        int Write       :1;
                            16627 ; 274  |        int Append      :1;
                            16628 ; 275  |        int Truncate    :1;
                            16629 ; 276  |        int Create      :1;
                            16630 ; 277  |        int Rsrv        :3;
                            16631 ; 278  |        int Mode        :8;
                            16632 ; 279  |        int Device      :8;
                            16633 ; 280  |    } B;
                            16634 ; 281  |    int I;
                            16635 ; 282  |} FILE_FLAGS;
                            16636 ; 283  |
                            16637 ; 284  |typedef struct {
                            16638 ; 285  |    WORD wWord0;
                            16639 ; 286  |    WORD wWord1;
                            16640 ; 287  |} FILE_BYTE_CURRENT;
                            16641 ; 288  |
                            16642 ; 289  |typedef struct {
                            16643 ; 290  |    FILE_NAME Name;
                            16644 ; 291  |    FILE_EXTENSION Extension;
                            16645 ; 292  |    WORD wAttributes;
                            16646 ; 293  |    WORD wReserved[4];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 273

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16647 ; 294  |    WORD wCreationTime;
                            16648 ; 295  |    WORD wCreationData;
                            16649 ; 296  |    WORD wFirstCluster;
                            16650 ; 297  |    FILE_SIZE Size;
                            16651 ; 298  |    WORD wCurrentCluster;
                            16652 ; 299  |    WORD wPointer;
                            16653 ; 300  |    WORD wRecord;
                            16654 ; 301  |    WORD wRd;
                            16655 ; 302  |    FILE_FLAGS Flags;
                            16656 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                            16657 ; 304  |    WORD wFcbFlagEndOfCx;
                            16658 ; 305  |} FILE_CONTROL_BLOCK;    
                            16659 ; 306  |
                            16660 ; 307  |typedef struct {
                            16661 ; 308  |    WORD wWord0;
                            16662 ; 309  |    WORD wWord1;
                            16663 ; 310  |    WORD wWord2;
                            16664 ; 311  |    WORD wWord3;
                            16665 ; 312  |} VOLUME_LABEL;
                            16666 ; 313  |
                            16667 ; 314  |typedef struct {
                            16668 ; 315  |    WORD wFATPhysicalBlock1;
                            16669 ; 316  |    WORD wFATPhysicalBlock2;
                            16670 ; 317  |    WORD wFATPhysicalBlock3;
                            16671 ; 318  |    WORD wFATPhysicalBlock4;
                            16672 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                            16673 ; 320  |
                            16674 ; 321  |typedef struct {
                            16675 ; 322  |    WORD wFATSectorInCache;
                            16676 ; 323  |    WORD wLastClusterFree;
                            16677 ; 324  |    WORD wNumberOfUsedClusters;
                            16678 ; 325  |    WORD wNumberOfFreeClusters;
                            16679 ; 326  |    WORD wNumberOfBadClusters;
                            16680 ; 327  |    WORD wNumberOfReservedClusters;
                            16681 ; 328  |    WORD wControl;
                            16682 ; 329  |    WORD * pwSectorCache;
                            16683 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                            16684 ; 331  |} FAT_TABLE;
                            16685 ; 332  |
                            16686 ; 333  |typedef struct {
                            16687 ; 334  |    WORD wStateMediaTable;
                            16688 ; 335  |    WORD wTypeFs;
                            16689 ; 336  |    WORD wBytesPerSector;
                            16690 ; 337  |    WORD wSectorsPerCluster;
                            16691 ; 338  |    WORD wNumberOfReservedSectors;
                            16692 ; 339  |    WORD wMaximumNumberOfFATs;
                            16693 ; 340  |    WORD wMaxRootDirectoryEntries;
                            16694 ; 341  |    WORD wTotalSectors;
                            16695 ; 342  |    WORD wNumberOfFATSectors;
                            16696 ; 343  |    WORD wNumberOfSectorsPerTrack;
                            16697 ; 344  |    WORD wNumberOfHeads;
                            16698 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                            16699 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                            16700 ; 347  |    WORD wTotalSectors32MSB;
                            16701 ; 348  |    WORD wTotalSectors32LSB;
                            16702 ; 349  |    WORD wDriverNumber;
                            16703 ; 350  |    WORD wExtendedBootSignature;
                            16704 ; 351  |    WORD wVolumeIDMSB;
                            16705 ; 352  |    WORD wVolumeIDLSB;
                            16706 ; 353  |    VOLUME_LABEL VolumeLabel;
                            16707 ; 354  |    WORD * pwWriteBuffer;
                            16708 ; 355  |    WORD wPrimaryFATRelativeSector;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 274

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16709 ; 356  |    WORD wSecondaryFATRelativeSector;
                            16710 ; 357  |    WORD wRootDirectoryRelativeSector;
                            16711 ; 358  |    WORD wFirstSectorNumberDataZone;
                            16712 ; 359  |    WORD wMaxNumberOfFATEntries;
                            16713 ; 360  |    WORD wRootDirectorySizeInSectors;
                            16714 ; 361  |    WORD wDataAreaSizeInSectors;
                            16715 ; 362  |} MEDIA_TABLE;
                            16716 ; 363  |
                            16717 ; 364  |typedef struct {
                            16718 ; 365  |    MEDIA_TABLE * pMediaTable;
                            16719 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                            16720 ; 367  |    FAT_TABLE * pFATTable;
                            16721 ; 368  |} DEVICE_CONTROL_TABLE;
                            16722 ; 369  |    
                            16723 ; 370  |typedef struct {
                            16724 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                            16725 ; 372  |                                        //  to 2-bytes for compatibility with
                            16726 ; 373  |                                        //  older host drivers.
                            16727 ; 374  |    DWORD dwTotalNumberOfSectors;
                            16728 ; 375  |    DWORD dwTotalNumberOfBytes;
                            16729 ; 376  |    WORD wSectorSizeInBytes;
                            16730 ; 377  |} MEDIA_SIZE;
                            16731 ; 378  |
                            16732 ; 379  |typedef struct {
                            16733 ; 380  |    BOOL    bInstalled;
                            16734 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                            16735 ; 382  |    DWORD   dwSize;
                            16736 ; 383  |} DATA_DRIVE_PBS_LOC;
                            16737 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                            16738 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                            16739 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                            16740 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                            16741 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                            16742 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                            16743 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                            16744 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                            16745 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
                            16746 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                            16747 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                            16748 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                            16749 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                            16750 ; 397  |extern  INT FSFreeClusters(INT Device);
                            16751 ; 398  |extern  INT BytesPerCluster(INT Device);
                            16752 ; 399  |
                            16753 ; 400  |
                            16754 ; 401  |
                            16755 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                            16756 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                            16757 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
                            16758 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
                            16759 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                            16760 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                            16761 ; 408  |//extern  INT FSFileClose(INT bHandle);
                            16762 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                            16763 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                            16764 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 275

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16765 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                            16766 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                            16767 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                            16768 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                            16769 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                            16770 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                            16771 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                            16772 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                            16773 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                            16774 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                            16775 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                            16776 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                            16777 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                            16778 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                            16779 ; 426  |
                            16780 ; 427  |#endif
                            16781 
                            16783 
                            16784 ; 32   |#include "regsrtc.h"
                            16785 
                            16787 
                            16788 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16789 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16790 ; 3    |// Filename: regsrtc.inc
                            16791 ; 4    |// Description: Register definitions for RTC interface
                            16792 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16793 ; 6    |// The following naming conventions are followed in this file.
                            16794 ; 7    |// All registers are named using the format...
                            16795 ; 8    |//     HW_<module>_<regname>
                            16796 ; 9    |// where <module> is the module name which can be any of the following...
                            16797 ; 10   |//     USB20
                            16798 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            16799 ; 12   |// module name includes a number starting from 0 for the first instance of
                            16800 ; 13   |// that module)
                            16801 ; 14   |// <regname> is the specific register within that module
                            16802 ; 15   |// We also define the following...
                            16803 ; 16   |//     HW_<module>_<regname>_BITPOS
                            16804 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16805 ; 18   |//     HW_<module>_<regname>_SETMASK
                            16806 ; 19   |// which does something else, and
                            16807 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            16808 ; 21   |// which does something else.
                            16809 ; 22   |// Other rules
                            16810 ; 23   |//     All caps
                            16811 ; 24   |//     Numeric identifiers start at 0
                            16812 ; 25   |#if !(defined(regsrtcinc))
                            16813 ; 26   |#define regsrtcinc 1
                            16814 ; 27   |
                            16815 ; 28   |#include "types.h"
                            16816 ; 29   |
                            16817 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16818 ; 31   |
                            16819 ; 32   |//   RTC STMP Registers 
                            16820 ; 33   |//   Edited 2/26/2002 J. Ferrara
                            16821 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16822 ; 35   |
                            16823 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                            16824 ; 37   |
                            16825 ; 38   |
                            16826 ; 39   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 276

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16827 ; 40   |
                            16828 ; 41   |
                            16829 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                            16830 ; 43   |
                            16831 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                            16832 ; 45   |
                            16833 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                            16834 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                            16835 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                            16836 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                            16837 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                            16838 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                            16839 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                            16840 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                            16841 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                            16842 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                            16843 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                            16844 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                            16845 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                            16846 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                            16847 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                            16848 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                            16849 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                            16850 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                            16851 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                            16852 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                            16853 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                            16854 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                            16855 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                            16856 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                            16857 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                            16858 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                            16859 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                            16860 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                            16861 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                            16862 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                            16863 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                            16864 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                            16865 ; 78   |
                            16866 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                            16867 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                            16868 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                            16869 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                            16870 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                            16871 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                            16872 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                            16873 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                            16874 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                            16875 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                            16876 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 277

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16877 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                            16878 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                            16879 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                            16880 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                            16881 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                            16882 ; 95   |
                            16883 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                            16884 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                            16885 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                            16886 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                            16887 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                            16888 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                            16889 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                            16890 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                            16891 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                            16892 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                            16893 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                            16894 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                            16895 ; 108  |
                            16896 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                            16897 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                            16898 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                            16899 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                            16900 ; 113  |
                            16901 ; 114  |
                            16902 ; 115  |typedef union               
                            16903 ; 116  |{
                            16904 ; 117  |    struct {
                            16905 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                            16906 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                            16907 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                            16908 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                            16909 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                            16910 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                            16911 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                            16912 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                            16913 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                            16914 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                            16915 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                            16916 ; 129  |    } B;
                            16917 ; 130  |    int I;
                            16918 ; 131  |    unsigned int U;
                            16919 ; 132  |} rtc_csr_type;
                            16920 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                            16921 ; 134  |
                            16922 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            16923 ; 136  |
                            16924 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                            16925 ; 138  |
                            16926 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                            16927 ; 140  |
                            16928 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                            16929 ; 142  |
                            16930 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 278

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16931 ; 144  |
                            16932 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                            16933 ; 146  |
                            16934 ; 147  |typedef union               
                            16935 ; 148  |{
                            16936 ; 149  |    struct {
                            16937 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                            16938 ; 151  |    } B;
                            16939 ; 152  |    int I;
                            16940 ; 153  |    unsigned int U;
                            16941 ; 154  |} rtc_mseconds0_type;
                            16942 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                            16943 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                            16944 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                            16945 ; 158  |
                            16946 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                            16947 ; 160  |
                            16948 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                            16949 ; 162  |
                            16950 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                            16951 ; 164  |
                            16952 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                            16953 ; 166  |
                            16954 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                            16955 ; 168  |
                            16956 ; 169  |typedef union               
                            16957 ; 170  |{
                            16958 ; 171  |    struct {
                            16959 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            16960 ; 173  |    } B;
                            16961 ; 174  |    int I;
                            16962 ; 175  |    unsigned int U;
                            16963 ; 176  |} rtc_mseconds1_type;
                            16964 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                            16965 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            16966 ; 179  |
                            16967 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            16968 ; 181  |#define HW_RTC_UP_OFFSET 2
                            16969 ; 182  |
                            16970 ; 183  |
                            16971 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            16972 ; 185  |
                            16973 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            16974 ; 187  |
                            16975 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            16976 ; 189  |
                            16977 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            16978 ; 191  |
                            16979 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            16980 ; 193  |
                            16981 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            16982 ; 195  |
                            16983 ; 196  |typedef union               
                            16984 ; 197  |{
                            16985 ; 198  |    struct {
                            16986 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 279

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16987 ; 200  |    } B;
                            16988 ; 201  |    int I;
                            16989 ; 202  |    unsigned int U;
                            16990 ; 203  |} rtc_watchdog_type;
                            16991 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                            16992 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            16993 ; 206  |
                            16994 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            16995 ; 208  |
                            16996 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            16997 ; 210  |
                            16998 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            16999 ; 212  |
                            17000 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                            17001 ; 214  |
                            17002 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            17003 ; 216  |
                            17004 ; 217  |typedef union               
                            17005 ; 218  |{
                            17006 ; 219  |    struct {
                            17007 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            17008 ; 221  |    } B;
                            17009 ; 222  |    int I;
                            17010 ; 223  |    unsigned int U;
                            17011 ; 224  |} rtc_alarm0_type;
                            17012 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                            17013 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            17014 ; 227  |
                            17015 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            17016 ; 229  |
                            17017 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            17018 ; 231  |
                            17019 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            17020 ; 233  |
                            17021 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                            17022 ; 235  |
                            17023 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            17024 ; 237  |
                            17025 ; 238  |typedef union               
                            17026 ; 239  |{
                            17027 ; 240  |    struct {
                            17028 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                            17029 ; 242  |    } B;
                            17030 ; 243  |    int I;
                            17031 ; 244  |    unsigned int U;
                            17032 ; 245  |} rtc_alarm1_type;
                            17033 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                            17034 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            17035 ; 248  |
                            17036 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            17037 ; 250  |
                            17038 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            17039 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            17040 ; 253  |
                            17041 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            17042 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            17043 ; 256  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 280

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17044 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            17045 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                            17046 ; 259  |
                            17047 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            17048 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            17049 ; 262  |
                            17050 ; 263  |typedef union               
                            17051 ; 264  |{
                            17052 ; 265  |    struct {
                            17053 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            17054 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            17055 ; 268  |    } B;
                            17056 ; 269  |    int I;
                            17057 ; 270  |    unsigned int U;
                            17058 ; 271  |} rtc_xtaldivide_type;
                            17059 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                            17060 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            17061 ; 274  |
                            17062 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            17063 ; 276  |
                            17064 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            17065 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            17066 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            17067 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            17068 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            17069 ; 282  |
                            17070 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            17071 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            17072 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            17073 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            17074 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            17075 ; 288  |
                            17076 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            17077 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            17078 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            17079 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            17080 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                            17081 ; 294  |
                            17082 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            17083 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                            17084 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                            17085 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                            17086 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            17087 ; 300  |
                            17088 ; 301  |typedef union               
                            17089 ; 302  |{
                            17090 ; 303  |   struct {
                            17091 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            17092 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            17093 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            17094 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 281

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17095 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            17096 ; 309  |   } B;
                            17097 ; 310  |    int I;
                            17098 ; 311  |    unsigned int U;
                            17099 ; 312  |} rtc_PERSISTENT0_type;
                            17100 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                            17101 ; 314  |
                            17102 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            17103 ; 316  |
                            17104 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            17105 ; 318  |
                            17106 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            17107 ; 320  |
                            17108 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            17109 ; 322  |
                            17110 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                            17111 ; 324  |
                            17112 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            17113 ; 326  |
                            17114 ; 327  |
                            17115 ; 328  |typedef union               
                            17116 ; 329  |{
                            17117 ; 330  |    struct {
                            17118 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            17119 ; 332  |    } B;
                            17120 ; 333  |    int I;
                            17121 ; 334  |    unsigned int U;
                            17122 ; 335  |} rtc_PERSISTENT1_type;
                            17123 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                            17124 ; 337  |
                            17125 ; 338  |
                            17126 ; 339  |#endif
                            17127 ; 340  |
                            17128 ; 341  |
                            17129 ; 342  |
                            17130 ; 343  |
                            17131 ; 344  |
                            17132 ; 345  |
                            17133 ; 346  |
                            17134 ; 347  |
                            17135 ; 348  |
                            17136 ; 349  |
                            17137 ; 350  |
                            17138 ; 351  |
                            17139 ; 352  |
                            17140 ; 353  |
                            17141 
                            17143 
                            17144 ; 33   |#include "persist_bits.h"
                            17145 
                            17147 
                            17148 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                            17149 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2005
                            17150 ; 3    |//;
                            17151 ; 4    |//; Filename:    persist_bits.h
                            17152 ; 5    |//; Description: General purpose interface to Persistent Bits
                            17153 ; 6    |//;              Persistent bits are mapped to more generic bits in regsrtc.inc.
                            17154 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                            17155 ; 8    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 282

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17156 ; 9    |#ifndef _PERSIST_BITS_H
                            17157 ; 10   |#define _PERSIST_BITS_H
                            17158 ; 11   |
                            17159 ; 12   |#include "regsrtc.h"
                            17160 
                            17162 
                            17163 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            17164 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17165 ; 3    |// Filename: regsrtc.inc
                            17166 ; 4    |// Description: Register definitions for RTC interface
                            17167 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            17168 ; 6    |// The following naming conventions are followed in this file.
                            17169 ; 7    |// All registers are named using the format...
                            17170 ; 8    |//     HW_<module>_<regname>
                            17171 ; 9    |// where <module> is the module name which can be any of the following...
                            17172 ; 10   |//     USB20
                            17173 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            17174 ; 12   |// module name includes a number starting from 0 for the first instance of
                            17175 ; 13   |// that module)
                            17176 ; 14   |// <regname> is the specific register within that module
                            17177 ; 15   |// We also define the following...
                            17178 ; 16   |//     HW_<module>_<regname>_BITPOS
                            17179 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            17180 ; 18   |//     HW_<module>_<regname>_SETMASK
                            17181 ; 19   |// which does something else, and
                            17182 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            17183 ; 21   |// which does something else.
                            17184 ; 22   |// Other rules
                            17185 ; 23   |//     All caps
                            17186 ; 24   |//     Numeric identifiers start at 0
                            17187 ; 25   |#if !(defined(regsrtcinc))
                            17188 ; 26   |#define regsrtcinc 1
                            17189 ; 27   |
                            17190 ; 28   |#include "types.h"
                            17191 ; 29   |
                            17192 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17193 ; 31   |
                            17194 ; 32   |//   RTC STMP Registers 
                            17195 ; 33   |//   Edited 2/26/2002 J. Ferrara
                            17196 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17197 ; 35   |
                            17198 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                            17199 ; 37   |
                            17200 ; 38   |
                            17201 ; 39   |
                            17202 ; 40   |
                            17203 ; 41   |
                            17204 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                            17205 ; 43   |
                            17206 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                            17207 ; 45   |
                            17208 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                            17209 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                            17210 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                            17211 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                            17212 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                            17213 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                            17214 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                            17215 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                            17216 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                            17217 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                            17218 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 283

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17219 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                            17220 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                            17221 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                            17222 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                            17223 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                            17224 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                            17225 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                            17226 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                            17227 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                            17228 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                            17229 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                            17230 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                            17231 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                            17232 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                            17233 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                            17234 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                            17235 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                            17236 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                            17237 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                            17238 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                            17239 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                            17240 ; 78   |
                            17241 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                            17242 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                            17243 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                            17244 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                            17245 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                            17246 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                            17247 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                            17248 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                            17249 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                            17250 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                            17251 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                            17252 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                            17253 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                            17254 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                            17255 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                            17256 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                            17257 ; 95   |
                            17258 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                            17259 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                            17260 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                            17261 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                            17262 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                            17263 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 284

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17264 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                            17265 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                            17266 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                            17267 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                            17268 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                            17269 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                            17270 ; 108  |
                            17271 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                            17272 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                            17273 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                            17274 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                            17275 ; 113  |
                            17276 ; 114  |
                            17277 ; 115  |typedef union               
                            17278 ; 116  |{
                            17279 ; 117  |    struct {
                            17280 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                            17281 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                            17282 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                            17283 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                            17284 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                            17285 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                            17286 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                            17287 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                            17288 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                            17289 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                            17290 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                            17291 ; 129  |    } B;
                            17292 ; 130  |    int I;
                            17293 ; 131  |    unsigned int U;
                            17294 ; 132  |} rtc_csr_type;
                            17295 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                            17296 ; 134  |
                            17297 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            17298 ; 136  |
                            17299 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                            17300 ; 138  |
                            17301 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                            17302 ; 140  |
                            17303 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                            17304 ; 142  |
                            17305 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                            17306 ; 144  |
                            17307 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                            17308 ; 146  |
                            17309 ; 147  |typedef union               
                            17310 ; 148  |{
                            17311 ; 149  |    struct {
                            17312 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                            17313 ; 151  |    } B;
                            17314 ; 152  |    int I;
                            17315 ; 153  |    unsigned int U;
                            17316 ; 154  |} rtc_mseconds0_type;
                            17317 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                            17318 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                            17319 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                            17320 ; 158  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 285

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17321 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                            17322 ; 160  |
                            17323 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                            17324 ; 162  |
                            17325 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                            17326 ; 164  |
                            17327 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                            17328 ; 166  |
                            17329 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                            17330 ; 168  |
                            17331 ; 169  |typedef union               
                            17332 ; 170  |{
                            17333 ; 171  |    struct {
                            17334 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            17335 ; 173  |    } B;
                            17336 ; 174  |    int I;
                            17337 ; 175  |    unsigned int U;
                            17338 ; 176  |} rtc_mseconds1_type;
                            17339 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                            17340 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            17341 ; 179  |
                            17342 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            17343 ; 181  |#define HW_RTC_UP_OFFSET 2
                            17344 ; 182  |
                            17345 ; 183  |
                            17346 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            17347 ; 185  |
                            17348 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            17349 ; 187  |
                            17350 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            17351 ; 189  |
                            17352 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            17353 ; 191  |
                            17354 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            17355 ; 193  |
                            17356 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            17357 ; 195  |
                            17358 ; 196  |typedef union               
                            17359 ; 197  |{
                            17360 ; 198  |    struct {
                            17361 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                            17362 ; 200  |    } B;
                            17363 ; 201  |    int I;
                            17364 ; 202  |    unsigned int U;
                            17365 ; 203  |} rtc_watchdog_type;
                            17366 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                            17367 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            17368 ; 206  |
                            17369 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            17370 ; 208  |
                            17371 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            17372 ; 210  |
                            17373 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            17374 ; 212  |
                            17375 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                            17376 ; 214  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 286

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17377 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            17378 ; 216  |
                            17379 ; 217  |typedef union               
                            17380 ; 218  |{
                            17381 ; 219  |    struct {
                            17382 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            17383 ; 221  |    } B;
                            17384 ; 222  |    int I;
                            17385 ; 223  |    unsigned int U;
                            17386 ; 224  |} rtc_alarm0_type;
                            17387 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                            17388 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            17389 ; 227  |
                            17390 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            17391 ; 229  |
                            17392 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            17393 ; 231  |
                            17394 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            17395 ; 233  |
                            17396 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                            17397 ; 235  |
                            17398 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            17399 ; 237  |
                            17400 ; 238  |typedef union               
                            17401 ; 239  |{
                            17402 ; 240  |    struct {
                            17403 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                            17404 ; 242  |    } B;
                            17405 ; 243  |    int I;
                            17406 ; 244  |    unsigned int U;
                            17407 ; 245  |} rtc_alarm1_type;
                            17408 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                            17409 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            17410 ; 248  |
                            17411 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            17412 ; 250  |
                            17413 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            17414 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            17415 ; 253  |
                            17416 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            17417 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            17418 ; 256  |
                            17419 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            17420 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                            17421 ; 259  |
                            17422 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            17423 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            17424 ; 262  |
                            17425 ; 263  |typedef union               
                            17426 ; 264  |{
                            17427 ; 265  |    struct {
                            17428 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            17429 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            17430 ; 268  |    } B;
                            17431 ; 269  |    int I;
                            17432 ; 270  |    unsigned int U;
                            17433 ; 271  |} rtc_xtaldivide_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 287

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17434 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                            17435 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            17436 ; 274  |
                            17437 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            17438 ; 276  |
                            17439 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            17440 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            17441 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            17442 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            17443 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            17444 ; 282  |
                            17445 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            17446 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            17447 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            17448 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            17449 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            17450 ; 288  |
                            17451 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            17452 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            17453 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            17454 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            17455 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                            17456 ; 294  |
                            17457 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            17458 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                            17459 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                            17460 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                            17461 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            17462 ; 300  |
                            17463 ; 301  |typedef union               
                            17464 ; 302  |{
                            17465 ; 303  |   struct {
                            17466 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            17467 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            17468 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            17469 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                            17470 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            17471 ; 309  |   } B;
                            17472 ; 310  |    int I;
                            17473 ; 311  |    unsigned int U;
                            17474 ; 312  |} rtc_PERSISTENT0_type;
                            17475 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                            17476 ; 314  |
                            17477 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            17478 ; 316  |
                            17479 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            17480 ; 318  |
                            17481 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            17482 ; 320  |
                            17483 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            17484 ; 322  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 288

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17485 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                            17486 ; 324  |
                            17487 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            17488 ; 326  |
                            17489 ; 327  |
                            17490 ; 328  |typedef union               
                            17491 ; 329  |{
                            17492 ; 330  |    struct {
                            17493 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            17494 ; 332  |    } B;
                            17495 ; 333  |    int I;
                            17496 ; 334  |    unsigned int U;
                            17497 ; 335  |} rtc_PERSISTENT1_type;
                            17498 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                            17499 ; 337  |
                            17500 ; 338  |
                            17501 ; 339  |#endif
                            17502 ; 340  |
                            17503 ; 341  |
                            17504 ; 342  |
                            17505 ; 343  |
                            17506 ; 344  |
                            17507 ; 345  |
                            17508 ; 346  |
                            17509 ; 347  |
                            17510 ; 348  |
                            17511 ; 349  |
                            17512 ; 350  |
                            17513 ; 351  |
                            17514 ; 352  |
                            17515 ; 353  |
                            17516 
                            17518 
                            17519 ; 13   |
                            17520 ; 14   |// Reserve bit 0 for Low Power USB, if hub can't supply 500mA, need to reboot with 100mA
                            17521 ; 15   |#define HW_RTC_LOW_POWER_USB_REG                     (HW_RTC_PERSISTENT1)
                            17522 ; 16   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS      (0)
                            17523 ; 17   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_WIDTH       (1)
                            17524 ; 18   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_SETMASK     (((1<<HW_RTC_PERSISTANT1_LOW_POWER_US
                                  B_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS) 
                            17525 ; 19   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_CLRMASK     (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER_
                                  USB_SETMASK)
                            17526 ; 20   |
                            17527 ; 21   |// Reserve bit 1 for Skip Checkdisk.  If disk hasn't changed, don't run checkdisk.
                            17528 ; 22   |#define HW_RTC_SKIP_CHECKDISK_REG                    (HW_RTC_PERSISTENT1)
                            17529 ; 23   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_BITPOS     (1)
                            17530 ; 24   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_WIDTH      (1)
                            17531 ; 25   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_SETMASK    (((1<<HW_RTC_PERSISTANT1_SKIP_CHECKDI
                                  SK_WIDTH)-1)<<HW_RTC_PERSISTANT1_SKIP_CHECKDISK_BITPOS) 
                            17532 ; 26   |#define HW_RTC_PERSISTANT1_SKIP_CHECKDISK_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_SKIP_CHECK
                                  DISK_SETMASK)
                            17533 ; 27   |
                            17534 ; 28   |// Reserve bit 2 for Skip building music library internal flash.  If disk hasn't changed, 
                                  don't run building.
                            17535 ; 29   |#define HW_RTC_SKIP_REBUILD_REG                  (HW_RTC_PERSISTENT1)
                            17536 ; 30   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS   (2)
                            17537 ; 31   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_WIDTH    (1)
                            17538 ; 32   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_SETMASK  (((1<<HW_RTC_PERSISTENT1_SKIP_REBUILD_WID
                                  TH)-1)<<HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 289

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17539 ; 33   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_CLRMASK  (~(WORD)HW_RTC_PERSISTENT1_SKIP_REBUILD_S
                                  ETMASK)
                            17540 ; 34   |
                            17541 ; 35   |// Reserve bit 3 for 2nd try Low Power USB, if hub can't supply 500mA (try 2 times)
                            17542 ; 36   |// need to reboot with 100mA
                            17543 ; 37   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS     (3)
                            17544 ; 38   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_WIDTH      (1)
                            17545 ; 39   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_SETMASK    (((1<<HW_RTC_PERSISTANT1_LOW_POWER2_U
                                  SB_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS) 
                            17546 ; 40   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER2
                                  _USB_SETMASK)
                            17547 ; 41   |
                            17548 ; 42   |// Reserve bit 5 for MTP database clean flag. 1 => database "clean", 0 => database "dirty"
                                  
                            17549 ; 43   |#define HW_RTC_MTP_DB_CLEAN_FLAG_REG                 (HW_RTC_PERSISTENT1)
                            17550 ; 44   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS  (5)
                            17551 ; 45   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_WIDTH   (1)
                            17552 ; 46   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN
                                  _FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS) 
                            17553 ; 47   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_MTP_DB_CLE
                                  AN_FLAG_SETMASK)
                            17554 ; 48   |
                            17555 ; 49   |// Reserve bit 6 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                            17556 ; 50   |#define HW_RTC_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                            17557 ; 51   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (6)
                            17558 ; 52   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                            17559 ; 53   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_RESO
                                  URCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS) 
                            17560 ; 54   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_RESOURC
                                  E_BIN_REFRESH_FLAG_SETMASK)
                            17561 ; 55   |
                            17562 ; 56   |// Reserve bit 7 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                            17563 ; 57   |#define HW_RTC_HOST_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                            17564 ; 58   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (7)
                            17565 ; 59   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                            17566 ; 60   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1
                                  _HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPO
                                  S) 
                            17567 ; 61   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_HO
                                  ST_RESOURCE_BIN_REFRESH_FLAG_SETMASK)
                            17568 ; 62   |
                            17569 ; 63   |// Want to wait 2000 clocks before failing.
                            17570 ; 64   |#define PERSIST_WAIT_TIME                            2000
                            17571 ; 65   |
                            17572 ; 66   |void _reentrant StickyBitInit(void);
                            17573 ; 67   |RETCODE _reentrant ReadStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition, BOOL * b
                                  Result);
                            17574 ; 68   |RETCODE _reentrant SetStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                            17575 ; 69   |RETCODE _reentrant ClearStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                            17576 ; 70   |void _reentrant SetBitResourceRefresh(INT bBitValue); // should this line be commented out
                                  ? I think the func def was commented out since unused.
                            17577 ; 71   |INT _reentrant GetBitResourceRefresh(void);           // "
                            17578 ; 72   |void _reentrant StickyBitForceUpdate(void);
                            17579 ; 73   |
                            17580 ; 74   |#endif // _PERSIST_BITS_H
                            17581 
                            17583 
                            17584 ; 34   |
                            17585 ; 35   |#pragma optimize 3
                            17587 ; 36   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 290

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17588 ; 37   |//FAT_WarningMessage
                            17589 ; 38   |#include "extern.h"
                            17590 
                            17592 
                            17593 ; 1    |#include "handletable.h"
                            17594 
                            17596 
                            17597 ; 1    |#include "types.h"
                            17598 
                            17600 
                            17601 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17602 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17603 ; 3    |//
                            17604 ; 4    |// Filename: types.h
                            17605 ; 5    |// Description: Standard data types
                            17606 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17607 ; 7    |
                            17608 ; 8    |#ifndef _TYPES_H
                            17609 ; 9    |#define _TYPES_H
                            17610 ; 10   |
                            17611 ; 11   |// TODO:  move this outta here!
                            17612 ; 12   |#if !defined(NOERROR)
                            17613 ; 13   |#define NOERROR 0
                            17614 ; 14   |#define SUCCESS 0
                            17615 ; 15   |#endif 
                            17616 ; 16   |#if !defined(SUCCESS)
                            17617 ; 17   |#define SUCCESS  0
                            17618 ; 18   |#endif
                            17619 ; 19   |#if !defined(ERROR)
                            17620 ; 20   |#define ERROR   -1
                            17621 ; 21   |#endif
                            17622 ; 22   |#if !defined(FALSE)
                            17623 ; 23   |#define FALSE 0
                            17624 ; 24   |#endif
                            17625 ; 25   |#if !defined(TRUE)
                            17626 ; 26   |#define TRUE  1
                            17627 ; 27   |#endif
                            17628 ; 28   |
                            17629 ; 29   |#if !defined(NULL)
                            17630 ; 30   |#define NULL 0
                            17631 ; 31   |#endif
                            17632 ; 32   |
                            17633 ; 33   |#define MAX_INT     0x7FFFFF
                            17634 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17635 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17636 ; 36   |#define MAX_ULONG   (-1) 
                            17637 ; 37   |
                            17638 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17639 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17640 ; 40   |
                            17641 ; 41   |
                            17642 ; 42   |#define BYTE    unsigned char       // btVarName
                            17643 ; 43   |#define CHAR    signed char         // cVarName
                            17644 ; 44   |#define USHORT  unsigned short      // usVarName
                            17645 ; 45   |#define SHORT   unsigned short      // sVarName
                            17646 ; 46   |#define WORD    unsigned int        // wVarName
                            17647 ; 47   |#define INT     signed int          // iVarName
                            17648 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17649 ; 49   |#define LONG    signed long         // lVarName
                            17650 ; 50   |#define BOOL    unsigned int        // bVarName
                            17651 ; 51   |#define FRACT   _fract              // frVarName
                            17652 ; 52   |#define LFRACT  long _fract         // lfrVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 291

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17653 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17654 ; 54   |#define FLOAT   float               // fVarName
                            17655 ; 55   |#define DBL     double              // dVarName
                            17656 ; 56   |#define ENUM    enum                // eVarName
                            17657 ; 57   |#define CMX     _complex            // cmxVarName
                            17658 ; 58   |typedef WORD UCS3;                   // 
                            17659 ; 59   |
                            17660 ; 60   |#define UINT16  unsigned short
                            17661 ; 61   |#define UINT8   unsigned char   
                            17662 ; 62   |#define UINT32  unsigned long
                            17663 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17664 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17665 ; 65   |#define WCHAR   UINT16
                            17666 ; 66   |
                            17667 ; 67   |//UINT128 is 16 bytes or 6 words
                            17668 ; 68   |typedef struct UINT128_3500 {   
                            17669 ; 69   |    int val[6];     
                            17670 ; 70   |} UINT128_3500;
                            17671 ; 71   |
                            17672 ; 72   |#define UINT128   UINT128_3500
                            17673 ; 73   |
                            17674 ; 74   |// Little endian word packed byte strings:   
                            17675 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17676 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17677 ; 77   |// Little endian word packed byte strings:   
                            17678 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17679 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17680 ; 80   |
                            17681 ; 81   |// Declare Memory Spaces To Use When Coding
                            17682 ; 82   |// A. Sector Buffers
                            17683 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17684 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17685 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17686 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17687 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17688 ; 88   |// B. Media DDI Memory
                            17689 ; 89   |#define MEDIA_DDI_MEM _Y
                            17690 ; 90   |
                            17691 ; 91   |
                            17692 ; 92   |
                            17693 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17694 ; 94   |// Examples of circular pointers:
                            17695 ; 95   |//    INT CIRC cpiVarName
                            17696 ; 96   |//    DWORD CIRC cpdwVarName
                            17697 ; 97   |
                            17698 ; 98   |#define RETCODE INT                 // rcVarName
                            17699 ; 99   |
                            17700 ; 100  |// generic bitfield structure
                            17701 ; 101  |struct Bitfield {
                            17702 ; 102  |    unsigned int B0  :1;
                            17703 ; 103  |    unsigned int B1  :1;
                            17704 ; 104  |    unsigned int B2  :1;
                            17705 ; 105  |    unsigned int B3  :1;
                            17706 ; 106  |    unsigned int B4  :1;
                            17707 ; 107  |    unsigned int B5  :1;
                            17708 ; 108  |    unsigned int B6  :1;
                            17709 ; 109  |    unsigned int B7  :1;
                            17710 ; 110  |    unsigned int B8  :1;
                            17711 ; 111  |    unsigned int B9  :1;
                            17712 ; 112  |    unsigned int B10 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 292

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17713 ; 113  |    unsigned int B11 :1;
                            17714 ; 114  |    unsigned int B12 :1;
                            17715 ; 115  |    unsigned int B13 :1;
                            17716 ; 116  |    unsigned int B14 :1;
                            17717 ; 117  |    unsigned int B15 :1;
                            17718 ; 118  |    unsigned int B16 :1;
                            17719 ; 119  |    unsigned int B17 :1;
                            17720 ; 120  |    unsigned int B18 :1;
                            17721 ; 121  |    unsigned int B19 :1;
                            17722 ; 122  |    unsigned int B20 :1;
                            17723 ; 123  |    unsigned int B21 :1;
                            17724 ; 124  |    unsigned int B22 :1;
                            17725 ; 125  |    unsigned int B23 :1;
                            17726 ; 126  |};
                            17727 ; 127  |
                            17728 ; 128  |union BitInt {
                            17729 ; 129  |        struct Bitfield B;
                            17730 ; 130  |        int        I;
                            17731 ; 131  |};
                            17732 ; 132  |
                            17733 ; 133  |#define MAX_MSG_LENGTH 10
                            17734 ; 134  |struct CMessage
                            17735 ; 135  |{
                            17736 ; 136  |        unsigned int m_uLength;
                            17737 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17738 ; 138  |};
                            17739 ; 139  |
                            17740 ; 140  |typedef struct {
                            17741 ; 141  |    WORD m_wLength;
                            17742 ; 142  |    WORD m_wMessage;
                            17743 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17744 ; 144  |} Message;
                            17745 ; 145  |
                            17746 ; 146  |struct MessageQueueDescriptor
                            17747 ; 147  |{
                            17748 ; 148  |        int *m_pBase;
                            17749 ; 149  |        int m_iModulo;
                            17750 ; 150  |        int m_iSize;
                            17751 ; 151  |        int *m_pHead;
                            17752 ; 152  |        int *m_pTail;
                            17753 ; 153  |};
                            17754 ; 154  |
                            17755 ; 155  |struct ModuleEntry
                            17756 ; 156  |{
                            17757 ; 157  |    int m_iSignaledEventMask;
                            17758 ; 158  |    int m_iWaitEventMask;
                            17759 ; 159  |    int m_iResourceOfCode;
                            17760 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17761 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            17762 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17763 ; 163  |    int m_uTimeOutHigh;
                            17764 ; 164  |    int m_uTimeOutLow;
                            17765 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17766 ; 166  |};
                            17767 ; 167  |
                            17768 ; 168  |union WaitMask{
                            17769 ; 169  |    struct B{
                            17770 ; 170  |        unsigned int m_bNone     :1;
                            17771 ; 171  |        unsigned int m_bMessage  :1;
                            17772 ; 172  |        unsigned int m_bTimer    :1;
                            17773 ; 173  |        unsigned int m_bButton   :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 293

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17774 ; 174  |    } B;
                            17775 ; 175  |    int I;
                            17776 ; 176  |} ;
                            17777 ; 177  |
                            17778 ; 178  |
                            17779 ; 179  |struct Button {
                            17780 ; 180  |        WORD wButtonEvent;
                            17781 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17782 ; 182  |};
                            17783 ; 183  |
                            17784 ; 184  |struct Message {
                            17785 ; 185  |        WORD wMsgLength;
                            17786 ; 186  |        WORD wMsgCommand;
                            17787 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17788 ; 188  |};
                            17789 ; 189  |
                            17790 ; 190  |union EventTypes {
                            17791 ; 191  |        struct CMessage msg;
                            17792 ; 192  |        struct Button Button ;
                            17793 ; 193  |        struct Message Message;
                            17794 ; 194  |};
                            17795 ; 195  |
                            17796 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17797 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17798 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17799 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17800 ; 200  |
                            17801 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17802 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17803 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17804 ; 204  |
                            17805 ; 205  |#if DEBUG
                            17806 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17807 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17808 ; 208  |#else 
                            17809 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17810 ; 210  |#define DebugBuildAssert(x)    
                            17811 ; 211  |#endif
                            17812 ; 212  |
                            17813 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17814 ; 214  |//  #pragma asm
                            17815 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17816 ; 216  |//  #pragma endasm
                            17817 ; 217  |
                            17818 ; 218  |
                            17819 ; 219  |#ifdef COLOR_262K
                            17820 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17821 ; 221  |#elif defined(COLOR_65K)
                            17822 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17823 ; 223  |#else
                            17824 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17825 ; 225  |#endif
                            17826 ; 226  |    
                            17827 ; 227  |#endif // #ifndef _TYPES_H
                            17828 
                            17830 
                            17831 ; 2    |#include "fstypes.h"
                            17832 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 294

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17834 
                            17835 ; 1    |#ifndef _FS_TYPE_H_
                            17836 ; 2    |#define _FS_TYPE_H_
                            17837 ; 3    |
                            17838 ; 4    |#include   "types.h"
                            17839 
                            17841 
                            17842 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17843 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17844 ; 3    |//
                            17845 ; 4    |// Filename: types.h
                            17846 ; 5    |// Description: Standard data types
                            17847 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17848 ; 7    |
                            17849 ; 8    |#ifndef _TYPES_H
                            17850 ; 9    |#define _TYPES_H
                            17851 ; 10   |
                            17852 ; 11   |// TODO:  move this outta here!
                            17853 ; 12   |#if !defined(NOERROR)
                            17854 ; 13   |#define NOERROR 0
                            17855 ; 14   |#define SUCCESS 0
                            17856 ; 15   |#endif 
                            17857 ; 16   |#if !defined(SUCCESS)
                            17858 ; 17   |#define SUCCESS  0
                            17859 ; 18   |#endif
                            17860 ; 19   |#if !defined(ERROR)
                            17861 ; 20   |#define ERROR   -1
                            17862 ; 21   |#endif
                            17863 ; 22   |#if !defined(FALSE)
                            17864 ; 23   |#define FALSE 0
                            17865 ; 24   |#endif
                            17866 ; 25   |#if !defined(TRUE)
                            17867 ; 26   |#define TRUE  1
                            17868 ; 27   |#endif
                            17869 ; 28   |
                            17870 ; 29   |#if !defined(NULL)
                            17871 ; 30   |#define NULL 0
                            17872 ; 31   |#endif
                            17873 ; 32   |
                            17874 ; 33   |#define MAX_INT     0x7FFFFF
                            17875 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17876 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17877 ; 36   |#define MAX_ULONG   (-1) 
                            17878 ; 37   |
                            17879 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17880 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17881 ; 40   |
                            17882 ; 41   |
                            17883 ; 42   |#define BYTE    unsigned char       // btVarName
                            17884 ; 43   |#define CHAR    signed char         // cVarName
                            17885 ; 44   |#define USHORT  unsigned short      // usVarName
                            17886 ; 45   |#define SHORT   unsigned short      // sVarName
                            17887 ; 46   |#define WORD    unsigned int        // wVarName
                            17888 ; 47   |#define INT     signed int          // iVarName
                            17889 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17890 ; 49   |#define LONG    signed long         // lVarName
                            17891 ; 50   |#define BOOL    unsigned int        // bVarName
                            17892 ; 51   |#define FRACT   _fract              // frVarName
                            17893 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17894 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17895 ; 54   |#define FLOAT   float               // fVarName
                            17896 ; 55   |#define DBL     double              // dVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 295

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17897 ; 56   |#define ENUM    enum                // eVarName
                            17898 ; 57   |#define CMX     _complex            // cmxVarName
                            17899 ; 58   |typedef WORD UCS3;                   // 
                            17900 ; 59   |
                            17901 ; 60   |#define UINT16  unsigned short
                            17902 ; 61   |#define UINT8   unsigned char   
                            17903 ; 62   |#define UINT32  unsigned long
                            17904 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17905 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17906 ; 65   |#define WCHAR   UINT16
                            17907 ; 66   |
                            17908 ; 67   |//UINT128 is 16 bytes or 6 words
                            17909 ; 68   |typedef struct UINT128_3500 {   
                            17910 ; 69   |    int val[6];     
                            17911 ; 70   |} UINT128_3500;
                            17912 ; 71   |
                            17913 ; 72   |#define UINT128   UINT128_3500
                            17914 ; 73   |
                            17915 ; 74   |// Little endian word packed byte strings:   
                            17916 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17917 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17918 ; 77   |// Little endian word packed byte strings:   
                            17919 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17920 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17921 ; 80   |
                            17922 ; 81   |// Declare Memory Spaces To Use When Coding
                            17923 ; 82   |// A. Sector Buffers
                            17924 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17925 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17926 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17927 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17928 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17929 ; 88   |// B. Media DDI Memory
                            17930 ; 89   |#define MEDIA_DDI_MEM _Y
                            17931 ; 90   |
                            17932 ; 91   |
                            17933 ; 92   |
                            17934 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17935 ; 94   |// Examples of circular pointers:
                            17936 ; 95   |//    INT CIRC cpiVarName
                            17937 ; 96   |//    DWORD CIRC cpdwVarName
                            17938 ; 97   |
                            17939 ; 98   |#define RETCODE INT                 // rcVarName
                            17940 ; 99   |
                            17941 ; 100  |// generic bitfield structure
                            17942 ; 101  |struct Bitfield {
                            17943 ; 102  |    unsigned int B0  :1;
                            17944 ; 103  |    unsigned int B1  :1;
                            17945 ; 104  |    unsigned int B2  :1;
                            17946 ; 105  |    unsigned int B3  :1;
                            17947 ; 106  |    unsigned int B4  :1;
                            17948 ; 107  |    unsigned int B5  :1;
                            17949 ; 108  |    unsigned int B6  :1;
                            17950 ; 109  |    unsigned int B7  :1;
                            17951 ; 110  |    unsigned int B8  :1;
                            17952 ; 111  |    unsigned int B9  :1;
                            17953 ; 112  |    unsigned int B10 :1;
                            17954 ; 113  |    unsigned int B11 :1;
                            17955 ; 114  |    unsigned int B12 :1;
                            17956 ; 115  |    unsigned int B13 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 296

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17957 ; 116  |    unsigned int B14 :1;
                            17958 ; 117  |    unsigned int B15 :1;
                            17959 ; 118  |    unsigned int B16 :1;
                            17960 ; 119  |    unsigned int B17 :1;
                            17961 ; 120  |    unsigned int B18 :1;
                            17962 ; 121  |    unsigned int B19 :1;
                            17963 ; 122  |    unsigned int B20 :1;
                            17964 ; 123  |    unsigned int B21 :1;
                            17965 ; 124  |    unsigned int B22 :1;
                            17966 ; 125  |    unsigned int B23 :1;
                            17967 ; 126  |};
                            17968 ; 127  |
                            17969 ; 128  |union BitInt {
                            17970 ; 129  |        struct Bitfield B;
                            17971 ; 130  |        int        I;
                            17972 ; 131  |};
                            17973 ; 132  |
                            17974 ; 133  |#define MAX_MSG_LENGTH 10
                            17975 ; 134  |struct CMessage
                            17976 ; 135  |{
                            17977 ; 136  |        unsigned int m_uLength;
                            17978 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17979 ; 138  |};
                            17980 ; 139  |
                            17981 ; 140  |typedef struct {
                            17982 ; 141  |    WORD m_wLength;
                            17983 ; 142  |    WORD m_wMessage;
                            17984 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17985 ; 144  |} Message;
                            17986 ; 145  |
                            17987 ; 146  |struct MessageQueueDescriptor
                            17988 ; 147  |{
                            17989 ; 148  |        int *m_pBase;
                            17990 ; 149  |        int m_iModulo;
                            17991 ; 150  |        int m_iSize;
                            17992 ; 151  |        int *m_pHead;
                            17993 ; 152  |        int *m_pTail;
                            17994 ; 153  |};
                            17995 ; 154  |
                            17996 ; 155  |struct ModuleEntry
                            17997 ; 156  |{
                            17998 ; 157  |    int m_iSignaledEventMask;
                            17999 ; 158  |    int m_iWaitEventMask;
                            18000 ; 159  |    int m_iResourceOfCode;
                            18001 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18002 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            18003 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18004 ; 163  |    int m_uTimeOutHigh;
                            18005 ; 164  |    int m_uTimeOutLow;
                            18006 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18007 ; 166  |};
                            18008 ; 167  |
                            18009 ; 168  |union WaitMask{
                            18010 ; 169  |    struct B{
                            18011 ; 170  |        unsigned int m_bNone     :1;
                            18012 ; 171  |        unsigned int m_bMessage  :1;
                            18013 ; 172  |        unsigned int m_bTimer    :1;
                            18014 ; 173  |        unsigned int m_bButton   :1;
                            18015 ; 174  |    } B;
                            18016 ; 175  |    int I;
                            18017 ; 176  |} ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 297

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18018 ; 177  |
                            18019 ; 178  |
                            18020 ; 179  |struct Button {
                            18021 ; 180  |        WORD wButtonEvent;
                            18022 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18023 ; 182  |};
                            18024 ; 183  |
                            18025 ; 184  |struct Message {
                            18026 ; 185  |        WORD wMsgLength;
                            18027 ; 186  |        WORD wMsgCommand;
                            18028 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18029 ; 188  |};
                            18030 ; 189  |
                            18031 ; 190  |union EventTypes {
                            18032 ; 191  |        struct CMessage msg;
                            18033 ; 192  |        struct Button Button ;
                            18034 ; 193  |        struct Message Message;
                            18035 ; 194  |};
                            18036 ; 195  |
                            18037 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18038 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18039 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18040 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18041 ; 200  |
                            18042 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18043 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18044 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18045 ; 204  |
                            18046 ; 205  |#if DEBUG
                            18047 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18048 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18049 ; 208  |#else 
                            18050 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            18051 ; 210  |#define DebugBuildAssert(x)    
                            18052 ; 211  |#endif
                            18053 ; 212  |
                            18054 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18055 ; 214  |//  #pragma asm
                            18056 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18057 ; 216  |//  #pragma endasm
                            18058 ; 217  |
                            18059 ; 218  |
                            18060 ; 219  |#ifdef COLOR_262K
                            18061 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            18062 ; 221  |#elif defined(COLOR_65K)
                            18063 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            18064 ; 223  |#else
                            18065 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            18066 ; 225  |#endif
                            18067 ; 226  |    
                            18068 ; 227  |#endif // #ifndef _TYPES_H
                            18069 
                            18071 
                            18072 ; 5    |
                            18073 ; 6    |// move FSMEDIA_TABLE from devicetable.h  15Apr2005   First moved in SDK2.6.
                            18074 ; 7    |typedef struct
                            18075 ; 8    |{
                            18076 ; 9    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 298

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18077 ; 10   |INT     _Y BytesPerSector;
                            18078 ; 11   |INT     _Y SectorsPerCluster;
                            18079 ; 12   |INT     _Y RsvdSectors;
                            18080 ; 13   |INT     _Y NoOfFATs;
                            18081 ; 14   |INT     _Y MaxRootDirEntries;
                            18082 ; 15   |LONG    _Y TotalSectors;
                            18083 ; 16   |LONG    _Y FATSize;
                            18084 ; 17   |LONG    _Y RootdirCluster;
                            18085 ; 18   |//INT   _Y FSInfoSector;
                            18086 ; 19   |//INT   _Y BkBootSector;
                            18087 ; 20   |LONG    _Y NextFreeCluster;
                            18088 ; 21   |LONG    _Y TotalFreeClusters;
                            18089 ; 22   |INT     _Y RootDirSectors;
                            18090 ; 23   |INT     _Y FIRSTDataSector;
                            18091 ; 24   |INT    _Y FATType;
                            18092 ; 25   |LONG   _Y TotalNoofclusters;
                            18093 ; 26   |INT    _Y ClusterMask;
                            18094 ; 27   |INT    _Y ClusterShift;
                            18095 ; 28   |INT    _Y SectorShift;
                            18096 ; 29   |INT    _Y SectorMask;
                            18097 ; 30   |INT    _Y DevicePresent;
                            18098 ; 31   |LONG   _Y FirRootdirsec;
                            18099 ; 32   |INT             _Y FSInfoSector;
                            18100 ; 33   |}FSMEDIA_TABLE;
                            18101 ; 34   |
                            18102 ; 35   |
                            18103 ; 36   |#define         MAXDEVICES              2
                            18104 ; 37   |//#define       NUMCACHES               8  // this is already in fsproj.h (2 for player 2 
                                  for mtp as of 28jun2005) TOVERIFY 2 ok for player and mtp. 
                            18105 ; 38   |
                            18106 ; 39   |// NOTE:  This offset is the same no matter what the sector actual size!  
                            18107 ; 40   |//        TOVERIFY 3.0 doesn't have this defined but uses it in filesystempresent.c. lbmlc
                                   def'd it here so I insert it here.
                            18108 ; 41   |#define         FATFS_SIGNATURE_OFFSET  510
                            18109 ; 42   |#define         BOOTSECTOR              0
                            18110 ; 43   |#define     FSINFOSECTOR        1
                            18111 ; 44   |
                            18112 ; 45   |#define     READ_MODE           1
                            18113 ; 46   |#define     WRITE_MODE          2
                            18114 ; 47   |#define     APPEND_MODE         4
                            18115 ; 48   |#define     SEQ_WRITE_MODE      8
                            18116 ; 49   |#define     DIRECTORY_MODE         16
                            18117 ; 50   |#define     CREATE_MODE        32
                            18118 ; 51   |
                            18119 ; 52   |#define     RPLUS               5
                            18120 ; 53   |#define     WPLUS                   6
                            18121 ; 54   |#define     APLUS               7
                            18122 ; 55   |
                            18123 ; 56   |
                            18124 ; 57   |
                            18125 ; 58   |#define     X_MEMORY            0
                            18126 ; 59   |#define     Y_MEMORY            2
                            18127 ; 60   |#define     P_MEMORY            4
                            18128 ; 61   |
                            18129 ; 62   |#define     FAT12               0 
                            18130 ; 63   |#define     FAT16               1   
                            18131 ; 64   |#define     FAT32               2 
                            18132 ; 65   |
                            18133 ; 66   |
                            18134 ; 67   |#define FAT12EOF            0x0FFF
                            18135 ; 68   |#define FAT16EOF            0xFFFF
                            18136 ; 69   |#define FAT32EOF            0x0FFFFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 299

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18137 ; 70   |
                            18138 ; 71   |
                            18139 ; 72   |
                            18140 ; 73   |#define FAT12FREECX         0x000
                            18141 ; 74   |#define FAT16FREECX         0x0000
                            18142 ; 75   |#define FAT32FREECX         0x00000000
                            18143 ; 76   |
                            18144 ; 77   |
                            18145 ; 78   |#define  DBCS               1
                            18146 ; 79   |#define  UNICODE            2
                            18147 ; 80   |
                            18148 ; 81   |
                            18149 ; 82   |#define     CREATION_DATE       1
                            18150 ; 83   |#define     CREATION_TIME       2
                            18151 ; 84   |#define     MODIFICATION_DATE   3
                            18152 ; 85   |#define     MODIFICATION_TIME   4
                            18153 ; 86   |
                            18154 ; 87   |
                            18155 ; 88   |#define     READ_ONLY      0X01
                            18156 ; 89   |#define     HIDDEN         0X02
                            18157 ; 90   |#define     SYSTEM         0X04
                            18158 ; 91   |#define     VOLUME_ID      0X08
                            18159 ; 92   |#define     DIRECTORY      0X10
                            18160 ; 93   |#define     ARCHIVE        0X20
                            18161 ; 94   |
                            18162 ; 95   |#define READCOUNTER         105
                            18163 ; 96   |#define WRITECOUNTER        100
                            18164 ; 97   |#define FLUSHCOUNTER        200
                            18165 ; 98   |
                            18166 ; 99   |
                            18167 ; 100  |#define DEFAULT_MEMORY      Y_MEMORY
                            18168 ; 101  |
                            18169 ; 102  |#define  CWD_HANDLE           0
                            18170 ; 103  |#define  DIRECTORY_HANDLE     1
                            18171 ; 104  |#define  FIRST_VALID_HANDLE   2
                            18172 ; 105  |#define  END_OF_DIR_PATH      3
                            18173 ; 106  |
                            18174 ; 107  |//Constants for Sector read and write (Normal and FAT 
                            18175 ; 108  |#define         NORMALTYPE              0
                            18176 ; 109  |#define         FATTYPE                 1
                            18177 ; 110  |#define     RAWTYPE         2
                            18178 ; 111  |
                            18179 ; 112  |#define  SHORTNAMERES_CH      6
                            18180 ; 113  |#define  LONGNAMERES_CH       9
                            18181 ; 114  |#define  MAXFILENAME_CH       260
                            18182 ; 115  |
                            18183 ; 116  |#define VOLUME_TYPE          0
                            18184 ; 117  |#define DIR_TYPE             1
                            18185 ; 118  |#define FILE_TYPE            2
                            18186 ; 119  |                                           
                            18187 ; 120  |#define WRITE_TYPE_RANDOM               0
                            18188 ; 121  |#define WRITE_TYPE_SEQ_FIRST    1
                            18189 ; 122  |#define WRITE_TYPE_SEQ_NEXT             2
                            18190 ; 123  |#define WRITE_TYPE_NOREADBACK   3
                            18191 ; 124  |                  
                            18192 ; 125  |
                            18193 ; 126  |#define     HANDLEENTRYSIZE         19
                            18194 ; 127  |
                            18195 ; 128  |// DEVICERECORDSIZE is now only defined in cachedef.h so deleted from here in first 3.1 pr
                                  elim 
                            18196 ; 129  |
                            18197 ; 130  |#define     CACHEDESCRSIZE          8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 300

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18198 ; 131  |#define     CACHEBUFSIZE            705
                            18199 ; 132  |
                            18200 ; 133  |#define     UCS2s                     0
                            18201 ; 134  |#define     UCS3s                     1
                            18202 ; 135  |
                            18203 ; 136  |#define     FAT32FSIFREECOUNTSIZE       4
                            18204 ; 137  |
                            18205 ; 138  |#endif // _FS_TYPE_H_
                            18206 ; 139  |
                            18207 
                            18209 
                            18210 ; 3    |typedef struct  
                            18211 ; 4    |{
                            18212 ; 5    |INT             HandleActive;
                            18213 ; 6    |INT             Device;
                            18214 ; 7    |INT             Mode;
                            18215 ; 8    |LONG       StartingCluster;
                            18216 ; 9    |LONG            CurrentOffset;
                            18217 ; 10   |LONG            CurrentCluster;
                            18218 ; 11   |LONG            CurrentSector;
                            18219 ; 12   |INT             BytePosInSector;
                            18220 ; 13   |INT             SectorPosInCluster;
                            18221 ; 14   |LONG            DirSector;
                            18222 ; 15   |INT             DirOffset;
                            18223 ; 16   |INT             ErrorCode;
                            18224 ; 17   |LONG            FileSize;
                            18225 ; 18   |}HANDLETABLE;
                            18226 ; 19   |
                            18227 ; 20   |
                            18228 ; 21   |
                            18229 ; 22   |
                            18230 ; 23   |
                            18231 ; 24   |
                            18232 ; 25   |
                            18233 
                            18235 
                            18236 ; 2    |#include "devicetable.h"
                            18237 
                            18239 
                            18240 ; 1    |#include "types.h"
                            18241 
                            18243 
                            18244 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18245 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            18246 ; 3    |//
                            18247 ; 4    |// Filename: types.h
                            18248 ; 5    |// Description: Standard data types
                            18249 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18250 ; 7    |
                            18251 ; 8    |#ifndef _TYPES_H
                            18252 ; 9    |#define _TYPES_H
                            18253 ; 10   |
                            18254 ; 11   |// TODO:  move this outta here!
                            18255 ; 12   |#if !defined(NOERROR)
                            18256 ; 13   |#define NOERROR 0
                            18257 ; 14   |#define SUCCESS 0
                            18258 ; 15   |#endif 
                            18259 ; 16   |#if !defined(SUCCESS)
                            18260 ; 17   |#define SUCCESS  0
                            18261 ; 18   |#endif
                            18262 ; 19   |#if !defined(ERROR)
                            18263 ; 20   |#define ERROR   -1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 301

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18264 ; 21   |#endif
                            18265 ; 22   |#if !defined(FALSE)
                            18266 ; 23   |#define FALSE 0
                            18267 ; 24   |#endif
                            18268 ; 25   |#if !defined(TRUE)
                            18269 ; 26   |#define TRUE  1
                            18270 ; 27   |#endif
                            18271 ; 28   |
                            18272 ; 29   |#if !defined(NULL)
                            18273 ; 30   |#define NULL 0
                            18274 ; 31   |#endif
                            18275 ; 32   |
                            18276 ; 33   |#define MAX_INT     0x7FFFFF
                            18277 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            18278 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            18279 ; 36   |#define MAX_ULONG   (-1) 
                            18280 ; 37   |
                            18281 ; 38   |#define WORD_SIZE   24              // word size in bits
                            18282 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            18283 ; 40   |
                            18284 ; 41   |
                            18285 ; 42   |#define BYTE    unsigned char       // btVarName
                            18286 ; 43   |#define CHAR    signed char         // cVarName
                            18287 ; 44   |#define USHORT  unsigned short      // usVarName
                            18288 ; 45   |#define SHORT   unsigned short      // sVarName
                            18289 ; 46   |#define WORD    unsigned int        // wVarName
                            18290 ; 47   |#define INT     signed int          // iVarName
                            18291 ; 48   |#define DWORD   unsigned long       // dwVarName
                            18292 ; 49   |#define LONG    signed long         // lVarName
                            18293 ; 50   |#define BOOL    unsigned int        // bVarName
                            18294 ; 51   |#define FRACT   _fract              // frVarName
                            18295 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            18296 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            18297 ; 54   |#define FLOAT   float               // fVarName
                            18298 ; 55   |#define DBL     double              // dVarName
                            18299 ; 56   |#define ENUM    enum                // eVarName
                            18300 ; 57   |#define CMX     _complex            // cmxVarName
                            18301 ; 58   |typedef WORD UCS3;                   // 
                            18302 ; 59   |
                            18303 ; 60   |#define UINT16  unsigned short
                            18304 ; 61   |#define UINT8   unsigned char   
                            18305 ; 62   |#define UINT32  unsigned long
                            18306 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18307 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18308 ; 65   |#define WCHAR   UINT16
                            18309 ; 66   |
                            18310 ; 67   |//UINT128 is 16 bytes or 6 words
                            18311 ; 68   |typedef struct UINT128_3500 {   
                            18312 ; 69   |    int val[6];     
                            18313 ; 70   |} UINT128_3500;
                            18314 ; 71   |
                            18315 ; 72   |#define UINT128   UINT128_3500
                            18316 ; 73   |
                            18317 ; 74   |// Little endian word packed byte strings:   
                            18318 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18319 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18320 ; 77   |// Little endian word packed byte strings:   
                            18321 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18322 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18323 ; 80   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 302

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18324 ; 81   |// Declare Memory Spaces To Use When Coding
                            18325 ; 82   |// A. Sector Buffers
                            18326 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            18327 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            18328 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            18329 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            18330 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            18331 ; 88   |// B. Media DDI Memory
                            18332 ; 89   |#define MEDIA_DDI_MEM _Y
                            18333 ; 90   |
                            18334 ; 91   |
                            18335 ; 92   |
                            18336 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            18337 ; 94   |// Examples of circular pointers:
                            18338 ; 95   |//    INT CIRC cpiVarName
                            18339 ; 96   |//    DWORD CIRC cpdwVarName
                            18340 ; 97   |
                            18341 ; 98   |#define RETCODE INT                 // rcVarName
                            18342 ; 99   |
                            18343 ; 100  |// generic bitfield structure
                            18344 ; 101  |struct Bitfield {
                            18345 ; 102  |    unsigned int B0  :1;
                            18346 ; 103  |    unsigned int B1  :1;
                            18347 ; 104  |    unsigned int B2  :1;
                            18348 ; 105  |    unsigned int B3  :1;
                            18349 ; 106  |    unsigned int B4  :1;
                            18350 ; 107  |    unsigned int B5  :1;
                            18351 ; 108  |    unsigned int B6  :1;
                            18352 ; 109  |    unsigned int B7  :1;
                            18353 ; 110  |    unsigned int B8  :1;
                            18354 ; 111  |    unsigned int B9  :1;
                            18355 ; 112  |    unsigned int B10 :1;
                            18356 ; 113  |    unsigned int B11 :1;
                            18357 ; 114  |    unsigned int B12 :1;
                            18358 ; 115  |    unsigned int B13 :1;
                            18359 ; 116  |    unsigned int B14 :1;
                            18360 ; 117  |    unsigned int B15 :1;
                            18361 ; 118  |    unsigned int B16 :1;
                            18362 ; 119  |    unsigned int B17 :1;
                            18363 ; 120  |    unsigned int B18 :1;
                            18364 ; 121  |    unsigned int B19 :1;
                            18365 ; 122  |    unsigned int B20 :1;
                            18366 ; 123  |    unsigned int B21 :1;
                            18367 ; 124  |    unsigned int B22 :1;
                            18368 ; 125  |    unsigned int B23 :1;
                            18369 ; 126  |};
                            18370 ; 127  |
                            18371 ; 128  |union BitInt {
                            18372 ; 129  |        struct Bitfield B;
                            18373 ; 130  |        int        I;
                            18374 ; 131  |};
                            18375 ; 132  |
                            18376 ; 133  |#define MAX_MSG_LENGTH 10
                            18377 ; 134  |struct CMessage
                            18378 ; 135  |{
                            18379 ; 136  |        unsigned int m_uLength;
                            18380 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            18381 ; 138  |};
                            18382 ; 139  |
                            18383 ; 140  |typedef struct {
                            18384 ; 141  |    WORD m_wLength;
                            18385 ; 142  |    WORD m_wMessage;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 303

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18386 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18387 ; 144  |} Message;
                            18388 ; 145  |
                            18389 ; 146  |struct MessageQueueDescriptor
                            18390 ; 147  |{
                            18391 ; 148  |        int *m_pBase;
                            18392 ; 149  |        int m_iModulo;
                            18393 ; 150  |        int m_iSize;
                            18394 ; 151  |        int *m_pHead;
                            18395 ; 152  |        int *m_pTail;
                            18396 ; 153  |};
                            18397 ; 154  |
                            18398 ; 155  |struct ModuleEntry
                            18399 ; 156  |{
                            18400 ; 157  |    int m_iSignaledEventMask;
                            18401 ; 158  |    int m_iWaitEventMask;
                            18402 ; 159  |    int m_iResourceOfCode;
                            18403 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18404 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            18405 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18406 ; 163  |    int m_uTimeOutHigh;
                            18407 ; 164  |    int m_uTimeOutLow;
                            18408 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18409 ; 166  |};
                            18410 ; 167  |
                            18411 ; 168  |union WaitMask{
                            18412 ; 169  |    struct B{
                            18413 ; 170  |        unsigned int m_bNone     :1;
                            18414 ; 171  |        unsigned int m_bMessage  :1;
                            18415 ; 172  |        unsigned int m_bTimer    :1;
                            18416 ; 173  |        unsigned int m_bButton   :1;
                            18417 ; 174  |    } B;
                            18418 ; 175  |    int I;
                            18419 ; 176  |} ;
                            18420 ; 177  |
                            18421 ; 178  |
                            18422 ; 179  |struct Button {
                            18423 ; 180  |        WORD wButtonEvent;
                            18424 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18425 ; 182  |};
                            18426 ; 183  |
                            18427 ; 184  |struct Message {
                            18428 ; 185  |        WORD wMsgLength;
                            18429 ; 186  |        WORD wMsgCommand;
                            18430 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18431 ; 188  |};
                            18432 ; 189  |
                            18433 ; 190  |union EventTypes {
                            18434 ; 191  |        struct CMessage msg;
                            18435 ; 192  |        struct Button Button ;
                            18436 ; 193  |        struct Message Message;
                            18437 ; 194  |};
                            18438 ; 195  |
                            18439 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18440 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18441 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18442 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18443 ; 200  |
                            18444 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18445 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18446 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 304

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18447 ; 204  |
                            18448 ; 205  |#if DEBUG
                            18449 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18450 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18451 ; 208  |#else 
                            18452 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            18453 ; 210  |#define DebugBuildAssert(x)    
                            18454 ; 211  |#endif
                            18455 ; 212  |
                            18456 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18457 ; 214  |//  #pragma asm
                            18458 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18459 ; 216  |//  #pragma endasm
                            18460 ; 217  |
                            18461 ; 218  |
                            18462 ; 219  |#ifdef COLOR_262K
                            18463 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            18464 ; 221  |#elif defined(COLOR_65K)
                            18465 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            18466 ; 223  |#else
                            18467 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            18468 ; 225  |#endif
                            18469 ; 226  |    
                            18470 ; 227  |#endif // #ifndef _TYPES_H
                            18471 
                            18473 
                            18474 ; 2    |#include "fstypes.h"
                            18475 
                            18477 
                            18478 ; 1    |#ifndef _FS_TYPE_H_
                            18479 ; 2    |#define _FS_TYPE_H_
                            18480 ; 3    |
                            18481 ; 4    |#include   "types.h"
                            18482 ; 5    |
                            18483 ; 6    |// move FSMEDIA_TABLE from devicetable.h  15Apr2005   First moved in SDK2.6.
                            18484 ; 7    |typedef struct
                            18485 ; 8    |{
                            18486 ; 9    |
                            18487 ; 10   |INT     _Y BytesPerSector;
                            18488 ; 11   |INT     _Y SectorsPerCluster;
                            18489 ; 12   |INT     _Y RsvdSectors;
                            18490 ; 13   |INT     _Y NoOfFATs;
                            18491 ; 14   |INT     _Y MaxRootDirEntries;
                            18492 ; 15   |LONG    _Y TotalSectors;
                            18493 ; 16   |LONG    _Y FATSize;
                            18494 ; 17   |LONG    _Y RootdirCluster;
                            18495 ; 18   |//INT   _Y FSInfoSector;
                            18496 ; 19   |//INT   _Y BkBootSector;
                            18497 ; 20   |LONG    _Y NextFreeCluster;
                            18498 ; 21   |LONG    _Y TotalFreeClusters;
                            18499 ; 22   |INT     _Y RootDirSectors;
                            18500 ; 23   |INT     _Y FIRSTDataSector;
                            18501 ; 24   |INT    _Y FATType;
                            18502 ; 25   |LONG   _Y TotalNoofclusters;
                            18503 ; 26   |INT    _Y ClusterMask;
                            18504 ; 27   |INT    _Y ClusterShift;
                            18505 ; 28   |INT    _Y SectorShift;
                            18506 ; 29   |INT    _Y SectorMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 305

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18507 ; 30   |INT    _Y DevicePresent;
                            18508 ; 31   |LONG   _Y FirRootdirsec;
                            18509 ; 32   |INT             _Y FSInfoSector;
                            18510 ; 33   |}FSMEDIA_TABLE;
                            18511 ; 34   |
                            18512 ; 35   |
                            18513 ; 36   |#define         MAXDEVICES              2
                            18514 ; 37   |//#define       NUMCACHES               8  // this is already in fsproj.h (2 for player 2 
                                  for mtp as of 28jun2005) TOVERIFY 2 ok for player and mtp. 
                            18515 ; 38   |
                            18516 ; 39   |// NOTE:  This offset is the same no matter what the sector actual size!  
                            18517 ; 40   |//        TOVERIFY 3.0 doesn't have this defined but uses it in filesystempresent.c. lbmlc
                                   def'd it here so I insert it here.
                            18518 ; 41   |#define         FATFS_SIGNATURE_OFFSET  510
                            18519 ; 42   |#define         BOOTSECTOR              0
                            18520 ; 43   |#define     FSINFOSECTOR        1
                            18521 ; 44   |
                            18522 ; 45   |#define     READ_MODE           1
                            18523 ; 46   |#define     WRITE_MODE          2
                            18524 ; 47   |#define     APPEND_MODE         4
                            18525 ; 48   |#define     SEQ_WRITE_MODE      8
                            18526 ; 49   |#define     DIRECTORY_MODE         16
                            18527 ; 50   |#define     CREATE_MODE        32
                            18528 ; 51   |
                            18529 ; 52   |#define     RPLUS               5
                            18530 ; 53   |#define     WPLUS                   6
                            18531 ; 54   |#define     APLUS               7
                            18532 ; 55   |
                            18533 ; 56   |
                            18534 ; 57   |
                            18535 ; 58   |#define     X_MEMORY            0
                            18536 ; 59   |#define     Y_MEMORY            2
                            18537 ; 60   |#define     P_MEMORY            4
                            18538 ; 61   |
                            18539 ; 62   |#define     FAT12               0 
                            18540 ; 63   |#define     FAT16               1   
                            18541 ; 64   |#define     FAT32               2 
                            18542 ; 65   |
                            18543 ; 66   |
                            18544 ; 67   |#define FAT12EOF            0x0FFF
                            18545 ; 68   |#define FAT16EOF            0xFFFF
                            18546 ; 69   |#define FAT32EOF            0x0FFFFFFF
                            18547 ; 70   |
                            18548 ; 71   |
                            18549 ; 72   |
                            18550 ; 73   |#define FAT12FREECX         0x000
                            18551 ; 74   |#define FAT16FREECX         0x0000
                            18552 ; 75   |#define FAT32FREECX         0x00000000
                            18553 ; 76   |
                            18554 ; 77   |
                            18555 ; 78   |#define  DBCS               1
                            18556 ; 79   |#define  UNICODE            2
                            18557 ; 80   |
                            18558 ; 81   |
                            18559 ; 82   |#define     CREATION_DATE       1
                            18560 ; 83   |#define     CREATION_TIME       2
                            18561 ; 84   |#define     MODIFICATION_DATE   3
                            18562 ; 85   |#define     MODIFICATION_TIME   4
                            18563 ; 86   |
                            18564 ; 87   |
                            18565 ; 88   |#define     READ_ONLY      0X01
                            18566 ; 89   |#define     HIDDEN         0X02
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 306

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18567 ; 90   |#define     SYSTEM         0X04
                            18568 ; 91   |#define     VOLUME_ID      0X08
                            18569 ; 92   |#define     DIRECTORY      0X10
                            18570 ; 93   |#define     ARCHIVE        0X20
                            18571 ; 94   |
                            18572 ; 95   |#define READCOUNTER         105
                            18573 ; 96   |#define WRITECOUNTER        100
                            18574 ; 97   |#define FLUSHCOUNTER        200
                            18575 ; 98   |
                            18576 ; 99   |
                            18577 ; 100  |#define DEFAULT_MEMORY      Y_MEMORY
                            18578 ; 101  |
                            18579 ; 102  |#define  CWD_HANDLE           0
                            18580 ; 103  |#define  DIRECTORY_HANDLE     1
                            18581 ; 104  |#define  FIRST_VALID_HANDLE   2
                            18582 ; 105  |#define  END_OF_DIR_PATH      3
                            18583 ; 106  |
                            18584 ; 107  |//Constants for Sector read and write (Normal and FAT 
                            18585 ; 108  |#define         NORMALTYPE              0
                            18586 ; 109  |#define         FATTYPE                 1
                            18587 ; 110  |#define     RAWTYPE         2
                            18588 ; 111  |
                            18589 ; 112  |#define  SHORTNAMERES_CH      6
                            18590 ; 113  |#define  LONGNAMERES_CH       9
                            18591 ; 114  |#define  MAXFILENAME_CH       260
                            18592 ; 115  |
                            18593 ; 116  |#define VOLUME_TYPE          0
                            18594 ; 117  |#define DIR_TYPE             1
                            18595 ; 118  |#define FILE_TYPE            2
                            18596 ; 119  |                                           
                            18597 ; 120  |#define WRITE_TYPE_RANDOM               0
                            18598 ; 121  |#define WRITE_TYPE_SEQ_FIRST    1
                            18599 ; 122  |#define WRITE_TYPE_SEQ_NEXT             2
                            18600 ; 123  |#define WRITE_TYPE_NOREADBACK   3
                            18601 ; 124  |                  
                            18602 ; 125  |
                            18603 ; 126  |#define     HANDLEENTRYSIZE         19
                            18604 ; 127  |
                            18605 ; 128  |// DEVICERECORDSIZE is now only defined in cachedef.h so deleted from here in first 3.1 pr
                                  elim 
                            18606 ; 129  |
                            18607 ; 130  |#define     CACHEDESCRSIZE          8
                            18608 ; 131  |#define     CACHEBUFSIZE            705
                            18609 ; 132  |
                            18610 ; 133  |#define     UCS2s                     0
                            18611 ; 134  |#define     UCS3s                     1
                            18612 ; 135  |
                            18613 ; 136  |#define     FAT32FSIFREECOUNTSIZE       4
                            18614 ; 137  |
                            18615 ; 138  |#endif // _FS_TYPE_H_
                            18616 ; 139  |
                            18617 
                            18619 
                            18620 ; 3    |
                            18621 ; 4    |/* moved FSMEDIA_TABLE to fstypes.h   15Apr2005 */
                            18622 ; 5    |/*
                            18623 ; 6    |typedef struct
                            18624 ; 7    |{
                            18625 ; 8    |
                            18626 ; 9    |INT     _Y BytesPerSector;
                            18627 ; 10   |INT     _Y SectorsPerCluster;
                            18628 ; 11   |INT     _Y RsvdSectors;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 307

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18629 ; 12   |INT     _Y NoOfFATs;
                            18630 ; 13   |INT     _Y MaxRootDirEntries;
                            18631 ; 14   |LONG    _Y TotalSectors;
                            18632 ; 15   |LONG    _Y FATSize;
                            18633 ; 16   |LONG    _Y RootdirCluster;
                            18634 ; 17   |//INT   _Y FSInfoSector;
                            18635 ; 18   |//INT   _Y BkBootSector;
                            18636 ; 19   |LONG    _Y NextFreeCluster;
                            18637 ; 20   |LONG    _Y TotalFreeClusters;
                            18638 ; 21   |INT     _Y RootDirSectors;
                            18639 ; 22   |INT     _Y FIRSTDataSector;
                            18640 ; 23   |INT    _Y FATType;
                            18641 ; 24   |LONG   _Y TotalNoofclusters;
                            18642 ; 25   |INT    _Y ClusterMask;
                            18643 ; 26   |INT    _Y ClusterShift;
                            18644 ; 27   |INT    _Y SectorShift;
                            18645 ; 28   |INT    _Y SectorMask;
                            18646 ; 29   |INT    _Y DevicePresent;
                            18647 ; 30   |LONG   _Y FirRootdirsec;
                            18648 ; 31   |INT             _Y FSInfoSector;
                            18649 ; 32   |}FSMEDIA_TABLE;
                            18650 ; 33   |*/
                            18651 ; 34   |
                            18652 ; 35   |
                            18653 
                            18655 
                            18656 ; 3    |#include "cachemem.h"
                            18657 
                            18659 
                            18660 ; 1    |#include "types.h"
                            18661 
                            18663 
                            18664 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18665 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            18666 ; 3    |//
                            18667 ; 4    |// Filename: types.h
                            18668 ; 5    |// Description: Standard data types
                            18669 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18670 ; 7    |
                            18671 ; 8    |#ifndef _TYPES_H
                            18672 ; 9    |#define _TYPES_H
                            18673 ; 10   |
                            18674 ; 11   |// TODO:  move this outta here!
                            18675 ; 12   |#if !defined(NOERROR)
                            18676 ; 13   |#define NOERROR 0
                            18677 ; 14   |#define SUCCESS 0
                            18678 ; 15   |#endif 
                            18679 ; 16   |#if !defined(SUCCESS)
                            18680 ; 17   |#define SUCCESS  0
                            18681 ; 18   |#endif
                            18682 ; 19   |#if !defined(ERROR)
                            18683 ; 20   |#define ERROR   -1
                            18684 ; 21   |#endif
                            18685 ; 22   |#if !defined(FALSE)
                            18686 ; 23   |#define FALSE 0
                            18687 ; 24   |#endif
                            18688 ; 25   |#if !defined(TRUE)
                            18689 ; 26   |#define TRUE  1
                            18690 ; 27   |#endif
                            18691 ; 28   |
                            18692 ; 29   |#if !defined(NULL)
                            18693 ; 30   |#define NULL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 308

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18694 ; 31   |#endif
                            18695 ; 32   |
                            18696 ; 33   |#define MAX_INT     0x7FFFFF
                            18697 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            18698 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            18699 ; 36   |#define MAX_ULONG   (-1) 
                            18700 ; 37   |
                            18701 ; 38   |#define WORD_SIZE   24              // word size in bits
                            18702 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            18703 ; 40   |
                            18704 ; 41   |
                            18705 ; 42   |#define BYTE    unsigned char       // btVarName
                            18706 ; 43   |#define CHAR    signed char         // cVarName
                            18707 ; 44   |#define USHORT  unsigned short      // usVarName
                            18708 ; 45   |#define SHORT   unsigned short      // sVarName
                            18709 ; 46   |#define WORD    unsigned int        // wVarName
                            18710 ; 47   |#define INT     signed int          // iVarName
                            18711 ; 48   |#define DWORD   unsigned long       // dwVarName
                            18712 ; 49   |#define LONG    signed long         // lVarName
                            18713 ; 50   |#define BOOL    unsigned int        // bVarName
                            18714 ; 51   |#define FRACT   _fract              // frVarName
                            18715 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            18716 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            18717 ; 54   |#define FLOAT   float               // fVarName
                            18718 ; 55   |#define DBL     double              // dVarName
                            18719 ; 56   |#define ENUM    enum                // eVarName
                            18720 ; 57   |#define CMX     _complex            // cmxVarName
                            18721 ; 58   |typedef WORD UCS3;                   // 
                            18722 ; 59   |
                            18723 ; 60   |#define UINT16  unsigned short
                            18724 ; 61   |#define UINT8   unsigned char   
                            18725 ; 62   |#define UINT32  unsigned long
                            18726 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18727 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18728 ; 65   |#define WCHAR   UINT16
                            18729 ; 66   |
                            18730 ; 67   |//UINT128 is 16 bytes or 6 words
                            18731 ; 68   |typedef struct UINT128_3500 {   
                            18732 ; 69   |    int val[6];     
                            18733 ; 70   |} UINT128_3500;
                            18734 ; 71   |
                            18735 ; 72   |#define UINT128   UINT128_3500
                            18736 ; 73   |
                            18737 ; 74   |// Little endian word packed byte strings:   
                            18738 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18739 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18740 ; 77   |// Little endian word packed byte strings:   
                            18741 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18742 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18743 ; 80   |
                            18744 ; 81   |// Declare Memory Spaces To Use When Coding
                            18745 ; 82   |// A. Sector Buffers
                            18746 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            18747 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            18748 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            18749 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            18750 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            18751 ; 88   |// B. Media DDI Memory
                            18752 ; 89   |#define MEDIA_DDI_MEM _Y
                            18753 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 309

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18754 ; 91   |
                            18755 ; 92   |
                            18756 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            18757 ; 94   |// Examples of circular pointers:
                            18758 ; 95   |//    INT CIRC cpiVarName
                            18759 ; 96   |//    DWORD CIRC cpdwVarName
                            18760 ; 97   |
                            18761 ; 98   |#define RETCODE INT                 // rcVarName
                            18762 ; 99   |
                            18763 ; 100  |// generic bitfield structure
                            18764 ; 101  |struct Bitfield {
                            18765 ; 102  |    unsigned int B0  :1;
                            18766 ; 103  |    unsigned int B1  :1;
                            18767 ; 104  |    unsigned int B2  :1;
                            18768 ; 105  |    unsigned int B3  :1;
                            18769 ; 106  |    unsigned int B4  :1;
                            18770 ; 107  |    unsigned int B5  :1;
                            18771 ; 108  |    unsigned int B6  :1;
                            18772 ; 109  |    unsigned int B7  :1;
                            18773 ; 110  |    unsigned int B8  :1;
                            18774 ; 111  |    unsigned int B9  :1;
                            18775 ; 112  |    unsigned int B10 :1;
                            18776 ; 113  |    unsigned int B11 :1;
                            18777 ; 114  |    unsigned int B12 :1;
                            18778 ; 115  |    unsigned int B13 :1;
                            18779 ; 116  |    unsigned int B14 :1;
                            18780 ; 117  |    unsigned int B15 :1;
                            18781 ; 118  |    unsigned int B16 :1;
                            18782 ; 119  |    unsigned int B17 :1;
                            18783 ; 120  |    unsigned int B18 :1;
                            18784 ; 121  |    unsigned int B19 :1;
                            18785 ; 122  |    unsigned int B20 :1;
                            18786 ; 123  |    unsigned int B21 :1;
                            18787 ; 124  |    unsigned int B22 :1;
                            18788 ; 125  |    unsigned int B23 :1;
                            18789 ; 126  |};
                            18790 ; 127  |
                            18791 ; 128  |union BitInt {
                            18792 ; 129  |        struct Bitfield B;
                            18793 ; 130  |        int        I;
                            18794 ; 131  |};
                            18795 ; 132  |
                            18796 ; 133  |#define MAX_MSG_LENGTH 10
                            18797 ; 134  |struct CMessage
                            18798 ; 135  |{
                            18799 ; 136  |        unsigned int m_uLength;
                            18800 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            18801 ; 138  |};
                            18802 ; 139  |
                            18803 ; 140  |typedef struct {
                            18804 ; 141  |    WORD m_wLength;
                            18805 ; 142  |    WORD m_wMessage;
                            18806 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18807 ; 144  |} Message;
                            18808 ; 145  |
                            18809 ; 146  |struct MessageQueueDescriptor
                            18810 ; 147  |{
                            18811 ; 148  |        int *m_pBase;
                            18812 ; 149  |        int m_iModulo;
                            18813 ; 150  |        int m_iSize;
                            18814 ; 151  |        int *m_pHead;
                            18815 ; 152  |        int *m_pTail;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 310

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18816 ; 153  |};
                            18817 ; 154  |
                            18818 ; 155  |struct ModuleEntry
                            18819 ; 156  |{
                            18820 ; 157  |    int m_iSignaledEventMask;
                            18821 ; 158  |    int m_iWaitEventMask;
                            18822 ; 159  |    int m_iResourceOfCode;
                            18823 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18824 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            18825 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18826 ; 163  |    int m_uTimeOutHigh;
                            18827 ; 164  |    int m_uTimeOutLow;
                            18828 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18829 ; 166  |};
                            18830 ; 167  |
                            18831 ; 168  |union WaitMask{
                            18832 ; 169  |    struct B{
                            18833 ; 170  |        unsigned int m_bNone     :1;
                            18834 ; 171  |        unsigned int m_bMessage  :1;
                            18835 ; 172  |        unsigned int m_bTimer    :1;
                            18836 ; 173  |        unsigned int m_bButton   :1;
                            18837 ; 174  |    } B;
                            18838 ; 175  |    int I;
                            18839 ; 176  |} ;
                            18840 ; 177  |
                            18841 ; 178  |
                            18842 ; 179  |struct Button {
                            18843 ; 180  |        WORD wButtonEvent;
                            18844 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18845 ; 182  |};
                            18846 ; 183  |
                            18847 ; 184  |struct Message {
                            18848 ; 185  |        WORD wMsgLength;
                            18849 ; 186  |        WORD wMsgCommand;
                            18850 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18851 ; 188  |};
                            18852 ; 189  |
                            18853 ; 190  |union EventTypes {
                            18854 ; 191  |        struct CMessage msg;
                            18855 ; 192  |        struct Button Button ;
                            18856 ; 193  |        struct Message Message;
                            18857 ; 194  |};
                            18858 ; 195  |
                            18859 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18860 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18861 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18862 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18863 ; 200  |
                            18864 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18865 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18866 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18867 ; 204  |
                            18868 ; 205  |#if DEBUG
                            18869 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18870 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18871 ; 208  |#else 
                            18872 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            18873 ; 210  |#define DebugBuildAssert(x)    
                            18874 ; 211  |#endif
                            18875 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 311

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18876 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18877 ; 214  |//  #pragma asm
                            18878 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18879 ; 216  |//  #pragma endasm
                            18880 ; 217  |
                            18881 ; 218  |
                            18882 ; 219  |#ifdef COLOR_262K
                            18883 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            18884 ; 221  |#elif defined(COLOR_65K)
                            18885 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            18886 ; 223  |#else
                            18887 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            18888 ; 225  |#endif
                            18889 ; 226  |    
                            18890 ; 227  |#endif // #ifndef _TYPES_H
                            18891 
                            18893 
                            18894 ; 2    |#include "fstypes.h"
                            18895 
                            18897 
                            18898 ; 1    |#ifndef _FS_TYPE_H_
                            18899 ; 2    |#define _FS_TYPE_H_
                            18900 ; 3    |
                            18901 ; 4    |#include   "types.h"
                            18902 ; 5    |
                            18903 ; 6    |// move FSMEDIA_TABLE from devicetable.h  15Apr2005   First moved in SDK2.6.
                            18904 ; 7    |typedef struct
                            18905 ; 8    |{
                            18906 ; 9    |
                            18907 ; 10   |INT     _Y BytesPerSector;
                            18908 ; 11   |INT     _Y SectorsPerCluster;
                            18909 ; 12   |INT     _Y RsvdSectors;
                            18910 ; 13   |INT     _Y NoOfFATs;
                            18911 ; 14   |INT     _Y MaxRootDirEntries;
                            18912 ; 15   |LONG    _Y TotalSectors;
                            18913 ; 16   |LONG    _Y FATSize;
                            18914 ; 17   |LONG    _Y RootdirCluster;
                            18915 ; 18   |//INT   _Y FSInfoSector;
                            18916 ; 19   |//INT   _Y BkBootSector;
                            18917 ; 20   |LONG    _Y NextFreeCluster;
                            18918 ; 21   |LONG    _Y TotalFreeClusters;
                            18919 ; 22   |INT     _Y RootDirSectors;
                            18920 ; 23   |INT     _Y FIRSTDataSector;
                            18921 ; 24   |INT    _Y FATType;
                            18922 ; 25   |LONG   _Y TotalNoofclusters;
                            18923 ; 26   |INT    _Y ClusterMask;
                            18924 ; 27   |INT    _Y ClusterShift;
                            18925 ; 28   |INT    _Y SectorShift;
                            18926 ; 29   |INT    _Y SectorMask;
                            18927 ; 30   |INT    _Y DevicePresent;
                            18928 ; 31   |LONG   _Y FirRootdirsec;
                            18929 ; 32   |INT             _Y FSInfoSector;
                            18930 ; 33   |}FSMEDIA_TABLE;
                            18931 ; 34   |
                            18932 ; 35   |
                            18933 ; 36   |#define         MAXDEVICES              2
                            18934 ; 37   |//#define       NUMCACHES               8  // this is already in fsproj.h (2 for player 2 
                                  for mtp as of 28jun2005) TOVERIFY 2 ok for player and mtp. 
                            18935 ; 38   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 312

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18936 ; 39   |// NOTE:  This offset is the same no matter what the sector actual size!  
                            18937 ; 40   |//        TOVERIFY 3.0 doesn't have this defined but uses it in filesystempresent.c. lbmlc
                                   def'd it here so I insert it here.
                            18938 ; 41   |#define         FATFS_SIGNATURE_OFFSET  510
                            18939 ; 42   |#define         BOOTSECTOR              0
                            18940 ; 43   |#define     FSINFOSECTOR        1
                            18941 ; 44   |
                            18942 ; 45   |#define     READ_MODE           1
                            18943 ; 46   |#define     WRITE_MODE          2
                            18944 ; 47   |#define     APPEND_MODE         4
                            18945 ; 48   |#define     SEQ_WRITE_MODE      8
                            18946 ; 49   |#define     DIRECTORY_MODE         16
                            18947 ; 50   |#define     CREATE_MODE        32
                            18948 ; 51   |
                            18949 ; 52   |#define     RPLUS               5
                            18950 ; 53   |#define     WPLUS                   6
                            18951 ; 54   |#define     APLUS               7
                            18952 ; 55   |
                            18953 ; 56   |
                            18954 ; 57   |
                            18955 ; 58   |#define     X_MEMORY            0
                            18956 ; 59   |#define     Y_MEMORY            2
                            18957 ; 60   |#define     P_MEMORY            4
                            18958 ; 61   |
                            18959 ; 62   |#define     FAT12               0 
                            18960 ; 63   |#define     FAT16               1   
                            18961 ; 64   |#define     FAT32               2 
                            18962 ; 65   |
                            18963 ; 66   |
                            18964 ; 67   |#define FAT12EOF            0x0FFF
                            18965 ; 68   |#define FAT16EOF            0xFFFF
                            18966 ; 69   |#define FAT32EOF            0x0FFFFFFF
                            18967 ; 70   |
                            18968 ; 71   |
                            18969 ; 72   |
                            18970 ; 73   |#define FAT12FREECX         0x000
                            18971 ; 74   |#define FAT16FREECX         0x0000
                            18972 ; 75   |#define FAT32FREECX         0x00000000
                            18973 ; 76   |
                            18974 ; 77   |
                            18975 ; 78   |#define  DBCS               1
                            18976 ; 79   |#define  UNICODE            2
                            18977 ; 80   |
                            18978 ; 81   |
                            18979 ; 82   |#define     CREATION_DATE       1
                            18980 ; 83   |#define     CREATION_TIME       2
                            18981 ; 84   |#define     MODIFICATION_DATE   3
                            18982 ; 85   |#define     MODIFICATION_TIME   4
                            18983 ; 86   |
                            18984 ; 87   |
                            18985 ; 88   |#define     READ_ONLY      0X01
                            18986 ; 89   |#define     HIDDEN         0X02
                            18987 ; 90   |#define     SYSTEM         0X04
                            18988 ; 91   |#define     VOLUME_ID      0X08
                            18989 ; 92   |#define     DIRECTORY      0X10
                            18990 ; 93   |#define     ARCHIVE        0X20
                            18991 ; 94   |
                            18992 ; 95   |#define READCOUNTER         105
                            18993 ; 96   |#define WRITECOUNTER        100
                            18994 ; 97   |#define FLUSHCOUNTER        200
                            18995 ; 98   |
                            18996 ; 99   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 313

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18997 ; 100  |#define DEFAULT_MEMORY      Y_MEMORY
                            18998 ; 101  |
                            18999 ; 102  |#define  CWD_HANDLE           0
                            19000 ; 103  |#define  DIRECTORY_HANDLE     1
                            19001 ; 104  |#define  FIRST_VALID_HANDLE   2
                            19002 ; 105  |#define  END_OF_DIR_PATH      3
                            19003 ; 106  |
                            19004 ; 107  |//Constants for Sector read and write (Normal and FAT 
                            19005 ; 108  |#define         NORMALTYPE              0
                            19006 ; 109  |#define         FATTYPE                 1
                            19007 ; 110  |#define     RAWTYPE         2
                            19008 ; 111  |
                            19009 ; 112  |#define  SHORTNAMERES_CH      6
                            19010 ; 113  |#define  LONGNAMERES_CH       9
                            19011 ; 114  |#define  MAXFILENAME_CH       260
                            19012 ; 115  |
                            19013 ; 116  |#define VOLUME_TYPE          0
                            19014 ; 117  |#define DIR_TYPE             1
                            19015 ; 118  |#define FILE_TYPE            2
                            19016 ; 119  |                                           
                            19017 ; 120  |#define WRITE_TYPE_RANDOM               0
                            19018 ; 121  |#define WRITE_TYPE_SEQ_FIRST    1
                            19019 ; 122  |#define WRITE_TYPE_SEQ_NEXT             2
                            19020 ; 123  |#define WRITE_TYPE_NOREADBACK   3
                            19021 ; 124  |                  
                            19022 ; 125  |
                            19023 ; 126  |#define     HANDLEENTRYSIZE         19
                            19024 ; 127  |
                            19025 ; 128  |// DEVICERECORDSIZE is now only defined in cachedef.h so deleted from here in first 3.1 pr
                                  elim 
                            19026 ; 129  |
                            19027 ; 130  |#define     CACHEDESCRSIZE          8
                            19028 ; 131  |#define     CACHEBUFSIZE            705
                            19029 ; 132  |
                            19030 ; 133  |#define     UCS2s                     0
                            19031 ; 134  |#define     UCS3s                     1
                            19032 ; 135  |
                            19033 ; 136  |#define     FAT32FSIFREECOUNTSIZE       4
                            19034 ; 137  |
                            19035 ; 138  |#endif // _FS_TYPE_H_
                            19036 ; 139  |
                            19037 
                            19039 
                            19040 ; 3    |
                            19041 ; 4    |typedef struct {
                            19042 ; 5    |        INT CacheValid;
                            19043 ; 6    |    INT DeviceNum;
                            19044 ; 7    |        LONG SectorNumber;
                            19045 ; 8    |        INT WriteAttribute;
                            19046 ; 9    |        INT Mode;
                            19047 ; 10   |        INT CacheCounter;
                            19048 ; 11   |        INT _X *CacheMem;
                            19049 ; 12   |} tCACHEDESCR;
                            19050 ; 13   |
                            19051 
                            19053 
                            19054 ; 4    |//#include "dirrecord.h"
                            19055 ; 5    |
                            19056 ; 6    |extern INT maxhandles;
                            19057 ; 7    |extern INT maxdevices;
                            19058 ; 8    |extern INT maxcaches;
                            19059 ; 9    |extern INT device[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 314

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19060 ; 10   |extern INT gCurrentRecord;
                            19061 
                            19077 
                            19078 ; 11   |extern HANDLETABLE *Handle;
                            19079 
                            19103 
                            19104 ; 12   |extern FSMEDIA_TABLE *MediaTable;
                            19105 ; 13   |extern _packed char gCurrentWorkingdirectory[]; // use blank instead of 80 here. actually 
                                  256 multiple now
                            19106 
                            19118 
                            19119 ; 14   |extern tCACHEDESCR *CacheDesc;
                            19120 ; 15   |extern ss_FsCopyBuffer;
                            19121 ; 16   |
                            19122 ; 17   |//Non-reentrant
                            19123 ; 18   |
                            19124 ; 19   |        //      SGTL-HK 27-05-2005
                            19125 ; 20   |extern _reentrant INT CreateDirectory(INT HandleNumber,_packed char *Buffer,INT length,INT
                                   index,INT stringtype);
                            19126 ; 21   |
                            19127 ; 22   |extern _reentrant LONG Ftell(INT HandleNumber);//Non _reentrant 
                            19128 ; 23   |extern _reentrant INT Fcreate(INT HandleNumber,_packed char *FileName,INT stringtype,INT l
                                  ength,INT index);
                            19129 ; 24   |extern _reentrant LONG GetFileSize(INT HandleNumber);
                            19130 ; 25   |extern _reentrant INT UpdateFileSize(INT HandleNumber,INT flag);
                            19131 ; 26   |extern _reentrant INT GetNewcluster(INT Handlenumber);
                            19132 ; 27   |extern _reentrant INT IsHandleWriteAllocated(INT HandleNumber);
                            19133 ; 28   |extern _reentrant INT Searchfreehandleallocate(void);
                            19134 ; 29   |extern _reentrant LONG FirstfreeAndallocate(INT DeviceNum);
                            19135 ; 30   |extern _reentrant LONG FindnextFreecurrentcluster(INT DeviceNum,LONG clusterno);
                            19136 ; 31   |extern _reentrant INT _X *FirstfreeAndallocateFAT32(INT DeviceNum,LONG FATsectrono,INT FAT
                                  offset ,INT _X *buf, LONG *ClusterNo);
                            19137 ; 32   |extern _reentrant INT  WriteFATentry(INT DeviceNum,LONG FATsector,INT FATNtryoffset,LONG c
                                  lusterno,LONG writentry);
                            19138 ; 33   |extern _reentrant INT WriteSector(INT deviceNumber, LONG sectorNumber, INT Offset, INT *So
                                  urcebuffer,INT SourceOffset,INT size,INT Source_Memory, INT SectorType,INT Modulo);
                            19139 ; 34   |extern _reentrant INT FlushSector(INT deviceNumber, LONG sectorNumber,INT SectorType);
                            19140 ; 35   |#ifdef k_opt_dynamic_cache
                            19141 ; 36   |extern _reentrant INT _X *ReadSector(INT DeviceNum, LONG sectorNum,INT SectorType);
                            19142 ; 37   |#else
                            19143 ; 38   |extern INT _X *ReadSector(INT DeviceNum, LONG sectorNum,INT SectorType);
                            19144 ; 39   |#endif
                            19145 ; 40   |extern _reentrant INT EraseSector(INT deviceNumber, LONG sectorNumber);
                            19146 ; 41   |
                            19147 ; 42   |
                            19148 ; 43   |//extern INT filesetattrib(INT HandleNumber,INT dirattribute); TOVERIFY2. 3.05 commented t
                                  his ln out. 2.600 had is present.
                            19149 ; 44   |//extern INT filesetdate(INT HandleNumber,INT crt_mod_date_time_para,DIR_DATE *dirdate,DIR
                                  _TIME *dirtime);
                            19150 ; 45   |//Reentrant
                            19151 ; 46   |//extern INT ReleaseBuffer(INT deviceNumber, LONG sectorNumber);
                            19152 ; 47   |extern _reentrant LONG Firstsectorofcluster(INT DeviceNum,LONG clusterno);
                            19153 ; 48   |extern _reentrant LONG ReadFATentry(INT Devicenum,LONG FATsector,INT FATNtryoffset,LONG cl
                                  usterno);
                            19154 ; 49   |extern _reentrant INT _X *ReadFAT12Entry(INT DeviceNum,INT *FATsectorNo,INT FATntryoffset,
                                  LONG clusterNum,INT _X *buf,INT *FATentry);
                            19155 ; 50   |extern INT  FSInit(INT _X *bufx, INT _Y *bufy, INT maxdevices, INT maxhandles, INT maxcach
                                  es);
                            19156 ; 51   |
                            19157 ; 52   |extern RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                            19158 ; 53   |extern _reentrant INT Handleactive(INT HandleNumber);
                            19159 ; 54   |extern INT DriveLetter[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 315

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19160 ; 55   |extern _reentrant LONG Findnextcluster(INT DeviceNum,LONG clusterno);
                            19161 ; 56   |
                            19162 ; 57   |extern _reentrant INT UpdateHandleOffsets(INT HandleNumber);
                            19163 ; 58   |extern _reentrant INT FindNextSector(INT Device,INT HandleNumber);
                            19164 ; 59   |extern _reentrant INT Updatehandlemode(INT HandleNumber,INT Mode);
                            19165 ; 60   |
                            19166 ; 61   |extern _reentrant LONG Feof(INT HandleNumber);
                            19167 ; 62   |extern _reentrant INT *Fputs(INT HandleNumber,INT *Buffer);
                            19168 ; 63   |extern _reentrant LONG Fread(INT HandleNumber,INT *Buffer,LONG NumBytesToRead,INT Source_M
                                  emory, INT modulo);
                            19169 ; 64   |extern  _reentrant INT Fgetc(INT HandleNumber);
                            19170 ; 65   |extern _reentrant INT Fputc(INT HandleNumber,INT ByteToWrite);
                            19171 ; 66   |extern _reentrant INT Stringlength(INT *Buffer);
                            19172 ; 67   |extern _reentrant LONG ReadDirectoryRecord(INT HandleNumber,INT RecordNumber,INT *Buffer);
                                  
                            19173 ; 68   |extern _reentrant INT Fseek(INT HandleNumber,LONG NumBytesToSeek,INT SeekPosition);
                            19174 ; 69   |extern _reentrant INT CreateDirRecord(_packed char *Buffer,INT HandleNumber,LONG ClusterNu
                                  mber,INT DirAttr,INT stringtype,INT length,INT index,INT *unicodebuffer);
                            19175 ; 70   |extern _reentrant INT FindfreeRecord(INT Handlenumber,INT count);
                            19176 ; 71   |extern _reentrant LONG Firstrootdirsector(INT DeviceNum);
                            19177 ; 72   |//extern _reentrant INT Searchfreerecord(INT DeviceNum ,LONG sectorNum);
                            19178 ; 73   |
                            19179 ; 74   |extern _reentrant INT  Readdevicerecord(INT DeviceNum);
                            19180 ; 75   |extern INT MediaRead(INT deviceNumber, LONG sectorNumber,int _X *readbuf,INT SectorType);
                            19181 ; 76   |extern INT MediaWrite(INT deviceNumber,LONG sectorNumber, int _X *readbuf,INT SectorType);
                                  
                            19182 ; 77   |extern _reentrant INT Shortdirmatch(INT HandleNumber,INT RecordNo,_packed char *shortname,
                                  _packed char *file,INT *buf,INT Flag,INT lenght,INT index,INT *Buffer);
                            19183 ; 78   |extern _reentrant INT UpdateHandle(INT HandleNumber,LONG clusterno);
                            19184 ; 79   |extern _reentrant void Uppercase(_packed char *file); 
                            19185 ; 80   |extern _reentrant void ArrangeFileName(INT *Buffer,INT *ShortFileName);
                            19186 ; 81   |extern _reentrant INT ClearCluster(INT HandleNumber);
                            19187 ; 82   |
                            19188 ; 83   |extern _reentrant INT Fopen(_packed char *filepath,_packed char *mode);
                            19189 ; 84   |extern _reentrant LONG FATsectorno(INT DeviceNum,LONG clusterno,INT *FATNtryoffset);
                            19190 ; 85   |
                            19191 ; 86   |extern _reentrant LONG Fwrite(INT HandleNumber,INT  *Buffer,LONG NumBytesToWrite,INT Sourc
                                  e_Memory,INT modulo);
                            19192 ; 87   |
                            19193 ; 88   |extern _reentrant INT ExtractPath(_packed char *filepath,INT *index);
                            19194 ; 89   |extern _reentrant INT ExtractPathW(_packed char *filepath,INT *index);
                            19195 ; 90   |extern _reentrant INT SetHandleforsearch(INT HandleNumber,_packed char *filepath,INT strin
                                  gtype,INT *index);
                            19196 ; 91   |extern _reentrant INT Changepath(INT HandleNumber,_packed char *filepath,INT stringtype,IN
                                  T startposition,INT index,INT RecordNumber);
                            19197 ; 92   |extern _reentrant INT Longdirmatch(INT HandleNumber,INT RecordNo,_packed char *file,INT le
                                  ngth,INT index,INT stringtype);
                            19198 ; 93   |extern _reentrant INT Getname(_packed char *filepath, INT currentPosition);
                            19199 ; 94   |extern _reentrant INT Strlength(_packed char *filepath);
                            19200 ; 95   |extern _reentrant INT StrlengthW(_packed char *filepath);                        
                            19201 ; 96   |extern _reentrant INT MatchdirRecordW(INT HandleNumber,INT RecordNo,_packed char *file,INT
                                   *buf,INT length,INT index);
                            19202 ; 97   |extern _reentrant INT MatchdirRecord(INT HandleNumber,INT RecordNo,_packed char *file,INT 
                                  *buf,INT Flag,INT lenght,INT index,INT *Buffer);
                            19203 ; 98   |extern _reentrant LONG Searchdirectory(INT HandleNumber,_packed char *file,INT stringtype,
                                  INT Flag,INT lenght,INT index,INT *Buffer,BOOL *Ptr); // sdk3.05 ver at left; ,BOOL bInputIsSFN,BO
                                  OL *Ptr); extra end param in 2.600 ver. TOVERIFY2
                            19204 ; 99   |extern _reentrant INT GetnameW(_packed char *filepath,INT currentPosition);
                            19205 ; 100  |extern _reentrant INT Extractfilename(_packed char *filepath,INT length, INT *index);
                            19206 ; 101  |extern _reentrant INT Changecase(INT wordno);
                            19207 ; 102  |extern _reentrant INT ReadRootdirRecord(INT HandleNumber,INT RecordNumber,INT *Buffer);
                            19208 ; 103  |extern _reentrant LONG Totalfreecluster(INT DeviceNum);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 316

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19209 ; 104  |
                            19210 ; 105  |extern INT maxhandles;
                            19211 ; 106  |extern INT maxdevices;
                            19212 ; 107  |
                            19213 ; 108  |extern _reentrant INT Isfileopen(INT HandleNumber);
                            19214 ; 109  |extern _reentrant INT Freehandle(INT HandleNumber);
                            19215 ; 110  |extern _reentrant INT DeleteRecord(INT HandleNumber, INT RecordNo);
                            19216 ; 111  |extern _reentrant INT Isdirectoryempty( INT Handlenumber);
                            19217 ; 112  |extern _reentrant INT Strcpy(_packed char *filepath, _packed char *file_path1,INT length, 
                                  INT index);
                            19218 ; 113  |extern _reentrant INT Strcpyw(_packed char *filepath, _packed char *file_path1,INT length,
                                   INT index);
                            19219 ; 114  |extern _reentrant void Setfilename(_packed char *buf, _packed char *buffer_1);
                            19220 ; 115  |extern _reentrant INT Chdir(_packed char *filepath);
                            19221 ; 116  |extern _reentrant INT Rmdir(_packed char *filepath);
                            19222 ; 117  |extern _reentrant INT Rmdirw(_packed char *filepath);
                            19223 ; 118  |
                            19224 ; 119  |extern _reentrant INT Mkdir(_packed char *filepath);
                            19225 
                            19227 
                            19228 ; 120  |
                            19229 ; 121  |        //      SGTL-HK 27-05-2005
                            19230 ; 122  |extern _reentrant INT Mkdirw(UCS3 *filepath);
                            19231 ; 123  |
                            19232 ; 124  |extern _reentrant INT Setcwd(_packed char *filepath, _packed char *gCworkingDir,INT index,
                                  INT length);
                            19233 ; 125  |extern _reentrant INT DeleteContent(INT HandleNumber, INT flag);
                            19234 ; 126  |
                            19235 ; 127  |extern _reentrant _packed char *Getcwd(void);
                            19236 ; 128  |
                            19237 ; 129  |extern _reentrant _packed char *Fgets(INT HandleNumber,INT NumBytes,_packed char *Buffer);
                                  
                            19238 ; 130  |extern _reentrant INT Fopenw(INT  *filepath,_packed char *mode);
                            19239 ; 131  |extern _reentrant INT SetcurrentPos(INT HandleNumber,INT RecordNumber);
                            19240 ; 132  |extern _reentrant INT Fremove(_packed char *filepath);
                            19241 ; 133  |extern _reentrant INT Fremovew(_packed char *filepath);
                            19242 ; 134  |
                            19243 ; 135  |extern  _reentrant  INT ChangeToRootdirectory(INT HandleNumber);
                            19244 ; 136  |                                                  
                            19245 ; 137  |extern _reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLen
                                  gth);
                            19246 ; 138  |extern _reentrant LONG TotalfreeclusterFAT16(INT DeviceNum);
                            19247 ; 139  |extern _reentrant Ferror(INT HandleNumber);
                            19248 ; 140  |extern _reentrant INT Fclose(INT HandleNumber);
                            19249 ; 141  |extern _reentrant Fflush(INT HandleNumber);
                            19250 ; 142  |extern _reentrant INT FastOpen(LONG Key,_packed char *mode);
                            19251 ; 143  |//extern _reentrant INT filegetdate(INT HandleNumber,INT crt_mod_date_time_para,DIR_DATE *
                                  dirdate,DIR_TIME *dirtime);
                            19252 ; 144  |extern _reentrant INT filegetattrib(_packed char *FilePath);
                            19253 ; 145  |extern _reentrant INT FileSystemPresent(INT DeviceNum);
                            19254 ; 146  |extern _reentrant INT CheckspaceinRootdir(INT Handlenumber,INT count);
                            19255 ; 147  |extern _reentrant LONG FgetFastHandle(INT HandleNumber);
                            19256 ; 148  |
                            19257 ; 149  |extern  _reentrant void Setshortfilename(INT HandleNumber,INT *Buffer,_packed char *shortf
                                  ilename);
                            19258 ; 150  |extern _reentrant INT ArrangeLongFileName(INT HandleNumber,_packed char *filename,INT coun
                                  t,INT chksum);
                            19259 ; 151  |extern  _reentrant INT IsShortNameValid(_packed char *Buffer,INT length,INT index);
                            19260 ; 152  |
                            19261 ; 153  |extern _reentrant INT ChkSum(_packed char *filename);
                            19262 ; 154  |extern INT Short_NameRes_Ch[];  // sdk3.05 moved these from explicit _X to default Y mem s
                                  pace. TOVERIFY2 ensure that references don't refer to _X now.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 317

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19263 ; 155  |extern INT Long_NameRes_Ch[];   // "
                            19264 ; 156  |extern _reentrant void UnicodeToOEM(_packed char *file,_packed char *shortname,INT length,
                                  INT index);
                            19265 ; 157  |
                            19266 ; 158  |extern _reentrant INT getcontentcode(INT Type,_packed char *filepath,INT OUTcode);
                            19267 ; 159  |
                            19268 ; 160  |extern _reentrant INT Checkcode(_packed char *buf,INT Count);
                            19269 ; 161  |extern _reentrant INT CreateShortDirRecord(INT *filename,INT HandleNumber,LONG ClusterNumb
                                  er,INT DirAttr);
                            19270 ; 162  |extern _reentrant INT CheckVolumeCode(INT HandleNumber);
                            19271 ; 163  |extern _reentrant INT Convert_itoa(INT Number,_packed char *string);
                            19272 ; 164  |extern _reentrant INT GetChar(_packed char *Buffer,INT *offset);
                            19273 ; 165  |extern _reentrant void PutChar(_packed char *Buffer,INT *offset,INT Char);
                            19274 ; 166  |extern _reentrant void DBCStoTwoByteString(_packed char *filename,INT *string,INT length,I
                                  NT index);
                            19275 ; 167  |extern _reentrant INT DiscardTrailigPeriods(_packed char *Buffer,INT length,INT index,INT 
                                  flag);
                            19276 ; 168  |extern _reentrant void GetDBCSstring(_packed char *filename,INT *string);
                            19277 ; 169  |extern _reentrant INT  DiscardTrailigPeriodsw(_packed char *Buffer,INT length,INT index);
                            19278 ; 170  |extern _reentrant  INT Extractfilenamew(_packed char *filepath, INT *index);
                            19279 ; 171  |extern _reentrant INT IsCurrWorkDir(INT HandleNumber);
                            19280 ; 172  |extern INT _reentrant ConstructLongFileName(INT HandleNumber, INT RecordNumber, INT *LFNBu
                                  ffer);
                            19281 ; 173  |extern _reentrant INT GetUnicodeWord(INT *Buffer,INT LFNOffset);
                            19282 ; 174  |extern _reentrant INT GetShortfilename(LONG Key,INT *Buffer);
                            19283 ; 175  |extern _reentrant LONG GetRootdirkey(INT DeviceNumber);
                            19284 ; 176  |extern _reentrant INT strcpyUCS3_2(INT *filepath_UCS3,INT *filepath_UCS2, INT index, INT l
                                  ength);
                            19285 ; 177  |extern _reentrant INT StrlengthUCS3(_packed char *filepath);
                            19286 ; 178  |extern _reentrant INT  DiscardTrailigPeriodsUCS3(_packed char *Buffer,INT length,INT index
                                  );
                            19287 ; 179  |extern  INT _reentrant  GetVolumeLabel(_packed char *Buffer,INT DeviceNum);
                            19288 ; 180  |extern _reentrant INT SetVolumeLabel(_packed char *Buffer,INT DeviceNum);
                            19289 ; 181  |
                            19290 ; 182  |extern _reentrant void UpdateFSInfo (void); // sdk2.600 had this line but sdk3.05 did not.
                                   New func from TH.
                            19291 
                            19293 
                            19294 ; 39   |
                            19295 ; 40   |
                            19296 ; 41   |#define MAX_FAT_ENTRY_WORDS 2731            // Max Number of FAT entries (0xffff for FAT16
                                  )
                            19297 ; 42   |                                            // divided by number of bits in a DSP word (24
                                  )
                            19298 ; 43   |
                            19299 ; 44   |#define BYTESPERSECTOROFFSET      11
                            19300 ; 45   |#define MAX_NESTING_LEVEL         16
                            19301 ; 46   |int nestinglevel=0;
                            19302 
                            19303 
Y:0000                      19304         org     y,".ydatachkdsk",init:
                            19305 Fnestinglevel:
Y:0000 000000               19306         dc      $000000
                            19314 
                            19315 ; 47   |extern DATA_DRIVE_PBS_LOC DataDriveStatus[];
                            19316 ; 48   |
                            19317 ; 49   |extern RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            19318 ; 50   |                                          P_SECTOR_BUFFER pSectorData);
                            19319 ; 51   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            19320 ; 52   |                                    P_SECTOR_BUFFER pSectorData);
                            19321 ; 53   |
                            19322 ; 54   |// All other global, custom configurable data is in Y memory.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 318

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19323 ; 55   |// Two handles are reserved by the file system, so the number of handles must be more than
                                   2
                            19324 ; 56   |
                            19325 ; 57   |RETCODE _reentrant DataDriveInit(WORD wDriveNumber);
                            19326 ; 58   |
                            19327 ; 59   |// TOVERIFY made this X instead of Y since buffer is defined as X. SECTOR_BUFFER is WORD _
                                  X (june15,05)
                            19328 ; 60   |extern SECTOR_BUFFER * MediaBuffer;
                            19329 ; 61   |
                            19330 ; 62   |extern _X WORD DirRecordBuffer[];                 // Holds a directory record sector
                            19331 ; 63   |extern _X WORD FatBuffer[];                       // Buffer holds a sector of FAT for writ
                                  ing back the FAT
                            19332 ; 64   |extern _X WORD XScratchSpace[];
                            19333 ; 65   |
                            19334 ; 66   |WORD _X *FATEntryStatus;    // This table holds the status for each FAT entry
                            19335 ; 67   |                            // Each FAT entry is one bit in this table
                            19336 ; 68   |                            // If bit set to 1, the entry is used and good
                            19337 ; 69   |                            // If bit set to 0, the entry is unknown
                            19338 ; 70   |
                            19339 ; 71   |WORD _X *CacheMem_chkdsk[MAX_CACHES];        // This table will be used for FAT32
                            19340 ; 72   |
                            19341 ; 73   |tCACHEDESCR_checkdisk CacheDesc_chkdsk[MAX_CACHES];
                            19342 ; 74   |
                            19343 ; 75   |WORD FATBuffer[705*3];                         // Holds up to 3 sectors (of size 2KB or sm
                                  aller)
                            19344 ; 76   |
                            19345 ; 77   |
                            19346 ; 78   |WORD glb_wFileCorrupted = 0;        // Total number of corrupted files in the current devi
                                  ce
                            19347 
                            19348 Fglb_wFileCorrupted:
Y:0001 000000               19349         dc      $000000
                            19352 
                            19353 ; 79   |BYTE glb_bFailReadSect = FALSE;                 // This flag indicates if a sector fail to
                                   read/write
                            19354 
                            19355 Fglb_bFailReadSect:
Y:0002 000000               19356         dc      $00
                            19359 
                            19360 ; 80   |WORD Flag = 0;                                  // on the current device. This is a critic
                                  al error
                            19361 
Y:0003 000000               19362 FFlag:  dc      $000000
                            19365 
                            19366 ; 81   |                                                // and chkdsk activity should be suspended
                                   for the
                            19367 ; 82   |                                                // current device
                            19368 ; 83   |
                            19369 ; 84   |DWORD dwChkDskClkCycles = 0;        // For debug only
                            19370 
                            19371 FdwChkDskClkCycles:
Y:0004 000000 000000        19372         dc      $000000,$000000
                            19375 
                            19376 ; 85   |WORD _X cachedSectorSize;
                            19377 ; 86   |WORD _X cachedSectorSizeInWords;
                            19378 ; 87   |WORD _X cachedClusterEntryPerSectorShift;
                            19379 ; 88   |WORD _X cachedDirRecordsPerSector;
                            19380 ; 89   |WORD _X cachedWordsPerSector;
                            19381 
                            19399 
                            19400 ; 90   |
                            19401 ; 91   |PARTITION_BOOT_SECTOR stPartitionBootSector;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 319

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19402 
                            19411 
                            19412 ; 92   |FAT_STRUCT stFat = {0, 0, CLEAN, 1, 0, FATBuffer};
                            19413 
Y:0006 000000 000000        19414 FstFat: dc      $00,$000000,$000000,$000001,$000000,$000000,$000000,FFATBuffer
       000000 000001              
       000000 000000              
       000000 rrrrrr              
                            19417 
                            19418 ; 93   |LONG (*GetNextCxFromFat) (DWORD wCurCx);     // pointer to function
                            19419 ; 94   |extern LONG _reentrant GetNextCxFat12(DWORD wCurCx);
                            19420 ; 95   |extern LONG _reentrant GetNextCxFat16(DWORD wCurCx);
                            19421 ; 96   |extern LONG _reentrant GetNextCxFat32(DWORD wCurCx);
                            19422 ; 97   |extern LONG _reentrant GetNextCx(DWORD wCurCx);
                            19423 ; 98   |
                            19424 ; 99   |#if 0
                            19425 ; 100  |void chkdskall(void)
                            19426 ; 101  |{
                            19427 ; 102  |
                            19428 ; 103  |
                            19429 ; 104  |    BYTE bLogicalDeviceCounter = MAX_LOGICAL_DEVICES;
                            19430 ; 105  |    BYTE i = 0, j;
                            19431 ; 106  |//    #pragma asm
                            19432 ; 107  |//        debug
                            19433 ; 108  |//    #pragma endasm
                            19434 ; 109  |
                            19435 ; 110  |
                            19436 ; 111  |    for ( i=0;i<bLogicalDeviceCounter;i++ )
                            19437 ; 112  |    {
                            19438 ; 113  |        for ( j=0; j < MAX_CACHES;j++ )
                            19439 ; 114  |        {
                            19440 ; 115  |            CacheDesc_chkdsk[j].CacheValid = 0;
                            19441 ; 116  |        }
                            19442 ; 117  |        CheckDisk(i);
                            19443 ; 118  |    }
                            19444 ; 119  |
                            19445 ; 120  |    //dwChkDskClkCycles = GetTime() - dwChkDskClkCycles;
                            19446 ; 121  |
                            19447 ; 122  |}
                            19448 ; 123  |#endif
                            19449 ; 124  |///////////////////////////////////////////////////////////////////////////////
                            19450 ; 125  |//
                            19451 ; 126  |//>  Name:          CheckDisk
                            19452 ; 127  |//
                            19453 ; 128  |//   Type:          Function
                            19454 ; 129  |//
                            19455 ; 130  |//   Description:
                            19456 ; 131  |//
                            19457 ; 132  |//   Inputs:        None
                            19458 ; 133  |//
                            19459 ; 134  |//   Outputs:
                            19460 ; 135  |//
                            19461 ; 136  |//   Notes:         None
                            19462 ; 137  |//<
                            19463 ; 138  |///////////////////////////////////////////////////////////////////////////////
                            19464 ; 139  |void CheckDisk(BYTE bDiskNum)
                            19465 ; 140  |{
                            19466 
P:0000                      19467         org     p,".ptextchkdsk":
                            19472 FCheckDisk:
                            19500 
                            19501 ; 141  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 320

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19502 ; 142  |        //FAT_WarningMessage
                            19503 ; 143  |        extern INT              g_iCheckDiskError;
                            19504 ; 144  |
                            19505 ; 145  |
                            19506 ; 146  |    DIR_CTRL_BLK stDirCtrlBlk;
                            19507 ; 147  |    FILE_CTRL_BLK stFileCtrlBlk;
                            19508 ; 148  |    // WORD wScanError;
                            19509 ; 149  |    WORD j,Retval;
                            19510 ; 150  |    DWORD sectorno,i,TotalFatsectors=0,sector_1st_FAT,SectorsToWrite,count;
                            19511 ; 151  |    INT _X *buf;
                            19512 ; 152  |    WORD RetVal;
                            19513 ; 153  |    //   LONG (*GetNextCxFromFat) (DWORD wCurCx);     // pointer to function
                            19514 ; 154  |
                            19515 ; 155  |    glb_wFileCorrupted = 0;
                            19516 
                            19520 
                            19521 ; 156  |    glb_bFailReadSect = FALSE;
                            19522 
                            19525 
                            19526 ; 157  |
                            19527 ; 158  |//    #pragma asm
                            19528 ; 159  |//       debug
                            19529 ; 160  |//    #pragma endasm
                            19530 ; 161  |
                            19531 ; 162  |    FATEntryStatus = &XScratchSpace[0];
                            19532 
                            19536 
                            19537 ; 163  |
                            19538 ; 164  |
                            19539 ; 165  |    //FAT_WarningMessage
                            19540 ; 166  |    g_iCheckDiskError = 0;
                            19541 
                            19544 
                            19545 ; 167  |                if (bDiskNum == 0)
                            19546 
P:0000 05707C rrrrrr  4    419473         movec   ssh,y:ss_CheckDisk
P:0002 73F400 rrrrrr  3    719534         move    #FXScratchSpace,n3
P:0004 2A0000         2    919548         move    #0,a2
P:0005 270000         2   1119518         move    #0,y1
P:0006 4F7000 rrrrrr  3   1419519         move    y1,y:Fglb_wFileCorrupted
P:0008 4F7000 rrrrrr  3   1719524         move    y1,y:Fglb_bFailReadSect
P:000A 7B7003 rrrrrr  3   2019549         tst     a	                n3,y:FFATEntryStatus
P:000C 4F7000 rrrrrr  3   2319543         move    y1,y:Fg_iCheckDiskError
P:000E 0AF0A2 rrrrrr  6   2919550         jne     L81
                            19551 
                            19552 ; 168  |                {
                            19553 ; 169  |                        if ((MediaTable[bDiskNum].RsvdSectors == 0) || (MediaTable[bDiskNu
                                  m].FATSize == 0))
                            19554 
P:0010 218500         2   3119560         move    a1,x1
P:0011 46F400 00001C  3   3419561         move    #>28,y0
P:0013 3D02E8         2   3619562         mpy     x1,y0,b	                #2,n5
P:0014 6DF02A rrrrrr  3   3919563         asr     b	                y:FMediaTable,r5
P:0016 213E00         2   4119564         move    b0,n6
P:0017 044D16         4   4519559         lua     (r5)+n5,r6
P:0018 213C00         2   4719565         move    b0,n4
P:0019 5FEE00         4   5119566         move    y:(r6+n6),b
P:001A 20000B         2   5319567         tst     b
P:001B 0AF0AA rrrrrr  6   5919568         jeq     L86
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 321

M:ADDR CODE           CYCLES LINE SOURCELINE
P:001D 3D0700         2   6119569         move    #7,n5
P:001E 000000         2   6319569         nop             ; (inserted)
P:001F 204D00         2   6519571         move    (r5)+n5
P:0020 22B400         2   6719572         move    r5,r4
P:0021 000000         2   6919572         nop             ; (inserted)
P:0022 204C00         2   7119574         move    (r4)+n4
P:0023 205C00         2   7319575         move    (r4)+
P:0024 5FD400         2   7519576         move    y:(r4)-,b
P:0025 59E400         2   7719577         move    y:(r4),b0
P:0026 20000B         2   7919578         tst     b
P:0027 0AF0AA rrrrrr  6   8519579         jeq     L86
                            19580 
                            19581 ; 170  |                        {
                            19582 ; 171  |                                        g_iCheckDiskError = 1;
                            19583 ; 172  |                                        return;
                            19584 ; 173  |                        }
                            19585 ; 174  |                }
                            19586 
                            19588 L81:
                            19593 
                            19594 ; 175  |
                            19595 ; 176  |
                            19596 ; 177  |    if ( SUCCESS != DataDriveInit(bDiskNum) )
                            19597 
P:0029 5C7000 rrrrrr  3   8819588         move    a1,y:ss_CheckDisk+11
P:002B 0BF080 rrrrrr  6   9419599         jsr     FDataDriveInit
P:002D 200003         2   9619602         tst     a
P:002E 0AF0A2 rrrrrr  6  10219603         jne     L86
                            19604 
                            19605 ; 178  |    //FAT_WarningMessage
                            19606 ; 179  |    //        SystemHalt();
                            19607 ; 180  |          {
                            19608 ; 181  |                        g_iCheckDiskError = 1;  
                            19609 ; 182  |                        return;
                            19610 ; 183  |          }
                            19611 ; 184  |
                            19612 ; 185  |   /* 
                            19613 ; 186  |    Initialize number of entry per cluster. However, due to the fact that we can 
                            19614 ; 187  |    assume that a file is larger than 2 sectors in most cases, so the number of entries
                            19615 ; 188  |    that we should examine can be less. 
                            19616 ; 189  |    The case for 512 bytes per sector, the right value should be between 7 and 11. A reaso
                                  nable 
                            19617 ; 190  |    value can be set at 10. However, the smaller value we set, the slower the process. It 
                                  is
                            19618 ; 191  |    really a trade-off between speed and acuracy. but since it has been working with 512(1
                                  2) 
                            19619 ; 192  |    for a long time, I did not changed this value.
                            19620 ; 193  |    For 2048 bytes per sector, the right value should be between 9 and 12. 
                            19621 ; 194  |     */
                            19622 ; 195  |
                            19623 ; 196  |    cachedSectorSize = g_Drive[bDiskNum].pDescriptor->wSectorSizeInBytes;
                            19624 
                            19640 
                            19641 ; 197  |    cachedSectorSizeInWords = (cachedSectorSize+2)/3;
                            19642 
P:0030 66F400 rrrrrr  3  10519633         move    #Fg_Drive,r6
P:0032 5FF000 rrrrrr  3  10819626         move    y:ss_CheckDisk+11,b
P:0034 21B43B         2  11019629         lsl     b	                b1,r4
P:0035 21BE00         2  11219632         move    b1,n6
P:0036 47F400 000002  3  11519628         move    #>2,y1
P:0038 6EEE00         4  11919635         move    y:(r6+n6),r6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 322

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0039 3E0B00         2  12119636         move    #11,n6
P:003A 000000         2  12319636         nop             ; (inserted)
P:003B 5FEE00         4  12719638         move    y:(r6+n6),b
P:003C 557000 rrrrrr  3  13019639         move    b1,x:FcachedSectorSize
P:003E 21A678         2  13219645         add     y1,b	                b1,y0
P:003F 21AE00         2  13419646         move    b1,a
P:0040 57F400 000003  3  13719647         move    #>3,b
P:0042 0BF080 rrrrrr  6  14319648         jsr     Rdiv_uiuiui
                            19650 
                            19651 ; 198  |    switch ( cachedSectorSize )
                            19652 
P:0044 507051 rrrrrr  3  14619654         tfr     y0,a	                a0,x:FcachedSectorSizeInWords
P:0046 57F400 000800  3  14919655         move    #2048,b
P:0048 2A0000         2  15119656         move    #0,a2
P:0049 57F405 000200  3  15419657         cmp     b,a     #512,b
P:004B 0AF0AA rrrrrr  6  16019658         jeq     L82
P:004D 200005         2  16219659         cmp     b,a
P:004E 0AF0AA rrrrrr  6  16819660         jeq     L87
P:0050 0AF080 rrrrrr  6  17419661         jmp     L86
                            19662 
                            19663 ; 199  |    {
                            19664 ; 200  |    case SEC_512_BYTES_PER_SECTOR:
                            19665 ; 201  |        cachedClusterEntryPerSectorShift = SEC_512_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT;
                            19666 ; 202  |        cachedDirRecordsPerSector = SEC_512_BYTES_DIR_REC_PER_SECTOR;
                            19667 ; 203  |        cachedWordsPerSector = SEC_512_BYTES_WORDS_PER_SECTOR;
                            19668 ; 204  |        break;
                            19669 ; 205  |
                            19670 ; 206  |#ifndef LARGE_SECTOR_DEFS_AS_SMALL_SECTOR
                            19671 ; 207  |    case SEC_2K_BYTES_PER_SECTOR:
                            19672 ; 208  |
                            19673 ; 209  |        cachedClusterEntryPerSectorShift = SEC_2K_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT;
                            19674 
                            19676 L82:
                            19678 
                            19679 ; 210  |        cachedDirRecordsPerSector = SEC_2K_BYTES_DIR_REC_PER_SECTOR;
                            19680 
                            19684 
                            19685 ; 211  |        cachedWordsPerSector = SEC_2K_BYTES_WORDS_PER_SECTOR;
                            19686 
                            19689 
                            19690 ; 212  |        break;
                            19691 
P:0052 56F400 00000C  3  17719676         move    #>12,a
P:0054 55F400 0002C1  3  18019688         move    #705,b1
P:0056 44F400 000040  3  18319682         move    #>$40,x0
P:0058 547000 rrrrrr  3  18619677         move    a1,x:FcachedClusterEntryPerSectorShift
P:005A 447000 rrrrrr  3  18919683         move    x0,x:FcachedDirRecordsPerSector
P:005C 0AF080 rrrrrr  6  19519693         jmp     L88
                            19694 
                            19695 ; 213  |#endif        
                            19696 ; 214  |    default:
                            19697 ; 215  |
                            19698 ; 216  |           //FAT_WarningMessage
                            19699 ; 217  |           //        SystemHalt();
                            19700 ; 218  |           g_iCheckDiskError = 1;       
                            19701 
                            19703 L86:
                            19705 
                            19706 ; 219  |      
                            19707 ; 220  |        return; // !!!!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 323

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19708 
P:005E 280100         2  19719703         move    #1,a0
P:005F 587000 rrrrrr  3  20019704         move    a0,y:Fg_iCheckDiskError
P:0061 0AF080 rrrrrr  6  20619710         jmp     L115
                            19712 L87:
                            19719 
                            19720 ; 221  |    };
                            19721 
P:0063 57F400 0000B1  3  20919718         move    #>177,b
P:0065 46F400 00000C  3  21219712         move    #>12,y0
P:0067 45F400 000010  3  21519715         move    #>16,x1
P:0069 467000 rrrrrr  3  21819713         move    y0,x:FcachedClusterEntryPerSectorShift
P:006B 457000 rrrrrr  3  22119716         move    x1,x:FcachedDirRecordsPerSector
                            19723 L88:
                            19726 
                            19727 ; 222  |
                            19728 ; 223  |    j = 0;
                            19729 
                            19734 
                            19735 ; 224  |    for ( i=0; i < MAX_CACHES; i++ )
                            19736 
P:006D 66F400 rrrrrr  3  22419738         move    #FCacheMem_chkdsk,r6
P:006F 240000         2  22619731         move    #0,x0
P:0070 55701B rrrrrr  3  22919732         clr     b	                b1,x:FcachedWordsPerSector
P:0072 45F400 000001  3  23219740         move    #>1,x1
P:0074 47F400 000005  3  23519741         move    #>5,y1
P:0076 46F000 rrrrrr  3  23819739         move    x:FcachedWordsPerSector,y0
P:0078 060580 rrrrrr  6  24419742         do      #5,L116
                            19744 
                            19745 ; 225  |    {
                            19746 ; 226  |        CacheMem_chkdsk[i] = (WORD _X *) &XScratchSpace[j];
                            19747 
                            19754 
                            19755 ; 227  |        j += cachedWordsPerSector;
                            19756 
P:007A 21BD58         2  24619758         add     y0,b	                b1,n5
P:007B 65F400 rrrrrr  3  24919750         move    #FXScratchSpace,r5
P:007D 000000         2  25119750         nop             ; (inserted)
P:007E 044D1D         4  25519752         lua     (r5)+n5,n5
P:007F 7D5E00         2  25719753         move    n5,y:(r6)+
                        (13)19760 L116:
                            19762 
                            19763 ; 228  |    }
                            19764 ; 229  |
                            19765 ; 230  |    for ( j=0; j < MAX_CACHES;j++ )
                            19766 
P:0080 62F441 rrrrrr  3  26019768         tfr     x0,a	                #FCacheDesc_chkdsk,r2
P:0082 060580 rrrrrr  6  26619772         do      #5,L117
                            19774 
                            19775 ; 231  |    {
                            19776 ; 232  |        CacheDesc_chkdsk[j].CacheValid = 0;
                            19777 
                            19787 
                            19788 ; 233  |        CacheDesc_chkdsk[j].WriteAttribute = 0;
                            19789 
P:0084 218600         2  26819779         move    a1,y0
P:0085 2000B8         2  27019780         mpy     y0,y1,b
P:0086 20002A         2  27219781         asr     b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 324

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0087 213A60         2  27419795         add     x1,a	                b0,n2
P:0088 213E00         2  27619783         move    b0,n6
P:0089 044A16         4  28019784         lua     (r2)+n2,r6
P:008A 000000         2  28219784         nop             ; (inserted)
P:008B 4C6600         2  28419786         move    x0,y:(r6)
P:008C 66F400 rrrrrr  3  28719791         move    #FCacheDesc_chkdsk+3,r6
P:008E 000000         2  28919791         nop             ; (inserted)
P:008F 4C6E00         4  29319793         move    x0,y:(r6+n6)
                        (27)19796 L117:
                            19805 
                            19806 ; 234  |    }
                            19807 ; 235  |
                            19808 ; 236  |    // Initialize the Partition Boot Sector for current Logical Device
                            19809 ; 237  |    if ( InitPartitionBootSectorStruct(bDiskNum) != NOERROR ) return;
                            19810 
P:0090 228E00         2  29519799         move    r4,a
P:0091 6C7000 rrrrrr  3  29819798         move    r4,y:ss_CheckDisk+11
P:0093 0BF080 rrrrrr  6  30419812         jsr     FInitPartitionBootSectorStruct
P:0095 2A0000         2  30619815         move    #0,a2
P:0096 200003         2  30819816         tst     a
P:0097 0AF0A2 rrrrrr  6  31419817         jne     L115
                            19818 
                            19819 ; 238  |
                            19820 ; 239  |    // QUit if FAT is not supported
                            19821 ; 240  |    if ( stPartitionBootSector.TypeFileSystem == FATUNSUPPORTED ) return;
                            19822 
P:0099 5FF000 rrrrrr  3  31719824         move    y:FstPartitionBootSector,b
P:009B 47F400 000003  3  32019825         move    #>3,y1
P:009D 20007D         2  32219826         cmp     y1,b
P:009E 0AF0AA rrrrrr  6  32819827         jeq     L115
                            19828 
                            19829 ; 241  |
                            19830 ; 242  |    // Initialize the Root Directory Control Block Structure
                            19831 ; 243  |    stDirCtrlBlk.StartSectCurDir = stPartitionBootSector.wStartSectRootDir;
                            19832 
                            19838 
                            19839 ; 244  |    stDirCtrlBlk.wStartCxCurDir = stPartitionBootSector.Rootdirstartcx;
                            19840 
                            19846 
                            19847 ; 245  |    stDirCtrlBlk.CurSect = stDirCtrlBlk.NumberFiles =  0;
                            19848 
                            19856 
                            19857 ; 246  |    stDirCtrlBlk.Device = bDiskNum;
                            19858 
                            19864 
                            19865 ; 247  |    stDirCtrlBlk.pwBuffer = DirRecordBuffer;
                            19866 
                            19870 
                            19871 ; 248  |    stDirCtrlBlk.Control = CLEAN;
                            19872 
                            19875 
                            19876 ; 249  |
                            19877 ; 250  |    // Initializes part of the FAT structure
                            19878 ; 251  |    stFat.FirstPrimaryFatSect =stPartitionBootSector.wStartSectPrimaryFat;
                            19879 
                            19885 
                            19886 ; 252  |    stFat.FirstSecondaryFatSect = stPartitionBootSector.wStartSectSecondaryFat;
                            19887 
                            19893 
                            19894 ; 253  |    stFat.Device = bDiskNum;
                            19895 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 325

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19900 
                            19901 ; 254  |    stFat.Control = CLEAN;
                            19902 
                            19905 
                            19906 ; 255  |    stFat.FatSectorCached = 0;
                            19907 
                            19910 
                            19911 ; 256  |    stFat.pwBuffer = FATBuffer;
                            19912 
                            19916 
                            19917 ; 257  |
                            19918 ; 258  |    if ( stPartitionBootSector.TypeFileSystem == FS_FAT32 )
                            19919 
P:00A0 66F400 rrrrrr  3  33119868         move    #FDirRecordBuffer,r6
P:00A2 4CF01B rrrrrr  3  33419850         clr     b	                y:FstPartitionBootSector+12,x0
P:00A4 4DF000 rrrrrr  3  33719835         move    y:FstPartitionBootSector+13,x1
P:00A6 46F400 000002  3  34019922         move    #>2,y0
P:00A8 4D7000 rrrrrr  3  34319836         move    x1,y:ss_CheckDisk+3
P:00AA 250000         2  34519852         move    #0,x1
P:00AB 4C7000 rrrrrr  3  34819837         move    x0,y:ss_CheckDisk+2
P:00AD 240000         2  35019853         move    #0,x0
P:00AE 5EF000 rrrrrr  3  35319842         move    y:FstPartitionBootSector+21,a
P:00B0 58F000 rrrrrr  3  35619843         move    y:FstPartitionBootSector+20,a0
P:00B2 5C7000 rrrrrr  3  35919844         move    a1,y:ss_CheckDisk+5
P:00B4 587000 rrrrrr  3  36219845         move    a0,y:ss_CheckDisk+4
P:00B6 5D7000 rrrrrr  3  36519851         move    b1,y:ss_CheckDisk+9
P:00B8 4D7000 rrrrrr  3  36819854         move    x1,y:ss_CheckDisk+8
P:00BA 4C7000 rrrrrr  3  37119855         move    x0,y:ss_CheckDisk+7
P:00BC 7EF000 rrrrrr  3  37419860         move    y:ss_CheckDisk+11,n6
P:00BE 7E7000 rrrrrr  3  37719861         move    n6,y:ss_CheckDisk+1
P:00C0 6E7000 rrrrrr  3  38019869         move    r6,y:ss_CheckDisk+10
P:00C2 66F400 rrrrrr  3  38319914         move    #FFATBuffer,r6
P:00C4 5D7000 rrrrrr  3  38619874         move    b1,y:ss_CheckDisk+6
P:00C6 4CF000 rrrrrr  3  38919881         move    y:FstPartitionBootSector+8,x0
P:00C8 4DF000 rrrrrr  3  39219882         move    y:FstPartitionBootSector+9,x1
P:00CA 4D7000 rrrrrr  3  39519883         move    x1,y:FstFat+4
P:00CC 4C7000 rrrrrr  3  39819884         move    x0,y:FstFat+3
P:00CE 4CF000 rrrrrr  3  40119889         move    y:FstPartitionBootSector+10,x0
P:00D0 4DF000 rrrrrr  3  40419890         move    y:FstPartitionBootSector+11,x1
P:00D2 4D7000 rrrrrr  3  40719891         move    x1,y:FstFat+6
P:00D4 4C7000 rrrrrr  3  41019892         move    x0,y:FstFat+5
P:00D6 7E7000 rrrrrr  3  41319897         move    n6,y:FstFat
P:00D8 5D7000 rrrrrr  3  41619904         move    b1,y:FstFat+2
P:00DA 5D7000 rrrrrr  3  41919909         move    b1,y:FstFat+1
P:00DC 6E7000 rrrrrr  3  42219915         move    r6,y:FstFat+7
P:00DE 5FF000 rrrrrr  3  42519921         move    y:FstPartitionBootSector,b
P:00E0 20005D         2  42719923         cmp     y0,b
P:00E1 0AF0A2 rrrrrr  6  43319924         jne     L95
                            19926 
                            19927 ; 259  |    {
                            19928 ; 260  |        sectorno= stFat.FirstSecondaryFatSect;
                            19929 ; 261  |        TotalFatsectors = stPartitionBootSector.dwTotalclusters >> CLUSTER_ENTRY_PER_SECTO
                                  R_SHIFT;
                            19930 
P:00E3 57F000 rrrrrr  3  43619934         move    x:FcachedClusterEntryPerSectorShift,b
P:00E5 5EF000 rrrrrr  3  43919932         move    y:FstPartitionBootSector+25,a
P:00E7 2B0000         2  44119936         move    #0,b2
P:00E8 58F000 rrrrrr  3  44419933         move    y:FstPartitionBootSector+24,a0
P:00EA 2A000B         2  44619937         tst     b	                #0,a2
P:00EB 0AF0AA rrrrrr  6  45219938         jeq     L119
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 326

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00ED 06CD20         4  45619939         rep     b1     
P:00EE 200022         2  45819941         asr     a
                            19943 L119:
                            19946 
                            19947 ; 262  |        TotalFatsectors++;
                            19948 
                            19955 
                            19956 ; 263  |        CacheMem_chkdsk[0][0] = 0x03;             // 2 first clusters are always reserved
                            19957 
                            19962 
                            19963 ; 264  |
                            19964 ; 265  |        for ( i = 1; i < cachedWordsPerSector; i++ )
                            19965 
P:00EF 000008         2  46019950         inc     a
P:00F0 5C701B rrrrrr  3  46319967         clr     b	                a1,y:ss_CheckDisk+15
P:00F2 587000 rrrrrr  3  46619953         move    a0,y:ss_CheckDisk+14
P:00F4 68F000 rrrrrr  3  46919959         move    y:FCacheMem_chkdsk,r0
P:00F6 000000         2  47119959         nop             ; (inserted)
P:00F7 476000         2  47319961         move    y1,x:(r0)
P:00F8 0AF080 rrrrrr  6  47919968         jmp     L92
                            19969 
                            19970 ; 266  |            CacheMem_chkdsk[0][i] = 0;
                            19971 
                            19973 L91:
P:00FA 213E13         2  48119975         clr     a	                b0,n6
P:00FB 221600         2  48319974         move    r0,r6
P:00FC 000000         2  48519974         nop             ; (inserted)
P:00FD 546E00         4  48919976         move    a1,x:(r6+n6)
                            19978 L92:
P:00FE 2C0000         2  49119980         move    #0,a1
P:00FF 2A0000         2  49319981         move    #0,a2
P:0100 000009         2  49519978         inc     b
P:0101 50F000 rrrrrr  3  49819979         move    x:FcachedWordsPerSector,a0
P:0103 2B0000         2  50019982         move    #0,b2
P:0104 20000D         2  50219983         cmp     a,b
P:0105 0AF0A9 rrrrrr  6  50819984         jlt     L91
                            19985 
                            19986 ; 267  |
                            19987 ; 268  |        if ( DriveWriteSector(bDiskNum, sectorno+DataDriveStatus[bDiskNum].iPbsSectorOffse
                                  t, &CacheMem_chkdsk[0][0]) != NOERROR )
                            19988 
P:0107 74F400 rrrrrr  3  51119995         move    #FDataDriveStatus+1,n4
P:0109 4EF000 rrrrrr  3  51419990         move    y:ss_CheckDisk+11,y0
P:010B 0116E0         2  51619991         mpy     y0,#22,a
P:010C 211400         2  51819994         move    a0,r4
P:010D 229E00         2  52019999         move    r4,n6
P:010E 044C16         4  52419997         lua     (r4)+n4,r6
P:010F 6E7000 rrrrrr  3  52719998         move    r6,y:ss_CheckDisk+16
P:0111 239600         2  52920000         move    n4,r6
P:0112 000000         2  53120000         nop             ; (inserted)
P:0113 5FEE00         4  53520002         move    y:(r6+n6),b
P:0114 21A900         2  53720004         move    b1,b0
P:0115 216D00         2  53920005         move    b2,b1
P:0116 4D7028 rrrrrr  3  54220008         add     x,b	                x1,y:ss_CheckDisk+13
P:0118 4C7001 rrrrrr  3  54520011         tfr     b,a	                x0,y:ss_CheckDisk+12
P:011A 20CF00         2  54720012         move    y0,b
P:011B 0BF080 rrrrrr  6  55320017         jsr     FDriveWriteSector
P:011D 200003         2  55520020         tst     a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 327

M:ADDR CODE           CYCLES LINE SOURCELINE
P:011E 0AF0A2 rrrrrr  6  56120021         jne     L115
                            20022 
                            20023 ; 269  |            return;
                            20024 ; 270  |        sectorno++;
                            20025 
                            20036 
                            20037 ; 271  |
                            20038 ; 272  |
                            20039 ; 273  |        CacheMem_chkdsk[0][0] = 0;               // Cleared for erasing rest of the sector
                                  s.
                            20040 
                            20046 
                            20047 ; 274  |        // first sector is already written
                            20048 ; 275  |        for ( i=0;i < (TotalFatsectors-1);i++ )
                            20049 
P:0120 6BF000 rrrrrr  3  56420042         move    y:FCacheMem_chkdsk,r3
P:0122 5FF000 rrrrrr  3  56720027         move    y:ss_CheckDisk+13,b
P:0124 5EF000 rrrrrr  3  57020051         move    y:ss_CheckDisk+15,a
P:0126 59F000 rrrrrr  3  57320028         move    y:ss_CheckDisk+12,b0
P:0128 58F000 rrrrrr  3  57620052         move    y:ss_CheckDisk+14,a0
P:012A 000009         2  57820029         inc     b
P:012B 212400         2  58020033         move    b0,x0
P:012C 21A51B         2  58220043         clr     b	                b1,x1
P:012D 00000A         2  58420053         dec     a
P:012E 556300         2  58620044         move    b1,x:(r3)
P:012F 5C7000 rrrrrr  3  58920056         move    a1,y:ss_CheckDisk+22
P:0131 587000 rrrrrr  3  59220057         move    a0,y:ss_CheckDisk+21
P:0133 0AF080 rrrrrr  6  59820058         jmp     L94
                            20059 L93:
                            20063 
                            20064 ; 276  |        {
                            20065 ; 277  |            if ( DriveWriteSector(bDiskNum, sectorno+DataDriveStatus[bDiskNum].iPbsSectorO
                                  ffset, &CacheMem_chkdsk[0][0]) != NOERROR )
                            20066 
P:0135 5D7000 rrrrrr  3  60120059         move    b1,y:ss_CheckDisk+20
P:0137 597000 rrrrrr  3  60420060         move    b0,y:ss_CheckDisk+19
P:0139 6EF000 rrrrrr  3  60720068         move    y:ss_CheckDisk+16,r6
P:013B 000000         2  60920068         nop             ; (inserted)
P:013C 5EE600         2  61120070         move    y:(r6),a
P:013D 218800         2  61320072         move    a1,a0
P:013E 4D7000 rrrrrr  3  61620074         move    x1,y:ss_CheckDisk+18
P:0140 214C00         2  61820073         move    a2,a1
P:0141 4C7000 rrrrrr  3  62120075         move    x0,y:ss_CheckDisk+17
P:0143 68F000 rrrrrr  3  62420079         move    y:FCacheMem_chkdsk,r0
P:0145 5FF020 rrrrrr  3  62720076         add     x,a	                y:ss_CheckDisk+11,b
P:0147 0BF080 rrrrrr  6  63320083         jsr     FDriveWriteSector
P:0149 5FF003 rrrrrr  3  63620086         tst     a	                y:ss_CheckDisk+20,b
P:014B 5EF000 rrrrrr  3  63920091         move    y:ss_CheckDisk+18,a
P:014D 59F000 rrrrrr  3  64220088         move    y:ss_CheckDisk+19,b0
P:014F 58F000 rrrrrr  3  64520092         move    y:ss_CheckDisk+17,a0
P:0151 0AF0A2 rrrrrr  6  65120095         jne     L115
                            20096 
                            20097 ; 278  |                return;
                            20098 ; 279  |            sectorno++;
                            20099 
P:0153 000008         2  65320101         inc     a
P:0154 000009         2  65520107         inc     b
P:0155 210400         2  65720102         move    a0,x0
P:0156 218500         2  65920103         move    a1,x1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 328

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20108 L94:
P:0157 2B0000         2  66120111         move    #0,b2
P:0158 5EF000 rrrrrr  3  66420108         move    y:ss_CheckDisk+22,a
P:015A 2A0000         2  66620110         move    #0,a2
P:015B 58F000 rrrrrr  3  66920109         move    y:ss_CheckDisk+21,a0
P:015D 20000D         2  67120112         cmp     a,b
P:015E 0AF0A9 rrrrrr  6  67720113         jlt     L93
                            20114 
                            20115 ; 280  |        }
                            20116 ; 281  |    }
                            20117 
P:0160 0AF080 rrrrrr  6  68320119         jmp     L97
                            20120 
                            20121 ; 282  |    else
                            20122 ; 283  |    {
                            20123 ; 284  |        for ( j=0 ; j < MAX_FAT_ENTRY_WORDS ; j++ )
                            20124 
                            20126 L95:
P:0162 6CF000 rrrrrr  3  68620128         move    y:FFATEntryStatus,r4
P:0164 229300         2  68820129         move    r4,r3
P:0165 06AB8A rrrrrr  6  69420130         do      #2731,L118
                            20132 
                            20133 ; 285  |            FATEntryStatus[j] = 0x0;
                            20134 
P:0167 2F0000         2  69620136         move    #0,b
P:0168 555B00         2  69820137         move    b1,x:(r3)+
                         (4)20139 L118:
                            20141 
                            20142 ; 286  |
                            20143 ; 287  |        FATEntryStatus[0] = 0x03;              // 2 first clusters are always reserved
                            20144 
                            20147 
                            20148 ; 288  |    }
                            20149 ; 289  |
                            20150 ; 290  |
                            20151 ; 291  |
                            20152 ; 292  |    if ( stPartitionBootSector.TypeFileSystem == FS_FAT12 )
                            20153 
P:0169 476400         2  70020146         move    y1,x:(r4)
                            20155 L97:
P:016A 5FF000 rrrrrr  3  70320155         move    y:FstPartitionBootSector,b
P:016C 20000B         2  70520157         tst     b
P:016D 0AF0A2 rrrrrr  6  71120158         jne     L98
                            20159 
                            20160 ; 293  |        GetNextCxFromFat = &GetNextCxFat12;
                            20161 
P:016F 66F400 rrrrrr  3  71420163         move    #FGetNextCxFat12,r6
P:0171 6E7000 rrrrrr  3  71720164         move    r6,y:FGetNextCxFromFat
P:0173 0AF080 rrrrrr  6  72320165         jmp     L101
                            20166 
                            20167 ; 294  |
                            20168 ; 295  |    else if ( stPartitionBootSector.TypeFileSystem == FS_FAT16 )
                            20169 
                            20171 L98:
P:0175 56F400 000001  3  72620173         move    #>1,a
P:0177 20000D         2  72820174         cmp     a,b
P:0178 0AF0A2 rrrrrr  6  73420175         jne     L99
                            20176 
                            20177 ; 296  |        GetNextCxFromFat = &GetNextCxFat16;
                            20178 
P:017A 66F400 rrrrrr  3  73720180         move    #FGetNextCxFat16,r6
P:017C 6E7000 rrrrrr  3  74020181         move    r6,y:FGetNextCxFromFat
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 329

M:ADDR CODE           CYCLES LINE SOURCELINE
P:017E 0AF080 rrrrrr  6  74620182         jmp     L101
                            20183 
                            20184 ; 297  |
                            20185 ; 298  |    else if ( stPartitionBootSector.TypeFileSystem == FS_FAT32 )
                            20186 
P:0180 46F400 000002  3  74920188 L99:    move    #>2,y0
P:0182 20005D         2  75120189         cmp     y0,b
P:0183 0AF0A2 rrrrrr  6  75720190         jne     L115
                            20191 
                            20192 ; 299  |        GetNextCxFromFat = &GetNextCxFat32;
                            20193 
                            20197 
                            20198 ; 300  |
                            20199 ; 301  |    else
                            20200 ; 302  |        return;
                            20201 ; 303  |
                            20202 ; 304  |
                            20203 ; 305  |    // Load the 1st 3 sectors of primary FAT
                            20204 ; 306  |    LoadFatSector(stPartitionBootSector.wStartSectPrimaryFat, MediaBuffer);
                            20205 
P:0185 66F400 rrrrrr  3  76020195         move    #FGetNextCxFat32,r6
P:0187 6E7000 rrrrrr  3  76320196         move    r6,y:FGetNextCxFromFat
                            20207 L101:
P:0189 68F000 rrrrrr  3  76620209         move    y:FMediaBuffer,r0
P:018B 5EF000 rrrrrr  3  76920207         move    y:FstPartitionBootSector+9,a
P:018D 58F000 rrrrrr  3  77220208         move    y:FstPartitionBootSector+8,a0
P:018F 0BF080 rrrrrr  6  77820210         jsr     FLoadFatSector
                            20212 
                            20213 ; 307  |
                            20214 ; 308  |    // Reserve the clusters occupied by Rootdirectory
                            20215 ; 309  |    ReserveCluster(stPartitionBootSector.Rootdirstartcx,bDiskNum);
                            20216 
P:0191 5EF000 rrrrrr  3  78120218         move    y:FstPartitionBootSector+21,a
P:0193 5FF000 rrrrrr  3  78420220         move    y:ss_CheckDisk+11,b
P:0195 58F000 rrrrrr  3  78720219         move    y:FstPartitionBootSector+20,a0
P:0197 0BF080 rrrrrr  6  79320223         jsr     FReserveCluster
                            20226 
                            20227 ; 310  |
                            20228 ; 311  |
                            20229 ; 312  |        //FAT_WarningMessage
                            20230 ; 313  |        if (g_iCheckDiskError)
                            20231 
P:0199 5FF000 rrrrrr  3  79620233         move    y:Fg_iCheckDiskError,b
P:019B 20000B         2  79820234         tst     b
P:019C 0AF0A2 rrrrrr  6  80420235         jne     L115
                            20236 
                            20237 ; 314  |                return;
                            20238 ; 315  |
                            20239 ; 316  |
                            20240 ; 317  |    // Scan Files and sub dirs in root directory
                            20241 ; 318  |    if ( ScanFilesAndSubDirs(&stDirCtrlBlk) != NOERROR )
                            20242 
P:019E 60F400 rrrrrr  3  80720244         move    #ss_CheckDisk+1,r0
P:01A0 0BF080 rrrrrr  6  81320245         jsr     FScanFilesAndSubDirs
P:01A2 2A0000         2  81520246         move    #0,a2
P:01A3 200003         2  81720247         tst     a
P:01A4 0AF0A2 rrrrrr  6  82320248         jne     L104
                            20249 
                            20250 ; 319  |    {
                            20251 ; 320  |        // Bad Root Directory ....
                            20252 ; 321  |        HandleFailReadSector();
                            20253 ; 322  |        return;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 330

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20254 ; 323  |    }
                            20255 ; 324  |
                            20256 ; 325  |    // Checking disk done
                            20257 ; 326  |    // If a corrupted file has been found, we need to do the second pass
                            20258 ; 327  |    // on scandisk. This second pass will find all used clusters for all
                            20259 ; 328  |    // good files and sub directories and then delete all FAT entries
                            20260 ; 329  |    // not used by the good files and subdirectories.
                            20261 ; 330  |    if ( (glb_wFileCorrupted != 0) && (glb_bFailReadSect == FALSE) )
                            20262 
P:01A6 5FF000 rrrrrr  3  82620264         move    y:Fglb_wFileCorrupted,b
P:01A8 2B0000         2  82820265         move    #0,b2
P:01A9 20000B         2  83020266         tst     b
P:01AA 0AF0AA rrrrrr  6  83620267         jeq     L115
P:01AC 5EF000 rrrrrr  3  83920268         move    y:Fglb_bFailReadSect,a
P:01AE 2A0000         2  84120269         move    #0,a2
P:01AF 200003         2  84320270         tst     a
P:01B0 0AF0A2 rrrrrr  6  84920271         jne     L115
                            20272 
                            20273 ; 331  |    {
                            20274 ; 332  |        // Flush last sector if needed
                            20275 ; 333  |        if ( stDirCtrlBlk.Control == DIRTY )
                            20276 
P:01B2 5FF000 rrrrrr  3  85220279         move    y:ss_CheckDisk+6,b
P:01B4 47F400 000001  3  85520278         move    #>1,y1
P:01B6 20007D         2  85720280         cmp     y1,b
P:01B7 0AF0A2 rrrrrr  6  86320281         jne     L102
                            20282 
                            20283 ; 334  |            if ( DriveWriteSector(stDirCtrlBlk.Device,stDirCtrlBlk.CurSect + DataDriveStat
                                  us[bDiskNum].iPbsSectorOffset,stDirCtrlBlk.pwBuffer) != NOERROR )
                            20284 
P:01B9 68F000 rrrrrr  3  86620297         move    y:ss_CheckDisk+10,r0
P:01BB 66F400 rrrrrr  3  86920291         move    #FDataDriveStatus+1,r6
P:01BD 4CF000 rrrrrr  3  87220288         move    y:ss_CheckDisk+11,x0
P:01BF 4EF000 rrrrrr  3  87520286         move    y:ss_CheckDisk+7,y0
P:01C1 4FF000 rrrrrr  3  87820287         move    y:ss_CheckDisk+8,y1
P:01C3 0116D0         2  88020289         mpy     x0,#22,a
P:01C4 211E00         2  88220290         move    a0,n6
P:01C5 000000         2  88420290         nop             ; (inserted)
P:01C6 5EEE00         4  88820293         move    y:(r6+n6),a
P:01C7 218800         2  89020294         move    a1,a0
P:01C8 214C00         2  89220295         move    a2,a1
P:01C9 5FF030 rrrrrr  3  89520296         add     y,a	                y:ss_CheckDisk+1,b
P:01CB 0BF080 rrrrrr  6  90120299         jsr     FDriveWriteSector
P:01CD 200003         2  90320300         tst     a
P:01CE 0AF0A2 rrrrrr  6  90920301         jne     L104
                            20302 
                            20303 ; 335  |            {
                            20304 ; 336  |                HandleFailReadSector();
                            20305 ; 337  |                return;
                            20306 ; 338  |            }
                            20307 ; 339  |
                            20308 ; 340  |
                            20309 ; 341  |        ScanAndUpdateFat(bDiskNum,stPartitionBootSector.TypeFileSystem);
                            20310 
P:01D0 5FF000 rrrrrr  3  91220312 L102:   move    y:FstPartitionBootSector,b
P:01D2 5EF000 rrrrrr  3  91520313         move    y:ss_CheckDisk+11,a
P:01D4 0BF080 rrrrrr  6  92120314         jsr     FScanAndUpdateFat
                            20318 
                            20319 ; 342  |        if ( stFat.Control != CLEAN )
                            20320 
P:01D6 5EF000 rrrrrr  3  92420322         move    y:FstFat+2,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 331

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01D8 200003         2  92620323         tst     a
P:01D9 0AF0AA rrrrrr  6  93220324         jeq     L115
                            20325 
                            20326 ; 343  |        {
                            20327 ; 344  |            if ( WriteFatSector(stFat.FatSectorCached, FatBuffer) != NOERROR )
                            20328 
P:01DB 60F400 rrrrrr  3  93520332         move    #FFatBuffer,r0
P:01DD 2C0000         2  93720331         move    #0,a1
P:01DE 2A0000         2  93920333         move    #0,a2
P:01DF 58F000 rrrrrr  3  94220330         move    y:FstFat+1,a0
P:01E1 0BF080 rrrrrr  6  94820334         jsr     FWriteFatSector
P:01E3 2A0000         2  95020335         move    #0,a2
P:01E4 200003         2  95220336         tst     a
P:01E5 0AF0AA rrrrrr  6  95820337         jeq     L115
                            20338 
                            20339 ; 345  |            {
                            20340 ; 346  |                HandleFailReadSector();
                            20341 
P:01E7 0BF080 rrrrrr  6  96420343 L104:   jsr     FHandleFailReadSector
                            20344 
                            20345 ; 347  |                return;
                            20346 ; 348  |            }
                            20347 ; 349  |        }
                            20348 ; 350  |    }
                            20349 ; 351  |
                            20350 ; 352  |    /* copy primary FAT table to secondary FAT Table*/
                            20351 ; 353  |
                            20352 ; 354  |#ifdef SECOND_FAT_OP
                            20353 ; 355  |    sector_1st_FAT = stFat.FirstPrimaryFatSect + DataDriveStatus[bDiskNum].iPbsSectorOffse
                                  t;;
                            20354 ; 356  |    // sectorno = Starting sector of Secondary FAT
                            20355 ; 357  |    sectorno= stFat.FirstSecondaryFatSect + DataDriveStatus[bDiskNum].iPbsSectorOffset;;
                            20356 ; 358  |
                            20357 ; 359  |    if ( (glb_wFileCorrupted != 0) && (glb_bFailReadSect == FALSE) )
                            20358 ; 360  |    {
                            20359 ; 361  |        // When FAT is corrupted.
                            20360 ; 362  |        count = stPartitionBootSector.wNumberFatSectors;
                            20361 ; 363  |    }
                            20362 ; 364  |    else
                            20363 ; 365  |    {
                            20364 ; 366  |        // When FAT is not corrupted, update only the sectors we used for bit buffering.
                            20365 ; 367  |        count = TotalFatsectors;
                            20366 ; 368  |    }
                            20367 ; 369  |
                            20368 ; 370  |    while ( count > 0 )
                            20369 ; 371  |    {
                            20370 ; 372  |        if ( count > MAX_CACHES )
                            20371 ; 373  |            SectorsToWrite = MAX_CACHES;
                            20372 ; 374  |        else
                            20373 ; 375  |            SectorsToWrite = count;
                            20374 ; 376  |        count -= SectorsToWrite;
                            20375 ; 377  |        // Read a group of sectors from Primary FAT
                            20376 ; 378  |        for ( j = 0; j < SectorsToWrite; j++ )
                            20377 ; 379  |        {
                            20378 ; 380  |            if ( DriveReadSector(bDiskNum, (DWORD)sector_1st_FAT, &CacheMem_chkdsk[j][0]) 
                                  != NOERROR )
                            20379 ; 381  |                return;
                            20380 ; 382  |            sector_1st_FAT++;
                            20381 ; 383  |        }
                            20382 ; 384  |
                            20383 ; 385  |        // Write a group of sectors to Secondary FAT
                            20384 ; 386  |        for ( j=0;j< SectorsToWrite;j++ )
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 332

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20385 ; 387  |        {
                            20386 ; 388  |            if ( DriveWriteSector(bDiskNum,sectorno,&CacheMem_chkdsk[j][0]) != NOERROR )
                            20387 ; 389  |                return;
                            20388 ; 390  |            sectorno++;
                            20389 ; 391  |        }
                            20390 ; 392  |    }
                            20391 ; 393  |#endif
                            20392 ; 394  |
                            20393 ; 395  |}
                            20394 
                            20396 L115:
P:01E9 05F07C rrrrrr  4  96820396         movec   y:ss_CheckDisk,ssh
P:01EB 000000         2  97020396         nop             ; (inserted)
P:01EC 00000C         4  97420399         rts
                            20400 
Y:0000                      20401         org     y,".yovlchkdsk@CheckDisk",overlay:
                            20402 ss_CheckDisk:
Y:0000                      20403         ds      24
   |   RESERVED                   
Y:0017
                            20404 
P:01ED                      20405         org     p,".ptextchkdsk":
                            20407 
                            20408 ; 396  |
                            20409 ; 397  |
                            20410 ; 398  |
                            20411 ; 399  |///////////////////////////////////////////////////////////////////////////////
                            20412 ; 400  |//
                            20413 ; 401  |//>  Name:           ScanAndUpdateFat
                            20414 ; 402  |//
                            20415 ; 403  |//   Type:           Function
                            20416 ; 404  |//
                            20417 ; 405  |//   Description:    Scans FATEntryStatus array and frees up all FAT entries
                            20418 ; 406  |//                      not used.
                            20419 ; 407  |//
                            20420 ; 408  |//   Inputs:        None
                            20421 ; 409  |//
                            20422 ; 410  |//   Outputs:        Result of operation
                            20423 ; 411  |//                      NOERROR -> Successful
                            20424 ; 412  |//                      !NOERROR -> Unsuccessful, at least a media sector
                            20425 ; 413  |//                          could not be read/write. This is a major failure
                            20426 ; 414  |//
                            20427 ; 415  |//   Notes:         None
                            20428 ; 416  |//<
                            20429 ; 417  |///////////////////////////////////////////////////////////////////////////////
                            20430 ; 418  |BOOL _reentrant ScanAndUpdateFat(BYTE bDiskNum,FAT_TYPE TypeFileSystem)
                            20431 ; 419  |{
                            20432 
                            20437 FScanAndUpdateFat:
                            20453 
                            20454 ; 420  |    DWORD wNumberFatCx, wCurrentCluster;
                            20455 
                            20462 
                            20463 ; 421  |
                            20464 ; 422  |
                            20465 ; 423  |    for ( wCurrentCluster = 2 ; wCurrentCluster < stPartitionBootSector.dwTotalclusters ; 
                                  wCurrentCluster++ )
                            20466 
P:01ED 055F7C         2  97620438         movec   ssh,y:(r7)+
P:01EE 3F0300         2  97820441         move    #3,n7
P:01EF 000000         2  98020441         nop             ; (inserted)
P:01F0 204F00         2  98220443         move    (r7)+n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 333

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01F1 77F400 FFFFFD  3  98520457         move    #-3,n7
P:01F3 000000         2  98720457         nop             ; (inserted)
P:01F4 5C6F13         4  99120468         clr     a	                a1,y:(r7+n7)
P:01F5 280200         2  99320469         move    #2,a0
P:01F6 0AF080 rrrrrr  6  99920471         jmp     L123
                            20472 
                            20473 ; 424  |    {
                            20474 ; 425  |        if ( UpdateBit(wCurrentCluster, FATEntryStatus,bDiskNum,stPartitionBootSector.Type
                                  FileSystem,GET_BIT)==NOERROR )
                            20475 
                            20477 L120:
P:01F8 68F000 rrrrrr  3 100220477         move    y:FFATEntryStatus,r0
P:01FA 77F400 FFFFFD  3 100520479         move    #-3,n7
P:01FC 260000         2 100720496         move    #0,y0
P:01FD 4CF000 rrrrrr  3 101020478         move    y:FstPartitionBootSector,x0
P:01FF 5FEF00         4 101420481         move    y:(r7+n7),b
P:0200 77F400 FFFFFE  3 101720485         move    #-2,n7
P:0202 205F00         2 101920486         move    (r7)+
P:0203 5C6F00         4 102320488         move    a1,y:(r7+n7)
P:0204 205700         2 102520489         move    (r7)-
P:0205 586F00         4 102920491         move    a0,y:(r7+n7)
P:0206 0BF080 rrrrrr  6 103520497         jsr     FUpdateBit
P:0208 77F400 FFFFFE  3 103820504         move    #-2,n7
P:020A 2A0000         2 104020502         move    #0,a2
P:020B 205F03         2 104220503         tst     a	                (r7)+
P:020C 5EEF00         4 104620507         move    y:(r7+n7),a
P:020D 205700         2 104820508         move    (r7)-
P:020E 58EF00         4 105220510         move    y:(r7+n7),a0
P:020F 0AF0A2 rrrrrr  6 105820513         jne     L122
                            20518 
                            20519 ; 426  |            if ( FreeCxFat(wCurrentCluster) != NOERROR )
                            20520 
P:0211 0BF080 rrrrrr  6 106420522         jsr     FFreeCxFat
P:0213 77F400 FFFFFE  3 106720527         move    #-2,n7
P:0215 2A0000         2 106920525         move    #0,a2
P:0216 205F03         2 107120526         tst     a	                (r7)+
P:0217 5EEF00         4 107520530         move    y:(r7+n7),a
P:0218 205700         2 107720531         move    (r7)-
P:0219 58EF00         4 108120533         move    y:(r7+n7),a0
P:021A 0AF0AA rrrrrr  6 108720536         jeq     L122
                            20537 
                            20538 ; 427  |                return(!NOERROR);
                            20539 
P:021C 56F400 000001  3 109020541         move    #>1,a
P:021E 0AF080 rrrrrr  6 109620543         jmp     L124
                            20544 
                            20545 ; 428  |    }
                            20546 
                            20548 L122:
P:0220 000008         2 109820551         inc     a
                            20552 L123:
P:0221 2A0000         2 110020555         move    #0,a2
P:0222 5FF000 rrrrrr  3 110320552         move    y:FstPartitionBootSector+25,b
P:0224 2B0000         2 110520554         move    #0,b2
P:0225 59F000 rrrrrr  3 110820553         move    y:FstPartitionBootSector+24,b0
P:0227 200005         2 111020556         cmp     b,a
P:0228 0AF0A9 rrrrrr  6 111620557         jlt     L120
                            20558 
                            20559 ; 429  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 334

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20560 ; 430  |    return(NOERROR);
                            20561 
                            20565 
                            20566 ; 431  |
                            20567 ; 432  |}
                            20568 
P:022A 2E0000         2 111820563         move    #0,a
                            20570 L124:
P:022B 77F400 FFFFFC  3 112120570         move    #-4,n7
P:022D 000000         2 112320570         nop             ; (inserted)
P:022E 05EF7C         4 112720572         movec   y:(r7+n7),ssh
P:022F 204F00         2 112920574         move    (r7)+n7
P:0230 00000C         4 113320576         rts
                            20579 
                            20580 ; 433  |
                            20581 ; 434  |
                            20582 ; 435  |///////////////////////////////////////////////////////////////////////////////
                            20583 ; 436  |//
                            20584 ; 437  |//>  Name:           CheckCrossLinkFile
                            20585 ; 438  |//
                            20586 ; 439  |//   Type:           Function
                            20587 ; 440  |//
                            20588 ; 441  |//   Description:    Checks if a file is cross linked with another previously
                            20589 ; 442  |//                   checked file
                            20590 ; 443  |//
                            20591 ; 444  |//   Inputs:         wStartCluster      : Start Cluster for file to check
                            20592 ; 445  |//
                            20593 ; 446  |//   Outputs:        Result of operation
                            20594 ; 447  |//                      FALSE -> No cross link
                            20595 ; 448  |//                      TRUE -> Cross link
                            20596 ; 449  |//
                            20597 ; 450  |//   Notes:          When calling this function the caller should check
                            20598 ; 451  |//                   if the file cluster chain terminates, otherwise we could
                            20599 ; 452  |//                   be trapped in the loop
                            20600 ; 453  |//<
                            20601 ; 454  |///////////////////////////////////////////////////////////////////////////////
                            20602 ; 455  |LONG _reentrant CheckCrossLinkFile(DWORD wStartCluster,BYTE bLogDevNumber)
                            20603 ; 456  |{
                            20604 
                            20609 FCheckCrossLinkFile:
                            20622 
                            20623 ; 457  |    DWORD wCluster = wStartCluster, wClusterCount = 1,i;
                            20624 
                            20654 
                            20655 ; 458  |
                            20656 ; 459  |    // This handles case of a 0 byte file
                            20657 ; 460  |    if ( wCluster == 0 )
                            20658 
P:0231 055F7C         2 113520610         movec   ssh,y:(r7)+
P:0232 3F0B00         2 113720613         move    #11,n7
P:0233 2A0000         2 113920667         move    #0,a2
P:0234 250000         2 114120640         move    #0,x1
P:0235 44F400 000001  3 114420641         move    #>1,x0
P:0237 204F00         2 114620615         move    (r7)+n7
P:0238 77F400 FFFFF9  3 114920626         move    #-7,n7
P:023A 000000         2 115120626         nop             ; (inserted)
P:023B 5D6F00         4 115520628         move    b1,y:(r7+n7)
P:023C 77F400 FFFFF5  3 115820631         move    #-11,n7
P:023E 205F00         2 116020632         move    (r7)+
P:023F 5C6F03         4 116420668         tst     a	                a1,y:(r7+n7)
P:0240 205700         2 116620635         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 335

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0241 586F00         4 117020637         move    a0,y:(r7+n7)
P:0242 77F400 FFFFFA  3 117320643         move    #-6,n7
P:0244 205F00         2 117520644         move    (r7)+
P:0245 4D6F00         4 117920646         move    x1,y:(r7+n7)
P:0246 205700         2 118120647         move    (r7)-
P:0247 4C6F00         4 118520649         move    x0,y:(r7+n7)
P:0248 77F400 FFFFF7  3 118820660         move    #-9,n7
P:024A 205F00         2 119020661         move    (r7)+
P:024B 5C6F00         4 119420663         move    a1,y:(r7+n7)
P:024C 205700         2 119620664         move    (r7)-
P:024D 586F00         4 120020666         move    a0,y:(r7+n7)
P:024E 0AF0A2 rrrrrr  6 120620671         jne     L138
                            20672 
                            20673 ; 461  |        return(FALSE);
                            20674 
P:0250 2E0000         2 120820676         move    #0,a
P:0251 0AF080 rrrrrr  6 121420677         jmp     L149
                            20678 
                            20679 ; 462  |
                            20680 ; 463  |    do
                            20681 
                            20683 L138:
                            20684 
                            20685 ; 464  |    {
                            20686 ; 465  |        if ( UpdateBit(wCluster, FATEntryStatus,bLogDevNumber,stPartitionBootSector.TypeFi
                                  leSystem,SET_BIT) )
                            20687 
                            20689 L139:
P:0253 68F000 rrrrrr  3 121720689         move    y:FFATEntryStatus,r0
P:0255 77F400 FFFFF9  3 122020691         move    #-7,n7
P:0257 4CF000 rrrrrr  3 122320690         move    y:FstPartitionBootSector,x0
P:0259 46F400 000001  3 122620703         move    #>1,y0
P:025B 5FEF00         4 123020693         move    y:(r7+n7),b
P:025C 77F400 FFFFF5  3 123320696         move    #-11,n7
P:025E 205F00         2 123520697         move    (r7)+
P:025F 5EEF00         4 123920699         move    y:(r7+n7),a
P:0260 205700         2 124120700         move    (r7)-
P:0261 58EF00         4 124520702         move    y:(r7+n7),a0
P:0262 0BF080 rrrrrr  6 125120704         jsr     FUpdateBit
P:0264 2A0000         2 125320707         move    #0,a2
P:0265 200003         2 125520708         tst     a
P:0266 0AF0AA rrrrrr  6 126120709         jeq     L142
                            20710 
                            20711 ; 466  |        {
                            20712 ; 467  |            wCluster = wStartCluster;
                            20713 
                            20722 
                            20723 ; 468  |            for ( i = 0; i < (wClusterCount - 1); i++ )
                            20724 
P:0268 77F400 FFFFF7  3 126420715         move    #-9,n7
P:026A 205F1B         2 126620726         clr     b	                (r7)+
P:026B 4FEF00         4 127020718         move    y:(r7+n7),y1
P:026C 205700         2 127220719         move    (r7)-
P:026D 4EEF00         4 127620721         move    y:(r7+n7),y0
P:026E 77F400 FFFFFA  3 127920728         move    #-6,n7
P:0270 205F00         2 128120729         move    (r7)+
P:0271 5EEF00         4 128520731         move    y:(r7+n7),a
P:0272 205700         2 128720732         move    (r7)-
P:0273 58EF00         4 129120734         move    y:(r7+n7),a0
P:0274 77F400 FFFFFE  3 129420738         move    #-2,n7
P:0276 00000A         2 129620735         dec     a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 336

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0277 205F00         2 129820739         move    (r7)+
P:0278 5C6F00         4 130220741         move    a1,y:(r7+n7)
P:0279 205700         2 130420742         move    (r7)-
P:027A 586F00         4 130820744         move    a0,y:(r7+n7)
P:027B 0AF080 rrrrrr  6 131420745         jmp     L141
                            20746 
                            20747 ; 469  |            {
                            20748 ; 470  |                UpdateBit(wCluster, FATEntryStatus,bLogDevNumber,stPartitionBootSector.Typ
                                  eFileSystem,FREE_BIT);
                            20749 
                            20751 L140:
P:027D 68F000 rrrrrr  3 131720754         move    y:FFATEntryStatus,r0
P:027F 77F471 FFFFF9  3 132020768         tfr     y1,a	                #-7,n7
P:0281 4CF000 rrrrrr  3 132320755         move    y:FstPartitionBootSector,x0
P:0283 20C800         2 132520769         move    y0,a0
P:0284 5FEF00         4 132920758         move    y:(r7+n7),b
P:0285 77F400 FFFFF5  3 133220761         move    #-11,n7
P:0287 205F00         2 133420762         move    (r7)+
P:0288 4F6F00         4 133820764         move    y1,y:(r7+n7)
P:0289 205700         2 134020765         move    (r7)-
P:028A 4E6F00         4 134420767         move    y0,y:(r7+n7)
P:028B 46F400 000002  3 134720770         move    #>2,y0
P:028D 0BF080 rrrrrr  6 135320771         jsr     FUpdateBit
                            20775 
                            20776 ; 471  |                wCluster = GetNextCxFromFat(wCluster);
                            20777 
P:028F 6EF000 rrrrrr  3 135620779         move    y:FGetNextCxFromFat,r6
P:0291 77F400 FFFFF5  3 135920780         move    #-11,n7
P:0293 205F00         2 136120781         move    (r7)+
P:0294 5EEF00         4 136520783         move    y:(r7+n7),a
P:0295 205700         2 136720784         move    (r7)-
P:0296 58EF00         4 137120786         move    y:(r7+n7),a0
P:0297 0BE680         4 137520787         jsr     (r6)
P:0298 77F400 FFFFFC  3 137820791         move    #-4,n7
P:029A 210600         2 138020788         move    a0,y0
P:029B 218700         2 138220789         move    a1,y1
P:029C 205F00         2 138420792         move    (r7)+
P:029D 5FEF00         4 138820794         move    y:(r7+n7),b
P:029E 205700         2 139020795         move    (r7)-
P:029F 59EF00         4 139420797         move    y:(r7+n7),b0
P:02A0 000009         2 139620798         inc     b
                            20801 L141:
P:02A1 77F400 FFFFFC  3 139920801         move    #-4,n7
P:02A3 2B0000         2 140120816         move    #0,b2
P:02A4 205F00         2 140320802         move    (r7)+
P:02A5 5D6F00         4 140720804         move    b1,y:(r7+n7)
P:02A6 205700         2 140920805         move    (r7)-
P:02A7 596F00         4 141320807         move    b0,y:(r7+n7)
P:02A8 77F400 FFFFFE  3 141620808         move    #-2,n7
P:02AA 205F00         2 141820809         move    (r7)+
P:02AB 5EEF00         4 142220811         move    y:(r7+n7),a
P:02AC 2A0000         2 142420815         move    #0,a2
P:02AD 205700         2 142620812         move    (r7)-
P:02AE 58EF00         4 143020814         move    y:(r7+n7),a0
P:02AF 20000D         2 143220817         cmp     a,b
P:02B0 0AF0A9 rrrrrr  6 143820820         jlt     L140
                            20821 
                            20822 ; 472  |            }
                            20823 ; 473  |            return(-1);
                            20824 
P:02B2 0AF080 rrrrrr  6 144420826         jmp     L145
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 337

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20827 
                            20828 ; 474  |        }
                            20829 ; 475  |
                            20830 ; 476  |        wCluster = GetNextCxFromFat(wCluster);
                            20831 
                            20833 L142:
P:02B4 6EF000 rrrrrr  3 144720835         move    y:FGetNextCxFromFat,r6
P:02B6 77F400 FFFFF5  3 145020836         move    #-11,n7
P:02B8 205F00         2 145220837         move    (r7)+
P:02B9 5EEF00         4 145620839         move    y:(r7+n7),a
P:02BA 205700         2 145820840         move    (r7)-
P:02BB 58EF00         4 146220842         move    y:(r7+n7),a0
P:02BC 0BE680         4 146620843         jsr     (r6)
                            20845 
                            20846 ; 477  |
                            20847 ; 478  |        if ( wCluster <= 1 )
                            20848 
P:02BD 200009         2 146820844         tfr     a,b
P:02BE 2B0013         2 147020850         clr     a	                #0,b2
P:02BF 000008         2 147220851         inc     a
P:02C0 20000D         2 147420853         cmp     a,b
P:02C1 0AF0A7 rrrrrr  6 148020854         jgt     L146
                            20855 
                            20856 ; 479  |        {
                            20857 ; 480  |            wCluster = wStartCluster;
                            20858 
                            20867 
                            20868 ; 481  |            for ( i = 0; i < wClusterCount ; i++ )
                            20869 
P:02C3 77F400 FFFFF7  3 148320860         move    #-9,n7
P:02C5 205F1B         2 148520871         clr     b	                (r7)+
P:02C6 4FEF00         4 148920863         move    y:(r7+n7),y1
P:02C7 205700         2 149120864         move    (r7)-
P:02C8 4EEF00         4 149520866         move    y:(r7+n7),y0
P:02C9 0AF080 rrrrrr  6 150120874         jmp     L144
                            20875 
                            20876 ; 482  |            {
                            20877 ; 483  |                UpdateBit(wCluster, FATEntryStatus,bLogDevNumber,stPartitionBootSector.Typ
                                  eFileSystem,FREE_BIT);
                            20878 
                            20880 L143:
P:02CB 68F000 rrrrrr  3 150420883         move    y:FFATEntryStatus,r0
P:02CD 77F471 FFFFF9  3 150720897         tfr     y1,a	                #-7,n7
P:02CF 4CF000 rrrrrr  3 151020884         move    y:FstPartitionBootSector,x0
P:02D1 20C800         2 151220898         move    y0,a0
P:02D2 5FEF00         4 151620887         move    y:(r7+n7),b
P:02D3 77F400 FFFFF5  3 151920890         move    #-11,n7
P:02D5 205F00         2 152120891         move    (r7)+
P:02D6 4F6F00         4 152520893         move    y1,y:(r7+n7)
P:02D7 205700         2 152720894         move    (r7)-
P:02D8 4E6F00         4 153120896         move    y0,y:(r7+n7)
P:02D9 46F400 000002  3 153420899         move    #>2,y0
P:02DB 0BF080 rrrrrr  6 154020900         jsr     FUpdateBit
                            20903 
                            20904 ; 484  |                wCluster = GetNextCxFromFat(wCluster);
                            20905 
P:02DD 6EF000 rrrrrr  3 154320907         move    y:FGetNextCxFromFat,r6
P:02DF 77F400 FFFFF5  3 154620908         move    #-11,n7
P:02E1 205F00         2 154820909         move    (r7)+
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 338

M:ADDR CODE           CYCLES LINE SOURCELINE
P:02E2 5EEF00         4 155220911         move    y:(r7+n7),a
P:02E3 205700         2 155420912         move    (r7)-
P:02E4 58EF00         4 155820914         move    y:(r7+n7),a0
P:02E5 0BE680         4 156220915         jsr     (r6)
P:02E6 77F400 FFFFFC  3 156520919         move    #-4,n7
P:02E8 210600         2 156720916         move    a0,y0
P:02E9 218700         2 156920917         move    a1,y1
P:02EA 205F00         2 157120920         move    (r7)+
P:02EB 5FEF00         4 157520922         move    y:(r7+n7),b
P:02EC 205700         2 157720923         move    (r7)-
P:02ED 59EF00         4 158120925         move    y:(r7+n7),b0
P:02EE 000009         2 158320926         inc     b
                            20929 L144:
P:02EF 77F400 FFFFFA  3 158620929         move    #-6,n7
P:02F1 2B0000         2 158820944         move    #0,b2
P:02F2 205F00         2 159020930         move    (r7)+
P:02F3 5EEF00         4 159420932         move    y:(r7+n7),a
P:02F4 2A0000         2 159620943         move    #0,a2
P:02F5 205700         2 159820933         move    (r7)-
P:02F6 58EF00         4 160220935         move    y:(r7+n7),a0
P:02F7 77F400 FFFFFC  3 160520936         move    #-4,n7
P:02F9 205F00         2 160720937         move    (r7)+
P:02FA 5D6F0D         4 161120945         cmp     a,b	                b1,y:(r7+n7)
P:02FB 205700         2 161320940         move    (r7)-
P:02FC 596F00         4 161720942         move    b0,y:(r7+n7)
P:02FD 0AF0A9 rrrrrr  6 162320948         jlt     L143
                            20949 
                            20950 ; 485  |            }
                            20951 ; 486  |            return(-1);
                            20952 
P:02FF 2E0000         2 162520954 L145:   move    #0,a
P:0300 00000A         2 162720955         dec     a
P:0301 0AF080 rrrrrr  6 163320956         jmp     L149
                            20957 
                            20958 ; 487  |        }
                            20959 ; 488  |
                            20960 ; 489  |        if ( IsLastCx(wCluster) )
                            20961 
                            20963 L146:
P:0303 77F400 FFFFF5  3 163620963         move    #-11,n7
P:0305 205F01         2 163820970         tfr     b,a	                (r7)+
P:0306 5D6F00         4 164220966         move    b1,y:(r7+n7)
P:0307 205700         2 164420967         move    (r7)-
P:0308 596F00         4 164820969         move    b0,y:(r7+n7)
P:0309 0BF080 rrrrrr  6 165420971         jsr     FIsLastCx
P:030B 2A0000         2 165620972         move    #0,a2
P:030C 200003         2 165820973         tst     a
P:030D 0AF0A2 rrrrrr  6 166420974         jne     L147
                            20975 
                            20976 ; 490  |            return(wClusterCount);
                            20977 ; 491  |
                            20978 ; 492  |        wClusterCount++;
                            20979 
                            20991 
                            20992 ; 493  |    }while ( wClusterCount < 0x20000 );     // We should get out of this loop
                            20993 
P:030F 77F400 FFFFFA  3 166720981         move    #-6,n7
P:0311 205F00         2 166920982         move    (r7)+
P:0312 5FEF00         4 167320984         move    y:(r7+n7),b
P:0313 205700         2 167520985         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 339

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0314 59EF00         4 167920987         move    y:(r7+n7),b0
P:0315 000009         2 168120988         inc     b
P:0316 205F13         2 168321001         clr     a	                (r7)+
P:0317 2B0000         2 168521003         move    #0,b2
P:0318 50F400 020000  3 168821002         move    #$20000,a0
P:031A 5D6F00         4 169220997         move    b1,y:(r7+n7)
P:031B 205700         2 169420998         move    (r7)-
P:031C 596F0D         4 169821004         cmp     a,b	                b0,y:(r7+n7)
P:031D 0AF0A9 rrrrrr  6 170421007         jlt     L139
                            21008 
                            21009 ; 494  |
                            21010 ; 495  |    return(wClusterCount);
                            21011 
                            21013 L147:
P:031F 77F400 FFFFFA  3 170721013         move    #-6,n7
P:0321 205F00         2 170921014         move    (r7)+
P:0322 5EEF00         4 171321016         move    y:(r7+n7),a
P:0323 2A0000         2 171521020         move    #0,a2
P:0324 205700         2 171721017         move    (r7)-
P:0325 58EF00         4 172121019         move    y:(r7+n7),a0
P:0326 0ACC17 rrrrrr  6 172721021         jclr    #23,a1,L150
                            21023 
                            21024 ; 496  |}
                            21025 
P:0328 044AA0         2 172921022         movec   m0,a2
                            21027 L150:
                            21030 L149:
P:0329 77F400 FFFFF4  3 173221030         move    #-12,n7
P:032B 000000         2 173421030         nop             ; (inserted)
P:032C 05EF7C         4 173821032         movec   y:(r7+n7),ssh
P:032D 204F00         2 174021034         move    (r7)+n7
P:032E 00000C         4 174421036         rts
                            21042 
                            21043 ; 497  |
                            21044 ; 498  |
                            21045 ; 499  |
                            21046 ; 500  |
                            21047 ; 501  |
                            21048 ; 502  |
                            21049 ; 503  |///////////////////////////////////////////////////////////////////////////////
                            21050 ; 504  |//
                            21051 ; 505  |//>  Name:           ScanDirectory
                            21052 ; 506  |//
                            21053 ; 507  |//   Type:           Function
                            21054 ; 508  |//
                            21055 ; 509  |//   Description:    Scans a directory
                            21056 ; 510  |//
                            21057 ; 511  |//   Inputs:        *pstDirCtrlBlk      : Pointer to Directory Control Block
                            21058 ; 512  |//
                            21059 ; 513  |//   Outputs:        Result of operation
                            21060 ; 514  |//                      NOERROR -> Successful
                            21061 ; 515  |//                      !NOERROR -> The directory is in default
                            21062 ; 516  |//
                            21063 ; 517  |//   Notes:
                            21064 ; 518  |//<
                            21065 ; 519  |///////////////////////////////////////////////////////////////////////////////
                            21066 ; 520  |BOOL _reentrant ScanDirectory(DIR_CTRL_BLK *pstDirCtrlBlk)
                            21067 ; 521  |{
                            21068 
                            21075 FScanDirectory:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 340

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21084 
                            21085 ; 522  |
                            21086 ; 523  |    // Check if sub directory legitime. A legitime sub dir has:
                            21087 ; 524  |    //  1st record = parent directory
                            21088 ; 525  |    //  2nd record = this directory
                            21089 ; 526  |
                            21090 ; 527  |    // Read 1st sector for the sub directory
                            21091 ; 528  |    ReadDirSector(pstDirCtrlBlk->StartSectCurDir, pstDirCtrlBlk);
                            21092 
P:032F 055F7C         2 174621076         movec   ssh,y:(r7)+
P:0330 77F400 FFFFFE  3 174921099         move    #-2,n7
P:0332 045816         4 175321094         lua     (r0)+,r6
P:0333 205F00         2 175521079         move    (r7)+
P:0334 205E00         2 175721096         move    (r6)+
P:0335 205F00         2 175921080         move    (r7)+
P:0336 5ED600         2 176121097         move    y:(r6)-,a
P:0337 58E600         2 176321098         move    y:(r6),a0
P:0338 686F00         4 176721101         move    r0,y:(r7+n7)
P:0339 0BF080 rrrrrr  6 177321106         jsr     FReadDirSector
                            21109 
                            21110 ; 529  |
                            21111 ; 530  |    // Check if 1st record is this directory
                            21112 ; 531  |    if ( FSGetByte((void *)pstDirCtrlBlk->pwBuffer,0,X_MEMORY ) != 0x2e )
                            21113 
P:033B 3E0913         2 177521125         clr     a	                #9,n6
P:033C 77F41B FFFFFE  3 177821126         clr     b	                #-2,n7
P:033E 000000         2 178021126         nop             ; (inserted)
P:033F 6EEF00         4 178421118         move    y:(r7+n7),r6
P:0340 045FA0         2 178621121         movec   m0,n7
P:0341 204E00         2 178821120         move    (r6)+n6
P:0342 6E6F00         4 179221123         move    r6,y:(r7+n7)
P:0343 68E600         2 179421124         move    y:(r6),r0
P:0344 0BF080 rrrrrr  6 180021127         jsr     FFSGetByte
P:0346 57F400 00002E  3 180321128         move    #>46,b
P:0348 200005         2 180521129         cmp     b,a
P:0349 0AF0A2 rrrrrr  6 181121130         jne     L175
                            21131 
                            21132 ; 532  |        return(!NOERROR);
                            21133 ; 533  |
                            21134 ; 534  |    // Check if this directory has directory signature
                            21135 ; 535  |    if ( !(FSGetByte((void *)pstDirCtrlBlk->pwBuffer,DIR_REC_ATT_POS,X_MEMORY) & 0x10) )
                            21136 
P:034B 045FA0         2 181321138         movec   m0,n7
P:034C 56F41B 00000B  3 181621143         clr     b	                #>11,a
P:034E 6EEF00         4 182021140         move    y:(r7+n7),r6
P:034F 000000         2 182221140         nop             ; (inserted)
P:0350 68E600         2 182421142         move    y:(r6),r0
P:0351 0BF080 rrrrrr  6 183021145         jsr     FFSGetByte
P:0353 46F400 000010  3 183321146         move    #>16,y0
P:0355 200056         2 183521147         and     y0,a
P:0356 0AF0AA rrrrrr  6 184121148         jeq     L175
                            21149 
                            21150 ; 536  |        return(!NOERROR);
                            21151 ; 537  |
                            21152 ; 538  |    // Check if this directory size is 0
                            21153 ; 539  |    if ( FSGetDWord((void *)pstDirCtrlBlk->pwBuffer,DIR_REC_SIZE_POS,X_MEMORY) != 0x0 )
                            21154 
P:0358 045FA0         2 184321156         movec   m0,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 341

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0359 56F41B 00001C  3 184621161         clr     b	                #>28,a
P:035B 6EEF00         4 185021158         move    y:(r7+n7),r6
P:035C 000000         2 185221158         nop             ; (inserted)
P:035D 68E600         2 185421160         move    y:(r6),r0
P:035E 0BF080 rrrrrr  6 186021163         jsr     FFSGetDWord
P:0360 200003         2 186221164         tst     a
P:0361 0AF0A2 rrrrrr  6 186821165         jne     L175
                            21166 
                            21167 ; 540  |        return(!NOERROR);
                            21168 ; 541  |
                            21169 ; 542  |    // Check to make sure that start cluster is non-zero
                            21170 ; 543  |
                            21171 ; 544  |    if ( (FSGetDWord((void *)pstDirCtrlBlk->pwBuffer,DIR_REC_FIRST_CX_HIGH_POS,X_MEMORY) =
                                  = 0x0) &&
                            21172 ; 545  |            (FSGetDWord((void *)pstDirCtrlBlk->pwBuffer,DIR_REC_FIRST_CX_POS,X_MEMORY) == 
                                  0x0) )
                            21173 
P:0363 045FA0         2 187021175         movec   m0,n7
P:0364 56F41B 000014  3 187321180         clr     b	                #>20,a
P:0366 6EEF00         4 187721177         move    y:(r7+n7),r6
P:0367 000000         2 187921177         nop             ; (inserted)
P:0368 68E600         2 188121179         move    y:(r6),r0
P:0369 0BF080 rrrrrr  6 188721182         jsr     FFSGetDWord
P:036B 200003         2 188921183         tst     a
P:036C 0AF0A2 rrrrrr  6 189521184         jne     L168
P:036E 045FA0         2 189721185         movec   m0,n7
P:036F 56F41B 00001A  3 190021190         clr     b	                #>26,a
P:0371 6EEF00         4 190421187         move    y:(r7+n7),r6
P:0372 000000         2 190621187         nop             ; (inserted)
P:0373 68E600         2 190821189         move    y:(r6),r0
P:0374 0BF080 rrrrrr  6 191421192         jsr     FFSGetDWord
P:0376 200003         2 191621193         tst     a
P:0377 0AF0AA rrrrrr  6 192221194         jeq     L175
                            21195 
                            21196 ; 546  |        return(!NOERROR);
                            21197 ; 547  |   
                            21198 ; 548  |    // Check if 2nd record is parent directory
                            21199 ; 549  |    if ( FSGetWord((void *)pstDirCtrlBlk->pwBuffer,0 + BYTES_PER_DIR_RECORD, X_MEMORY) != 
                                  0x2e2e )
                            21200 
P:0379 045FA0         2 192421202 L168:   movec   m0,n7
P:037A 56F41B 000020  3 192721207         clr     b	                #>$20,a
P:037C 6EEF00         4 193121204         move    y:(r7+n7),r6
P:037D 000000         2 193321204         nop             ; (inserted)
P:037E 68E600         2 193521206         move    y:(r6),r0
P:037F 0BF080 rrrrrr  6 194121209         jsr     FFSGetWord
P:0381 46F400 002E2E  3 194421210         move    #11822,y0
P:0383 200055         2 194621211         cmp     y0,a
P:0384 0AF0A2 rrrrrr  6 195221212         jne     L175
                            21213 
                            21214 ; 550  |        return(!NOERROR);
                            21215 ; 551  |
                            21216 ; 552  |    // Check if parent directory has directory signature
                            21217 ; 553  |    if ( !(FSGetByte((void *)pstDirCtrlBlk->pwBuffer,DIR_REC_ATT_POS + BYTES_PER_DIR_RECOR
                                  D,X_MEMORY) & 0x10) )
                            21218 
P:0386 045FA0         2 195421220         movec   m0,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 342

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0387 56F41B 00002B  3 195721225         clr     b	                #>43,a
P:0389 6EEF00         4 196121222         move    y:(r7+n7),r6
P:038A 000000         2 196321222         nop             ; (inserted)
P:038B 68E600         2 196521224         move    y:(r6),r0
P:038C 0BF080 rrrrrr  6 197121227         jsr     FFSGetByte
P:038E 45F400 000010  3 197421228         move    #>16,x1
P:0390 200066         2 197621229         and     x1,a
P:0391 0AF0AA rrrrrr  6 198221230         jeq     L175
                            21231 
                            21232 ; 554  |        return(!NOERROR);
                            21233 ; 555  |
                            21234 ; 556  |    // Check if parent directory size is 0
                            21235 ; 557  |    if ( FSGetDWord((void *)pstDirCtrlBlk->pwBuffer,DIR_REC_SIZE_POS + BYTES_PER_DIR_RECOR
                                  D,X_MEMORY ) != 0x0 )
                            21236 
P:0393 045FA0         2 198421238         movec   m0,n7
P:0394 56F41B 00003C  3 198721243         clr     b	                #>$3C,a
P:0396 6EEF00         4 199121240         move    y:(r7+n7),r6
P:0397 000000         2 199321240         nop             ; (inserted)
P:0398 68E600         2 199521242         move    y:(r6),r0
P:0399 0BF080 rrrrrr  6 200121245         jsr     FFSGetDWord
P:039B 200003         2 200321246         tst     a
P:039C 0AF0A2 rrrrrr  6 200921247         jne     L175
                            21248 
                            21249 ; 558  |        return(!NOERROR);
                            21250 ; 559  |
                            21251 ; 560  |
                            21252 ; 561  |    // Check for cross linked files
                            21253 ; 562  |    if ( CheckCrossLinkFile(pstDirCtrlBlk->wStartCxCurDir,pstDirCtrlBlk->Device) < 0 )
                            21254 
P:039E 3E0300         2 201121256         move    #3,n6
P:039F 77F400 FFFFFE  3 201421257         move    #-2,n7
P:03A1 000000         2 201621257         nop             ; (inserted)
P:03A2 6EEF00         4 202021259         move    y:(r7+n7),r6
P:03A3 000000         2 202221259         nop             ; (inserted)
P:03A4 044E15         4 202621261         lua     (r6)+n6,r5
P:03A5 5FE600         2 202821268         move    y:(r6),b
P:03A6 205D00         2 203021265         move    (r5)+
P:03A7 5ED500         2 203221266         move    y:(r5)-,a
P:03A8 58E500         2 203421267         move    y:(r5),a0
P:03A9 0BF080 rrrrrr  6 204021269         jsr     FCheckCrossLinkFile
P:03AB 200003         2 204221271         tst     a
P:03AC 0AF0A1 rrrrrr  6 204821272         jge     L176
                            21273 
                            21274 ; 563  |    {
                            21275 ; 564  |        return(!NOERROR);
                            21276 
P:03AE 56F400 000001  3 205121278 L175:   move    #>1,a
P:03B0 0AF080 rrrrrr  6 205721279         jmp     L177
                            21280 
                            21281 ; 565  |    }
                            21282 ; 566  |
                            21283 ; 567  |
                            21284 ; 568  |    return(NOERROR);
                            21285 
                            21287 L176:
                            21288 
                            21289 ; 569  |}
                            21290 
P:03B2 2E0000         2 205921287         move    #0,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 343

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21292 L177:
P:03B3 205700         2 206121292         move    (r7)-
P:03B4 205700         2 206321293         move    (r7)-
P:03B5 05FF7C         4 206721295         movec   y:-(r7),ssh
P:03B6 000000         2 206921295         nop             ; (inserted)
P:03B7 00000C         4 207321299         rts
                            21301 
                            21302 ; 570  |
                            21303 ; 571  |
                            21304 ; 572  |
                            21305 ; 573  |
                            21306 ; 574  |///////////////////////////////////////////////////////////////////////////////
                            21307 ; 575  |//
                            21308 ; 576  |//>  Name:           ReserveCluster
                            21309 ; 577  |//
                            21310 ; 578  |//   Type:           Function
                            21311 ; 579  |//
                            21312 ; 580  |//   Description:    Mark clusters for the current file used in the FATEntryStatus
                            21313 ; 581  |//                   array
                            21314 ; 582  |//
                            21315 ; 583  |//   Inputs:         wStartCluster      : Start Cluster for file to check
                            21316 ; 584  |//
                            21317 ; 585  |//   Outputs:        None
                            21318 ; 586  |//
                            21319 ; 587  |//   Notes:          When calling this function the caller should check
                            21320 ; 588  |//                   if the file cluster chain terminates, otherwise we could
                            21321 ; 589  |//                   be trapped in the loop
                            21322 ; 590  |//<
                            21323 ; 591  |///////////////////////////////////////////////////////////////////////////////
                            21324 ; 592  |
                            21325 ; 593  |void _reentrant ReserveCluster(DWORD  wStartCluster,BYTE bLogDevNumber)
                            21326 ; 594  |{
                            21327 
                            21332 FReserveCluster:
                            21346 
                            21347 ; 595  |        
                            21348 ; 596  |        //FAT_WarningMessage
                            21349 ; 597  |        extern INT      g_iCheckDiskError;
                            21350 ; 598  |        WORD            wClusterCount = 0;
                            21351 
                            21362 
                            21363 ; 599  |
                            21364 ; 600  |    DWORD wCluster = wStartCluster;
                            21365 
                            21370 
                            21371 ; 601  |
                            21372 ; 602  |    // This handles case of a 0 byte file
                            21373 ; 603  |    if ( wCluster == 0 )
                            21374 
P:03B8 055F7C         2 207521333         movec   ssh,y:(r7)+
P:03B9 3F0400         2 207721336         move    #4,n7
P:03BA 2A0000         2 207921376         move    #0,a2
P:03BB 240000         2 208121358         move    #0,x0
P:03BC 210600         2 208321367         move    a0,y0
P:03BD 218700         2 208521368         move    a1,y1
P:03BE 204F03         2 208721377         tst     a	                (r7)+n7
P:03BF 77F400 FFFFFC  3 209021353         move    #-4,n7
P:03C1 000000         2 209221353         nop             ; (inserted)
P:03C2 5D6F00         4 209621355         move    b1,y:(r7+n7)
P:03C3 0AF0AA rrrrrr  6 210221378         jeq     L180
                            21379 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 344

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21380 ; 604  |        return;
                            21381 ; 605  |
                            21382 ; 606  |    do
                            21383 
P:03C5 45F400 000001  3 210521385         move    #>1,x1
                            21386 L178:
                            21391 
                            21392 ; 607  |    {
                            21393 ; 608  |        UpdateBit(wCluster, FATEntryStatus,bLogDevNumber,stPartitionBootSector.TypeFileSys
                                  tem,SET_BIT);
                            21394 
P:03C7 77F471 FFFFFD  3 210821410         tfr     y1,a	                #-3,n7
P:03C9 20C800         2 211021411         move    y0,a0
P:03CA 4C6F00         4 211421388         move    x0,y:(r7+n7)
P:03CB 77F400 FFFFFC  3 211721398         move    #-4,n7
P:03CD 68F000 rrrrrr  3 212021396         move    y:FFATEntryStatus,r0
P:03CF 4CF000 rrrrrr  3 212321397         move    y:FstPartitionBootSector,x0
P:03D1 5FEF00         4 212721400         move    y:(r7+n7),b
P:03D2 77F400 FFFFFE  3 213021403         move    #-2,n7
P:03D4 205F00         2 213221404         move    (r7)+
P:03D5 4F6F00         4 213621406         move    y1,y:(r7+n7)
P:03D6 205700         2 213821407         move    (r7)-
P:03D7 4E6F00         4 214221409         move    y0,y:(r7+n7)
P:03D8 46F400 000001  3 214521417         move    #>1,y0
P:03DA 0BF080 rrrrrr  6 215121418         jsr     FUpdateBit
                            21423 
                            21424 ; 609  |        wCluster = GetNextCxFromFat(wCluster);
                            21425 
P:03DC 6EF000 rrrrrr  3 215421427         move    y:FGetNextCxFromFat,r6
P:03DE 77F400 FFFFFE  3 215721428         move    #-2,n7
P:03E0 205F00         2 215921429         move    (r7)+
P:03E1 5EEF00         4 216321431         move    y:(r7+n7),a
P:03E2 205700         2 216521432         move    (r7)-
P:03E3 58EF00         4 216921434         move    y:(r7+n7),a0
P:03E4 0BE680         4 217321435         jsr     (r6)
                            21438 
                            21439 ; 610  |        if ( IsLastCx(wCluster) )
                            21440 
P:03E5 77F400 FFFFFE  3 217621442         move    #-2,n7
P:03E7 205F00         2 217821443         move    (r7)+
P:03E8 5C6F00         4 218221445         move    a1,y:(r7+n7)
P:03E9 205700         2 218421446         move    (r7)-
P:03EA 586F00         4 218821448         move    a0,y:(r7+n7)
P:03EB 0BF080 rrrrrr  6 219421453         jsr     FIsLastCx
P:03ED 77F400 FFFFFD  3 219721458         move    #-3,n7
P:03EF 2A0000         2 219921456         move    #0,a2
P:03F0 45F400 000001  3 220221463         move    #>1,x1
P:03F2 5FEF03         4 220621457         tst     a	                y:(r7+n7),b
P:03F3 77F400 FFFFFE  3 220921464         move    #-2,n7
P:03F5 205F00         2 221121465         move    (r7)+
P:03F6 4FEF00         4 221521467         move    y:(r7+n7),y1
P:03F7 205700         2 221721468         move    (r7)-
P:03F8 4EEF00         4 222121470         move    y:(r7+n7),y0
P:03F9 0AF0A2 rrrrrr  6 222721473         jne     L180
                            21474 
                            21475 ; 611  |        {
                            21476 ; 612  |            return;
                            21477 ; 613  |        }
                            21478 ; 614  |
                            21479 ; 615  |                                //FAT_WarningMessage
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 345

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21480 ; 616  |                                wClusterCount++;
                            21481 
                            21487 
                            21488 ; 617  |                                if (wClusterCount >= stPartitionBootSector.dwTotalclusters
                                  )
                            21489 
P:03FB 2C0068         2 222921483         add     x1,b	                #0,a1
P:03FC 21A800         2 223121484         move    b1,a0
P:03FD 5FF000 rrrrrr  3 223421495         move    y:FstPartitionBootSector+25,b
P:03FF 2B0000         2 223621497         move    #0,b2
P:0400 59F000 rrrrrr  3 223921496         move    y:FstPartitionBootSector+24,b0
P:0402 210405         2 224121498         cmp     b,a	                a0,x0
P:0403 0AF0A9 rrrrrr  6 224721499         jlt     L178
                            21500 
                            21501 ; 618  |                                {
                            21502 ; 619  |                                        g_iCheckDiskError = 1;
                            21503 
                            21506 
                            21507 ; 620  |            return;
                            21508 ; 621  |                                }
                            21509 ; 622  |
                            21510 ; 623  |    }while ( 1 );      // We should get out of this loop
                            21511 ; 624  |}
                            21512 
P:0405 4D7000 rrrrrr  3 225021505         move    x1,y:Fg_iCheckDiskError
                            21514 L180:
P:0407 77F400 FFFFFB  3 225321514         move    #-5,n7
P:0409 000000         2 225521514         nop             ; (inserted)
P:040A 05EF7C         4 225921516         movec   y:(r7+n7),ssh
P:040B 204F00         2 226121518         move    (r7)+n7
P:040C 00000C         4 226521520         rts
                            21525 
                            21526 ; 625  |
                            21527 ; 626  |
                            21528 ; 627  |///////////////////////////////////////////////////////////////////////////////
                            21529 ; 628  |//
                            21530 ; 629  |//>  Name:           InitPartitionBootSectorStruct
                            21531 ; 630  |//
                            21532 ; 631  |//   Type:           Function
                            21533 ; 632  |//
                            21534 ; 633  |//   Description:    Initializes the global structure type PARTITION_BOOT_SECTOR
                            21535 ; 634  |//                   for the device passed in.
                            21536 ; 635  |//
                            21537 ; 636  |//
                            21538 ; 637  |//   Inputs:         bLogDevNumber      : Is the Logical Device Number
                            21539 ; 638  |//
                            21540 ; 639  |//   Outputs:        Result of operation
                            21541 ; 640  |//                      NOERROR -> Successfull
                            21542 ; 641  |//                      !NOERROR -> Unsuccessfull
                            21543 ; 642  |//
                            21544 ; 643  |//   Notes:          none
                            21545 ; 644  |//<
                            21546 ; 645  |///////////////////////////////////////////////////////////////////////////////
                            21547 ; 646  |BOOL _reentrant InitPartitionBootSectorStruct(BYTE bLogDevNumber)
                            21548 ; 647  |{
                            21549 
                            21554 FInitPartitionBootSectorStruct:
                            21576 
                            21577 ; 648  |    BYTE bResult;
                            21578 ; 649  |    DWORD wReadWord,TotalDatasectors,Totalclusters;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 346

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21579 ; 650  |    WORD i,SecValue=1;
                            21580 
                            21589 
                            21590 ; 651  |    /* Read the BootSector*/
                            21591 ; 652  |    if ( DriveReadSector(bLogDevNumber, (DWORD)0 + DataDriveStatus[bLogDevNumber].iPbsSect
                                  orOffset, MediaBuffer ) != NOERROR )
                            21592 
P:040D 055F7C         2 226721555         movec   ssh,y:(r7)+
P:040E 3F0600         2 226921558         move    #6,n7
P:040F 66F400 rrrrrr  3 227221599         move    #FDataDriveStatus+1,r6
P:0411 290100         2 227421582         move    #1,b0
P:0412 218600         2 227621594         move    a1,y0
P:0413 204F00         2 227821560         move    (r7)+n7
P:0414 77F400 FFFFFA  3 228121584         move    #-6,n7
P:0416 0116E0         2 228321595         mpy     y0,#22,a
P:0417 211E13         2 228521602         clr     a	                a0,n6
P:0418 596F59         4 228921605         tfr     y0,b	                b0,y:(r7+n7)
P:0419 68F000 rrrrrr  3 229221604         move    y:FMediaBuffer,r0
P:041B 4FEE00         4 229621601         move    y:(r6+n6),y1
P:041C 20E800         2 229821603         move    y1,a0
P:041D 0BF080 rrrrrr  6 230421606         jsr     FDriveReadSector
P:041F 200003         2 230621610         tst     a
P:0420 0AF0A2 rrrrrr  6 231221611         jne     L209
                            21612 
                            21613 ; 653  |    {
                            21614 ; 654  |        return(!NOERROR);
                            21615 ; 655  |    }
                            21616 ; 656  |
                            21617 ; 657  |
                            21618 ; 658  |    wReadWord =  FSGetWord((void *)MediaBuffer,BYTE_POS_SIGNATURE, X_MEMORY);
                            21619 
P:0422 68F000 rrrrrr  3 231521621         move    y:FMediaBuffer,r0
P:0424 56F41B 0001FE  3 231821622         clr     b	                #$1FE,a
P:0426 0BF080 rrrrrr  6 232421624         jsr     FFSGetWord
                            21628 
                            21629 ; 659  |
                            21630 ; 660  |    if ( wReadWord != SIGN_WORD_VALUE )
                            21631 
P:0428 21881B         2 232621633         clr     b	                a1,a0
P:0429 214C00         2 232821626         move    a2,a1
P:042A 51F400 00AA55  3 233121634         move    #43605,b0
P:042C 2A0000         2 233321635         move    #0,a2
P:042D 200005         2 233521636         cmp     b,a
P:042E 0AF0A2 rrrrrr  6 234121637         jne     L209
                            21638 
                            21639 ; 661  |        return(!NOERROR);
                            21640 ; 662  |
                            21641 ; 663  |
                            21642 ; 664  |    // Fill the rest of the PARTITION_BOOT_SECTOR structure
                            21643 ; 665  |    wReadWord = FSGetByte((void *)MediaBuffer,BYTE_POS_NUM_FAT, X_MEMORY);
                            21644 
P:0430 68F000 rrrrrr  3 234421646         move    y:FMediaBuffer,r0
P:0432 56F41B 000010  3 234721649         clr     b	                #>16,a
P:0434 0BF080 rrrrrr  6 235321650         jsr     FFSGetByte
                            21655 
                            21656 ; 666  |    stPartitionBootSector.bNumberFats = wReadWord;
                            21657 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 347

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21660 
                            21661 ; 667  |
                            21662 ; 668  |    wReadWord =  FSGetWord((void *)MediaBuffer,BYTE_POS_NUM_ROOT_SECT, X_MEMORY);
                            21663 
P:0436 21881B         2 235521666         clr     b	                a1,a0
P:0437 214C00         2 235721652         move    a2,a1
P:0438 587000 rrrrrr  3 236021659         move    a0,y:FstPartitionBootSector+2
P:043A 68F000 rrrrrr  3 236321665         move    y:FMediaBuffer,r0
P:043C 56F400 000011  3 236621667         move    #>17,a
P:043E 0BF080 rrrrrr  6 237221668         jsr     FFSGetWord
                            21673 
                            21674 ; 669  |    stPartitionBootSector.wNumberRootDirEntries = wReadWord;
                            21675 
                            21678 
                            21679 ; 670  |
                            21680 ; 671  |    wReadWord =  FSGetWord((void *)MediaBuffer,BYTE_POS_NUM_FAT_SECT, X_MEMORY);
                            21681 
P:0440 21881B         2 237421684         clr     b	                a1,a0
P:0441 214C00         2 237621670         move    a2,a1
P:0442 587000 rrrrrr  3 237921677         move    a0,y:FstPartitionBootSector+3
P:0444 68F000 rrrrrr  3 238221683         move    y:FMediaBuffer,r0
P:0446 56F400 000016  3 238521685         move    #>22,a
P:0448 0BF080 rrrrrr  6 239121686         jsr     FFSGetWord
                            21692 
                            21693 ; 672  |    if ( wReadWord == 0 )
                            21694 
P:044A 214F00         2 239321687         move    a2,b
P:044B 2B0000         2 239521696         move    #0,b2
P:044C 218900         2 239721688         move    a1,b0
P:044D 21A70B         2 239921697         tst     b	                b1,y1
P:044E 212600         2 240121689         move    b0,y0
P:044F 0AF0A2 rrrrrr  6 240721698         jne     L199
                            21699 
                            21700 ; 673  |        wReadWord =  FSGetDWord((void *)MediaBuffer,BYTE_POS_NUM_FAT_SECT_32, X_MEMORY);
                            21701 
P:0451 68F000 rrrrrr  3 241021703         move    y:FMediaBuffer,r0
P:0453 56F41B 000024  3 241321704         clr     b	                #>36,a
P:0455 0BF080 rrrrrr  6 241921706         jsr     FFSGetDWord
                            21711 
                            21712 ; 674  |    stPartitionBootSector.wNumberFatSectors = wReadWord;
                            21713 
P:0457 210600         2 242121708         move    a0,y0
P:0458 218700         2 242321709         move    a1,y1
                            21715 L199:
                            21717 
                            21718 ; 675  |
                            21719 ; 676  |    wReadWord = FSGetByte((void *)MediaBuffer,BYTE_POS_NUM_SECT_PER_CX, X_MEMORY);
                            21720 
P:0459 4F701B rrrrrr  3 242621723         clr     b	                y1,y:FstPartitionBootSector+5
P:045B 56F400 00000D  3 242921724         move    #>13,a
P:045D 4E7000 rrrrrr  3 243221716         move    y0,y:FstPartitionBootSector+4
P:045F 68F000 rrrrrr  3 243521722         move    y:FMediaBuffer,r0
P:0461 0BF080 rrrrrr  6 244121725         jsr     FFSGetByte
                            21731 
                            21732 ; 677  | 
                            21733 ; 678  |   // check whether the sectors per cluster are valid
                            21734 ; 679  |    for ( i = 0; i < 8; i++ )
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 348

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21735 
P:0463 77F409 FFFFFA  3 244421727         tfr     a,b	                #-6,n7
P:0465 21A900         2 244621728         move    b1,b0
P:0466 4EEF00         4 245021739         move    y:(r7+n7),y0
P:0467 216D00         2 245221729         move    b2,b1
P:0468 060880 rrrrrr  6 245821742         do      #8,L214
                            21744 
                            21745 ; 680  |    {
                            21746 ; 681  |        if ( wReadWord == SecValue )
                            21747 
P:046A 2B0013         2 246021749         clr     a	                #0,b2
P:046B 20C800         2 246221750         move    y0,a0
P:046C 20000D         2 246421752         cmp     a,b
P:046D 0AF0A2 rrrrrr  6 247021753         jne     L215
P:046F 00008C         2 247221754         enddo
P:0470 0AF080 rrrrrr  6 247821756         jmp     L201
                            21757 
                            21758 ; 682  |            break;
                            21759 ; 683  |        SecValue <<= 1;
                            21760 
                            21762 L215:
P:0472 20CC00         2 248021762         move    y0,a1
P:0473 200033         2 248221763         lsl     a
P:0474 218600         2 248421766         move    a1,y0
                        (26)21770 L214:
                            21772 
                            21773 ; 684  |    }
                            21774 ; 685  |
                            21775 ; 686  |    if ( SecValue == 256 )
                            21776 
                            21778 L201:
P:0475 46F451 000100  3 248721778         tfr     y0,a	                #$100,y0
P:0477 2A0000         2 248921780         move    #0,a2
P:0478 200055         2 249121781         cmp     y0,a
P:0479 0AF0AA rrrrrr  6 249721784         jeq     L209
                            21786 
                            21787 ; 687  |        return(!NOERROR);
                            21788 ; 688  |    stPartitionBootSector.bSectPerCx = wReadWord;
                            21789 
                            21792 
                            21793 ; 689  |
                            21794 ; 690  |    wReadWord =  FSGetWord((void *)MediaBuffer,BYTE_POS_TOTAL_SECTS, X_MEMORY);
                            21795 
P:047B 59701B rrrrrr  3 250021798         clr     b	                b0,y:FstPartitionBootSector+1
P:047D 68F000 rrrrrr  3 250321797         move    y:FMediaBuffer,r0
P:047F 56F400 000013  3 250621799         move    #>19,a
P:0481 0BF080 rrrrrr  6 251221800         jsr     FFSGetWord
                            21805 
                            21806 ; 691  |    if ( wReadWord == 0 )
                            21807 
P:0483 214F00         2 251421802         move    a2,b
P:0484 2B0000         2 251621809         move    #0,b2
P:0485 218900         2 251821803         move    a1,b0
P:0486 20000B         2 252021810         tst     b
P:0487 0AF0A2 rrrrrr  6 252621811         jne     L202
                            21812 
                            21813 ; 692  |        wReadWord =  FSGetDWord((void *)MediaBuffer,BYTE_POS_TOTAL_SECTS_32, X_MEMORY);
                            21814 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 349

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0489 68F000 rrrrrr  3 252921816         move    y:FMediaBuffer,r0
P:048B 56F41B 000020  3 253221817         clr     b	                #>$20,a
P:048D 0BF080 rrrrrr  6 253821820         jsr     FFSGetDWord
                            21823 
                            21824 ; 693  |    stPartitionBootSector.dwTotalsectors  =  wReadWord;
                            21825 
P:048F 200009         2 254021821         tfr     a,b
                            21827 L202:
                            21829 
                            21830 ; 694  |
                            21831 ; 695  |    stPartitionBootSector.wStartSectPrimaryFat =  FSGetWord((void *)MediaBuffer,BYTE_POS_N
                                  UM_RES_SECT, X_MEMORY);
                            21832 
P:0490 5D7000 rrrrrr  3 254321827         move    b1,y:FstPartitionBootSector+23
P:0492 56F400 00000E  3 254621837         move    #>14,a
P:0494 59701B rrrrrr  3 254921835         clr     b	                b0,y:FstPartitionBootSector+22
P:0496 68F000 rrrrrr  3 255221834         move    y:FMediaBuffer,r0
P:0498 0BF080 rrrrrr  6 255821838         jsr     FFSGetWord
                            21843 
                            21844 ; 696  |    stPartitionBootSector.wStartSectSecondaryFat = stPartitionBootSector.wStartSectPrimary
                                  Fat + stPartitionBootSector.wNumberFatSectors;
                            21845 
                            21852 
                            21853 ; 697  |    stPartitionBootSector.wStartSectRootDir = stPartitionBootSector.wStartSectSecondaryFat
                                   + stPartitionBootSector.wNumberFatSectors;
                            21854 
                            21863 
                            21864 ; 698  |    stPartitionBootSector.wStartSectData = stPartitionBootSector.wStartSectRootDir + (stPa
                                  rtitionBootSector.wNumberRootDirEntries/DIR_REC_PER_SECTOR);
                            21865 
P:049A 218800         2 256021839         move    a1,a0
P:049B 214C00         2 256221840         move    a2,a1
P:049C 5C7000 rrrrrr  3 256521841         move    a1,y:FstPartitionBootSector+9
P:049E 587000 rrrrrr  3 256821842         move    a0,y:FstPartitionBootSector+8
P:04A0 5FF000 rrrrrr  3 257121847         move    y:FstPartitionBootSector+5,b
P:04A2 59F000 rrrrrr  3 257421848         move    y:FstPartitionBootSector+4,b0
P:04A4 200018         2 257621849         add     a,b
P:04A5 5D7000 rrrrrr  3 257921850         move    b1,y:FstPartitionBootSector+11
P:04A7 597000 rrrrrr  3 258221851         move    b0,y:FstPartitionBootSector+10
P:04A9 4FF000 rrrrrr  3 258521857         move    y:FstPartitionBootSector+5,y1
P:04AB 4EF000 rrrrrr  3 258821856         move    y:FstPartitionBootSector+4,y0
P:04AD 200038         2 259021858         add     y,b
P:04AE 21A700         2 259221860         move    b1,y1
P:04AF 212600         2 259421859         move    b0,y0
P:04B0 4F7000 rrrrrr  3 259721861         move    y1,y:FstPartitionBootSector+13
P:04B2 57F000 rrrrrr  3 260021868         move    x:FcachedDirRecordsPerSector,b
P:04B4 4E7000 rrrrrr  3 260321862         move    y0,y:FstPartitionBootSector+12
P:04B6 5EF000 rrrrrr  3 260621867         move    y:FstPartitionBootSector+3,a
P:04B8 0BF080 rrrrrr  6 261221869         jsr     Rdiv_uiuiui
                            21876 
                            21877 ; 699  |    stPartitionBootSector.wNumberRootDirSectors = (stPartitionBootSector.wNumberRootDirEnt
                                  ries) /DIR_REC_PER_SECTOR;
                            21878 
                            21882 
                            21883 ; 700  |
                            21884 ; 701  |    stPartitionBootSector.dwNumHiddenSectors =  FSGetByte((void *)MediaBuffer,BYTE_POS_NUM
                                  _HIDDEN_SECT, X_MEMORY);
                            21885 
P:04BA 2C0079         2 261421871         tfr     y1,b	                #0,a1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 350

M:ADDR CODE           CYCLES LINE SOURCELINE
P:04BB 20C900         2 261621872         move    y0,b0
P:04BC 200018         2 261821873         add     a,b
P:04BD 5D7000 rrrrrr  3 262121874         move    b1,y:FstPartitionBootSector+15
P:04BF 59701B rrrrrr  3 262421888         clr     b	                b0,y:FstPartitionBootSector+14
P:04C1 5C7000 rrrrrr  3 262721880         move    a1,y:FstPartitionBootSector+19
P:04C3 587000 rrrrrr  3 263021881         move    a0,y:FstPartitionBootSector+18
P:04C5 68F000 rrrrrr  3 263321887         move    y:FMediaBuffer,r0
P:04C7 56F400 00001C  3 263621889         move    #>28,a
P:04C9 0BF080 rrrrrr  6 264221890         jsr     FFSGetByte
                            21902 
                            21903 ; 702  |    stPartitionBootSector.dwNumHiddenSectors |= ((DWORD)FSGetByte((void *)MediaBuffer,BYTE
                                  _POS_NUM_HIDDEN_SECT+1, X_MEMORY))<<8;
                            21904 
P:04CB 77F400 FFFFFA  3 264521893         move    #-6,n7
P:04CD 218800         2 264721891         move    a1,a0
P:04CE 205F1B         2 264921907         clr     b	                (r7)+
P:04CF 214C00         2 265121892         move    a2,a1
P:04D0 5C6F00         4 265521896         move    a1,y:(r7+n7)
P:04D1 205700         2 265721897         move    (r7)-
P:04D2 586F00         4 266121899         move    a0,y:(r7+n7)
P:04D3 5C7000 rrrrrr  3 266421900         move    a1,y:FstPartitionBootSector+17
P:04D5 587000 rrrrrr  3 266721901         move    a0,y:FstPartitionBootSector+16
P:04D7 68F000 rrrrrr  3 267021906         move    y:FMediaBuffer,r0
P:04D9 56F400 00001D  3 267321908         move    #>29,a
P:04DB 0BF080 rrrrrr  6 267921909         jsr     FFSGetByte
                            21944 
                            21945 ; 703  |    stPartitionBootSector.dwNumHiddenSectors |= ((DWORD)FSGetByte((void *)MediaBuffer,BYTE
                                  _POS_NUM_HIDDEN_SECT+2, X_MEMORY))<<16;
                            21946 
P:04DD 77F400 FFFFFA  3 268221922         move    #-6,n7
P:04DF 218800         2 268421910         move    a1,a0
P:04E0 205F00         2 268621923         move    (r7)+
P:04E1 214C00         2 268821911         move    a2,a1
P:04E2 5FEF00         4 269221925         move    y:(r7+n7),b
P:04E3 21A432         2 269421912         asl     a	                b1,x0
P:04E4 205700         2 269621926         move    (r7)-
P:04E5 59EF00         4 270021928         move    y:(r7+n7),b0
P:04E6 212D32         2 270221913         asl     a	                b0,b1
P:04E7 205F32         2 270421914         asl     a	                (r7)+
P:04E8 77F432 FFFFFC  3 270721915         asl     a	                #-4,n7
P:04EA 200032         2 270921916         asl     a
P:04EB 200032         2 271121917         asl     a
P:04EC 200032         2 271321918         asl     a
P:04ED 200032         2 271521919         asl     a
P:04EE 210600         2 271721920         move    a0,y0
P:04EF 21875A         2 271921931         or      y0,b	                a1,y1
P:04F0 21A900         2 272121932         move    b1,b0
P:04F1 208D00         2 272321933         move    x0,b1
P:04F2 56F47A 00001E  3 272621934         or      y1,b	                #>30,a
P:04F4 5D6F00         4 273021938         move    b1,y:(r7+n7)
P:04F5 205700         2 273221939         move    (r7)-
P:04F6 596F00         4 273621941         move    b0,y:(r7+n7)
P:04F7 5D7000 rrrrrr  3 273921942         move    b1,y:FstPartitionBootSector+17
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 351

M:ADDR CODE           CYCLES LINE SOURCELINE
P:04F9 59701B rrrrrr  3 274221949         clr     b	                b0,y:FstPartitionBootSector+16
P:04FB 68F000 rrrrrr  3 274521948         move    y:FMediaBuffer,r0
P:04FD 0BF080 rrrrrr  6 275121951         jsr     FFSGetByte
P:04FF 218800         2 275321952         move    a1,a0
P:0500 214C00         2 275521953         move    a2,a1
P:0501 0610A0         4 275921954         rep     #16     
P:0502 200032         2 276121956         asl     a
                            21958 L216:
                            21984 
                            21985 ; 704  |    stPartitionBootSector.dwNumHiddenSectors |= ((DWORD)FSGetByte((void *)MediaBuffer,BYTE
                                  _POS_NUM_HIDDEN_SECT+3, X_MEMORY))<<24;
                            21986 
P:0503 77F400 FFFFFC  3 276421962         move    #-4,n7
P:0505 210600         2 276621960         move    a0,y0
P:0506 218700         2 276821961         move    a1,y1
P:0507 205F00         2 277021963         move    (r7)+
P:0508 56F400 00001F  3 277321990         move    #>$1F,a
P:050A 5FEF00         4 277721965         move    y:(r7+n7),b
P:050B 205700         2 277921966         move    (r7)-
P:050C 21A500         2 278121969         move    b1,x1
P:050D 59EF00         4 278521968         move    y:(r7+n7),b0
P:050E 212D00         2 278721970         move    b0,b1
P:050F 205F5A         2 278921971         or      y0,b	                (r7)+
P:0510 21A900         2 279121972         move    b1,b0
P:0511 20AD00         2 279321973         move    x1,b1
P:0512 77F47A FFFFFE  3 279621974         or      y1,b	                #-2,n7
P:0514 000000         2 279821974         nop             ; (inserted)
P:0515 5D6F00         4 280221978         move    b1,y:(r7+n7)
P:0516 205700         2 280421979         move    (r7)-
P:0517 596F00         4 280821981         move    b0,y:(r7+n7)
P:0518 5D7000 rrrrrr  3 281121982         move    b1,y:FstPartitionBootSector+17
P:051A 59701B rrrrrr  3 281421989         clr     b	                b0,y:FstPartitionBootSector+16
P:051C 68F000 rrrrrr  3 281721988         move    y:FMediaBuffer,r0
P:051E 0BF080 rrrrrr  6 282321991         jsr     FFSGetByte
                            22012 
                            22013 ; 705  |
                            22014 ; 706  |    TotalDatasectors = stPartitionBootSector.dwTotalsectors -(stPartitionBootSector.wStart
                                  SectPrimaryFat +
                            22015 ; 707  |                                                              (stPartitionBootSector.bNumb
                                  erFats * stPartitionBootSector.wNumberFatSectors) +
                            22016 ; 708  |                                                              stPartitionBootSector.wNumbe
                                  rRootDirSectors);
                            22017 
                            22043 
                            22044 ; 709  |
                            22045 ; 710  |    Totalclusters   =  (TotalDatasectors / stPartitionBootSector.bSectPerCx) + 1;
                            22046 
P:0520 77F400 FFFFFE  3 282621997         move    #-2,n7
P:0522 218800         2 282821992         move    a1,a0
P:0523 205F00         2 283021998         move    (r7)+
P:0524 214C00         2 283221993         move    a2,a1
P:0525 5FEF00         4 283622000         move    y:(r7+n7),b
P:0526 210E00         2 283821994         move    a0,a
P:0527 205700         2 284022001         move    (r7)-
P:0528 21A400         2 284222004         move    b1,x0
P:0529 210600         2 284421995         move    a0,y0
P:052A 59EF00         4 284822003         move    y:(r7+n7),b0
P:052B 212D00         2 285022005         move    b0,b1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 352

M:ADDR CODE           CYCLES LINE SOURCELINE
P:052C 21875A         2 285222006         or      y0,b	                a1,y1
P:052D 21A900         2 285422007         move    b1,b0
P:052E 208D00         2 285622008         move    x0,b1
P:052F 25007A         2 285822009         or      y1,b	                #0,x1
P:0530 5D7000 rrrrrr  3 286122010         move    b1,y:FstPartitionBootSector+17
P:0532 597000 rrrrrr  3 286422011         move    b0,y:FstPartitionBootSector+16
P:0534 4CF000 rrrrrr  3 286722019         move    y:FstPartitionBootSector+2,x0
P:0536 209400         2 286922020         move    x0,r4
P:0537 4EF000 rrrrrr  3 287222022         move    y:FstPartitionBootSector+4,y0
P:0539 4FF000 rrrrrr  3 287522023         move    y:FstPartitionBootSector+5,y1
P:053B 0040F8         2 287722024         ori     #$40,mr
P:053C 000000         2 287922024         nop             ; (inserted)
P:053D 2000D0         2 288122026         mpy     y0,x0,a
P:053E 2109E2         2 288322027         mac     x1,y0,a a0,b0
P:053F 2000C2         2 288522028         mac     x0,y1,a
P:0540 00BFB8         2 288722029         andi    #$BF,mr
P:0541 210D00         2 288922030         move    a0,b1
P:0542 218B00         2 289122031         move    a1,b2
P:0543 27002A         2 289322032         asr     b	                #0,y1
P:0544 5EF000 rrrrrr  3 289622033         move    y:FstPartitionBootSector+9,a
P:0546 58F000 rrrrrr  3 289922034         move    y:FstPartitionBootSector+8,a0
P:0548 4EF010 rrrrrr  3 290222035         add     b,a	                y:FstPartitionBootSector+1,y0
P:054A 5FF000 rrrrrr  3 290522036         move    y:FstPartitionBootSector+19,b
P:054C 59F000 rrrrrr  3 290822037         move    y:FstPartitionBootSector+18,b0
P:054E 5EF018 rrrrrr  3 291122038         add     a,b	                y:FstPartitionBootSector+23,a
P:0550 58F000 rrrrrr  3 291422040         move    y:FstPartitionBootSector+22,a0
P:0552 200014         2 291622041         sub     b,a
P:0553 0BF080 rrrrrr  6 292222050         jsr     Rdiv_ululul
                            22054 
                            22055 ; 711  |    stPartitionBootSector.dwTotalclusters = Totalclusters;
                            22056 
                            22060 
                            22061 ; 712  |    if ( Totalclusters < 4085 )
                            22062 
P:0555 000008         2 292422052         inc     a
P:0556 2A001B         2 292622064         clr     b	                #0,a2
P:0557 51F400 000FF5  3 292922065         move    #4085,b0
P:0559 5C7005 rrrrrr  3 293222067         cmp     b,a	                a1,y:FstPartitionBootSector+25
P:055B 587000 rrrrrr  3 293522059         move    a0,y:FstPartitionBootSector+24
P:055D 0AF0A1 rrrrrr  6 294122068         jge     L203
                            22069 
                            22070 ; 713  |        stPartitionBootSector.TypeFileSystem = FS_FAT12;
                            22071 
P:055F 2F0000         2 294322073         move    #0,b
P:0560 5F7000 rrrrrr  3 294622074         move    b,y:FstPartitionBootSector
P:0562 0AF080 rrrrrr  6 295222075         jmp     L206
                            22076 
                            22077 ; 714  |    else if ( Totalclusters < 65525 )
                            22078 
                            22080 L203:
P:0564 2F0000         2 295422082         move    #0,b
P:0565 51F400 00FFF5  3 295722083         move    #65525,b0
P:0567 200005         2 295922084         cmp     b,a
P:0568 0AF0A1 rrrrrr  6 296522085         jge     L204
                            22086 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 353

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22087 ; 715  |        stPartitionBootSector.TypeFileSystem = FS_FAT16;
                            22088 
P:056A 290100         2 296722090         move    #1,b0
P:056B 597000 rrrrrr  3 297022091         move    b0,y:FstPartitionBootSector
P:056D 0AF080 rrrrrr  6 297622092         jmp     L206
                            22093 
                            22094 ; 716  |    else
                            22095 ; 717  |        stPartitionBootSector.TypeFileSystem = FS_FAT32;
                            22096 
                            22098 L204:
                            22100 
                            22101 ; 718  |
                            22102 ; 719  |    if ( stPartitionBootSector.TypeFileSystem == FS_FAT32 )
                            22103 
P:056F 47F400 000002  3 297922098         move    #>2,y1
P:0571 4F7000 rrrrrr  3 298222099         move    y1,y:FstPartitionBootSector
P:0573 5FF000 rrrrrr  3 298522105 L206:   move    y:FstPartitionBootSector,b
P:0575 46F400 000002  3 298822106         move    #>2,y0
P:0577 20005D         2 299022107         cmp     y0,b
P:0578 0AF0A2 rrrrrr  6 299622108         jne     L211
                            22109 
                            22110 ; 720  |    {
                            22111 ; 721  |        if ( stPartitionBootSector.bNumberFats < 2 )
                            22112 
P:057A 228F00         2 299822114         move    r4,b
P:057B 20005D         2 300022115         cmp     y0,b
P:057C 0AF0A1 rrrrrr  6 300622116         jge     L210
                            22117 
                            22118 ; 722  |            return(!NOERROR);
                            22119 
P:057E 56F400 000001  3 300922121 L209:   move    #>1,a
P:0580 0AF080 rrrrrr  6 301522122         jmp     L213
                            22123 
                            22124 ; 723  |        wReadWord =  FSGetDWord((void *)MediaBuffer,BYTE_POS_ROOT_DIR_CX, X_MEMORY);
                            22125 
P:0582 68F000 rrrrrr  3 301822127 L210:   move    y:FMediaBuffer,r0
P:0584 56F41B 00002C  3 302122128         clr     b	                #>44,a
P:0586 0BF080 rrrrrr  6 302722130         jsr     FFSGetDWord
                            22132 
                            22133 ; 724  |    }
                            22134 
P:0588 0AF080 rrrrrr  6 303322136         jmp     L212
                            22137 
                            22138 ; 725  |    else
                            22139 ; 726  |        wReadWord = 0;
                            22140 
                            22142 L211:
                            22143 
                            22144 ; 727  |    stPartitionBootSector.Rootdirstartcx = wReadWord;
                            22145 
P:058A 2E0000         2 303522142         move    #0,a
                            22147 L212:
                            22149 
                            22150 ; 728  |
                            22151 ; 729  |    return(NOERROR);
                            22152 
                            22156 
                            22157 ; 730  |
                            22158 ; 731  |}
                            22159 
P:058B 5C7000 rrrrrr  3 303822147         move    a1,y:FstPartitionBootSector+21
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 354

M:ADDR CODE           CYCLES LINE SOURCELINE
P:058D 587013 rrrrrr  3 304122154         clr     a	                a0,y:FstPartitionBootSector+20
                            22161 L213:
P:058F 77F400 FFFFF9  3 304422161         move    #-7,n7
P:0591 000000         2 304622161         nop             ; (inserted)
P:0592 05EF7C         4 305022163         movec   y:(r7+n7),ssh
P:0593 204F00         2 305222165         move    (r7)+n7
P:0594 00000C         4 305622167         rts
                            22169 
                            22170 ; 732  |
                            22171 ; 733  |
                            22172 ; 734  |///////////////////////////////////////////////////////////////////////////////
                            22173 ; 735  |//
                            22174 ; 736  |//>  Name:           ScanFilesAndSubDirs
                            22175 ; 737  |//
                            22176 ; 738  |//   Type:           Function
                            22177 ; 739  |//
                            22178 ; 740  |//   Description:    Counts the number of files and sub directories
                            22179 ; 741  |//                   for the directory specified in structure DIR_CTRL_BLK
                            22180 ; 742  |//
                            22181 ; 743  |//
                            22182 ; 744  |//   Inputs:
                            22183 ; 745  |//                  *pstDirCtrlBlk      : Structure defining the directory to process
                            22184 ; 746  |//
                            22185 ; 747  |//   Outputs:        Result of operation
                            22186 ; 748  |//                      NOERROR -> Successfull
                            22187 ; 749  |//                      !NOERROR -> Unsuccessfull
                            22188 ; 750  |//
                            22189 ; 751  |//   Notes:          none
                            22190 ; 752  |//<
                            22191 ; 753  |///////////////////////////////////////////////////////////////////////////////
                            22192 ; 754  |BOOL _reentrant ScanFilesAndSubDirs(DIR_CTRL_BLK *pstDirCtrlBlk)
                            22193 ; 755  |{
                            22194 
                            22199 FScanFilesAndSubDirs:
                            22211 
                            22212 ; 756  |    WORD SectCounter = 0, RecordCounter,  n,  StartRecordByte;
                            22213 
                            22249 
                            22250 ; 757  |    BOOL EndDirEntries = FALSE;
                            22251 ; 758  |    BYTE bTempByte;
                            22252 ; 759  |    WORD wTempWord;
                            22253 ; 760  |    WORD wLoopCount,Retval;
                            22254 ; 761  |    DWORD Sect,CurCx;
                            22255 ; 762  |    FILE_CTRL_BLK stFileCtrlBlk;
                            22256 ; 763  |    LONG wClusterCount,i;
                            22257 ; 764  |    DWORD wCxSizeBytes = stPartitionBootSector.bSectPerCx * BYTES_PER_SECT; // Cx size in 
                                  Bytes
                            22258 
                            22280 
                            22281 ; 765  |    DWORD dwFileSizeDiskBytes,wCluster;
                            22282 ; 766  |    DWORD Rootdircluster;
                            22283 ; 767  |    // Initialize the sector to read to the start sector current dir
                            22284 ; 768  |    Sect = pstDirCtrlBlk->StartSectCurDir;
                            22285 
                            22295 
                            22296 ; 769  |
                            22297 ; 770  |    // Initialize Current Cx to start cluster current dir
                            22298 ; 771  |    CurCx = pstDirCtrlBlk->wStartCxCurDir;
                            22299 
                            22317 
                            22318 ; 772  |    Flag=1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 355

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22319 
                            22322 
                            22323 ; 773  |    nestinglevel++;
                            22324 
                            22329 
                            22330 ; 774  |    //  Rootdircluster = CurCx;
                            22331 ; 775  |    if ( nestinglevel > MAX_NESTING_LEVEL )
                            22332 
P:0595 055F7C         2 305822200         movec   ssh,y:(r7)+
P:0596 3F1900         2 306022203         move    #25,n7
P:0597 045816         4 306422288         lua     (r0)+,r6
P:0598 260000         2 306622215         move    #0,y0
P:0599 47F000 rrrrrr  3 306922261         move    x:FcachedSectorSize,y1
P:059B 204F00         2 307122205         move    (r7)+n7
P:059C 77F400 FFFFEE  3 307422217         move    #-18,n7
P:059E 000000         2 307622217         nop             ; (inserted)
P:059F 4E6F00         4 308022219         move    y0,y:(r7+n7)
P:05A0 77F400 FFFFEF  3 308322266         move    #-17,n7
P:05A2 205F00         2 308522267         move    (r7)+
P:05A3 4EF000 rrrrrr  3 308822260         move    y:FstPartitionBootSector+1,y0
P:05A5 3E03B8         2 309022262         mpy     y0,y1,b	                #3,n6
P:05A6 45F42A 000001  3 309322263         asr     b	                #>1,x1
P:05A8 212F13         2 309522265         clr     a	                b0,b
P:05A9 5E6F00         4 309922269         move    a,y:(r7+n7)
P:05AA 205700         2 310122270         move    (r7)-
P:05AB 5F6F00         4 310522272         move    b,y:(r7+n7)
P:05AC 77F400 FFFFF1  3 310822289         move    #-15,n7
P:05AE 000000         2 311022289         nop             ; (inserted)
P:05AF 6E6F00         4 311422291         move    r6,y:(r7+n7)
P:05B0 77F400 FFFFED  3 311722303         move    #-19,n7
P:05B2 4EDE00         2 311922292         move    y:(r6)+,y0
P:05B3 4FD600         2 312122293         move    y:(r6)-,y1
P:05B4 221600         2 312322302         move    r0,r6
P:05B5 6E6F00         4 312722305         move    r6,y:(r7+n7)
P:05B6 77F400 FFFFF4  3 313022309         move    #-12,n7
P:05B8 204E00         2 313222306         move    (r6)+n6
P:05B9 6E6F00         4 313622311         move    r6,y:(r7+n7)
P:05BA 205E00         2 313822312         move    (r6)+
P:05BB 5FD600         2 314022313         move    y:(r6)-,b
P:05BC 59E600         2 314222314         move    y:(r6),b0
P:05BD 4D7001 rrrrrr  3 314522315         tfr     b,a	                x1,y:FFlag
P:05BF 5FF000 rrrrrr  3 314822326         move    y:Fnestinglevel,b
P:05C1 45F468 000010  3 315122327         add     x1,b	                #>16,x1
P:05C3 5D706D rrrrrr  3 315422335         cmp     x1,b	                b1,y:Fnestinglevel
P:05C5 0AF0A7 rrrrrr  6 316022336         jgt     L373
                            22337 
                            22338 ; 776  |    {
                            22339 ; 777  |        nestinglevel--;
                            22340 ; 778  |        return(NOERROR);
                            22341 ; 779  |    }
                            22342 ; 780  |    // Scan all sectors allocated for this directory
                            22343 ; 781  |    do
                            22344 ; 782  |    {
                            22345 ; 783  |        // If we're in the root directory then we just loop through a set number
                            22346 ; 784  |        //  of sectors.  If not in the root then the directory may have multiple
                            22347 ; 785  |        //  clusters and we process them one at a time.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 356

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22348 ; 786  |        if ( CurCx == 0 )
                            22349 
                            22351 L333:
P:05C7 77F400 FFFFF5  3 316322351         move    #-11,n7
P:05C9 2A0000         2 316522358         move    #0,a2
P:05CA 205F00         2 316722352         move    (r7)+
P:05CB 5C6F03         4 317122359         tst     a	                a1,y:(r7+n7)
P:05CC 205700         2 317322355         move    (r7)-
P:05CD 586F00         4 317722357         move    a0,y:(r7+n7)
P:05CE 0AF0A2 rrrrrr  6 318322362         jne     L334
                            22363 
                            22364 ; 787  |        {
                            22365 ; 788  |            wLoopCount = stPartitionBootSector.wNumberRootDirSectors;
                            22366 
                            22374 
                            22375 ; 789  |        }
                            22376 
P:05D0 77F400 FFFFF7  3 318622370         move    #-9,n7
P:05D2 4CF000 rrrrrr  3 318922368         move    y:FstPartitionBootSector+18,x0
P:05D4 4DF000 rrrrrr  3 319222369         move    y:FstPartitionBootSector+19,x1
P:05D6 4C6F00         4 319622372         move    x0,y:(r7+n7)
P:05D7 0AF080 rrrrrr  6 320222378         jmp     L335
                            22379 
                            22380 ; 790  |        else
                            22381 ; 791  |        {
                            22382 ; 792  |            wLoopCount = stPartitionBootSector.bSectPerCx;
                            22383 
                            22385 L334:
                            22389 
                            22390 ; 793  |        }
                            22391 ; 794  |
                            22392 ; 795  |        for ( n = 0 ; n < wLoopCount ; Sect++, n++, SectCounter++ )
                            22393 
P:05D9 6EF000 rrrrrr  3 320522385         move    y:FstPartitionBootSector+1,r6
P:05DB 77F400 FFFFF7  3 320822386         move    #-9,n7
P:05DD 000000         2 321022386         nop             ; (inserted)
P:05DE 6E6F00         4 321422388         move    r6,y:(r7+n7)
                            22395 L335:
P:05DF 2F0000         2 321622395         move    #0,b
P:05E0 0AF080 rrrrrr  6 322222397         jmp     L364
                            22398 
                            22399 ; 796  |        {
                            22400 ; 797  |            // Read new sector
                            22401 ; 798  |            if ( ReadDirSector(Sect, pstDirCtrlBlk) != NOERROR )
                            22402 
                            22404 L336:
P:05E2 77F471 FFFFED  3 322522419         tfr     y1,a	                #-19,n7
P:05E4 20C800         2 322722420         move    y0,a0
P:05E5 68EF00         4 323122409         move    y:(r7+n7),r0
P:05E6 77F400 FFFFF2  3 323422412         move    #-14,n7
P:05E8 205F00         2 323622413         move    (r7)+
P:05E9 4F6F00         4 324022415         move    y1,y:(r7+n7)
P:05EA 205700         2 324222416         move    (r7)-
P:05EB 4E6F00         4 324622418         move    y0,y:(r7+n7)
P:05EC 0BF080 rrrrrr  6 325222425         jsr     FReadDirSector
P:05EE 2A0000         2 325422430         move    #0,a2
P:05EF 200003         2 325622431         tst     a
P:05F0 0AF0A2 rrrrrr  6 326222432         jne     L368
                            22433 
                            22434 ; 799  |                return(!NOERROR);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 357

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22435 ; 800  |
                            22436 ; 801  |            // Scan all entries of sector loaded in Buffer
                            22437 ; 802  |            for ( RecordCounter = 0; RecordCounter < DIR_REC_PER_SECTOR; RecordCounter++ )
                                  
                            22438 
P:05F2 2E0000         2 326422440         move    #0,a
P:05F3 0AF080 rrrrrr  6 327022442         jmp     L362
                            22443 
                            22444 ; 803  |            {
                            22445 ; 804  |                if ( Flag == 1 )
                            22446 
                            22448 L337:
P:05F5 5EF000 rrrrrr  3 327322451         move    y:FFlag,a
P:05F7 57F400 000001  3 327622452         move    #>1,b
P:05F9 2A0000         2 327822453         move    #0,a2
P:05FA 200005         2 328022454         cmp     b,a
P:05FB 0AF0A2 rrrrrr  6 328622455         jne     L338
                            22470 
                            22471 ; 805  |                {
                            22472 ; 806  |                    if ( ReadDirSector(Sect, pstDirCtrlBlk) != NOERROR )
                            22473 
P:05FD 77F400 FFFFED  3 328922456         move    #-19,n7
P:05FF 000000         2 329122456         nop             ; (inserted)
P:0600 68EF00         4 329522458         move    y:(r7+n7),r0
P:0601 77F400 FFFFF2  3 329822461         move    #-14,n7
P:0603 205F00         2 330022462         move    (r7)+
P:0604 5EEF00         4 330422464         move    y:(r7+n7),a
P:0605 205700         2 330622465         move    (r7)-
P:0606 58EF00         4 331022467         move    y:(r7+n7),a0
P:0607 0BF080 rrrrrr  6 331622475         jsr     FReadDirSector
P:0609 2A0000         2 331822480         move    #0,a2
P:060A 200003         2 332022481         tst     a
P:060B 0AF0A2 rrrrrr  6 332622482         jne     L368
                            22483 
                            22484 ; 807  |                        return(!NOERROR);
                            22485 ; 808  |                    Flag=0;
                            22486 
                            22490 
                            22491 ; 809  |                }
                            22492 ; 810  |
                            22493 ; 811  |                StartRecordByte = RecordCounter*BYTES_PER_DIR_RECORD;
                            22494 
P:060D 2F0000         2 332822488         move    #0,b
P:060E 5D7000 rrrrrr  3 333122489         move    b1,y:FFlag
                            22496 L338:
                            22503 
                            22504 ; 812  |
                            22505 ; 813  |                bTempByte = FSGetByte((void *)pstDirCtrlBlk->pwBuffer,StartRecordByte,X_ME
                                  MORY);
                            22506 
P:0610 3E0900         2 333322508         move    #9,n6
P:0611 77F400 FFFFF9  3 333622496         move    #-7,n7
P:0613 45F400 000020  3 333922499         move    #>$20,x1
P:0615 4FEF00         4 334322498         move    y:(r7+n7),y1
P:0616 77F400 FFFFED  3 334622509         move    #-19,n7
P:0618 000000         2 334822509         nop             ; (inserted)
P:0619 6EEFF8         4 335222500         mpy     y1,x1,b	                y:(r7+n7),r6
P:061A 77F42A FFFFFB  3 335522501         asr     b	                #-5,n7
P:061C 204E00         2 335722513         move    (r6)+n6
P:061D 212E00         2 335922521         move    b0,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 358

M:ADDR CODE           CYCLES LINE SOURCELINE
P:061E 6E6F00         4 336322516         move    r6,y:(r7+n7)
P:061F 68E600         2 336522517         move    y:(r6),r0
P:0620 77F400 FFFFFA  3 336822518         move    #-6,n7
P:0622 000000         2 337022518         nop             ; (inserted)
P:0623 596F1B         4 337422524         clr     b	                b0,y:(r7+n7)
P:0624 0BF080 rrrrrr  6 338022525         jsr     FFSGetByte
                            22527 
                            22528 ; 814  |
                            22529 ; 815  |                // Check if last directory record
                            22530 ; 816  |                if ( bTempByte == 0x0 )
                            22531 
P:0626 2A0000         2 338222533         move    #0,a2
P:0627 200003         2 338422534         tst     a
P:0628 0AF0AA rrrrrr  6 339022535         jeq     L372
                            22536 
                            22537 ; 817  |                {
                            22538 ; 818  |                    Flag=1;
                            22539 ; 819  |                    nestinglevel--;
                            22540 ; 820  |                    return(NOERROR);
                            22541 ; 821  |                }
                            22542 ; 822  |
                            22543 ; 823  |                // Check if record deleted or parent or this directory
                            22544 ; 824  |                if ( (bTempByte == 0xe5) || (bTempByte == 0x2e) )
                            22545 
P:062A 218F00         2 339222547         move    a1,b
P:062B 44F400 0000E5  3 339522548         move    #>229,x0
P:062D 20004D         2 339722549         cmp     x0,b
P:062E 0AF0AA rrrrrr  6 340322550         jeq     L361
P:0630 46F400 00002E  3 340622551         move    #>46,y0
P:0632 20005D         2 340822552         cmp     y0,b
P:0633 0AF0AA rrrrrr  6 341422553         jeq     L361
                            22554 
                            22555 ; 825  |                    continue;
                            22556 ; 826  |
                            22557 ; 827  |                // Check if record is part of long file name
                            22558 ; 828  |                bTempByte = FSGetByte((void *)pstDirCtrlBlk->pwBuffer,StartRecordByte + DI
                                  R_REC_ATT_POS,X_MEMORY);
                            22559 
P:0635 77F400 FFFFFB  3 341722561         move    #-5,n7
P:0637 56F400 00000B  3 342022566         move    #>11,a
P:0639 6EEF00         4 342422563         move    y:(r7+n7),r6
P:063A 77F400 FFFFFA  3 342722567         move    #-6,n7
P:063C 68E600         2 342922565         move    y:(r6),r0
P:063D 4FEF00         4 343322569         move    y:(r7+n7),y1
P:063E 200070         2 343522570         add     y1,a
P:063F 218E1B         2 343722572         clr     b	                a1,a
P:0640 0BF080 rrrrrr  6 344322574         jsr     FFSGetByte
                            22579 
                            22580 ; 829  |                wTempWord =  FSGetWord((void *)pstDirCtrlBlk->pwBuffer,StartRecordByte + D
                                  IR_REC_FIRST_CX_POS,X_MEMORY);
                            22581 
P:0642 77F400 FFFFFC  3 344622575         move    #-4,n7
P:0644 46F400 00001A  3 344922588         move    #>26,y0
P:0646 5E6F00         4 345322577         move    a,y:(r7+n7)
P:0647 77F400 FFFFFB  3 345622583         move    #-5,n7
P:0649 000000         2 345822583         nop             ; (inserted)
P:064A 6EEF00         4 346222585         move    y:(r7+n7),r6
P:064B 77F400 FFFFFA  3 346522589         move    #-6,n7
P:064D 68E600         2 346722587         move    y:(r6),r0
P:064E 5EEF00         4 347122591         move    y:(r7+n7),a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 359

M:ADDR CODE           CYCLES LINE SOURCELINE
P:064F 200050         2 347322592         add     y0,a
P:0650 218E1B         2 347522596         clr     b	                a1,a
P:0651 0BF080 rrrrrr  6 348122598         jsr     FFSGetWord
                            22601 
                            22602 ; 830  |
                            22603 ; 831  |                if ( (bTempByte == 0x0f) && (wTempWord == 0x00) )
                            22604 
P:0653 77F409 FFFFFC  3 348422599         tfr     a,b	                #-4,n7
P:0655 46F400 00000F  3 348722612         move    #>15,y0
P:0657 7DEF00         4 349122608         move    y:(r7+n7),n5
P:0658 23AE00         2 349322609         move    n5,a
P:0659 200055         2 349522613         cmp     y0,a
P:065A 0AF0A2 rrrrrr  6 350122614         jne     L339
P:065C 2B0000         2 350322615         move    #0,b2
P:065D 20000B         2 350522616         tst     b
P:065E 0AF0AA rrrrrr  6 351122617         jeq     L361
                            22618 
                            22619 ; 832  |                    continue;
                            22620 ; 833  |
                            22621 ; 834  |                // Check if file, sub dir or volume and increment specific counter
                            22622 ; 835  |                if ( bTempByte & 0x10 )
                            22623 
P:0660 0ADD04 rrrrrr  6 351722625 L339:   jclr    #4,n5,L345
                            22626 
                            22627 ; 836  |                {
                            22628 ; 837  |                    if ( GetFileCtrlBlk(RecordCounter, Sect, pstDirCtrlBlk, &stFileCtrlBlk
                                  ) == !NOERROR )
                            22629 
P:0662 77F400 FFFFE7  3 352022631         move    #-25,n7
P:0664 000000         2 352222631         nop             ; (inserted)
P:0665 044F14         4 352622633         lua     (r7)+n7,r4
P:0666 77F400 FFFFED  3 352922634         move    #-19,n7
P:0668 000000         2 353122634         nop             ; (inserted)
P:0669 68EF00         4 353522636         move    y:(r7+n7),r0
P:066A 77F400 FFFFF2  3 353822639         move    #-14,n7
P:066C 205F00         2 354022640         move    (r7)+
P:066D 5EEF00         4 354422642         move    y:(r7+n7),a
P:066E 205700         2 354622643         move    (r7)-
P:066F 58EF00         4 355022645         move    y:(r7+n7),a0
P:0670 77F400 FFFFF9  3 355322648         move    #-7,n7
P:0672 000000         2 355522648         nop             ; (inserted)
P:0673 5FEF00         4 355922650         move    y:(r7+n7),b
P:0674 0BF080 rrrrrr  6 356522654         jsr     FGetFileCtrlBlk
P:0676 2A0000         2 356722663         move    #0,a2
P:0677 46F400 000001  3 357022662         move    #>1,y0
P:0679 200055         2 357222664         cmp     y0,a
P:067A 0AF0AA rrrrrr  6 357822665         jeq     L344
                            22666 
                            22667 ; 838  |                    {
                            22668 ; 839  |                        HandleFailReadSector();
                            22669 ; 840  |                        break;
                            22670 ; 841  |                    }
                            22671 ; 842  |
                            22672 ; 843  |                    // Flush last sector if needed
                            22673 ; 844  |                    if ( pstDirCtrlBlk->Control == DIRTY )
                            22674 
P:067C 3E0551         2 358022690         tfr     y0,a	                #5,n6
P:067D 77F400 FFFFED  3 358322677         move    #-19,n7
P:067F 000000         2 358522677         nop             ; (inserted)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 360

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0680 6EEF00         4 358922679         move    y:(r7+n7),r6
P:0681 77F400 FFFFFD  3 359222684         move    #-3,n7
P:0683 044E15         4 359622681         lua     (r6)+n6,r5
P:0684 6D6F00         4 360022686         move    r5,y:(r7+n7)
P:0685 5FEE00         4 360422687         move    y:(r6+n6),b
P:0686 20000D         2 360622691         cmp     a,b
P:0687 0AF0A2 rrrrrr  6 361222692         jne     L340
                            22693 
                            22694 ; 845  |
                            22695 ; 846  |                        if ( DriveWriteSector(pstDirCtrlBlk->Device,pstDirCtrlBlk->CurSect
                                   + DataDriveStatus[pstDirCtrlBlk->Device].iPbsSectorOffset,pstDirCtrlBlk->pwBuffer)!=NOERROR )
                            22696 
P:0689 3E0600         2 361422705         move    #6,n6
P:068A 77F400 FFFFED  3 361722698         move    #-19,n7
P:068C 000000         2 361922698         nop             ; (inserted)
P:068D 6EEF00         4 362322700         move    y:(r7+n7),r6
P:068E 77F400 FFFFFB  3 362622721         move    #-5,n7
P:0690 5FE600         2 362822702         move    y:(r6),b
P:0691 68EF00         4 363222723         move    y:(r7+n7),r0
P:0692 204E00         2 363422707         move    (r6)+n6
P:0693 21A600         2 363622712         move    b1,y0
P:0694 4CDE00         2 363822710         move    y:(r6)+,x0
P:0695 0116E0         2 364022713         mpy     y0,#22,a
P:0696 211E00         2 364222714         move    a0,n6
P:0697 4DD600         2 364422711         move    y:(r6)-,x1
P:0698 66F400 rrrrrr  3 364722715         move    #FDataDriveStatus+1,r6
P:069A 000000         2 364922715         nop             ; (inserted)
P:069B 5EEE00         4 365322717         move    y:(r6+n6),a
P:069C 218800         2 365522718         move    a1,a0
P:069D 214C00         2 365722719         move    a2,a1
P:069E 68E020         2 365922720         add     x,a	                y:(r0),r0
P:069F 0BF080 rrrrrr  6 366522726         jsr     FDriveWriteSector
P:06A1 200003         2 366722727         tst     a
P:06A2 0AF0A2 rrrrrr  6 367322728         jne     L344
                            22729 
                            22730 ; 847  |                        {
                            22731 ; 848  |                            HandleFailReadSector();
                            22732 ; 849  |                            break;
                            22733 ; 850  |                        }
                            22734 ; 851  |
                            22735 ; 852  |
                            22736 ; 853  |                        // Initialize the Directory Control Block Structure
                            22737 ; 854  |                    pstDirCtrlBlk->wStartCxCurDir = stFileCtrlBlk.StartCluster;
                            22738 
                            22740 L340:
                            22753 
                            22754 ; 855  |                    pstDirCtrlBlk->StartSectCurDir = CxToSect(stFileCtrlBlk.StartCluster);
                                  
                            22755 
P:06A4 77F400 FFFFE9  3 367622740         move    #-23,n7
P:06A6 205F00         2 367822741         move    (r7)+
P:06A7 5EEF00         4 368222743         move    y:(r7+n7),a
P:06A8 205700         2 368422744         move    (r7)-
P:06A9 58EF00         4 368822746         move    y:(r7+n7),a0
P:06AA 77F400 FFFFF4  3 369122747         move    #-12,n7
P:06AC 000000         2 369322747         nop             ; (inserted)
P:06AD 6EEF00         4 369722749         move    y:(r7+n7),r6
P:06AE 77F400 FFFFE9  3 370022757         move    #-23,n7
P:06B0 205F00         2 370222758         move    (r7)+
P:06B1 585E00         2 370422751         move    a0,y:(r6)+
P:06B2 5C5600         2 370622752         move    a1,y:(r6)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 361

M:ADDR CODE           CYCLES LINE SOURCELINE
P:06B3 5EEF00         4 371022760         move    y:(r7+n7),a
P:06B4 205700         2 371222761         move    (r7)-
P:06B5 58EF00         4 371622763         move    y:(r7+n7),a0
P:06B6 0BF080 rrrrrr  6 372222764         jsr     FCxToSect
                            22771 
                            22772 ; 856  |                    pstDirCtrlBlk->NumberFiles = 0;
                            22773 
                            22783 
                            22784 ; 857  |                    pstDirCtrlBlk->Control = CLEAN;
                            22785 
                            22800 
                            22801 ; 858  |
                            22802 ; 859  |
                            22803 ; 860  |                    // Scan the directory and if bad cluster chain delete it from the dire
                                  ctory
                            22804 ; 861  |                    // record
                            22805 ; 862  |                    if ( ScanDirectory(pstDirCtrlBlk) != NOERROR )
                            22806 
P:06B8 3E081B         2 372422779         clr     b	                #8,n6
P:06B9 77F400 FFFFF1  3 372722765         move    #-15,n7
P:06BB 000000         2 372922765         nop             ; (inserted)
P:06BC 6EEF00         4 373322767         move    y:(r7+n7),r6
P:06BD 77F400 FFFFED  3 373622776         move    #-19,n7
P:06BF 585E00         2 373822769         move    a0,y:(r6)+
P:06C0 5C5600         2 374022770         move    a1,y:(r6)-
P:06C1 6EEF00         4 374422778         move    y:(r7+n7),r6
P:06C2 77F400 FFFFFD  3 374722787         move    #-3,n7
P:06C4 22D000         2 374922795         move    r6,r0
P:06C5 5D6E00         4 375322780         move    b1,y:(r6+n6)
P:06C6 6DEF00         4 375722789         move    y:(r7+n7),r5
P:06C7 77F400 FFFFED  3 376022792         move    #-19,n7
P:06C9 5D6500         2 376222791         move    b1,y:(r5)
P:06CA 6E6F00         4 376622794         move    r6,y:(r7+n7)
P:06CB 0BF080 rrrrrr  6 377222808         jsr     FScanDirectory
P:06CD 2A0000         2 377422811         move    #0,a2
P:06CE 200003         2 377622812         tst     a
P:06CF 0AF0AA rrrrrr  6 378222813         jeq     L341
                            22833 
                            22834 ; 863  |                    {
                            22835 ; 864  |                        if ( DeleteFileRecord(RecordCounter, Sect, pstDirCtrlBlk) != NOERR
                                  OR )
                            22836 
P:06D1 77F400 FFFFED  3 378522814         move    #-19,n7
P:06D3 000000         2 378722814         nop             ; (inserted)
P:06D4 68EF00         4 379122816         move    y:(r7+n7),r0
P:06D5 77F400 FFFFF2  3 379422819         move    #-14,n7
P:06D7 205F00         2 379622820         move    (r7)+
P:06D8 5EEF00         4 380022822         move    y:(r7+n7),a
P:06D9 205700         2 380222823         move    (r7)-
P:06DA 58EF00         4 380622825         move    y:(r7+n7),a0
P:06DB 77F400 FFFFF9  3 380922828         move    #-7,n7
P:06DD 000000         2 381122828         nop             ; (inserted)
P:06DE 5FEF00         4 381522830         move    y:(r7+n7),b
P:06DF 0BF080 rrrrrr  6 382122838         jsr     FDeleteFileRecord
P:06E1 2A0000         2 382322845         move    #0,a2
P:06E2 200003         2 382522846         tst     a
P:06E3 0AF0AA rrrrrr  6 383122847         jeq     L353
                            22848 
                            22849 ; 865  |                        {
                            22850 ; 866  |                            HandleFailReadSector();
                            22851 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 362

M:ADDR CODE           CYCLES LINE SOURCELINE
P:06E5 0AF080 rrrrrr  6 383722853         jmp     L344
                            22854 
                            22855 ; 867  |                            break;
                            22856 ; 868  |                        }
                            22857 ; 869  |                        else
                            22858 ; 870  |                        {
                            22859 ; 871  |                            Flag=1;
                            22860 ; 872  |                            continue;       // go process the next sub directory
                            22861 ; 873  |                        }
                            22862 ; 874  |                    }
                            22863 
                            22865 L341:
                            22870 
                            22871 ; 875  |
                            22872 ; 876  |
                            22873 ; 877  |                    // Count Files in current directory
                            22874 ; 878  |                    if ( ScanFilesAndSubDirs(pstDirCtrlBlk) != NOERROR )
                            22875 
P:06E7 77F400 FFFFED  3 384022865         move    #-19,n7
P:06E9 000000         2 384222865         nop             ; (inserted)
P:06EA 68EF00         4 384622867         move    y:(r7+n7),r0
P:06EB 0BF080 rrrrrr  6 385222877         jsr     FScanFilesAndSubDirs
P:06ED 2A0000         2 385422880         move    #0,a2
P:06EE 200003         2 385622881         tst     a
P:06EF 0AF0AA rrrrrr  6 386222882         jeq     L361
                            22883 
                            22884 ; 879  |                    {
                            22885 ; 880  |                        HandleFailReadSector();
                            22886 
P:06F1 0BF080 rrrrrr  6 386822888 L344:   jsr     FHandleFailReadSector
                            22889 
                            22890 ; 881  |                        break;
                            22891 
P:06F3 0AF080 rrrrrr  6 387422893         jmp     L363
                            22894 
                            22895 ; 882  |                    }
                            22896 ; 883  |
                            22897 ; 884  |                }
                            22898 ; 885  |
                            22899 ; 886  |                else if ( !(bTempByte & 0x08) )
                            22900 
                            22902 L345:
P:06F5 0ADD23 rrrrrr  6 388022904         jset    #3,n5,L361
                            22905 
                            22906 ; 887  |                {
                            22907 ; 888  |                    if ( GetFileCtrlBlk(RecordCounter, Sect, pstDirCtrlBlk, &stFileCtrlBlk
                                  ) != NOERROR )
                            22908 
P:06F7 77F400 FFFFE7  3 388322910         move    #-25,n7
P:06F9 000000         2 388522910         nop             ; (inserted)
P:06FA 044F14         4 388922912         lua     (r7)+n7,r4
P:06FB 77F400 FFFFED  3 389222913         move    #-19,n7
P:06FD 000000         2 389422913         nop             ; (inserted)
P:06FE 68EF00         4 389822915         move    y:(r7+n7),r0
P:06FF 77F400 FFFFF2  3 390122918         move    #-14,n7
P:0701 205F00         2 390322919         move    (r7)+
P:0702 5EEF00         4 390722921         move    y:(r7+n7),a
P:0703 205700         2 390922922         move    (r7)-
P:0704 58EF00         4 391322924         move    y:(r7+n7),a0
P:0705 77F400 FFFFF9  3 391622927         move    #-7,n7
P:0707 000000         2 391822927         nop             ; (inserted)
P:0708 5FEF00         4 392222929         move    y:(r7+n7),b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 363

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0709 0BF080 rrrrrr  6 392822932         jsr     FGetFileCtrlBlk
P:070B 2A0000         2 393022940         move    #0,a2
P:070C 200003         2 393222941         tst     a
P:070D 0AF0A2 rrrrrr  6 393822942         jne     L368
                            22943 
                            22944 ; 889  |                        return(!NOERROR);   // Can not read the sector
                            22945 ; 890  |                        
                            22946 ; 891  |                    /* To improve speed and make it better, we should check for the specia
                                  l case
                            22947 ; 892  |                    where start cluster and/or size equals to 0 */
                            22948 ; 893  |
                            22949 ; 894  |                    // Allow "placeholder" file entries to remain; these are empty files t
                                  hat exist, but are 0-length, with no cluster yet allocated.
                            22950 ; 895  |                    if( (stFileCtrlBlk.StartCluster == 0) && (stFileCtrlBlk.Size == 0) )
                            22951 
P:070F 77F400 FFFFE9  3 394122953         move    #-23,n7
P:0711 205F00         2 394322954         move    (r7)+
P:0712 5EEF00         4 394722956         move    y:(r7+n7),a
P:0713 2A0000         2 394922960         move    #0,a2
P:0714 205700         2 395122957         move    (r7)-
P:0715 58EF00         4 395522959         move    y:(r7+n7),a0
P:0716 200003         2 395722961         tst     a
P:0717 0AF0A2 rrrrrr  6 396322962         jne     L346
P:0719 77F400 FFFFEB  3 396622963         move    #-21,n7
P:071B 205F00         2 396822964         move    (r7)+
P:071C 5FEF00         4 397222966         move    y:(r7+n7),b
P:071D 2B0000         2 397422970         move    #0,b2
P:071E 205700         2 397622967         move    (r7)-
P:071F 59EF00         4 398022969         move    y:(r7+n7),b0
P:0720 20000B         2 398222971         tst     b
P:0721 0AF0AA rrrrrr  6 398822972         jeq     L361
                            22973 
                            22974 ; 896  |                    {
                            22975 ; 897  |                         // Do nothing. Skip over it
                            22976 ; 898  |                         continue;
                            22977 ; 899  |                    }
                            22978 ; 900  |
                            22979 ; 901  |                    if( stFileCtrlBlk.StartCluster == 0 || stFileCtrlBlk.Size == 0 )
                            22980 
P:0723 2A0000         2 399022982 L346:   move    #0,a2
P:0724 200003         2 399222983         tst     a
P:0725 0AF0AA rrrrrr  6 399822984         jeq     L352
P:0727 77F400 FFFFEB  3 400122985         move    #-21,n7
P:0729 205F00         2 400322986         move    (r7)+
P:072A 5FEF00         4 400722988         move    y:(r7+n7),b
P:072B 2B0000         2 400922992         move    #0,b2
P:072C 205700         2 401122989         move    (r7)-
P:072D 59EF00         4 401522991         move    y:(r7+n7),b0
P:072E 20000B         2 401722993         tst     b
P:072F 0AF0AA rrrrrr  6 402322994         jeq     L352
                            22995 
                            22996 ; 902  |                    {
                            22997 ; 903  |                        if ( DeleteFileRecord(RecordCounter, Sect, pstDirCtrlBlk) != NOERR
                                  OR )
                            22998 ; 904  |                            return(!NOERROR);   // Can not write to the sector
                            22999 ; 905  |                        else
                            23000 ; 906  |                        {
                            23001 ; 907  |                            Flag=1;
                            23002 ; 908  |                            continue;
                            23003 ; 909  |                        }
                            23004 ; 910  |                    }
                            23005 ; 911  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 364

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23006 ; 912  |                    // Count Length of file in clusters and check crosslink file and set b
                                  it for the file
                            23007 ; 913  |                    else if ( (wClusterCount =  CheckCrossLinkFile(stFileCtrlBlk.StartClus
                                  ter,pstDirCtrlBlk->Device)) < 0 )
                            23008 
P:0731 77F400 FFFFED  3 402623010         move    #-19,n7
P:0733 000000         2 402823010         nop             ; (inserted)
P:0734 6EEF00         4 403223012         move    y:(r7+n7),r6
P:0735 000000         2 403423012         nop             ; (inserted)
P:0736 5FE600         2 403623014         move    y:(r6),b
P:0737 0BF080 rrrrrr  6 404223015         jsr     FCheckCrossLinkFile
P:0739 218500         2 404423017         move    a1,x1
P:073A 210469         2 404623018         tfr     x1,b	                a0,x0
P:073B 208900         2 404823019         move    x0,b0
P:073C 20000B         2 405023021         tst     b
P:073D 0AF0A9 rrrrrr  6 405623022         jlt     L352
                            23023 
                            23024 ; 914  |                    {
                            23025 ; 915  |                        if ( DeleteFileRecord(RecordCounter, Sect, pstDirCtrlBlk) != NOERR
                                  OR )
                            23026 ; 916  |                            return(!NOERROR);   // Can not write to the sector
                            23027 ; 917  |                        else
                            23028 ; 918  |                        {
                            23029 ; 919  |                            Flag=1;
                            23030 ; 920  |                            continue;
                            23031 ; 921  |                        }
                            23032 ; 922  |
                            23033 ; 923  |                    }
                            23034 ; 924  |
                            23035 ; 925  |                    else
                            23036 ; 926  |                    {
                            23037 ; 927  |                        // First take care of the 0 file lenght special case
                            23038 ; 928  |                        if ( wClusterCount != stFileCtrlBlk.Size )
                            23039 
P:073F 77F400 FFFFEB  3 405923044         move    #-21,n7
P:0741 205F69         2 406123041         tfr     x1,b	                (r7)+
P:0742 2B0000         2 406323052         move    #0,b2
P:0743 208900         2 406523042         move    x0,b0
P:0744 5EEF00         4 406923047         move    y:(r7+n7),a
P:0745 2A0000         2 407123051         move    #0,a2
P:0746 205700         2 407323048         move    (r7)-
P:0747 58EF00         4 407723050         move    y:(r7+n7),a0
P:0748 20000D         2 407923053         cmp     a,b
P:0749 0AF0AA rrrrrr  6 408523054         jeq     L361
                            23055 
                            23056 ; 929  |                        {
                            23057 ; 930  |                            // Calculates size of file on disk
                            23058 ; 931  |                            dwFileSizeDiskBytes = wClusterCount * wCxSizeBytes;
                            23059 
                            23085 
                            23086 ; 932  |
                            23087 ; 933  |                            // File size must be greater than size of (NumberCx - 1)
                            23088 ; 934  |                            // and smaller than size of NumberCx
                            23089 ; 935  |                            if ( (stFileCtrlBlk.Size > dwFileSizeDiskBytes) || (stFileCtrl
                                  Blk.Size < (dwFileSizeDiskBytes-wCxSizeBytes)) )
                            23090 
P:074B 77F400 FFFFFA  3 408823061         move    #-6,n7
P:074D 205F00         2 409023062         move    (r7)+
P:074E 4D6F00         4 409423064         move    x1,y:(r7+n7)
P:074F 205700         2 409623065         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 365

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0750 4C6F00         4 410023067         move    x0,y:(r7+n7)
P:0751 77F400 FFFFEF  3 410323068         move    #-17,n7
P:0753 205F00         2 410523069         move    (r7)+
P:0754 4FEF00         4 410923071         move    y:(r7+n7),y1
P:0755 205700         2 411123072         move    (r7)-
P:0756 4EEF00         4 411523074         move    y:(r7+n7),y0
P:0757 0040F8         2 411723075         ori     #$40,mr
P:0758 205F00         2 411923093         move    (r7)+
P:0759 77F4D0 FFFFEB  3 412223077         mpy     y0,x0,a	                #-21,n7
P:075B 2109E2         2 412423078         mac     x1,y0,a a0,b0
P:075C 2000C2         2 412623079         mac     x0,y1,a
P:075D 00BFB8         2 412823080         andi    #$BF,mr
P:075E 210D00         2 413023081         move    a0,b1
P:075F 218B00         2 413223082         move    a1,b2
P:0760 5EEF2A         4 413623083         asr     b	                y:(r7+n7),a
P:0761 2A0000         2 413823100         move    #0,a2
P:0762 2B0000         2 414023099         move    #0,b2
P:0763 205700         2 414223096         move    (r7)-
P:0764 58EF00         4 414623098         move    y:(r7+n7),a0
P:0765 200005         2 414823101         cmp     b,a
P:0766 0AF0A7 rrrrrr  6 415423102         jgt     L347
P:0768 77F400 FFFFEF  3 415723103         move    #-17,n7
P:076A 205F00         2 415923104         move    (r7)+
P:076B 4FEF00         4 416323106         move    y:(r7+n7),y1
P:076C 205700         2 416523107         move    (r7)-
P:076D 4EEF00         4 416923109         move    y:(r7+n7),y0
P:076E 77F400 FFFFEB  3 417223112         move    #-21,n7
P:0770 205F3C         2 417423110         sub     y,b	                (r7)+
P:0771 2B0000         2 417623119         move    #0,b2
P:0772 5EEF00         4 418023115         move    y:(r7+n7),a
P:0773 2A0000         2 418223120         move    #0,a2
P:0774 205700         2 418423116         move    (r7)-
P:0775 58EF00         4 418823118         move    y:(r7+n7),a0
P:0776 200005         2 419023121         cmp     b,a
P:0777 0AF0A1 rrrrrr  6 419623122         jge     L361
                            23123 
                            23124 ; 936  |                            {
                            23125 ; 937  |
                            23126 ; 938  |                                wCluster = stFileCtrlBlk.StartCluster;
                            23127 
                            23129 L347:
                            23137 
                            23138 ; 939  |                                for ( i = 0; i < wClusterCount ; i++ )
                            23139 
P:0779 77F400 FFFFE9  3 419923129         move    #-23,n7
P:077B 205F1B         2 420123141         clr     b	                (r7)+
P:077C 4FEF00         4 420523132         move    y:(r7+n7),y1
P:077D 205700         2 420723133         move    (r7)-
P:077E 4EEF00         4 421123135         move    y:(r7+n7),y0
P:077F 0AF080 rrrrrr  6 421723143         jmp     L349
                            23144 
                            23145 ; 940  |                                {
                            23146 ; 941  |                                    UpdateBit(wCluster, FATEntryStatus,pstDirCtrlBlk->Devi
                                  ce,stPartitionBootSector.TypeFileSystem,FREE_BIT);
                            23147 
                            23149 L348:
P:0781 68F000 rrrrrr  3 422023152         move    y:FFATEntryStatus,r0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 366

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0783 77F471 FFFFED  3 422323166         tfr     y1,a	                #-19,n7
P:0785 4CF000 rrrrrr  3 422623158         move    y:FstPartitionBootSector,x0
P:0787 6EEF00         4 423023155         move    y:(r7+n7),r6
P:0788 77F400 FFFFFC  3 423323159         move    #-4,n7
P:078A 20C800         2 423523167         move    y0,a0
P:078B 205F00         2 423723160         move    (r7)+
P:078C 5FE600         2 423923157         move    y:(r6),b
P:078D 4F6F00         4 424323162         move    y1,y:(r7+n7)
P:078E 205700         2 424523163         move    (r7)-
P:078F 4E6F00         4 424923165         move    y0,y:(r7+n7)
P:0790 46F400 000002  3 425223172         move    #>2,y0
P:0792 0BF080 rrrrrr  6 425823173         jsr     FUpdateBit
                            23176 
                            23177 ; 942  |                                    wCluster = GetNextCxFromFat(wCluster);
                            23178 
P:0794 6EF000 rrrrrr  3 426123180         move    y:FGetNextCxFromFat,r6
P:0796 77F400 FFFFFC  3 426423181         move    #-4,n7
P:0798 205F00         2 426623182         move    (r7)+
P:0799 5EEF00         4 427023184         move    y:(r7+n7),a
P:079A 205700         2 427223185         move    (r7)-
P:079B 58EF00         4 427623187         move    y:(r7+n7),a0
P:079C 0BE680         4 428023188         jsr     (r6)
P:079D 77F400 FFFFFE  3 428323196         move    #-2,n7
P:079F 210600         2 428523192         move    a0,y0
P:07A0 218700         2 428723193         move    a1,y1
P:07A1 205F00         2 428923197         move    (r7)+
P:07A2 5EEF00         4 429323199         move    y:(r7+n7),a
P:07A3 205700         2 429523200         move    (r7)-
P:07A4 58EF00         4 429923202         move    y:(r7+n7),a0
P:07A5 000008         2 430123203         inc     a
P:07A6 200009         2 430323206         tfr     a,b
                            23209 L349:
P:07A7 77F400 FFFFFE  3 430623209         move    #-2,n7
P:07A9 205F00         2 430823210         move    (r7)+
P:07AA 5D6F00         4 431223212         move    b1,y:(r7+n7)
P:07AB 205700         2 431423213         move    (r7)-
P:07AC 596F00         4 431823215         move    b0,y:(r7+n7)
P:07AD 77F400 FFFFFA  3 432123216         move    #-6,n7
P:07AF 205F00         2 432323217         move    (r7)+
P:07B0 5EEF00         4 432723219         move    y:(r7+n7),a
P:07B1 205700         2 432923220         move    (r7)-
P:07B2 58EF00         4 433323222         move    y:(r7+n7),a0
P:07B3 20000D         2 433523223         cmp     a,b
P:07B4 0AF0A9 rrrrrr  6 434123226         jlt     L348
                            23227 
                            23228 ; 943  |                                }
                            23229 ; 944  |                                if ( DeleteFileRecord(RecordCounter,Sect, pstDirCtrlBlk) !
                                  = NOERROR )
                            23230 
                            23232 L352:
P:07B6 77F400 FFFFED  3 434423232         move    #-19,n7
P:07B8 000000         2 434623232         nop             ; (inserted)
P:07B9 68EF00         4 435023234         move    y:(r7+n7),r0
P:07BA 77F400 FFFFF2  3 435323237         move    #-14,n7
P:07BC 205F00         2 435523238         move    (r7)+
P:07BD 5EEF00         4 435923240         move    y:(r7+n7),a
P:07BE 205700         2 436123241         move    (r7)-
P:07BF 58EF00         4 436523243         move    y:(r7+n7),a0
P:07C0 77F400 FFFFF9  3 436823246         move    #-7,n7
P:07C2 000000         2 437023246         nop             ; (inserted)
P:07C3 5FEF00         4 437423248         move    y:(r7+n7),b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 367

M:ADDR CODE           CYCLES LINE SOURCELINE
P:07C4 0BF080 rrrrrr  6 438023251         jsr     FDeleteFileRecord
P:07C6 2A0000         2 438223259         move    #0,a2
P:07C7 200003         2 438423260         tst     a
P:07C8 0AF0A2 rrrrrr  6 439023261         jne     L368
                            23262 
                            23263 ; 945  |                                    return(!NOERROR);
                            23264 ; 946  |                                else
                            23265 ; 947  |                                {
                            23266 ; 948  |                                    Flag=1;
                            23267 
                            23269 L353:
P:07CA 290100         2 439223269         move    #1,b0
P:07CB 597000 rrrrrr  3 439523270         move    b0,y:FFlag
                            23272 L361:
P:07CD 77F400 FFFFF9  3 439823272         move    #-7,n7
P:07CF 44F400 000001  3 440123275         move    #>1,x0
P:07D1 5FEF00         4 440523274         move    y:(r7+n7),b
P:07D2 200048         2 440723276         add     x0,b
P:07D3 21AE00         2 440923279         move    b1,a
                            23282 L362:
P:07D4 2A0000         2 441123287         move    #0,a2
P:07D5 57F000 rrrrrr  3 441423282         move    x:FcachedDirRecordsPerSector,b
P:07D7 2B0000         2 441623286         move    #0,b2
P:07D8 77F405 FFFFF9  3 441923288         cmp     b,a	                #-7,n7
P:07DA 000000         2 442123288         nop             ; (inserted)
P:07DB 5C6F00         4 442523285         move    a1,y:(r7+n7)
P:07DC 0AF0A9 rrrrrr  6 443123291         jlt     L337
                            23292 
                            23293 ; 949  |                                    continue;
                            23294 ; 950  |                                }
                            23295 ; 951  |                            }
                            23296 ; 952  |                        }
                            23297 ; 953  |                    }
                            23298 ; 954  |
                            23299 ; 955  |                } //else if ( !(bTempByte & 0x08) )
                            23300 ; 956  |
                            23301 ; 957  |            } //for ( RecordCounter = 0; RecordCounter < DIR_REC_PER_SECTOR; RecordCounter
                                  ++ )
                            23302 
                            23304 L363:
P:07DE 77F400 FFFFF2  3 443423306         move    #-14,n7
P:07E0 44F400 000001  3 443723323         move    #>1,x0
P:07E2 205F00         2 443923307         move    (r7)+
P:07E3 5FEF00         4 444323309         move    y:(r7+n7),b
P:07E4 205700         2 444523310         move    (r7)-
P:07E5 59EF00         4 444923312         move    y:(r7+n7),b0
P:07E6 77F400 FFFFF8  3 445223320         move    #-8,n7
P:07E8 000009         2 445423313         inc     b
P:07E9 212600         2 445623316         move    b0,y0
P:07EA 21A700         2 445823317         move    b1,y1
P:07EB 5FEF00         4 446223322         move    y:(r7+n7),b
P:07EC 77F448 FFFFEE  3 446523324         add     x0,b	                #-18,n7
P:07EE 000000         2 446723324         nop             ; (inserted)
P:07EF 5EEF00         4 447123329         move    y:(r7+n7),a
P:07F0 200040         2 447323330         add     x0,a
P:07F1 5C6F00         4 447723333         move    a1,y:(r7+n7)
                            23336 L364:
P:07F2 77F400 FFFFF7  3 448023336         move    #-9,n7
P:07F4 2B0000         2 448223343         move    #0,b2
P:07F5 5EEF00         4 448623338         move    y:(r7+n7),a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 368

M:ADDR CODE           CYCLES LINE SOURCELINE
P:07F6 2A0000         2 448823342         move    #0,a2
P:07F7 77F40D FFFFF8  3 449123344         cmp     a,b	                #-8,n7
P:07F9 000000         2 449323344         nop             ; (inserted)
P:07FA 5D6F00         4 449723341         move    b1,y:(r7+n7)
P:07FB 0AF0A9 rrrrrr  6 450323347         jlt     L336
                            23348 
                            23349 ; 958  |
                            23350 ; 959  |        } //for ( n = 0 ; n < wLoopCount ; Sect++, n++, SectCounter++ )
                            23351 ; 960  |
                            23352 ; 961  |
                            23353 ; 962  |        // For loop terminated because need another cluster
                            23354 ; 963  |        // If no other cluster available or at the root => No more entries free
                            23355 ; 964  |        // otherwise, keep searching directory records in the next cluster
                            23356 ; 965  |        //      CurCx=0;
                            23357 ; 966  |        if ( CurCx == 0 )
                            23358 
P:07FD 77F400 FFFFF5  3 450623360         move    #-11,n7
P:07FF 205F00         2 450823361         move    (r7)+
P:0800 5EEF00         4 451223363         move    y:(r7+n7),a
P:0801 2A0000         2 451423367         move    #0,a2
P:0802 205700         2 451623364         move    (r7)-
P:0803 58EF00         4 452023366         move    y:(r7+n7),a0
P:0804 200003         2 452223368         tst     a
P:0805 0AF0AA rrrrrr  6 452823371         jeq     L372
                            23372 
                            23373 ; 967  |        {
                            23374 ; 968  |            Flag=1;
                            23375 ; 969  |            nestinglevel--;
                            23376 ; 970  |            return(NOERROR); // CurCx = 0 => Current directory is the root
                            23377 ; 971  |        }                 // Therefore no other clusters available
                            23378 ; 972  |        // The root is full of directory entries
                            23379 ; 973  |        n++;
                            23380 ; 974  |        CurCx = GetNextCxFromFat(CurCx);
                            23381 
P:0807 6EF000 rrrrrr  3 453123383         move    y:FGetNextCxFromFat,r6
P:0809 000000         2 453323383         nop             ; (inserted)
P:080A 0BE680         4 453723385         jsr     (r6)
                            23389 
                            23390 ; 975  |        //      Rootdircluster = CurCx;
                            23391 ; 976  |
                            23392 ; 977  |        if ( CurCx <= 1 )          // Cx return is not valid. Error!
                            23393 
P:080B 2F0000         2 453923395         move    #0,b
P:080C 000009         2 454123396         inc     b
P:080D 200005         2 454323397         cmp     b,a
P:080E 0AF0A7 rrrrrr  6 454923398         jgt     L369
                            23399 
                            23400 ; 978  |            return(!NOERROR);
                            23401 
                            23403 L368:
P:0810 56F400 000001  3 455223403         move    #>1,a
P:0812 0AF080 rrrrrr  6 455823405         jmp     L374
                            23406 L369:
                            23420 
                            23421 ; 979  |
                            23422 ; 980  |        if ( IsLastCx(CurCx) )     // That's the end of it
                            23423 
P:0814 77F400 FFFFF5  3 456123409         move    #-11,n7
P:0816 205F00         2 456323410         move    (r7)+
P:0817 5C6F00         4 456723412         move    a1,y:(r7+n7)
P:0818 205700         2 456923413         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 369

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0819 586F00         4 457323415         move    a0,y:(r7+n7)
P:081A 0BF080 rrrrrr  6 457923425         jsr     FIsLastCx
P:081C 77F400 FFFFF5  3 458223430         move    #-11,n7
P:081E 2A0000         2 458423428         move    #0,a2
P:081F 205F03         2 458623429         tst     a	                (r7)+
P:0820 5EEF00         4 459023433         move    y:(r7+n7),a
P:0821 205700         2 459223434         move    (r7)-
P:0822 58EF00         4 459623436         move    y:(r7+n7),a0
P:0823 0AF0A2 rrrrrr  6 460223439         jne     L372
                            23444 
                            23445 ; 981  |        {
                            23446 ; 982  |            Flag=1;
                            23447 ; 983  |            nestinglevel--;
                            23448 ; 984  |            return(NOERROR);
                            23449 ; 985  |        }
                            23450 ; 986  |
                            23451 ; 987  |        // stmp3686 solution: consider non-user-data 2 initial clx & non-user-data initial
                                   sectors. JN
                            23452 ; 988  |        Sect = CxToSect(CurCx);
                            23453 
P:0825 0BF080 rrrrrr  6 460823455         jsr     FCxToSect
                            23470 
                            23471 ; 989  |    }while ( 1 );
                            23472 
P:0827 77F400 FFFFF5  3 461123461         move    #-11,n7
P:0829 210600         2 461323458         move    a0,y0
P:082A 218700         2 461523459         move    a1,y1
P:082B 205F00         2 461723462         move    (r7)+
P:082C 5EEF00         4 462123464         move    y:(r7+n7),a
P:082D 205700         2 462323465         move    (r7)-
P:082E 58EF00         4 462723467         move    y:(r7+n7),a0
P:082F 0AF080 rrrrrr  6 463323474         jmp     L333
                            23476 L372:
P:0831 290100         2 463523476         move    #1,b0
P:0832 597000 rrrrrr  3 463823477         move    b0,y:FFlag
                            23479 L373:
                            23486 
                            23487 ; 990  |}
                            23488 
P:0834 5EF000 rrrrrr  3 464123479         move    y:Fnestinglevel,a
P:0836 44F400 000001  3 464423481         move    #>1,x0
P:0838 200044         2 464623482         sub     x0,a
P:0839 5C7013 rrrrrr  3 464923485         clr     a	                a1,y:Fnestinglevel
                            23490 L374:
P:083B 77F400 FFFFE6  3 465223490         move    #-26,n7
P:083D 000000         2 465423490         nop             ; (inserted)
P:083E 05EF7C         4 465823492         movec   y:(r7+n7),ssh
P:083F 204F00         2 466023494         move    (r7)+n7
P:0840 00000C         4 466423496         rts
                            23505 
                            23506 ; 991  |
                            23507 ; 992  |
                            23508 ; 993  |///////////////////////////////////////////////////////////////////////////////
                            23509 ; 994  |//
                            23510 ; 995  |//>  Name:           GetFileCtrlBlk
                            23511 ; 996  |//
                            23512 ; 997  |//   Type:           Function
                            23513 ; 998  |//
                            23514 ; 999  |//   Description:    Fills the File Control Block structure for the specified record
                            23515 ; 1000 |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 370

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23516 ; 1001 |//
                            23517 ; 1002 |//   Inputs:         bRecordNumber      : Record number in relation to the sector (0 to 31
                                  )
                            23518 ; 1003 |//                   wSectNumber        : Sector Number where record is located
                            23519 ; 1004 |//                   *pstDirCtrlBlk     : Pointer to Directory Ctrl Block Structure
                            23520 ; 1005 |//                   *pstFileCtrlBlk    : Pointer to the File Control Block structure to f
                                  ill
                            23521 ; 1006 |//
                            23522 ; 1007 |//   Outputs:        Result of operation
                            23523 ; 1008 |//                     NOERROR -> Operation successful
                            23524 ; 1009 |//                     !NOERROR -> Impossible to read the sector
                            23525 ; 1010 |//
                            23526 ; 1011 |//   Notes:          none
                            23527 ; 1012 |//<
                            23528 ; 1013 |///////////////////////////////////////////////////////////////////////////////
                            23529 ; 1014 |BOOL _reentrant GetFileCtrlBlk(BYTE bRecordNumber, DWORD wSectNumber, DIR_CTRL_BLK *pstDir
                                  CtrlBlk, FILE_CTRL_BLK *pstFileCtrlBlk)
                            23530 ; 1015 |{
                            23531 
                            23538 FGetFileCtrlBlk:
                            23560 
                            23561 ; 1016 |    WORD wStartRecByte;
                            23562 ; 1017 |    WORD clusterlo,clusterhi;
                            23563 
                            23582 
                            23583 ; 1018 |    if ( ReadDirSector(wSectNumber, pstDirCtrlBlk) != NOERROR )
                            23584 
P:0841 055F7C         2 466623539         movec   ssh,y:(r7)+
P:0842 3F0600         2 466823542         move    #6,n7
P:0843 000000         2 467023542         nop             ; (inserted)
P:0844 204F00         2 467223544         move    (r7)+n7
P:0845 77F400 FFFFFC  3 467523565         move    #-4,n7
P:0847 000000         2 467723565         nop             ; (inserted)
P:0848 6C6F00         4 468123567         move    r4,y:(r7+n7)
P:0849 77F400 FFFFFA  3 468423570         move    #-6,n7
P:084B 000000         2 468623570         nop             ; (inserted)
P:084C 5D6F00         4 469023572         move    b1,y:(r7+n7)
P:084D 77F400 FFFFFB  3 469323575         move    #-5,n7
P:084F 000000         2 469523575         nop             ; (inserted)
P:0850 686F00         4 469923577         move    r0,y:(r7+n7)
P:0851 0BF080 rrrrrr  6 470523586         jsr     FReadDirSector
P:0853 2A0000         2 470723590         move    #0,a2
P:0854 200003         2 470923591         tst     a
P:0855 0AF0AA rrrrrr  6 471523592         jeq     L375
                            23593 
                            23594 ; 1019 |        return(!NOERROR);
                            23595 
P:0857 56F400 000001  3 471823597         move    #>1,a
P:0859 0AF080 rrrrrr  6 472423598         jmp     L376
                            23599 
                            23600 ; 1020 |
                            23601 ; 1021 |    // Calculates the position of record 1st byte
                            23602 ; 1022 |    wStartRecByte = bRecordNumber * BYTES_PER_DIR_RECORD;
                            23603 
                            23605 L375:
                            23615 
                            23616 ; 1023 |
                            23617 ; 1024 |    // Fills the File Contol Block Structure
                            23618 ; 1025 |    pstFileCtrlBlk->StartNameCharacter = FSGetByte((void *)pstDirCtrlBlk->pwBuffer,wStartR
                                  ecByte, X_MEMORY);
                            23619 
P:085B 3E0900         2 472623621         move    #9,n6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 371

M:ADDR CODE           CYCLES LINE SOURCELINE
P:085C 77F400 FFFFFA  3 472923605         move    #-6,n7
P:085E 47F400 000020  3 473223608         move    #>$20,y1
P:0860 4EEF00         4 473623607         move    y:(r7+n7),y0
P:0861 77F400 FFFFFB  3 473923622         move    #-5,n7
P:0863 000000         2 474123622         nop             ; (inserted)
P:0864 6EEFB8         4 474523609         mpy     y0,y1,b	                y:(r7+n7),r6
P:0865 77F42A FFFFFE  3 474823610         asr     b	                #-2,n7
P:0867 204E00         2 475023626         move    (r6)+n6
P:0868 212E1B         2 475223638         clr     b	                b0,a
P:0869 6E6F00         4 475623631         move    r6,y:(r7+n7)
P:086A 68E600         2 475823632         move    y:(r6),r0
P:086B 77F400 FFFFFD  3 476123633         move    #-3,n7
P:086D 000000         2 476323633         nop             ; (inserted)
P:086E 5C6F00         4 476723635         move    a1,y:(r7+n7)
P:086F 218E00         2 476923639         move    a1,a
P:0870 0BF080 rrrrrr  6 477523640         jsr     FFSGetByte
                            23648 
                            23649 ; 1026 |    pstFileCtrlBlk->Attribut = FSGetByte((void *)pstDirCtrlBlk->pwBuffer,wStartRecByte + D
                                  IR_REC_ATT_POS,X_MEMORY);
                            23650 
P:0872 77F400 FFFFFC  3 477823643         move    #-4,n7
P:0874 000000         2 478023643         nop             ; (inserted)
P:0875 6EEF00         4 478423645         move    y:(r7+n7),r6
P:0876 77F400 FFFFFE  3 478723652         move    #-2,n7
P:0878 5E6600         2 478923647         move    a,y:(r6)
P:0879 6EEF00         4 479323654         move    y:(r7+n7),r6
P:087A 77F400 FFFFFD  3 479623657         move    #-3,n7
P:087C 56F400 00000B  3 479923660         move    #>11,a
P:087E 5FEF00         4 480323659         move    y:(r7+n7),b
P:087F 68E610         2 480523661         add     b,a	                y:(r6),r0
P:0880 218E1B         2 480723662         clr     b	                a1,a
P:0881 0BF080 rrrrrr  6 481323664         jsr     FFSGetByte
                            23671 
                            23672 ; 1027 |    //   pstFileCtrlBlk->StartCluster =  FSGetWord((void *)pstDirCtrlBlk->pwBuffer,wStartR
                                  ecByte + DIR_REC_FIRST_CX_POS,X_MEMORY);
                            23673 ; 1028 |    pstFileCtrlBlk->Size = FSGetDWord((void *)pstDirCtrlBlk->pwBuffer,wStartRecByte + DIR_
                                  REC_SIZE_POS,X_MEMORY);
                            23674 
P:0883 77F400 FFFFFC  3 481623665         move    #-4,n7
P:0885 000000         2 481823665         nop             ; (inserted)
P:0886 6EEF00         4 482223667         move    y:(r7+n7),r6
P:0887 77F400 FFFFFE  3 482523676         move    #-2,n7
P:0889 205E00         2 482723669         move    (r6)+
P:088A 5E5600         2 482923670         move    a,y:(r6)-
P:088B 6EEF00         4 483323678         move    y:(r7+n7),r6
P:088C 77F400 FFFFFD  3 483623681         move    #-3,n7
P:088E 56F400 00001C  3 483923684         move    #>28,a
P:0890 4EEF00         4 484323683         move    y:(r7+n7),y0
P:0891 68E650         2 484523685         add     y0,a	                y:(r6),r0
P:0892 218E1B         2 484723686         clr     b	                a1,a
P:0893 0BF080 rrrrrr  6 485323688         jsr     FFSGetDWord
                            23697 
                            23698 ; 1029 |    clusterlo =  FSGetWord((void *)pstDirCtrlBlk->pwBuffer,wStartRecByte + DIR_REC_FIRST_C
                                  X_POS,X_MEMORY);
                            23699 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 372

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0895 3E0400         2 485523689         move    #4,n6
P:0896 77F400 FFFFFC  3 485823690         move    #-4,n7
P:0898 000000         2 486023690         nop             ; (inserted)
P:0899 6EEF00         4 486423692         move    y:(r7+n7),r6
P:089A 77F400 FFFFFE  3 486723701         move    #-2,n7
P:089C 204E00         2 486923694         move    (r6)+n6
P:089D 585E00         2 487123695         move    a0,y:(r6)+
P:089E 5C5600         2 487323696         move    a1,y:(r6)-
P:089F 6EEF00         4 487723703         move    y:(r7+n7),r6
P:08A0 77F400 FFFFFD  3 488023706         move    #-3,n7
P:08A2 56F400 00001A  3 488323709         move    #>26,a
P:08A4 4CEF00         4 488723708         move    y:(r7+n7),x0
P:08A5 68E640         2 488923710         add     x0,a	                y:(r6),r0
P:08A6 218E1B         2 489123711         clr     b	                a1,a
P:08A7 0BF080 rrrrrr  6 489723713         jsr     FFSGetWord
                            23718 
                            23719 ; 1030 |    clusterhi =  FSGetWord((void *)pstDirCtrlBlk->pwBuffer,wStartRecByte + DIR_REC_FIRST_C
                                  X_HIGH_POS,X_MEMORY);
                            23720 
P:08A9 045FA0         2 489923714         movec   m0,n7
P:08AA 46F400 000014  3 490223730         move    #>20,y0
P:08AC 5E6F00         4 490623716         move    a,y:(r7+n7)
P:08AD 77F400 FFFFFE  3 490923722         move    #-2,n7
P:08AF 000000         2 491123722         nop             ; (inserted)
P:08B0 6EEF00         4 491523724         move    y:(r7+n7),r6
P:08B1 77F400 FFFFFD  3 491823727         move    #-3,n7
P:08B3 68E600         2 492023726         move    y:(r6),r0
P:08B4 5EEF00         4 492423729         move    y:(r7+n7),a
P:08B5 200050         2 492623731         add     y0,a
P:08B6 218E1B         2 492823735         clr     b	                a1,a
P:08B7 0BF080 rrrrrr  6 493423737         jsr     FFSGetWord
                            23740 
                            23741 ; 1031 |    pstFileCtrlBlk->StartCluster =  (DWORD)clusterlo +(((DWORD)clusterhi)<<16);
                            23742 
P:08B9 045FA0         2 493623744         movec   m0,n7
P:08BA 2D0000         2 493823751         move    #0,b1
P:08BB 250000         2 494023747         move    #0,x1
P:08BC 21C900         2 494223738         move    a,b0
P:08BD 4CEF00         4 494623746         move    y:(r7+n7),x0
P:08BE 0610A0         4 495023753         rep     #16     
P:08BF 20003A         2 495223755         asl     b
                            23757 L377:
                            23771 
                            23772 ; 1032 |    return(NOERROR);
                            23773 
                            23776 
                            23777 ; 1033 |}
                            23778 
P:08C0 3E0228         2 495423759         add     x,b	                #2,n6
P:08C1 77F413 FFFFFC  3 495723775         clr     a	                #-4,n7
P:08C3 000000         2 495923775         nop             ; (inserted)
P:08C4 6EEF00         4 496323763         move    y:(r7+n7),r6
P:08C5 000000         2 496523763         nop             ; (inserted)
P:08C6 204E00         2 496723765         move    (r6)+n6
P:08C7 595E00         2 496923769         move    b0,y:(r6)+
P:08C8 5D5600         2 497123770         move    b1,y:(r6)-
                            23780 L376:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 373

M:ADDR CODE           CYCLES LINE SOURCELINE
P:08C9 77F400 FFFFF9  3 497423780         move    #-7,n7
P:08CB 000000         2 497623780         nop             ; (inserted)
P:08CC 05EF7C         4 498023782         movec   y:(r7+n7),ssh
P:08CD 204F00         2 498223784         move    (r7)+n7
P:08CE 00000C         4 498623786         rts
                            23788 
                            23789 ; 1034 |
                            23790 ; 1035 |
                            23791 ; 1036 |
                            23792 ; 1037 |
                            23793 ; 1038 |///////////////////////////////////////////////////////////////////////////////
                            23794 ; 1039 |//
                            23795 ; 1040 |//>  Name:           DeleteFileRecord
                            23796 ; 1041 |//
                            23797 ; 1042 |//   Type:           Function
                            23798 ; 1043 |//
                            23799 ; 1044 |//   Description:    Deletes a file record and its associate long file name (if any)
                            23800 ; 1045 |//                   from the directory entries
                            23801 ; 1046 |//
                            23802 ; 1047 |//   Inputs:         bRecordNumber      : Record number in relation to the sector (0 to 31
                                  )
                            23803 ; 1048 |//                   wSectNumber        : Sector Number where record is located
                            23804 ; 1049 |//                   *pstDirCtrlBlk     : Pointer to Directory Ctrl Block Structure
                            23805 ; 1050 |//
                            23806 ; 1051 |//   Outputs:        Result of operation
                            23807 ; 1052 |//                     NOERROR -> Operation successful
                            23808 ; 1053 |//                     !NOERROR -> Impossible to read/write the sector
                            23809 ; 1054 |//
                            23810 ; 1055 |//   Notes:          none
                            23811 ; 1056 |//<
                            23812 ; 1057 |///////////////////////////////////////////////////////////////////////////////
                            23813 ; 1058 |BOOL _reentrant DeleteFileRecord(BYTE bRecordNumber, DWORD wSectNumber, DIR_CTRL_BLK *pstD
                                  irCtrlBlk)
                            23814 ; 1059 |{
                            23815 
                            23820 FDeleteFileRecord:
                            23838 
                            23839 ; 1060 |    WORD wStartRecByte, wLoopCounter = 0;
                            23840 
                            23857 
                            23858 ; 1061 |    BYTE bCurRecord;
                            23859 ; 1062 |    DWORD  wCurSect;
                            23860 ; 1063 |    glb_wFileCorrupted++;
                            23861 
                            23885 
                            23886 ; 1064 |
                            23887 ; 1065 |    // Read new sector
                            23888 ; 1066 |    if ( ReadDirSector(wSectNumber, pstDirCtrlBlk) != NOERROR )
                            23889 
P:08CF 055F7C         2 498823821         movec   ssh,y:(r7)+
P:08D0 3F0B00         2 499023824         move    #11,n7
P:08D1 47F400 000001  3 499323864         move    #>1,y1
P:08D3 204F00         2 499523826         move    (r7)+n7
P:08D4 77F400 FFFFF5  3 499823842         move    #-11,n7
P:08D6 000000         2 500023842         nop             ; (inserted)
P:08D7 5D6F00         4 500423844         move    b1,y:(r7+n7)
P:08D8 77F400 FFFFF9  3 500723848         move    #-7,n7
P:08DA 000000         2 500923848         nop             ; (inserted)
P:08DB 596F00         4 501323850         move    b0,y:(r7+n7)
P:08DC 77F400 FFFFF6  3 501623867         move    #-10,n7
P:08DE 5FF000 rrrrrr  3 501923863         move    y:Fglb_wFileCorrupted,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 374

M:ADDR CODE           CYCLES LINE SOURCELINE
P:08E0 205F78         2 502123865         add     y1,b	                (r7)+
P:08E1 5D7000 rrrrrr  3 502423866         move    b1,y:Fglb_wFileCorrupted
P:08E3 5C6F00         4 502823870         move    a1,y:(r7+n7)
P:08E4 205700         2 503023871         move    (r7)-
P:08E5 586F00         4 503423873         move    a0,y:(r7+n7)
P:08E6 77F400 FFFFF8  3 503723878         move    #-8,n7
P:08E8 000000         2 503923878         nop             ; (inserted)
P:08E9 686F00         4 504323880         move    r0,y:(r7+n7)
P:08EA 0BF080 rrrrrr  6 504923891         jsr     FReadDirSector
P:08EC 2A0000         2 505123896         move    #0,a2
P:08ED 200003         2 505323897         tst     a
P:08EE 0AF0A2 rrrrrr  6 505923898         jne     L403
                            23899 
                            23900 ; 1067 |        return(!NOERROR);
                            23901 ; 1068 |
                            23902 ; 1069 |    // Calculates the position of record 1st byte
                            23903 ; 1070 |    wStartRecByte = bRecordNumber * BYTES_PER_DIR_RECORD;
                            23904 
                            23914 
                            23915 ; 1071 |
                            23916 ; 1072 |    // Mark the file "deleted"
                            23917 ; 1073 |    //SetByteX(wStartRecByte, FILE_DELETED_CODE, pstDirCtrlBlk->pwBuffer);
                            23918 ; 1074 |    PutByte((void *)pstDirCtrlBlk->pwBuffer,FILE_DELETED_CODE,wStartRecByte,X_MEMORY);
                            23919 
P:08F0 77F400 FFFFF5  3 506223906         move    #-11,n7
P:08F2 44F400 000020  3 506523909         move    #>$20,x0
P:08F4 4FEF00         4 506923908         move    y:(r7+n7),y1
P:08F5 77F4C0 FFFFF8  3 507223910         mpy     y1,x0,a	                #-8,n7
P:08F7 3E0922         2 507423911         asr     a	                #9,n6
P:08F8 6EEF00         4 507823924         move    y:(r7+n7),r6
P:08F9 240000         2 508023929         move    #0,x0
P:08FA 68EE00         4 508423926         move    y:(r6+n6),r0
P:08FB 210F00         2 508623912         move    a0,b
P:08FC 56F400 0000E5  3 508923928         move    #>229,a
P:08FE 21AF00         2 509123930         move    b1,b
P:08FF 0BF080 rrrrrr  6 509723931         jsr     FPutByte
                            23932 
                            23933 ; 1075 |
                            23934 ; 1076 |    pstDirCtrlBlk->Control = DIRTY;
                            23935 
                            23946 
                            23947 ; 1077 |
                            23948 ; 1078 |    // Chek if 1st record of the current directory
                            23949 ; 1079 |    if ( (bRecordNumber == 0) && (pstDirCtrlBlk->StartSectCurDir == wSectNumber) )
                            23950 
P:0901 3E0500         2 509923937         move    #5,n6
P:0902 77F400 FFFFF8  3 510223938         move    #-8,n7
P:0904 46F400 000001  3 510523942         move    #>1,y0
P:0906 6EEF00         4 510923940         move    y:(r7+n7),r6
P:0907 77F400 FFFFF5  3 511223952         move    #-11,n7
P:0909 22D500         2 511423941         move    r6,r5
P:090A 4E6E00         4 511823943         move    y0,y:(r6+n6)
P:090B 5FEF00         4 512223954         move    y:(r7+n7),b
P:090C 2B0000         2 512423956         move    #0,b2
P:090D 21A70B         2 512623957         tst     b	                b1,y1
P:090E 0AF0A2 rrrrrr  6 513223960         jne     L393
P:0910 77F400 FFFFF6  3 513523966         move    #-10,n7
P:0912 045D16         4 513923961         lua     (r5)+,r6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 375

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0913 205F00         2 514123967         move    (r7)+
P:0914 205E00         2 514323963         move    (r6)+
P:0915 5EEF00         4 514723969         move    y:(r7+n7),a
P:0916 5FD600         2 514923964         move    y:(r6)-,b
P:0917 2A0000         2 515123973         move    #0,a2
P:0918 205700         2 515323970         move    (r7)-
P:0919 2B0000         2 515523974         move    #0,b2
P:091A 59E600         2 515723965         move    y:(r6),b0
P:091B 58EF00         4 516123972         move    y:(r7+n7),a0
P:091C 20000D         2 516323975         cmp     a,b
P:091D 0AF0AA rrrrrr  6 516923976         jeq     L398
                            23977 
                            23978 ; 1080 |        return(NOERROR);            // we are done
                            23979 ; 1081 |
                            23980 ; 1082 |    // Check if long file names and delete each long file name entry
                            23981 ; 1083 |    // specific to this file
                            23982 ; 1084 |    if ( bRecordNumber == 0 )
                            23983 
P:091F 20EF00         2 517123985 L393:   move    y1,b
P:0920 2B0000         2 517323986         move    #0,b2
P:0921 20000B         2 517523987         tst     b
P:0922 0AF0A2 rrrrrr  6 518123988         jne     L394
                            23989 
                            23990 ; 1085 |    {
                            23991 ; 1086 |        bCurRecord = DIR_REC_PER_SECTOR - 1;
                            23992 
                            23998 
                            23999 ; 1087 |        wCurSect = wSectNumber - 1;
                            24000 
                            24014 
                            24015 ; 1088 |    }
                            24016 
P:0924 77F400 FFFFF6  3 518424002         move    #-10,n7
P:0926 57F000 rrrrrr  3 518723994         move    x:FcachedDirRecordsPerSector,b
P:0928 205F00         2 518924003         move    (r7)+
P:0929 5EEF5C         4 519323995         sub     y0,b	                y:(r7+n7),a
P:092A 21B100         2 519523996         move    b1,r1
P:092B 205700         2 519724006         move    (r7)-
P:092C 58EF00         4 520124008         move    y:(r7+n7),a0
P:092D 00000A         2 520324009         dec     a
P:092E 0AF080 rrrrrr  6 520924018         jmp     L396
                            24019 
                            24020 ; 1089 |    else
                            24021 ; 1090 |    {
                            24022 ; 1091 |        bCurRecord = bRecordNumber - 1;
                            24023 
                            24025 L394:
                            24032 
                            24033 ; 1092 |        wCurSect = wSectNumber;
                            24034 
                            24043 
                            24044 ; 1093 |    }
                            24045 ; 1094 |
                            24046 ; 1095 |    do
                            24047 
P:0930 77F400 FFFFF6  3 521224036         move    #-10,n7
P:0932 205F5C         2 521424027         sub     y0,b	                (r7)+
P:0933 21B100         2 521624031         move    b1,r1
P:0934 5EEF00         4 522024039         move    y:(r7+n7),a
P:0935 205700         2 522224040         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 376

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0936 58EF00         4 522624042         move    y:(r7+n7),a0
                            24049 L396:
                            24059 
                            24060 ; 1096 |    {
                            24061 ; 1097 |        BYTE bTempByte;
                            24062 ; 1098 |        WORD wTempWord;
                            24063 ; 1099 |
                            24064 ; 1100 |        // Read new sector
                            24065 ; 1101 |        if ( ReadDirSector(wCurSect, pstDirCtrlBlk) != NOERROR )
                            24066 
P:0937 77F400 FFFFFA  3 522924049         move    #-6,n7
P:0939 22B000         2 523124071         move    r5,r0
P:093A 696F00         4 523524051         move    r1,y:(r7+n7)
P:093B 77F400 FFFFF8  3 523824068         move    #-8,n7
P:093D 000000         2 524024068         nop             ; (inserted)
P:093E 6D6F00         4 524424070         move    r5,y:(r7+n7)
P:093F 77F400 FFFFFB  3 524724076         move    #-5,n7
P:0941 205F00         2 524924077         move    (r7)+
P:0942 5C6F00         4 525324079         move    a1,y:(r7+n7)
P:0943 205700         2 525524080         move    (r7)-
P:0944 586F00         4 525924082         move    a0,y:(r7+n7)
P:0945 0BF080 rrrrrr  6 526524087         jsr     FReadDirSector
P:0947 77F400 FFFFF8  3 526824094         move    #-8,n7
P:0949 2A0000         2 527024092         move    #0,a2
P:094A 6EEF03         4 527424093         tst     a	                y:(r7+n7),r6
P:094B 77F400 FFFFFA  3 527724099         move    #-6,n7
P:094D 000000         2 527924099         nop             ; (inserted)
P:094E 4EEF00         4 528324101         move    y:(r7+n7),y0
P:094F 0AF0A2 rrrrrr  6 528924104         jne     L403
                            24105 
                            24106 ; 1102 |            return(!NOERROR);
                            24107 ; 1103 |
                            24108 ; 1104 |        // Calculates the position of record 1st byte
                            24109 ; 1105 |        wStartRecByte = bCurRecord * BYTES_PER_DIR_RECORD;
                            24110 
                            24119 
                            24120 ; 1106 |
                            24121 ; 1107 |        // Check if record is part of long file name
                            24122 ; 1108 |        bTempByte = FSGetByte((void *)pstDirCtrlBlk->pwBuffer,wStartRecByte + DIR_REC_ATT_
                                  POS,X_MEMORY);
                            24123 
P:0951 56F400 00000B  3 529224137         move    #>11,a
P:0953 47F400 000020  3 529524112         move    #>$20,y1
P:0955 3E09B8         2 529724113         mpy     y0,y1,b	                #9,n6
P:0956 77F42A FFFFFE  3 530024114         asr     b	                #-2,n7
P:0958 204E00         2 530224127         move    (r6)+n6
P:0959 212500         2 530424117         move    b0,x1
P:095A 6E6F00         4 530824132         move    r6,y:(r7+n7)
P:095B 68E660         2 531024138         add     x1,a	                y:(r6),r0
P:095C 77F41B FFFFFD  3 531324141         clr     b	                #-3,n7
P:095E 218E00         2 531524142         move    a1,a
P:095F 4D6F00         4 531924136         move    x1,y:(r7+n7)
P:0960 0BF080 rrrrrr  6 532524143         jsr     FFSGetByte
                            24156 
                            24157 ; 1109 |        wTempWord =  FSGetWord((void *)pstDirCtrlBlk->pwBuffer,wStartRecByte + DIR_REC_FIR
                                  ST_CX_POS,X_MEMORY);
                            24158 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 377

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0962 77F400 FFFFFD  3 532824144         move    #-3,n7
P:0964 000000         2 533024144         nop             ; (inserted)
P:0965 4FEF00         4 533424146         move    y:(r7+n7),y1
P:0966 77F400 FFFFFE  3 533724149         move    #-2,n7
P:0968 000000         2 533924149         nop             ; (inserted)
P:0969 6EEF00         4 534324151         move    y:(r7+n7),r6
P:096A 045FA0         2 534524152         movec   m0,n7
P:096B 000000         2 534724152         nop             ; (inserted)
P:096C 5E6F00         4 535124154         move    a,y:(r7+n7)
P:096D 56F400 00001A  3 535424161         move    #>26,a
P:096F 68E670         2 535624162         add     y1,a	                y:(r6),r0
P:0970 218E1B         2 535824165         clr     b	                a1,a
P:0971 0BF080 rrrrrr  6 536424167         jsr     FFSGetWord
                            24184 
                            24185 ; 1110 |
                            24186 ; 1111 |        if ( (bTempByte == 0x0f) && (wTempWord == 0x00) )
                            24187 
P:0973 045FA0         2 536624168         movec   m0,n7
P:0974 46F400 00000F  3 536924189         move    #>15,y0
P:0976 5FEF00         4 537324170         move    y:(r7+n7),b
P:0977 77F400 FFFFFD  3 537624173         move    #-3,n7
P:0979 24005D         2 537824190         cmp     y0,b	                #0,x0
P:097A 4FEF00         4 538224175         move    y:(r7+n7),y1
P:097B 77F400 FFFFFE  3 538524178         move    #-2,n7
P:097D 000000         2 538724178         nop             ; (inserted)
P:097E 6EEF00         4 539124180         move    y:(r7+n7),r6
P:097F 0AF0A2 rrrrrr  6 539724191         jne     L398
P:0981 2A0000         2 539924192         move    #0,a2
P:0982 200003         2 540124193         tst     a
P:0983 0AF0AA rrrrrr  6 540724194         jeq     L399
                            24195 
                            24196 ; 1112 |        {
                            24197 ; 1113 |            // Mark the file "deleted"
                            24198 ; 1114 |            PutByte((void *)pstDirCtrlBlk->pwBuffer,FILE_DELETED_CODE,wStartRecByte, X_MEM
                                  ORY);
                            24199 ; 1115 |            pstDirCtrlBlk->Control = DIRTY;
                            24200 ; 1116 |        }
                            24201 ; 1117 |        else
                            24202 ; 1118 |            return(NOERROR);
                            24203 
                            24205 L398:
P:0985 2E0000         2 540924205         move    #0,a
P:0986 0AF080 rrrrrr  6 541524207         jmp     L404
P:0988 68E600         2 541724209 L399:   move    y:(r6),r0
P:0989 56F479 0000E5  3 542024210         tfr     y1,b	                #>229,a
P:098B 0BF080 rrrrrr  6 542624212         jsr     FPutByte
                            24224 
                            24225 ; 1119 |
                            24226 ; 1120 |        // Decrement record number
                            24227 ; 1121 |        if ( bCurRecord == 0 )            // If last record in the sector, need a new sect
                                  or
                            24228 
P:098D 3D0500         2 542824215         move    #5,n5
P:098E 77F400 FFFFF8  3 543124217         move    #-8,n7
P:0990 44F400 000001  3 543424216         move    #>1,x0
P:0992 6DEF00         4 543824219         move    y:(r7+n7),r5
P:0993 77F400 FFFFFA  3 544124230         move    #-6,n7
P:0995 4C6D00         4 544524221         move    x0,y:(r5+n5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 378

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0996 5FEF00         4 544924232         move    y:(r7+n7),b
P:0997 77F400 FFFFFB  3 545224237         move    #-5,n7
P:0999 2B0000         2 545424233         move    #0,b2
P:099A 205F00         2 545624238         move    (r7)+
P:099B 5EEF0B         4 546024234         tst     b	                y:(r7+n7),a
P:099C 205700         2 546224241         move    (r7)-
P:099D 58EF00         4 546624243         move    y:(r7+n7),a0
P:099E 0AF0A2 rrrrrr  6 547224246         jne     L400
                            24247 
                            24248 ; 1122 |        {
                            24249 ; 1123 |            bCurRecord = DIR_REC_PER_SECTOR - 1;
                            24250 
                            24257 
                            24258 ; 1124 |            wCurSect--;
                            24259 
                            24262 
                            24263 ; 1125 |        }
                            24264 
P:09A0 57F000 rrrrrr  3 547524252         move    x:FcachedDirRecordsPerSector,b
P:09A2 20004C         2 547724254         sub     x0,b
P:09A3 21B100         2 547924255         move    b1,r1
P:09A4 00000A         2 548124261         dec     a
P:09A5 0AF080 rrrrrr  6 548724266         jmp     L401
                            24267 
                            24268 ; 1126 |        else
                            24269 ; 1127 |            bCurRecord--;
                            24270 
                            24272 L400:
                            24279 
                            24280 ; 1128 |
                            24281 ; 1129 |    }while ( wLoopCounter++ < MAX_ENTRIES_LONG_FILE_NAME );
                            24282 
P:09A7 20004C         2 548924275         sub     x0,b
P:09A8 21B100         2 549124277         move    b1,r1
                            24284 L401:
P:09A9 77F400 FFFFF9  3 549424286         move    #-7,n7
P:09AB 000000         2 549624286         nop             ; (inserted)
P:09AC 5FEF00         4 550024288         move    y:(r7+n7),b
P:09AD 21A748         2 550224294         add     x0,b	                b1,y1
P:09AE 5D6F79         4 550624301         tfr     y1,b	                b1,y:(r7+n7)
P:09AF 44F400 000014  3 550924300         move    #>20,x0
P:09B1 2B0000         2 551124302         move    #0,b2
P:09B2 20004D         2 551324303         cmp     x0,b
P:09B3 0AF0A9 rrrrrr  6 551924304         jlt     L396
                            24305 
                            24306 ; 1130 |
                            24307 ; 1131 |    return(!NOERROR);       // If we arrive here this means that we fail to find
                            24308 
                            24310 L403:
                            24312 
                            24313 ; 1132 |                            // the end of a long file name
                            24314 ; 1133 |
                            24315 ; 1134 |}
                            24316 
P:09B5 56F400 000001  3 552224310         move    #>1,a
                            24318 L404:
P:09B7 77F400 FFFFF4  3 552524318         move    #-12,n7
P:09B9 000000         2 552724318         nop             ; (inserted)
P:09BA 05EF7C         4 553124320         movec   y:(r7+n7),ssh
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 379

M:ADDR CODE           CYCLES LINE SOURCELINE
P:09BB 204F00         2 553324322         move    (r7)+n7
P:09BC 00000C         4 553724324         rts
                            24330 
                            24331 ; 1135 |
                            24332 ; 1136 |
                            24333 ; 1137 |
                            24334 ; 1138 |///////////////////////////////////////////////////////////////////////////////
                            24335 ; 1139 |//
                            24336 ; 1140 |//>  Name:           ReadDirSector
                            24337 ; 1141 |//
                            24338 ; 1142 |//   Type:           Function
                            24339 ; 1143 |//
                            24340 ; 1144 |//   Description:    Reads a sector in the directory data
                            24341 ; 1145 |//
                            24342 ; 1146 |//   Inputs:         wSectNumber        : Sector Number to read
                            24343 ; 1147 |//                   *pstDirCtrlBlk     : Pointer to Directory Ctrl Block Structure
                            24344 ; 1148 |//
                            24345 ; 1149 |//   Outputs:        Result of operation
                            24346 ; 1150 |//                     NOERROR -> Operation successful
                            24347 ; 1151 |//                     !NOERROR -> Impossible to read/write the sector
                            24348 ; 1152 |//
                            24349 ; 1153 |//   Notes:          none
                            24350 ; 1154 |//<
                            24351 ; 1155 |///////////////////////////////////////////////////////////////////////////////
                            24352 ; 1156 |BOOL _reentrant ReadDirSector(DWORD wSectNumber, DIR_CTRL_BLK *pstDirCtrlBlk)
                            24353 ; 1157 |{
                            24354 
                            24359 FReadDirSector:
                            24371 
                            24372 ; 1158 |
                            24373 ; 1159 |    // Reads directory sector in buffer
                            24374 ; 1160 |    if ( wSectNumber != pstDirCtrlBlk->CurSect )
                            24375 
P:09BD 055F7C         2 553924360         movec   ssh,y:(r7)+
P:09BE 3F0500         2 554124363         move    #5,n7
P:09BF 3E0600         2 554324377         move    #6,n6
P:09C0 221600         2 554524378         move    r0,r6
P:09C1 2A0000         2 554724396         move    #0,a2
P:09C2 204F00         2 554924365         move    (r7)+n7
P:09C3 77F400 FFFFFE  3 555224381         move    #-2,n7
P:09C5 204E00         2 555424380         move    (r6)+n6
P:09C6 6E6F00         4 555824383         move    r6,y:(r7+n7)
P:09C7 77F400 FFFFFB  3 556124386         move    #-5,n7
P:09C9 4EDE00         2 556324384         move    y:(r6)+,y0
P:09CA 4FD600         2 556524385         move    y:(r6)-,y1
P:09CB 205F79         2 556724393         tfr     y1,b	                (r7)+
P:09CC 2B0000         2 556924395         move    #0,b2
P:09CD 20C900         2 557124394         move    y0,b0
P:09CE 5C6F00         4 557524389         move    a1,y:(r7+n7)
P:09CF 205700         2 557724390         move    (r7)-
P:09D0 586F05         4 558124397         cmp     b,a	                a0,y:(r7+n7)
P:09D1 0AF0AA rrrrrr  6 558724400         jeq     L414
                            24401 
                            24402 ; 1161 |    {
                            24403 ; 1162 |        // Check if need to save the current sector first
                            24404 ; 1163 |        if ( pstDirCtrlBlk->Control != CLEAN )
                            24405 
P:09D3 3A0500         2 558924407         move    #5,n2
P:09D4 221600         2 559124408         move    r0,r6
P:09D5 045FA0         2 559324412         movec   m0,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 380

M:ADDR CODE           CYCLES LINE SOURCELINE
P:09D6 235E00         2 559524409         move    n2,n6
P:09D7 000000         2 559724409         nop             ; (inserted)
P:09D8 204E00         2 559924411         move    (r6)+n6
P:09D9 6E6F00         4 560324414         move    r6,y:(r7+n7)
P:09DA 77F400 FFFFFD  3 560624416         move    #-3,n7
P:09DC 221600         2 560824415         move    r0,r6
P:09DD 6E6F00         4 561224418         move    r6,y:(r7+n7)
P:09DE 5FEE00         4 561624419         move    y:(r6+n6),b
P:09DF 20000B         2 561824422         tst     b
P:09E0 0AF0AA rrrrrr  6 562424423         jeq     L411
                            24424 
                            24425 ; 1164 |            if ( DriveWriteSector( pstDirCtrlBlk->Device,pstDirCtrlBlk->CurSect + DataDriv
                                  eStatus[pstDirCtrlBlk->Device].iPbsSectorOffset,pstDirCtrlBlk->pwBuffer)!=NOERROR )
                            24426 
P:09E2 3E0900         2 562624440         move    #9,n6
P:09E3 65F400 rrrrrr  3 562924434         move    #FDataDriveStatus+1,r5
P:09E5 5FE600         2 563124428         move    y:(r6),b
P:09E6 21A400         2 563324431         move    b1,x0
P:09E7 0116D0         2 563524432         mpy     x0,#22,a
P:09E8 211D00         2 563724433         move    a0,n5
P:09E9 000000         2 563924433         nop             ; (inserted)
P:09EA 5EED00         4 564324436         move    y:(r5+n5),a
P:09EB 218800         2 564524437         move    a1,a0
P:09EC 214C00         2 564724438         move    a2,a1
P:09ED 68EE30         4 565124439         add     y,a	                y:(r6+n6),r0
P:09EE 0BF080 rrrrrr  6 565724445         jsr     FDriveWriteSector
P:09F0 200003         2 565924446         tst     a
P:09F1 0AF0A2 rrrrrr  6 566524447         jne     L412
                            24448 
                            24449 ; 1165 |                return(!NOERROR);
                            24450 ; 1166 |
                            24451 ; 1167 |
                            24452 ; 1168 |            // Read new sector
                            24453 ; 1169 |        if ( DriveReadSector(pstDirCtrlBlk->Device, (DWORD)wSectNumber+DataDriveStatus[pst
                                  DirCtrlBlk->Device].iPbsSectorOffset, pstDirCtrlBlk->pwBuffer) != NOERROR )
                            24454 
                            24456 L411:
P:09F3 3E0900         2 566724479         move    #9,n6
P:09F4 77F400 FFFFFD  3 567024456         move    #-3,n7
P:09F6 65F400 rrrrrr  3 567324466         move    #FDataDriveStatus+1,r5
P:09F8 6EEF00         4 567724458         move    y:(r7+n7),r6
P:09F9 77F400 FFFFFB  3 568024471         move    #-5,n7
P:09FB 205F00         2 568224472         move    (r7)+
P:09FC 5FE600         2 568424460         move    y:(r6),b
P:09FD 4FEF00         4 568824474         move    y:(r7+n7),y1
P:09FE 21A600         2 569024463         move    b1,y0
P:09FF 205700         2 569224475         move    (r7)-
P:0A00 0116E0         2 569424464         mpy     y0,#22,a
P:0A01 211D00         2 569624465         move    a0,n5
P:0A02 4EEF00         4 570024477         move    y:(r7+n7),y0
P:0A03 5EED00         4 570424468         move    y:(r5+n5),a
P:0A04 218800         2 570624469         move    a1,a0
P:0A05 214C00         2 570824470         move    a2,a1
P:0A06 68EE30         4 571224478         add     y,a	                y:(r6+n6),r0
P:0A07 0BF080 rrrrrr  6 571824482         jsr     FDriveReadSector
P:0A09 200003         2 572024484         tst     a
P:0A0A 0AF0AA rrrrrr  6 572624485         jeq     L413
                            24486 
                            24487 ; 1170 |        {
                            24488 ; 1171 |            return(!NOERROR);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 381

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24489 
P:0A0C 56F400 000001  3 572924491 L412:   move    #>1,a
P:0A0E 0AF080 rrrrrr  6 573524492         jmp     L415
                            24493 
                            24494 ; 1172 |        }
                            24495 ; 1173 |
                            24496 ; 1174 |
                            24497 ; 1175 |        // Update current sector loaded in Directory Control Structure
                            24498 ; 1176 |        pstDirCtrlBlk->CurSect = wSectNumber;
                            24499 
                            24501 L413:
                            24515 
                            24516 ; 1177 |        pstDirCtrlBlk->Control = CLEAN;
                            24517 
                            24525 
                            24526 ; 1178 |    }
                            24527 ; 1179 |
                            24528 ; 1180 |    return(NOERROR);
                            24529 
P:0A10 77F41B FFFFFE  3 573824519         clr     b	                #-2,n7
P:0A12 000000         2 574024519         nop             ; (inserted)
P:0A13 6EEF00         4 574424503         move    y:(r7+n7),r6
P:0A14 77F400 FFFFFB  3 574724504         move    #-5,n7
P:0A16 205F00         2 574924505         move    (r7)+
P:0A17 4FEF00         4 575324507         move    y:(r7+n7),y1
P:0A18 205700         2 575524508         move    (r7)-
P:0A19 4EEF00         4 575924510         move    y:(r7+n7),y0
P:0A1A 045FA0         2 576124520         movec   m0,n7
P:0A1B 4E5E00         2 576324511         move    y0,y:(r6)+
P:0A1C 4F5600         2 576524512         move    y1,y:(r6)-
P:0A1D 6EEF00         4 576924522         move    y:(r7+n7),r6
P:0A1E 000000         2 577124522         nop             ; (inserted)
P:0A1F 5F6600         2 577324524         move    b,y:(r6)
                            24531 L414:
                            24532 
                            24533 ; 1181 |}
                            24534 
P:0A20 2E0000         2 577524531         move    #0,a
                            24536 L415:
P:0A21 77F400 FFFFFA  3 577824536         move    #-6,n7
P:0A23 000000         2 578024536         nop             ; (inserted)
P:0A24 05EF7C         4 578424538         movec   y:(r7+n7),ssh
P:0A25 204F00         2 578624540         move    (r7)+n7
P:0A26 00000C         4 579024542         rts
                            24545 
                            24546 ; 1182 |
                            24547 ; 1183 |
                            24548 ; 1184 |
                            24549 ; 1185 |
                            24550 ; 1186 |///////////////////////////////////////////////////////////////////////////////
                            24551 ; 1187 |//
                            24552 ; 1188 |//>  Name:           CxToSect
                            24553 ; 1189 |//
                            24554 ; 1190 |//   Type:           Function
                            24555 ; 1191 |//
                            24556 ; 1192 |//   Description:    Calculates the 1st sector number for the Cluster passed
                            24557 ; 1193 |//
                            24558 ; 1194 |//
                            24559 ; 1195 |//   Inputs:         wCx                : Cluster number
                            24560 ; 1196 |//
                            24561 ; 1197 |//   Outputs:        1st sector number for wCx
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 382

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24562 ; 1198 |//
                            24563 ; 1199 |//   Notes:
                            24564 ; 1200 |//          The logical sector 0 is the Partition boot sector for this media
                            24565 ; 1201 |//          The data area always starts at cluster #2
                            24566 ; 1202 |//          Therefore:
                            24567 ; 1203 |//          StartSect = ((wCx - 2)*SectPerCluster) + StartSectNumberForDataArea
                            24568 ; 1204 |//<
                            24569 ; 1205 |///////////////////////////////////////////////////////////////////////////////
                            24570 ; 1206 |DWORD _reentrant CxToSect(DWORD wCx)
                            24571 ; 1207 |{
                            24572 
                            24577 FCxToSect:
                            24580 
                            24581 ; 1208 |    return(((wCx - 2) * stPartitionBootSector.bSectPerCx) + stPartitionBootSector.wStartSe
                                  ctData);
                            24582 
                            24604 
                            24605 ; 1209 |}
                            24606 
P:0A27 250000         2 579224584         move    #0,x1
P:0A28 4EF000 rrrrrr  3 579524588         move    y:FstPartitionBootSector+1,y0
P:0A2A 44F400 000002  3 579824585         move    #>2,x0
P:0A2C 270024         2 580024586         sub     x,a	                #0,y1
P:0A2D 210400         2 580224590         move    a0,x0
P:0A2E 218500         2 580424591         move    a1,x1
P:0A2F 0040F8         2 580624592         ori     #$40,mr
P:0A30 000000         2 580824592         nop             ; (inserted)
P:0A31 2000D0         2 581024594         mpy     y0,x0,a
P:0A32 2109E2         2 581224595         mac     x1,y0,a a0,b0
P:0A33 2000C2         2 581424596         mac     x0,y1,a
P:0A34 00BFB8         2 581624597         andi    #$BF,mr
P:0A35 210D00         2 581824598         move    a0,b1
P:0A36 218B00         2 582024599         move    a1,b2
P:0A37 5EF02A rrrrrr  3 582324600         asr     b	                y:FstPartitionBootSector+15,a
P:0A39 58F000 rrrrrr  3 582624602         move    y:FstPartitionBootSector+14,a0
P:0A3B 200010         2 582824603         add     b,a
P:0A3C 00000C         4 583224608         rts
                            24610 
                            24611 ; 1210 |
                            24612 ; 1211 |
                            24613 ; 1212 |
                            24614 ; 1213 |
                            24615 ; 1214 |
                            24616 ; 1215 |///////////////////////////////////////////////////////////////////////////////
                            24617 ; 1216 |//
                            24618 ; 1217 |//>  Name:           HandleFailReadSector
                            24619 ; 1218 |//
                            24620 ; 1219 |//   Type:           Function
                            24621 ; 1220 |//
                            24622 ; 1221 |//   Description:    Records the fact that a sector could not be read/written
                            24623 ; 1222 |//                   on the media
                            24624 ; 1223 |//
                            24625 ; 1224 |//
                            24626 ; 1225 |//   Inputs:         None
                            24627 ; 1226 |//
                            24628 ; 1227 |//   Outputs:        None
                            24629 ; 1228 |//
                            24630 ; 1229 |//   Notes:
                            24631 ; 1230 |//          Failing to read/write a sector on the media is a critical error
                            24632 ; 1231 |//          that should terminate the chkdsk activity on the specific media
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 383

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24633 ; 1232 |//<
                            24634 ; 1233 |///////////////////////////////////////////////////////////////////////////////
                            24635 ; 1234 |void _reentrant HandleFailReadSector(void)
                            24636 ; 1235 |{
                            24637 
                            24642 FHandleFailReadSector:
                            24643 
                            24644 ; 1236 |    glb_bFailReadSect = TRUE;
                            24645 
                            24649 
                            24650 ; 1237 |}
                            24651 
P:0A3D 3C0100         2 583424647         move    #1,n4
P:0A3E 7C7000 rrrrrr  3 583724648         move    n4,y:Fglb_bFailReadSect
P:0A40 00000C         4 584124653         rts
                            24655 
                            24656 ; 1238 |
                            24657 ; 1239 |
                            24658 ; 1240 |
                            24659 ; 1241 |
                            24660 ; 1242 |//void InitTime(void)
                            24661 ; 1243 |//{
                            24662 ; 1244 |//    HW_DCLKCNTU.I = 0;
                            24663 ; 1245 |//    HW_DCLKCNTL.I = 0;
                            24664 ; 1246 |//}
                            24665 ; 1247 |//
                            24666 ; 1248 |//DWORD GetTime(void)
                            24667 ; 1249 |//{
                            24668 ; 1250 |//    return((((DWORD)(HW_DCLKCNTU.I))<<24) | ((DWORD)(HW_DCLKCNTL.I)));
                            24669 ; 1251 |//}
                            24670 ; 1252 |//
                            24671 ; 1253 |#pragma asm
                            24672     section Xscratch
                            24673     global    FXScratchSpace,FFatBuffer,FDirRecordBuffer
X:0000                      24674     org x,".XscratchSpace",scratch:
                            24675 
X:0000                      24676 FXScratchSpace      ds      3540
   |   RESERVED                   
X:0DD3
X:0DD4                      24677 FFatBuffer          ds      705
   |   RESERVED                   
X:1094
X:1095                      24678 FDirRecordBuffer    ds      705
   |   RESERVED                   
X:1355
                            24679 
                            24680     endsec
                            24681 ; 1263 |#pragma endasm
                            24682 ; 1264 |
                            24683 ; 1265 |
                            24684 
                            24692 
                            24698 
Y:0000                      24699         org     y,".ybsschkdsk",bss:
                            24700 FGetNextCxFromFat:
Y:0000 RESERVED             24701         ds      1
Y:0000
                            24705 FCacheDesc_chkdsk:
Y:0001                      24706         ds      25
   |   RESERVED                   
Y:0019
                            24723 FFATBuffer:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 384

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:001A                      24724         ds      2115
   |   RESERVED                   
Y:085C
                            24728 FCacheMem_chkdsk:
Y:085D                      24729         ds      5
   |   RESERVED                   
Y:0861
                            24732 FstPartitionBootSector:
Y:0862                      24733         ds      26
   |   RESERVED                   
Y:087B
                            24736 
X:0000                      24737         org     x,".xbsschkdsk",bss:
                            24738 FcachedDirRecordsPerSector:
X:0000 RESERVED             24739         ds      1
X:0000
                            24761 FcachedClusterEntryPerSectorShift:
X:0001 RESERVED             24762         ds      1
X:0001
                            24766 FcachedSectorSize:
X:0002 RESERVED             24767         ds      1
X:0002
                            24770 FcachedWordsPerSector:
X:0003 RESERVED             24771         ds      1
X:0003
                            24776 
Y:087C                      24777         org     y,".ybsschkdsk",bss:
                            24778 FFATEntryStatus:
Y:087C RESERVED             24779         ds      1
Y:087C
                            24784 
X:0004                      24785         org     x,".xbsschkdsk",bss:
                            24786 FcachedSectorSizeInWords:
X:0004 RESERVED             24787         ds      1
X:0004
                            24788 
                            24789         extern  Rdiv_uiuiui, Rdiv_ululul, FDataDriveInit
                            24790         extern  y:FDataDriveStatus, x:FDirRecordBuffer, FDriveReadSector
                            24791         extern  FDriveWriteSector, FFSGetByte, FFSGetDWord, FFSGetWord
                            24792         extern  x:FFatBuffer, FFreeCxFat, FGetNextCxFat12, FGetNextCxFat16
                            24793         extern  FGetNextCxFat32, FIsLastCx, FLoadFatSector, y:FMediaBuffer
                            24794         extern  y:FMediaTable, FPutByte, FUpdateBit, FWriteFatSector
                            24795         extern  x:FXScratchSpace, y:Fg_Drive, y:Fg_iCheckDiskError
                            24796 
                            24797         global  FCacheDesc_chkdsk, FCacheMem_chkdsk, FCheckCrossLinkFile
                            24798         global  FCheckDisk, FCxToSect, FDeleteFileRecord, FFATBuffer
                            24799         global  FFATEntryStatus, FFlag, FGetFileCtrlBlk, FGetNextCxFromFat
                            24800         global  FHandleFailReadSector, FInitPartitionBootSectorStruct
                            24801         global  FReadDirSector, FReserveCluster, FScanAndUpdateFat
                            24802         global  FScanDirectory, FScanFilesAndSubDirs
                            24803         global  FcachedClusterEntryPerSectorShift
                            24804         global  FcachedDirRecordsPerSector, FcachedSectorSize
                            24805         global  FcachedSectorSizeInWords, FcachedWordsPerSector
                            24806         global  FdwChkDskClkCycles, Fglb_bFailReadSect
                            24807         global  Fglb_wFileCorrupted, Fnestinglevel, FstFat
                            24808         global  FstPartitionBootSector
                            24809 
                            24810         local   L81, L82, L86, L87, L88, L91, L92, L93, L94, L95, L97, L98
                            24811         local   L99, L101, L102, L104, L115, L116, L117, L118, L119, L120
                            24812         local   L122, L123, L124, L138, L139, L140, L141, L142, L143, L144
                            24813         local   L145, L146, L147, L149, L150, L168, L175, L176, L177, L178
                            24814         local   L180, L199, L201, L202, L203, L204, L206, L209, L210, L211
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 385

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24815         local   L212, L213, L214, L215, L216, L333, L334, L335, L336, L337
                            24816         local   L338, L339, L340, L341, L344, L345, L346, L347, L348, L349
                            24817         local   L352, L353, L361, L362, L363, L364, L368, L369, L372, L373
                            24818         local   L374, L375, L376, L377, L393, L394, L396, L398, L399, L400
                            24819         local   L401, L403, L404, L411, L412, L413, L414, L415
                            24820         local   ss_CheckDisk
                            24821 
                            24822         calls   "CheckCrossLinkFile", "IsLastCx", "UpdateBit"
                            24823         calls   "CheckDisk", "DataDriveInit", "DriveWriteSector"
                            24824         calls   "CheckDisk", "HandleFailReadSector"
                            24825         calls   "CheckDisk", "InitPartitionBootSectorStruct"
                            24826         calls   "CheckDisk", "LoadFatSector", "Rdiv_uiuiui"
                            24827         calls   "CheckDisk", "ReserveCluster", "ScanAndUpdateFat"
                            24828         calls   "CheckDisk", "ScanFilesAndSubDirs", "WriteFatSector"
                            24829         calls   "DeleteFileRecord", "FSGetByte", "FSGetWord", "PutByte"
                            24830         calls   "DeleteFileRecord", "ReadDirSector"
                            24831         calls   "GetFileCtrlBlk", "FSGetByte", "FSGetDWord", "FSGetWord"
                            24832         calls   "GetFileCtrlBlk", "ReadDirSector"
                            24833         calls   "InitPartitionBootSectorStruct", "DriveReadSector"
                            24834         calls   "InitPartitionBootSectorStruct", "FSGetByte", "FSGetDWord"
                            24835         calls   "InitPartitionBootSectorStruct", "FSGetWord", "Rdiv_uiuiui"
                            24836         calls   "InitPartitionBootSectorStruct", "Rdiv_ululul"
                            24837         calls   "ReadDirSector", "DriveReadSector", "DriveWriteSector"
                            24838         calls   "ReserveCluster", "IsLastCx", "UpdateBit"
                            24839         calls   "ScanAndUpdateFat", "FreeCxFat", "UpdateBit"
                            24840         calls   "ScanDirectory", "CheckCrossLinkFile", "FSGetByte"
                            24841         calls   "ScanDirectory", "FSGetDWord", "FSGetWord", "ReadDirSector"
                            24842         calls   "ScanFilesAndSubDirs", "CheckCrossLinkFile", "CxToSect"
                            24843         calls   "ScanFilesAndSubDirs", "DeleteFileRecord"
                            24844         calls   "ScanFilesAndSubDirs", "DriveWriteSector", "FSGetByte"
                            24845         calls   "ScanFilesAndSubDirs", "FSGetWord", "GetFileCtrlBlk"
                            24846         calls   "ScanFilesAndSubDirs", "HandleFailReadSector", "IsLastCx"
                            24847         calls   "ScanFilesAndSubDirs", "ReadDirSector", "ScanDirectory"
                            24848         calls   "ScanFilesAndSubDirs", "ScanFilesAndSubDirs", "UpdateBit"
                            24849 
