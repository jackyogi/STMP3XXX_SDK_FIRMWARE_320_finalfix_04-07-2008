TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\algorithms\encoders\imaadpcm\src\imaadpcm_encode.asm
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ;;***********************************************************************
                                2 ;SigmaTel, Inc
                                3 ;$Archive: $
                                4 ;$Revision:  $
                                5 ;$Date: $
                                6 ;Description:  Encodes an IMAADPCM block of data
                                7 ;               
                                8 ;               
                                9 ;***********************************************************************/
                               11         section Encode_IMA_ADPCM
                               13 ;*********************************************************************************
                               14 ;       Include Files
                               15 ;
                               16 ;*********************************************************************************
                               17         include "const.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 const.EXTERN 
                                5 ;******************************************************************************
                                7    DEFINE   const_xref  '1'
                               42     ; Parthus compatability
                               18     include "wave.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; STMP3 Wave Xref
                                5 ;******************************************************************************
                                7    DEFINE   Wave_xref   '1'
                                8     
                               40     ; Function Declarations
                               19     include "imaadpcm.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; STMP3 IMA ADPCM Xref
                                5 ;******************************************************************************
                                7     DEFINE   imaadpcm_xref      '1'
                               21 ;*********************************************************************************
                               22 ;       Globals
                               23 ;
                               24 ;*********************************************************************************
                               25     
                               28 ;*********************************************************************************
                               29 ;       Externs
                               30 ;
                               31 ;*********************************************************************************
                               32     
                               37 ;*********************************************************************************
                               38 ;       Local Short Data Variables.
                               39 ;               
                               40 ;*********************************************************************************
Y:0000                         44         org y,".shortdata@Encode_IMA_ADPCM",OVERLAY,NEAR:
Y:0000 RESERVED                46 Encoded                 ds          1
Y:0000
Y:0001 RESERVED                47 encodedbyte             ds          1
Y:0001
Y:0002 RESERVED                48 nibblestate             ds          1
Y:0002
Y:0003 RESERVED                49 byteval                 ds          1
Y:0003
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0004 RESERVED                50 numchannels             ds          1
Y:0004
Y:0005 RESERVED                51 TempConst_00000f        ds          1
Y:0005
Y:0006 RESERVED                52 TempConst_007fff        ds          1
Y:0006
Y:0007 RESERVED                53 TempConst_ff8000        ds              1
Y:0007
Y:0008 RESERVED                54 ReadPtrChannel0         ds          1
Y:0008
Y:0009 RESERVED                55 InputSample             ds          1
Y:0009
                               58 ;*********************************************************************************
                               59 ;               P memory 
                               60 ;
                               61 ;*********************************************************************************
P:0000                         63     org p,"Encode_IMA_ADPCM_Block_P":   
                               65 ;///////////////////////////////////////////////////////////////////////////////
                               66 ;
                               67 ;>   Name:  Encode_IMA_ADPCM_Block
                               68 ;
                               69 ;    Type:      Function
                               70 ;           Encode_IMA_ADPCM_Block(NumChannels,Outputbuf,InputBuf)
                               71 ;    Description:       Encodes IMA ADPCM block and places compressed data.
                               72 ;
                               73 ;    Inputs:            
                               74 ;                       A = Number of Channels
                               75 ;                       r0 = Outputbuffer, m0 = Modulo.
                               76 ;           r4 = X:Inputbuffer, m4 = modulo,
                               77 ;
                               78 ;    Outputs:           
                               79 ;                       None
                               80 ;    Notes:
                               81 ;                       Registers trashed: Assume all except r7. R0 and R4 will be updated to poin
                                  t
                               82 ;                       to point next input/output locations.
                               83 ;///////////////////////////////////////////////////////////////////////////////
                               85 FEncode_IMA_ADPCM_Block
                               86 Encode_IMA_ADPCM_Block
P:0000 44F400 00000F  3    3   93     move #>$f,x0
P:0002 4C0000r        2    5   94     move x0,y:<TempConst_00000f
P:0003 44F400 0000FF  3    8   95     move #>$ff,x0
P:0005 4C0000r        2   10   96     move x0,y:<Enc_Const_0000ff
P:0006 44F400 007FFF  3   13   97     move #>$7fff,x0
P:0008 4C0000r        2   15   98     move x0,y:<TempConst_007fff
P:0009 44F400 FF8000  3   18   99     move #>$ff8000,x0
P:000B 4C0000r        2   20  100     move x0,y:<TempConst_ff8000
P:000C 7D8000r        2   22  101     move y:<Const_000002,n5
P:000D 21DC00         2   24  102     move A,n4           
P:000E 5E0000r        2   26  103     move A,y:<numchannels
P:000F 63F413 rrrrrr  3   29  104     clr  A      #IMA_pred0,r3
P:0011 5E0000r        2   31  105     move A,y:<EncByteState
P:0012 060040rrrrrrr  6   37  106     do  y:<numchannels,_WriteBlockHeader
P:0014 4CDC00         2   39  107         move y:(r4)+,x0
P:0015 0108D0         2   41  108         mpy  x0,#8,A
P:0016 5E5B00         2   43  109         move A,y:(r3)+
P:0017 0BF080 rrrrrr  6   49  110         jsr  WriteWordData
P:0019 5EDB00         2   51  111         move y:(r3)+,A
P:001A 0BF080 rrrrrr  6   57  112         jsr  WriteByteData
                              113         ; Write the reserved word
P:001C 200013         2   59  114         clr  A
P:001D 0BF080 rrrrrr  6   65  115         jsr  WriteByteData
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                        (28)  116 _WriteBlockHeader
P:001F 5FF013 rrrrrr  3   68  118         clr  A          y:Fg_Wave_wnSamplesPerBlock,B
P:0021 4C8000r        2   70  119         move y:<Const_000001,x0
P:0022 5E004Cr        2   72  120         sub      x0,B   A,y:<nibblestate
P:0023 20002A         2   74  121     asr  B                                 ; Encode 8 samples at a time.
P:0024 20002A         2   76  122     asr  B
P:0025 20002A         2   78  123     asr  B
P:0026 06CF00 rrrrrr  6   84  124     do B,_EndEncodeBlock
P:0028 65F400 rrrrrr  3   87  125         move #IMA_pred0,r5
P:002A 6C0000r        2   89  126         move r4,y:<ReadPtrChannel0
P:002B 060040rrrrrrr  6   95  127         do   y:<numchannels,_EndChannelLoop
P:002D 060880 rrrrrr  6  101  128             do   #8,_EndWordLoop
P:002F 4CCC00         2  103  129                 move  y:(r4)+n4,x0
P:0030 0108D0         2  105  130                 mpy   x0,#8,A
P:0031 0BF080 rrrrrr  6  111  131                 jsr   IMAADPCM_Encode_Sample
P:0033 5F8000r        2  113  132                 move  y:<nibblestate,B
P:0034 4C8000r        2  115  133                 move  y:<Const_000001,x0
P:0035 4C804Br        2  117  134                 eor   x0,B      y:<Encoded,x0
P:0036 5F0000r        2  119  135                 move  B,y:<nibblestate
P:0037 5E8000r        2  121  136                 move  y:<encodedbyte,A
P:0038 4C0000r        2  123  137                 move  x0,y:<encodedbyte
P:0039 0AF0A2 rrrrrr  6  129  138                 jne   _Continue3
P:003B 0114D8         2  131  139                 mpy   x0,#20,B
P:003C 4C8000r        2  133  140                 move  y:<TempConst_00000f,x0
P:003D 212446         2  135  141                 and   x0,A      B0,x0
P:003E 200042         2  137  142                 or    x0,A
P:003F 218E00         2  139  143                 move  A1,A
P:0040 0BF080 rrrrrr  6  145  144                 jsr   WriteByteData
                              145 _Continue3  
P:0042 000000         2  147  146                 nop
                        (46)  147 _EndWordLoop
P:0043 6C8000r        2  149  148                 move y:<ReadPtrChannel0,r4 
P:0044 204D00         2  151  149                 move (r5)+n5            ; Advance to next channel
P:0045 205C00         2  153  150                 move (r4)+
                        (58)  151 _EndChannelLoop
P:0046 5E8000r        2  155  152         move y:<Const_000004,A
P:0047 060060r        4  159  153         rep  y:<numchannels
P:0048 6C8032r        2  161  154         asl  A      y:<ReadPtrChannel0,r4
P:0049 21DC00         2  163  155         move A,n4
P:004A 000000         2  165  156         nop
P:004B 204C00         2  167  157         move (r4)+n4
P:004C 7C8000r        2  169  158         move y:<numchannels,n4
                        (85)  159 _EndEncodeBlock
P:004D 00000C         4  173  160     rts     
                              161         
                              164 ;///////////////////////////////////////////////////////////////////////////////
                              165 ;
                              166 ;>   Name:  IMAADPCM_Encode_Sample
                              167 ;
                              168 ;    Type:      Function
                              169 ;
                              170 ;       int IMAADPCM_Encode_Sample(int16 sample)
                              171 ;
                              172 ;    Description:       Encodes an ADPCM Sample
                              173 ;
                              174 ;    Inputs:            
                              175 ;                       A = Sample to be encoded
                              176 ;           r3 -> Points to index value
                              177 ;           r5 -> ptr to pSadpcmencode Structure block.
                              178 ;    Outputs:           
                              179 ;                       A = Compressed nibble
                              180 ;    Notes:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              181 ;                       Registers trashed: Assume all except r7. R0 and R4 will be updated to poin
                                  t
                              182 ;                       to point next input/output locations.
                              183 ;///////////////////////////////////////////////////////////////////////////////
                              184 IMAADPCM_Encode_Sample
P:004E 5E0000r        2  175  185     move    A,y:<InputSample
P:004F 4EDD00         2  177  186     move    y:(r5)+,y0                              ; y0 = pred
P:0050 4CD500         2  179  187     move    y:(r5)-,x0                              ; x0 = index
P:0051 57F400 rrrrrr  3  182  188     move    #>IMAStepSizeTable,B
P:0053 280048         2  184  189     add     x0,B    #0,A0
P:0054 21F31B         2  186  190     clr     B       B,r3                            ; r3 points to step
P:0055 4F8054r        2  188  192     sub     y0,A    y:<Const_000008,y1              ; A = diff = input - pred, y1 = encoded = 0
P:0056 029078         2  190  193     tlt     y1,B
P:0057 5F0026r        2  192  194     abs     A       B,y:<Encoded
P:0058 57E300         2  194  195     move    x:(r3),B                                ; B = stepsize
P:0059 200005         2  196  196     cmp     B,A                                     ; ? (diff >= stepsize), 
P:005A 0AF0AB rrrrrr  6  202  197     jmi     _Next_Quant_step1
P:005C 200014         2  204  198     sub     B,A                                     ; diff = diff - step_size
P:005D 0A0060r        4  208  199     bset    #2,y:<Encoded                           ; encoded = encoded | 4
                              200 _Next_Quant_step1
P:005E 20002B         2  210  201     lsr     B                                       ; step = step >> 1
P:005F 200005         2  212  202     cmp     B,A                                     ; ? (diff >= stepsize), 
P:0060 0AF0AB rrrrrr  6  218  203     jmi     _Next_Quant_step2
P:0062 200014         2  220  204     sub     B,A                                     ; diff = diff - step_size
P:0063 0A0060r        4  224  205     bset    #1,y:<Encoded                               ; encoded = encoded | 2
                              206 _Next_Quant_step2
P:0064 20002B         2  226  207     lsr     B                                       ; step = step >> 1
P:0065 200005         2  228  208     cmp     B,A                                     ; ? (diff >= stepsize), 
P:0066 0AF0AB rrrrrr  6  234  209     jmi     _Quant_over
P:0068 200014         2  236  210     sub     B,A                                     ; diff = diff - step_size
P:0069 0A0060r        4  240  211     bset    #0,y:<Encoded                               ; encoded = encoded | 1
                              213 _Quant_over:    
P:006A 20002B         2  242  214     lsr     B
P:006B 4E801Cr        2  244  215     sub     A,B     y:<InputSample,y0                   ; Get the input in y0
P:006C 0A00E0rrrrrrr  6  250  216     jset    #3,y:<Encoded,_Negative_slope               ; ? encoded & 8 then -ve slope
P:006E 4F8058r        2  252  217     add     y0,B    y:<TempConst_007fff,y1
P:006F 0AF080 rrrrrr  6  258  218     jmp     _Store_predicted_val
                              219 _Negative_slope
P:0071 4F805Cr        2  260  220     sub     y0,B    y:<TempConst_007fff,y1
P:0072 20003E         2  262  221     neg     B
                              222 _Store_predicted_val:
                              223     ; Saturate the predicted value
P:0073 4D807Dr        2  264  224     cmp    y1,B         y:<TempConst_ff8000,x1
P:0074 027078         2  266  225     tgt    y1,B
P:0075 5E806Dr        2  268  226     cmp    x1,B         y:<Encoded,A
P:0076 029068         2  270  227     tlt    x1,B
P:0077 5F5D00         2  272  228     move    B,y:(r5)+                               ; Store the predicted value.
                              231     ; Pack the encoded value here
                              232     ; Get stepsize
P:0078 46F400 rrrrrr  3  275  233     move    #>IMAIndexTable,y0
P:007A 200050         2  277  234     add     y0,A        
P:007B 21D200         2  279  235     move    A,r2                                    ; Set r2 = &indextable[encoded]
P:007C 5FE500         2  281  236     move    y:(r5),B                                ; B = index value       
P:007D 44E213         2  283  237     clr     A           x:(r2),x0                   ; x0 = indextable[encoded]
P:007E 44F448 000058  3  286  238     add     x0,B        #>`88,x0                    ; Get the new index, index = index + indextabl
                                  e[encoded]
P:0080 029008         2  288  239     tlt     A,B
P:0081 5E804Dr        2  290  240     cmp     x0,B        y:<Encoded,A
P:0082 027048         2  292  241     tgt     x0,B
P:0083 5F5500         2  294  242     move    B,y:(r5)-
                              243     ; return value is in A
P:0084 00000C         4  298  244     rts
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              246     endsec
                              247     
