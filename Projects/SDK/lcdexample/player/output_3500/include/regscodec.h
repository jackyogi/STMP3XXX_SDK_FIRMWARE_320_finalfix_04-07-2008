#if !(defined(regscodecinc))
#define regscodecinc 1



#include "types.h"



//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

//   SYSTEM STMP Registers 
//	Last Edited 7.17.2003 M. Henson
//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#define HW_CODEC_BASEADDR (0xFA00)






/////////////////////////////////////////////////////////////////////////////////
//   Headphone Control Register (HW_HPCTRL) Bit Definitions
#define HW_HPCTRL_TESTIALL_BITPOS 0
#define HW_HPCTRL_TESTI1_BITPOS 2
#define HW_HPCTRL_POP0_BITPOS 4
#define HW_HPCTRL_POP1_BITPOS 5
#define HW_HPCTRL_POP2_BITPOS 6
#define HW_HPCTRL_RSVD0_BITPOS 7
#define HW_HPCTRL_HPPWD_BITPOS 8
#define HW_HPCTRL_HPCLASSAB_BITPOS 9
#define HW_HPCTRL_CAPLESS_BITPOS 10
#define HW_HPCTRL_RSRVD1_BITPOS 11
#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
#define HW_HPCTRL_RSRVD2_BITPOS 19
#define HW_HPCTRL_CHOP_CLK_BITPOS 20
#define HW_HPCTRL_SHORT_LR_BITPOS 22
#define HW_HPCTRL_SHORT_CM_BITPOS 23

#define HW_HPCTRL_TESTIALL_WIDTH 2
#define HW_HPCTRL_TESTI1_WIDTH 2
#define HW_HPCTRL_POP0_WIDTH 1
#define HW_HPCTRL_POP1_WIDTH 1
#define HW_HPCTRL_POP2_WIDTH 1
#define HW_HPCTRL_RSVD0_WIDTH 1
#define HW_HPCTRL_HPPWD_WIDTH 1
#define HW_HPCTRL_HPCLASSAB_WIDTH 1
#define HW_HPCTRL_CAPLESS_WIDTH 1
#define HW_HPCTRL_RSRVD1_WIDTH 1
#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
#define HW_HPCTRL_RSRVD2_WIDTH 1
#define HW_HPCTRL_CHOP_CLK_WIDTH 2
#define HW_HPCTRL_SHORT_LR_WIDTH 1
#define HW_HPCTRL_SHORT_CM_WIDTH 1

#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK

#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS

#if defined(CAPLESS_HP)
#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
#else 
#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
#endif

// Headphone control register
#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
/////////////////////////////////////////////////////////////////////////////////
//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
typedef union               
{
    struct {
        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
    } B;
    int I;
    unsigned int U;
} hpctrl_type;
// Headphone control short mode 2 bit values for above short bitfield.
#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1	
#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3


/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////   MIXER REGISTERS ///////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////
//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
#define HW_MIXTBR_HOLD_GND_BITPOS 2
#define HW_MIXTBR_ACKI_BITPOS 3
#define HW_MIXTBR_ASD2X_BITPOS 4
#define HW_MIXTBR_PCPCU_BITPOS 5
#define HW_MIXTBR_PCPCD_BITPOS 6
#define HW_MIXTBR_DCKI_BITPOS 7
#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
#define HW_MIXTBR_PSRN_BITPOS 9
#define HW_MIXTBR_FX2_BITPOS 10
#define HW_MIXTBR_VCOS_BITPOS 11
#define HW_MIXTBR_XBCO_BITPOS 12
#define HW_MIXTBR_XBGC_BITPOS 13
#define HW_MIXTBR_ADTHD_BITPOS 14
#define HW_MIXTBR_MICBIAS_LSBITPOS 15
#define HW_MIXTBR_PWDADC_BITPOS 16
#define HW_MIXTBR_MICBIAS1_BITPOS 17
#define HW_MIXTBR_EZD_BITPOS 18
#define HW_MIXTBR_DZCDA_BITPOS 19
#define HW_MIXTBR_DZCFM_BITPOS 20
#define HW_MIXTBR_DZCLI_BITPOS 21
#define HW_MIXTBR_DZCMI_BITPOS 22
#define HW_MIXTBR_DZCMA_BITPOS 23

#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
#define HW_MIXTBR_HOLD_GND_WIDTH (1)
#define HW_MIXTBR_ACKI_WIDTH (1)
#define HW_MIXTBR_ASD2X_WIDTH (1)
#define HW_MIXTBR_PCPCU_WIDTH (1)
#define HW_MIXTBR_PCPCD_WIDTH (1)
#define HW_MIXTBR_DCKI_WIDTH (1)
#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
#define HW_MIXTBR_PSRN_WIDTH (1)
#define HW_MIXTBR_FX2_WIDTH (1)
#define HW_MIXTBR_VCOS_WIDTH (1)
#define HW_MIXTBR_XBCO_WIDTH (1)
#define HW_MIXTBR_XBGC_WIDTH (1)
#define HW_MIXTBR_ADTHD_WIDTH (1)
#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
#define HW_MIXTBR_PWDADC_WIDTH (1)
#define HW_MIXTBR_MICBIAS1_WIDTH (1)
#define HW_MIXTBR_EZD_WIDTH (1)
#define HW_MIXTBR_DZCDA_WIDTH (1)
#define HW_MIXTBR_DZCFM_WIDTH (1)
#define HW_MIXTBR_DZCLI_WIDTH (1)
#define HW_MIXTBR_DZCMI_WIDTH (1)
#define HW_MIXTBR_DZCMA_WIDTH (1)


#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS

#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK

typedef union               
{
    struct {
        int INV_USB_CLK            : 1;
        int USB_DFF_BYPASS         : 1;
        int HOLD_GND               : 1;
        int ACKI                   : 1;
        int ASD2X                  : 1;
        int PCPCU                  : 1;
        int PCPCD                  : 1;
        int DCKI                   : 1;
        int MIC_BIAS_OUT_SEL       : 1;
        int PSRN                   : 1;
        int FX2                    : 1;
        int VCOS                   : 1;
        int XBCO                   : 1;
        int XBGC                   : 1;
        int ADTHD                  : 1;
        int MICBIAS_LSBITPOS       : 1;
        int PWDADC                 : 1;
        int MICBIAS1               : 1;
        int EZD                    : 1;
        int DZCDA                  : 1;
        int DZCFM                  : 1;
        int DZCLI                  : 1;
        int DZCMI                  : 1;
        int DZCMA                  : 1;
    } B;
    int I;
    unsigned int U;
} mix_tbr_type;
#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))


/////////////////////////////////////////////////////////////////////////////////
//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
#define HW_MIXVOLUMER_MR_BITPOS 0
#define HW_MIXVOLUMER_ML_BITPOS 8
#define HW_MIXVOLUMER_MUTE_BITPOS 15

#define HW_MIXVOLUMER_MR_WIDTH (5)
#define HW_MIXVOLUMER_ML_WIDTH (5)
#define HW_MIXVOLUMER_MUTE_WIDTH 1

#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS

#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK

#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS

#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31

/////////////////////////////////////////////////////////////////////////////////
//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
#define HW_MIXMASTERVR_MR_BITPOS 0
#define HW_MIXMASTERVR_ML_BITPOS 8
#define HW_MIXMASTERVR_MUTE_BITPOS 15

#define HW_MIXMASTERVR_MR_WIDTH (5)
#define HW_MIXMASTERVR_ML_WIDTH (5)
#define HW_MIXMASTERVR_MUTE_WIDTH (1)

#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS

#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK


typedef union               
{
    struct
    {
        unsigned MR :5;
        int         :3;
        unsigned ML :5;
        int         :2;
        int MUTE    :1;
    } B;
    int I;
    unsigned int U;
} mix_mastervr_type;
#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))


/////////////////////////////////////////////////////////////////////////////////
//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
#define HW_MIXMICINVR_GN_BITPOS 0
#define HW_MIXMICINVR_P20DB_BITPOS 6
#define HW_MIXMICINVR_MUTE_BITPOS 15

#define HW_MIXMICINVR_GN_WIDTH 5
#define HW_MIXMICINVR_RSVD1_WIDTH 1
#define HW_MIXMICINVR_P20DB_WIDTH 1
#define HW_MIXMICINVR_RSVD2_WIDTH 8
#define HW_MIXMICINVR_MUTE_WIDTH 1
#define HW_MIXMICINVR_RSVD3_WIDTH 8

#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS

#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK

#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31

typedef union               
{
    struct {
        int GN          : HW_MIXMICINVR_GN_WIDTH;
        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_micinvr_type;
#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))




/////////////////////////////////////////////////////////////////////////////////
//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
#define HW_MIXLINE1INVR_GR_BITPOS 0
#define HW_MIXLINE1INVR_GL_BITPOS 8
#define HW_MIXLINE1INVR_MUTE_BITPOS 15

#define HW_MIXLINE1INVR_GR_WIDTH 5
#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
#define HW_MIXLINE1INVR_GL_WIDTH 5
#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
#define HW_MIXLINE1INVR_MUTE_WIDTH 1
#define HW_MIXLINE1INVR_RSVD3_WIDTH 8

#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS

#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK

typedef union               
{
    struct {
        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_line1invr_type;
#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))



/////////////////////////////////////////////////////////////////////////////////
//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
#define HW_MIXLINE2INVR_GR_BITPOS 0
#define HW_MIXLINE2INVR_GL_BITPOS 8
#define HW_MIXLINE2INVR_MUTE_BITPOS 15

#define HW_MIXLINE2INVR_GR_WIDTH 5
#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
#define HW_MIXLINE2INVR_GL_WIDTH 5
#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
#define HW_MIXLINE2INVR_MUTE_WIDTH 1
#define HW_MIXLINE2INVR_RSVD3_WIDTH 8


#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS

#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK

typedef union               
{
    struct {
        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_line2invr_type;
#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))



/////////////////////////////////////////////////////////////////////////////////
//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
#define HW_MIXDACINVR_MR_BITPOS 0
#define HW_MIXDACINVR_ML_BITPOS 8
#define HW_MIXDACINVR_MUTE_BITPOS 15

#define HW_MIXDACINVR_MR_WIDTH (5)
#define HW_MIXDACINVR_ML_WIDTH (5)
#define HW_MIXDACINVR_MUTE_WIDTH (1)

#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS

#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK

typedef union               
{
    struct {
        int MR   : HW_MIXDACINVR_MR_WIDTH;
        int ML   : HW_MIXDACINVR_ML_WIDTH;
        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_dacinvr_type;
#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))


/////////////////////////////////////////////////////////////////////////////////
//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
#define HW_MIXRECSELR_SR_BITPOS 0
#define HW_MIXRECSELR_SL_BITPOS 8
#define HW_MIXRECSELR_X_BITPOS 11

#define HW_MIXRECSELR_SR_WIDTH 3
#define HW_MIXRECSELR_RSVD1_WIDTH 5
#define HW_MIXRECSELR_SL_WIDTH 3
#define HW_MIXRECSELR_X_WIDTH 1
#define HW_MIXRECSELR_RSVD2_WIDTH 12

#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS

#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS

#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS

#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK

typedef union               
{
    struct {
        int SR          : HW_MIXRECSELR_SR_WIDTH;
        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
        int SL          : HW_MIXRECSELR_SL_WIDTH;
        int X           : HW_MIXRECSELR_X_WIDTH;
        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_recselr_type;
#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))



/////////////////////////////////////////////////////////////////////////////////
//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
#define HW_MIXADCGAINR_GR_BITPOS 0
#define HW_MIXADCGAINR_GL_BITPOS 8
#define HW_MIXADCGAINR_MUTE_BITPOS 15

#define HW_MIXADCGAINR_GR_WIDTH 4
#define HW_MIXADCGAINR_RSVD1_WIDTH 4
#define HW_MIXADCGAINR_GL_WIDTH 4
#define HW_MIXADCGAINR_RSVD2_WIDTH 3
#define HW_MIXADCGAINR_MUTE_WIDTH 1
#define HW_MIXADCGAINR_RSVD3_WIDTH 8

#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS

#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK

#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS

#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
#define HW_MIXADCGAINR_GR_22P5_SETMASK 15

typedef union               
{
    struct {
        int GR          : HW_MIXADCGAINR_GR_WIDTH;
        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
        int GL          : HW_MIXADCGAINR_GL_WIDTH;
        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_adcgainr_type;
#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))



/////////////////////////////////////////////////////////////////////////////////
//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
#define HW_MIXPWRDNR_PR0_BITPOS 9
#define HW_MIXPWRDNR_PR1_BITPOS 10
#define HW_MIXPWRDNR_PR2_BITPOS 11

#define HW_MIXPWRDNR_PR0_WIDTH (1)
#define HW_MIXPWRDNR_PR1_WIDTH (1)
#define HW_MIXPWRDNR_PR2_WIDTH (1)
#define HW_MIXPWRDNR_RSVD_WIDTH (12)

#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS

#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK

typedef union               
{
    struct {
		int			: 9;
       int PR0   	: HW_MIXPWRDNR_PR0_WIDTH;
       int PR1  	: HW_MIXPWRDNR_PR1_WIDTH;
       int PR2  	: HW_MIXPWRDNR_PR2_WIDTH;
       int RSVD 	: HW_MIXPWRDNR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_pwrdnr_type;
#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))


/////////////////////////////////////////////////////////////////////////////////

//  Mixer Test Register (HW_MIX_TEST) Bit Definitions

#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)

#define HW_MIX_TEST_RSVD0_WIDTH (2)

#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)

#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)

#define HW_MIX_TEST_RSVD1_WIDTH (2)

#define HW_MIX_TEST_TMP_CFG_WIDTH (4)

#define HW_MIX_TEST_TMPPWD_WIDTH (1)

#define HW_MIX_TEST_RSVD2_WIDTH (11)



#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)

#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)

#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)

#define HW_MIX_TEST_TMP_CFG_BITPOS (8)

#define HW_MIX_TEST_TMPPWD_BITPOS (12)



#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        

#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        

#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 

#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 

#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 


#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     

#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     

#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 

#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 

#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 


typedef union               
{
    struct {
        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
    } B;
    int I;
    unsigned int U;
} mix_test_type;
#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */


/////////////////////////////////////////////////////////////////////////////////
//   Reference Control Register (HW_REF_CTRL) Bit Definitions
#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
#define HW_REF_CTRL_ADJDAC_BITPOS 4
#define HW_REF_CTRL_VAGVAL_BITPOS 5
#define HW_REF_CTRL_ADJV_BITPOS 9
#define HW_REF_CTRL_ADCREFV_BITPOS 10
#define HW_REF_CTRL_ADJADC_BITPOS 14
#define HW_REF_CTRL_PWRDWNS_BITPOS 15
#define HW_REF_CTRL_BIASC_BITPOS 16
#define HW_REF_CTRL_LWREF_BITPOS 18
#define HW_REF_CTRL_LOW_PWR_BITPOS 19 

#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
#define HW_REF_CTRL_ADJDAC_WIDTH (1)
#define HW_REF_CTRL_VAGVAL_WIDTH (4)
#define HW_REF_CTRL_ADJV_WIDTH (1)
#define HW_REF_CTRL_ADCREFV_WIDTH (4)
#define HW_REF_CTRL_ADJADC_WIDTH (1)
#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
#define HW_REF_CTRL_BIASC_WIDTH (2)
#define HW_REF_CTRL_LWREF_WIDTH (1)
#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
#define HW_REF_CTRL_RSVD_WIDTH (4)

#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)

#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK

typedef union               
{
    struct {
        int DACVBGVAL	   : HW_REF_CTRL_DACVBGVAL_WIDTH;
        int ADJDAC		   : HW_REF_CTRL_ADJDAC_WIDTH;
        int VAGVAL		   : HW_REF_CTRL_VAGVAL_WIDTH;
        int ADJV		   : HW_REF_CTRL_ADJV_WIDTH;
        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
        int ADJADC		   : HW_REF_CTRL_ADJADC_WIDTH;
        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
        int RSVD 	       : HW_REF_CTRL_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} ref_ctrl_type;
#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))



/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//////  DAC Registers
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
#define HW_DAC_BASEADDR 0xF800



/////////////////////////////////////////////////////////////////////////////////
//  DAC Control Status Register (HW_DACCSR) Bit Definitions
#define HW_DACCSR_TXEN_BITPOS 0
#define HW_DACCSR_TXIEN_BITPOS 1
#define HW_DACCSR_TXI_BITPOS 2
#define HW_DACCSR_TXEXC_BITPOS 3
#define HW_DACCSR_LPBK_BITPOS 4
#define HW_DACCSR_DMASEL_BITPOS 5
#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
#define HW_DACCSR_LVUP_BITPOS 8
#define HW_DACCSR_RVUP_BITPOS 9
#define HW_DACCSR_VUP_BITPOS 10
#define HW_DACCSR_RSRVD_BITPOS 11
#define HW_DACCSR_CLKGT_BITPOS 23

#define HW_DACCSR_TXEN_WIDTH (1)
#define HW_DACCSR_TXIEN_WIDTH (1)
#define HW_DACCSR_TXI_WIDTH (1)
#define HW_DACCSR_TXEXC_WIDTH (1)
#define HW_DACCSR_LPBK_WIDTH (1)
#define HW_DACCSR_DMASEL_WIDTH (2)
#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
#define HW_DACCSR_LVUP_WIDTH (1)
#define HW_DACCSR_RVUP_WIDTH (1)
#define HW_DACCSR_VUP_WIDTH (1)
#define HW_DACCSR_RSRVD_WIDTH (12)
#define HW_DACCSR_CLKGT_WIDTH (1)

#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
//         DMASEL_X has no asm setmask since X config value is 00 binary.
#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)

#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
// No asm clrmask for 2 bit bitfield DMASEL
#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 


typedef union               
{
    struct {
        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
        int TXI                         : HW_DACCSR_TXI_WIDTH;
        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
        int VUP                         : HW_DACCSR_VUP_WIDTH;
        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_csr_type;
#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))



/////////////////////////////////////////////////////////////////////////////////
//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
#define HW_DACSRR_SR_BITPOS 0

#define HW_DACSRR_SR_WIDTH (23)
#define HW_DACSRR_RSVD_WIDTH (1)

//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        

#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK

typedef union               
{
    struct {
        int SR                          : HW_DACSRR_SR_WIDTH;
        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_srr_type;
#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))



/////////////////////////////////////////////////////////////////////////////////
//  DAC Word Count Register (HW_DACWCR) Bit Definitions
#define HW_DACWCR_WCR_BITPOS 0

#define HW_DACWCR_WCR_WIDTH (10)
#define HW_DACWCR_RSVD_WIDTH (12)

//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        

#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK

typedef union               
{
    struct {
        int WCR                         : HW_DACWCR_WCR_WIDTH;
        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_wcr_type;
#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))



/////////////////////////////////////////////////////////////////////////////////
//  DAC Current Position Register (HW_DACCPR) Bit Definitions
#define HW_DACCPR_CPR_BITPOS 0

#define HW_DACCPR_CPR_WIDTH (10)
#define HW_DACCPR_RSVD_WIDTH (14)

//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        

#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK

typedef union               
{
    struct {
        int CPR                         : HW_DACCPR_CPR_WIDTH;
        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_cpr_type;
#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))



/////////////////////////////////////////////////////////////////////////////////
//  DAC Modulo Register (HW_DACMR) Bit Definitions
#define HW_DACMR_MR_BITPOS 0
#define HW_DACMR_MR_WIDTH (10)
#define HW_DACMR_RSVD_WIDTH (14)

//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        

#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK

typedef union               
{
    struct {
        int MR                         : HW_DACMR_MR_WIDTH;
        int RSVD                       : HW_DACMR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_mr_type;
#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))



/////////////////////////////////////////////////////////////////////////////////
//   DAC Base Address Register (HW_DACBAR) Bit Definitions
#define HW_DACBAR_BAR_BITPOS 0
#define HW_DACBAR_BAR_WIDTH (16)
#define HW_DACBAR_RSVD_WIDTH (8)

//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        

#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK

typedef union               
{
    struct {
        int BAR                        : HW_DACBAR_BAR_WIDTH;
        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_bar_type;
#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))



/////////////////////////////////////////////////////////////////////////////////
//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
#define HW_DACICR_IPT_BITPOS 0

#define HW_DACICR_IPT_WIDTH (10)
#define HW_DACICR_RSVD_WIDTH (12)

#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        

#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK

typedef union               
{
    struct {
        int IPT                         : HW_DACICR_IPT_WIDTH;
        int RSVD                        : HW_DACICR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} dac_icr_type;
#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))





/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//////  ADC Registers
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
#define HW_ADC_BASEADDR 0xFB00



/////////////////////////////////////////////////////////////////////////////////
//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
#define HW_ADCCSR_TXEN_BITPOS 0
#define HW_ADCCSR_TXIEN_BITPOS 1
#define HW_ADCCSR_TXI_BITPOS 2
#define HW_ADCCSR_TXEXC_BITPOS 3
#define HW_ADCCSR_LPBK_BITPOS 4
#define HW_ADCCSR_DMASEL_BITPOS 5
#define HW_ADCCSR_LPFMODE_BITPOS 8
#define HW_ADCCSR_CLKGT_BITPOS 23

#define HW_ADCCSR_TXEN_WIDTH (1)
#define HW_ADCCSR_TXIEN_WIDTH (1)
#define HW_ADCCSR_TXI_WIDTH (1)
#define HW_ADCCSR_TXEXC_WIDTH (1)
#define HW_ADCCSR_LPBK_WIDTH (1)
#define HW_ADCCSR_DMASEL_WIDTH (2)
#define HW_ADCCSR_RSVD1_WIDTH (1)
#define HW_ADCCSR_LPFMODE_WIDTH (4)
#define HW_ADCCSR_RSVD2_WIDTH (11)
#define HW_ADCCSR_CLKGT_WIDTH (1)

#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS

#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK

typedef union               
{
    struct {
        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
        int TXI                         : HW_ADCCSR_TXI_WIDTH;
        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_csr_type;
#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))


/////////////////////////////////////////////////////////////////////////////////
//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
#define HW_ADCWCR_WCR_BITPOS 0

#define HW_ADCWCR_WCR_WIDTH (10)
#define HW_ADCWCR_RSVD_WIDTH (14)

#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        

#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK

typedef union               
{
    struct {
        int WCR                         : HW_ADCWCR_WCR_WIDTH;
        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_wcr_type;
#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))



/////////////////////////////////////////////////////////////////////////////////
//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
#define HW_ADCBAR_BAR_BITPOS 0
#define HW_ADCBAR_BAR_WIDTH (16)
#define HW_ADCBAR_RSVD_WIDTH (8)

//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        

#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK

typedef union               
{
    struct {
        int BAR                        : HW_ADCBAR_BAR_WIDTH;
        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_bar_type;
#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))





/////////////////////////////////////////////////////////////////////////////////
//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
#define HW_ADCCPR_CPR_BITPOS 0

#define HW_ADCCPR_CPR_WIDTH (10)
#define HW_ADCCPR_RSVD_WIDTH (14)

#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        

#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK

typedef union               
{
    struct {
        int CPR                         : HW_ADCCPR_CPR_WIDTH;
        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_cpr_type;
#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))


/////////////////////////////////////////////////////////////////////////////////
//  ADC Modulo Register (HW_ADCMR) Bit Definitions
#define HW_ADCMR_MR_BITPOS 0
#define HW_ADCMR_MR_WIDTH (10)
#define HW_ADCMR_RSVD_WIDTH (14)

//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        

#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK

typedef union               
{
    struct {
        int MR                         : HW_ADCMR_MR_WIDTH;
        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_mr_type;
#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))

/////////////////////////////////////////////////////////////////////////////////
//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
#define HW_ADCSRR_SR_BITPOS 0

#define HW_ADCSRR_SR_WIDTH (23)
#define HW_ADCSRR_RSVD_WIDTH (1)

//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        

#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK

typedef union               
{
    struct {
        int SR                          : HW_ADCSRR_SR_WIDTH;
        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_srr_type;
#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))

/////////////////////////////////////////////////////////////////////////////////
//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
#define HW_ADCICR_IPT_BITPOS 0

#define HW_ADCICR_IPT_WIDTH (10)
#define HW_ADCICR_RSVD_WIDTH (12)

#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        

#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK

typedef union               
{
    struct {
        int IPT                         : HW_ADCICR_IPT_WIDTH;
        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
    } B;
    int I;
    unsigned int U;
} adc_icr_type;
#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))

//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
// to update the actual files. Only the defines needed to build SDK2.400 were added.

#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16

#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808

#endif

