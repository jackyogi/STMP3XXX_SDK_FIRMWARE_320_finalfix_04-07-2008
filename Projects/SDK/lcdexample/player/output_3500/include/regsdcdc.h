#if !(defined(regsdcdcinc))

#define regssysteminc 1



#include "types.h"



//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

//   SYSTEM STMP Registers 
//	Last Edited 2.19.2003 M. May
//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#define HW_DCDC_BASEADDR (0xFA0C)






/////////////////////////////////////////////////////////////////////////////////

//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions

#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)

#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)



#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)



#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  



#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  





typedef union               
{
    struct {
        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
    } B;
    unsigned int I;
} dcdc1_ctrl0_type;
#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */




/////////////////////////////////////////////////////////////////////////////////

//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions

#define HW_DCDC1_CTRL1_C_WIDTH (4)
#define HW_DCDC1_CTRL1_R_WIDTH (4)
#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)



#define HW_DCDC1_CTRL1_C_BITPOS (0)
#define HW_DCDC1_CTRL1_R_BITPOS (4)
#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 

#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   

#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  


typedef union               
{
    struct {
        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
    } B;
    unsigned int I;
} dcdc1_ctrl1_type;
#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */




/////////////////////////////////////////////////////////////////////////////////

//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions

#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
#define HW_DCDC_VDDIO_OK_WIDTH (1)
#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)



#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
#define HW_DCDC_VDDIO_OK_BITPOS (21)


#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  



#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  


typedef union               
{
    struct {
        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
		 unsigned int VDDIO_OK	      : HW_DCDC_VDDIO_OK_WIDTH;
        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
    } B;
    unsigned int I;
} dcdc_vddio_type;
#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */



/////////////////////////////////////////////////////////////////////////////////
//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions

#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
#define HW_DCDC_VDDD_OK_WIDTH (1)
#define HW_DCDC_VDDD_RSVD3_WIDTH (2)

#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
#define HW_DCDC_VDDD_OK_BITPOS (21)
#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  

#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  

typedef union               
{
    struct {
        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
		 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
    } B;
   unsigned int I;
	unsigned U;
} dcdc_vddd_type;
#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */




/////////////////////////////////////////////////////////////////////////////////

//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions

#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
#define HW_DCDC_VDDA_OK_WIDTH (1)
#define HW_DCDC_VDDA_RSVD3_WIDTH (2)



#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
#define HW_DCDC_VDDA_OK_BITPOS (21)


#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  



#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  


typedef union               
{
    struct {
        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
	     unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
    } B;
    unsigned int I;
} dcdc_vdda_type;
#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */




/////////////////////////////////////////////////////////////////////////////////

//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions

#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)



#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)

#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  

#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  


typedef union               
{
    struct {
        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
    } B;
    unsigned int I;
} dcdc2_ctrl0_type; 
#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */




/////////////////////////////////////////////////////////////////////////////////

//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions

#define HW_DCDC2_CTRL1_C_WIDTH (4)
#define HW_DCDC2_CTRL1_R_WIDTH (4)
#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)


#define HW_DCDC2_CTRL1_C_BITPOS (0)
#define HW_DCDC2_CTRL1_R_BITPOS (4)
#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)



#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  



#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  


typedef union               
{
    struct {
        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
    } B;
    unsigned int I;
} dcdc2_ctrl1_type;
#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */




/////////////////////////////////////////////////////////////////////////////////

//  Speed Monitoring Register (HW_SPEED) Bit Definitions

#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
#define HW_SPEED_RSVD0_WIDTH (2)
#define HW_SPEED_RINGOSC1_WIDTH (7)
#define HW_SPEED_RSVD1_WIDTH (1)
#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
#define HW_SPEED_RSVD2_WIDTH (2)
#define HW_SPEED_RINGOSC2_WIDTH (7)
#define HW_SPEED_RSVD3_WIDTH (1)



#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
#define HW_SPEED_RINGOSC1_BITPOS (4)
#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
#define HW_SPEED_RINGOSC2_BITPOS (16)


#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        

#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 



#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 


typedef union               
{
    struct {
        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
    } B;
    unsigned int I;
} speed_type;
#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */







// DC DC Test Bit Register (HW_DCDCTBR) Definitions
#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1

#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)

#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)

#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)

// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))

typedef union               
{
    struct {
        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
    } B;
    unsigned int I;
} usb_dcdctbr_type;
#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/


/////////////////////////////////////////////////////////////////////////////////

//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions

#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)

#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)

#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)

#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 


#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 

typedef union               
{
    struct {
        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
    } B;
    unsigned int I;
} usb_pwr_charge_type;
#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */

#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
#define HW_DCDC_PERSIST_RSRVD_WIDTH 2

#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0

typedef union               
{
    struct {       
       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
    } B;
    int I;
} usb_dcdcpersist_type;
#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/



#endif



