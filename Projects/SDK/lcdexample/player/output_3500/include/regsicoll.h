#if !defined(__REGS_ICOLL_INC)
#define __REGS_ICOLL_INC 1

/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Registers
/////////////////////////////////////////////////////////////////////////////////

#define HW_ICOLL_BASEADDR 0xF300



/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions

typedef union
{
    struct {
        int SEN0        :1;
        int SEN1        :1;
        int SEN2        :1;
        int SEN3        :1;
        int SEN4        :1;
        int SEN5        :1;
        int SEN6        :1;
        int SEN7        :1;
        int SEN8        :1;
        int SEN9        :1;
        int SEN10       :1;
        int SEN11       :1;
        int SEN12       :1;
        int SEN13       :1;
        int SEN14       :1;
        int SEN15       :1;
        int SEN16       :1;
        int SEN17       :1;
        int SEN18       :1;
        int SEN19       :1;
        int SEN20       :1;
        int SEN21       :1;
        int SEN22       :1;
        int SEN23       :1;
    } B;
    int I;
} iclenable0_type;
#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */


#define HW_ICLENABLE0R_SEN0_BITPOS 0
#define HW_ICLENABLE0R_SEN1_BITPOS 1
#define HW_ICLENABLE0R_SEN2_BITPOS 2
#define HW_ICLENABLE0R_SEN3_BITPOS 3
#define HW_ICLENABLE0R_SEN4_BITPOS 4
#define HW_ICLENABLE0R_SEN5_BITPOS 5
#define HW_ICLENABLE0R_SEN6_BITPOS 6
#define HW_ICLENABLE0R_SEN7_BITPOS 7
#define HW_ICLENABLE0R_SEN8_BITPOS 8
#define HW_ICLENABLE0R_SEN9_BITPOS 9
#define HW_ICLENABLE0R_SEN10_BITPOS 10
#define HW_ICLENABLE0R_SEN11_BITPOS 11
#define HW_ICLENABLE0R_SEN12_BITPOS 12
#define HW_ICLENABLE0R_SEN13_BITPOS 13
#define HW_ICLENABLE0R_SEN14_BITPOS 14
#define HW_ICLENABLE0R_SEN15_BITPOS 15
#define HW_ICLENABLE0R_SEN16_BITPOS 16
#define HW_ICLENABLE0R_SEN17_BITPOS 17
#define HW_ICLENABLE0R_SEN18_BITPOS 18
#define HW_ICLENABLE0R_SEN19_BITPOS 19
#define HW_ICLENABLE0R_SEN20_BITPOS 20
#define HW_ICLENABLE0R_SEN21_BITPOS 21
#define HW_ICLENABLE0R_SEN22_BITPOS 22
#define HW_ICLENABLE0R_SEN23_BITPOS 23

#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS

#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
typedef union
{
    struct {
        
        int SEN24       :1;
        int SEN25       :1;
        int SEN26       :1;
        int SEN27       :1;
        int SEN28       :1;
        int SEN29       :1;
        int SEN30       :1;
        int SEN31       :1;
        int SEN32       :1;
        int SEN33       :1;
    } B;
    int I;
} iclenable1_type;

#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */

#define HW_ICLENABLE1R_SEN24_BITPOS 0
#define HW_ICLENABLE1R_SEN25_BITPOS 1
#define HW_ICLENABLE1R_SEN26_BITPOS 2
#define HW_ICLENABLE1R_SEN27_BITPOS 3
#define HW_ICLENABLE1R_SEN28_BITPOS 4
#define HW_ICLENABLE1R_SEN29_BITPOS 5
#define HW_ICLENABLE1R_SEN30_BITPOS 6
#define HW_ICLENABLE1R_SEN31_BITPOS 7
#define HW_ICLENABLE1R_SEN32_BITPOS 8
#define HW_ICLENABLE1R_SEN33_BITPOS 9

#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS

#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
typedef union
{
    struct {
        int SST0        :1;
        int SST1        :1;
        int SST2        :1;
        int SST3        :1;
        int SST4        :1;
        int SST5        :1;
        int SST6        :1;
        int SST7        :1;
        int SST8        :1;
        int SST9        :1;
        int SST10       :1;
        int SST11       :1;
        int SST12       :1;
        int SST13       :1;
        int SST14       :1;
        int SST15       :1;
        int SST16       :1;
        int SST17       :1;
        int SST18       :1;
        int SST19       :1;
        int SST20       :1;
        int SST21       :1;
        int SST22       :1;
        int SST23       :1;
    } B;
    int I;
} iclstatus0_type;
#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
#define HW_ICLSTATUS0R_SST0_BITPOS 0
#define HW_ICLSTATUS0R_SST1_BITPOS 1
#define HW_ICLSTATUS0R_SST2_BITPOS 2
#define HW_ICLSTATUS0R_SST3_BITPOS 3
#define HW_ICLSTATUS0R_SST4_BITPOS 4
#define HW_ICLSTATUS0R_SST5_BITPOS 5
#define HW_ICLSTATUS0R_SST6_BITPOS 6
#define HW_ICLSTATUS0R_SST7_BITPOS 7
#define HW_ICLSTATUS0R_SST8_BITPOS 8
#define HW_ICLSTATUS0R_SST9_BITPOS 9
#define HW_ICLSTATUS0R_SST10_BITPOS 10
#define HW_ICLSTATUS0R_SST11_BITPOS 11
#define HW_ICLSTATUS0R_SST12_BITPOS 12
#define HW_ICLSTATUS0R_SST13_BITPOS 13
#define HW_ICLSTATUS0R_SST14_BITPOS 14
#define HW_ICLSTATUS0R_SST15_BITPOS 15
#define HW_ICLSTATUS0R_SST16_BITPOS 16
#define HW_ICLSTATUS0R_SST17_BITPOS 17
#define HW_ICLSTATUS0R_SST18_BITPOS 18
#define HW_ICLSTATUS0R_SST19_BITPOS 19
#define HW_ICLSTATUS0R_SST20_BITPOS 20
#define HW_ICLSTATUS0R_SST21_BITPOS 21
#define HW_ICLSTATUS0R_SST22_BITPOS 22
#define HW_ICLSTATUS0R_SST23_BITPOS 23

#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS

#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
typedef union
{
    struct {
        int SST24       :1;
        int SST25       :1;
        int SST26       :1;
        int SST27       :1;
        int SST28       :1;
        int SST29       :1;
        int SST30       :1;
        int SST31       :1;
        int SST32       :1;
        int SST33       :1;
    } B;
    int I;
} iclstatus1_type;
#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
#define HW_ICLSTATUS1R_SST24_BITPOS 0
#define HW_ICLSTATUS1R_SST25_BITPOS 1
#define HW_ICLSTATUS1R_SST26_BITPOS 2
#define HW_ICLSTATUS1R_SST27_BITPOS 3
#define HW_ICLSTATUS1R_SST28_BITPOS 4
#define HW_ICLSTATUS1R_SST29_BITPOS 5
#define HW_ICLSTATUS1R_SST30_BITPOS 6
#define HW_ICLSTATUS1R_SST31_BITPOS 7
#define HW_ICLSTATUS1R_SST32_BITPOS 8
#define HW_ICLSTATUS1R_SST33_BITPOS 9

#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS

#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Priority Defs
typedef union
{
    struct {
        unsigned S0P    :3;
        unsigned S1P    :3;
        unsigned S2P    :3;
        unsigned S3P    :3;
        unsigned S4P    :3;
        unsigned S5P    :3;
        unsigned S6P    :3;
        unsigned S7P    :3;
    } B;
    int I;

} iclprior0_type;

#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */

#define HW_ICLPRIORR_SP_0 0
#define HW_ICLPRIORR_SP_1 1
#define HW_ICLPRIORR_SP_2 2
#define HW_ICLPRIORR_SP_3 3
#define HW_ICLPRIORR_SP_4 4
#define HW_ICLPRIORR_SP_5 5
#define HW_ICLPRIORR_SP_6 6
#define HW_ICLPRIORR_SP_7 7


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
#define HW_ICLPRIOR0R_S0P_BITPOS 0
#define HW_ICLPRIOR0R_S1P_BITPOS 3
#define HW_ICLPRIOR0R_S2P_BITPOS 6
#define HW_ICLPRIOR0R_S3P_BITPOS 9
#define HW_ICLPRIOR0R_S4P_BITPOS 12
#define HW_ICLPRIOR0R_S5P_BITPOS 15
#define HW_ICLPRIOR0R_S6P_BITPOS 18
#define HW_ICLPRIOR0R_S7P_BITPOS 21

#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS

#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
typedef union
{
    struct {
        unsigned S8P    :3;
        unsigned S9P    :3;
        unsigned S10P   :3;
        unsigned S11P   :3;
        unsigned S12P   :3;
        unsigned S13P   :3;
        unsigned S14P   :3;
        unsigned S15P   :3;
    } B;
    int I;
} iclprior1_type;

#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */

#define HW_ICLPRIOR1R_S8P_BITPOS 0
#define HW_ICLPRIOR1R_S9P_BITPOS 3
#define HW_ICLPRIOR1R_S10P_BITPOS 6
#define HW_ICLPRIOR1R_S11P_BITPOS 9
#define HW_ICLPRIOR1R_S12P_BITPOS 12
#define HW_ICLPRIOR1R_S13P_BITPOS 15
#define HW_ICLPRIOR1R_S14P_BITPOS 18
#define HW_ICLPRIOR1R_S15P_BITPOS 21

#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS

#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
typedef union               /* Interrupt Collector Priority 2 Register      */
{
    struct {
        unsigned S16P   :3;
        unsigned S17P   :3;
        unsigned S18P   :3;
        unsigned S19P   :3;
        unsigned S20P   :3;
        unsigned S21P   :3;
        unsigned S22P   :3;
        unsigned S23P   :3;
    } B;
    int I;
} iclprior2_type;
#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
#define HW_ICLPRIOR2R_S16P_BITPOS 0
#define HW_ICLPRIOR2R_S17P_BITPOS 3
#define HW_ICLPRIOR2R_S18P_BITPOS 6
#define HW_ICLPRIOR2R_S19P_BITPOS 9
#define HW_ICLPRIOR2R_S20P_BITPOS 12
#define HW_ICLPRIOR2R_S21P_BITPOS 15
#define HW_ICLPRIOR2R_S22P_BITPOS 18
#define HW_ICLPRIOR2R_S23P_BITPOS 21

#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS

#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
typedef union               /* Interrupt Collector Priority 3 Register      */
{
    struct {
        unsigned S24P   :3;
        unsigned S25P   :3;
        unsigned S26P   :3;
        unsigned S27P   :3;
        unsigned S28P   :3;
        unsigned S29P   :3;
        unsigned S30P   :3;
        unsigned S31P   :3;
    } B;
    int I;
} iclprior3_type;
#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */

#define HW_ICLPRIOR3R_S24P_BITPOS 0
#define HW_ICLPRIOR3R_S25P_BITPOS 3
#define HW_ICLPRIOR3R_S26P_BITPOS 6
#define HW_ICLPRIOR3R_S27P_BITPOS 9
#define HW_ICLPRIOR3R_S28P_BITPOS 12
#define HW_ICLPRIOR3R_S29P_BITPOS 15
#define HW_ICLPRIOR3R_S30P_BITPOS 18
#define HW_ICLPRIOR3R_S31P_BITPOS 21

#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS

#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
typedef union               /* Interrupt Collector Priority 3 Register      */
{
    struct {
        unsigned S32P   :3;
        unsigned S33P   :3;
    } B;
    int I;
} iclprior4_type;
#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */

#define HW_ICLPRIOR4R_S32P_BITPOS 0
#define HW_ICLPRIOR4R_S33P_BITPOS 3

#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS

#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
typedef union               /* Interrupt Collector Steering 0 Register      */
{
    struct {
        unsigned S0S    :2;
        unsigned S1S    :2;
        unsigned S2S    :2;
        unsigned S3S    :2;
        unsigned S4S    :2;
        unsigned S5S    :2;
        unsigned S6S    :2;
        unsigned S7S    :2;
        unsigned S8S    :2;
        unsigned S9S    :2;
        unsigned S10S   :2;
        unsigned S11S   :2;
    } B;
    int I;
} iclsteer0_type;
#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */

#define HW_ICLSTEER0R_S0P_BITPOS 0
#define HW_ICLSTEER0R_S1P_BITPOS 2
#define HW_ICLSTEER0R_S2P_BITPOS 4
#define HW_ICLSTEER0R_S3P_BITPOS 6
#define HW_ICLSTEER0R_S4P_BITPOS 8
#define HW_ICLSTEER0R_S5P_BITPOS 10
#define HW_ICLSTEER0R_S6P_BITPOS 12
#define HW_ICLSTEER0R_S7P_BITPOS 14
#define HW_ICLSTEER0R_S8P_BITPOS 16
#define HW_ICLSTEER0R_S9P_BITPOS 18
#define HW_ICLSTEER0R_S10P_BITPOS 20
#define HW_ICLSTEER0R_S11P_BITPOS 22

#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS

#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
typedef union               /* Interrupt Collector Steering 1 Register      */
{
    struct {
        unsigned S12S   :2;
        unsigned S13S   :2;
        unsigned S14S   :2;
        unsigned S15S   :2;
        unsigned S16S   :2;
        unsigned S17S   :2;
        unsigned S18S   :2;
        unsigned S19S   :2;
        unsigned S20S   :2;
        unsigned S21S   :2;
        unsigned S22S   :2;
        unsigned S23S   :2;
    } B;
    int I;
} iclsteer1_type;
#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
#define HW_ICLSTEER1R_S12P_BITPOS 0
#define HW_ICLSTEER1R_S13P_BITPOS 2
#define HW_ICLSTEER1R_S14P_BITPOS 4
#define HW_ICLSTEER1R_S15P_BITPOS 6
#define HW_ICLSTEER1R_S16P_BITPOS 8
#define HW_ICLSTEER1R_S17P_BITPOS 10
#define HW_ICLSTEER1R_S18P_BITPOS 12
#define HW_ICLSTEER1R_S19P_BITPOS 14
#define HW_ICLSTEER1R_S20P_BITPOS 16
#define HW_ICLSTEER1R_S21P_BITPOS 18
#define HW_ICLSTEER1R_S22P_BITPOS 20
#define HW_ICLSTEER1R_S23P_BITPOS 22

#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS

#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
typedef union               /* Interrupt Collector Steering 2 Register      */
{
    struct {
        unsigned S24S   :2;
        unsigned S25S   :2;
        unsigned S26S   :2;
        unsigned S27S   :2;
        unsigned S28S   :2;
        unsigned S29S   :2;
        unsigned S30S   :2;
        unsigned S31S   :2;
        unsigned S32S   :2;
        unsigned S33S   :2;
    } B;
    int I;
} iclsteer2_type;
#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */

#define HW_ICLSTEER2R_S24P_BITPOS 0
#define HW_ICLSTEER2R_S25P_BITPOS 2
#define HW_ICLSTEER2R_S26P_BITPOS 4
#define HW_ICLSTEER2R_S27P_BITPOS 6
#define HW_ICLSTEER2R_S28P_BITPOS 8
#define HW_ICLSTEER2R_S29P_BITPOS 10
#define HW_ICLSTEER2R_S30P_BITPOS 12
#define HW_ICLSTEER2R_S31P_BITPOS 14
#define HW_ICLSTEER2R_S32P_BITPOS 16
#define HW_ICLSTEER2R_S33P_BITPOS 18

#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS

#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
typedef union               /* Interrupt Collector Debug Force 0 Register       */
{
    struct {
        int S0FV        :1;
        int S1FV        :1;
        int S2FV        :1;
        int S3FV        :1;
        int S4FV        :1;
        int S5FV        :1;
        int S6FV        :1;
        int S7FV        :1;
        int S8FV        :1;
        int S9FV        :1;
        int S10FV       :1;
        int S11FV       :1;
        int S12FV       :1;
        int S13FV       :1;
        int S14FV       :1;
        int S15FV       :1;
        int S16FV       :1;
        int S17FV       :1;
        int S18FV       :1;
        int S19FV       :1;
        int S20FV       :1;
        int S21FV       :1;
        int S22FV       :1;
        int S23FV       :1;
    } B;
    int I;
} iclforce0_type;
#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
#define HW_ICLFORCE0R_S0FV_BITPOS 0
#define HW_ICLFORCE0R_S1FV_BITPOS 1
#define HW_ICLFORCE0R_S2FV_BITPOS 2
#define HW_ICLFORCE0R_S3FV_BITPOS 3
#define HW_ICLFORCE0R_S4FV_BITPOS 4
#define HW_ICLFORCE0R_S5FV_BITPOS 5
#define HW_ICLFORCE0R_S6FV_BITPOS 6
#define HW_ICLFORCE0R_S7FV_BITPOS 7
#define HW_ICLFORCE0R_S8FV_BITPOS 8
#define HW_ICLFORCE0R_S9FV_BITPOS 9
#define HW_ICLFORCE0R_S10FV_BITPOS 10
#define HW_ICLFORCE0R_S11FV_BITPOS 11
#define HW_ICLFORCE0R_S12FV_BITPOS 12
#define HW_ICLFORCE0R_S13FV_BITPOS 13
#define HW_ICLFORCE0R_S14FV_BITPOS 14
#define HW_ICLFORCE0R_S15FV_BITPOS 15
#define HW_ICLFORCE0R_S16FV_BITPOS 16
#define HW_ICLFORCE0R_S17FV_BITPOS 17
#define HW_ICLFORCE0R_S18FV_BITPOS 18
#define HW_ICLFORCE0R_S19FV_BITPOS 19
#define HW_ICLFORCE0R_S20FV_BITPOS 20
#define HW_ICLFORCE0R_S21FV_BITPOS 21
#define HW_ICLFORCE0R_S22FV_BITPOS 22
#define HW_ICLFORCE0R_S23FV_BITPOS 23

#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS

#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
typedef union               /* Interrupt Debug Force 1 Register     */
{
    struct {
        int S24FV       :1;
        int S25FV       :1;
        int S26FV       :1;
        int S27FV       :1;
        int S28FV       :1;
        int S29FV       :1;
        int S30FV       :1;
        int S31FV       :1;
        int S32FV       :1;
        int S33FV       :1;
    } B;
    int I;
} iclforce1_type;
#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */

#define HW_ICLFORCE1R_S24FV_BITPOS 0
#define HW_ICLFORCE1R_S25FV_BITPOS 1
#define HW_ICLFORCE1R_S26FV_BITPOS 2
#define HW_ICLFORCE1R_S27FV_BITPOS 3
#define HW_ICLFORCE1R_S28FV_BITPOS 4
#define HW_ICLFORCE1R_S29FV_BITPOS 5
#define HW_ICLFORCE1R_S30FV_BITPOS 6
#define HW_ICLFORCE1R_S31FV_BITPOS 7
#define HW_ICLFORCE1R_S32FV_BITPOS 8
#define HW_ICLFORCE1R_S33FV_BITPOS 9

#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS

#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
typedef union               /* Interrupt Collector Force Enable 0 Register      */
{
    struct {
        int S0FE        :1;
        int S1FE        :1;
        int S2FE        :1;
        int S3FE        :1;
        int S4FE        :1;
        int S5FE        :1;
        int S6FE        :1;
        int S7FE        :1;
        int S8FE        :1;
        int S9FE        :1;
        int S10FE       :1;
        int S11FE       :1;
        int S12FE       :1;
        int S13FE       :1;
        int S14FE       :1;
        int S15FE       :1;
        int S16FE       :1;
        int S17FE       :1;
        int S18FE       :1;
        int S19FE       :1;
        int S20FE       :1;
        int S21FE       :1;
        int S22FE       :1;
        int S23FE       :1;
    } B;
    int I;
} iclfenable0_type;
#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */

#define HW_ICLFENABLE0R_S0FE_BITPOS 0
#define HW_ICLFENABLE0R_S1FE_BITPOS 1
#define HW_ICLFENABLE0R_S2FE_BITPOS 2
#define HW_ICLFENABLE0R_S3FE_BITPOS 3
#define HW_ICLFENABLE0R_S4FE_BITPOS 4
#define HW_ICLFENABLE0R_S5FE_BITPOS 5
#define HW_ICLFENABLE0R_S6FE_BITPOS 6
#define HW_ICLFENABLE0R_S7FE_BITPOS 7
#define HW_ICLFENABLE0R_S8FE_BITPOS 8
#define HW_ICLFENABLE0R_S9FE_BITPOS 9
#define HW_ICLFENABLE0R_S10FE_BITPOS 10
#define HW_ICLFENABLE0R_S11FE_BITPOS 11
#define HW_ICLFENABLE0R_S12FE_BITPOS 12
#define HW_ICLFENABLE0R_S13FE_BITPOS 13
#define HW_ICLFENABLE0R_S14FE_BITPOS 14
#define HW_ICLFENABLE0R_S15FE_BITPOS 15
#define HW_ICLFENABLE0R_S16FE_BITPOS 16
#define HW_ICLFENABLE0R_S17FE_BITPOS 17
#define HW_ICLFENABLE0R_S18FE_BITPOS 18
#define HW_ICLFENABLE0R_S19FE_BITPOS 19
#define HW_ICLFENABLE0R_S20FE_BITPOS 20
#define HW_ICLFENABLE0R_S21FE_BITPOS 21
#define HW_ICLFENABLE0R_S22FE_BITPOS 22
#define HW_ICLFENABLE0R_S23FE_BITPOS 23

#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS

#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
typedef union               /* Interrupt Collector Force Enable 1 Register      */
{
    struct {
        int S24FE       :1;
        int S25FE       :1;
        int S26FE       :1;
        int S27FE       :1;
        int S28FE       :1;
        int S29FE       :1;
        int S30FE       :1;
        int S31FE       :1;
        int S32FE       :1;
        int S33FE       :1;
    } B;
    int I;
} iclfenable1_type;
#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
#define HW_ICLFENABLE1R_S24FE_BITPOS 0
#define HW_ICLFENABLE1R_S25FE_BITPOS 1
#define HW_ICLFENABLE1R_S26FE_BITPOS 2
#define HW_ICLFENABLE1R_S27FE_BITPOS 3
#define HW_ICLFENABLE1R_S28FE_BITPOS 4
#define HW_ICLFENABLE1R_S29FE_BITPOS 5
#define HW_ICLFENABLE1R_S30FE_BITPOS 6
#define HW_ICLFENABLE1R_S31FE_BITPOS 7
#define HW_ICLFENABLE1R_S32FE_BITPOS 8
#define HW_ICLFENABLE1R_S33FE_BITPOS 9

#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS

#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
typedef union               /* Interrupt Collector Observation Register 0       */
{
    struct {
        unsigned RQ     :7;
        unsigned IVA    :7;
        unsigned IVB    :7;
    } B;
    int I;
} iclobsvz0_type;
#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */

#define HW_ICLOBSVZ0R_RQ_BITPOS 0
#define HW_ICLOBSVZ0R_IVA_BITPOS 7
#define HW_ICLOBSVZ0R_IVB_BITPOS 14

#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS

#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
#define HW_ICL1BSVZ0R_IVC_BITPOS 0
#define HW_ICL1BSVZ0R_IVD_BITPOS 7

#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS

#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK




/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Vectors
/////////////////////////////////////////////////////////////////////////////////
// Reset Vector
#define HW_IVECRESET 0x0000           
// Stack Error
#define HW_IVECSTERR 0x0002           
// Trace
#define HW_IVECTRAC 0x0004           
// SWI
#define HW_IVECSWI 0x0006           
// ~IRQA
#define HW_IVECIRQA 0x0008           
// ~IRQB - BROWNOUT
#define HW_IVECIRQB 0x000A           
// Fatal Error
#define HW_IVECERROR 0x000C           
// SPI
#define HW_IVECSPI 0x000E           
// I2S TX Data Empty
#define HW_IVECI2STXDE 0x0010           
// I2S TX Underflow
#define HW_IVECI2STXUF 0x0012           
// I2S RX Data Full
#define HW_IVECI2SRXDF 0x0014           
// I2S RX Overflow
#define HW_IVECI2SRXOF 0x0016           
//                                       equ     $0018           ; Error, nothing vectors here
//                                       equ     $001A           ; Error, nothing vectors here
//                                       equ     $001C           ; Error, nothing vectors here
//                                       equ     $001E           ; Non-Maskable Interrupt
// GPIO1
#define HW_IVECGPIO1 0x0020           
// GPIO2
#define HW_IVECGPIO2 0x0022           
// GPIO0
#define HW_IVECGPIO0 0x0024           
// TIMER0
#define HW_IVECTIMER0 0x0026           
// TIMER1
#define HW_IVECTIMER1 0x0028           
// TIMER2
#define HW_IVECTIMER2 0x002A           
//                                       equ     $002C           ; Error, nothing vectors here
//                                       equ     $002E           ; Error, nothing vectors here
// I2C RX Data Ready
#define HW_IVECI2CRXDR 0x0030           
// I2C RX Overflow
#define HW_IVECI2CRXOF 0x0032           
// I2C TX Data Empty
#define HW_IVECI2CTXDE 0x0034           
// I2C TX Underflow
#define HW_IVECI2CTXUF 0x0036           
// Illegal Instruction
#define HW_IVECILI 0x0038           
//                                       equ     $003A           ; Error, nothing vectors here
// DAC Empty ISR (DAC Request to Fill Buffer)
#define HW_IVECDACE 0x003C           
// DAC Underflow ISR
#define HW_IVECDACUF 0x003E           
//                                       equ     $0040           ; Error, nothing vectors here
// ADC Full ISR
#define HW_IVECADCF 0x0042           
// ADC Overflow ISR
#define HW_IVECADCOF 0x0044           
//                                       equ     $0046           ; Error, nothing vectors here
// TIMER3
#define HW_IVECTIMER3 0x0048           
// GPIO3
#define HW_IVECGPIO3 0x004A           
// SDRAM
#define HW_IVECSDRAM 0x004C           
//                                       equ     $004E           ; Error, nothing vectors here
// 5 volt power connected
#define HW_IVECVDD5VCONN 0x0050           
// USB Controller
#define HW_IVECUSBCTLR 0x0052           
// USB Wakeup 
#define HW_IVECUSBWAKEUP 0x0054           
// 5 volt power disconnected
#define HW_IVECVDD5VDISC 0x0056           
// enhanced SPI
#define HW_IVECESPI 0x0058           
// filter coprocessor
#define HW_IVECFILCO 0x005A           
// low res ADC #1
#define HW_IVECLRADC1 0x005C           
// real time clock alarm
#define HW_IVECRTCALARM 0x005E           
// low res ADC #2
#define HW_IVECLRADC2 0x0060           
// flash hardware ECC
#define HW_IVECHWECC 0x0062           
//                                       equ     $0064           ; Error, nothing vectors here
// CDSYNC Interrupt
#define HW_IVECCDSYNC 0x0066           
// CDSYNC Exception
#define HW_IVECCDSYNCEX 0x0068           
// RS
#define HW_IVECRS 0x006A           
//                                       equ     $006C           ; Error, nothing vectors here
// Flash Done ISR
#define HW_IVECFD 0x006E           
// CompactFlash ISR
#define HW_IVECCF 0x0070           
// SmartMedia Timeout ISR
#define HW_IVECSMTO 0x0072           
// SmartMedia Invalid Programming
#define HW_IVECSMIP 0x0074           
// CompactFlash No Card ISR
#define HW_IVECCFNC 0x0076           
// CompactFlash Status Change ISR
#define HW_IVECCFSC 0x0078           
//                                       equ     $007A           ; Error, nothing vectors here
//                                       equ     $007C           ; Error, nothing vectors here
// CDI
#define HW_IVECCDI 0x007E           

/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Vectors
/////////////////////////////////////////////////////////////////////////////////
// macro to allow setting vectors from C. Hex const below is jsr opcode.
#define VECTOR(address,isr) \
    (*(volatile int _P *)(address))=0x0BF080; \
    (*(volatile int _P *)(address+1))=(isr)


/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Priority Register (HW_IPR) Bit Positions
#define HW_IPR_IRQA_BITPOS 0
#define HW_IPR_IRQA_ET_BITPOS 2
#define HW_IPR_IRQB_BITPOS 3
#define HW_IPR_IRQB_ET_BITPOS 5
#define HW_IPR_L0P_BITPOS 10
#define HW_IPR_L1P_BITPOS 12
#define HW_IPR_L2P_BITPOS 14
#define HW_IPR_L3P_BITPOS 16
#define HW_IPR_L4P_BITPOS 18
#define HW_IPR_L5P_BITPOS 20
#define HW_IPR_L6P_BITPOS 22

// Interrupt Disabled
#define HW_IPR_LP_0_SETMASK 0   
// Interrupt Priority Level 0
#define HW_IPR_LP_1_SETMASK 1   
// Interrupt Priority Level 1
#define HW_IPR_LP_2_SETMASK 2   
// Interrupt Priority Level 2
#define HW_IPR_LP_3_SETMASK 3   

#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS

#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK

// Interrupt Priority register
typedef union               
{
    struct {
        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
        int                 :4; /* Reserved */
        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
    } B;

    int I;

} ipr_type;
#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)

//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
// to update the actual files. Only the defines needed to build SDK2.400 were added.

#define HW_IPR_L1P0_BITPOS 12
#define HW_IPR_L2P0_BITPOS 14
#define HW_IPR_L3P0_BITPOS 16
#define HW_IPR_L6P0_BITPOS 22

/////////////////////////////////////////////////////////////////////////////////
//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
#define HW_ICLSTEERR_SS_1 0
#define HW_ICLSTEERR_SS_2 1
#define HW_ICLSTEERR_SS_3 2
#define HW_ICLSTEERR_SS_6 3

#endif

