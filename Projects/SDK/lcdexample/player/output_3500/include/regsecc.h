/////////////////////////////////////////////////////////////////////////////////
// Copyright(C) SigmaTel, Inc. 2000-2001
// Filename: regsecc.inc
// Description: Register definitions for ECC interface
/////////////////////////////////////////////////////////////////////////////////
// The following naming conventions are followed in this file.
// All registers are named using the format...
//     HW_<module>_<regname>
// where <module> is the module name which can be any of the following...
//     USB20
// (Note that when there is more than one copy of a particular module, the
// module name includes a number starting from 0 for the first instance of
// that module)
// <regname> is the specific register within that module
// We also define the following...
//     HW_<module>_<regname>_BITPOS
// which defines the starting bit (i.e. LSB) of a multi bit field
//     HW_<module>_<regname>_SETMASK
// which does something else, and
//     HW_<module>_<regname>_CLRMASK
// which does something else.
// Other rules
//     All caps
//     Numeric identifiers start at 0
#if !(defined(regseccinc))
#define regseccinc 1

#include "types.h"

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

//   ECC STMP Registers 
//   Last Updated 2.26.2003 J. Ferrara
//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#define HW_ECC_BASEADDR (0xF780)




/////////////////////////////////////////////////////////////////////////////////

//  ECC Control Status Register0 (HW_ECC_CSR0) Bit Definitions

#define HW_ECC_CSR0_ECCKICK_BITPOS (0)
#define HW_ECC_CSR0_AUTOCORR_BITPOS (1)
#define HW_ECC_CSR0_RSVD0_BITPOS (2)
#define HW_ECC_CSR0_DONEINTEN_BITPOS (3)
#define HW_ECC_CSR0_KESINTEN_BITPOS (5)
#define HW_ECC_CSR0_CORRINTEN_BITPOS (6)
#define HW_ECC_CSR0_UNCORRINTEN_BITPOS (7)
#define HW_ECC_CSR0_ERRINTEN_BITPOS (8)
#define HW_ECC_CSR0_RSVD1_BITPOS (9)
#define HW_ECC_CSR0_DMAWAIT_BITPOS (12)
#define HW_ECC_CSR0_ECCSEL_BITPOS (16)
#define HW_ECC_CSR0_RSVD2_BITPOS (19)
#define HW_ECC_CSR0_SFTRST_BITPOS (23)

#define HW_ECC_CSR0_ECCKICK_WIDTH (1)        
#define HW_ECC_CSR0_AUTOCORR_WIDTH (1)
#define HW_ECC_CSR0_RSVD0_WIDTH (2)
#define HW_ECC_CSR0_DONEINTEN_WIDTH (1)
#define HW_ECC_CSR0_KESINTEN_WIDTH (1)
#define HW_ECC_CSR0_CORRINTEN_WIDTH (1)
#define HW_ECC_CSR0_UNCORRINTEN_WIDTH (1)
#define HW_ECC_CSR0_ERRINTEN_WIDTH (1)
#define HW_ECC_CSR0_RSVD1_WIDTH (3)
#define HW_ECC_CSR0_DMAWAIT_WIDTH (4)
#define HW_ECC_CSR0_ECCSEL_WIDTH (3)
#define HW_ECC_CSR0_RSVD2_WIDTH (4)
#define HW_ECC_CSR0_SFTRST_WIDTH (1)

#define HW_ECC_CSR0_ECCKICK_SETMASK (((1<<HW_ECC_CSR0_ECCKICK_WIDTH)-1)<<HW_ECC_CSR0_ECCKICK_BITPOS) 
#define HW_ECC_CSR0_AUTOCORR_SETMASK (((1<<HW_ECC_CSR0_AUTOCORR_WIDTH)-1)<<HW_ECC_CSR0_AUTOCORR_BITPOS)
#define HW_ECC_CSR0_RSVD0_SETMASK (((1<<HW_ECC_CSR0_RSVD0_WIDTH)-1)<<HW_ECC_CSR0_RSVD0_BITPOS) 
#define HW_ECC_CSR0_DONEINTEN_SETMASK (((1<<HW_ECC_CSR0_DONEINTEN_WIDTH)-1)<<HW_ECC_CSR0_DONEINTEN_BITPOS) 
#define HW_ECC_CSR0_KESINTEN_SETMASK (((1<<HW_ECC_CSR0_KESINTEN_WIDTH)-1)<<HW_ECC_CSR0_KESINTEN_BITPOS) 
#define HW_ECC_CSR0_CORRINTEN_SETMASK (((1<<HW_ECC_CSR0_CORRINTEN_WIDTH)-1)<<HW_ECC_CSR0_CORRINTEN_BITPOS) 
#define HW_ECC_CSR0_UNCORRINTEN_SETMASK (((1<<HW_ECC_CSR0_UNCORRINTEN_WIDTH)-1)<<HW_ECC_CSR0_UNCORRINTEN_BITPOS) 
#define HW_ECC_CSR0_ERRINTEN_SETMASK (((1<<HW_ECC_CSR0_ERRINTEN_WIDTH)-1)<<HW_ECC_CSR0_ERRINTEN_BITPOS) 
#define HW_ECC_CSR0_RSVD1_SETMASK (((1<<HW_ECC_CSR0_RSVD1_WIDTH)-1)<<HW_ECC_CSR0_RSVD1_BITPOS) 
#define HW_ECC_CSR0_DMAWAIT_SETMASK (((1<<HW_ECC_CSR0_DMAWAIT_WIDTH)-1)<<HW_ECC_CSR0_DMAWAIT_BITPOS) 
#define HW_ECC_CSR0_ECCSEL_SETMASK (((1<<HW_ECC_CSR0_ECCSEL_WIDTH)-1)<<HW_ECC_CSR0_ECCSEL_BITPOS) 
#define HW_ECC_CSR0_RSVD2_SETMASK (((1<<HW_ECC_CSR0_RSVD2_WIDTH)-1)<<HW_ECC_CSR0_RSVD2_BITPOS) 
#define HW_ECC_CSR0_SFTRST_SETMASK (((1<<HW_ECC_CSR0_SFTRST_WIDTH)-1)<<HW_ECC_CSR0_SFTRST_BITPOS) 

#define HW_ECC_CSR0_ECCKICK_CLRMASK (~(WORD)HW_ECC_CSR0_ECCKICK_SETMASK)
#define HW_ECC_CSR0_AUTOCORR_CLRMASK (~(WORD)HW_ECC_CSR0_AUTOCORR_SETMASK)
#define HW_ECC_CSR0_RSVD0_CLRMASK (~(WORD)HW_ECC_CSR0_RSVD0_SETMASK)
#define HW_ECC_CSR0_DONEINTEN_CLRMASK (~(WORD)HW_ECC_CSR0_DONEINTEN_SETMASK)
#define HW_ECC_CSR0_KESINTEN_CLRMASK (~(WORD)HW_ECC_CSR0_KESINTEN_SETMASK)
#define HW_ECC_CSR0_CORRINTEN_CLRMASK (~(WORD)HW_ECC_CSR0_CORRINTEN_SETMASK)
#define HW_ECC_CSR0_UNCORRINTEN_CLRMASK (~(WORD)HW_ECC_CSR0_UNCORRINTEN_SETMASK)
#define HW_ECC_CSR0_ERRINTEN_CLRMASK (~(WORD)HW_ECC_CSR0_ERRINTEN_SETMASK)
#define HW_ECC_CSR0_RSVD1_CLRMASK (~(WORD)HW_ECC_CSR0_RSVD1_SETMASK)
#define HW_ECC_CSR0_DMAWAIT_CLRMASK (~(WORD)HW_ECC_CSR0_DMAWAIT_SETMASK)
#define HW_ECC_CSR0_ECCSEL_CLRMASK (~(WORD)HW_ECC_CSR0_ECCSEL_SETMASK)
#define HW_ECC_CSR0_RSVD2_CLRMASK (~(WORD)HW_ECC_CSR0_RSVD2_SETMASK)
#define HW_ECC_CSR0_SFTRST_CLRMASK (~(WORD)HW_ECC_CSR0_SFTRST_SETMASK)

typedef union               
{
    struct {
	 int ECCKICK 	     : HW_ECC_CSR0_ECCKICK_WIDTH;
	 int AUTOCORR	     : HW_ECC_CSR0_AUTOCORR_WIDTH;
	 int RSVD0           : HW_ECC_CSR0_RSVD0_WIDTH;
	 int DONEINTEN	     : HW_ECC_CSR0_DONEINTEN_WIDTH;
	 int KESINTEN	     : HW_ECC_CSR0_KESINTEN_WIDTH;
	 int CORRINTEN       : HW_ECC_CSR0_CORRINTEN_WIDTH;
	 int UNCORRINTEN     : HW_ECC_CSR0_UNCORRINTEN_WIDTH;
	 int ERRINTEN        : HW_ECC_CSR0_ERRINTEN_WIDTH;
	 int RSVD1	     : HW_ECC_CSR0_RSVD1_WIDTH;
 	 int DMAWAIT         : HW_ECC_CSR0_DMAWAIT_WIDTH;
	 int ECCSEL          : HW_ECC_CSR0_ECCSEL_WIDTH;
	 int RSVD2           : HW_ECC_CSR0_RSVD2_WIDTH;
        int SFTRST          : HW_ECC_CSR0_SFTRST_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_csr0_type;
#define HW_ECC_CSR0      (*(volatile ecc_csr0_type _X*) (HW_ECC_BASEADDR+0))    /* ECC Control / Status Register0 */

////////////////////////////////////////////////////////////////////////////
//  ECC Control Status Register1 (HW_ECC_CSR1) Bit Definitions

#define HW_ECC_CSR1_RSVD0_BITPOS (0)
#define HW_ECC_CSR1_DONEINT_BITPOS (4)
#define HW_ECC_CSR1_KESINT_BITPOS (5)
#define HW_ECC_CSR1_CORRINT_BITPOS (6)
#define HW_ECC_CSR1_UNCORRINT_BITPOS (7)
#define HW_ECC_CSR1_ERRINT_BITPOS (8)
#define HW_ECC_CSR1_RSVD1_BITPOS (9)
#define HW_ECC_CSR1_ECCEXCEPTION_BITPOS (12)
#define HW_ECC_CSR1_ECCERRORS_BITPOS (16)
#define HW_ECC_CSR1_RSVD2_BITPOS (19)

#define HW_ECC_CSR1_RSVD0_WIDTH (4)
#define HW_ECC_CSR1_DONEINT_WIDTH (1)
#define HW_ECC_CSR1_KESINT_WIDTH (1)
#define HW_ECC_CSR1_CORRINT_WIDTH (1)
#define HW_ECC_CSR1_UNCORRINT_WIDTH (1)
#define HW_ECC_CSR1_ERRINT_WIDTH (1)
#define HW_ECC_CSR1_RSVD1_WIDTH (3)
#define HW_ECC_CSR1_ECCEXCEPTION_WIDTH (4)
#define HW_ECC_CSR1_ECCERRORS_WIDTH (3)
#define HW_ECC_CSR1_RSVD2_WIDTH (5)

#define HW_ECC_CSR1_RSVD0_SETMASK (((1<<HW_ECC_CSR1_RSVD0_WIDTH)-1)<<HW_ECC_CSR1_RSVD0_BITPOS) 
#define HW_ECC_CSR1_DONEINT_SETMASK (((1<<HW_ECC_CSR1_DONEINT_WIDTH)-1)<<HW_ECC_CSR1_DONEINT_BITPOS) 
#define HW_ECC_CSR1_KESINT_SETMASK (((1<<HW_ECC_CSR1_KESINT_WIDTH)-1)<<HW_ECC_CSR1_KESINT_BITPOS) 
#define HW_ECC_CSR1_CORRINT_SETMASK (((1<<HW_ECC_CSR1_CORRINT_WIDTH)-1)<<HW_ECC_CSR1_CORRINT_BITPOS) 
#define HW_ECC_CSR1_UNCORRINT_SETMASK (((1<<HW_ECC_CSR1_UNCORRINT_WIDTH)-1)<<HW_ECC_CSR1_UNCORRINT_BITPOS) 
#define HW_ECC_CSR1_ERRINT_SETMASK (((1<<HW_ECC_CSR1_ERRINT_WIDTH)-1)<<HW_ECC_CSR1_ERRINT_BITPOS) 
#define HW_ECC_CSR1_RSVD1_SETMASK (((1<<HW_ECC_CSR1_RSVD1_WIDTH)-1)<<HW_ECC_CSR1_RSVD1_BITPOS) 
#define HW_ECC_CSR1_ECCEXCEPTION_SETMASK (((1<<HW_ECC_CSR1_ECCEXCEPTION_WIDTH)-1)<<HW_ECC_CSR1_ECCEXCEPTION_BITPOS) 
#define HW_ECC_CSR1_ECCERRORS_SETMASK (((1<<HW_ECC_CSR1_ECCERRORS_WIDTH)-1)<<HW_ECC_CSR1_ECCERRORS_BITPOS) 
#define HW_ECC_CSR1_RSVD2_SETMASK (((1<<HW_ECC_CSR1_RSVD2_WIDTH)-1)<<HW_ECC_CSR1_RSVD2_BITPOS) 

#define HW_ECC_CSR1_RSVD0_CLRMASK (~(WORD)HW_ECC_CSR1_RSVD0_SETMASK)
#define HW_ECC_CSR1_DONEINT_CLRMASK (~(WORD)HW_ECC_CSR1_DONEINT_SETMASK)
#define HW_ECC_CSR1_KESINT_CLRMASK (~(WORD)HW_ECC_CSR1_KESINT_SETMASK)
#define HW_ECC_CSR1_CORRINT_CLRMASK (~(WORD)HW_ECC_CSR1_CORRINT_SETMASK)
#define HW_ECC_CSR1_UNCORRINT_CLRMASK (~(WORD)HW_ECC_CSR1_UNCORRINT_SETMASK)
#define HW_ECC_CSR1_ERRINT_CLRMASK (~(WORD)HW_ECC_CSR1_ERRINT_SETMASK)
#define HW_ECC_CSR1_RSVD1_CLRMASK (~(WORD)HW_ECC_CSR1_RSVD1_SETMASK)
#define HW_ECC_CSR1_ECCEXCEPTION_CLRMASK (~(WORD)HW_ECC_CSR1_ECCEXCEPTION_SETMASK)
#define HW_ECC_CSR1_ECCERRORS_CLRMASK (~(WORD)HW_ECC_CSR1_ECCERRORS_SETMASK)
#define HW_ECC_CSR1_RSVD2_CLRMASK (~(WORD)HW_ECC_CSR1_RSVD2_SETMASK)

typedef union               
{
    struct {
	 int RSVD0           : HW_ECC_CSR1_RSVD0_WIDTH;
	 int DONEINT	     : HW_ECC_CSR1_DONEINT_WIDTH;
	 int KESINT	     : HW_ECC_CSR1_KESINT_WIDTH;
	 int CORRINT         : HW_ECC_CSR1_CORRINT_WIDTH;
	 int UNCORRIN        : HW_ECC_CSR1_UNCORRINT_WIDTH;
	 int ERRINT          : HW_ECC_CSR1_ERRINT_WIDTH;
	 int RSVD1	     : HW_ECC_CSR1_RSVD1_WIDTH;
 	 int ECCEXCEPTION    : HW_ECC_CSR1_ECCEXCEPTION_WIDTH;
	 int ECCERRORS       : HW_ECC_CSR1_ECCERRORS_WIDTH;
	 int RSVD2           : HW_ECC_CSR1_RSVD2_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_csr1_type;
#define HW_ECC_CSR1      (*(volatile ecc_csr1_type _X*) (HW_ECC_BASEADDR+1))    /* ECC Control / Status Register1 */

////////////////////////////////////////////////////////////////////////////
//  ECC Reed_solomon Control Status Register (HW_ECC_RSCFG) Bit Definitions

#define HW_ECC_RSCFG_SYMBOLSIZE_BITPOS (0)
#define HW_ECC_RSCFG_BLOCKSIZE_BITPOS (4)
#define HW_ECC_RSCFG_RSVD0_BITPOS (13)
#define HW_ECC_RSCFG_BYTEEN_BITPOS (20)
#define HW_ECC_RSCFG_RSCFGERR_BITPOS (21)
#define HW_ECC_RSCFG_DECSFTRST_BITPOS (22)
#define HW_ECC_RSCFG_ENCSFTRST_BITPOS (23)

#define HW_ECC_RSCFG_SYMBOLSIZE_WIDTH (4)
#define HW_ECC_RSCFG_BLOCKSIZE_WIDTH (9)
#define HW_ECC_RSCFG_RSVD0_WIDTH (7)
#define HW_ECC_RSCFG_BYTEEN_WIDTH (1)
#define HW_ECC_RSCFG_RSCFGERR_WIDTH (1)
#define HW_ECC_RSCFG_DECSFTRST_WIDTH (1)
#define HW_ECC_RSCFG_ENCSFTRST_WIDTH (1)

#define HW_ECC_RSCFG_SYMBOLSIZE_SETMASK (((1<<HW_ECC_RSCFG_SYMBOLSIZE_WIDTH)-1)<<HW_ECC_RSCFG_SYMBOLSIZE_BITPOS) 
#define HW_ECC_RSCFG_BLOCKSIZE_SETMASK (((1<<HW_ECC_RSCFG_BLOCKSIZE_WIDTH)-1)<<HW_ECC_RSCFG_BLOCKSIZE_BITPOS) 
#define HW_ECC_RSCFG_RSVD0_SETMASK (((1<<HW_ECC_RSCFG_RSVD0_WIDTH)-1)<<HW_ECC_RSCFG_RSVD0_BITPOS) 
#define HW_ECC_RSCFG_BYTEEN_SETMASK (((1<<HW_ECC_RSCFG_BYTEEN_WIDTH)-1)<<HW_ECC_RSCFG_BYTEEN_BITPOS) 
#define HW_ECC_RSCFG_RSCFGERR_SETMASK (((1<<HW_ECC_RSCFG_RSCFGERR_WIDTH)-1)<<HW_ECC_RSCFG_RSCFGERR_BITPOS) 
#define HW_ECC_RSCFG_DECSFTRST_SETMASK (((1<<HW_ECC_RSCFG_DECSFTRST_WIDTH)-1)<<HW_ECC_RSCFG_DECSFTRST_BITPOS) 
#define HW_ECC_RSCFG_ENCSFTRST_SETMASK (((1<<HW_ECC_RSCFG_ENCSFTRST_WIDTH)-1)<<HW_ECC_RSCFG_ENCSFTRST_BITPOS) 

#define HW_ECC_RSCFG_SYMBOLSIZE_CLRMASK (~(WORD)HW_ECC_RSCFG_SYMBOLSIZE_SETMASK)
#define HW_ECC_RSCFG_BLOCKSIZE_CLRMASK (~(WORD)HW_ECC_RSCFG_BLOCKSIZE_SETMASK)
#define HW_ECC_RSCFG_RSVD0_CLRMASK (~(WORD)HW_ECC_RSCFG_RSVD0_SETMASK)
#define HW_ECC_RSCFG_BYTEEN_CLRMASK (~(WORD)HW_ECC_RSCFG_BYTEEN_SETMASK)
#define HW_ECC_RSCFG_RSCFGERR_CLRMASK (~(WORD)HW_ECC_RSCFG_RSCFGERR_SETMASK)
#define HW_ECC_RSCFG_DECSFTRST_CLRMASK (~(WORD)HW_ECC_RSCFG_DECSFTRST_SETMASK)
#define HW_ECC_RSCFG_ENCSFTRST_CLRMASK (~(WORD)HW_ECC_RSCFG_ENCSFTRST_SETMASK)

typedef union               
{
    struct {
	 int SYMBOLSIZE      : HW_ECC_RSCFG_SYMBOLSIZE_WIDTH;
	 int BLOCKSIZE       : HW_ECC_RSCFG_BLOCKSIZE_WIDTH;
	 int RSVD0           : HW_ECC_RSCFG_RSVD0_WIDTH;
	 int BYTEEN	     : HW_ECC_RSCFG_BYTEEN_WIDTH;
 	 int RSCFGERR        : HW_ECC_RSCFG_RSCFGERR_WIDTH;
	 int DECSFTRST       : HW_ECC_RSCFG_DECSFTRST_WIDTH;
	 int ENCSFTRST       : HW_ECC_RSCFG_ENCSFTRST_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_rscfg_type;
#define HW_ECC_RSCFG      (*(volatile ecc_rscfg_type _X*) (HW_ECC_BASEADDR+2))    /* ECC Reed-Solomon Control Register */

////////////////////////////////////////////////////////////////////////////
//  ECC SSFDC Control Status Register (HW_ECC_SSFDCCFG) Bit Definitions

#define HW_ECC_SSFDCCFG_SYMBOLSIZE_BITPOS (0)
#define HW_ECC_SSFDCCFG_BLOCKSIZE_BITPOS (4)
#define HW_ECC_SSFDCCFG_RSVD0_BITPOS (13)
#define HW_ECC_SSFDCCFG_SFTRST_BITPOS (23)

#define HW_ECC_SSFDCCFG_SYMBOLSIZE_WIDTH (4)
#define HW_ECC_SSFDCCFG_BLOCKSIZE_WIDTH (9)
#define HW_ECC_SSFDCCFG_RSVD0_WIDTH (7)
#define HW_ECC_SSFDCCFG_SFTRST_WIDTH (1)

#define HW_ECC_SSFDCCFG_SYMBOLSIZE_SETMASK (((1<<HW_ECC_SSFDCCFG_SYMBOLSIZE_WIDTH)-1)<<HW_ECC_SSFDCCFG_SYMBOLSIZE_BITPOS) 
#define HW_ECC_SSFDCCFG_BLOCKSIZE_SETMASK (((1<<HW_ECC_SSFDCCFG_BLOCKSIZE_WIDTH)-1)<<HW_ECC_SSFDCCFG_BLOCKSIZE_BITPOS) 
#define HW_ECC_SSFDCCFG_RSVD0_SETMASK (((1<<HW_ECC_SSFDCCFG_RSVD0_WIDTH)-1)<<HW_ECC_SSFDCCFG_RSVD0_BITPOS) 
#define HW_ECC_SSFDCCFG_SFTRST_SETMASK (((1<<HW_ECC_SSFDCCFG_SFTRST_WIDTH)-1)<<HW_ECC_SSFDCCFG_SFTRST_BITPOS) 

#define HW_ECC_SSFDCCFG_SYMBOLSIZE_CLRMASK (~(WORD)HW_ECC_SSFDCCFG_SYMBOLSIZE_SETMASK)
#define HW_ECC_SSFDCCFG_BLOCKSIZE_CLRMASK (~(WORD)HW_ECC_SSFDCCFG_BLOCKSIZE_SETMASK)
#define HW_ECC_SSFDCCFG_RSVD0_CLRMASK (~(WORD)HW_ECC_SSFDCCFG_RSVD0_SETMASK)
#define HW_ECC_SSFDCCFG_ESFTRST_CLRMASK (~(WORD)HW_ECC_SSFDCCFG_SFTRST_SETMASK)

typedef union               
{
    struct {
	 int SYMBOLSIZE      : HW_ECC_SSFDCCFG_SYMBOLSIZE_WIDTH;
	 int BLOCKSIZE       : HW_ECC_SSFDCCFG_BLOCKSIZE_WIDTH;
	 int RSVD0           : HW_ECC_SSFDCCFG_RSVD0_WIDTH;
	 int ESFTRST         : HW_ECC_SSFDCCFG_SFTRST_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_ssfdccfg_type;
#define HW_ECC_SSFDCCFG      (*(volatile ecc_ssfdccfg_type _X*) (HW_ECC_BASEADDR+3))    /* ECC SSFDC Control Register */

////////////////////////////////////////////////////////////////////////////
//  ECC Data Block Start Address Register (HW_ECC_BLKSTRTADDR) Bit Definitions

#define HW_ECC_BLKSTRTADDR_ADDR_BITPOS (0)
#define HW_ECC_BLKSTRTADDR_RSVD0_BITPOS (16)

#define HW_ECC_BLKSTRTADDR_ADDR_WIDTH (16)
#define HW_ECC_BLKSTRTADDR_RSVD0_WIDTH (8)

#define HW_ECC_BLKSTRTADDR_ADDR_SETMASK (((1<<HW_ECC_BLKSTRTADDR_ADDR_WIDTH)-1)<<HW_ECC_BLKSTRTADDR_ADDR_BITPOS)
#define HW_ECC_BLKSTRTADDR_RSVD0_SETMASK (((1<<HW_ECC_BLKSTRTADDR_RSVD0_WIDTH)-1)<<HW_ECC_BLKSTRTADDR_RSVD0_BITPOS) 

#define HW_ECC_BLKSTRTADDR_ADDR_CLRMASK (~(WORD)HW_ECC_BLKSTRTADDR_ADDR_SETMASK)
#define HW_ECC_BLKSTRTADDR_RSVD0_CLRMASK (~(WORD)HW_ECC_BLKSTRTADDR_RSVD0_SETMASK)

typedef union               
{
    struct {
	 int ADDR            : HW_ECC_BLKSTRTADDR_ADDR_WIDTH;
	 int RSVD0           : HW_ECC_BLKSTRTADDR_RSVD0_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_blkstrtaddr_type;
#define HW_ECC_BLKSTRTADDR      (*(volatile ecc_blkstrtaddr_type _X*) (HW_ECC_BASEADDR+4))    /* ECC Block-Start Address */

////////////////////////////////////////////////////////////////////////////
//  ECC Block Start Index Register (HW_ECC_BLKSTRTINDEX) Bit Definitions

#define HW_ECC_BLKSTRTINDEX_INDEX_BITPOS (0)
#define HW_ECC_BLKSTRTINDEX_RSVD0_BITPOS (5)
#define HW_ECC_BLKSTRTINDEX_MEMSPACE_BITPOS (8)
#define HW_ECC_BLKSTRTINDEX_RSVD1_BITPOS (10)

#define HW_ECC_BLKSTRTINDEX_INDEX_WIDTH (5)
#define HW_ECC_BLKSTRTINDEX_RSVD0_WIDTH (3)             
#define HW_ECC_BLKSTRTINDEX_MEMSPACE_WIDTH (2)
#define HW_ECC_BLKSTRTINDEX_RSVD1_WIDTH (14)

#define HW_ECC_BLKSTRTINDEX_INDEX_SETMASK (((1<<HW_ECC_BLKSTRTINDEX_INDEX_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_INDEX_BITPOS)
#define HW_ECC_BLKSTRTINDEX_RSVD0_SETMASK (((1<<HW_ECC_BLKSTRTINDEX_RSVD0_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_RSVD0_BITPOS)            
#define HW_ECC_BLKSTRTINDEX_MEMSPACE_SETMASK (((1<<HW_ECC_BLKSTRTINDEX_MEMSPACE_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_MEMSPACE_BITPOS) 
#define HW_ECC_BLKSTRTINDEX_RSVD1_SETMASK (((1<<HW_ECC_BLKSTRTINDEX_RSVD1_WIDTH)-1)<<HW_ECC_BLKSTRTINDEX_RSVD1_BITPOS) 

#define HW_ECC_BLKSTRTINDEX_INDEX_CLRMASK (~(WORD)HW_ECC_BLKSTRTINDEX_INDEX_SETMASK)
#define HW_ECC_BLKSTRTINDEX_RSVD0_CLRMASK (~(WORD)HW_ECC_BLKSTRTINDEX_RSVD0_SETMASK)
#define HW_ECC_BLKSTRTINDEX_MEMSPACE_CLRMASK (~(WORD)HW_ECC_BLKSTRTINDEX_MEMSPACE_SETMASK)
#define HW_ECC_BLKSTRTINDEX_RSVD1_CLRMASK (~(WORD)HW_ECC_BLKSTRTINDEX_RSVD1_SETMASK)

typedef union               
{
    struct {
	 int INDEX           : HW_ECC_BLKSTRTINDEX_INDEX_WIDTH;
	 int RSVD1           : HW_ECC_BLKSTRTINDEX_RSVD1_WIDTH;
	 int MEMSPACE        : HW_ECC_BLKSTRTINDEX_MEMSPACE_WIDTH;
	 int RSVD0           : HW_ECC_BLKSTRTINDEX_RSVD0_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_blkstrtindex_type;
#define HW_ECC_BLKSTRTINDEX      (*(volatile ecc_blkstrtindex_type _X*) (HW_ECC_BASEADDR+5))    /* ECC Block-Start Bit-Index */

////////////////////////////////////////////////////////////////////////////
//  ECC Parity Start Address Register (HW_ECC_PARSTRTADDR) Bit Definitions

#define HW_ECC_PARSTRTADDR_ADDR_BITPOS (0)
#define HW_ECC_PARSTRTADDR_RSVD0_BITPOS (16)

#define HW_ECC_PARSTRTADDR_ADDR_WIDTH (16)
#define HW_ECC_PARSTRTADDR_RSVD0_WIDTH (8)

#define HW_ECC_PARSTRTADDR_ADDR_SETMASK (((1<<HW_ECC_PARSTRTADDR_ADDR_WIDTH)-1)<<HW_ECC_PARSTRTADDR_ADDR_BITPOS)  
#define HW_ECC_PARSTRTADDR_RSVD0_SETMASK (((1<<HW_ECC_PARSTRTADDR_RSVD0_WIDTH)-1)<<HW_ECC_PARSTRTADDR_RSVD0_BITPOS) 

#define HW_ECC_PARSTRTADDR_ADDR_CLRMASK (~(WORD)HW_ECC_PARSTRTADDR_ADDR_SETMASK)
#define HW_ECC_PARSTRTADDR_RSVD0_CLRMASK (~(WORD)HW_ECC_PARSTRTADDR_RSVD0_SETMASK)

typedef union               
{
    struct {
	 int ADDR            : HW_ECC_PARSTRTADDR_ADDR_WIDTH;
	 int RSVD0           : HW_ECC_PARSTRTADDR_RSVD0_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_parstrtaddr_type;
#define HW_ECC_PARSTRTADDR      (*(volatile ecc_parstrtaddr_type _X*) (HW_ECC_BASEADDR+6))    /* ECC Parity-Start Address */

////////////////////////////////////////////////////////////////////////////
//  ECC Parity Start Index Register (HW_ECC_PARSTRTINDEX) Bit Definitions

#define HW_ECC_PARSTRTINDEX_INDEX_BITPOS (0)
#define HW_ECC_PARSTRTINDEX_RSVD0_BITPOS (5)
#define HW_ECC_PARSTRTINDEX_MEMSPACE_BITPOS (8)
#define HW_ECC_PARSTRTINDEX_RSVD1_BITPOS (10)

#define HW_ECC_PARSTRTINDEX_INDEX_WIDTH (5)
#define HW_ECC_PARSTRTINDEX_RSVD0_WIDTH (3)             
#define HW_ECC_PARSTRTINDEX_MEMSPACE_WIDTH (2)
#define HW_ECC_PARSTRTINDEX_RSVD1_WIDTH (14)

#define HW_ECC_PARSTRTINDEX_INDEX_SETMASK (((1<<HW_ECC_PARSTRTINDEX_INDEX_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_INDEX_BITPOS)
#define HW_ECC_PARSTRTINDEX_RSVD0_SETMASK (((1<<HW_ECC_PARSTRTINDEX_RSVD0_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_RSVD0_BITPOS)
#define HW_ECC_PARSTRTINDEX_MEMSPACE_SETMASK (((1<<HW_ECC_PARSTRTINDEX_MEMSPACE_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_MEMSPACE_BITPOS) 
#define HW_ECC_PARSTRTINDEX_RSVD1_SETMASK (((1<<HW_ECC_PARSTRTINDEX_RSVD1_WIDTH)-1)<<HW_ECC_PARSTRTINDEX_RSVD1_BITPOS) 

#define HW_ECC_PARSTRTINDEX_INDEX_CLRMASK (~(WORD)HW_ECC_PARSTRTINDEX_INDEX_SETMASK)
#define HW_ECC_PARSTRTINDEX_RSVD0_CLRMASK (~(WORD)HW_ECC_PARSTRTINDEX_RSVD0_SETMASK)
#define HW_ECC_PARSTRTINDEX_MEMSPACE_CLRMASK (~(WORD)HW_ECC_PARSTRTINDEX_MEMSPACE_SETMASK)
#define HW_ECC_PARSTRTINDEX_RSVD1_CLRMASK (~(WORD)HW_ECC_PARSTRTINDEX_RSVD1_SETMASK)

typedef union               
{
    struct {
	 int INDEX           : HW_ECC_PARSTRTINDEX_INDEX_WIDTH;
	 int RSVD0           : HW_ECC_PARSTRTINDEX_RSVD0_WIDTH;
	 int MEMSPACE        : HW_ECC_PARSTRTINDEX_MEMSPACE_WIDTH;
	 int RSVD1           : HW_ECC_PARSTRTINDEX_RSVD1_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_parstrtindex_type;
#define HW_ECC_PARSTRTINDEX      (*(volatile ecc_parstrtindex_type _X*) (HW_ECC_BASEADDR+7))    /* ECC Block-Start Bit-Index */

////////////////////////////////////////////////////////////////////////////
//  ECC Error-Location Address Register (HW_ECC_LOCADDR) Bit Definitions

#define HW_ECC_LOCADDR_ADDR_BITPOS (0)
#define HW_ECC_LOCADDR_RSVD0_BITPOS (16)

#define HW_ECC_LOCADDR_ADDR_WIDTH (16)
#define HW_ECC_LOCADDR_RSVD0_WIDTH (8)

#define HW_ECC_LOCADDR_ADDR_SETMASK (((1<<HW_ECC_LOCADDR_ADDR_WIDTH)-1)<<HW_ECC_LOCADDR_ADDR_BITPOS)               
#define HW_ECC_LOCADDR_RSVD0_SETMASK (((1<<HW_ECC_LOCADDR_RSVD0_WIDTH)-1)<<HW_ECC_LOCADDR_RSVD0_BITPOS) 

#define HW_ECC_LOCADDR_ADDR_CLRMASK (~(WORD)HW_ECC_LOCADDR_ADDR_SETMASK)
#define HW_ECC_LOCADDR_RSVD0_CLRMASK (~(WORD)HW_ECC_LOCADDR_RSVD0_SETMASK)

typedef union               
{
    struct {
	 int ADDR            : HW_ECC_LOCADDR_ADDR_WIDTH;
	 int RSVD0           : HW_ECC_LOCADDR_RSVD0_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_locaddr_type;
#define HW_ECC_LOCADDR      (*(volatile ecc_locaddr_type _X*) (HW_ECC_BASEADDR+8))    /* ECC Parity-Start Address */

////////////////////////////////////////////////////////////////////////////
//  ECC Error-Location Index Register (HW_ECC_LOCINDEX) Bit Definitions

#define HW_ECC_LOCINDEX_INDEX_BITPOS (0)
#define HW_ECC_LOCINDEX_RSVD0_BITPOS (5)
#define HW_ECC_LOCINDEX_MEMSPACE_BITPOS (8)
#define HW_ECC_LOCINDEX_RSVD1_BITPOS (10)

#define HW_ECC_LOCINDEX_INDEX_WIDTH (5)
#define HW_ECC_LOCINDEX_RSVD0_WIDTH (3)             
#define HW_ECC_LOCINDEX_MEMSPACE_WIDTH (2)
#define HW_ECC_LOCINDEX_RSVD1_WIDTH (14)

#define HW_ECC_LOCINDEX_INDEX_SETMASK (((1<<HW_ECC_LOCINDEX_INDEX_WIDTH)-1)<<HW_ECC_LOCINDEX_INDEX_BITPOS)
#define HW_ECC_LOCINDEX_RSVD0_SETMASK (((1<<HW_ECC_LOCINDEX_RSVD0_WIDTH)-1)<<HW_ECC_LOCINDEX_RSVD0_BITPOS)            
#define HW_ECC_LOCINDEX_MEMSPACE_SETMASK (((1<<HW_ECC_LOCINDEX_MEMSPACE_WIDTH)-1)<<HW_ECC_LOCINDEX_MEMSPACE_BITPOS) 
#define HW_ECC_LOCINDEX_RSVD1_SETMASK (((1<<HW_ECC_LOCINDEX_RSVD1_WIDTH)-1)<<HW_ECC_LOCINDEX_RSVD1_BITPOS) 

#define HW_ECC_LOCINDEX_INDEX_CLRMASK (~(WORD)HW_ECC_LOCINDEX_INDEX_SETMASK)
#define HW_ECC_LOCINDEX_RSVD0_CLRMASK (~(WORD)HW_ECC_LOCINDEX_RSVD0_SETMASK)
#define HW_ECC_LOCINDEX_MEMSPACE_CLRMASK (~(WORD)HW_ECC_LOCINDEX_MEMSPACE_SETMASK)
#define HW_ECC_LOCINDEX_RSVD1_CLRMASK (~(WORD)HW_ECC_LOCINDEX_RSVD1_SETMASK)

typedef union               
{
    struct {
	 int INDEX           : HW_ECC_LOCINDEX_INDEX_WIDTH;
	 int RSVD0           : HW_ECC_LOCINDEX_RSVD0_WIDTH;
	 int MEMSPACE        : HW_ECC_LOCINDEX_MEMSPACE_WIDTH;
	 int RSVD1           : HW_ECC_LOCINDEX_RSVD1_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_locindex_type;
#define HW_ECC_LOCINDEX      (*(volatile ecc_locindex_type _X*) (HW_ECC_BASEADDR+9))    /* ECC Block-Start Bit-Index */

////////////////////////////////////////////////////////////////////////////
//  ECC Error-Location Index Register (HW_ECC_ERRVAL) Bit Definitions

#define HW_ECC_ERRVAL_ERRORVALUE_BITPOS (0)
#define HW_ECC_ERRVAL_RSVD0_BITPOS (9)
#define HW_ECC_ERRVAL_BLOCKLOC_BITPOS (12)
#define HW_ECC_ERRVAL_RSVD1_BITPOS (21)

#define HW_ECC_ERRVAL_ERRORVALUE_WIDTH (9)
#define HW_ECC_ERRVAL_RSVD0_WIDTH (3)             
#define HW_ECC_ERRVAL_BLOCKLOC_WIDTH (9)
#define HW_ECC_ERRVAL_RSVD1_WIDTH (3)

#define HW_ECC_ERRVAL_ERRORVALUE_SETMASK (((1<<HW_ECC_ERRVAL_ERRORVALUE_WIDTH)-1)<<HW_ECC_ERRVAL_ERRORVALUE_BITPOS)
#define HW_ECC_ERRVAL_RSVD0_SETMASK (((1<<HW_ECC_ERRVAL_RSVD0_WIDTH)-1)<<HW_ECC_ERRVAL_RSVD0_BITPOS)            
#define HW_ECC_ERRVAL_BLOCKLOC_SETMASK (((1<<HW_ECC_ERRVAL_BLOCKLOC_WIDTH)-1)<<HW_ECC_ERRVAL_BLOCKLOC_BITPOS) 
#define HW_ECC_ERRVAL_RSVD1_SETMASK (((1<<HW_ECC_ERRVAL_RSVD1_WIDTH)-1)<<HW_ECC_ERRVAL_RSVD1_BITPOS) 

#define HW_ECC_ERRVAL_ERRORVALUE_CLRMASK (~(WORD)HW_ECC_ERRVAL_ERRORVALUE_SETMASK)
#define HW_ECC_ERRVAL_RSVD0_CLRMASK (~(WORD)HW_ECC_ERRVAL_RSVD0_SETMASK)
#define HW_ECC_ERRVAL_BLOCKLOC_CLRMASK (~(WORD)HW_ECC_ERRVAL_BLOCKLOC_SETMASK)
#define HW_ECC_ERRVAL_RSVD1_CLRMASK (~(WORD)HW_ECC_ERRVAL_RSVD1_SETMASK)

typedef union               
{
    struct {
	 int INDEX           : HW_ECC_ERRVAL_ERRORVALUE_WIDTH;
	 int RSVD0           : HW_ECC_ERRVAL_RSVD0_WIDTH;
	 int MEMSPACE        : HW_ECC_ERRVAL_BLOCKLOC_WIDTH;
	 int RSVD1           : HW_ECC_ERRVAL_RSVD1_WIDTH;
    } B;
    int I;
    unsigned int U;
} ecc_errval_type;
#define HW_ECC_ERRVAL      (*(volatile ecc_errval_type _X*) (HW_ECC_BASEADDR+10))    /* ECC Block-Start Bit-Index */

#endif

















