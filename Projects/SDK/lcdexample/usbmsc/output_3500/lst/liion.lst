TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc872a0b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;        liion.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                               94 ; 3    |//
                               95 ; 4    |// Filename: liion.c
                               96 ; 5    |// Description: The lithium  ion specific implementation of the battery charging 
                               97 ; 6    |//              algorithms
                               98 ; 7    |////////////////////////////////////////////////////////////////////////////////
                               99 ; 8    |
                              100 ; 9    |
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |//   Includes and external references
                              103 ; 12   |////////////////////////////////////////////////////////////////////////////////
                              104 ; 13   |#include "types.h"
                              105 
                              107 
                              108 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              109 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              110 ; 3    |//
                              111 ; 4    |// Filename: types.h
                              112 ; 5    |// Description: Standard data types
                              113 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              114 ; 7    |
                              115 ; 8    |#ifndef _TYPES_H
                              116 ; 9    |#define _TYPES_H
                              117 ; 10   |
                              118 ; 11   |// TODO:  move this outta here!
                              119 ; 12   |#if !defined(NOERROR)
                              120 ; 13   |#define NOERROR 0
                              121 ; 14   |#define SUCCESS 0
                              122 ; 15   |#endif 
                              123 ; 16   |#if !defined(SUCCESS)
                              124 ; 17   |#define SUCCESS  0
                              125 ; 18   |#endif
                              126 ; 19   |#if !defined(ERROR)
                              127 ; 20   |#define ERROR   -1
                              128 ; 21   |#endif
                              129 ; 22   |#if !defined(FALSE)
                              130 ; 23   |#define FALSE 0
                              131 ; 24   |#endif
                              132 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 26   |#define TRUE  1
                              134 ; 27   |#endif
                              135 ; 28   |
                              136 ; 29   |#if !defined(NULL)
                              137 ; 30   |#define NULL 0
                              138 ; 31   |#endif
                              139 ; 32   |
                              140 ; 33   |#define MAX_INT     0x7FFFFF
                              141 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              142 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              143 ; 36   |#define MAX_ULONG   (-1) 
                              144 ; 37   |
                              145 ; 38   |#define WORD_SIZE   24              // word size in bits
                              146 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              147 ; 40   |
                              148 ; 41   |
                              149 ; 42   |#define BYTE    unsigned char       // btVarName
                              150 ; 43   |#define CHAR    signed char         // cVarName
                              151 ; 44   |#define USHORT  unsigned short      // usVarName
                              152 ; 45   |#define SHORT   unsigned short      // sVarName
                              153 ; 46   |#define WORD    unsigned int        // wVarName
                              154 ; 47   |#define INT     signed int          // iVarName
                              155 ; 48   |#define DWORD   unsigned long       // dwVarName
                              156 ; 49   |#define LONG    signed long         // lVarName
                              157 ; 50   |#define BOOL    unsigned int        // bVarName
                              158 ; 51   |#define FRACT   _fract              // frVarName
                              159 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              160 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              161 ; 54   |#define FLOAT   float               // fVarName
                              162 ; 55   |#define DBL     double              // dVarName
                              163 ; 56   |#define ENUM    enum                // eVarName
                              164 ; 57   |#define CMX     _complex            // cmxVarName
                              165 ; 58   |typedef WORD UCS3;                   // 
                              166 ; 59   |
                              167 ; 60   |#define UINT16  unsigned short
                              168 ; 61   |#define UINT8   unsigned char   
                              169 ; 62   |#define UINT32  unsigned long
                              170 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              171 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              172 ; 65   |#define WCHAR   UINT16
                              173 ; 66   |
                              174 ; 67   |//UINT128 is 16 bytes or 6 words
                              175 ; 68   |typedef struct UINT128_3500 {   
                              176 ; 69   |    int val[6];     
                              177 ; 70   |} UINT128_3500;
                              178 ; 71   |
                              179 ; 72   |#define UINT128   UINT128_3500
                              180 ; 73   |
                              181 ; 74   |// Little endian word packed byte strings:   
                              182 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              183 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              184 ; 77   |// Little endian word packed byte strings:   
                              185 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              186 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              187 ; 80   |
                              188 ; 81   |// Declare Memory Spaces To Use When Coding
                              189 ; 82   |// A. Sector Buffers
                              190 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              191 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              192 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              194 
                              196 
                              197 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              198 ; 88   |// B. Media DDI Memory
                              199 ; 89   |#define MEDIA_DDI_MEM _Y
                              200 ; 90   |
                              201 ; 91   |
                              202 ; 92   |
                              203 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              204 ; 94   |// Examples of circular pointers:
                              205 ; 95   |//    INT CIRC cpiVarName
                              206 ; 96   |//    DWORD CIRC cpdwVarName
                              207 ; 97   |
                              208 ; 98   |#define RETCODE INT                 // rcVarName
                              209 ; 99   |
                              210 ; 100  |// generic bitfield structure
                              211 ; 101  |struct Bitfield {
                              212 ; 102  |    unsigned int B0  :1;
                              213 ; 103  |    unsigned int B1  :1;
                              214 ; 104  |    unsigned int B2  :1;
                              215 ; 105  |    unsigned int B3  :1;
                              216 ; 106  |    unsigned int B4  :1;
                              217 ; 107  |    unsigned int B5  :1;
                              218 ; 108  |    unsigned int B6  :1;
                              219 ; 109  |    unsigned int B7  :1;
                              220 ; 110  |    unsigned int B8  :1;
                              221 ; 111  |    unsigned int B9  :1;
                              222 ; 112  |    unsigned int B10 :1;
                              223 ; 113  |    unsigned int B11 :1;
                              224 ; 114  |    unsigned int B12 :1;
                              225 ; 115  |    unsigned int B13 :1;
                              226 ; 116  |    unsigned int B14 :1;
                              227 ; 117  |    unsigned int B15 :1;
                              228 ; 118  |    unsigned int B16 :1;
                              229 ; 119  |    unsigned int B17 :1;
                              230 ; 120  |    unsigned int B18 :1;
                              231 ; 121  |    unsigned int B19 :1;
                              232 ; 122  |    unsigned int B20 :1;
                              233 ; 123  |    unsigned int B21 :1;
                              234 ; 124  |    unsigned int B22 :1;
                              235 ; 125  |    unsigned int B23 :1;
                              236 ; 126  |};
                              237 ; 127  |
                              238 ; 128  |union BitInt {
                              239 ; 129  |        struct Bitfield B;
                              240 ; 130  |        int        I;
                              241 ; 131  |};
                              242 ; 132  |
                              243 ; 133  |#define MAX_MSG_LENGTH 10
                              244 ; 134  |struct CMessage
                              245 ; 135  |{
                              246 ; 136  |        unsigned int m_uLength;
                              247 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              248 ; 138  |};
                              249 ; 139  |
                              250 ; 140  |typedef struct {
                              251 ; 141  |    WORD m_wLength;
                              252 ; 142  |    WORD m_wMessage;
                              253 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              254 ; 144  |} Message;
                              255 ; 145  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 146  |struct MessageQueueDescriptor
                              257 ; 147  |{
                              258 ; 148  |        int *m_pBase;
                              259 ; 149  |        int m_iModulo;
                              260 ; 150  |        int m_iSize;
                              261 ; 151  |        int *m_pHead;
                              262 ; 152  |        int *m_pTail;
                              263 ; 153  |};
                              264 ; 154  |
                              265 ; 155  |struct ModuleEntry
                              266 ; 156  |{
                              267 ; 157  |    int m_iSignaledEventMask;
                              268 ; 158  |    int m_iWaitEventMask;
                              269 ; 159  |    int m_iResourceOfCode;
                              270 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              271 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              272 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              273 ; 163  |    int m_uTimeOutHigh;
                              274 ; 164  |    int m_uTimeOutLow;
                              275 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              276 ; 166  |};
                              277 ; 167  |
                              278 ; 168  |union WaitMask{
                              279 ; 169  |    struct B{
                              280 ; 170  |        unsigned int m_bNone     :1;
                              281 ; 171  |        unsigned int m_bMessage  :1;
                              282 ; 172  |        unsigned int m_bTimer    :1;
                              283 ; 173  |        unsigned int m_bButton   :1;
                              284 ; 174  |    } B;
                              285 ; 175  |    int I;
                              286 ; 176  |} ;
                              287 ; 177  |
                              288 ; 178  |
                              289 ; 179  |struct Button {
                              290 ; 180  |        WORD wButtonEvent;
                              291 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              292 ; 182  |};
                              293 ; 183  |
                              294 ; 184  |struct Message {
                              295 ; 185  |        WORD wMsgLength;
                              296 ; 186  |        WORD wMsgCommand;
                              297 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              298 ; 188  |};
                              299 ; 189  |
                              300 ; 190  |union EventTypes {
                              301 ; 191  |        struct CMessage msg;
                              302 ; 192  |        struct Button Button ;
                              303 ; 193  |        struct Message Message;
                              304 ; 194  |};
                              305 ; 195  |
                              306 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              307 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              308 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              309 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              310 ; 200  |
                              311 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              312 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              313 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              314 ; 204  |
                              315 ; 205  |#if DEBUG
                              316 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              318 ; 208  |#else 
                              319 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              320 ; 210  |#define DebugBuildAssert(x)    
                              321 ; 211  |#endif
                              322 ; 212  |
                              323 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              324 ; 214  |//  #pragma asm
                              325 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              326 ; 216  |//  #pragma endasm
                              327 ; 217  |
                              328 ; 218  |
                              329 ; 219  |#ifdef COLOR_262K
                              330 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              331 ; 221  |#elif defined(COLOR_65K)
                              332 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              333 ; 223  |#else
                              334 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              335 ; 225  |#endif
                              336 ; 226  |    
                              337 ; 227  |#endif // #ifndef _TYPES_H
                              338 
                              340 
                              341 ; 14   |#include "project.h"
                              342 
                              344 
                              345 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              346 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              347 ; 3    |//  Filename: project.inc
                              348 ; 4    |//  Description: 
                              349 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              350 ; 6    |
                              351 ; 7    |#if (!defined(_PROJECT_INC))
                              352 ; 8    |#define _PROJECT_INC 1
                              353 ; 9    |
                              354 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              355 ; 11   |#include "hwequ.h"
                              356 ; 12   |#else 
                              357 ; 13   |//include "regscodec.inc"
                              358 ; 14   |#endif
                              359 ; 15   |
                              360 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              361 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              362 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              363 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              364 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              365 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              366 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              367 ; 23   |
                              368 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              369 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              370 ; 26   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              371 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                              372 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              373 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              374 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              375 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              376 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              377 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              378 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              379 ; 35   |
                              380 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              381 ; 37   |// MEDIA DEFINITIONS
                              382 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              383 ; 39   |
                              384 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              385 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              386 ; 42   |#if defined(NAND1)
                              387 ; 43   |#define SM_INTERNAL_CHIPS 1
                              388 ; 44   |#else 
                              389 ; 45   |#if defined(NAND2)
                              390 ; 46   |#define SM_INTERNAL_CHIPS 2
                              391 ; 47   |#else 
                              392 ; 48   |#if defined(NAND3)
                              393 ; 49   |#define SM_INTERNAL_CHIPS 3
                              394 ; 50   |#else 
                              395 ; 51   |#if defined(NAND4)
                              396 ; 52   |#define SM_INTERNAL_CHIPS 4
                              397 ; 53   |#else 
                              398 ; 54   |#define SM_INTERNAL_CHIPS 1
                              399 ; 55   |#endif
                              400 ; 56   |#endif
                              401 ; 57   |#endif
                              402 ; 58   |#endif
                              403 ; 59   |
                              404 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              405 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              406 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              407 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              408 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              409 ; 65   |//*** comment out if active high ****
                              410 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              411 ; 67   |
                              412 ; 68   |#if defined(SMEDIA)
                              413 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              414 ; 70   |#define NUM_SM_EXTERNAL 1
                              415 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              416 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              417 ; 73   |#else 
                              418 ; 74   |#if defined(MMC)
                              419 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              420 ; 76   |#define NUM_SM_EXTERNAL 0
                              421 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              422 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              423 ; 79   |#else 
                              424 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              425 ; 81   |#define NUM_SM_EXTERNAL 0
                              426 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              427 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              428 ; 84   |#endif
                              429 ; 85   |#endif
                              430 ; 86   |
                              431 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              432 ; 88   |// Mass Storage Class definitions
                              433 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              434 ; 90   |// Set to 0 if Composite Device build is desired.    
                              435 ; 91   |#define MULTI_LUN_BUILD 1   
                              436 ; 92   |
                              437 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              438 ; 94   |//  SCSI
                              439 ; 95   |#if (MULTI_LUN_BUILD==0)
                              440 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              441 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              442 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              443 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              444 ; 100  |  #else
                              445 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              446 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              447 ; 103  |  #endif
                              448 ; 104  |#else
                              449 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              450 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              451 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              452 ; 108  |  #else
                              453 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              454 ; 110  |  #endif
                              455 ; 111  |#endif
                              456 ; 112  |
                              457 ; 113  |
                              458 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              459 ; 115  |
                              460 ; 116  |
                              461 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              462 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              463 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              464 ; 120  |#ifdef MMC
                              465 ; 121  |#ifdef MTP_BUILD
                              466 ; 122  |// --------------------
                              467 ; 123  |// MTP and MMC
                              468 ; 124  |// --------------------
                              469 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              470 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              471 ; 127  |#else  // ifndef MTP_BUILD
                              472 ; 128  |#ifdef STMP_BUILD_PLAYER
                              473 ; 129  |// --------------------
                              474 ; 130  |// Player and MMC
                              475 ; 131  |// --------------------
                              476 ; 132  |#else
                              477 ; 133  |// --------------------
                              478 ; 134  |// USBMSC and MMC
                              479 ; 135  |// --------------------
                              480 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              481 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              482 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              483 ; 139  |#endif // ifdef MTP_BUILD
                              484 ; 140  |#else  // ifndef MMC
                              485 ; 141  |#ifdef MTP_BUILD
                              486 ; 142  |// --------------------
                              487 ; 143  |// MTP and NAND only
                              488 ; 144  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              489 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              490 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              491 ; 147  |#else  // ifndef MTP_BUILD
                              492 ; 148  |#ifdef STMP_BUILD_PLAYER
                              493 ; 149  |// --------------------
                              494 ; 150  |// Player and NAND only
                              495 ; 151  |// --------------------
                              496 ; 152  |#else
                              497 ; 153  |// --------------------
                              498 ; 154  |// USBMSC and NAND only
                              499 ; 155  |// --------------------
                              500 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              501 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              502 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              503 ; 159  |#endif // ifdef MTP_BUILD
                              504 ; 160  |#endif // ifdef MMC 
                              505 ; 161  |
                              506 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              507 ; 163  |#if (defined(MTP_BUILD))
                              508 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              509 ; 165  |
                              510 ; 166  |////!
                              511 ; 167  |////! This varible holds the watchdog count for the store flush.
                              512 ; 168  |////!
                              513 ; 169  |///
                              514 ; 170  |#include <types.h>
                              515 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              516 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              517 ; 173  |#endif
                              518 ; 174  |
                              519 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              520 ; 176  |// These are needed here for Mass Storage Class
                              521 ; 177  |// Needs to be cleaned up
                              522 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              523 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              524 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              525 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              526 ; 182  |
                              527 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              528 ; 184  |
                              529 ; 185  |#endif
                              530 ; 186  |
                              531 ; 187  |
                              532 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              533 ; 189  |// SmartMedia/NAND defs
                              534 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              535 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              536 ; 192  |
                              537 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              538 ; 194  |// Sysloadresources defs
                              539 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              540 ; 196  |
                              541 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              542 ; 198  |// MMC defs
                              543 ; 199  |#define MMC_MAX_PARTITIONS 1
                              544 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              545 ; 201  |
                              546 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              547 ; 203  |// SPI defs
                              548 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              549 ; 205  |
                              550 ; 206  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              551 ; 207  |// Global media defs
                              552 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              553 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              554 ; 210  |
                              555 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              556 ; 212  |// DO NOT CHANGE THESE!!!
                              557 ; 213  |#define SM_MAX_PARTITIONS 4
                              558 ; 214  |#define MAX_HANDLES 2
                              559 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              560 ; 216  |
                              561 ; 217  |
                              562 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              563 ; 219  |// Battery LRADC Values 
                              564 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              565 ; 221  |// brownout trip point in mV (moved by RS)
                              566 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              567 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              568 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              569 ; 225  |//     audio recording to media.
                              570 ; 226  |#define BATT_SAFETY_MARGIN 10
                              571 ; 227  |
                              572 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              573 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              574 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              575 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              576 ; 232  |
                              577 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              578 ; 234  |
                              579 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              580 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              581 ; 237  |#if (!defined(CLCD))
                              582 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              583 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              584 ; 240  |#else 
                              585 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              586 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              587 ; 243  |#endif
                              588 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              589 ; 245  |
                              590 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              591 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              592 ; 248  |// See mp3 encoder overlay.
                              593 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              594 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              595 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              596 ; 252  |
                              597 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              598 ; 254  |// Voice recording filenames
                              599 ; 255  |// number of digits in filename Vxxx.wav
                              600 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              601 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              602 ; 258  |
                              603 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              604 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              605 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              606 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              607 ; 263  |#if defined(DEVICE_3500)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              608 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              609 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              610 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              611 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                              612 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              613 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              614 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              615 ; 271  |
                              616 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              617 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              618 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              619 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              620 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              621 ; 277  |
                              622 ; 278  |#else 
                              623 ; 279  |// STMP3410
                              624 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              625 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              626 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              627 ; 283  |#endif
                              628 ; 284  |
                              629 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              630 ; 286  |// Number of available soft timers
                              631 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              632 ; 288  |#if defined(SYNC_LYRICS)
                              633 ; 289  |#define SOFT_TIMERS 10
                              634 ; 290  |#else 
                              635 ; 291  |#if defined(JPEG_DECODER)
                              636 ; 292  |#define SOFT_TIMERS 10
                              637 ; 293  |#else 
                              638 ; 294  |#define SOFT_TIMERS 9
                              639 ; 295  |#endif
                              640 ; 296  |#endif
                              641 ; 297  |
                              642 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              643 ; 299  |//  sizes
                              644 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              645 ; 301  |#if defined(MMC)
                              646 ; 302  |#if defined(USE_PLAYLIST5)
                              647 ; 303  |#define MENU_STACK_SIZE 1500
                              648 ; 304  |#else 
                              649 ; 305  |#define MENU_STACK_SIZE 1250
                              650 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              651 ; 307  |#else 
                              652 ; 308  |#if defined(USE_PLAYLIST5)
                              653 ; 309  |#define MENU_STACK_SIZE 1500
                              654 ; 310  |#else 
                              655 ; 311  |#define MENU_STACK_SIZE 1250
                              656 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              657 ; 313  |#endif //if @def('MMC')
                              658 ; 314  |
                              659 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              660 ; 316  |// 
                              661 ; 317  |#define STACK_L1_SIZE 750
                              662 ; 318  |#define STACK_L2_SIZE 100
                              663 ; 319  |#define STACK_L3_SIZE 160
                              664 ; 320  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              665 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              666 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              667 ; 323  |// is ok with switching code.
                              668 ; 324  |#if defined(MTP_BUILD)
                              669 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              670 ; 326  |#endif
                              671 ; 327  |
                              672 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              673 ; 329  |// maximum number of nested funclets 
                              674 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              675 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              676 ; 332  |
                              677 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              678 ; 334  |//    LCD DEFINITIONS
                              679 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              680 ; 336  |
                              681 ; 337  |#define SPACE_CHAR 0x000020          
                              682 ; 338  |#define ZERO_CHAR 0x000030
                              683 ; 339  |#define COLON_CHAR 0x00003A
                              684 ; 340  |#define PERIOD_CHAR 0x00002E
                              685 ; 341  |
                              686 ; 342  |#if (defined(S6B33B0A_LCD))
                              687 ; 343  |#define LCD_X_SIZE 128
                              688 ; 344  |#define LCD_Y_SIZE 159
                              689 ; 345  |#endif
                              690 ; 346  |
                              691 ; 347  |#if (defined(SED15XX_LCD))
                              692 ; 348  |#define LCD_X_SIZE 128
                              693 ; 349  |#define LCD_Y_SIZE 64
                              694 ; 350  |#endif
                              695 ; 351  |
                              696 ; 352  |
                              697 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              698 ; 354  |//   Details on Customizing Contrast
                              699 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              700 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              701 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              702 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              703 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              704 ; 360  |//   unless the ezact sequence is remembered.
                              705 ; 361  |//   To find out what range your player supports: 
                              706 ; 362  |//   change these equs to full range or comment out (full range is default)
                              707 ; 363  |//;;;;;;
                              708 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              709 ; 365  |// recommended calibration using player -- uncomment 
                              710 ; 366  |//;;;;;;
                              711 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              712 ; 368  |////////////////////////////
                              713 ; 369  |#if (defined(DEMO_HW))
                              714 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              715 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              716 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              717 ; 373  |#else 
                              718 ; 374  |
                              719 ; 375  |#if (defined(S6B33B0A_LCD))
                              720 ; 376  |#define LCD_MAX_CONTRAST 210
                              721 ; 377  |#define LCD_MIN_CONTRAST 160    
                              722 ; 378  |#endif
                              723 ; 379  |
                              724 ; 380  |#if (defined(SED15XX_LCD))
                              725 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              726 ; 382  |// Engineering board regs support range [17-37].
                              727 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              728 ; 384  |//   One default contrast range [24-42] works for both.
                              729 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              730 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              731 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              732 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              733 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              734 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              735 ; 391  |
                              736 ; 392  |#if (defined(NEWSHINGYIH))
                              737 ; 393  |#define LCD_MAX_CONTRAST 250
                              738 ; 394  |#define LCD_MIN_CONTRAST 0
                              739 ; 395  |#else 
                              740 ; 396  |//-----
                              741 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              742 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              743 ; 399  |#define LCD_MAX_CONTRAST 250
                              744 ; 400  |#define LCD_MIN_CONTRAST 0
                              745 ; 401  |
                              746 ; 402  |//=====
                              747 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              748 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              749 ; 405  |//LCD_MAX_CONTRAST equ 42
                              750 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              751 ; 407  |
                              752 ; 408  |#endif
                              753 ; 409  |#endif
                              754 ; 410  |
                              755 ; 411  |#endif
                              756 ; 412  |
                              757 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              758 ; 414  |// The default value of the lcd contrast in % of range
                              759 ; 415  |//   the default value is used when no settings.dat is available
                              760 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              761 ; 417  |
                              762 ; 418  |#if (defined(S6B33B0A_LCD))
                              763 ; 419  |// 60% of range is default value
                              764 ; 420  |#define DEFAULT_CONTRAST 50 
                              765 ; 421  |#endif
                              766 ; 422  |
                              767 ; 423  |#if (defined(SED15XX_LCD))
                              768 ; 424  |// % of range is default value (was 60%)
                              769 ; 425  |#define DEFAULT_CONTRAST 50 
                              770 ; 426  |#endif
                              771 ; 427  |
                              772 ; 428  |
                              773 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              774 ; 430  |// make lower when doing calibration
                              775 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              776 ; 432  |
                              777 ; 433  |
                              778 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              779 ; 435  |// For FFWD and RWND
                              780 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              781 ; 437  |#define SECONDS_TO_SKIP 1
                              782 ; 438  |#define SECONDS_TO_SKIP1 3
                              783 ; 439  |#define SECONDS_TO_SKIP2 6
                              784 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              785 ; 441  |#define PREV_SONG_THRESHOLD 5  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              786 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              787 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              788 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              789 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              790 ; 446  |
                              791 ; 447  |// For audible FFW/RWD
                              792 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              793 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              794 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              795 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              796 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              797 ; 453  |#define LEVEL1_BOUNDARY 17 
                              798 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              799 ; 455  |#define LEVEL2_BOUNDARY 33 
                              800 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              801 ; 457  |#define LEVEL3_BOUNDARY 50 
                              802 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              803 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              804 ; 460  |// Short Song Time, songs too short to play.
                              805 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              806 ; 462  |
                              807 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              808 ; 464  |// MP3 Sync Values
                              809 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              810 ; 466  |// # bytes to look for sync before marking it bad
                              811 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              812 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              813 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              814 ; 470  |// once we have sync'd, the isr should be called this frequently
                              815 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              816 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              817 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              818 ; 474  |
                              819 ; 475  |
                              820 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              821 ; 477  |//// Multi-Stage Volume Control Definitions
                              822 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              823 ; 479  |//// Use Multi-Stage Volume
                              824 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              825 ; 481  |
                              826 ; 482  |//// Master Volume definitions
                              827 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              828 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              829 ; 485  |
                              830 ; 486  |//// DAC-Mode definitions
                              831 ; 487  |//// Adjusts 0dB point
                              832 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              833 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              834 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              835 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              836 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              837 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              838 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              839 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              840 ; 496  |
                              841 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              842 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              843 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              844 ; 500  |
                              845 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              846 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                              847 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              848 ; 504  |
                              849 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              850 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              851 ; 507  |
                              852 ; 508  |
                              853 ; 509  |//// Line In definitions (used for Line-In 1)
                              854 ; 510  |//// 0dB point of the Line In
                              855 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              856 ; 512  |//// Minimum volume of Line In
                              857 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              858 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              859 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              860 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              861 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              862 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              863 ; 519  |
                              864 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              865 ; 521  |//// 0dB point of the Line In
                              866 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              867 ; 523  |//// Minimum volume of Line In
                              868 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              869 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              870 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              871 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              872 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              873 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              874 ; 530  |
                              875 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              876 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              877 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              878 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              879 ; 535  |
                              880 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              881 ; 537  |////
                              882 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              883 ; 539  |////
                              884 ; 540  |///
                              885 ; 541  |#include <types.h>
                              886 
                              888 
                              889 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              890 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              891 ; 3    |//
                              892 ; 4    |// Filename: types.h
                              893 ; 5    |// Description: Standard data types
                              894 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              895 ; 7    |
                              896 ; 8    |#ifndef _TYPES_H
                              897 ; 9    |#define _TYPES_H
                              898 ; 10   |
                              899 ; 11   |// TODO:  move this outta here!
                              900 ; 12   |#if !defined(NOERROR)
                              901 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              902 ; 14   |#define SUCCESS 0
                              903 ; 15   |#endif 
                              904 ; 16   |#if !defined(SUCCESS)
                              905 ; 17   |#define SUCCESS  0
                              906 ; 18   |#endif
                              907 ; 19   |#if !defined(ERROR)
                              908 ; 20   |#define ERROR   -1
                              909 ; 21   |#endif
                              910 ; 22   |#if !defined(FALSE)
                              911 ; 23   |#define FALSE 0
                              912 ; 24   |#endif
                              913 ; 25   |#if !defined(TRUE)
                              914 ; 26   |#define TRUE  1
                              915 ; 27   |#endif
                              916 ; 28   |
                              917 ; 29   |#if !defined(NULL)
                              918 ; 30   |#define NULL 0
                              919 ; 31   |#endif
                              920 ; 32   |
                              921 ; 33   |#define MAX_INT     0x7FFFFF
                              922 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              923 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              924 ; 36   |#define MAX_ULONG   (-1) 
                              925 ; 37   |
                              926 ; 38   |#define WORD_SIZE   24              // word size in bits
                              927 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              928 ; 40   |
                              929 ; 41   |
                              930 ; 42   |#define BYTE    unsigned char       // btVarName
                              931 ; 43   |#define CHAR    signed char         // cVarName
                              932 ; 44   |#define USHORT  unsigned short      // usVarName
                              933 ; 45   |#define SHORT   unsigned short      // sVarName
                              934 ; 46   |#define WORD    unsigned int        // wVarName
                              935 ; 47   |#define INT     signed int          // iVarName
                              936 ; 48   |#define DWORD   unsigned long       // dwVarName
                              937 ; 49   |#define LONG    signed long         // lVarName
                              938 ; 50   |#define BOOL    unsigned int        // bVarName
                              939 ; 51   |#define FRACT   _fract              // frVarName
                              940 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              941 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              942 ; 54   |#define FLOAT   float               // fVarName
                              943 ; 55   |#define DBL     double              // dVarName
                              944 ; 56   |#define ENUM    enum                // eVarName
                              945 ; 57   |#define CMX     _complex            // cmxVarName
                              946 ; 58   |typedef WORD UCS3;                   // 
                              947 ; 59   |
                              948 ; 60   |#define UINT16  unsigned short
                              949 ; 61   |#define UINT8   unsigned char   
                              950 ; 62   |#define UINT32  unsigned long
                              951 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              952 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              953 ; 65   |#define WCHAR   UINT16
                              954 ; 66   |
                              955 ; 67   |//UINT128 is 16 bytes or 6 words
                              956 ; 68   |typedef struct UINT128_3500 {   
                              957 ; 69   |    int val[6];     
                              958 ; 70   |} UINT128_3500;
                              959 ; 71   |
                              960 ; 72   |#define UINT128   UINT128_3500
                              961 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              962 ; 74   |// Little endian word packed byte strings:   
                              963 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              964 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              965 ; 77   |// Little endian word packed byte strings:   
                              966 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              967 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              968 ; 80   |
                              969 ; 81   |// Declare Memory Spaces To Use When Coding
                              970 ; 82   |// A. Sector Buffers
                              971 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              972 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              973 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              974 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              975 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              976 ; 88   |// B. Media DDI Memory
                              977 ; 89   |#define MEDIA_DDI_MEM _Y
                              978 ; 90   |
                              979 ; 91   |
                              980 ; 92   |
                              981 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              982 ; 94   |// Examples of circular pointers:
                              983 ; 95   |//    INT CIRC cpiVarName
                              984 ; 96   |//    DWORD CIRC cpdwVarName
                              985 ; 97   |
                              986 ; 98   |#define RETCODE INT                 // rcVarName
                              987 ; 99   |
                              988 ; 100  |// generic bitfield structure
                              989 ; 101  |struct Bitfield {
                              990 ; 102  |    unsigned int B0  :1;
                              991 ; 103  |    unsigned int B1  :1;
                              992 ; 104  |    unsigned int B2  :1;
                              993 ; 105  |    unsigned int B3  :1;
                              994 ; 106  |    unsigned int B4  :1;
                              995 ; 107  |    unsigned int B5  :1;
                              996 ; 108  |    unsigned int B6  :1;
                              997 ; 109  |    unsigned int B7  :1;
                              998 ; 110  |    unsigned int B8  :1;
                              999 ; 111  |    unsigned int B9  :1;
                             1000 ; 112  |    unsigned int B10 :1;
                             1001 ; 113  |    unsigned int B11 :1;
                             1002 ; 114  |    unsigned int B12 :1;
                             1003 ; 115  |    unsigned int B13 :1;
                             1004 ; 116  |    unsigned int B14 :1;
                             1005 ; 117  |    unsigned int B15 :1;
                             1006 ; 118  |    unsigned int B16 :1;
                             1007 ; 119  |    unsigned int B17 :1;
                             1008 ; 120  |    unsigned int B18 :1;
                             1009 ; 121  |    unsigned int B19 :1;
                             1010 ; 122  |    unsigned int B20 :1;
                             1011 ; 123  |    unsigned int B21 :1;
                             1012 ; 124  |    unsigned int B22 :1;
                             1013 ; 125  |    unsigned int B23 :1;
                             1014 ; 126  |};
                             1015 ; 127  |
                             1016 ; 128  |union BitInt {
                             1017 ; 129  |        struct Bitfield B;
                             1018 ; 130  |        int        I;
                             1019 ; 131  |};
                             1020 ; 132  |
                             1021 ; 133  |#define MAX_MSG_LENGTH 10
                             1022 ; 134  |struct CMessage
                             1023 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 136  |        unsigned int m_uLength;
                             1025 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1026 ; 138  |};
                             1027 ; 139  |
                             1028 ; 140  |typedef struct {
                             1029 ; 141  |    WORD m_wLength;
                             1030 ; 142  |    WORD m_wMessage;
                             1031 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1032 ; 144  |} Message;
                             1033 ; 145  |
                             1034 ; 146  |struct MessageQueueDescriptor
                             1035 ; 147  |{
                             1036 ; 148  |        int *m_pBase;
                             1037 ; 149  |        int m_iModulo;
                             1038 ; 150  |        int m_iSize;
                             1039 ; 151  |        int *m_pHead;
                             1040 ; 152  |        int *m_pTail;
                             1041 ; 153  |};
                             1042 ; 154  |
                             1043 ; 155  |struct ModuleEntry
                             1044 ; 156  |{
                             1045 ; 157  |    int m_iSignaledEventMask;
                             1046 ; 158  |    int m_iWaitEventMask;
                             1047 ; 159  |    int m_iResourceOfCode;
                             1048 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1049 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1050 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1051 ; 163  |    int m_uTimeOutHigh;
                             1052 ; 164  |    int m_uTimeOutLow;
                             1053 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1054 ; 166  |};
                             1055 ; 167  |
                             1056 ; 168  |union WaitMask{
                             1057 ; 169  |    struct B{
                             1058 ; 170  |        unsigned int m_bNone     :1;
                             1059 ; 171  |        unsigned int m_bMessage  :1;
                             1060 ; 172  |        unsigned int m_bTimer    :1;
                             1061 ; 173  |        unsigned int m_bButton   :1;
                             1062 ; 174  |    } B;
                             1063 ; 175  |    int I;
                             1064 ; 176  |} ;
                             1065 ; 177  |
                             1066 ; 178  |
                             1067 ; 179  |struct Button {
                             1068 ; 180  |        WORD wButtonEvent;
                             1069 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1070 ; 182  |};
                             1071 ; 183  |
                             1072 ; 184  |struct Message {
                             1073 ; 185  |        WORD wMsgLength;
                             1074 ; 186  |        WORD wMsgCommand;
                             1075 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1076 ; 188  |};
                             1077 ; 189  |
                             1078 ; 190  |union EventTypes {
                             1079 ; 191  |        struct CMessage msg;
                             1080 ; 192  |        struct Button Button ;
                             1081 ; 193  |        struct Message Message;
                             1082 ; 194  |};
                             1083 ; 195  |
                             1084 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1085 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1086 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1087 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1088 ; 200  |
                             1089 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1090 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1091 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1092 ; 204  |
                             1093 ; 205  |#if DEBUG
                             1094 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1095 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1096 ; 208  |#else 
                             1097 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1098 ; 210  |#define DebugBuildAssert(x)    
                             1099 ; 211  |#endif
                             1100 ; 212  |
                             1101 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1102 ; 214  |//  #pragma asm
                             1103 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1104 ; 216  |//  #pragma endasm
                             1105 ; 217  |
                             1106 ; 218  |
                             1107 ; 219  |#ifdef COLOR_262K
                             1108 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1109 ; 221  |#elif defined(COLOR_65K)
                             1110 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1111 ; 223  |#else
                             1112 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1113 ; 225  |#endif
                             1114 ; 226  |    
                             1115 ; 227  |#endif // #ifndef _TYPES_H
                             1116 
                             1118 
                             1119 ; 542  |extern volatile WORD g_wActivityState;
                             1120 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1121 ; 544  |
                             1122 ; 545  |void _reentrant Init5VSense(void);
                             1123 ; 546  |void _reentrant ServiceDCDC(void);
                             1124 ; 547  |
                             1125 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1126 ; 549  |//// JPEG Thumbnail Mode Setting
                             1127 ; 550  |//// number of column in thumbnail mode
                             1128 ; 551  |#define THUMBNAIL_X 2           
                             1129 ; 552  |//// number of row in  thumbnail mode
                             1130 ; 553  |#define THUMBNAIL_Y 2           
                             1131 ; 554  |//// thumbnail boundary offset x
                             1132 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1133 ; 556  |//// thumbnail boundary offset y
                             1134 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1135 ; 558  |
                             1136 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1137 ; 560  |
                             1138 
                             1140 
                             1141 ; 15   |#include "gettime.h"
                             1142 
                             1144 
                             1145 ; 1    |#ifndef __TIME_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1146 ; 2    |#define __TIME_H
                             1147 ; 3    |
                             1148 ; 4    |_callee_save LONG GetTime(void);
                             1149 ; 5    |
                             1150 ; 6    |#endif
                             1151 
                             1153 
                             1154 ; 16   |#include "batterycharge.h"
                             1155 
                             1157 
                             1158 ; 1    |#ifndef __BATTERYCHARGE_H
                             1159 ; 2    |#define __BATTERYCHARGE_H
                             1160 ; 3    |
                             1161 ; 4    |//entry point for menus. function called via SysCallFunction()
                             1162 ; 5    |#ifdef STMP_BUILD_PLAYER
                             1163 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                             1164 ; 7    |#else
                             1165 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                             1166 ; 9    |#endif
                             1167 ; 10   |
                             1168 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                             1169 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                             1170 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                             1171 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                             1172 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                             1173 ; 16   |
                             1174 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                             1175 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                             1176 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                             1177 ; 20   |
                             1178 ; 21   |
                             1179 ; 22   |#endif 
                             1180 
                             1182 
                             1183 ; 17   |#include "lowresolutionadc.h"
                             1184 
                             1186 
                             1187 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             1188 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                             1189 ; 3    |//;
                             1190 ; 4    |//; Filename:    lowresolutionadc.h
                             1191 ; 5    |//; Description: General purpose interface to LRADCs
                             1192 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc
                                  .inc files
                             1193 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             1194 ; 8    |
                             1195 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                             1196 ; 10   |#define _LOWRESOLUTIONADC_H
                             1197 ; 11   |
                             1198 ; 12   |#include "regslradc.h"
                             1199 
                             1201 
                             1202 ; 1    |#if !(defined(regslradcinc))
                             1203 ; 2    |
                             1204 ; 3    |#define regslradcinc 1
                             1205 ; 4    |
                             1206 ; 5    |#include "types.h"
                             1207 
                             1209 
                             1210 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1211 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1212 ; 3    |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1213 ; 4    |// Filename: types.h
                             1214 ; 5    |// Description: Standard data types
                             1215 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1216 ; 7    |
                             1217 ; 8    |#ifndef _TYPES_H
                             1218 ; 9    |#define _TYPES_H
                             1219 ; 10   |
                             1220 ; 11   |// TODO:  move this outta here!
                             1221 ; 12   |#if !defined(NOERROR)
                             1222 ; 13   |#define NOERROR 0
                             1223 ; 14   |#define SUCCESS 0
                             1224 ; 15   |#endif 
                             1225 ; 16   |#if !defined(SUCCESS)
                             1226 ; 17   |#define SUCCESS  0
                             1227 ; 18   |#endif
                             1228 ; 19   |#if !defined(ERROR)
                             1229 ; 20   |#define ERROR   -1
                             1230 ; 21   |#endif
                             1231 ; 22   |#if !defined(FALSE)
                             1232 ; 23   |#define FALSE 0
                             1233 ; 24   |#endif
                             1234 ; 25   |#if !defined(TRUE)
                             1235 ; 26   |#define TRUE  1
                             1236 ; 27   |#endif
                             1237 ; 28   |
                             1238 ; 29   |#if !defined(NULL)
                             1239 ; 30   |#define NULL 0
                             1240 ; 31   |#endif
                             1241 ; 32   |
                             1242 ; 33   |#define MAX_INT     0x7FFFFF
                             1243 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1244 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1245 ; 36   |#define MAX_ULONG   (-1) 
                             1246 ; 37   |
                             1247 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1248 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1249 ; 40   |
                             1250 ; 41   |
                             1251 ; 42   |#define BYTE    unsigned char       // btVarName
                             1252 ; 43   |#define CHAR    signed char         // cVarName
                             1253 ; 44   |#define USHORT  unsigned short      // usVarName
                             1254 ; 45   |#define SHORT   unsigned short      // sVarName
                             1255 ; 46   |#define WORD    unsigned int        // wVarName
                             1256 ; 47   |#define INT     signed int          // iVarName
                             1257 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1258 ; 49   |#define LONG    signed long         // lVarName
                             1259 ; 50   |#define BOOL    unsigned int        // bVarName
                             1260 ; 51   |#define FRACT   _fract              // frVarName
                             1261 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1262 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1263 ; 54   |#define FLOAT   float               // fVarName
                             1264 ; 55   |#define DBL     double              // dVarName
                             1265 ; 56   |#define ENUM    enum                // eVarName
                             1266 ; 57   |#define CMX     _complex            // cmxVarName
                             1267 ; 58   |typedef WORD UCS3;                   // 
                             1268 ; 59   |
                             1269 ; 60   |#define UINT16  unsigned short
                             1270 ; 61   |#define UINT8   unsigned char   
                             1271 ; 62   |#define UINT32  unsigned long
                             1272 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1273 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1274 ; 65   |#define WCHAR   UINT16
                             1275 ; 66   |
                             1276 ; 67   |//UINT128 is 16 bytes or 6 words
                             1277 ; 68   |typedef struct UINT128_3500 {   
                             1278 ; 69   |    int val[6];     
                             1279 ; 70   |} UINT128_3500;
                             1280 ; 71   |
                             1281 ; 72   |#define UINT128   UINT128_3500
                             1282 ; 73   |
                             1283 ; 74   |// Little endian word packed byte strings:   
                             1284 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1285 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1286 ; 77   |// Little endian word packed byte strings:   
                             1287 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1288 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1289 ; 80   |
                             1290 ; 81   |// Declare Memory Spaces To Use When Coding
                             1291 ; 82   |// A. Sector Buffers
                             1292 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1293 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1294 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1295 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1296 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1297 ; 88   |// B. Media DDI Memory
                             1298 ; 89   |#define MEDIA_DDI_MEM _Y
                             1299 ; 90   |
                             1300 ; 91   |
                             1301 ; 92   |
                             1302 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1303 ; 94   |// Examples of circular pointers:
                             1304 ; 95   |//    INT CIRC cpiVarName
                             1305 ; 96   |//    DWORD CIRC cpdwVarName
                             1306 ; 97   |
                             1307 ; 98   |#define RETCODE INT                 // rcVarName
                             1308 ; 99   |
                             1309 ; 100  |// generic bitfield structure
                             1310 ; 101  |struct Bitfield {
                             1311 ; 102  |    unsigned int B0  :1;
                             1312 ; 103  |    unsigned int B1  :1;
                             1313 ; 104  |    unsigned int B2  :1;
                             1314 ; 105  |    unsigned int B3  :1;
                             1315 ; 106  |    unsigned int B4  :1;
                             1316 ; 107  |    unsigned int B5  :1;
                             1317 ; 108  |    unsigned int B6  :1;
                             1318 ; 109  |    unsigned int B7  :1;
                             1319 ; 110  |    unsigned int B8  :1;
                             1320 ; 111  |    unsigned int B9  :1;
                             1321 ; 112  |    unsigned int B10 :1;
                             1322 ; 113  |    unsigned int B11 :1;
                             1323 ; 114  |    unsigned int B12 :1;
                             1324 ; 115  |    unsigned int B13 :1;
                             1325 ; 116  |    unsigned int B14 :1;
                             1326 ; 117  |    unsigned int B15 :1;
                             1327 ; 118  |    unsigned int B16 :1;
                             1328 ; 119  |    unsigned int B17 :1;
                             1329 ; 120  |    unsigned int B18 :1;
                             1330 ; 121  |    unsigned int B19 :1;
                             1331 ; 122  |    unsigned int B20 :1;
                             1332 ; 123  |    unsigned int B21 :1;
                             1333 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1334 ; 125  |    unsigned int B23 :1;
                             1335 ; 126  |};
                             1336 ; 127  |
                             1337 ; 128  |union BitInt {
                             1338 ; 129  |        struct Bitfield B;
                             1339 ; 130  |        int        I;
                             1340 ; 131  |};
                             1341 ; 132  |
                             1342 ; 133  |#define MAX_MSG_LENGTH 10
                             1343 ; 134  |struct CMessage
                             1344 ; 135  |{
                             1345 ; 136  |        unsigned int m_uLength;
                             1346 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1347 ; 138  |};
                             1348 ; 139  |
                             1349 ; 140  |typedef struct {
                             1350 ; 141  |    WORD m_wLength;
                             1351 ; 142  |    WORD m_wMessage;
                             1352 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1353 ; 144  |} Message;
                             1354 ; 145  |
                             1355 ; 146  |struct MessageQueueDescriptor
                             1356 ; 147  |{
                             1357 ; 148  |        int *m_pBase;
                             1358 ; 149  |        int m_iModulo;
                             1359 ; 150  |        int m_iSize;
                             1360 ; 151  |        int *m_pHead;
                             1361 ; 152  |        int *m_pTail;
                             1362 ; 153  |};
                             1363 ; 154  |
                             1364 ; 155  |struct ModuleEntry
                             1365 ; 156  |{
                             1366 ; 157  |    int m_iSignaledEventMask;
                             1367 ; 158  |    int m_iWaitEventMask;
                             1368 ; 159  |    int m_iResourceOfCode;
                             1369 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1370 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1371 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1372 ; 163  |    int m_uTimeOutHigh;
                             1373 ; 164  |    int m_uTimeOutLow;
                             1374 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1375 ; 166  |};
                             1376 ; 167  |
                             1377 ; 168  |union WaitMask{
                             1378 ; 169  |    struct B{
                             1379 ; 170  |        unsigned int m_bNone     :1;
                             1380 ; 171  |        unsigned int m_bMessage  :1;
                             1381 ; 172  |        unsigned int m_bTimer    :1;
                             1382 ; 173  |        unsigned int m_bButton   :1;
                             1383 ; 174  |    } B;
                             1384 ; 175  |    int I;
                             1385 ; 176  |} ;
                             1386 ; 177  |
                             1387 ; 178  |
                             1388 ; 179  |struct Button {
                             1389 ; 180  |        WORD wButtonEvent;
                             1390 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1391 ; 182  |};
                             1392 ; 183  |
                             1393 ; 184  |struct Message {
                             1394 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1395 ; 186  |        WORD wMsgCommand;
                             1396 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1397 ; 188  |};
                             1398 ; 189  |
                             1399 ; 190  |union EventTypes {
                             1400 ; 191  |        struct CMessage msg;
                             1401 ; 192  |        struct Button Button ;
                             1402 ; 193  |        struct Message Message;
                             1403 ; 194  |};
                             1404 ; 195  |
                             1405 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1406 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1407 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1408 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1409 ; 200  |
                             1410 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1411 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1412 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1413 ; 204  |
                             1414 ; 205  |#if DEBUG
                             1415 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1416 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1417 ; 208  |#else 
                             1418 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1419 ; 210  |#define DebugBuildAssert(x)    
                             1420 ; 211  |#endif
                             1421 ; 212  |
                             1422 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1423 ; 214  |//  #pragma asm
                             1424 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1425 ; 216  |//  #pragma endasm
                             1426 ; 217  |
                             1427 ; 218  |
                             1428 ; 219  |#ifdef COLOR_262K
                             1429 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1430 ; 221  |#elif defined(COLOR_65K)
                             1431 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1432 ; 223  |#else
                             1433 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1434 ; 225  |#endif
                             1435 ; 226  |    
                             1436 ; 227  |#endif // #ifndef _TYPES_H
                             1437 
                             1439 
                             1440 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1441 ; 7    |
                             1442 ; 8    |//   SYSTEM STMP Registers 
                             1443 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             1444 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1445 ; 11   |
                             1446 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             1447 ; 13   |
                             1448 ; 14   |
                             1449 ; 15   |
                             1450 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             1451 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             1452 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             1453 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1454 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1455 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             1456 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             1457 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             1458 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             1459 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             1460 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             1461 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             1462 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             1463 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             1464 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             1465 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             1466 ; 32   |
                             1467 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             1468 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1469 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             1470 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             1471 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             1472 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             1473 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             1474 ; 40   |
                             1475 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             1476 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             1477 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             1478 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             1479 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             1480 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             1481 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             1482 ; 48   |
                             1483 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             1484 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             1485 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             1486 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             1487 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             1488 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             1489 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             1490 ; 56   |
                             1491 ; 57   |typedef union               
                             1492 ; 58   |{
                             1493 ; 59   |    struct {
                             1494 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             1495 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             1496 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             1497 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             1498 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             1499 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             1500 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             1501 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             1502 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             1503 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             1504 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             1505 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1506 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             1507 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             1508 ; 74   |    } B;
                             1509 ; 75   |   unsigned int I;
                             1510 ; 76   |        unsigned int U;
                             1511 ; 77   |} lradc_ctrl_type;
                             1512 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             1513 ; 79   |
                             1514 ; 80   |
                             1515 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1516 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             1517 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             1518 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             1519 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             1520 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             1521 ; 87   |
                             1522 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             1523 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             1524 ; 90   |
                             1525 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             1526 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             1527 ; 93   |
                             1528 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             1529 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             1530 ; 96   |
                             1531 ; 97   |
                             1532 ; 98   |typedef union               
                             1533 ; 99   |{
                             1534 ; 100  |    struct {
                             1535 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             1536 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             1537 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             1538 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             1539 ; 105  |    } B;
                             1540 ; 106  |    unsigned int I;
                             1541 ; 107  |} lradc_thrsh_type;
                             1542 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             1543 ; 109  |
                             1544 ; 110  |
                             1545 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             1546 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             1547 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             1548 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             1549 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             1550 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             1551 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             1552 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             1553 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             1554 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             1555 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             1556 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             1557 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             1558 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             1559 ; 125  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1560 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             1561 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             1562 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             1563 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             1564 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             1565 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             1566 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             1567 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             1568 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             1569 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             1570 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             1571 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             1572 ; 138  |
                             1573 ; 139  |
                             1574 ; 140  |
                             1575 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             1576 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             1577 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             1578 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             1579 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             1580 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             1581 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             1582 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             1583 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             1584 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             1585 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             1586 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             1587 ; 153  |
                             1588 ; 154  |
                             1589 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             1590 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             1591 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             1592 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             1593 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             1594 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             1595 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             1596 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             1597 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             1598 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             1599 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             1600 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             1601 ; 167  |
                             1602 ; 168  |typedef union               
                             1603 ; 169  |{
                             1604 ; 170  |    struct {
                             1605 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             1606 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             1607 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             1608 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             1609 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1610 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             1611 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             1612 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             1613 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             1614 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             1615 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             1616 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             1617 ; 183  |    } B;
                             1618 ; 184  |    unsigned int I;
                             1619 ; 185  |} lradc_result_type;
                             1620 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             1621 ; 187  |
                             1622 ; 188  |
                             1623 ; 189  |
                             1624 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             1625 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             1626 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             1627 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             1628 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1629 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             1630 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             1631 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             1632 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             1633 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             1634 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             1635 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             1636 ; 202  |
                             1637 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             1638 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1639 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             1640 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             1641 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             1642 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             1643 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             1644 ; 210  |
                             1645 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             1646 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             1647 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             1648 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             1649 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             1650 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             1651 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             1652 ; 218  |
                             1653 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             1654 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             1655 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             1656 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             1657 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             1658 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1659 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             1660 ; 226  |
                             1661 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             1662 ; 228  |
                             1663 ; 229  |
                             1664 ; 230  |
                             1665 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             1666 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             1667 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             1668 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             1669 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             1670 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             1671 ; 237  |
                             1672 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             1673 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             1674 ; 240  |
                             1675 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             1676 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             1677 ; 243  |
                             1678 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             1679 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             1680 ; 246  |
                             1681 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             1682 ; 248  |
                             1683 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             1684 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             1685 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             1686 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             1687 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             1688 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             1689 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             1690 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             1691 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             1692 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             1693 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             1694 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             1695 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             1696 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             1697 ; 263  |
                             1698 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             1699 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             1700 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             1701 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             1702 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             1703 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             1704 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             1705 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             1706 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             1707 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             1708 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             1709 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             1710 ; 276  |
                             1711 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             1712 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1713 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             1714 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             1715 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             1716 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             1717 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             1718 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             1719 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             1720 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             1721 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             1722 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             1723 ; 289  |
                             1724 ; 290  |
                             1725 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             1726 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             1727 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             1728 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             1729 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             1730 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             1731 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             1732 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             1733 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             1734 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             1735 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             1736 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             1737 ; 303  |
                             1738 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             1739 ; 305  |
                             1740 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             1741 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             1742 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             1743 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             1744 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1745 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             1746 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             1747 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             1748 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             1749 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             1750 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             1751 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             1752 ; 318  |
                             1753 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             1754 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1755 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             1756 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             1757 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             1758 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             1759 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             1760 ; 326  |
                             1761 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1762 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             1763 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             1764 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             1765 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             1766 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             1767 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             1768 ; 334  |
                             1769 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             1770 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             1771 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             1772 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             1773 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             1774 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             1775 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             1776 ; 342  |
                             1777 ; 343  |
                             1778 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             1779 ; 345  |
                             1780 ; 346  |
                             1781 ; 347  |
                             1782 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             1783 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             1784 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             1785 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             1786 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             1787 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             1788 ; 354  |
                             1789 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             1790 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             1791 ; 357  |
                             1792 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             1793 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             1794 ; 360  |
                             1795 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             1796 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             1797 ; 363  |
                             1798 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             1799 ; 365  |
                             1800 ; 366  |
                             1801 ; 367  |
                             1802 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             1803 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             1804 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             1805 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             1806 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1807 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             1808 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             1809 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             1810 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             1811 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             1812 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             1813 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             1814 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             1815 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             1816 ; 382  |
                             1817 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             1818 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             1819 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             1820 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             1821 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             1822 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             1823 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             1824 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             1825 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             1826 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             1827 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             1828 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             1829 ; 395  |
                             1830 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             1831 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             1832 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             1833 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             1834 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             1835 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             1836 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             1837 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             1838 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             1839 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             1840 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             1841 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             1842 ; 408  |
                             1843 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             1844 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             1845 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             1846 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             1847 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             1848 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             1849 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             1850 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             1851 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             1852 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             1853 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             1854 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             1855 ; 421  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1856 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             1857 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1858 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1859 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1860 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1861 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1862 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1863 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1864 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1865 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             1866 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             1867 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             1868 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             1869 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             1870 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             1871 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             1872 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             1873 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             1874 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             1875 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             1876 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             1877 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             1878 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             1879 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             1880 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             1881 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             1882 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             1883 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             1884 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             1885 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             1886 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             1887 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             1888 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             1889 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             1890 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             1891 ; 457  |
                             1892 ; 458  |//Needed by button.asm
                             1893 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             1894 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             1895 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             1896 ; 462  |
                             1897 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1898 ; 464  |
                             1899 ; 465  |#endif
                             1900 ; 466  |
                             1901 ; 467  |
                             1902 
                             1904 
                             1905 ; 13   |
                             1906 ; 14   |// Variables
                             1907 ; 15   |extern WORD LowResAdcStatus;
                             1908 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      //
                                   Results and Averages come from buttons.asm
                             1909 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1910 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      //
                                   Aux2 result and average valid for 3500
                             1911 ; 19   |
                             1912 ; 20   |
                             1913 ; 21   |// Types
                             1914 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                  
                                    // AUX2 valid for 3500
                             1915 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                             1916 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                             1917 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                             1918 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                             1919 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                             1920 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                             1921 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                             1922 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                             1923 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                             1924 ; 32   |                      };
                             1925 ; 33   |
                             1926 ; 34   |
                             1927 ; 35   |// ADC Reference resolutions in mV*10
                             1928 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on select
                                  ed LRADC reference.
                             1929 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                             1930 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                             1931 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                             1932 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                             1933 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                             1934 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                             1935 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                             1936 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                             1937 ; 45   |
                             1938 ; 46   |
                             1939 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in button
                                  s routine
                             1940 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                             1941 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                             1942 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                             1943 ; 51   |
                             1944 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                             1945 ; 53   |//
                             1946 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                             1947 ; 55   |//
                             1948 ; 56   |//   Type:          Function 
                             1949 ; 57   |//
                             1950 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel spe
                                  cified
                             1951 ; 59   |//
                             1952 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             1953 ; 61   |//                  BATT for Battery channel
                             1954 ; 62   |//                  AUX for Auxiliary channel 1
                             1955 ; 63   |//                  AUX2 for Auxiliary channel 2
                             1956 ; 64   |//
                             1957 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             1958 ; 66   |//
                             1959 ; 67   |//   Notes:         none
                             1960 ; 68   |//<
                             1961 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             1962 ; 70   |#ifdef DEVICE_3500
                             1963 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX 
                                  ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                             1964 ; 72   |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1965 ; 73   |//3410 does not support AUX2
                             1966 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW
                                  _LRADC_RES.B.AUXLRR: 0))
                             1967 ; 75   |#endif
                             1968 ; 76   |
                             1969 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                             1970 ; 78   |//
                             1971 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                             1972 ; 80   |//
                             1973 ; 81   |//   Type:          Function 
                             1974 ; 82   |//
                             1975 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                             1976 ; 84   |//
                             1977 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             1978 ; 86   |//                  BATT for Battery channel
                             1979 ; 87   |//                  AUX for Auxiliary channel 1
                             1980 ; 88   |//                  AUX2 for Auxiliary channel 2
                             1981 ; 89   |//
                             1982 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             1983 ; 91   |//
                             1984 ; 92   |//   Notes:         The average is done using 256 samples
                             1985 ; 93   |//<
                             1986 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             1987 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResA
                                  dcAuxAvg : LowResAdcAux2Avg))
                             1988 ; 96   |
                             1989 ; 97   |// Functions  
                             1990 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr P
                                  ower, enum LowResADCRef Ref);
                             1991 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                             1992 ; 100  |
                             1993 ; 101  |// Equates
                             1994 ; 102  |#define AVERAGE_RESULT  TRUE
                             1995 ; 103  |#define INSTANT_RESULT  FALSE
                             1996 ; 104  |
                             1997 ; 105  |#endif // _LOWRESOLUTIONADC_H
                             1998 
                             2000 
                             2001 ; 18   |
                             2002 ; 19   |#include "liion.h"
                             2003 
                             2005 
                             2006 ; 1    |#ifndef __LIION_H
                             2007 ; 2    |#define __LIION_H
                             2008 ; 3    |
                             2009 ; 4    |#define LIION_BATTERY_VOLTAGE_4_2 4200
                             2010 ; 5    |#define LIION_BATTERY_VOLTAGE_4_1 4100
                             2011 ; 6    |
                             2012 ; 7    |
                             2013 ; 8    |#define LIION_UNKNOWN               0
                             2014 ; 9    |#define LIION_CONDITIONING          1
                             2015 ; 10   |#define LIION_CHARGING              2
                             2016 ; 11   |#define LIION_WAITING_FOR_FINISH    3
                             2017 ; 12   |#define LIION_CHARGED               4
                             2018 ; 13   |
                             2019 ; 14   |#endif
                             2020 
                             2022 
                             2023 ; 20   |#include "battery_config.h"
                             2024 
                             2026 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2027 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2028 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             2029 ; 3    |// Filename: battery_config.h
                             2030 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             2031 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             2032 ; 6    |
                             2033 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             2034 ; 8    |    //these are 3500 only
                             2035 ; 9    |    #define VBATT_REF           REF_5120MV
                             2036 ; 10   |    #define VBATT_MIN_MV        3000
                             2037 ; 11   |    #define VBATT_MAX_MV        4200
                             2038 ; 12   |
                             2039 ; 13   |    #define VBATT_BO_MV         3000
                             2040 ; 14   |
                             2041 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             2042 ; 16   |
                             2043 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             2044 ; 18   |    //this is in mV
                             2045 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             2046 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             2047 ; 21   |    #endif 
                             2048 ; 22   |
                             2049 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             2050 ; 24   |    //This is in millivolts
                             2051 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             2052 ; 26   |    #endif
                             2053 ; 27   |
                             2054 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             2055 ; 29   |    //This is in mA.   
                             2056 ; 30   |    //Refer to the battery data sheet for the proper value
                             2057 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             2058 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             2059 ; 33   |    #endif 
                             2060 ; 34   |
                             2061 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             2062 ; 36   |    //the default is 4 hours
                             2063 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             2064 ; 38   |    #endif 
                             2065 ; 39   |
                             2066 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             2067 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             2068 ; 42   |    //charging on and off is 20 mV
                             2069 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             2070 ; 44   |    #endif 
                             2071 ; 45   |
                             2072 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             2073 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             2074 ; 48   |    //differential threshhold.  
                             2075 ; 49   |
                             2076 ; 50   |#ifdef STMP_BUILD_PLAYER
                             2077 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             2078 ; 52   |#else
                             2079 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             2080 ; 54   |#endif
                             2081 ; 55   |    #endif 
                             2082 ; 56   |
                             2083 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             2084 ; 58   |    //This is in mA.   
                             2085 ; 59   |    //Refer to the battery data sheet for the proper value
                             2086 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2087 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             2088 ; 62   |    #endif 
                             2089 ; 63   |
                             2090 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             2091 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             2092 ; 66   |    //in this case, 2 minutes (was 30)
                             2093 ; 67   |#ifdef STMP_BUILD_PLAYER
                             2094 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             2095 ; 69   |#else
                             2096 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             2097 ; 71   |#endif
                             2098 ; 72   |    #endif
                             2099 ; 73   |
                             2100 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             2101 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             2102 ; 76   |#ifdef STMP_BUILD_PLAYER
                             2103 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             2104 ; 78   |#else
                             2105 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             2106 ; 80   |#endif
                             2107 ; 81   |        #endif
                             2108 ; 82   |#endif
                             2109 ; 83   |
                             2110 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             2111 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             2112 ; 86   |    #define ONE  1
                             2113 ; 87   |    #define ZERO 0
                             2114 ; 88   |
                             2115 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             2116 ; 90   |#ifdef STMP_BUILD_PLAYER
                             2117 ; 91   |    #define VBATT_REF          REF_2700MV
                             2118 ; 92   |    #define VBATT_MIN_MV       900
                             2119 ; 93   |    #define VBATT_MAX_MV       1500
                             2120 ; 94   |    #define VBATT_BO_MV        840
                             2121 ; 95   |#else
                             2122 ; 96   |    #define VBATT_REF          REF_5120MV
                             2123 ; 97   |    #define VBATT_MIN_MV       900
                             2124 ; 98   |    #define VBATT_MAX_MV       1200
                             2125 ; 99   |    #define VBATT_BO_MV        850
                             2126 ; 100  |#endif
                             2127 ; 101  |
                             2128 ; 102  |    #ifdef DEVICE_3500
                             2129 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             2130 ; 104  |    #else
                             2131 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             2132 ; 106  |    #endif
                             2133 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             2134 ; 108  |    
                             2135 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             2136 ; 110  |    //Units: mV. This is the rated battery voltage.
                             2137 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             2138 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             2139 ; 113  |    #endif 
                             2140 ; 114  |
                             2141 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             2142 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             2143 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             2144 ; 118  |    #endif
                             2145 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2146 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             2147 ; 121  |
                             2148 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             2149 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             2150 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             2151 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             2152 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             2153 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             2154 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             2155 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             2156 ; 130  |
                             2157 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             2158 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                             2159 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             2160 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             2161 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                             2162 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             2163 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             2164 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             2165 ; 139  |    // GPIO Enable register number as GPIO function.
                             2166 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             2167 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             2168 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             2169 ; 143  |    // bit num to use with desired input pin above
                             2170 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             2171 ; 145  |    
                             2172 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             2173 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             2174 ; 148  |    //------- end batt case polarity detection
                             2175 ; 149  |
                             2176 ; 150  |    //------------------------------------
                             2177 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             2178 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             2179 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                             2180 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             2181 ; 155  |    #endif 
                             2182 ; 156  |    
                             2183 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             2184 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             2185 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
                             2186 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             2187 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             2188 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             2189 ; 163  |    #endif   
                             2190 ; 164  |    #ifndef
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2191 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             2192 ; 166  |    #endif
                             2193 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             2194 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             2195 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             2196 ; 170  |    //-------------------------------------
                             2197 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             2198 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             2199 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             2200 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             2201 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             2202 ; 176  |    #endif
                             2203 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             2204 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             2205 ; 179  |    #endif
                             2206 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             2207 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             2208 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             2209 ; 183  |    #endif
                             2210 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             2211 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             2212 ; 186  |    #endif
                             2213 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             2214 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             2215 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             2216 ; 190  |    #endif    
                             2217 ; 191  |    //-------------------------------------
                             2218 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             2219 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             2220 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             2221 ; 195  |    #endif      
                             2222 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             2223 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             2224 ; 198  |    //the charging in this case,                       n minutes
                             2225 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             2226 ; 200  |    #endif
                             2227 ; 201  |
                             2228 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             2229 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             2230 ; 204  |#ifdef STMP_BUILD_PLAYER
                             2231 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             2232 ; 206  |#else
                             2233 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             2234 ; 208  |#endif
                             2235 ; 209  |        #endif
                             2236 ; 210  |    
                             2237 ; 211  |#endif // BATTERY_TYPE_NIMH
                             2238 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             2239 ; 213  |
                             2240 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             2241 ; 215  |#ifdef STMP_BUILD_PLAYER
                             2242 ; 216  |    #define VBATT_REF          REF_2700MV
                             2243 ; 217  |    #define VBATT_MIN_MV       900
                             2244 ; 218  |    #define VBATT_MAX_MV       1500
                             2245 ; 219  |    #define VBATT_BO_MV        840
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2246 ; 220  |#else
                             2247 ; 221  |    #define VBATT_REF          REF_5120MV
                             2248 ; 222  |    #define VBATT_MIN_MV       900
                             2249 ; 223  |    #define VBATT_MAX_MV       1500
                             2250 ; 224  |    #define VBATT_BO_MV        850
                             2251 ; 225  |#endif
                             2252 ; 226  |
                             2253 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             2254 ; 228  |    
                             2255 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             2256 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             2257 ; 231  |#endif 
                             2258 
                             2260 
                             2261 ; 21   |
                             2262 ; 22   |
                             2263 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             2264 ; 24   |// Variables
                             2265 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             2266 ; 26   |
                             2267 ; 27   |#ifndef STMP_BUILD_PLAYER
                             2268 ; 28   |DWORD g_ChargeTimes=0;
                             2269 
                             2270 
Y:0000                       2271         org     y,".ydataliion",init:
                             2272 Fg_ChargeTimes:
Y:0000 000000 000000         2273         dc      $000000,$000000
                             2276 
                             2277 ; 29   |#define MAX_CHARGE_TIMES 600*60*4
                             2278 ; 30   |#endif
                             2279 ; 31   |
                             2280 ; 32   |DWORD g_dwLiIonTimeOut=0;
                             2281 
                             2282 Fg_dwLiIonTimeOut:
Y:0002 000000 000000         2283         dc      $000000,$000000
                             2286 
                             2287 ; 33   |WORD g_LiIonState = LIION_UNKNOWN;
                             2288 
                             2289 Fg_LiIonState:
Y:0004 000000                2290         dc      $000000
                             2293 
                             2294 ; 34   |
                             2295 ; 35   |WORD g_wVBatt_mV_Charging    =0;
                             2296 
                             2297 Fg_wVBatt_mV_Charging:
Y:0005 000000                2298         dc      $000000
                             2301 
                             2302 ; 36   |WORD g_wVBatt_mV_NotCharging =0;
                             2303 
                             2304 Fg_wVBatt_mV_NotCharging:
Y:0006 000000                2305         dc      $000000
                             2308 
                             2309 ; 37   |WORD g_iThreshholdcount = 0;
                             2310 
                             2311 Fg_iThreshholdcount:
Y:0007 000000                2312         dc      $000000
                             2315 
                             2316 ; 38   |BOOL g_bTrickleChargingNow = FALSE; // used by batterycharge.c and nimh.c. Here just a pla
                                  ceholder.
                             2317 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2318 Fg_bTrickleChargingNow:
Y:0008 000000                2319         dc      $000000
                             2322 
                             2323 ; 39   |////////////////////////////////////////////////////////////////////////////////
                             2324 ; 40   |// Code
                             2325 ; 41   |////////////////////////////////////////////////////////////////////////////////
                             2326 ; 42   |
                             2327 ; 43   |static void do_nothing(void) {      // This function is here to make the dang FUNCLET, bel
                                  ow, work right.
                             2328 
P:0000                       2329         org     p,".ptextliion":
                             2333 Fdo_nothing:
                             2334 
                             2335 ; 44   |                                    // Without this here, the compiler switches back to ".
                                  ptext..." as soon
                             2336 ; 45   |                                    // as it hits some code.  With this here, the "org p,"
                                  SYSFUNCLET_..._P"
                             2337 ; 46   |                                    // stays in effect.
                             2338 ; 47   |                                    // The function is declared "static" so that it's invi
                                  sible outside this file.
                             2339 ; 48   |  return;
                             2340 ; 49   |}
                             2341 
P:0000 00000C         4    4 2343         rts
                             2345 
                             2346 ; 50   |#ifdef MTP_BUILD                               
                             2347 ; 51   |#ifdef FUNCLET
                             2348 ; 52   |  #pragma asm
                             2349 ; 53   |    extern SysCallFunclet
                             2350 ; 54   |  #pragma endasm
                             2351 ; 55   |#endif    
                             2352 ; 56   |#endif    
                             2353 ; 57   |
                             2354 ; 58   |
                             2355 ; 59   |/////////////////////////////////////////////////////////////////////////////////////////
                             2356 ; 60   |//
                             2357 ; 61   |//>  Name:          BatteryChargeImplementatonGetCurrentLimit
                             2358 ; 62   |//
                             2359 ; 63   |//   Type:          Function 
                             2360 ; 64   |//
                             2361 ; 65   |//   Description:   Should evaluate whatever parameters are required and return a current
                             2362 ; 66   |//                  limit for the battery recharge circuitry.
                             2363 ; 67   |//
                             2364 ; 68   |//   Inputs:        none
                             2365 ; 69   |//
                             2366 ; 70   |//   Outputs:       current limit in milliamps
                             2367 ; 71   |//
                             2368 ; 72   |//   Notes:         
                             2369 ; 73   |//<
                             2370 ; 74   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2371 ; 75   |
                             2372 ; 76   |#ifdef MTP_BUILD                               
                             2373 ; 77   |#ifdef FUNCLET
                             2374 ; 78   |    #pragma asm
                             2375 ; 79   |        FBatteryChargeImplementatonGetCurrentLimit:
                             2376 ; 80   |
                             2377 ; 81   |        nolist
                             2378 ; 82   |        include "sysmacro.asm"
                             2379 ; 83   |        include "resource.inc"
                             2380 ; 84   |        list
                             2381 ; 85   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2382 ; 86   |        ;If using funclet, function will be executed via funclet kernel
                             2383 ; 87   |        CallFunclet RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATONGETCURRENTLIMIT
                             2384 ; 88   |
                             2385 ; 89   |        org p,"SYSFUNCLET_BatteryChargeImplementatonGetCurrentLimit_P":
                             2386 ; 90   |        dc      RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATONGETCURRENTLIMIT
                             2387 ; 91   |    #pragma endasm
                             2388 ; 92   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit_Funclet(void)
                             2389 ; 93   |#else
                             2390 ; 94   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void)
                             2391 ; 95   |#endif    
                             2392 ; 96   |#else   // Non-MTP Build
                             2393 ; 97   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void)
                             2394 ; 98   |#endif
                             2395 ; 99   |{
                             2396 
                             2401 FBatteryChargeImplementatonGetCurrentLimit:
P:0001 055F7C         2    6 2402         movec   ssh,y:(r7)+
P:0002 205F00         2    8 2405         move    (r7)+
                             2411 
                             2412 ; 100  |    WORD wVBatt_mV;
                             2413 ; 101  |    WORD wCurrentLimit = 0;
                             2414 
P:0003 260000         2   10 2416         move    #0,y0
P:0004 045FA0         2   12 2418         movec   m0,n7
P:0005 000000         2   14 2419         nop
P:0006 4E6F00         4   18 2420         move    y0,y:(r7+n7)
                             2423 
                             2424 ; 102  |
                             2425 ; 103  |    switch (g_LiIonState)
                             2426 
P:0007 5FF000 rrrrrr  3   21 2428         move    y:Fg_LiIonState,b
P:0009 56F400 000002  3   24 2429         move    #>2,a
P:000B 2B0000         2   26 2430         move    #0,b2
P:000C 56F40D 000003  3   29 2431         cmp     a,b     #>3,a
P:000E 0AF0AA rrrrrr  6   35 2432         jeq     L20
P:0010 56F40D 000001  3   38 2433         cmp     a,b     #>1,a
P:0012 0AF0AA rrrrrr  6   44 2434         jeq     L23
P:0014 20000D         2   46 2435         cmp     a,b
P:0015 0AF0A2 rrrrrr  6   52 2436         jne     L31
                             2437 
                             2438 ; 104  |    {
                             2439 ; 105  |    case LIION_CHARGED:
                             2440 ; 106  |        //nothing to do.
                             2441 ; 107  |        break;
                             2442 ; 108  |    case LIION_CONDITIONING:
                             2443 ; 109  |#ifdef STMP_BUILD_PLAYER
                             2444 ; 110  |        if(GetTime() > g_dwLiIonTimeOut)
                             2445 ; 111  |#else
                             2446 ; 112  |        if( g_ChargeTimes > MAX_CHARGE_TIMES )
                             2447 
P:0017 5FF000 rrrrrr  3   55 2449         move    y:Fg_ChargeTimes+1,b
P:0019 59F000 rrrrrr  3   58 2450         move    y:Fg_ChargeTimes,b0
P:001B 200013         2   60 2451         clr     a   
P:001C 50F400 023280  3   63 2452         move    #144000,a0
P:001E 2B0000         2   65 2453         move    #0,b2
P:001F 20000D         2   67 2454         cmp     a,b
P:0020 0AF0A7 rrrrrr  6   73 2455         jgt     L21
                             2456 
                             2457 ; 113  |#endif
                             2458 ; 114  |
                             2459 ; 115  |        {//we've sat conditioning the battery for too long, something must be wrong
                             2460 ; 116  |            BatteryChargeDisableCharging(TRUE);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2461 ; 117  |        }
                             2462 ; 118  |        else
                             2463 ; 119  |        {
                             2464 ; 120  |            if(g_wVBatt_mV_NotCharging > LIION_CONDITIONING_VOLTAGE_THRESHHOLD)
                             2465 
P:0022 5FF000 rrrrrr  3   76 2467         move    y:Fg_wVBatt_mV_NotCharging,b
P:0024 47F400 000BB8  3   79 2468         move    #3000,y1
P:0026 2B0000         2   81 2469         move    #0,b2
P:0027 20007D         2   83 2470         cmp     y1,b
P:0028 0AF0AF rrrrrr  6   89 2471         jle     L19
                             2472 
                             2473 ; 121  |            {
                             2474 ; 122  |                g_LiIonState = LIION_CHARGING;
                             2475 
P:002A 44F400 000002  3   92 2477         move    #>2,x0
P:002C 4C7000 rrrrrr  3   95 2478         move    x0,y:Fg_LiIonState
                             2479 
                             2480 ; 123  |            }
                             2481 
P:002E 0AF080 rrrrrr  6  101 2483         jmp     L31
                             2484 
                             2485 ; 124  |            else
                             2486 ; 125  |            {
                             2487 ; 126  |                wCurrentLimit = LIION_CONDITIONING_CURRENT_LIMIT;
                             2488 
P:0030 45F400 000028  3  104 2490 L19:    move    #>40,x1
P:0032 045FA0         2  106 2493         movec   m0,n7
P:0033 000000         2  108 2494         nop
P:0034 4D6F00         4  112 2495         move    x1,y:(r7+n7)
                             2498 
                             2499 ; 127  |            }
                             2500 ; 128  |        }
                             2501 ; 129  |        break;
                             2502 
P:0035 0AF080 rrrrrr  6  118 2504         jmp     L31
                             2505 
                             2506 ; 130  |    case LIION_CHARGING:
                             2507 ; 131  |#ifdef STMP_BUILD_PLAYER
                             2508 ; 132  |        if(GetTime() > g_dwLiIonTimeOut)
                             2509 ; 133  |#else
                             2510 ; 134  |        if( g_ChargeTimes > MAX_CHARGE_TIMES )
                             2511 
P:0037 5FF000 rrrrrr  3  121 2513 L20:    move    y:Fg_ChargeTimes+1,b
P:0039 59F000 rrrrrr  3  124 2514         move    y:Fg_ChargeTimes,b0
P:003B 200013         2  126 2515         clr     a   
P:003C 50F400 023280  3  129 2516         move    #144000,a0
P:003E 2B0000         2  131 2517         move    #0,b2
P:003F 20000D         2  133 2518         cmp     a,b
P:0040 0AF0AF rrrrrr  6  139 2519         jle     L22
                             2520 
                             2521 ; 135  |#endif
                             2522 ; 136  |        {//we've sat too long charging without reaching our threshhold, something must be 
                                  wrong.
                             2523 ; 137  |            BatteryChargeDisableCharging(TRUE);
                             2524 
P:0042 56F400 000001  3  142 2526 L21:    move    #>1,a
P:0044 0BF080 rrrrrr  6  148 2527         jsr     FBatteryChargeDisableCharging
                             2528 
                             2529 ; 138  |        }
                             2530 
P:0046 0AF080 rrrrrr  6  154 2532         jmp     L31
                             2533 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2534 ; 139  |        else
                             2535 ; 140  |        {
                             2536 ; 141  |            if(g_iThreshholdcount > LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT)
                             2537 
P:0048 5FF000 rrrrrr  3  157 2539 L22:    move    y:Fg_iThreshholdcount,b
P:004A 45F400 00000A  3  160 2540         move    #>10,x1
P:004C 2B0000         2  162 2541         move    #0,b2
P:004D 20006D         2  164 2542         cmp     x1,b
P:004E 0AF0AF rrrrrr  6  170 2543         jle     L26
                             2544 
                             2545 ; 142  |            {
                             2546 ; 143  |                g_LiIonState = LIION_WAITING_FOR_FINISH;
                             2547 ; 144  |                g_dwLiIonTimeOut = GetTime() + LIION_TOPOFF_TIMEOUT;
                             2548 ; 145  |            }
                             2549 ; 146  |            wCurrentLimit = LIION_CHARGING_CURRENT_LIMIT;
                             2550 
P:0050 0AF080 rrrrrr  6  176 2552         jmp     L24
                             2553 
                             2554 ; 147  |        }
                             2555 ; 148  |        break;
                             2556 ; 149  |    case LIION_WAITING_FOR_FINISH:
                             2557 ; 150  |#ifdef STMP_BUILD_PLAYER
                             2558 ; 151  |        if(GetTime() > g_dwLiIonTimeOut)
                             2559 ; 152  |#else
                             2560 ; 153  |        if( g_ChargeTimes > MAX_CHARGE_TIMES )
                             2561 
P:0052 5FF000 rrrrrr  3  179 2563 L23:    move    y:Fg_ChargeTimes+1,b
P:0054 59F000 rrrrrr  3  182 2564         move    y:Fg_ChargeTimes,b0
P:0056 200013         2  184 2565         clr     a   
P:0057 50F400 023280  3  187 2566         move    #144000,a0
P:0059 2B0000         2  189 2567         move    #0,b2
P:005A 20000D         2  191 2568         cmp     a,b
P:005B 0AF0AF rrrrrr  6  197 2569         jle     L26
                             2570 
                             2571 ; 154  |#endif
                             2572 ; 155  |        {
                             2573 ; 156  |            g_LiIonState = LIION_CHARGED;
                             2574 
P:005D 57F400 000004  3  200 2576         move    #>4,b
P:005F 5D7000 rrrrrr  3  203 2577         move    b1,y:Fg_LiIonState
                             2578 
                             2579 ; 157  |            BatteryChargeDisableCharging(FALSE);
                             2580 
P:0061 200013         2  205 2582         clr     a   
P:0062 0BF080 rrrrrr  6  211 2583         jsr     FBatteryChargeDisableCharging
                             2584 
                             2585 ; 158  |        }
                             2586 
P:0064 0AF080 rrrrrr  6  217 2588         jmp     L31
P:0066 56F400 000003  3  220 2590 L24:    move    #>3,a
P:0068 5C7000 rrrrrr  3  223 2591         move    a1,y:Fg_LiIonState
P:006A 0BF080 rrrrrr  6  229 2593         jsr     FGetTime
P:006C 270000         2  231 2594         move    #0,y1
P:006D 46F400 01D4C0  3  234 2595         move    #120000,y0
P:006F 200030         2  236 2596         add     y,a
P:0070 5C7000 rrrrrr  3  239 2597         move    a1,y:Fg_dwLiIonTimeOut+1
P:0072 587000 rrrrrr  3  242 2598         move    a0,y:Fg_dwLiIonTimeOut
                             2599 
                             2600 ; 159  |        else
                             2601 ; 160  |        {
                             2602 ; 161  |            wCurrentLimit = LIION_CHARGING_CURRENT_LIMIT;
                             2603 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0074 46F400 000190  3  245 2605 L26:    move    #400,y0
P:0076 045FA0         2  247 2608         movec   m0,n7
P:0077 000000         2  249 2609         nop
P:0078 4E6F00         4  253 2610         move    y0,y:(r7+n7)
                             2613 
                             2614 ; 162  |
                             2615 ; 163  |        }
                             2616 ; 164  |        break;
                             2617 ; 165  |    }
                             2618 ; 166  |    return wCurrentLimit;
                             2619 
P:0079 045FA0         2  255 2621 L31:    movec   m0,n7
P:007A 000000         2  257 2622         nop
P:007B 5EEF00         4  261 2623         move    y:(r7+n7),a
                             2626 
                             2627 ; 167  |}
                             2628 
P:007C 204F00         2  263 2630         move    (r7)+n7
P:007D 05FF7C         4  267 2632         movec   y:-(r7),ssh
P:007E 000000         2  269 2635         nop
P:007F 00000C         4  273 2636         rts
                             2639 
                             2640 ; 168  |
                             2641 ; 169  |#ifdef MTP_BUILD                               
                             2642 ; 170  |#ifdef FUNCLET
                             2643 ; 171  |    #pragma asm
                             2644 ; 172  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             2645 ; 173  |        org p,".ptextliion":
                             2646 ; 174  |   #pragma endasm
                             2647 ; 175  |#endif
                             2648 ; 176  |#endif
                             2649 ; 177  |
                             2650 ; 178  |
                             2651 ; 179  |/////////////////////////////////////////////////////////////////////////////////////////
                             2652 ; 180  |//
                             2653 ; 181  |//>  Name:          BatteryChargeImplementationInitialize
                             2654 ; 182  |//
                             2655 ; 183  |//   Type:          Function 
                             2656 ; 184  |//
                             2657 ; 185  |//   Description:   Initialize whatever state machine variables are required.  
                             2658 ; 186  |//
                             2659 ; 187  |//   Inputs:        none
                             2660 ; 188  |//
                             2661 ; 189  |//   Outputs:       current limit in milliamps
                             2662 ; 190  |//
                             2663 ; 191  |//   Notes:         
                             2664 ; 192  |//<
                             2665 ; 193  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2666 ; 194  |#ifdef MTP_BUILD                               
                             2667 ; 195  |#ifdef FUNCLET
                             2668 ; 196  |    #pragma asm
                             2669 ; 197  |        FBatteryChargeImplementationInitialize:
                             2670 ; 198  |
                             2671 ; 199  |        nolist
                             2672 ; 200  |        include "sysmacro.asm"
                             2673 ; 201  |        include "resource.inc"
                             2674 ; 202  |        list
                             2675 ; 203  |
                             2676 ; 204  |        ;If using funclet, function will be executed via funclet kernel
                             2677 ; 205  |        CallFunclet RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONINITIALIZE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2678 ; 206  |
                             2679 ; 207  |        org p,"SYSFUNCLET_BatteryChargeImplementationInitialize_P":
                             2680 ; 208  |        dc      RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONINITIALIZE
                             2681 ; 209  |    #pragma endasm
                             2682 ; 210  |_reentrant WORD BatteryChargeImplementationInitialize_Funclet(void)
                             2683 ; 211  |#else
                             2684 ; 212  |_reentrant WORD BatteryChargeImplementationInitialize(void)
                             2685 ; 213  |#endif    
                             2686 ; 214  |#else   // Non-MTP Build
                             2687 ; 215  |_reentrant WORD BatteryChargeImplementationInitialize(void)
                             2688 ; 216  |#endif
                             2689 ; 217  |{
                             2690 
                             2695 FBatteryChargeImplementationInitialize:
P:0080 055F7C         2  275 2696         movec   ssh,y:(r7)+
                             2701 
                             2702 ; 218  |    WORD wVBatt_mV;
                             2703 ; 219  |    
                             2704 ; 220  |    BatteryChargeImplementationSample(FALSE);
                             2705 
P:0081 200013         2  277 2707         clr     a   
P:0082 0BF080 rrrrrr  6  283 2708         jsr     FBatteryChargeImplementationSample
                             2709 
                             2710 ; 221  |    wVBatt_mV = g_wVBatt_mV_NotCharging;
                             2711 
P:0084 5FF000 rrrrrr  3  286 2713         move    y:Fg_wVBatt_mV_NotCharging,b
                             2715 
                             2716 ; 222  |    if(wVBatt_mV > LIION_CONDITIONING_VOLTAGE_THRESHHOLD)
                             2717 
P:0086 45F400 000BB8  3  289 2719         move    #3000,x1
P:0088 2B0000         2  291 2720         move    #0,b2
P:0089 20006D         2  293 2721         cmp     x1,b
P:008A 0AF0AF rrrrrr  6  299 2722         jle     L32
                             2723 
                             2724 ; 223  |    {//Are we above the 'conditioning' voltage?
                             2725 ; 224  |        g_LiIonState = LIION_CHARGING;
                             2726 
P:008C 290200         2  301 2728         move    #2,b0
P:008D 597000 rrrrrr  3  304 2730         move    b0,y:Fg_LiIonState
                             2731 
                             2732 ; 225  |    } 
                             2733 
P:008F 0AF080 rrrrrr  6  310 2735         jmp     L33
                             2736 
                             2737 ; 226  |    else
                             2738 ; 227  |    {   //lets condition.
                             2739 ; 228  |        g_LiIonState = LIION_CONDITIONING;
                             2740 
P:0091 280100         2  312 2742 L32:    move    #1,a0
P:0092 587000 rrrrrr  3  315 2743         move    a0,y:Fg_LiIonState
                             2744 
                             2745 ; 229  |    }
                             2746 ; 230  |#if (LIION_BATTERY_VOLTAGE == LIION_BATTERY_VOLTAGE_4_1)
                             2747 ; 231  |    HW_VDD5V_PWR_CHARGE.B.LI_TYPE=1
                             2748 ; 232  |#endif 
                             2749 ; 233  |    g_dwLiIonTimeOut = GetTime() + LIION_CHARGING_TIMEOUT;
                             2750 
P:0094 0BF080 rrrrrr  6  321 2752 L33:    jsr     FGetTime
P:0096 250000         2  323 2753         move    #0,x1
P:0097 44F400 DBBA00  3  326 2754         move    #$DBBA00,x0
P:0099 200020         2  328 2755         add     x,a
P:009A 5C7000 rrrrrr  3  331 2756         move    a1,y:Fg_dwLiIonTimeOut+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
P:009C 587000 rrrrrr  3  334 2757         move    a0,y:Fg_dwLiIonTimeOut
                             2758 
                             2759 ; 234  |
                             2760 ; 235  |#ifndef STMP_BUILD_PLAYER
                             2761 ; 236  |    g_ChargeTimes=0;
                             2762 
P:009E 240000         2  336 2764         move    #0,x0
P:009F 4D7000 rrrrrr  3  339 2765         move    x1,y:Fg_ChargeTimes+1
P:00A1 4C7000 rrrrrr  3  342 2766         move    x0,y:Fg_ChargeTimes
                             2767 
                             2768 ; 237  |#endif
                             2769 ; 238  |
                             2770 ; 239  |    return SUCCESS;
                             2771 
P:00A3 200013         2  344 2773         clr     a   
                             2774 
                             2775 ; 240  |}
                             2776 
P:00A4 05FF7C         4  348 2778         movec   y:-(r7),ssh
P:00A5 000000         2  350 2781         nop
P:00A6 00000C         4  354 2782         rts
                             2784 
                             2785 ; 241  |
                             2786 ; 242  |#ifdef MTP_BUILD                               
                             2787 ; 243  |#ifdef FUNCLET
                             2788 ; 244  |    #pragma asm
                             2789 ; 245  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             2790 ; 246  |        org p,".ptextliion":
                             2791 ; 247  |   #pragma endasm
                             2792 ; 248  |#endif
                             2793 ; 249  |#endif
                             2794 ; 250  |
                             2795 ; 251  |
                             2796 ; 252  |/////////////////////////////////////////////////////////////////////////////////////////
                             2797 ; 253  |//
                             2798 ; 254  |//>  Name:          BatteryChargeImplementationSample
                             2799 ; 255  |//
                             2800 ; 256  |//   Type:          Function 
                             2801 ; 257  |//
                             2802 ; 258  |//   Description:   Samples the required bits   
                             2803 ; 259  |//
                             2804 ; 260  |//   Inputs:        none
                             2805 ; 261  |//
                             2806 ; 262  |//   Outputs:       current limit in milliamps
                             2807 ; 263  |//
                             2808 ; 264  |//   Notes:         
                             2809 ; 265  |//<
                             2810 ; 266  |/////////////////////////////////////////////////////////////////////////////////////////
                             2811 ; 267  |#ifdef MTP_BUILD                               
                             2812 ; 268  |#ifdef FUNCLET
                             2813 ; 269  |    #pragma asm
                             2814 ; 270  |        FBatteryChargeImplementationSample:
                             2815 ; 271  |
                             2816 ; 272  |        nolist
                             2817 ; 273  |        include "sysmacro.asm"
                             2818 ; 274  |        include "resource.inc"
                             2819 ; 275  |        list
                             2820 ; 276  |
                             2821 ; 277  |        ;If using funclet, function will be executed via funclet kernel
                             2822 ; 278  |        CallFunclet RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONSAMPLE
                             2823 ; 279  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2824 ; 280  |        org p,"SYSFUNCLET_BatteryChargeImplementationSample_P":
                             2825 ; 281  |        dc      RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONSAMPLE
                             2826 ; 282  |    #pragma endasm
                             2827 ; 283  |_reentrant void BatteryChargeImplementationSample_Funclet(BOOL bCharging)
                             2828 ; 284  |#else
                             2829 ; 285  |_reentrant void BatteryChargeImplementationSample(BOOL bCharging)
                             2830 ; 286  |#endif    
                             2831 ; 287  |#else   // Non-MTP Build
                             2832 ; 288  |_reentrant void BatteryChargeImplementationSample(BOOL bCharging)
                             2833 ; 289  |#endif
                             2834 ; 290  |{
                             2835 
                             2840 FBatteryChargeImplementationSample:
P:00A7 055F7C         2  356 2841         movec   ssh,y:(r7)+
P:00A8 205F00         2  358 2844         move    (r7)+
                             2850 
                             2851 ; 291  |    WORD mVBatt_mV=SysLowResolutionAdcReadVolt(BATT,FALSE);
                             2852 
P:00A9 045FA0         2  360 2854         movec   m0,n7
P:00AA 000000         2  362 2855         nop
P:00AB 5C6F00         4  366 2856         move    a1,y:(r7+n7)
P:00AC 200013         2  368 2859         clr     a   
P:00AD 20001B         2  370 2860         clr     b   
P:00AE 0BF080 rrrrrr  6  376 2861         jsr     FSysLowResolutionAdcReadVolt
                             2863 
                             2864 ; 292  |    if(bCharging)
                             2865 
P:00B0 045FA0         2  378 2867         movec   m0,n7
P:00B1 000000         2  380 2868         nop
P:00B2 5FEF00         4  384 2869         move    y:(r7+n7),b
P:00B3 2B0000         2  386 2870         move    #0,b2
P:00B4 20000B         2  388 2871         tst     b
P:00B5 0AF0AA rrrrrr  6  394 2874         jeq     L34
                             2875 
                             2876 ; 293  |        g_wVBatt_mV_Charging    = mVBatt_mV;
                             2877 
P:00B7 5C7000 rrrrrr  3  397 2879         move    a1,y:Fg_wVBatt_mV_Charging
P:00B9 0AF080 rrrrrr  6  403 2880         jmp     L37
                             2881 
                             2882 ; 294  |    else
                             2883 ; 295  |    {
                             2884 ; 296  |        g_wVBatt_mV_NotCharging = mVBatt_mV;
                             2885 
P:00BB 5C7000 rrrrrr  3  406 2887 L34:    move    a1,y:Fg_wVBatt_mV_NotCharging
                             2888 
                             2889 ; 297  |        if((g_wVBatt_mV_Charging - g_wVBatt_mV_NotCharging) <= LIION_CHARGING_DIFFERENTIAL
                                  _THRESHHOLD)
                             2890 
P:00BD 5FF000 rrrrrr  3  409 2892         move    y:Fg_wVBatt_mV_Charging,b
P:00BF 20001C         2  411 2894         sub     a,b
P:00C0 56F400 000014  3  414 2895         move    #>20,a
P:00C2 2B0000         2  416 2896         move    #0,b2
P:00C3 20000D         2  418 2897         cmp     a,b
P:00C4 0AF0A7 rrrrrr  6  424 2899         jgt     L35
                             2900 
                             2901 ; 298  |            g_iThreshholdcount++;
                             2902 
P:00C6 5EF000 rrrrrr  3  427 2904         move    y:Fg_iThreshholdcount,a
P:00C8 46F400 000001  3  430 2905         move    #>1,y0
P:00CA 200050         2  432 2906         add     y0,a
P:00CB 5C7000 rrrrrr  3  435 2907         move    a1,y:Fg_iThreshholdcount
P:00CD 0AF080 rrrrrr  6  441 2908         jmp     L37
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2909 
                             2910 ; 299  |        else
                             2911 ; 300  |            g_iThreshholdcount = 0;
                             2912 
P:00CF 270000         2  443 2914 L35:    move    #0,y1
P:00D0 4F7000 rrrrrr  3  446 2915         move    y1,y:Fg_iThreshholdcount
                             2916 
                             2917 ; 301  |    }
                             2918 
                             2920 L37:
                             2921 
                             2922 ; 302  |
                             2923 ; 303  |    
                             2924 ; 304  |}
                             2925 
P:00D2 205700         2  448 2927         move    (r7)-
P:00D3 05FF7C         4  452 2929         movec   y:-(r7),ssh
P:00D4 000000         2  454 2932         nop
P:00D5 00000C         4  458 2933         rts
                             2935 
                             2936 ; 305  |
                             2937 ; 306  |#ifdef MTP_BUILD                               
                             2938 ; 307  |#ifdef FUNCLET
                             2939 ; 308  |    #pragma asm
                             2940 ; 309  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             2941 ; 310  |        org p,".ptextliion":
                             2942 ; 311  |   #pragma endasm
                             2943 ; 312  |#endif
                             2944 ; 313  |#endif
                             2945 
                             2953 
                             2954         extern  FBatteryChargeDisableCharging, FGetTime
                             2955         extern  FSysLowResolutionAdcReadVolt
                             2956 
                             2957         global  FBatteryChargeImplementationInitialize
                             2958         global  FBatteryChargeImplementationSample
                             2959         global  FBatteryChargeImplementatonGetCurrentLimit, Fg_ChargeTimes
                             2960         global  Fg_LiIonState, Fg_bTrickleChargingNow, Fg_dwLiIonTimeOut
                             2961         global  Fg_iThreshholdcount, Fg_wVBatt_mV_Charging
                             2962         global  Fg_wVBatt_mV_NotCharging
                             2963 
                             2964         local   Fdo_nothing, L19, L20, L21, L22, L23, L24, L26, L31, L32
                             2965         local   L33, L34, L35, L37
                             2966 
                             2967         calls   "BatteryChargeImplementationInitialize", "BatteryChargeImplementationSample"
                             2968         calls   "BatteryChargeImplementationInitialize", "GetTime"
                             2969         calls   "BatteryChargeImplementationSample", "SysLowResolutionAdcReadVolt"
                             2970         calls   "BatteryChargeImplementatonGetCurrentLimit", "BatteryChargeDisableCharging"
                             2971         calls   "BatteryChargeImplementatonGetCurrentLimit", "GetTime"
                             2972 
