TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc8705bb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;  miscproject.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                               94 ; 3    |//
                               95 ; 4    |// Filename: miscproject.c
                               96 ; 5    |// Description: Misc Project-specific
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |//   Includes and external references
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |
                              103 ; 12   |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 13   |#include "project.h"
                              341 
                              343 
                              344 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              346 ; 3    |//  Filename: project.inc
                              347 ; 4    |//  Description: 
                              348 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 6    |
                              350 ; 7    |#if (!defined(_PROJECT_INC))
                              351 ; 8    |#define _PROJECT_INC 1
                              352 ; 9    |
                              353 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              354 ; 11   |#include "hwequ.h"
                              355 ; 12   |#else 
                              356 ; 13   |//include "regscodec.inc"
                              357 ; 14   |#endif
                              358 ; 15   |
                              359 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              360 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              361 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              362 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              363 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              364 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              365 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              366 ; 23   |
                              367 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              368 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              369 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              370 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              371 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              372 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              373 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              374 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              375 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              376 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              377 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              378 ; 35   |
                              379 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              380 ; 37   |// MEDIA DEFINITIONS
                              381 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              382 ; 39   |
                              383 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              384 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              385 ; 42   |#if defined(NAND1)
                              386 ; 43   |#define SM_INTERNAL_CHIPS 1
                              387 ; 44   |#else 
                              388 ; 45   |#if defined(NAND2)
                              389 ; 46   |#define SM_INTERNAL_CHIPS 2
                              390 ; 47   |#else 
                              391 ; 48   |#if defined(NAND3)
                              392 ; 49   |#define SM_INTERNAL_CHIPS 3
                              393 ; 50   |#else 
                              394 ; 51   |#if defined(NAND4)
                              395 ; 52   |#define SM_INTERNAL_CHIPS 4
                              396 ; 53   |#else 
                              397 ; 54   |#define SM_INTERNAL_CHIPS 1
                              398 ; 55   |#endif
                              399 ; 56   |#endif
                              400 ; 57   |#endif
                              401 ; 58   |#endif
                              402 ; 59   |
                              403 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              404 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              405 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              406 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              407 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              408 ; 65   |//*** comment out if active high ****
                              409 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              410 ; 67   |
                              411 ; 68   |#if defined(SMEDIA)
                              412 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              413 ; 70   |#define NUM_SM_EXTERNAL 1
                              414 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              415 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              416 ; 73   |#else 
                              417 ; 74   |#if defined(MMC)
                              418 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              419 ; 76   |#define NUM_SM_EXTERNAL 0
                              420 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              421 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              422 ; 79   |#else 
                              423 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              424 ; 81   |#define NUM_SM_EXTERNAL 0
                              425 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              426 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              427 ; 84   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              428 ; 85   |#endif
                              429 ; 86   |
                              430 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              431 ; 88   |// Mass Storage Class definitions
                              432 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              433 ; 90   |// Set to 0 if Composite Device build is desired.    
                              434 ; 91   |#define MULTI_LUN_BUILD 1   
                              435 ; 92   |
                              436 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              437 ; 94   |//  SCSI
                              438 ; 95   |#if (MULTI_LUN_BUILD==0)
                              439 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              440 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              441 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              442 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              443 ; 100  |  #else
                              444 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              445 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              446 ; 103  |  #endif
                              447 ; 104  |#else
                              448 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              449 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              450 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              451 ; 108  |  #else
                              452 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              453 ; 110  |  #endif
                              454 ; 111  |#endif
                              455 ; 112  |
                              456 ; 113  |
                              457 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              458 ; 115  |
                              459 ; 116  |
                              460 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              461 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              462 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              463 ; 120  |#ifdef MMC
                              464 ; 121  |#ifdef MTP_BUILD
                              465 ; 122  |// --------------------
                              466 ; 123  |// MTP and MMC
                              467 ; 124  |// --------------------
                              468 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              469 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              470 ; 127  |#else  // ifndef MTP_BUILD
                              471 ; 128  |#ifdef STMP_BUILD_PLAYER
                              472 ; 129  |// --------------------
                              473 ; 130  |// Player and MMC
                              474 ; 131  |// --------------------
                              475 ; 132  |#else
                              476 ; 133  |// --------------------
                              477 ; 134  |// USBMSC and MMC
                              478 ; 135  |// --------------------
                              479 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              480 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              481 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              482 ; 139  |#endif // ifdef MTP_BUILD
                              483 ; 140  |#else  // ifndef MMC
                              484 ; 141  |#ifdef MTP_BUILD
                              485 ; 142  |// --------------------
                              486 ; 143  |// MTP and NAND only
                              487 ; 144  |// --------------------
                              488 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              489 ; 146  |#define NUM_LOGICAL_DRIVES      7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              490 ; 147  |#else  // ifndef MTP_BUILD
                              491 ; 148  |#ifdef STMP_BUILD_PLAYER
                              492 ; 149  |// --------------------
                              493 ; 150  |// Player and NAND only
                              494 ; 151  |// --------------------
                              495 ; 152  |#else
                              496 ; 153  |// --------------------
                              497 ; 154  |// USBMSC and NAND only
                              498 ; 155  |// --------------------
                              499 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              500 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              501 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              502 ; 159  |#endif // ifdef MTP_BUILD
                              503 ; 160  |#endif // ifdef MMC 
                              504 ; 161  |
                              505 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              506 ; 163  |#if (defined(MTP_BUILD))
                              507 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              508 ; 165  |
                              509 ; 166  |////!
                              510 ; 167  |////! This varible holds the watchdog count for the store flush.
                              511 ; 168  |////!
                              512 ; 169  |///
                              513 ; 170  |#include <types.h>
                              514 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              515 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              516 ; 173  |#endif
                              517 ; 174  |
                              518 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              519 ; 176  |// These are needed here for Mass Storage Class
                              520 ; 177  |// Needs to be cleaned up
                              521 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              522 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              523 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              524 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              525 ; 182  |
                              526 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              527 ; 184  |
                              528 ; 185  |#endif
                              529 ; 186  |
                              530 ; 187  |
                              531 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              532 ; 189  |// SmartMedia/NAND defs
                              533 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              534 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              535 ; 192  |
                              536 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              537 ; 194  |// Sysloadresources defs
                              538 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              539 ; 196  |
                              540 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              541 ; 198  |// MMC defs
                              542 ; 199  |#define MMC_MAX_PARTITIONS 1
                              543 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              544 ; 201  |
                              545 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              546 ; 203  |// SPI defs
                              547 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              548 ; 205  |
                              549 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              550 ; 207  |// Global media defs
                              551 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              552 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              553 ; 210  |
                              554 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              555 ; 212  |// DO NOT CHANGE THESE!!!
                              556 ; 213  |#define SM_MAX_PARTITIONS 4
                              557 ; 214  |#define MAX_HANDLES 2
                              558 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              559 ; 216  |
                              560 ; 217  |
                              561 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              562 ; 219  |// Battery LRADC Values 
                              563 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              564 ; 221  |// brownout trip point in mV (moved by RS)
                              565 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              566 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              567 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              568 ; 225  |//     audio recording to media.
                              569 ; 226  |#define BATT_SAFETY_MARGIN 10
                              570 ; 227  |
                              571 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              572 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              573 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              574 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              575 ; 232  |
                              576 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              577 ; 234  |
                              578 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              579 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              580 ; 237  |#if (!defined(CLCD))
                              581 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              582 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              583 ; 240  |#else 
                              584 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              585 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              586 ; 243  |#endif
                              587 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              588 ; 245  |
                              589 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              590 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              591 ; 248  |// See mp3 encoder overlay.
                              592 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              593 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              594 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              595 ; 252  |
                              596 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              597 ; 254  |// Voice recording filenames
                              598 ; 255  |// number of digits in filename Vxxx.wav
                              599 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              600 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              601 ; 258  |
                              602 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              603 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              604 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              605 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              606 ; 263  |#if defined(DEVICE_3500)
                              607 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              608 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              609 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              610 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                              611 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              612 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              613 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              614 ; 271  |
                              615 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              616 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              617 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              618 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              619 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              620 ; 277  |
                              621 ; 278  |#else 
                              622 ; 279  |// STMP3410
                              623 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              624 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              625 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              626 ; 283  |#endif
                              627 ; 284  |
                              628 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              629 ; 286  |// Number of available soft timers
                              630 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              631 ; 288  |#if defined(SYNC_LYRICS)
                              632 ; 289  |#define SOFT_TIMERS 10
                              633 ; 290  |#else 
                              634 ; 291  |#if defined(JPEG_DECODER)
                              635 ; 292  |#define SOFT_TIMERS 10
                              636 ; 293  |#else 
                              637 ; 294  |#define SOFT_TIMERS 9
                              638 ; 295  |#endif
                              639 ; 296  |#endif
                              640 ; 297  |
                              641 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              642 ; 299  |//  sizes
                              643 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              644 ; 301  |#if defined(MMC)
                              645 ; 302  |#if defined(USE_PLAYLIST5)
                              646 ; 303  |#define MENU_STACK_SIZE 1500
                              647 ; 304  |#else 
                              648 ; 305  |#define MENU_STACK_SIZE 1250
                              649 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              650 ; 307  |#else 
                              651 ; 308  |#if defined(USE_PLAYLIST5)
                              652 ; 309  |#define MENU_STACK_SIZE 1500
                              653 ; 310  |#else 
                              654 ; 311  |#define MENU_STACK_SIZE 1250
                              655 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              656 ; 313  |#endif //if @def('MMC')
                              657 ; 314  |
                              658 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              659 ; 316  |// 
                              660 ; 317  |#define STACK_L1_SIZE 750
                              661 ; 318  |#define STACK_L2_SIZE 100
                              662 ; 319  |#define STACK_L3_SIZE 160
                              663 ; 320  |
                              664 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              665 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              666 ; 323  |// is ok with switching code.
                              667 ; 324  |#if defined(MTP_BUILD)
                              668 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              669 ; 326  |#endif
                              670 ; 327  |
                              671 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              672 ; 329  |// maximum number of nested funclets 
                              673 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              674 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              675 ; 332  |
                              676 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              677 ; 334  |//    LCD DEFINITIONS
                              678 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              679 ; 336  |
                              680 ; 337  |#define SPACE_CHAR 0x000020          
                              681 ; 338  |#define ZERO_CHAR 0x000030
                              682 ; 339  |#define COLON_CHAR 0x00003A
                              683 ; 340  |#define PERIOD_CHAR 0x00002E
                              684 ; 341  |
                              685 ; 342  |#if (defined(S6B33B0A_LCD))
                              686 ; 343  |#define LCD_X_SIZE 128
                              687 ; 344  |#define LCD_Y_SIZE 159
                              688 ; 345  |#endif
                              689 ; 346  |
                              690 ; 347  |#if (defined(SED15XX_LCD))
                              691 ; 348  |#define LCD_X_SIZE 128
                              692 ; 349  |#define LCD_Y_SIZE 64
                              693 ; 350  |#endif
                              694 ; 351  |
                              695 ; 352  |
                              696 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              697 ; 354  |//   Details on Customizing Contrast
                              698 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              699 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              700 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              701 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              702 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              703 ; 360  |//   unless the ezact sequence is remembered.
                              704 ; 361  |//   To find out what range your player supports: 
                              705 ; 362  |//   change these equs to full range or comment out (full range is default)
                              706 ; 363  |//;;;;;;
                              707 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              708 ; 365  |// recommended calibration using player -- uncomment 
                              709 ; 366  |//;;;;;;
                              710 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              711 ; 368  |////////////////////////////
                              712 ; 369  |#if (defined(DEMO_HW))
                              713 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              714 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              715 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              716 ; 373  |#else 
                              717 ; 374  |
                              718 ; 375  |#if (defined(S6B33B0A_LCD))
                              719 ; 376  |#define LCD_MAX_CONTRAST 210
                              720 ; 377  |#define LCD_MIN_CONTRAST 160    
                              721 ; 378  |#endif
                              722 ; 379  |
                              723 ; 380  |#if (defined(SED15XX_LCD))
                              724 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              725 ; 382  |// Engineering board regs support range [17-37].
                              726 ; 383  |//   Engineering board DC/DC support range [24-46]. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              727 ; 384  |//   One default contrast range [24-42] works for both.
                              728 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              729 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              730 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              731 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              732 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              733 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              734 ; 391  |
                              735 ; 392  |#if (defined(NEWSHINGYIH))
                              736 ; 393  |#define LCD_MAX_CONTRAST 250
                              737 ; 394  |#define LCD_MIN_CONTRAST 0
                              738 ; 395  |#else 
                              739 ; 396  |//-----
                              740 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              741 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              742 ; 399  |#define LCD_MAX_CONTRAST 250
                              743 ; 400  |#define LCD_MIN_CONTRAST 0
                              744 ; 401  |
                              745 ; 402  |//=====
                              746 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              747 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              748 ; 405  |//LCD_MAX_CONTRAST equ 42
                              749 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              750 ; 407  |
                              751 ; 408  |#endif
                              752 ; 409  |#endif
                              753 ; 410  |
                              754 ; 411  |#endif
                              755 ; 412  |
                              756 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              757 ; 414  |// The default value of the lcd contrast in % of range
                              758 ; 415  |//   the default value is used when no settings.dat is available
                              759 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              760 ; 417  |
                              761 ; 418  |#if (defined(S6B33B0A_LCD))
                              762 ; 419  |// 60% of range is default value
                              763 ; 420  |#define DEFAULT_CONTRAST 50 
                              764 ; 421  |#endif
                              765 ; 422  |
                              766 ; 423  |#if (defined(SED15XX_LCD))
                              767 ; 424  |// % of range is default value (was 60%)
                              768 ; 425  |#define DEFAULT_CONTRAST 50 
                              769 ; 426  |#endif
                              770 ; 427  |
                              771 ; 428  |
                              772 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              773 ; 430  |// make lower when doing calibration
                              774 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              775 ; 432  |
                              776 ; 433  |
                              777 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              778 ; 435  |// For FFWD and RWND
                              779 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              780 ; 437  |#define SECONDS_TO_SKIP 1
                              781 ; 438  |#define SECONDS_TO_SKIP1 3
                              782 ; 439  |#define SECONDS_TO_SKIP2 6
                              783 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              784 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              785 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              786 ; 443  |#define FIRST_TIME_BOUNDARY 15 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              787 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              788 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              789 ; 446  |
                              790 ; 447  |// For audible FFW/RWD
                              791 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              792 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              793 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              794 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              795 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              796 ; 453  |#define LEVEL1_BOUNDARY 17 
                              797 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              798 ; 455  |#define LEVEL2_BOUNDARY 33 
                              799 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              800 ; 457  |#define LEVEL3_BOUNDARY 50 
                              801 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              802 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              803 ; 460  |// Short Song Time, songs too short to play.
                              804 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              805 ; 462  |
                              806 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              807 ; 464  |// MP3 Sync Values
                              808 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              809 ; 466  |// # bytes to look for sync before marking it bad
                              810 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              811 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              812 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              813 ; 470  |// once we have sync'd, the isr should be called this frequently
                              814 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              815 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              816 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              817 ; 474  |
                              818 ; 475  |
                              819 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              820 ; 477  |//// Multi-Stage Volume Control Definitions
                              821 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              822 ; 479  |//// Use Multi-Stage Volume
                              823 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              824 ; 481  |
                              825 ; 482  |//// Master Volume definitions
                              826 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              827 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              828 ; 485  |
                              829 ; 486  |//// DAC-Mode definitions
                              830 ; 487  |//// Adjusts 0dB point
                              831 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              832 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              833 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              834 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              835 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              836 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              837 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              838 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              839 ; 496  |
                              840 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              841 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              842 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                              843 ; 500  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              844 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              845 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                              846 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              847 ; 504  |
                              848 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              849 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              850 ; 507  |
                              851 ; 508  |
                              852 ; 509  |//// Line In definitions (used for Line-In 1)
                              853 ; 510  |//// 0dB point of the Line In
                              854 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              855 ; 512  |//// Minimum volume of Line In
                              856 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              857 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              858 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              859 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              860 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              861 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              862 ; 519  |
                              863 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              864 ; 521  |//// 0dB point of the Line In
                              865 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              866 ; 523  |//// Minimum volume of Line In
                              867 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              868 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              869 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              870 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              871 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              872 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              873 ; 530  |
                              874 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              875 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              876 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              877 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              878 ; 535  |
                              879 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              880 ; 537  |////
                              881 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              882 ; 539  |////
                              883 ; 540  |///
                              884 ; 541  |#include <types.h>
                              885 
                              887 
                              888 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              889 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              890 ; 3    |//
                              891 ; 4    |// Filename: types.h
                              892 ; 5    |// Description: Standard data types
                              893 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              894 ; 7    |
                              895 ; 8    |#ifndef _TYPES_H
                              896 ; 9    |#define _TYPES_H
                              897 ; 10   |
                              898 ; 11   |// TODO:  move this outta here!
                              899 ; 12   |#if !defined(NOERROR)
                              900 ; 13   |#define NOERROR 0
                              901 ; 14   |#define SUCCESS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              902 ; 15   |#endif 
                              903 ; 16   |#if !defined(SUCCESS)
                              904 ; 17   |#define SUCCESS  0
                              905 ; 18   |#endif
                              906 ; 19   |#if !defined(ERROR)
                              907 ; 20   |#define ERROR   -1
                              908 ; 21   |#endif
                              909 ; 22   |#if !defined(FALSE)
                              910 ; 23   |#define FALSE 0
                              911 ; 24   |#endif
                              912 ; 25   |#if !defined(TRUE)
                              913 ; 26   |#define TRUE  1
                              914 ; 27   |#endif
                              915 ; 28   |
                              916 ; 29   |#if !defined(NULL)
                              917 ; 30   |#define NULL 0
                              918 ; 31   |#endif
                              919 ; 32   |
                              920 ; 33   |#define MAX_INT     0x7FFFFF
                              921 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              922 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              923 ; 36   |#define MAX_ULONG   (-1) 
                              924 ; 37   |
                              925 ; 38   |#define WORD_SIZE   24              // word size in bits
                              926 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              927 ; 40   |
                              928 ; 41   |
                              929 ; 42   |#define BYTE    unsigned char       // btVarName
                              930 ; 43   |#define CHAR    signed char         // cVarName
                              931 ; 44   |#define USHORT  unsigned short      // usVarName
                              932 ; 45   |#define SHORT   unsigned short      // sVarName
                              933 ; 46   |#define WORD    unsigned int        // wVarName
                              934 ; 47   |#define INT     signed int          // iVarName
                              935 ; 48   |#define DWORD   unsigned long       // dwVarName
                              936 ; 49   |#define LONG    signed long         // lVarName
                              937 ; 50   |#define BOOL    unsigned int        // bVarName
                              938 ; 51   |#define FRACT   _fract              // frVarName
                              939 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              940 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              941 ; 54   |#define FLOAT   float               // fVarName
                              942 ; 55   |#define DBL     double              // dVarName
                              943 ; 56   |#define ENUM    enum                // eVarName
                              944 ; 57   |#define CMX     _complex            // cmxVarName
                              945 ; 58   |typedef WORD UCS3;                   // 
                              946 ; 59   |
                              947 ; 60   |#define UINT16  unsigned short
                              948 ; 61   |#define UINT8   unsigned char   
                              949 ; 62   |#define UINT32  unsigned long
                              950 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              951 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              952 ; 65   |#define WCHAR   UINT16
                              953 ; 66   |
                              954 ; 67   |//UINT128 is 16 bytes or 6 words
                              955 ; 68   |typedef struct UINT128_3500 {   
                              956 ; 69   |    int val[6];     
                              957 ; 70   |} UINT128_3500;
                              958 ; 71   |
                              959 ; 72   |#define UINT128   UINT128_3500
                              960 ; 73   |
                              961 ; 74   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              962 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              963 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              964 ; 77   |// Little endian word packed byte strings:   
                              965 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              966 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              967 ; 80   |
                              968 ; 81   |// Declare Memory Spaces To Use When Coding
                              969 ; 82   |// A. Sector Buffers
                              970 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              971 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              972 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              973 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              974 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              975 ; 88   |// B. Media DDI Memory
                              976 ; 89   |#define MEDIA_DDI_MEM _Y
                              977 ; 90   |
                              978 ; 91   |
                              979 ; 92   |
                              980 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              981 ; 94   |// Examples of circular pointers:
                              982 ; 95   |//    INT CIRC cpiVarName
                              983 ; 96   |//    DWORD CIRC cpdwVarName
                              984 ; 97   |
                              985 ; 98   |#define RETCODE INT                 // rcVarName
                              986 ; 99   |
                              987 ; 100  |// generic bitfield structure
                              988 ; 101  |struct Bitfield {
                              989 ; 102  |    unsigned int B0  :1;
                              990 ; 103  |    unsigned int B1  :1;
                              991 ; 104  |    unsigned int B2  :1;
                              992 ; 105  |    unsigned int B3  :1;
                              993 ; 106  |    unsigned int B4  :1;
                              994 ; 107  |    unsigned int B5  :1;
                              995 ; 108  |    unsigned int B6  :1;
                              996 ; 109  |    unsigned int B7  :1;
                              997 ; 110  |    unsigned int B8  :1;
                              998 ; 111  |    unsigned int B9  :1;
                              999 ; 112  |    unsigned int B10 :1;
                             1000 ; 113  |    unsigned int B11 :1;
                             1001 ; 114  |    unsigned int B12 :1;
                             1002 ; 115  |    unsigned int B13 :1;
                             1003 ; 116  |    unsigned int B14 :1;
                             1004 ; 117  |    unsigned int B15 :1;
                             1005 ; 118  |    unsigned int B16 :1;
                             1006 ; 119  |    unsigned int B17 :1;
                             1007 ; 120  |    unsigned int B18 :1;
                             1008 ; 121  |    unsigned int B19 :1;
                             1009 ; 122  |    unsigned int B20 :1;
                             1010 ; 123  |    unsigned int B21 :1;
                             1011 ; 124  |    unsigned int B22 :1;
                             1012 ; 125  |    unsigned int B23 :1;
                             1013 ; 126  |};
                             1014 ; 127  |
                             1015 ; 128  |union BitInt {
                             1016 ; 129  |        struct Bitfield B;
                             1017 ; 130  |        int        I;
                             1018 ; 131  |};
                             1019 ; 132  |
                             1020 ; 133  |#define MAX_MSG_LENGTH 10
                             1021 ; 134  |struct CMessage
                             1022 ; 135  |{
                             1023 ; 136  |        unsigned int m_uLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1025 ; 138  |};
                             1026 ; 139  |
                             1027 ; 140  |typedef struct {
                             1028 ; 141  |    WORD m_wLength;
                             1029 ; 142  |    WORD m_wMessage;
                             1030 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1031 ; 144  |} Message;
                             1032 ; 145  |
                             1033 ; 146  |struct MessageQueueDescriptor
                             1034 ; 147  |{
                             1035 ; 148  |        int *m_pBase;
                             1036 ; 149  |        int m_iModulo;
                             1037 ; 150  |        int m_iSize;
                             1038 ; 151  |        int *m_pHead;
                             1039 ; 152  |        int *m_pTail;
                             1040 ; 153  |};
                             1041 ; 154  |
                             1042 ; 155  |struct ModuleEntry
                             1043 ; 156  |{
                             1044 ; 157  |    int m_iSignaledEventMask;
                             1045 ; 158  |    int m_iWaitEventMask;
                             1046 ; 159  |    int m_iResourceOfCode;
                             1047 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1048 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1049 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1050 ; 163  |    int m_uTimeOutHigh;
                             1051 ; 164  |    int m_uTimeOutLow;
                             1052 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1053 ; 166  |};
                             1054 ; 167  |
                             1055 ; 168  |union WaitMask{
                             1056 ; 169  |    struct B{
                             1057 ; 170  |        unsigned int m_bNone     :1;
                             1058 ; 171  |        unsigned int m_bMessage  :1;
                             1059 ; 172  |        unsigned int m_bTimer    :1;
                             1060 ; 173  |        unsigned int m_bButton   :1;
                             1061 ; 174  |    } B;
                             1062 ; 175  |    int I;
                             1063 ; 176  |} ;
                             1064 ; 177  |
                             1065 ; 178  |
                             1066 ; 179  |struct Button {
                             1067 ; 180  |        WORD wButtonEvent;
                             1068 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1069 ; 182  |};
                             1070 ; 183  |
                             1071 ; 184  |struct Message {
                             1072 ; 185  |        WORD wMsgLength;
                             1073 ; 186  |        WORD wMsgCommand;
                             1074 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1075 ; 188  |};
                             1076 ; 189  |
                             1077 ; 190  |union EventTypes {
                             1078 ; 191  |        struct CMessage msg;
                             1079 ; 192  |        struct Button Button ;
                             1080 ; 193  |        struct Message Message;
                             1081 ; 194  |};
                             1082 ; 195  |
                             1083 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1084 ; 197  |#define BUILD_TYPE_UPDATER  0x100
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1085 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1086 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1087 ; 200  |
                             1088 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1089 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1090 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1091 ; 204  |
                             1092 ; 205  |#if DEBUG
                             1093 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1094 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1095 ; 208  |#else 
                             1096 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1097 ; 210  |#define DebugBuildAssert(x)    
                             1098 ; 211  |#endif
                             1099 ; 212  |
                             1100 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1101 ; 214  |//  #pragma asm
                             1102 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1103 ; 216  |//  #pragma endasm
                             1104 ; 217  |
                             1105 ; 218  |
                             1106 ; 219  |#ifdef COLOR_262K
                             1107 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1108 ; 221  |#elif defined(COLOR_65K)
                             1109 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1110 ; 223  |#else
                             1111 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1112 ; 225  |#endif
                             1113 ; 226  |    
                             1114 ; 227  |#endif // #ifndef _TYPES_H
                             1115 
                             1117 
                             1118 ; 542  |extern volatile WORD g_wActivityState;
                             1119 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1120 ; 544  |
                             1121 ; 545  |void _reentrant Init5VSense(void);
                             1122 ; 546  |void _reentrant ServiceDCDC(void);
                             1123 ; 547  |
                             1124 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1125 ; 549  |//// JPEG Thumbnail Mode Setting
                             1126 ; 550  |//// number of column in thumbnail mode
                             1127 ; 551  |#define THUMBNAIL_X 2           
                             1128 ; 552  |//// number of row in  thumbnail mode
                             1129 ; 553  |#define THUMBNAIL_Y 2           
                             1130 ; 554  |//// thumbnail boundary offset x
                             1131 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1132 ; 556  |//// thumbnail boundary offset y
                             1133 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1134 ; 558  |
                             1135 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1136 ; 560  |
                             1137 
                             1139 
                             1140 ; 14   |#include "sysserialnumber.h"
                             1141 
                             1143 
                             1144 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1145 ; 2    |// Copyright(C) SigmaTel, Inc. 2002-2003
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1146 ; 3    |//
                             1147 ; 4    |// Filename: sysserialnumber.h
                             1148 ; 5    |// Description: 
                             1149 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1150 ; 7    |
                             1151 ; 8    |#ifndef _SYSSERIALNUMBER_H
                             1152 ; 9    |#define _SYSSERIALNUMBER_H
                             1153 ; 10   |
                             1154 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1155 ; 12   |// Definitions
                             1156 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1157 ; 14   |#define CHIP_ID_BYTES       (INT)8     // Currently 64 bits.
                             1158 ; 15   |#define CHIP_ID_DIGITS      (INT)(CHIP_ID_BYTES*2)
                             1159 ; 16   |#define CHIP_ID_LOOPS1      (INT)((CHIP_ID_DIGITS+5)/6)
                             1160 ; 17   |#define CHIP_ID_LOOPS2      (INT)(CHIP_ID_DIGITS/3)
                             1161 ; 18   |
                             1162 ; 19   |#define MMC_CARD_TYPE_SD_PSN_SIZE_BYTES 4
                             1163 ; 20   |#define MMC_CARD_TYPE_NONSD_SPEC14_SN_SIZE_BYTES 12
                             1164 ; 21   |#define MMC_CARD_TYPE_NONSD_SPEC20AND31_SN_SIZE_BYTES 4
                             1165 ; 22   |
                             1166 ; 23   |#define NUM_RAW_SERIAL_NUMBER_BYTES         8
                             1167 ; 24   |#define NUM_RAW_SERIAL_NUMBER_BYTES_NULL    10
                             1168 ; 25   |#define MAX_NUM_RAW_SERIAL_NUMBER_WORDS     7
                             1169 ; 26   |#define MAX_NUM_ASCII_SERIAL_NUMBER_WORDS (MMC_CARD_TYPE_NONSD_SPEC14_SN_SIZE_BYTES*2)
                             1170 ; 27   |
                             1171 ; 28   |
                             1172 ; 29   |///////////////////////////////////////////////////////////////////////////////
                             1173 ; 30   |// Error codes
                             1174 ; 31   |///////////////////////////////////////////////////////////////////////////////
                             1175 ; 32   |
                             1176 ; 33   |///////////////////////////////////////////////////////////////////////////////
                             1177 ; 34   |// Structure definitions
                             1178 ; 35   |///////////////////////////////////////////////////////////////////////////////
                             1179 ; 36   |typedef struct {
                             1180 ; 37   |    WORD wRawSizeInBytes;
                             1181 ; 38   |    WORD wAsciiSizeInBytes;
                             1182 ; 39   |    WORD wRaw[MAX_NUM_RAW_SERIAL_NUMBER_WORDS];
                             1183 ; 40   |    BYTE btAscii[MAX_NUM_ASCII_SERIAL_NUMBER_WORDS];
                             1184 ; 41   |} SERIAL_NUMBER, * P_SERIAL_NUMBER;
                             1185 ; 42   |
                             1186 ; 43   |///////////////////////////////////////////////////////////////////////////////
                             1187 ; 44   |// Prototypes
                             1188 ; 45   |///////////////////////////////////////////////////////////////////////////////
                             1189 ; 46   |
                             1190 ; 47   |RETCODE _reentrant ChipSerialNumberInit(void);
                             1191 ; 48   |RETCODE _reentrant InternalMediaSerialNumberInit(void);
                             1192 ; 49   |
                             1193 ; 50   |// The following two functions are project-specific and should be defined in
                             1194 ; 51   |//  the project/system/miscproject.c file
                             1195 ; 52   |RETCODE _reentrant SerialNumberEnableInit(void);
                             1196 ; 53   |BOOL _reentrant SerialNumbersEnabled(void);
                             1197 ; 54   |
                             1198 ; 55   |// The two helper functions below are driver-private and not part of the API. Shared with 
                                  MMC.
                             1199 ; 56   |RETCODE _reentrant ChipGetSerialNumber(WORD * pwBuffer);
                             1200 
                             1211 
                             1212 ; 57   |RETCODE _reentrant CreateNullSerialNumber(P_SERIAL_NUMBER pSerialNumber);
                             1213 ; 58   |WORD _reentrant ConvertHexToASCII(WORD wInHex);
                             1214 
                             1216 
                             1217 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1218 ; 60   |extern _Y SERIAL_NUMBER g_ChipSerialNumber;
                             1219 ; 61   |extern _Y SERIAL_NUMBER g_InternalMediaSerialNumber;
                             1220 ; 62   |extern SERIAL_NUMBER g_MmcSerialNumber;
                             1221 ; 63   |
                             1222 ; 64   |#endif // #ifndef _SYSSERIALNUMBER_H
                             1223 
                             1225 
                             1226 ; 15   |#include "regsicoll.h"
                             1227 
                             1229 
                             1230 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             1231 ; 2    |#define __REGS_ICOLL_INC 1
                             1232 ; 3    |
                             1233 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             1234 ; 5    |//  Interrupt Collector Registers
                             1235 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             1236 ; 7    |
                             1237 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             1238 ; 9    |
                             1239 ; 10   |
                             1240 ; 11   |
                             1241 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             1242 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             1243 ; 14   |
                             1244 ; 15   |typedef union
                             1245 ; 16   |{
                             1246 ; 17   |    struct {
                             1247 ; 18   |        int SEN0        :1;
                             1248 ; 19   |        int SEN1        :1;
                             1249 ; 20   |        int SEN2        :1;
                             1250 ; 21   |        int SEN3        :1;
                             1251 ; 22   |        int SEN4        :1;
                             1252 ; 23   |        int SEN5        :1;
                             1253 ; 24   |        int SEN6        :1;
                             1254 ; 25   |        int SEN7        :1;
                             1255 ; 26   |        int SEN8        :1;
                             1256 ; 27   |        int SEN9        :1;
                             1257 ; 28   |        int SEN10       :1;
                             1258 ; 29   |        int SEN11       :1;
                             1259 ; 30   |        int SEN12       :1;
                             1260 ; 31   |        int SEN13       :1;
                             1261 ; 32   |        int SEN14       :1;
                             1262 ; 33   |        int SEN15       :1;
                             1263 ; 34   |        int SEN16       :1;
                             1264 ; 35   |        int SEN17       :1;
                             1265 ; 36   |        int SEN18       :1;
                             1266 ; 37   |        int SEN19       :1;
                             1267 ; 38   |        int SEN20       :1;
                             1268 ; 39   |        int SEN21       :1;
                             1269 ; 40   |        int SEN22       :1;
                             1270 ; 41   |        int SEN23       :1;
                             1271 ; 42   |    } B;
                             1272 ; 43   |    int I;
                             1273 ; 44   |} iclenable0_type;
                             1274 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             1275 ; 46   |
                             1276 ; 47   |
                             1277 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             1278 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             1279 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             1280 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1281 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             1282 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             1283 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             1284 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             1285 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             1286 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             1287 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             1288 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             1289 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             1290 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             1291 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             1292 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             1293 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             1294 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             1295 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             1296 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             1297 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             1298 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             1299 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             1300 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             1301 ; 72   |
                             1302 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             1303 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             1304 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             1305 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             1306 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             1307 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             1308 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             1309 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             1310 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             1311 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             1312 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             1313 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             1314 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             1315 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             1316 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             1317 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             1318 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             1319 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             1320 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             1321 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             1322 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             1323 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             1324 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             1325 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             1326 ; 97   |
                             1327 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             1328 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             1329 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             1330 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             1331 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             1332 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             1333 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             1334 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             1335 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             1336 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             1337 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             1338 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             1339 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             1340 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             1341 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             1342 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1343 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             1344 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             1345 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             1346 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             1347 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             1348 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             1349 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             1350 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             1351 ; 122  |
                             1352 ; 123  |
                             1353 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1354 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             1355 ; 126  |typedef union
                             1356 ; 127  |{
                             1357 ; 128  |    struct {
                             1358 ; 129  |        
                             1359 ; 130  |        int SEN24       :1;
                             1360 ; 131  |        int SEN25       :1;
                             1361 ; 132  |        int SEN26       :1;
                             1362 ; 133  |        int SEN27       :1;
                             1363 ; 134  |        int SEN28       :1;
                             1364 ; 135  |        int SEN29       :1;
                             1365 ; 136  |        int SEN30       :1;
                             1366 ; 137  |        int SEN31       :1;
                             1367 ; 138  |        int SEN32       :1;
                             1368 ; 139  |        int SEN33       :1;
                             1369 ; 140  |    } B;
                             1370 ; 141  |    int I;
                             1371 ; 142  |} iclenable1_type;
                             1372 ; 143  |
                             1373 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             1374 ; 145  |
                             1375 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             1376 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             1377 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             1378 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             1379 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             1380 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             1381 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             1382 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             1383 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             1384 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             1385 ; 156  |
                             1386 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             1387 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             1388 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             1389 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             1390 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             1391 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             1392 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             1393 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             1394 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             1395 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             1396 ; 167  |
                             1397 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             1398 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             1399 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             1400 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             1401 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             1402 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             1403 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1404 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             1405 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             1406 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             1407 ; 178  |
                             1408 ; 179  |
                             1409 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             1410 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             1411 ; 182  |typedef union
                             1412 ; 183  |{
                             1413 ; 184  |    struct {
                             1414 ; 185  |        int SST0        :1;
                             1415 ; 186  |        int SST1        :1;
                             1416 ; 187  |        int SST2        :1;
                             1417 ; 188  |        int SST3        :1;
                             1418 ; 189  |        int SST4        :1;
                             1419 ; 190  |        int SST5        :1;
                             1420 ; 191  |        int SST6        :1;
                             1421 ; 192  |        int SST7        :1;
                             1422 ; 193  |        int SST8        :1;
                             1423 ; 194  |        int SST9        :1;
                             1424 ; 195  |        int SST10       :1;
                             1425 ; 196  |        int SST11       :1;
                             1426 ; 197  |        int SST12       :1;
                             1427 ; 198  |        int SST13       :1;
                             1428 ; 199  |        int SST14       :1;
                             1429 ; 200  |        int SST15       :1;
                             1430 ; 201  |        int SST16       :1;
                             1431 ; 202  |        int SST17       :1;
                             1432 ; 203  |        int SST18       :1;
                             1433 ; 204  |        int SST19       :1;
                             1434 ; 205  |        int SST20       :1;
                             1435 ; 206  |        int SST21       :1;
                             1436 ; 207  |        int SST22       :1;
                             1437 ; 208  |        int SST23       :1;
                             1438 ; 209  |    } B;
                             1439 ; 210  |    int I;
                             1440 ; 211  |} iclstatus0_type;
                             1441 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             1442 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             1443 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             1444 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             1445 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             1446 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             1447 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             1448 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             1449 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             1450 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             1451 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             1452 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             1453 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             1454 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             1455 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             1456 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             1457 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             1458 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             1459 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             1460 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             1461 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             1462 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             1463 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             1464 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1465 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             1466 ; 237  |
                             1467 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             1468 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             1469 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             1470 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             1471 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             1472 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             1473 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             1474 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             1475 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             1476 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             1477 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             1478 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             1479 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             1480 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             1481 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             1482 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             1483 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             1484 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             1485 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             1486 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             1487 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             1488 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             1489 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             1490 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             1491 ; 262  |
                             1492 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             1493 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             1494 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             1495 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             1496 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             1497 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             1498 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             1499 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             1500 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             1501 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             1502 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             1503 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             1504 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             1505 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             1506 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             1507 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             1508 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             1509 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             1510 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             1511 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             1512 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             1513 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             1514 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             1515 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             1516 ; 287  |
                             1517 ; 288  |
                             1518 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             1519 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             1520 ; 291  |typedef union
                             1521 ; 292  |{
                             1522 ; 293  |    struct {
                             1523 ; 294  |        int SST24       :1;
                             1524 ; 295  |        int SST25       :1;
                             1525 ; 296  |        int SST26       :1;
                             1526 ; 297  |        int SST27       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1527 ; 298  |        int SST28       :1;
                             1528 ; 299  |        int SST29       :1;
                             1529 ; 300  |        int SST30       :1;
                             1530 ; 301  |        int SST31       :1;
                             1531 ; 302  |        int SST32       :1;
                             1532 ; 303  |        int SST33       :1;
                             1533 ; 304  |    } B;
                             1534 ; 305  |    int I;
                             1535 ; 306  |} iclstatus1_type;
                             1536 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             1537 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             1538 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             1539 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             1540 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             1541 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             1542 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             1543 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             1544 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             1545 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             1546 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             1547 ; 318  |
                             1548 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             1549 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             1550 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             1551 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             1552 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             1553 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             1554 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             1555 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             1556 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             1557 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             1558 ; 329  |
                             1559 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             1560 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             1561 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             1562 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             1563 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             1564 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             1565 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             1566 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             1567 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             1568 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             1569 ; 340  |
                             1570 ; 341  |
                             1571 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             1572 ; 343  |//  Interrupt Collector Priority Defs
                             1573 ; 344  |typedef union
                             1574 ; 345  |{
                             1575 ; 346  |    struct {
                             1576 ; 347  |        unsigned S0P    :3;
                             1577 ; 348  |        unsigned S1P    :3;
                             1578 ; 349  |        unsigned S2P    :3;
                             1579 ; 350  |        unsigned S3P    :3;
                             1580 ; 351  |        unsigned S4P    :3;
                             1581 ; 352  |        unsigned S5P    :3;
                             1582 ; 353  |        unsigned S6P    :3;
                             1583 ; 354  |        unsigned S7P    :3;
                             1584 ; 355  |    } B;
                             1585 ; 356  |    int I;
                             1586 ; 357  |
                             1587 ; 358  |} iclprior0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1588 ; 359  |
                             1589 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             1590 ; 361  |
                             1591 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             1592 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             1593 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             1594 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             1595 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             1596 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             1597 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             1598 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             1599 ; 370  |
                             1600 ; 371  |
                             1601 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             1602 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             1603 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             1604 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             1605 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             1606 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             1607 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             1608 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             1609 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             1610 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             1611 ; 382  |
                             1612 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             1613 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             1614 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             1615 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             1616 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             1617 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             1618 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             1619 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             1620 ; 391  |
                             1621 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             1622 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             1623 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             1624 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             1625 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             1626 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             1627 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             1628 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             1629 ; 400  |
                             1630 ; 401  |
                             1631 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             1632 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             1633 ; 404  |typedef union
                             1634 ; 405  |{
                             1635 ; 406  |    struct {
                             1636 ; 407  |        unsigned S8P    :3;
                             1637 ; 408  |        unsigned S9P    :3;
                             1638 ; 409  |        unsigned S10P   :3;
                             1639 ; 410  |        unsigned S11P   :3;
                             1640 ; 411  |        unsigned S12P   :3;
                             1641 ; 412  |        unsigned S13P   :3;
                             1642 ; 413  |        unsigned S14P   :3;
                             1643 ; 414  |        unsigned S15P   :3;
                             1644 ; 415  |    } B;
                             1645 ; 416  |    int I;
                             1646 ; 417  |} iclprior1_type;
                             1647 ; 418  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1648 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             1649 ; 420  |
                             1650 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             1651 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             1652 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             1653 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             1654 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             1655 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             1656 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             1657 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             1658 ; 429  |
                             1659 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             1660 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             1661 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             1662 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             1663 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             1664 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             1665 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             1666 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             1667 ; 438  |
                             1668 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             1669 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             1670 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             1671 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             1672 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             1673 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             1674 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             1675 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             1676 ; 447  |
                             1677 ; 448  |
                             1678 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             1679 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             1680 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             1681 ; 452  |{
                             1682 ; 453  |    struct {
                             1683 ; 454  |        unsigned S16P   :3;
                             1684 ; 455  |        unsigned S17P   :3;
                             1685 ; 456  |        unsigned S18P   :3;
                             1686 ; 457  |        unsigned S19P   :3;
                             1687 ; 458  |        unsigned S20P   :3;
                             1688 ; 459  |        unsigned S21P   :3;
                             1689 ; 460  |        unsigned S22P   :3;
                             1690 ; 461  |        unsigned S23P   :3;
                             1691 ; 462  |    } B;
                             1692 ; 463  |    int I;
                             1693 ; 464  |} iclprior2_type;
                             1694 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             1695 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             1696 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             1697 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             1698 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             1699 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             1700 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             1701 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             1702 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             1703 ; 474  |
                             1704 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             1705 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             1706 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             1707 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1708 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             1709 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             1710 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             1711 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             1712 ; 483  |
                             1713 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             1714 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             1715 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             1716 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             1717 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             1718 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             1719 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             1720 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             1721 ; 492  |
                             1722 ; 493  |
                             1723 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             1724 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             1725 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             1726 ; 497  |{
                             1727 ; 498  |    struct {
                             1728 ; 499  |        unsigned S24P   :3;
                             1729 ; 500  |        unsigned S25P   :3;
                             1730 ; 501  |        unsigned S26P   :3;
                             1731 ; 502  |        unsigned S27P   :3;
                             1732 ; 503  |        unsigned S28P   :3;
                             1733 ; 504  |        unsigned S29P   :3;
                             1734 ; 505  |        unsigned S30P   :3;
                             1735 ; 506  |        unsigned S31P   :3;
                             1736 ; 507  |    } B;
                             1737 ; 508  |    int I;
                             1738 ; 509  |} iclprior3_type;
                             1739 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             1740 ; 511  |
                             1741 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             1742 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             1743 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             1744 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             1745 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             1746 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             1747 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             1748 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             1749 ; 520  |
                             1750 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             1751 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             1752 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             1753 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             1754 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             1755 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             1756 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             1757 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             1758 ; 529  |
                             1759 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             1760 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             1761 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             1762 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             1763 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             1764 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             1765 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             1766 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             1767 ; 538  |
                             1768 ; 539  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1769 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             1770 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             1771 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             1772 ; 543  |{
                             1773 ; 544  |    struct {
                             1774 ; 545  |        unsigned S32P   :3;
                             1775 ; 546  |        unsigned S33P   :3;
                             1776 ; 547  |    } B;
                             1777 ; 548  |    int I;
                             1778 ; 549  |} iclprior4_type;
                             1779 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             1780 ; 551  |
                             1781 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             1782 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             1783 ; 554  |
                             1784 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             1785 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             1786 ; 557  |
                             1787 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             1788 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             1789 ; 560  |
                             1790 ; 561  |
                             1791 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             1792 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             1793 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             1794 ; 565  |{
                             1795 ; 566  |    struct {
                             1796 ; 567  |        unsigned S0S    :2;
                             1797 ; 568  |        unsigned S1S    :2;
                             1798 ; 569  |        unsigned S2S    :2;
                             1799 ; 570  |        unsigned S3S    :2;
                             1800 ; 571  |        unsigned S4S    :2;
                             1801 ; 572  |        unsigned S5S    :2;
                             1802 ; 573  |        unsigned S6S    :2;
                             1803 ; 574  |        unsigned S7S    :2;
                             1804 ; 575  |        unsigned S8S    :2;
                             1805 ; 576  |        unsigned S9S    :2;
                             1806 ; 577  |        unsigned S10S   :2;
                             1807 ; 578  |        unsigned S11S   :2;
                             1808 ; 579  |    } B;
                             1809 ; 580  |    int I;
                             1810 ; 581  |} iclsteer0_type;
                             1811 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             1812 ; 583  |
                             1813 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             1814 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             1815 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             1816 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             1817 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             1818 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             1819 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             1820 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             1821 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             1822 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             1823 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             1824 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             1825 ; 596  |
                             1826 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             1827 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             1828 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1829 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             1830 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             1831 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             1832 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             1833 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             1834 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             1835 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             1836 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             1837 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             1838 ; 609  |
                             1839 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             1840 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             1841 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             1842 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             1843 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             1844 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             1845 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             1846 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             1847 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             1848 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             1849 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             1850 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             1851 ; 622  |
                             1852 ; 623  |
                             1853 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             1854 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             1855 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             1856 ; 627  |{
                             1857 ; 628  |    struct {
                             1858 ; 629  |        unsigned S12S   :2;
                             1859 ; 630  |        unsigned S13S   :2;
                             1860 ; 631  |        unsigned S14S   :2;
                             1861 ; 632  |        unsigned S15S   :2;
                             1862 ; 633  |        unsigned S16S   :2;
                             1863 ; 634  |        unsigned S17S   :2;
                             1864 ; 635  |        unsigned S18S   :2;
                             1865 ; 636  |        unsigned S19S   :2;
                             1866 ; 637  |        unsigned S20S   :2;
                             1867 ; 638  |        unsigned S21S   :2;
                             1868 ; 639  |        unsigned S22S   :2;
                             1869 ; 640  |        unsigned S23S   :2;
                             1870 ; 641  |    } B;
                             1871 ; 642  |    int I;
                             1872 ; 643  |} iclsteer1_type;
                             1873 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             1874 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             1875 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             1876 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             1877 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             1878 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             1879 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             1880 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             1881 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             1882 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             1883 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             1884 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             1885 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             1886 ; 657  |
                             1887 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             1888 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             1889 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1890 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             1891 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             1892 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             1893 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             1894 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             1895 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             1896 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             1897 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             1898 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             1899 ; 670  |
                             1900 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             1901 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             1902 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             1903 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             1904 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             1905 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             1906 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             1907 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             1908 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             1909 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             1910 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             1911 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             1912 ; 683  |
                             1913 ; 684  |
                             1914 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             1915 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             1916 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             1917 ; 688  |{
                             1918 ; 689  |    struct {
                             1919 ; 690  |        unsigned S24S   :2;
                             1920 ; 691  |        unsigned S25S   :2;
                             1921 ; 692  |        unsigned S26S   :2;
                             1922 ; 693  |        unsigned S27S   :2;
                             1923 ; 694  |        unsigned S28S   :2;
                             1924 ; 695  |        unsigned S29S   :2;
                             1925 ; 696  |        unsigned S30S   :2;
                             1926 ; 697  |        unsigned S31S   :2;
                             1927 ; 698  |        unsigned S32S   :2;
                             1928 ; 699  |        unsigned S33S   :2;
                             1929 ; 700  |    } B;
                             1930 ; 701  |    int I;
                             1931 ; 702  |} iclsteer2_type;
                             1932 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             1933 ; 704  |
                             1934 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             1935 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             1936 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             1937 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             1938 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             1939 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             1940 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             1941 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             1942 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             1943 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             1944 ; 715  |
                             1945 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             1946 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             1947 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             1948 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             1949 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             1950 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1951 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             1952 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             1953 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             1954 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             1955 ; 726  |
                             1956 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             1957 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             1958 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             1959 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             1960 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             1961 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             1962 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             1963 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             1964 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             1965 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             1966 ; 737  |
                             1967 ; 738  |
                             1968 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             1969 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             1970 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             1971 ; 742  |{
                             1972 ; 743  |    struct {
                             1973 ; 744  |        int S0FV        :1;
                             1974 ; 745  |        int S1FV        :1;
                             1975 ; 746  |        int S2FV        :1;
                             1976 ; 747  |        int S3FV        :1;
                             1977 ; 748  |        int S4FV        :1;
                             1978 ; 749  |        int S5FV        :1;
                             1979 ; 750  |        int S6FV        :1;
                             1980 ; 751  |        int S7FV        :1;
                             1981 ; 752  |        int S8FV        :1;
                             1982 ; 753  |        int S9FV        :1;
                             1983 ; 754  |        int S10FV       :1;
                             1984 ; 755  |        int S11FV       :1;
                             1985 ; 756  |        int S12FV       :1;
                             1986 ; 757  |        int S13FV       :1;
                             1987 ; 758  |        int S14FV       :1;
                             1988 ; 759  |        int S15FV       :1;
                             1989 ; 760  |        int S16FV       :1;
                             1990 ; 761  |        int S17FV       :1;
                             1991 ; 762  |        int S18FV       :1;
                             1992 ; 763  |        int S19FV       :1;
                             1993 ; 764  |        int S20FV       :1;
                             1994 ; 765  |        int S21FV       :1;
                             1995 ; 766  |        int S22FV       :1;
                             1996 ; 767  |        int S23FV       :1;
                             1997 ; 768  |    } B;
                             1998 ; 769  |    int I;
                             1999 ; 770  |} iclforce0_type;
                             2000 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             2001 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             2002 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             2003 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             2004 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             2005 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             2006 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             2007 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             2008 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             2009 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             2010 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             2011 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2012 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             2013 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             2014 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             2015 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             2016 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             2017 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             2018 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             2019 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             2020 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             2021 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             2022 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             2023 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             2024 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             2025 ; 796  |
                             2026 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             2027 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             2028 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             2029 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             2030 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             2031 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             2032 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             2033 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             2034 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             2035 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             2036 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             2037 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             2038 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             2039 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             2040 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             2041 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             2042 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             2043 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             2044 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             2045 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             2046 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             2047 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             2048 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             2049 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             2050 ; 821  |
                             2051 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             2052 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             2053 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             2054 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             2055 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             2056 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             2057 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             2058 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             2059 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             2060 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             2061 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             2062 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             2063 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             2064 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             2065 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             2066 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             2067 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             2068 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             2069 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             2070 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             2071 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             2072 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             2073 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2074 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             2075 ; 846  |
                             2076 ; 847  |
                             2077 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             2078 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             2079 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             2080 ; 851  |{
                             2081 ; 852  |    struct {
                             2082 ; 853  |        int S24FV       :1;
                             2083 ; 854  |        int S25FV       :1;
                             2084 ; 855  |        int S26FV       :1;
                             2085 ; 856  |        int S27FV       :1;
                             2086 ; 857  |        int S28FV       :1;
                             2087 ; 858  |        int S29FV       :1;
                             2088 ; 859  |        int S30FV       :1;
                             2089 ; 860  |        int S31FV       :1;
                             2090 ; 861  |        int S32FV       :1;
                             2091 ; 862  |        int S33FV       :1;
                             2092 ; 863  |    } B;
                             2093 ; 864  |    int I;
                             2094 ; 865  |} iclforce1_type;
                             2095 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             2096 ; 867  |
                             2097 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             2098 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             2099 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             2100 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             2101 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             2102 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             2103 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             2104 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             2105 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             2106 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             2107 ; 878  |
                             2108 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             2109 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             2110 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             2111 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             2112 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             2113 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             2114 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             2115 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             2116 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             2117 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             2118 ; 889  |
                             2119 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             2120 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             2121 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             2122 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             2123 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             2124 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             2125 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             2126 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             2127 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             2128 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             2129 ; 900  |
                             2130 ; 901  |
                             2131 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             2132 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             2133 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             2134 ; 905  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2135 ; 906  |    struct {
                             2136 ; 907  |        int S0FE        :1;
                             2137 ; 908  |        int S1FE        :1;
                             2138 ; 909  |        int S2FE        :1;
                             2139 ; 910  |        int S3FE        :1;
                             2140 ; 911  |        int S4FE        :1;
                             2141 ; 912  |        int S5FE        :1;
                             2142 ; 913  |        int S6FE        :1;
                             2143 ; 914  |        int S7FE        :1;
                             2144 ; 915  |        int S8FE        :1;
                             2145 ; 916  |        int S9FE        :1;
                             2146 ; 917  |        int S10FE       :1;
                             2147 ; 918  |        int S11FE       :1;
                             2148 ; 919  |        int S12FE       :1;
                             2149 ; 920  |        int S13FE       :1;
                             2150 ; 921  |        int S14FE       :1;
                             2151 ; 922  |        int S15FE       :1;
                             2152 ; 923  |        int S16FE       :1;
                             2153 ; 924  |        int S17FE       :1;
                             2154 ; 925  |        int S18FE       :1;
                             2155 ; 926  |        int S19FE       :1;
                             2156 ; 927  |        int S20FE       :1;
                             2157 ; 928  |        int S21FE       :1;
                             2158 ; 929  |        int S22FE       :1;
                             2159 ; 930  |        int S23FE       :1;
                             2160 ; 931  |    } B;
                             2161 ; 932  |    int I;
                             2162 ; 933  |} iclfenable0_type;
                             2163 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             2164 ; 935  |
                             2165 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             2166 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             2167 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             2168 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             2169 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             2170 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             2171 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             2172 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             2173 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             2174 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             2175 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             2176 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             2177 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             2178 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             2179 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             2180 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             2181 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             2182 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             2183 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             2184 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             2185 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             2186 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             2187 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             2188 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             2189 ; 960  |
                             2190 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             2191 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             2192 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             2193 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             2194 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             2195 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2196 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             2197 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             2198 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             2199 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             2200 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             2201 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             2202 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             2203 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             2204 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             2205 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             2206 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             2207 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             2208 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             2209 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             2210 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             2211 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             2212 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             2213 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             2214 ; 985  |
                             2215 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             2216 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             2217 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             2218 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             2219 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             2220 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             2221 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             2222 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             2223 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             2224 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             2225 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             2226 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             2227 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             2228 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             2229 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             2230 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             2231 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             2232 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             2233 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             2234 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             2235 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             2236 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             2237 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             2238 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             2239 ; 1010 |
                             2240 ; 1011 |
                             2241 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             2242 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             2243 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             2244 ; 1015 |{
                             2245 ; 1016 |    struct {
                             2246 ; 1017 |        int S24FE       :1;
                             2247 ; 1018 |        int S25FE       :1;
                             2248 ; 1019 |        int S26FE       :1;
                             2249 ; 1020 |        int S27FE       :1;
                             2250 ; 1021 |        int S28FE       :1;
                             2251 ; 1022 |        int S29FE       :1;
                             2252 ; 1023 |        int S30FE       :1;
                             2253 ; 1024 |        int S31FE       :1;
                             2254 ; 1025 |        int S32FE       :1;
                             2255 ; 1026 |        int S33FE       :1;
                             2256 ; 1027 |    } B;
                             2257 ; 1028 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2258 ; 1029 |} iclfenable1_type;
                             2259 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             2260 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             2261 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             2262 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             2263 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             2264 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             2265 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             2266 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             2267 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             2268 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             2269 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             2270 ; 1041 |
                             2271 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             2272 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             2273 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             2274 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             2275 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             2276 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             2277 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             2278 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             2279 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             2280 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             2281 ; 1052 |
                             2282 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             2283 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             2284 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             2285 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             2286 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             2287 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             2288 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             2289 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             2290 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             2291 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             2292 ; 1063 |
                             2293 ; 1064 |
                             2294 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             2295 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             2296 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             2297 ; 1068 |{
                             2298 ; 1069 |    struct {
                             2299 ; 1070 |        unsigned RQ     :7;
                             2300 ; 1071 |        unsigned IVA    :7;
                             2301 ; 1072 |        unsigned IVB    :7;
                             2302 ; 1073 |    } B;
                             2303 ; 1074 |    int I;
                             2304 ; 1075 |} iclobsvz0_type;
                             2305 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             2306 ; 1077 |
                             2307 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             2308 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             2309 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             2310 ; 1081 |
                             2311 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             2312 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             2313 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             2314 ; 1085 |
                             2315 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             2316 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             2317 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2318 ; 1089 |
                             2319 ; 1090 |
                             2320 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             2321 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             2322 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             2323 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             2324 ; 1095 |
                             2325 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             2326 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             2327 ; 1098 |
                             2328 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             2329 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             2330 ; 1101 |
                             2331 ; 1102 |
                             2332 ; 1103 |
                             2333 ; 1104 |
                             2334 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             2335 ; 1106 |//  Interrupt Vectors
                             2336 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             2337 ; 1108 |// Reset Vector
                             2338 ; 1109 |#define HW_IVECRESET 0x0000           
                             2339 ; 1110 |// Stack Error
                             2340 ; 1111 |#define HW_IVECSTERR 0x0002           
                             2341 ; 1112 |// Trace
                             2342 ; 1113 |#define HW_IVECTRAC 0x0004           
                             2343 ; 1114 |// SWI
                             2344 ; 1115 |#define HW_IVECSWI 0x0006           
                             2345 ; 1116 |// ~IRQA
                             2346 ; 1117 |#define HW_IVECIRQA 0x0008           
                             2347 ; 1118 |// ~IRQB - BROWNOUT
                             2348 ; 1119 |#define HW_IVECIRQB 0x000A           
                             2349 ; 1120 |// Fatal Error
                             2350 ; 1121 |#define HW_IVECERROR 0x000C           
                             2351 ; 1122 |// SPI
                             2352 ; 1123 |#define HW_IVECSPI 0x000E           
                             2353 ; 1124 |// I2S TX Data Empty
                             2354 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             2355 ; 1126 |// I2S TX Underflow
                             2356 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             2357 ; 1128 |// I2S RX Data Full
                             2358 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             2359 ; 1130 |// I2S RX Overflow
                             2360 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             2361 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             2362 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             2363 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             2364 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             2365 ; 1136 |// GPIO1
                             2366 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             2367 ; 1138 |// GPIO2
                             2368 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             2369 ; 1140 |// GPIO0
                             2370 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             2371 ; 1142 |// TIMER0
                             2372 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             2373 ; 1144 |// TIMER1
                             2374 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             2375 ; 1146 |// TIMER2
                             2376 ; 1147 |#define HW_IVECTIMER2 0x002A           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2377 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             2378 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             2379 ; 1150 |// I2C RX Data Ready
                             2380 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             2381 ; 1152 |// I2C RX Overflow
                             2382 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             2383 ; 1154 |// I2C TX Data Empty
                             2384 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             2385 ; 1156 |// I2C TX Underflow
                             2386 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             2387 ; 1158 |// Illegal Instruction
                             2388 ; 1159 |#define HW_IVECILI 0x0038           
                             2389 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             2390 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             2391 ; 1162 |#define HW_IVECDACE 0x003C           
                             2392 ; 1163 |// DAC Underflow ISR
                             2393 ; 1164 |#define HW_IVECDACUF 0x003E           
                             2394 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             2395 ; 1166 |// ADC Full ISR
                             2396 ; 1167 |#define HW_IVECADCF 0x0042           
                             2397 ; 1168 |// ADC Overflow ISR
                             2398 ; 1169 |#define HW_IVECADCOF 0x0044           
                             2399 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             2400 ; 1171 |// TIMER3
                             2401 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             2402 ; 1173 |// GPIO3
                             2403 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             2404 ; 1175 |// SDRAM
                             2405 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             2406 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             2407 ; 1178 |// 5 volt power connected
                             2408 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             2409 ; 1180 |// USB Controller
                             2410 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             2411 ; 1182 |// USB Wakeup 
                             2412 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             2413 ; 1184 |// 5 volt power disconnected
                             2414 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             2415 ; 1186 |// enhanced SPI
                             2416 ; 1187 |#define HW_IVECESPI 0x0058           
                             2417 ; 1188 |// filter coprocessor
                             2418 ; 1189 |#define HW_IVECFILCO 0x005A           
                             2419 ; 1190 |// low res ADC #1
                             2420 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             2421 ; 1192 |// real time clock alarm
                             2422 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             2423 ; 1194 |// low res ADC #2
                             2424 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             2425 ; 1196 |// flash hardware ECC
                             2426 ; 1197 |#define HW_IVECHWECC 0x0062           
                             2427 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             2428 ; 1199 |// CDSYNC Interrupt
                             2429 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             2430 ; 1201 |// CDSYNC Exception
                             2431 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2432 ; 1203 |// RS
                             2433 ; 1204 |#define HW_IVECRS 0x006A           
                             2434 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             2435 ; 1206 |// Flash Done ISR
                             2436 ; 1207 |#define HW_IVECFD 0x006E           
                             2437 ; 1208 |// CompactFlash ISR
                             2438 ; 1209 |#define HW_IVECCF 0x0070           
                             2439 ; 1210 |// SmartMedia Timeout ISR
                             2440 ; 1211 |#define HW_IVECSMTO 0x0072           
                             2441 ; 1212 |// SmartMedia Invalid Programming
                             2442 ; 1213 |#define HW_IVECSMIP 0x0074           
                             2443 ; 1214 |// CompactFlash No Card ISR
                             2444 ; 1215 |#define HW_IVECCFNC 0x0076           
                             2445 ; 1216 |// CompactFlash Status Change ISR
                             2446 ; 1217 |#define HW_IVECCFSC 0x0078           
                             2447 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             2448 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             2449 ; 1220 |// CDI
                             2450 ; 1221 |#define HW_IVECCDI 0x007E           
                             2451 ; 1222 |
                             2452 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             2453 ; 1224 |//  Interrupt Vectors
                             2454 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             2455 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             2456 ; 1227 |#define VECTOR(address,isr) \ 
                             2457 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             2458 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             2459 ; 1230 |
                             2460 ; 1231 |
                             2461 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             2462 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             2463 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             2464 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             2465 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             2466 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             2467 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             2468 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             2469 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             2470 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             2471 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             2472 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             2473 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             2474 ; 1245 |
                             2475 ; 1246 |// Interrupt Disabled
                             2476 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             2477 ; 1248 |// Interrupt Priority Level 0
                             2478 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             2479 ; 1250 |// Interrupt Priority Level 1
                             2480 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             2481 ; 1252 |// Interrupt Priority Level 2
                             2482 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             2483 ; 1254 |
                             2484 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             2485 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             2486 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             2487 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             2488 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             2489 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             2490 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2491 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             2492 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             2493 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             2494 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             2495 ; 1266 |
                             2496 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             2497 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             2498 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             2499 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             2500 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             2501 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             2502 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             2503 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             2504 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             2505 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             2506 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             2507 ; 1278 |
                             2508 ; 1279 |// Interrupt Priority register
                             2509 ; 1280 |typedef union               
                             2510 ; 1281 |{
                             2511 ; 1282 |    struct {
                             2512 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             2513 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             2514 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             2515 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             2516 ; 1287 |        int                 :4; /* Reserved */
                             2517 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             2518 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             2519 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             2520 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             2521 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             2522 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             2523 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             2524 ; 1295 |    } B;
                             2525 ; 1296 |
                             2526 ; 1297 |    int I;
                             2527 ; 1298 |
                             2528 ; 1299 |} ipr_type;
                             2529 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             2530 ; 1301 |
                             2531 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             2532 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             2533 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2534 ; 1305 |
                             2535 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             2536 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             2537 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             2538 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             2539 ; 1310 |
                             2540 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             2541 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             2542 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             2543 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             2544 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             2545 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             2546 ; 1317 |
                             2547 ; 1318 |#endif
                             2548 ; 1319 |
                             2549 
                             2551 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2552 ; 16   |#include "regscodec.h"
                             2553 
                             2555 
                             2556 ; 1    |#if !(defined(regscodecinc))
                             2557 ; 2    |#define regscodecinc 1
                             2558 ; 3    |
                             2559 ; 4    |
                             2560 ; 5    |
                             2561 ; 6    |#include "types.h"
                             2562 
                             2564 
                             2565 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2566 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2567 ; 3    |//
                             2568 ; 4    |// Filename: types.h
                             2569 ; 5    |// Description: Standard data types
                             2570 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2571 ; 7    |
                             2572 ; 8    |#ifndef _TYPES_H
                             2573 ; 9    |#define _TYPES_H
                             2574 ; 10   |
                             2575 ; 11   |// TODO:  move this outta here!
                             2576 ; 12   |#if !defined(NOERROR)
                             2577 ; 13   |#define NOERROR 0
                             2578 ; 14   |#define SUCCESS 0
                             2579 ; 15   |#endif 
                             2580 ; 16   |#if !defined(SUCCESS)
                             2581 ; 17   |#define SUCCESS  0
                             2582 ; 18   |#endif
                             2583 ; 19   |#if !defined(ERROR)
                             2584 ; 20   |#define ERROR   -1
                             2585 ; 21   |#endif
                             2586 ; 22   |#if !defined(FALSE)
                             2587 ; 23   |#define FALSE 0
                             2588 ; 24   |#endif
                             2589 ; 25   |#if !defined(TRUE)
                             2590 ; 26   |#define TRUE  1
                             2591 ; 27   |#endif
                             2592 ; 28   |
                             2593 ; 29   |#if !defined(NULL)
                             2594 ; 30   |#define NULL 0
                             2595 ; 31   |#endif
                             2596 ; 32   |
                             2597 ; 33   |#define MAX_INT     0x7FFFFF
                             2598 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2599 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2600 ; 36   |#define MAX_ULONG   (-1) 
                             2601 ; 37   |
                             2602 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2603 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2604 ; 40   |
                             2605 ; 41   |
                             2606 ; 42   |#define BYTE    unsigned char       // btVarName
                             2607 ; 43   |#define CHAR    signed char         // cVarName
                             2608 ; 44   |#define USHORT  unsigned short      // usVarName
                             2609 ; 45   |#define SHORT   unsigned short      // sVarName
                             2610 ; 46   |#define WORD    unsigned int        // wVarName
                             2611 ; 47   |#define INT     signed int          // iVarName
                             2612 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2613 ; 49   |#define LONG    signed long         // lVarName
                             2614 ; 50   |#define BOOL    unsigned int        // bVarName
                             2615 ; 51   |#define FRACT   _fract              // frVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2616 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2617 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2618 ; 54   |#define FLOAT   float               // fVarName
                             2619 ; 55   |#define DBL     double              // dVarName
                             2620 ; 56   |#define ENUM    enum                // eVarName
                             2621 ; 57   |#define CMX     _complex            // cmxVarName
                             2622 ; 58   |typedef WORD UCS3;                   // 
                             2623 ; 59   |
                             2624 ; 60   |#define UINT16  unsigned short
                             2625 ; 61   |#define UINT8   unsigned char   
                             2626 ; 62   |#define UINT32  unsigned long
                             2627 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2628 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2629 ; 65   |#define WCHAR   UINT16
                             2630 ; 66   |
                             2631 ; 67   |//UINT128 is 16 bytes or 6 words
                             2632 ; 68   |typedef struct UINT128_3500 {   
                             2633 ; 69   |    int val[6];     
                             2634 ; 70   |} UINT128_3500;
                             2635 ; 71   |
                             2636 ; 72   |#define UINT128   UINT128_3500
                             2637 ; 73   |
                             2638 ; 74   |// Little endian word packed byte strings:   
                             2639 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2640 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2641 ; 77   |// Little endian word packed byte strings:   
                             2642 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2643 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2644 ; 80   |
                             2645 ; 81   |// Declare Memory Spaces To Use When Coding
                             2646 ; 82   |// A. Sector Buffers
                             2647 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2648 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2649 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2650 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2651 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2652 ; 88   |// B. Media DDI Memory
                             2653 ; 89   |#define MEDIA_DDI_MEM _Y
                             2654 ; 90   |
                             2655 ; 91   |
                             2656 ; 92   |
                             2657 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2658 ; 94   |// Examples of circular pointers:
                             2659 ; 95   |//    INT CIRC cpiVarName
                             2660 ; 96   |//    DWORD CIRC cpdwVarName
                             2661 ; 97   |
                             2662 ; 98   |#define RETCODE INT                 // rcVarName
                             2663 ; 99   |
                             2664 ; 100  |// generic bitfield structure
                             2665 ; 101  |struct Bitfield {
                             2666 ; 102  |    unsigned int B0  :1;
                             2667 ; 103  |    unsigned int B1  :1;
                             2668 ; 104  |    unsigned int B2  :1;
                             2669 ; 105  |    unsigned int B3  :1;
                             2670 ; 106  |    unsigned int B4  :1;
                             2671 ; 107  |    unsigned int B5  :1;
                             2672 ; 108  |    unsigned int B6  :1;
                             2673 ; 109  |    unsigned int B7  :1;
                             2674 ; 110  |    unsigned int B8  :1;
                             2675 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2676 ; 112  |    unsigned int B10 :1;
                             2677 ; 113  |    unsigned int B11 :1;
                             2678 ; 114  |    unsigned int B12 :1;
                             2679 ; 115  |    unsigned int B13 :1;
                             2680 ; 116  |    unsigned int B14 :1;
                             2681 ; 117  |    unsigned int B15 :1;
                             2682 ; 118  |    unsigned int B16 :1;
                             2683 ; 119  |    unsigned int B17 :1;
                             2684 ; 120  |    unsigned int B18 :1;
                             2685 ; 121  |    unsigned int B19 :1;
                             2686 ; 122  |    unsigned int B20 :1;
                             2687 ; 123  |    unsigned int B21 :1;
                             2688 ; 124  |    unsigned int B22 :1;
                             2689 ; 125  |    unsigned int B23 :1;
                             2690 ; 126  |};
                             2691 ; 127  |
                             2692 ; 128  |union BitInt {
                             2693 ; 129  |        struct Bitfield B;
                             2694 ; 130  |        int        I;
                             2695 ; 131  |};
                             2696 ; 132  |
                             2697 ; 133  |#define MAX_MSG_LENGTH 10
                             2698 ; 134  |struct CMessage
                             2699 ; 135  |{
                             2700 ; 136  |        unsigned int m_uLength;
                             2701 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2702 ; 138  |};
                             2703 ; 139  |
                             2704 ; 140  |typedef struct {
                             2705 ; 141  |    WORD m_wLength;
                             2706 ; 142  |    WORD m_wMessage;
                             2707 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2708 ; 144  |} Message;
                             2709 ; 145  |
                             2710 ; 146  |struct MessageQueueDescriptor
                             2711 ; 147  |{
                             2712 ; 148  |        int *m_pBase;
                             2713 ; 149  |        int m_iModulo;
                             2714 ; 150  |        int m_iSize;
                             2715 ; 151  |        int *m_pHead;
                             2716 ; 152  |        int *m_pTail;
                             2717 ; 153  |};
                             2718 ; 154  |
                             2719 ; 155  |struct ModuleEntry
                             2720 ; 156  |{
                             2721 ; 157  |    int m_iSignaledEventMask;
                             2722 ; 158  |    int m_iWaitEventMask;
                             2723 ; 159  |    int m_iResourceOfCode;
                             2724 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2725 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2726 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2727 ; 163  |    int m_uTimeOutHigh;
                             2728 ; 164  |    int m_uTimeOutLow;
                             2729 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2730 ; 166  |};
                             2731 ; 167  |
                             2732 ; 168  |union WaitMask{
                             2733 ; 169  |    struct B{
                             2734 ; 170  |        unsigned int m_bNone     :1;
                             2735 ; 171  |        unsigned int m_bMessage  :1;
                             2736 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2737 ; 173  |        unsigned int m_bButton   :1;
                             2738 ; 174  |    } B;
                             2739 ; 175  |    int I;
                             2740 ; 176  |} ;
                             2741 ; 177  |
                             2742 ; 178  |
                             2743 ; 179  |struct Button {
                             2744 ; 180  |        WORD wButtonEvent;
                             2745 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2746 ; 182  |};
                             2747 ; 183  |
                             2748 ; 184  |struct Message {
                             2749 ; 185  |        WORD wMsgLength;
                             2750 ; 186  |        WORD wMsgCommand;
                             2751 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2752 ; 188  |};
                             2753 ; 189  |
                             2754 ; 190  |union EventTypes {
                             2755 ; 191  |        struct CMessage msg;
                             2756 ; 192  |        struct Button Button ;
                             2757 ; 193  |        struct Message Message;
                             2758 ; 194  |};
                             2759 ; 195  |
                             2760 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2761 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2762 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2763 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2764 ; 200  |
                             2765 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2766 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2767 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2768 ; 204  |
                             2769 ; 205  |#if DEBUG
                             2770 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2771 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2772 ; 208  |#else 
                             2773 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2774 ; 210  |#define DebugBuildAssert(x)    
                             2775 ; 211  |#endif
                             2776 ; 212  |
                             2777 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2778 ; 214  |//  #pragma asm
                             2779 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2780 ; 216  |//  #pragma endasm
                             2781 ; 217  |
                             2782 ; 218  |
                             2783 ; 219  |#ifdef COLOR_262K
                             2784 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2785 ; 221  |#elif defined(COLOR_65K)
                             2786 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2787 ; 223  |#else
                             2788 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2789 ; 225  |#endif
                             2790 ; 226  |    
                             2791 ; 227  |#endif // #ifndef _TYPES_H
                             2792 
                             2794 
                             2795 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2796 ; 8    |
                             2797 ; 9    |
                             2798 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2799 ; 11   |
                             2800 ; 12   |//   SYSTEM STMP Registers 
                             2801 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             2802 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2803 ; 15   |
                             2804 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             2805 ; 17   |
                             2806 ; 18   |
                             2807 ; 19   |
                             2808 ; 20   |
                             2809 ; 21   |
                             2810 ; 22   |
                             2811 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             2812 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             2813 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             2814 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             2815 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             2816 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             2817 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             2818 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             2819 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             2820 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             2821 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             2822 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             2823 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             2824 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             2825 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             2826 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             2827 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             2828 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             2829 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             2830 ; 42   |
                             2831 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             2832 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             2833 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             2834 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             2835 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             2836 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             2837 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             2838 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             2839 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             2840 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             2841 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             2842 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             2843 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             2844 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             2845 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             2846 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             2847 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             2848 ; 60   |
                             2849 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             2850 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             2851 ; 63   |
                             2852 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2853 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2854 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2855 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2856 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2857 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2858 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2859 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             2860 ; 72   |
                             2861 ; 73   |#if defined(CAPLESS_HP)
                             2862 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             2863 ; 75   |#else 
                             2864 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             2865 ; 77   |#endif
                             2866 ; 78   |
                             2867 ; 79   |// Headphone control register
                             2868 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             2869 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             2870 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             2871 ; 83   |typedef union               
                             2872 ; 84   |{
                             2873 ; 85   |    struct {
                             2874 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             2875 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             2876 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             2877 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             2878 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             2879 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             2880 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             2881 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             2882 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             2883 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             2884 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             2885 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             2886 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             2887 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             2888 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             2889 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             2890 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             2891 ; 103  |    } B;
                             2892 ; 104  |    int I;
                             2893 ; 105  |    unsigned int U;
                             2894 ; 106  |} hpctrl_type;
                             2895 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             2896 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             2897 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             2898 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             2899 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             2900 ; 112  |
                             2901 ; 113  |
                             2902 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             2903 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             2904 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             2905 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             2906 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             2907 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2908 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             2909 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             2910 ; 122  |
                             2911 ; 123  |
                             2912 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             2913 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             2914 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             2915 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             2916 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             2917 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             2918 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             2919 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2920 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             2921 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             2922 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             2923 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             2924 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             2925 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             2926 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             2927 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             2928 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             2929 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             2930 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             2931 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             2932 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             2933 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             2934 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             2935 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             2936 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             2937 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             2938 ; 150  |
                             2939 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             2940 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             2941 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             2942 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             2943 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             2944 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             2945 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             2946 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             2947 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             2948 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             2949 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             2950 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             2951 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             2952 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             2953 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             2954 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             2955 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             2956 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             2957 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             2958 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             2959 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             2960 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             2961 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             2962 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             2963 ; 175  |
                             2964 ; 176  |
                             2965 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             2966 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             2967 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             2968 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             2969 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             2970 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             2971 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             2972 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             2973 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             2974 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             2975 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             2976 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             2977 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             2978 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             2979 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             2980 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             2981 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2982 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             2983 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             2984 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             2985 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             2986 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             2987 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             2988 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             2989 ; 201  |
                             2990 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             2991 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             2992 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             2993 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             2994 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             2995 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             2996 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             2997 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             2998 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             2999 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             3000 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             3001 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             3002 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             3003 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             3004 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             3005 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             3006 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             3007 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             3008 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             3009 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             3010 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             3011 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             3012 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             3013 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             3014 ; 226  |
                             3015 ; 227  |typedef union               
                             3016 ; 228  |{
                             3017 ; 229  |    struct {
                             3018 ; 230  |        int INV_USB_CLK            : 1;
                             3019 ; 231  |        int USB_DFF_BYPASS         : 1;
                             3020 ; 232  |        int HOLD_GND               : 1;
                             3021 ; 233  |        int ACKI                   : 1;
                             3022 ; 234  |        int ASD2X                  : 1;
                             3023 ; 235  |        int PCPCU                  : 1;
                             3024 ; 236  |        int PCPCD                  : 1;
                             3025 ; 237  |        int DCKI                   : 1;
                             3026 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             3027 ; 239  |        int PSRN                   : 1;
                             3028 ; 240  |        int FX2                    : 1;
                             3029 ; 241  |        int VCOS                   : 1;
                             3030 ; 242  |        int XBCO                   : 1;
                             3031 ; 243  |        int XBGC                   : 1;
                             3032 ; 244  |        int ADTHD                  : 1;
                             3033 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             3034 ; 246  |        int PWDADC                 : 1;
                             3035 ; 247  |        int MICBIAS1               : 1;
                             3036 ; 248  |        int EZD                    : 1;
                             3037 ; 249  |        int DZCDA                  : 1;
                             3038 ; 250  |        int DZCFM                  : 1;
                             3039 ; 251  |        int DZCLI                  : 1;
                             3040 ; 252  |        int DZCMI                  : 1;
                             3041 ; 253  |        int DZCMA                  : 1;
                             3042 ; 254  |    } B;
                             3043 ; 255  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3044 ; 256  |    unsigned int U;
                             3045 ; 257  |} mix_tbr_type;
                             3046 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             3047 ; 259  |
                             3048 ; 260  |
                             3049 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             3050 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             3051 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             3052 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             3053 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             3054 ; 266  |
                             3055 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             3056 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             3057 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             3058 ; 270  |
                             3059 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             3060 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             3061 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             3062 ; 274  |
                             3063 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             3064 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             3065 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             3066 ; 278  |
                             3067 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             3068 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             3069 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             3070 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             3071 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             3072 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             3073 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             3074 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             3075 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             3076 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             3077 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             3078 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             3079 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             3080 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             3081 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             3082 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             3083 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             3084 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             3085 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             3086 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             3087 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             3088 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             3089 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             3090 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             3091 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             3092 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             3093 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             3094 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             3095 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             3096 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             3097 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             3098 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             3099 ; 311  |
                             3100 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             3101 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             3102 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             3103 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             3104 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             3105 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3106 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             3107 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             3108 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             3109 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             3110 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             3111 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             3112 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             3113 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             3114 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             3115 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             3116 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             3117 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             3118 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             3119 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             3120 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             3121 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             3122 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             3123 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             3124 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             3125 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             3126 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             3127 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             3128 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             3129 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             3130 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             3131 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             3132 ; 344  |
                             3133 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             3134 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             3135 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             3136 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             3137 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             3138 ; 350  |
                             3139 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             3140 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             3141 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             3142 ; 354  |
                             3143 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             3144 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             3145 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             3146 ; 358  |
                             3147 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             3148 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             3149 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             3150 ; 362  |
                             3151 ; 363  |
                             3152 ; 364  |typedef union               
                             3153 ; 365  |{
                             3154 ; 366  |    struct
                             3155 ; 367  |    {
                             3156 ; 368  |        unsigned MR :5;
                             3157 ; 369  |        int         :3;
                             3158 ; 370  |        unsigned ML :5;
                             3159 ; 371  |        int         :2;
                             3160 ; 372  |        int MUTE    :1;
                             3161 ; 373  |    } B;
                             3162 ; 374  |    int I;
                             3163 ; 375  |    unsigned int U;
                             3164 ; 376  |} mix_mastervr_type;
                             3165 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             3166 ; 378  |
                             3167 ; 379  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3168 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             3169 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             3170 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             3171 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             3172 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             3173 ; 385  |
                             3174 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             3175 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             3176 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             3177 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             3178 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             3179 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             3180 ; 392  |
                             3181 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             3182 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             3183 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             3184 ; 396  |
                             3185 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             3186 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             3187 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             3188 ; 400  |
                             3189 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             3190 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             3191 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             3192 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             3193 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             3194 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             3195 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             3196 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             3197 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             3198 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             3199 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             3200 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             3201 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             3202 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             3203 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             3204 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             3205 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             3206 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             3207 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             3208 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             3209 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             3210 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             3211 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             3212 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             3213 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             3214 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             3215 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             3216 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             3217 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             3218 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             3219 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             3220 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             3221 ; 433  |
                             3222 ; 434  |typedef union               
                             3223 ; 435  |{
                             3224 ; 436  |    struct {
                             3225 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             3226 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             3227 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             3228 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             3229 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3230 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             3231 ; 443  |    } B;
                             3232 ; 444  |    int I;
                             3233 ; 445  |    unsigned int U;
                             3234 ; 446  |} mix_micinvr_type;
                             3235 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             3236 ; 448  |
                             3237 ; 449  |
                             3238 ; 450  |
                             3239 ; 451  |
                             3240 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             3241 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             3242 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             3243 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             3244 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             3245 ; 457  |
                             3246 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             3247 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             3248 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             3249 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             3250 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             3251 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             3252 ; 464  |
                             3253 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             3254 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             3255 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             3256 ; 468  |
                             3257 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             3258 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             3259 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             3260 ; 472  |
                             3261 ; 473  |typedef union               
                             3262 ; 474  |{
                             3263 ; 475  |    struct {
                             3264 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             3265 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             3266 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             3267 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             3268 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             3269 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             3270 ; 482  |    } B;
                             3271 ; 483  |    int I;
                             3272 ; 484  |    unsigned int U;
                             3273 ; 485  |} mix_line1invr_type;
                             3274 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             3275 ; 487  |
                             3276 ; 488  |
                             3277 ; 489  |
                             3278 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             3279 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             3280 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             3281 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             3282 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             3283 ; 495  |
                             3284 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             3285 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             3286 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             3287 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             3288 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             3289 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             3290 ; 502  |
                             3291 ; 503  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3292 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             3293 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             3294 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             3295 ; 507  |
                             3296 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             3297 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             3298 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             3299 ; 511  |
                             3300 ; 512  |typedef union               
                             3301 ; 513  |{
                             3302 ; 514  |    struct {
                             3303 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             3304 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             3305 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             3306 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             3307 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             3308 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             3309 ; 521  |    } B;
                             3310 ; 522  |    int I;
                             3311 ; 523  |    unsigned int U;
                             3312 ; 524  |} mix_line2invr_type;
                             3313 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             3314 ; 526  |
                             3315 ; 527  |
                             3316 ; 528  |
                             3317 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             3318 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             3319 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             3320 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             3321 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             3322 ; 534  |
                             3323 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             3324 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             3325 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             3326 ; 538  |
                             3327 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             3328 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             3329 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             3330 ; 542  |
                             3331 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             3332 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             3333 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             3334 ; 546  |
                             3335 ; 547  |typedef union               
                             3336 ; 548  |{
                             3337 ; 549  |    struct {
                             3338 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             3339 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             3340 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             3341 ; 553  |    } B;
                             3342 ; 554  |    int I;
                             3343 ; 555  |    unsigned int U;
                             3344 ; 556  |} mix_dacinvr_type;
                             3345 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             3346 ; 558  |
                             3347 ; 559  |
                             3348 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             3349 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             3350 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             3351 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             3352 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             3353 ; 565  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3354 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             3355 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             3356 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             3357 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             3358 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             3359 ; 571  |
                             3360 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             3361 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             3362 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             3363 ; 575  |
                             3364 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             3365 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             3366 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             3367 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             3368 ; 580  |
                             3369 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             3370 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             3371 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             3372 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             3373 ; 585  |
                             3374 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             3375 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             3376 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             3377 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             3378 ; 590  |
                             3379 ; 591  |typedef union               
                             3380 ; 592  |{
                             3381 ; 593  |    struct {
                             3382 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             3383 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             3384 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             3385 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             3386 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             3387 ; 599  |    } B;
                             3388 ; 600  |    int I;
                             3389 ; 601  |    unsigned int U;
                             3390 ; 602  |} mix_recselr_type;
                             3391 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             3392 ; 604  |
                             3393 ; 605  |
                             3394 ; 606  |
                             3395 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             3396 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             3397 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             3398 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             3399 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             3400 ; 612  |
                             3401 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             3402 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             3403 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             3404 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             3405 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             3406 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             3407 ; 619  |
                             3408 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             3409 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             3410 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             3411 ; 623  |
                             3412 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             3413 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             3414 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3415 ; 627  |
                             3416 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             3417 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             3418 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             3419 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             3420 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             3421 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             3422 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             3423 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             3424 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             3425 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             3426 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             3427 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             3428 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             3429 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             3430 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             3431 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             3432 ; 644  |
                             3433 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             3434 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             3435 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             3436 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             3437 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             3438 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             3439 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             3440 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             3441 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             3442 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             3443 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             3444 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             3445 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             3446 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             3447 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             3448 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             3449 ; 661  |
                             3450 ; 662  |typedef union               
                             3451 ; 663  |{
                             3452 ; 664  |    struct {
                             3453 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             3454 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             3455 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             3456 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             3457 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             3458 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             3459 ; 671  |    } B;
                             3460 ; 672  |    int I;
                             3461 ; 673  |    unsigned int U;
                             3462 ; 674  |} mix_adcgainr_type;
                             3463 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             3464 ; 676  |
                             3465 ; 677  |
                             3466 ; 678  |
                             3467 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             3468 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             3469 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             3470 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             3471 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             3472 ; 684  |
                             3473 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             3474 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             3475 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             3476 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3477 ; 689  |
                             3478 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             3479 ; 691  |
                             3480 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             3481 ; 693  |
                             3482 ; 694  |typedef union               
                             3483 ; 695  |{
                             3484 ; 696  |    struct {
                             3485 ; 697  |                int                     : 9;
                             3486 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             3487 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             3488 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             3489 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             3490 ; 702  |    } B;
                             3491 ; 703  |    int I;
                             3492 ; 704  |    unsigned int U;
                             3493 ; 705  |} mix_pwrdnr_type;
                             3494 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             3495 ; 707  |
                             3496 ; 708  |
                             3497 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             3498 ; 710  |
                             3499 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             3500 ; 712  |
                             3501 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             3502 ; 714  |
                             3503 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             3504 ; 716  |
                             3505 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             3506 ; 718  |
                             3507 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             3508 ; 720  |
                             3509 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             3510 ; 722  |
                             3511 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             3512 ; 724  |
                             3513 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             3514 ; 726  |
                             3515 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             3516 ; 728  |
                             3517 ; 729  |
                             3518 ; 730  |
                             3519 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             3520 ; 732  |
                             3521 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             3522 ; 734  |
                             3523 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             3524 ; 736  |
                             3525 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             3526 ; 738  |
                             3527 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             3528 ; 740  |
                             3529 ; 741  |
                             3530 ; 742  |
                             3531 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             3532 ; 744  |
                             3533 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             3534 ; 746  |
                             3535 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3536 ; 748  |
                             3537 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             3538 ; 750  |
                             3539 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             3540 ; 752  |
                             3541 ; 753  |
                             3542 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             3543 ; 755  |
                             3544 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             3545 ; 757  |
                             3546 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             3547 ; 759  |
                             3548 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             3549 ; 761  |
                             3550 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             3551 ; 763  |
                             3552 ; 764  |
                             3553 ; 765  |typedef union               
                             3554 ; 766  |{
                             3555 ; 767  |    struct {
                             3556 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             3557 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             3558 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             3559 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             3560 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             3561 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             3562 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             3563 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             3564 ; 776  |    } B;
                             3565 ; 777  |    int I;
                             3566 ; 778  |    unsigned int U;
                             3567 ; 779  |} mix_test_type;
                             3568 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             3569 ; 781  |
                             3570 ; 782  |
                             3571 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             3572 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             3573 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             3574 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             3575 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             3576 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             3577 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             3578 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             3579 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             3580 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             3581 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             3582 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             3583 ; 795  |
                             3584 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             3585 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             3586 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             3587 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             3588 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             3589 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             3590 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             3591 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             3592 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             3593 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3594 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             3595 ; 807  |
                             3596 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             3597 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             3598 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             3599 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             3600 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             3601 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             3602 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             3603 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             3604 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             3605 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             3606 ; 818  |
                             3607 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             3608 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             3609 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             3610 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             3611 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             3612 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             3613 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             3614 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             3615 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             3616 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             3617 ; 829  |
                             3618 ; 830  |typedef union               
                             3619 ; 831  |{
                             3620 ; 832  |    struct {
                             3621 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             3622 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             3623 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             3624 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             3625 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             3626 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             3627 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             3628 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             3629 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             3630 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             3631 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             3632 ; 844  |    } B;
                             3633 ; 845  |    int I;
                             3634 ; 846  |    unsigned int U;
                             3635 ; 847  |} ref_ctrl_type;
                             3636 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             3637 ; 849  |
                             3638 ; 850  |
                             3639 ; 851  |
                             3640 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             3641 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             3642 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             3643 ; 855  |//////  DAC Registers
                             3644 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             3645 ; 857  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3646 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             3647 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             3648 ; 860  |
                             3649 ; 861  |
                             3650 ; 862  |
                             3651 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             3652 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             3653 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             3654 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             3655 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             3656 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             3657 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             3658 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             3659 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             3660 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             3661 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             3662 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             3663 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             3664 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             3665 ; 877  |
                             3666 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             3667 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             3668 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             3669 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             3670 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             3671 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             3672 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             3673 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             3674 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             3675 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             3676 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             3677 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             3678 ; 890  |
                             3679 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             3680 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             3681 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             3682 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             3683 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             3684 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             3685 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             3686 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             3687 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             3688 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             3689 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             3690 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             3691 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             3692 ; 904  |
                             3693 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             3694 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             3695 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             3696 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             3697 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             3698 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             3699 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             3700 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             3701 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             3702 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             3703 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             3704 ; 916  |
                             3705 ; 917  |
                             3706 ; 918  |typedef union               
                             3707 ; 919  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3708 ; 920  |    struct {
                             3709 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             3710 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             3711 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             3712 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             3713 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             3714 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             3715 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             3716 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             3717 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             3718 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             3719 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             3720 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             3721 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             3722 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             3723 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             3724 ; 936  |    } B;
                             3725 ; 937  |    int I;
                             3726 ; 938  |    unsigned int U;
                             3727 ; 939  |} dac_csr_type;
                             3728 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             3729 ; 941  |
                             3730 ; 942  |
                             3731 ; 943  |
                             3732 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             3733 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             3734 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             3735 ; 947  |
                             3736 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             3737 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             3738 ; 950  |
                             3739 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             3740 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             3741 ; 953  |
                             3742 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             3743 ; 955  |
                             3744 ; 956  |typedef union               
                             3745 ; 957  |{
                             3746 ; 958  |    struct {
                             3747 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             3748 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             3749 ; 961  |    } B;
                             3750 ; 962  |    int I;
                             3751 ; 963  |    unsigned int U;
                             3752 ; 964  |} dac_srr_type;
                             3753 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             3754 ; 966  |
                             3755 ; 967  |
                             3756 ; 968  |
                             3757 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             3758 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             3759 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             3760 ; 972  |
                             3761 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             3762 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             3763 ; 975  |
                             3764 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             3765 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             3766 ; 978  |
                             3767 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             3768 ; 980  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3769 ; 981  |typedef union               
                             3770 ; 982  |{
                             3771 ; 983  |    struct {
                             3772 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             3773 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             3774 ; 986  |    } B;
                             3775 ; 987  |    int I;
                             3776 ; 988  |    unsigned int U;
                             3777 ; 989  |} dac_wcr_type;
                             3778 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             3779 ; 991  |
                             3780 ; 992  |
                             3781 ; 993  |
                             3782 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             3783 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             3784 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             3785 ; 997  |
                             3786 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             3787 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             3788 ; 1000 |
                             3789 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             3790 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             3791 ; 1003 |
                             3792 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             3793 ; 1005 |
                             3794 ; 1006 |typedef union               
                             3795 ; 1007 |{
                             3796 ; 1008 |    struct {
                             3797 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             3798 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             3799 ; 1011 |    } B;
                             3800 ; 1012 |    int I;
                             3801 ; 1013 |    unsigned int U;
                             3802 ; 1014 |} dac_cpr_type;
                             3803 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             3804 ; 1016 |
                             3805 ; 1017 |
                             3806 ; 1018 |
                             3807 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             3808 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             3809 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             3810 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             3811 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             3812 ; 1024 |
                             3813 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             3814 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             3815 ; 1027 |
                             3816 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             3817 ; 1029 |
                             3818 ; 1030 |typedef union               
                             3819 ; 1031 |{
                             3820 ; 1032 |    struct {
                             3821 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             3822 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             3823 ; 1035 |    } B;
                             3824 ; 1036 |    int I;
                             3825 ; 1037 |    unsigned int U;
                             3826 ; 1038 |} dac_mr_type;
                             3827 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             3828 ; 1040 |
                             3829 ; 1041 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3830 ; 1042 |
                             3831 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             3832 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             3833 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             3834 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             3835 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             3836 ; 1048 |
                             3837 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             3838 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             3839 ; 1051 |
                             3840 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             3841 ; 1053 |
                             3842 ; 1054 |typedef union               
                             3843 ; 1055 |{
                             3844 ; 1056 |    struct {
                             3845 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             3846 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             3847 ; 1059 |    } B;
                             3848 ; 1060 |    int I;
                             3849 ; 1061 |    unsigned int U;
                             3850 ; 1062 |} dac_bar_type;
                             3851 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             3852 ; 1064 |
                             3853 ; 1065 |
                             3854 ; 1066 |
                             3855 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             3856 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             3857 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             3858 ; 1070 |
                             3859 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             3860 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             3861 ; 1073 |
                             3862 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             3863 ; 1075 |
                             3864 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             3865 ; 1077 |
                             3866 ; 1078 |typedef union               
                             3867 ; 1079 |{
                             3868 ; 1080 |    struct {
                             3869 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             3870 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             3871 ; 1083 |    } B;
                             3872 ; 1084 |    int I;
                             3873 ; 1085 |    unsigned int U;
                             3874 ; 1086 |} dac_icr_type;
                             3875 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             3876 ; 1088 |
                             3877 ; 1089 |
                             3878 ; 1090 |
                             3879 ; 1091 |
                             3880 ; 1092 |
                             3881 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             3882 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             3883 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             3884 ; 1096 |//////  ADC Registers
                             3885 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             3886 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             3887 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             3888 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             3889 ; 1101 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3890 ; 1102 |
                             3891 ; 1103 |
                             3892 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             3893 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             3894 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             3895 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             3896 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             3897 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             3898 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             3899 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             3900 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             3901 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             3902 ; 1114 |
                             3903 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             3904 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             3905 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             3906 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             3907 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             3908 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             3909 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             3910 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             3911 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             3912 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             3913 ; 1125 |
                             3914 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             3915 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             3916 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             3917 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             3918 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             3919 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             3920 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             3921 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             3922 ; 1134 |
                             3923 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             3924 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             3925 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             3926 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             3927 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             3928 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             3929 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             3930 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             3931 ; 1143 |
                             3932 ; 1144 |typedef union               
                             3933 ; 1145 |{
                             3934 ; 1146 |    struct {
                             3935 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             3936 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             3937 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             3938 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             3939 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             3940 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             3941 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             3942 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             3943 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             3944 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             3945 ; 1157 |    } B;
                             3946 ; 1158 |    int I;
                             3947 ; 1159 |    unsigned int U;
                             3948 ; 1160 |} adc_csr_type;
                             3949 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3950 ; 1162 |
                             3951 ; 1163 |
                             3952 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             3953 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             3954 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             3955 ; 1167 |
                             3956 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             3957 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             3958 ; 1170 |
                             3959 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             3960 ; 1172 |
                             3961 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             3962 ; 1174 |
                             3963 ; 1175 |typedef union               
                             3964 ; 1176 |{
                             3965 ; 1177 |    struct {
                             3966 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             3967 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             3968 ; 1180 |    } B;
                             3969 ; 1181 |    int I;
                             3970 ; 1182 |    unsigned int U;
                             3971 ; 1183 |} adc_wcr_type;
                             3972 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             3973 ; 1185 |
                             3974 ; 1186 |
                             3975 ; 1187 |
                             3976 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             3977 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             3978 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             3979 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             3980 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             3981 ; 1193 |
                             3982 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             3983 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             3984 ; 1196 |
                             3985 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             3986 ; 1198 |
                             3987 ; 1199 |typedef union               
                             3988 ; 1200 |{
                             3989 ; 1201 |    struct {
                             3990 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             3991 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             3992 ; 1204 |    } B;
                             3993 ; 1205 |    int I;
                             3994 ; 1206 |    unsigned int U;
                             3995 ; 1207 |} adc_bar_type;
                             3996 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             3997 ; 1209 |
                             3998 ; 1210 |
                             3999 ; 1211 |
                             4000 ; 1212 |
                             4001 ; 1213 |
                             4002 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             4003 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             4004 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             4005 ; 1217 |
                             4006 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             4007 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             4008 ; 1220 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4009 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             4010 ; 1222 |
                             4011 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             4012 ; 1224 |
                             4013 ; 1225 |typedef union               
                             4014 ; 1226 |{
                             4015 ; 1227 |    struct {
                             4016 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             4017 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             4018 ; 1230 |    } B;
                             4019 ; 1231 |    int I;
                             4020 ; 1232 |    unsigned int U;
                             4021 ; 1233 |} adc_cpr_type;
                             4022 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             4023 ; 1235 |
                             4024 ; 1236 |
                             4025 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             4026 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             4027 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             4028 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             4029 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             4030 ; 1242 |
                             4031 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             4032 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             4033 ; 1245 |
                             4034 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             4035 ; 1247 |
                             4036 ; 1248 |typedef union               
                             4037 ; 1249 |{
                             4038 ; 1250 |    struct {
                             4039 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             4040 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             4041 ; 1253 |    } B;
                             4042 ; 1254 |    int I;
                             4043 ; 1255 |    unsigned int U;
                             4044 ; 1256 |} adc_mr_type;
                             4045 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             4046 ; 1258 |
                             4047 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             4048 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             4049 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             4050 ; 1262 |
                             4051 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             4052 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             4053 ; 1265 |
                             4054 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             4055 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             4056 ; 1268 |
                             4057 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             4058 ; 1270 |
                             4059 ; 1271 |typedef union               
                             4060 ; 1272 |{
                             4061 ; 1273 |    struct {
                             4062 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             4063 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             4064 ; 1276 |    } B;
                             4065 ; 1277 |    int I;
                             4066 ; 1278 |    unsigned int U;
                             4067 ; 1279 |} adc_srr_type;
                             4068 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             4069 ; 1281 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4070 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             4071 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             4072 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             4073 ; 1285 |
                             4074 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             4075 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             4076 ; 1288 |
                             4077 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             4078 ; 1290 |
                             4079 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             4080 ; 1292 |
                             4081 ; 1293 |typedef union               
                             4082 ; 1294 |{
                             4083 ; 1295 |    struct {
                             4084 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             4085 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             4086 ; 1298 |    } B;
                             4087 ; 1299 |    int I;
                             4088 ; 1300 |    unsigned int U;
                             4089 ; 1301 |} adc_icr_type;
                             4090 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             4091 ; 1303 |
                             4092 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             4093 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             4094 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             4095 ; 1307 |
                             4096 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             4097 ; 1309 |
                             4098 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             4099 ; 1311 |
                             4100 ; 1312 |#endif
                             4101 ; 1313 |
                             4102 
                             4104 
                             4105 ; 17   |#include "regsdcdc.h"
                             4106 
                             4108 
                             4109 ; 1    |#if !(defined(regsdcdcinc))
                             4110 ; 2    |
                             4111 ; 3    |#define regssysteminc 1
                             4112 ; 4    |
                             4113 ; 5    |
                             4114 ; 6    |
                             4115 ; 7    |#include "types.h"
                             4116 
                             4118 
                             4119 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4120 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4121 ; 3    |//
                             4122 ; 4    |// Filename: types.h
                             4123 ; 5    |// Description: Standard data types
                             4124 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4125 ; 7    |
                             4126 ; 8    |#ifndef _TYPES_H
                             4127 ; 9    |#define _TYPES_H
                             4128 ; 10   |
                             4129 ; 11   |// TODO:  move this outta here!
                             4130 ; 12   |#if !defined(NOERROR)
                             4131 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4132 ; 14   |#define SUCCESS 0
                             4133 ; 15   |#endif 
                             4134 ; 16   |#if !defined(SUCCESS)
                             4135 ; 17   |#define SUCCESS  0
                             4136 ; 18   |#endif
                             4137 ; 19   |#if !defined(ERROR)
                             4138 ; 20   |#define ERROR   -1
                             4139 ; 21   |#endif
                             4140 ; 22   |#if !defined(FALSE)
                             4141 ; 23   |#define FALSE 0
                             4142 ; 24   |#endif
                             4143 ; 25   |#if !defined(TRUE)
                             4144 ; 26   |#define TRUE  1
                             4145 ; 27   |#endif
                             4146 ; 28   |
                             4147 ; 29   |#if !defined(NULL)
                             4148 ; 30   |#define NULL 0
                             4149 ; 31   |#endif
                             4150 ; 32   |
                             4151 ; 33   |#define MAX_INT     0x7FFFFF
                             4152 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4153 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4154 ; 36   |#define MAX_ULONG   (-1) 
                             4155 ; 37   |
                             4156 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4157 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4158 ; 40   |
                             4159 ; 41   |
                             4160 ; 42   |#define BYTE    unsigned char       // btVarName
                             4161 ; 43   |#define CHAR    signed char         // cVarName
                             4162 ; 44   |#define USHORT  unsigned short      // usVarName
                             4163 ; 45   |#define SHORT   unsigned short      // sVarName
                             4164 ; 46   |#define WORD    unsigned int        // wVarName
                             4165 ; 47   |#define INT     signed int          // iVarName
                             4166 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4167 ; 49   |#define LONG    signed long         // lVarName
                             4168 ; 50   |#define BOOL    unsigned int        // bVarName
                             4169 ; 51   |#define FRACT   _fract              // frVarName
                             4170 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4171 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4172 ; 54   |#define FLOAT   float               // fVarName
                             4173 ; 55   |#define DBL     double              // dVarName
                             4174 ; 56   |#define ENUM    enum                // eVarName
                             4175 ; 57   |#define CMX     _complex            // cmxVarName
                             4176 ; 58   |typedef WORD UCS3;                   // 
                             4177 ; 59   |
                             4178 ; 60   |#define UINT16  unsigned short
                             4179 ; 61   |#define UINT8   unsigned char   
                             4180 ; 62   |#define UINT32  unsigned long
                             4181 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4182 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4183 ; 65   |#define WCHAR   UINT16
                             4184 ; 66   |
                             4185 ; 67   |//UINT128 is 16 bytes or 6 words
                             4186 ; 68   |typedef struct UINT128_3500 {   
                             4187 ; 69   |    int val[6];     
                             4188 ; 70   |} UINT128_3500;
                             4189 ; 71   |
                             4190 ; 72   |#define UINT128   UINT128_3500
                             4191 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4192 ; 74   |// Little endian word packed byte strings:   
                             4193 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4194 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4195 ; 77   |// Little endian word packed byte strings:   
                             4196 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4197 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4198 ; 80   |
                             4199 ; 81   |// Declare Memory Spaces To Use When Coding
                             4200 ; 82   |// A. Sector Buffers
                             4201 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4202 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4203 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4204 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4205 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4206 ; 88   |// B. Media DDI Memory
                             4207 ; 89   |#define MEDIA_DDI_MEM _Y
                             4208 ; 90   |
                             4209 ; 91   |
                             4210 ; 92   |
                             4211 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4212 ; 94   |// Examples of circular pointers:
                             4213 ; 95   |//    INT CIRC cpiVarName
                             4214 ; 96   |//    DWORD CIRC cpdwVarName
                             4215 ; 97   |
                             4216 ; 98   |#define RETCODE INT                 // rcVarName
                             4217 ; 99   |
                             4218 ; 100  |// generic bitfield structure
                             4219 ; 101  |struct Bitfield {
                             4220 ; 102  |    unsigned int B0  :1;
                             4221 ; 103  |    unsigned int B1  :1;
                             4222 ; 104  |    unsigned int B2  :1;
                             4223 ; 105  |    unsigned int B3  :1;
                             4224 ; 106  |    unsigned int B4  :1;
                             4225 ; 107  |    unsigned int B5  :1;
                             4226 ; 108  |    unsigned int B6  :1;
                             4227 ; 109  |    unsigned int B7  :1;
                             4228 ; 110  |    unsigned int B8  :1;
                             4229 ; 111  |    unsigned int B9  :1;
                             4230 ; 112  |    unsigned int B10 :1;
                             4231 ; 113  |    unsigned int B11 :1;
                             4232 ; 114  |    unsigned int B12 :1;
                             4233 ; 115  |    unsigned int B13 :1;
                             4234 ; 116  |    unsigned int B14 :1;
                             4235 ; 117  |    unsigned int B15 :1;
                             4236 ; 118  |    unsigned int B16 :1;
                             4237 ; 119  |    unsigned int B17 :1;
                             4238 ; 120  |    unsigned int B18 :1;
                             4239 ; 121  |    unsigned int B19 :1;
                             4240 ; 122  |    unsigned int B20 :1;
                             4241 ; 123  |    unsigned int B21 :1;
                             4242 ; 124  |    unsigned int B22 :1;
                             4243 ; 125  |    unsigned int B23 :1;
                             4244 ; 126  |};
                             4245 ; 127  |
                             4246 ; 128  |union BitInt {
                             4247 ; 129  |        struct Bitfield B;
                             4248 ; 130  |        int        I;
                             4249 ; 131  |};
                             4250 ; 132  |
                             4251 ; 133  |#define MAX_MSG_LENGTH 10
                             4252 ; 134  |struct CMessage
                             4253 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4254 ; 136  |        unsigned int m_uLength;
                             4255 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4256 ; 138  |};
                             4257 ; 139  |
                             4258 ; 140  |typedef struct {
                             4259 ; 141  |    WORD m_wLength;
                             4260 ; 142  |    WORD m_wMessage;
                             4261 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4262 ; 144  |} Message;
                             4263 ; 145  |
                             4264 ; 146  |struct MessageQueueDescriptor
                             4265 ; 147  |{
                             4266 ; 148  |        int *m_pBase;
                             4267 ; 149  |        int m_iModulo;
                             4268 ; 150  |        int m_iSize;
                             4269 ; 151  |        int *m_pHead;
                             4270 ; 152  |        int *m_pTail;
                             4271 ; 153  |};
                             4272 ; 154  |
                             4273 ; 155  |struct ModuleEntry
                             4274 ; 156  |{
                             4275 ; 157  |    int m_iSignaledEventMask;
                             4276 ; 158  |    int m_iWaitEventMask;
                             4277 ; 159  |    int m_iResourceOfCode;
                             4278 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4279 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4280 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4281 ; 163  |    int m_uTimeOutHigh;
                             4282 ; 164  |    int m_uTimeOutLow;
                             4283 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4284 ; 166  |};
                             4285 ; 167  |
                             4286 ; 168  |union WaitMask{
                             4287 ; 169  |    struct B{
                             4288 ; 170  |        unsigned int m_bNone     :1;
                             4289 ; 171  |        unsigned int m_bMessage  :1;
                             4290 ; 172  |        unsigned int m_bTimer    :1;
                             4291 ; 173  |        unsigned int m_bButton   :1;
                             4292 ; 174  |    } B;
                             4293 ; 175  |    int I;
                             4294 ; 176  |} ;
                             4295 ; 177  |
                             4296 ; 178  |
                             4297 ; 179  |struct Button {
                             4298 ; 180  |        WORD wButtonEvent;
                             4299 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4300 ; 182  |};
                             4301 ; 183  |
                             4302 ; 184  |struct Message {
                             4303 ; 185  |        WORD wMsgLength;
                             4304 ; 186  |        WORD wMsgCommand;
                             4305 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4306 ; 188  |};
                             4307 ; 189  |
                             4308 ; 190  |union EventTypes {
                             4309 ; 191  |        struct CMessage msg;
                             4310 ; 192  |        struct Button Button ;
                             4311 ; 193  |        struct Message Message;
                             4312 ; 194  |};
                             4313 ; 195  |
                             4314 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4315 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4316 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4317 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4318 ; 200  |
                             4319 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4320 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4321 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4322 ; 204  |
                             4323 ; 205  |#if DEBUG
                             4324 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4325 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4326 ; 208  |#else 
                             4327 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4328 ; 210  |#define DebugBuildAssert(x)    
                             4329 ; 211  |#endif
                             4330 ; 212  |
                             4331 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4332 ; 214  |//  #pragma asm
                             4333 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4334 ; 216  |//  #pragma endasm
                             4335 ; 217  |
                             4336 ; 218  |
                             4337 ; 219  |#ifdef COLOR_262K
                             4338 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4339 ; 221  |#elif defined(COLOR_65K)
                             4340 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4341 ; 223  |#else
                             4342 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4343 ; 225  |#endif
                             4344 ; 226  |    
                             4345 ; 227  |#endif // #ifndef _TYPES_H
                             4346 
                             4348 
                             4349 ; 8    |
                             4350 ; 9    |
                             4351 ; 10   |
                             4352 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4353 ; 12   |
                             4354 ; 13   |//   SYSTEM STMP Registers 
                             4355 ; 14   |//      Last Edited 2.19.2003 M. May
                             4356 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4357 ; 16   |
                             4358 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             4359 ; 18   |
                             4360 ; 19   |
                             4361 ; 20   |
                             4362 ; 21   |
                             4363 ; 22   |
                             4364 ; 23   |
                             4365 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             4366 ; 25   |
                             4367 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             4368 ; 27   |
                             4369 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             4370 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             4371 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             4372 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             4373 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4374 ; 33   |
                             4375 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             4376 ; 35   |
                             4377 ; 36   |
                             4378 ; 37   |
                             4379 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             4380 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             4381 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             4382 ; 41   |
                             4383 ; 42   |
                             4384 ; 43   |
                             4385 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             4386 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             4387 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             4388 ; 47   |
                             4389 ; 48   |
                             4390 ; 49   |
                             4391 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             4392 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             4393 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             4394 ; 53   |
                             4395 ; 54   |
                             4396 ; 55   |
                             4397 ; 56   |
                             4398 ; 57   |
                             4399 ; 58   |typedef union               
                             4400 ; 59   |{
                             4401 ; 60   |    struct {
                             4402 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             4403 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             4404 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             4405 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             4406 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             4407 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             4408 ; 67   |    } B;
                             4409 ; 68   |    unsigned int I;
                             4410 ; 69   |} dcdc1_ctrl0_type;
                             4411 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             4412 ; 71   |
                             4413 ; 72   |
                             4414 ; 73   |
                             4415 ; 74   |
                             4416 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             4417 ; 76   |
                             4418 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             4419 ; 78   |
                             4420 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             4421 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             4422 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             4423 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             4424 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             4425 ; 84   |
                             4426 ; 85   |
                             4427 ; 86   |
                             4428 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             4429 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             4430 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             4431 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4432 ; 91   |
                             4433 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             4434 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             4435 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             4436 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             4437 ; 96   |
                             4438 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             4439 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             4440 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             4441 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             4442 ; 101  |
                             4443 ; 102  |
                             4444 ; 103  |typedef union               
                             4445 ; 104  |{
                             4446 ; 105  |    struct {
                             4447 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             4448 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             4449 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             4450 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             4451 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             4452 ; 111  |    } B;
                             4453 ; 112  |    unsigned int I;
                             4454 ; 113  |} dcdc1_ctrl1_type;
                             4455 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             4456 ; 115  |
                             4457 ; 116  |
                             4458 ; 117  |
                             4459 ; 118  |
                             4460 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             4461 ; 120  |
                             4462 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             4463 ; 122  |
                             4464 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             4465 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             4466 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             4467 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             4468 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             4469 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             4470 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             4471 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             4472 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             4473 ; 132  |
                             4474 ; 133  |
                             4475 ; 134  |
                             4476 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             4477 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             4478 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             4479 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             4480 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             4481 ; 140  |
                             4482 ; 141  |
                             4483 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             4484 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             4485 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4486 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             4487 ; 146  |
                             4488 ; 147  |
                             4489 ; 148  |
                             4490 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             4491 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             4492 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             4493 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             4494 ; 153  |
                             4495 ; 154  |
                             4496 ; 155  |typedef union               
                             4497 ; 156  |{
                             4498 ; 157  |    struct {
                             4499 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             4500 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             4501 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             4502 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             4503 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             4504 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             4505 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             4506 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             4507 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             4508 ; 167  |    } B;
                             4509 ; 168  |    unsigned int I;
                             4510 ; 169  |} dcdc_vddio_type;
                             4511 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             4512 ; 171  |
                             4513 ; 172  |
                             4514 ; 173  |
                             4515 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             4516 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             4517 ; 176  |
                             4518 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             4519 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             4520 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             4521 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             4522 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             4523 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             4524 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             4525 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             4526 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             4527 ; 186  |
                             4528 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             4529 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             4530 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             4531 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             4532 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             4533 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             4534 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             4535 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             4536 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             4537 ; 196  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4538 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             4539 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             4540 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             4541 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             4542 ; 201  |
                             4543 ; 202  |typedef union               
                             4544 ; 203  |{
                             4545 ; 204  |    struct {
                             4546 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             4547 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             4548 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             4549 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             4550 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             4551 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             4552 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             4553 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             4554 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             4555 ; 214  |    } B;
                             4556 ; 215  |   unsigned int I;
                             4557 ; 216  |        unsigned U;
                             4558 ; 217  |} dcdc_vddd_type;
                             4559 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             4560 ; 219  |
                             4561 ; 220  |
                             4562 ; 221  |
                             4563 ; 222  |
                             4564 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             4565 ; 224  |
                             4566 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             4567 ; 226  |
                             4568 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             4569 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             4570 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             4571 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             4572 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             4573 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             4574 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             4575 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             4576 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             4577 ; 236  |
                             4578 ; 237  |
                             4579 ; 238  |
                             4580 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             4581 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             4582 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             4583 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             4584 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             4585 ; 244  |
                             4586 ; 245  |
                             4587 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             4588 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             4589 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             4590 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             4591 ; 250  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4592 ; 251  |
                             4593 ; 252  |
                             4594 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             4595 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             4596 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             4597 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             4598 ; 257  |
                             4599 ; 258  |
                             4600 ; 259  |typedef union               
                             4601 ; 260  |{
                             4602 ; 261  |    struct {
                             4603 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             4604 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             4605 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             4606 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             4607 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             4608 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             4609 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             4610 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             4611 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             4612 ; 271  |    } B;
                             4613 ; 272  |    unsigned int I;
                             4614 ; 273  |} dcdc_vdda_type;
                             4615 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             4616 ; 275  |
                             4617 ; 276  |
                             4618 ; 277  |
                             4619 ; 278  |
                             4620 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             4621 ; 280  |
                             4622 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             4623 ; 282  |
                             4624 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             4625 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             4626 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             4627 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             4628 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             4629 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             4630 ; 289  |
                             4631 ; 290  |
                             4632 ; 291  |
                             4633 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             4634 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             4635 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             4636 ; 295  |
                             4637 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             4638 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             4639 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             4640 ; 299  |
                             4641 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             4642 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             4643 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             4644 ; 303  |
                             4645 ; 304  |
                             4646 ; 305  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4647 ; 306  |{
                             4648 ; 307  |    struct {
                             4649 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             4650 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             4651 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             4652 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             4653 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             4654 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             4655 ; 314  |    } B;
                             4656 ; 315  |    unsigned int I;
                             4657 ; 316  |} dcdc2_ctrl0_type; 
                             4658 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             4659 ; 318  |
                             4660 ; 319  |
                             4661 ; 320  |
                             4662 ; 321  |
                             4663 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             4664 ; 323  |
                             4665 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             4666 ; 325  |
                             4667 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             4668 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             4669 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             4670 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             4671 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             4672 ; 331  |
                             4673 ; 332  |
                             4674 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             4675 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             4676 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             4677 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             4678 ; 337  |
                             4679 ; 338  |
                             4680 ; 339  |
                             4681 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             4682 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             4683 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             4684 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             4685 ; 344  |
                             4686 ; 345  |
                             4687 ; 346  |
                             4688 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             4689 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             4690 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             4691 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             4692 ; 351  |
                             4693 ; 352  |
                             4694 ; 353  |typedef union               
                             4695 ; 354  |{
                             4696 ; 355  |    struct {
                             4697 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             4698 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             4699 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             4700 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             4701 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             4702 ; 361  |    } B;
                             4703 ; 362  |    unsigned int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4704 ; 363  |} dcdc2_ctrl1_type;
                             4705 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             4706 ; 365  |
                             4707 ; 366  |
                             4708 ; 367  |
                             4709 ; 368  |
                             4710 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             4711 ; 370  |
                             4712 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             4713 ; 372  |
                             4714 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             4715 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             4716 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             4717 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             4718 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             4719 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             4720 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             4721 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             4722 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             4723 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             4724 ; 383  |
                             4725 ; 384  |
                             4726 ; 385  |
                             4727 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             4728 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             4729 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             4730 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             4731 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             4732 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             4733 ; 392  |
                             4734 ; 393  |
                             4735 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             4736 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             4737 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             4738 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             4739 ; 398  |
                             4740 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             4741 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             4742 ; 401  |
                             4743 ; 402  |
                             4744 ; 403  |
                             4745 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             4746 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             4747 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             4748 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             4749 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             4750 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             4751 ; 410  |
                             4752 ; 411  |
                             4753 ; 412  |typedef union               
                             4754 ; 413  |{
                             4755 ; 414  |    struct {
                             4756 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             4757 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             4758 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4759 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             4760 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             4761 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             4762 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             4763 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             4764 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             4765 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             4766 ; 425  |    } B;
                             4767 ; 426  |    unsigned int I;
                             4768 ; 427  |} speed_type;
                             4769 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             4770 ; 429  |
                             4771 ; 430  |
                             4772 ; 431  |
                             4773 ; 432  |
                             4774 ; 433  |
                             4775 ; 434  |
                             4776 ; 435  |
                             4777 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             4778 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             4779 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             4780 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             4781 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             4782 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             4783 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             4784 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             4785 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             4786 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             4787 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             4788 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             4789 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             4790 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             4791 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             4792 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             4793 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             4794 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             4795 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             4796 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             4797 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             4798 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             4799 ; 458  |
                             4800 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             4801 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             4802 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             4803 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             4804 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             4805 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             4806 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             4807 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             4808 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             4809 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             4810 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             4811 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             4812 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             4813 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             4814 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             4815 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             4816 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             4817 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             4818 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             4819 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4820 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             4821 ; 480  |
                             4822 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             4823 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             4824 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             4825 ; 484  |
                             4826 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             4827 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             4828 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             4829 ; 488  |
                             4830 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             4831 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             4832 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             4833 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             4834 ; 493  |
                             4835 ; 494  |typedef union               
                             4836 ; 495  |{
                             4837 ; 496  |    struct {
                             4838 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             4839 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             4840 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             4841 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             4842 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             4843 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             4844 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             4845 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             4846 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             4847 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             4848 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             4849 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             4850 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             4851 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             4852 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             4853 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             4854 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             4855 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             4856 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             4857 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             4858 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             4859 ; 518  |    } B;
                             4860 ; 519  |    unsigned int I;
                             4861 ; 520  |} usb_dcdctbr_type;
                             4862 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             4863 ; 522  |
                             4864 ; 523  |
                             4865 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             4866 ; 525  |
                             4867 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             4868 ; 527  |
                             4869 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             4870 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             4871 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4872 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             4873 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             4874 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             4875 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             4876 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             4877 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             4878 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             4879 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             4880 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             4881 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             4882 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             4883 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             4884 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             4885 ; 544  |
                             4886 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             4887 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             4888 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             4889 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             4890 ; 549  |
                             4891 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             4892 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             4893 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             4894 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             4895 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             4896 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             4897 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             4898 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             4899 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             4900 ; 559  |
                             4901 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             4902 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             4903 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             4904 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             4905 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             4906 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             4907 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             4908 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             4909 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             4910 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             4911 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             4912 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             4913 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             4914 ; 573  |
                             4915 ; 574  |
                             4916 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             4917 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             4918 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             4919 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4920 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             4921 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             4922 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             4923 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             4924 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             4925 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             4926 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             4927 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             4928 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             4929 ; 588  |
                             4930 ; 589  |typedef union               
                             4931 ; 590  |{
                             4932 ; 591  |    struct {
                             4933 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             4934 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             4935 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             4936 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             4937 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             4938 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             4939 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             4940 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             4941 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             4942 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             4943 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             4944 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             4945 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             4946 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             4947 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             4948 ; 607  |    } B;
                             4949 ; 608  |    unsigned int I;
                             4950 ; 609  |} usb_pwr_charge_type;
                             4951 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             4952 ; 611  |
                             4953 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             4954 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             4955 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             4956 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             4957 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             4958 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             4959 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             4960 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             4961 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             4962 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             4963 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             4964 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             4965 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             4966 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             4967 ; 626  |
                             4968 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             4969 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4970 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             4971 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             4972 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             4973 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             4974 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             4975 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             4976 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             4977 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             4978 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             4979 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             4980 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             4981 ; 640  |
                             4982 ; 641  |typedef union               
                             4983 ; 642  |{
                             4984 ; 643  |    struct {       
                             4985 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             4986 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             4987 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             4988 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             4989 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             4990 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             4991 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             4992 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             4993 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             4994 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             4995 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             4996 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             4997 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             4998 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             4999 ; 658  |    } B;
                             5000 ; 659  |    int I;
                             5001 ; 660  |} usb_dcdcpersist_type;
                             5002 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             5003 ; 662  |
                             5004 ; 663  |
                             5005 ; 664  |
                             5006 ; 665  |#endif
                             5007 ; 666  |
                             5008 ; 667  |
                             5009 ; 668  |
                             5010 
                             5012 
                             5013 ; 18   |#include "regsusb20.h"
                             5014 
                             5016 
                             5017 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5018 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             5019 ; 3    |//;  File        : regsusb20ip.inc
                             5020 ; 4    |//;  Description : USB20 IP Register definition
                             5021 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5022 ; 6    |
                             5023 ; 7    |// The following naming conventions are followed in this file.
                             5024 ; 8    |// All registers are named using the format...
                             5025 ; 9    |//     HW_<module>_<regname>
                             5026 ; 10   |// where <module> is the module name which can be any of the following...
                             5027 ; 11   |//     USB20
                             5028 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             5029 ; 13   |// module name includes a number starting from 0 for the first instance of
                             5030 ; 14   |// that module)
                             5031 ; 15   |// <regname> is the specific register within that module
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5032 ; 16   |// We also define the following...
                             5033 ; 17   |//     HW_<module>_<regname>_BITPOS
                             5034 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5035 ; 19   |//     HW_<module>_<regname>_SETMASK
                             5036 ; 20   |// which does something else, and
                             5037 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             5038 ; 22   |// which does something else.
                             5039 ; 23   |// Other rules
                             5040 ; 24   |//     All caps
                             5041 ; 25   |//     Numeric identifiers start at 0
                             5042 ; 26   |
                             5043 ; 27   |#if !(defined(regsusb20inc))
                             5044 ; 28   |#define regsusb20inc 1
                             5045 ; 29   |
                             5046 ; 30   |#include "types.h"
                             5047 
                             5049 
                             5050 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5051 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5052 ; 3    |//
                             5053 ; 4    |// Filename: types.h
                             5054 ; 5    |// Description: Standard data types
                             5055 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5056 ; 7    |
                             5057 ; 8    |#ifndef _TYPES_H
                             5058 ; 9    |#define _TYPES_H
                             5059 ; 10   |
                             5060 ; 11   |// TODO:  move this outta here!
                             5061 ; 12   |#if !defined(NOERROR)
                             5062 ; 13   |#define NOERROR 0
                             5063 ; 14   |#define SUCCESS 0
                             5064 ; 15   |#endif 
                             5065 ; 16   |#if !defined(SUCCESS)
                             5066 ; 17   |#define SUCCESS  0
                             5067 ; 18   |#endif
                             5068 ; 19   |#if !defined(ERROR)
                             5069 ; 20   |#define ERROR   -1
                             5070 ; 21   |#endif
                             5071 ; 22   |#if !defined(FALSE)
                             5072 ; 23   |#define FALSE 0
                             5073 ; 24   |#endif
                             5074 ; 25   |#if !defined(TRUE)
                             5075 ; 26   |#define TRUE  1
                             5076 ; 27   |#endif
                             5077 ; 28   |
                             5078 ; 29   |#if !defined(NULL)
                             5079 ; 30   |#define NULL 0
                             5080 ; 31   |#endif
                             5081 ; 32   |
                             5082 ; 33   |#define MAX_INT     0x7FFFFF
                             5083 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5084 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5085 ; 36   |#define MAX_ULONG   (-1) 
                             5086 ; 37   |
                             5087 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5088 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5089 ; 40   |
                             5090 ; 41   |
                             5091 ; 42   |#define BYTE    unsigned char       // btVarName
                             5092 ; 43   |#define CHAR    signed char         // cVarName
                             5093 ; 44   |#define USHORT  unsigned short      // usVarName
                             5094 ; 45   |#define SHORT   unsigned short      // sVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5095 ; 46   |#define WORD    unsigned int        // wVarName
                             5096 ; 47   |#define INT     signed int          // iVarName
                             5097 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5098 ; 49   |#define LONG    signed long         // lVarName
                             5099 ; 50   |#define BOOL    unsigned int        // bVarName
                             5100 ; 51   |#define FRACT   _fract              // frVarName
                             5101 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5102 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5103 ; 54   |#define FLOAT   float               // fVarName
                             5104 ; 55   |#define DBL     double              // dVarName
                             5105 ; 56   |#define ENUM    enum                // eVarName
                             5106 ; 57   |#define CMX     _complex            // cmxVarName
                             5107 ; 58   |typedef WORD UCS3;                   // 
                             5108 ; 59   |
                             5109 ; 60   |#define UINT16  unsigned short
                             5110 ; 61   |#define UINT8   unsigned char   
                             5111 ; 62   |#define UINT32  unsigned long
                             5112 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5113 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5114 ; 65   |#define WCHAR   UINT16
                             5115 ; 66   |
                             5116 ; 67   |//UINT128 is 16 bytes or 6 words
                             5117 ; 68   |typedef struct UINT128_3500 {   
                             5118 ; 69   |    int val[6];     
                             5119 ; 70   |} UINT128_3500;
                             5120 ; 71   |
                             5121 ; 72   |#define UINT128   UINT128_3500
                             5122 ; 73   |
                             5123 ; 74   |// Little endian word packed byte strings:   
                             5124 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5125 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5126 ; 77   |// Little endian word packed byte strings:   
                             5127 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5128 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5129 ; 80   |
                             5130 ; 81   |// Declare Memory Spaces To Use When Coding
                             5131 ; 82   |// A. Sector Buffers
                             5132 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5133 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5134 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5135 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5136 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5137 ; 88   |// B. Media DDI Memory
                             5138 ; 89   |#define MEDIA_DDI_MEM _Y
                             5139 ; 90   |
                             5140 ; 91   |
                             5141 ; 92   |
                             5142 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5143 ; 94   |// Examples of circular pointers:
                             5144 ; 95   |//    INT CIRC cpiVarName
                             5145 ; 96   |//    DWORD CIRC cpdwVarName
                             5146 ; 97   |
                             5147 ; 98   |#define RETCODE INT                 // rcVarName
                             5148 ; 99   |
                             5149 ; 100  |// generic bitfield structure
                             5150 ; 101  |struct Bitfield {
                             5151 ; 102  |    unsigned int B0  :1;
                             5152 ; 103  |    unsigned int B1  :1;
                             5153 ; 104  |    unsigned int B2  :1;
                             5154 ; 105  |    unsigned int B3  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5155 ; 106  |    unsigned int B4  :1;
                             5156 ; 107  |    unsigned int B5  :1;
                             5157 ; 108  |    unsigned int B6  :1;
                             5158 ; 109  |    unsigned int B7  :1;
                             5159 ; 110  |    unsigned int B8  :1;
                             5160 ; 111  |    unsigned int B9  :1;
                             5161 ; 112  |    unsigned int B10 :1;
                             5162 ; 113  |    unsigned int B11 :1;
                             5163 ; 114  |    unsigned int B12 :1;
                             5164 ; 115  |    unsigned int B13 :1;
                             5165 ; 116  |    unsigned int B14 :1;
                             5166 ; 117  |    unsigned int B15 :1;
                             5167 ; 118  |    unsigned int B16 :1;
                             5168 ; 119  |    unsigned int B17 :1;
                             5169 ; 120  |    unsigned int B18 :1;
                             5170 ; 121  |    unsigned int B19 :1;
                             5171 ; 122  |    unsigned int B20 :1;
                             5172 ; 123  |    unsigned int B21 :1;
                             5173 ; 124  |    unsigned int B22 :1;
                             5174 ; 125  |    unsigned int B23 :1;
                             5175 ; 126  |};
                             5176 ; 127  |
                             5177 ; 128  |union BitInt {
                             5178 ; 129  |        struct Bitfield B;
                             5179 ; 130  |        int        I;
                             5180 ; 131  |};
                             5181 ; 132  |
                             5182 ; 133  |#define MAX_MSG_LENGTH 10
                             5183 ; 134  |struct CMessage
                             5184 ; 135  |{
                             5185 ; 136  |        unsigned int m_uLength;
                             5186 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5187 ; 138  |};
                             5188 ; 139  |
                             5189 ; 140  |typedef struct {
                             5190 ; 141  |    WORD m_wLength;
                             5191 ; 142  |    WORD m_wMessage;
                             5192 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5193 ; 144  |} Message;
                             5194 ; 145  |
                             5195 ; 146  |struct MessageQueueDescriptor
                             5196 ; 147  |{
                             5197 ; 148  |        int *m_pBase;
                             5198 ; 149  |        int m_iModulo;
                             5199 ; 150  |        int m_iSize;
                             5200 ; 151  |        int *m_pHead;
                             5201 ; 152  |        int *m_pTail;
                             5202 ; 153  |};
                             5203 ; 154  |
                             5204 ; 155  |struct ModuleEntry
                             5205 ; 156  |{
                             5206 ; 157  |    int m_iSignaledEventMask;
                             5207 ; 158  |    int m_iWaitEventMask;
                             5208 ; 159  |    int m_iResourceOfCode;
                             5209 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5210 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5211 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5212 ; 163  |    int m_uTimeOutHigh;
                             5213 ; 164  |    int m_uTimeOutLow;
                             5214 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5215 ; 166  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5216 ; 167  |
                             5217 ; 168  |union WaitMask{
                             5218 ; 169  |    struct B{
                             5219 ; 170  |        unsigned int m_bNone     :1;
                             5220 ; 171  |        unsigned int m_bMessage  :1;
                             5221 ; 172  |        unsigned int m_bTimer    :1;
                             5222 ; 173  |        unsigned int m_bButton   :1;
                             5223 ; 174  |    } B;
                             5224 ; 175  |    int I;
                             5225 ; 176  |} ;
                             5226 ; 177  |
                             5227 ; 178  |
                             5228 ; 179  |struct Button {
                             5229 ; 180  |        WORD wButtonEvent;
                             5230 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5231 ; 182  |};
                             5232 ; 183  |
                             5233 ; 184  |struct Message {
                             5234 ; 185  |        WORD wMsgLength;
                             5235 ; 186  |        WORD wMsgCommand;
                             5236 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5237 ; 188  |};
                             5238 ; 189  |
                             5239 ; 190  |union EventTypes {
                             5240 ; 191  |        struct CMessage msg;
                             5241 ; 192  |        struct Button Button ;
                             5242 ; 193  |        struct Message Message;
                             5243 ; 194  |};
                             5244 ; 195  |
                             5245 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5246 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5247 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5248 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5249 ; 200  |
                             5250 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5251 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5252 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5253 ; 204  |
                             5254 ; 205  |#if DEBUG
                             5255 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5256 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5257 ; 208  |#else 
                             5258 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5259 ; 210  |#define DebugBuildAssert(x)    
                             5260 ; 211  |#endif
                             5261 ; 212  |
                             5262 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5263 ; 214  |//  #pragma asm
                             5264 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5265 ; 216  |//  #pragma endasm
                             5266 ; 217  |
                             5267 ; 218  |
                             5268 ; 219  |#ifdef COLOR_262K
                             5269 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5270 ; 221  |#elif defined(COLOR_65K)
                             5271 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5272 ; 223  |#else
                             5273 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5274 ; 225  |#endif
                             5275 ; 226  |    
                             5276 ; 227  |#endif // #ifndef _TYPES_H
                             5277 
                             5279 
                             5280 ; 31   |
                             5281 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5282 ; 33   |//   USB2.0 STMP Registers 
                             5283 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5284 ; 35   |#define HW_USB_BASEADDR (0xF200)
                             5285 ; 36   |
                             5286 ; 37   |
                             5287 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             5288 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                             5289 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                             5290 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                             5291 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                             5292 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                             5293 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                             5294 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                             5295 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                             5296 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                             5297 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                             5298 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                             5299 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                             5300 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                             5301 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                             5302 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                             5303 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                             5304 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                             5305 ; 56   |
                             5306 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                             5307 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                             5308 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                             5309 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                             5310 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                             5311 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                             5312 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                             5313 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                             5314 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                             5315 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                             5316 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                             5317 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                             5318 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                             5319 ; 70   |
                             5320 ; 71   |
                             5321 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                             5322 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                             5323 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                             5324 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                             5325 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                             5326 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                             5327 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                             5328 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                             5329 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                             5330 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                             5331 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                             5332 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                             5333 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                             5334 ; 85   |
                             5335 ; 86   |typedef union               
                             5336 ; 87   |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5337 ; 88   |    struct {
                             5338 ; 89   |        int USBEN          :1;
                             5339 ; 90   |        int WAKEUPIRQ      :1;
                             5340 ; 91   |        int WAKEUPIE       :1;
                             5341 ; 92   |        int VBUSCXIRQ      :1;
                             5342 ; 93   |        int VBUSCXIE       :1;
                             5343 ; 94   |        int VBUSDISCXIRQ   :1;
                             5344 ; 95   |        int VBUSDISCXIE    :1;
                             5345 ; 96   |        int CLKOFF         :1;
                             5346 ; 97   |        int SUSP           :1;
                             5347 ; 98   |        int SUSPF          :1;
                             5348 ; 99   |        int UTMITST        :1;
                             5349 ; 100  |        int ARCCONNECT     :1;
                             5350 ; 101  |        int PLUGGEDIN_EN   :1;
                             5351 ; 102  |        int PLUGGEDIN      :1;
                             5352 ; 103  |        int                :8;
                             5353 ; 104  |        int HOSTDISCONNECT :1;
                             5354 ; 105  |        int VBUSSENSE      :1;
                             5355 ; 106  |    } B;
                             5356 ; 107  |    int I;
                             5357 ; 108  |} usbcsr_type;
                             5358 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                             5359 ; 110  |
                             5360 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             5361 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                             5362 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                             5363 ; 114  |
                             5364 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                             5365 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                             5366 ; 117  |
                             5367 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                             5368 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                             5369 ; 120  |
                             5370 ; 121  |typedef union               
                             5371 ; 122  |{
                             5372 ; 123  |    struct {
                             5373 ; 124  |        int ADD            :16;
                             5374 ; 125  |        int MEM            :2;
                             5375 ; 126  |        int                :6;
                             5376 ; 127  |    } B;
                             5377 ; 128  |    int I;
                             5378 ; 129  |} usbdmaoff_type;
                             5379 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                             5380 ; 131  |
                             5381 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                             5382 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                             5383 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                             5384 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                             5385 ; 136  |
                             5386 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                             5387 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                             5388 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                             5389 ; 140  |
                             5390 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                             5391 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                             5392 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                             5393 ; 144  |
                             5394 ; 145  |typedef union               
                             5395 ; 146  |{
                             5396 ; 147  |    struct {
                             5397 ; 148  |        int ADD            :9;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5398 ; 149  |        int                :7;
                             5399 ; 150  |        int RWB            :1;
                             5400 ; 151  |        int                :14;
                             5401 ; 152  |        int KICK           :1;
                             5402 ; 153  |    } B;
                             5403 ; 154  |    int I;
                             5404 ; 155  |} usbarcaccess_type;
                             5405 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                             5406 ; 157  |
                             5407 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                             5408 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                             5409 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                             5410 ; 161  |
                             5411 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                             5412 ; 163  |
                             5413 ; 164  |typedef union               
                             5414 ; 165  |{
                             5415 ; 166  |    struct {
                             5416 ; 167  |        int DATA           :16;
                             5417 ; 168  |        int                :8;
                             5418 ; 169  |    } B;
                             5419 ; 170  |    int I;
                             5420 ; 171  |} usbarcdatalow_type;
                             5421 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                             5422 ; 173  |
                             5423 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             5424 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                             5425 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                             5426 ; 177  |
                             5427 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                             5428 ; 179  |
                             5429 ; 180  |typedef union               
                             5430 ; 181  |{
                             5431 ; 182  |    struct {
                             5432 ; 183  |        int DATA           :16;
                             5433 ; 184  |        int                :8;
                             5434 ; 185  |    } B;
                             5435 ; 186  |    int I;
                             5436 ; 187  |} usbarcdatahigh_type;
                             5437 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                             5438 ; 189  |
                             5439 ; 190  |
                             5440 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5441 ; 192  |//   USB2.0 ARC Registers 
                             5442 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5443 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                             5444 ; 195  |
                             5445 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                             5446 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                             5447 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                             5448 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                             5449 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                             5450 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                             5451 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                             5452 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                             5453 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                             5454 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                             5455 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                             5456 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                             5457 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5458 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                             5459 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                             5460 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                             5461 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                             5462 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                             5463 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                             5464 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                             5465 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                             5466 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                             5467 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                             5468 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                             5469 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                             5470 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                             5471 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                             5472 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                             5473 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                             5474 ; 225  |
                             5475 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                             5476 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                             5477 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                             5478 ; 229  |
                             5479 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                             5480 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                             5481 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                             5482 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                             5483 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                             5484 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                             5485 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                             5486 ; 237  |
                             5487 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                             5488 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                             5489 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                             5490 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                             5491 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                             5492 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                             5493 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                             5494 ; 245  |
                             5495 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                             5496 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                             5497 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                             5498 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                             5499 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                             5500 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                             5501 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                             5502 ; 253  |
                             5503 ; 254  |typedef union               
                             5504 ; 255  |{
                             5505 ; 256  |    struct {
                             5506 ; 257  |        int N_PORTS         :4;
                             5507 ; 258  |        int PPC             :1;
                             5508 ; 259  |        int                 :3;
                             5509 ; 260  |        int N_PCC           :4;
                             5510 ; 261  |        int N_CC            :4;
                             5511 ; 262  |        int PI              :1;
                             5512 ; 263  |        int                 :3;
                             5513 ; 264  |        int N_PTT           :4;
                             5514 ; 265  |        int N_TT            :4;
                             5515 ; 266  |        int                 :20;
                             5516 ; 267  |    } B;
                             5517 ; 268  |    DWORD I;
                             5518 ; 269  |} hcsparams_type;
                             5519 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5520 ; 271  |
                             5521 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                             5522 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                             5523 ; 274  |
                             5524 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                             5525 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                             5526 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                             5527 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                             5528 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                             5529 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                             5530 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                             5531 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                             5532 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                             5533 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                             5534 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                             5535 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                             5536 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                             5537 ; 288  |
                             5538 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                             5539 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                             5540 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                             5541 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                             5542 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                             5543 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                             5544 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                             5545 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                             5546 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                             5547 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                             5548 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                             5549 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                             5550 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                             5551 ; 302  |
                             5552 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                             5553 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                             5554 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                             5555 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                             5556 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                             5557 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                             5558 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                             5559 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                             5560 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                             5561 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                             5562 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                             5563 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                             5564 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                             5565 ; 316  |
                             5566 ; 317  |typedef union               
                             5567 ; 318  |{
                             5568 ; 319  |    struct {
                             5569 ; 320  |        int RS              :1;
                             5570 ; 321  |        int RST             :1;
                             5571 ; 322  |        int FS0             :1;
                             5572 ; 323  |        int FS1             :1;
                             5573 ; 324  |        int PSE             :1;
                             5574 ; 325  |        int ASE             :1;
                             5575 ; 326  |        int IAA             :1;
                             5576 ; 327  |        int LR              :1;
                             5577 ; 328  |        int ASP0            :1;
                             5578 ; 329  |        int ASP1            :1;
                             5579 ; 330  |        int                 :1;
                             5580 ; 331  |        int ASPE            :1;
                             5581 ; 332  |        int                 :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5582 ; 333  |        int FS2             :1;
                             5583 ; 334  |        int ITC             :8;
                             5584 ; 335  |        int                 :24;
                             5585 ; 336  |    } B;
                             5586 ; 337  |    DWORD I;
                             5587 ; 338  |} usbcmd_type;
                             5588 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                             5589 ; 340  |
                             5590 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                             5591 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                             5592 ; 343  |
                             5593 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                             5594 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                             5595 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                             5596 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                             5597 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                             5598 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                             5599 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                             5600 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                             5601 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                             5602 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                             5603 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                             5604 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                             5605 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                             5606 ; 357  |
                             5607 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                             5608 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                             5609 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                             5610 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                             5611 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                             5612 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                             5613 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                             5614 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                             5615 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                             5616 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                             5617 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                             5618 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                             5619 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                             5620 ; 371  |
                             5621 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                             5622 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                             5623 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                             5624 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                             5625 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                             5626 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                             5627 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                             5628 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                             5629 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                             5630 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                             5631 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                             5632 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                             5633 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                             5634 ; 385  |
                             5635 ; 386  |
                             5636 ; 387  |typedef union               
                             5637 ; 388  |{
                             5638 ; 389  |    struct {
                             5639 ; 390  |        int UI              :1;
                             5640 ; 391  |        int UEI             :1;
                             5641 ; 392  |        int PCI             :1;
                             5642 ; 393  |        int FRI             :1;
                             5643 ; 394  |        int SEI             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5644 ; 395  |        int AAI             :1;
                             5645 ; 396  |        int URI             :1;
                             5646 ; 397  |        int STI             :1;
                             5647 ; 398  |        int SLI             :1;
                             5648 ; 399  |        int                 :3;
                             5649 ; 400  |        int HCH             :1;
                             5650 ; 401  |        int RCL             :1;
                             5651 ; 402  |        int PS              :1;
                             5652 ; 403  |        int AS              :1;
                             5653 ; 404  |        int                 :24;
                             5654 ; 405  |    } B;
                             5655 ; 406  |    DWORD I;
                             5656 ; 407  |} usbsts_type;
                             5657 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                             5658 ; 409  |
                             5659 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                             5660 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                             5661 ; 412  |
                             5662 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                             5663 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                             5664 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                             5665 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                             5666 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                             5667 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                             5668 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                             5669 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                             5670 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                             5671 ; 422  |
                             5672 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                             5673 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                             5674 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                             5675 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                             5676 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                             5677 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                             5678 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                             5679 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                             5680 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                             5681 ; 432  |
                             5682 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                             5683 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                             5684 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                             5685 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                             5686 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                             5687 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                             5688 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                             5689 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                             5690 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                             5691 ; 442  |
                             5692 ; 443  |
                             5693 ; 444  |typedef union               
                             5694 ; 445  |{
                             5695 ; 446  |    struct {
                             5696 ; 447  |        int UE              :1;
                             5697 ; 448  |        int UEE             :1;
                             5698 ; 449  |        int PCE             :1;
                             5699 ; 450  |        int FRE             :1;
                             5700 ; 451  |        int SEE             :1;
                             5701 ; 452  |        int AAE             :1;
                             5702 ; 453  |        int URE             :1;
                             5703 ; 454  |        int STE             :1;
                             5704 ; 455  |        int SLE             :1;
                             5705 ; 456  |        int                 :39;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5706 ; 457  |    } B;
                             5707 ; 458  |    DWORD I;
                             5708 ; 459  |} usbintr_type;
                             5709 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                             5710 ; 461  |
                             5711 ; 462  |
                             5712 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             5713 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                             5714 ; 465  |
                             5715 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                             5716 ; 467  |
                             5717 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                             5718 ; 469  |
                             5719 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                             5720 ; 471  |
                             5721 ; 472  |typedef union               
                             5722 ; 473  |{
                             5723 ; 474  |    struct {
                             5724 ; 475  |        int                 :25;
                             5725 ; 476  |        int ADD             :7;
                             5726 ; 477  |        int                 :16;
                             5727 ; 478  |    } B;
                             5728 ; 479  |    DWORD I;
                             5729 ; 480  |} devaddr_type;
                             5730 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                             5731 ; 482  |
                             5732 ; 483  |
                             5733 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                             5734 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                             5735 ; 486  |
                             5736 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                             5737 ; 488  |
                             5738 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                             5739 ; 490  |
                             5740 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                             5741 ; 492  |
                             5742 ; 493  |typedef union               
                             5743 ; 494  |{
                             5744 ; 495  |    struct {
                             5745 ; 496  |        int                 :10;
                             5746 ; 497  |        int ADD             :22;
                             5747 ; 498  |        int                 :16;
                             5748 ; 499  |    } B;
                             5749 ; 500  |    DWORD I;
                             5750 ; 501  |} endptlistaddr_type;
                             5751 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                             5752 ; 503  |
                             5753 ; 504  |
                             5754 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                             5755 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                             5756 ; 507  |
                             5757 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                             5758 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                             5759 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                             5760 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                             5761 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                             5762 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                             5763 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                             5764 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                             5765 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                             5766 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5767 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                             5768 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                             5769 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                             5770 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                             5771 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                             5772 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                             5773 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                             5774 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                             5775 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                             5776 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                             5777 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                             5778 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                             5779 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                             5780 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                             5781 ; 532  |
                             5782 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                             5783 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                             5784 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                             5785 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                             5786 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                             5787 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                             5788 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                             5789 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                             5790 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                             5791 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                             5792 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                             5793 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                             5794 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                             5795 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                             5796 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                             5797 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                             5798 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                             5799 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                             5800 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                             5801 ; 552  |
                             5802 ; 553  |// We need to equate the following label like this due to a sign extension problem
                             5803 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                             5804 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                             5805 ; 556  |
                             5806 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                             5807 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                             5808 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                             5809 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                             5810 ; 561  |
                             5811 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                             5812 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                             5813 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                             5814 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                             5815 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                             5816 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                             5817 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                             5818 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                             5819 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                             5820 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                             5821 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                             5822 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                             5823 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                             5824 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                             5825 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                             5826 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                             5827 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                             5828 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5829 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                             5830 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                             5831 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                             5832 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                             5833 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                             5834 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                             5835 ; 586  |
                             5836 ; 587  |typedef union               
                             5837 ; 588  |{
                             5838 ; 589  |    struct {
                             5839 ; 590  |        int CCS             :1;
                             5840 ; 591  |        int CSC             :1;
                             5841 ; 592  |        int PE              :1;
                             5842 ; 593  |        int PEC             :1;
                             5843 ; 594  |        int OCA             :1;
                             5844 ; 595  |        int OCC             :1;
                             5845 ; 596  |        int FPR             :1;
                             5846 ; 597  |        int SUSP            :1;
                             5847 ; 598  |        int PR              :1;
                             5848 ; 599  |        int HSP             :1;
                             5849 ; 600  |        int LS              :2;
                             5850 ; 601  |        int PP              :1;
                             5851 ; 602  |        int PO              :1;
                             5852 ; 603  |        int PIC             :2;
                             5853 ; 604  |        int PTC             :4;
                             5854 ; 605  |        int WKCN            :1;
                             5855 ; 606  |        int WKDS            :1;
                             5856 ; 607  |        int WKOC            :1;
                             5857 ; 608  |        int PHCD            :1;
                             5858 ; 609  |        int PFSC            :1;
                             5859 ; 610  |        int                 :1;
                             5860 ; 611  |        int PSPD            :2;
                             5861 ; 612  |        int                 :1;
                             5862 ; 613  |        int PTW             :1;
                             5863 ; 614  |        int STS             :1;
                             5864 ; 615  |        int PTS             :1;
                             5865 ; 616  |        int                 :16;
                             5866 ; 617  |    } B;
                             5867 ; 618  |    DWORD I;
                             5868 ; 619  |} portsc1_type;
                             5869 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                             5870 ; 621  |
                             5871 ; 622  |
                             5872 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                             5873 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                             5874 ; 625  |
                             5875 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                             5876 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                             5877 ; 628  |
                             5878 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                             5879 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                             5880 ; 631  |
                             5881 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                             5882 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                             5883 ; 634  |
                             5884 ; 635  |typedef union               
                             5885 ; 636  |{
                             5886 ; 637  |    struct {
                             5887 ; 638  |        int CM              :2;
                             5888 ; 639  |        int ES              :1;
                             5889 ; 640  |        int                 :46;
                             5890 ; 641  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5891 ; 642  |    DWORD I;
                             5892 ; 643  |} usbmode_type;
                             5893 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                             5894 ; 645  |
                             5895 ; 646  |
                             5896 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                             5897 ; 648  |//  The following endpoint equates are common for the following registers
                             5898 ; 649  |
                             5899 ; 650  |#define ENDPOINT0_BITPOS (0)
                             5900 ; 651  |#define ENDPOINT1_BITPOS (1)
                             5901 ; 652  |#define ENDPOINT2_BITPOS (2)
                             5902 ; 653  |#define ENDPOINT3_BITPOS (3)
                             5903 ; 654  |#define ENDPOINT4_BITPOS (4)
                             5904 ; 655  |#define ENDPOINT5_BITPOS (5)
                             5905 ; 656  |#define ENDPOINT6_BITPOS (6)
                             5906 ; 657  |#define ENDPOINT7_BITPOS (7)
                             5907 ; 658  |#define ENDPOINT8_BITPOS (8)
                             5908 ; 659  |#define ENDPOINT9_BITPOS (9)
                             5909 ; 660  |#define ENDPOINT10_BITPOS (10)
                             5910 ; 661  |#define ENDPOINT11_BITPOS (11)
                             5911 ; 662  |#define ENDPOINT12_BITPOS (12)
                             5912 ; 663  |#define ENDPOINT13_BITPOS (13)
                             5913 ; 664  |#define ENDPOINT14_BITPOS (14)
                             5914 ; 665  |#define ENDPOINT15_BITPOS (15)
                             5915 ; 666  |
                             5916 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                             5917 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                             5918 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                             5919 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                             5920 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                             5921 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                             5922 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                             5923 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                             5924 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                             5925 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                             5926 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                             5927 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                             5928 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                             5929 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                             5930 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                             5931 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                             5932 ; 683  |
                             5933 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                             5934 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                             5935 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                             5936 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                             5937 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                             5938 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                             5939 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                             5940 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                             5941 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                             5942 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                             5943 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                             5944 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                             5945 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                             5946 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                             5947 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                             5948 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                             5949 ; 700  |
                             5950 ; 701  |typedef union               
                             5951 ; 702  |{
                             5952 ; 703  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5953 ; 704  |        int EP0              :1;
                             5954 ; 705  |        int EP1              :1;
                             5955 ; 706  |        int EP2              :1;
                             5956 ; 707  |        int EP3              :1;
                             5957 ; 708  |        int EP4              :1;
                             5958 ; 709  |        int EP5              :1;
                             5959 ; 710  |        int EP6              :1;
                             5960 ; 711  |        int EP7              :1;
                             5961 ; 712  |        int EP8              :1;
                             5962 ; 713  |        int EP9              :1;
                             5963 ; 714  |        int EP10             :1;
                             5964 ; 715  |        int EP11             :1;
                             5965 ; 716  |        int EP12             :1;
                             5966 ; 717  |        int EP13             :1;
                             5967 ; 718  |        int EP14             :1;
                             5968 ; 719  |        int EP15             :1;
                             5969 ; 720  |        int                  :32;
                             5970 ; 721  |    } B;
                             5971 ; 722  |    DWORD I;
                             5972 ; 723  |} endpsetupstat_type;
                             5973 ; 724  |
                             5974 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                             5975 ; 726  |
                             5976 ; 727  |typedef union               
                             5977 ; 728  |{
                             5978 ; 729  |    struct {
                             5979 ; 730  |        int EP0              :1;
                             5980 ; 731  |        int EP1              :1;
                             5981 ; 732  |        int EP2              :1;
                             5982 ; 733  |        int EP3              :1;
                             5983 ; 734  |        int EP4              :1;
                             5984 ; 735  |        int EP5              :1;
                             5985 ; 736  |        int EP6              :1;
                             5986 ; 737  |        int EP7              :1;
                             5987 ; 738  |        int EP8              :1;
                             5988 ; 739  |        int EP9              :1;
                             5989 ; 740  |        int EP10             :1;
                             5990 ; 741  |        int EP11             :1;
                             5991 ; 742  |        int EP12             :1;
                             5992 ; 743  |        int EP13             :1;
                             5993 ; 744  |        int EP14             :1;
                             5994 ; 745  |        int EP15             :1;
                             5995 ; 746  |        int                  :8;
                             5996 ; 747  |    } B;
                             5997 ; 748  |    WORD I;
                             5998 ; 749  |} endpt_type;
                             5999 
                             6037 
                             6038 ; 750  |
                             6039 ; 751  |typedef union
                             6040 ; 752  |{
                             6041 ; 753  |   struct {
                             6042 ; 754  |       endpt_type  RX;
                             6043 ; 755  |       endpt_type  TX;
                             6044 ; 756  |   } W;
                             6045 ; 757  |   DWORD DW;
                             6046 ; 758  |} endptrxtx_type;
                             6047 ; 759  |
                             6048 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6049 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                             6050 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                             6051 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                             6052 ; 764  |
                             6053 ; 765  |
                             6054 ; 766  |
                             6055 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                             6056 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                             6057 ; 769  |
                             6058 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                             6059 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                             6060 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                             6061 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                             6062 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                             6063 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                             6064 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                             6065 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                             6066 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                             6067 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                             6068 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                             6069 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                             6070 ; 782  |
                             6071 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                             6072 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                             6073 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                             6074 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                             6075 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                             6076 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                             6077 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                             6078 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                             6079 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                             6080 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                             6081 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                             6082 ; 794  |
                             6083 ; 795  |// We need to equate the following label like this due to a sign extension problem
                             6084 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                             6085 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                             6086 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                             6087 ; 799  |
                             6088 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                             6089 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                             6090 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                             6091 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                             6092 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                             6093 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                             6094 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                             6095 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                             6096 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                             6097 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                             6098 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                             6099 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                             6100 ; 812  |
                             6101 ; 813  |
                             6102 ; 814  |typedef union               
                             6103 ; 815  |{
                             6104 ; 816  |    struct {
                             6105 ; 817  |        int RXS             :1;
                             6106 ; 818  |        int RXD             :1;
                             6107 ; 819  |        int RXT             :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6108 ; 820  |        int                 :1;
                             6109 ; 821  |        int RXI             :1;
                             6110 ; 822  |        int RXR             :1;
                             6111 ; 823  |        int RXE             :1;
                             6112 ; 824  |        int                 :8;
                             6113 ; 825  |        int TXS             :1;
                             6114 ; 826  |        int TXD             :1;
                             6115 ; 827  |        int TXT             :2;
                             6116 ; 828  |        int                 :1;
                             6117 ; 829  |        int TXI             :1;
                             6118 ; 830  |        int TXR             :1;
                             6119 ; 831  |        int TXE             :1;
                             6120 ; 832  |        int                 :24;
                             6121 ; 833  |    } B;
                             6122 ; 834  |    DWORD I;
                             6123 ; 835  |} endptctrl_type;
                             6124 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                             6125 ; 837  |
                             6126 ; 838  |#endif
                             6127 ; 839  |
                             6128 ; 840  |
                             6129 
                             6131 
                             6132 ; 19   |#include "regsrevision.h"
                             6133 
                             6135 
                             6136 ; 1    |#if !(defined(__HW_REVR))
                             6137 ; 2    |#define __HW_REVR 1
                             6138 ; 3    |
                             6139 ; 4    |
                             6140 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             6141 ; 6    |
                             6142 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             6143 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             6144 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             6145 ; 10   |
                             6146 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             6147 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             6148 ; 13   |
                             6149 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             6150 ; 15   |
                             6151 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             6152 ; 17   |
                             6153 ; 18   |
                             6154 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             6155 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             6156 ; 21   |//  June15 2004: C struct updated to be correct: 
                             6157 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             6158 ; 23   |typedef union               
                             6159 ; 24   |{
                             6160 ; 25   |    struct {
                             6161 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             6162 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             6163 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             6164 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             6165 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             6166 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             6167 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6168 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             6169 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             6170 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             6171 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             6172 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             6173 ; 38   |    } B;
                             6174 ; 39   |
                             6175 ; 40   |    int I;
                             6176 ; 41   |
                             6177 ; 42   |} revr_type;
                             6178 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             6179 ; 44   |
                             6180 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             6181 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             6182 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             6183 ; 48   |
                             6184 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             6185 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             6186 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             6187 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             6188 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             6189 ; 54   |
                             6190 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             6191 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             6192 ; 57   |
                             6193 ; 58   |#endif //!@def(__HW_REVR)
                             6194 ; 59   |
                             6195 
                             6197 
                             6198 ; 20   |#include "regsclkctrl.h"
                             6199 
                             6201 
                             6202 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             6203 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             6204 ; 3    |
                             6205 ; 4    |
                             6206 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             6207 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             6208 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             6209 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             6210 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             6211 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             6212 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                             6213 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             6214 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             6215 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             6216 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             6217 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             6218 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             6219 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             6220 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             6221 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             6222 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             6223 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             6224 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             6225 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             6226 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             6227 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             6228 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             6229 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             6230 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6231 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             6232 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             6233 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             6234 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             6235 ; 34   |
                             6236 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             6237 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             6238 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             6239 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             6240 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             6241 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             6242 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             6243 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             6244 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             6245 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             6246 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             6247 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             6248 ; 47   |
                             6249 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             6250 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             6251 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             6252 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             6253 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             6254 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             6255 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             6256 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             6257 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             6258 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             6259 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             6260 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             6261 ; 60   |
                             6262 ; 61   |typedef union               
                             6263 ; 62   |{
                             6264 ; 63   |    struct
                             6265 ; 64   |    {
                             6266 ; 65   |        int CKRST       :1; // Clock Reset
                             6267 ; 66   |        int LTC         :1;
                             6268 ; 67   |        int PLLEN       :1;
                             6269 ; 68   |        int XTLEN       :1;
                             6270 ; 69   |        int FLB         :1;
                             6271 ; 70   |        unsigned ADIV   :3;
                             6272 ; 71   |        int CKSRC       :1;
                             6273 ; 72   |        unsigned DDIV   :3;
                             6274 ; 73   |        unsigned PDIV   :5;
                             6275 ; 74   |        int PWDN        :1;
                             6276 ; 75   |        int ACKEN       :1;
                             6277 ; 76   |        int LOCK        :1;
                             6278 ; 77   |        unsigned ADIV1  :3;
                             6279 ; 78   |        unsigned DDIV_MSB:1;
                             6280 ; 79   |    } B;
                             6281 ; 80   |
                             6282 ; 81   |    int I;
                             6283 ; 82   |    unsigned int U;
                             6284 ; 83   |
                             6285 ; 84   |} ccr_type;
                             6286 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             6287 ; 86   |
                             6288 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             6289 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             6290 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             6291 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             6292 ; 91   |#define HW_RCR_IRQA_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6293 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             6294 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             6295 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             6296 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             6297 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             6298 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             6299 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             6300 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             6301 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             6302 ; 101  |
                             6303 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             6304 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             6305 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             6306 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             6307 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             6308 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             6309 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             6310 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             6311 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             6312 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             6313 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             6314 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             6315 ; 114  |
                             6316 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             6317 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             6318 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             6319 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             6320 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             6321 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             6322 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             6323 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             6324 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             6325 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             6326 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             6327 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             6328 ; 127  |
                             6329 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             6330 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             6331 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             6332 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             6333 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             6334 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             6335 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             6336 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                             6337 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             6338 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             6339 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             6340 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             6341 ; 140  |
                             6342 ; 141  |typedef union               
                             6343 ; 142  |{
                             6344 ; 143  |    struct
                             6345 ; 144  |   {
                             6346 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             6347 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             6348 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             6349 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             6350 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             6351 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             6352 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             6353 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             6354 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6355 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             6356 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             6357 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             6358 ; 157  |    } B;
                             6359 ; 158  |
                             6360 ; 159  |    int I;
                             6361 ; 160  |    unsigned int U;
                             6362 ; 161  |
                             6363 ; 162  |} rcr_type;
                             6364 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             6365 ; 164  |
                             6366 ; 165  |
                             6367 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             6368 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             6369 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             6370 ; 169  |
                             6371 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             6372 ; 171  |
                             6373 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             6374 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             6375 ; 174  |typedef union               
                             6376 ; 175  |{
                             6377 ; 176  |    struct
                             6378 ; 177  |   {
                             6379 ; 178  |        int LOW;
                             6380 ; 179  |    } B;
                             6381 ; 180  |
                             6382 ; 181  |    int I;
                             6383 ; 182  |    unsigned int U;
                             6384 ; 183  |
                             6385 ; 184  |} dclkcntl_type;
                             6386 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             6387 ; 186  |
                             6388 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             6389 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             6390 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             6391 ; 190  |
                             6392 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             6393 ; 192  |
                             6394 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             6395 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             6396 ; 195  |typedef union               
                             6397 ; 196  |{
                             6398 ; 197  |    struct
                             6399 ; 198  |   {
                             6400 ; 199  |        int HIGH;
                             6401 ; 200  |    } B;
                             6402 ; 201  |
                             6403 ; 202  |    int I;
                             6404 ; 203  |    unsigned int U;
                             6405 ; 204  |
                             6406 ; 205  |} dclkcntu_type;
                             6407 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             6408 ; 207  |
                             6409 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             6410 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             6411 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             6412 ; 211  |
                             6413 ; 212  |// Clock count register (lower)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6414 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             6415 ; 214  |// Clock count register (upper)
                             6416 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             6417 ; 216  |// Cycle steal count register
                             6418 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             6419 ; 218  |
                             6420 ; 219  |#endif
                             6421 ; 220  |
                             6422 ; 221  |
                             6423 
                             6425 
                             6426 ; 21   |#include "regslradc.h"
                             6427 
                             6429 
                             6430 ; 1    |#if !(defined(regslradcinc))
                             6431 ; 2    |
                             6432 ; 3    |#define regslradcinc 1
                             6433 ; 4    |
                             6434 ; 5    |#include "types.h"
                             6435 
                             6437 
                             6438 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6439 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6440 ; 3    |//
                             6441 ; 4    |// Filename: types.h
                             6442 ; 5    |// Description: Standard data types
                             6443 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6444 ; 7    |
                             6445 ; 8    |#ifndef _TYPES_H
                             6446 ; 9    |#define _TYPES_H
                             6447 ; 10   |
                             6448 ; 11   |// TODO:  move this outta here!
                             6449 ; 12   |#if !defined(NOERROR)
                             6450 ; 13   |#define NOERROR 0
                             6451 ; 14   |#define SUCCESS 0
                             6452 ; 15   |#endif 
                             6453 ; 16   |#if !defined(SUCCESS)
                             6454 ; 17   |#define SUCCESS  0
                             6455 ; 18   |#endif
                             6456 ; 19   |#if !defined(ERROR)
                             6457 ; 20   |#define ERROR   -1
                             6458 ; 21   |#endif
                             6459 ; 22   |#if !defined(FALSE)
                             6460 ; 23   |#define FALSE 0
                             6461 ; 24   |#endif
                             6462 ; 25   |#if !defined(TRUE)
                             6463 ; 26   |#define TRUE  1
                             6464 ; 27   |#endif
                             6465 ; 28   |
                             6466 ; 29   |#if !defined(NULL)
                             6467 ; 30   |#define NULL 0
                             6468 ; 31   |#endif
                             6469 ; 32   |
                             6470 ; 33   |#define MAX_INT     0x7FFFFF
                             6471 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6472 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6473 ; 36   |#define MAX_ULONG   (-1) 
                             6474 ; 37   |
                             6475 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6476 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6477 ; 40   |
                             6478 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6479 ; 42   |#define BYTE    unsigned char       // btVarName
                             6480 ; 43   |#define CHAR    signed char         // cVarName
                             6481 ; 44   |#define USHORT  unsigned short      // usVarName
                             6482 ; 45   |#define SHORT   unsigned short      // sVarName
                             6483 ; 46   |#define WORD    unsigned int        // wVarName
                             6484 ; 47   |#define INT     signed int          // iVarName
                             6485 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6486 ; 49   |#define LONG    signed long         // lVarName
                             6487 ; 50   |#define BOOL    unsigned int        // bVarName
                             6488 ; 51   |#define FRACT   _fract              // frVarName
                             6489 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6490 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6491 ; 54   |#define FLOAT   float               // fVarName
                             6492 ; 55   |#define DBL     double              // dVarName
                             6493 ; 56   |#define ENUM    enum                // eVarName
                             6494 ; 57   |#define CMX     _complex            // cmxVarName
                             6495 ; 58   |typedef WORD UCS3;                   // 
                             6496 ; 59   |
                             6497 ; 60   |#define UINT16  unsigned short
                             6498 ; 61   |#define UINT8   unsigned char   
                             6499 ; 62   |#define UINT32  unsigned long
                             6500 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6501 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6502 ; 65   |#define WCHAR   UINT16
                             6503 ; 66   |
                             6504 ; 67   |//UINT128 is 16 bytes or 6 words
                             6505 ; 68   |typedef struct UINT128_3500 {   
                             6506 ; 69   |    int val[6];     
                             6507 ; 70   |} UINT128_3500;
                             6508 ; 71   |
                             6509 ; 72   |#define UINT128   UINT128_3500
                             6510 ; 73   |
                             6511 ; 74   |// Little endian word packed byte strings:   
                             6512 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6513 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6514 ; 77   |// Little endian word packed byte strings:   
                             6515 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6516 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6517 ; 80   |
                             6518 ; 81   |// Declare Memory Spaces To Use When Coding
                             6519 ; 82   |// A. Sector Buffers
                             6520 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6521 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6522 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6523 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6524 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6525 ; 88   |// B. Media DDI Memory
                             6526 ; 89   |#define MEDIA_DDI_MEM _Y
                             6527 ; 90   |
                             6528 ; 91   |
                             6529 ; 92   |
                             6530 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6531 ; 94   |// Examples of circular pointers:
                             6532 ; 95   |//    INT CIRC cpiVarName
                             6533 ; 96   |//    DWORD CIRC cpdwVarName
                             6534 ; 97   |
                             6535 ; 98   |#define RETCODE INT                 // rcVarName
                             6536 ; 99   |
                             6537 ; 100  |// generic bitfield structure
                             6538 ; 101  |struct Bitfield {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6539 ; 102  |    unsigned int B0  :1;
                             6540 ; 103  |    unsigned int B1  :1;
                             6541 ; 104  |    unsigned int B2  :1;
                             6542 ; 105  |    unsigned int B3  :1;
                             6543 ; 106  |    unsigned int B4  :1;
                             6544 ; 107  |    unsigned int B5  :1;
                             6545 ; 108  |    unsigned int B6  :1;
                             6546 ; 109  |    unsigned int B7  :1;
                             6547 ; 110  |    unsigned int B8  :1;
                             6548 ; 111  |    unsigned int B9  :1;
                             6549 ; 112  |    unsigned int B10 :1;
                             6550 ; 113  |    unsigned int B11 :1;
                             6551 ; 114  |    unsigned int B12 :1;
                             6552 ; 115  |    unsigned int B13 :1;
                             6553 ; 116  |    unsigned int B14 :1;
                             6554 ; 117  |    unsigned int B15 :1;
                             6555 ; 118  |    unsigned int B16 :1;
                             6556 ; 119  |    unsigned int B17 :1;
                             6557 ; 120  |    unsigned int B18 :1;
                             6558 ; 121  |    unsigned int B19 :1;
                             6559 ; 122  |    unsigned int B20 :1;
                             6560 ; 123  |    unsigned int B21 :1;
                             6561 ; 124  |    unsigned int B22 :1;
                             6562 ; 125  |    unsigned int B23 :1;
                             6563 ; 126  |};
                             6564 ; 127  |
                             6565 ; 128  |union BitInt {
                             6566 ; 129  |        struct Bitfield B;
                             6567 ; 130  |        int        I;
                             6568 ; 131  |};
                             6569 ; 132  |
                             6570 ; 133  |#define MAX_MSG_LENGTH 10
                             6571 ; 134  |struct CMessage
                             6572 ; 135  |{
                             6573 ; 136  |        unsigned int m_uLength;
                             6574 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6575 ; 138  |};
                             6576 ; 139  |
                             6577 ; 140  |typedef struct {
                             6578 ; 141  |    WORD m_wLength;
                             6579 ; 142  |    WORD m_wMessage;
                             6580 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6581 ; 144  |} Message;
                             6582 ; 145  |
                             6583 ; 146  |struct MessageQueueDescriptor
                             6584 ; 147  |{
                             6585 ; 148  |        int *m_pBase;
                             6586 ; 149  |        int m_iModulo;
                             6587 ; 150  |        int m_iSize;
                             6588 ; 151  |        int *m_pHead;
                             6589 ; 152  |        int *m_pTail;
                             6590 ; 153  |};
                             6591 ; 154  |
                             6592 ; 155  |struct ModuleEntry
                             6593 ; 156  |{
                             6594 ; 157  |    int m_iSignaledEventMask;
                             6595 ; 158  |    int m_iWaitEventMask;
                             6596 ; 159  |    int m_iResourceOfCode;
                             6597 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6598 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6599 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6600 ; 163  |    int m_uTimeOutHigh;
                             6601 ; 164  |    int m_uTimeOutLow;
                             6602 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6603 ; 166  |};
                             6604 ; 167  |
                             6605 ; 168  |union WaitMask{
                             6606 ; 169  |    struct B{
                             6607 ; 170  |        unsigned int m_bNone     :1;
                             6608 ; 171  |        unsigned int m_bMessage  :1;
                             6609 ; 172  |        unsigned int m_bTimer    :1;
                             6610 ; 173  |        unsigned int m_bButton   :1;
                             6611 ; 174  |    } B;
                             6612 ; 175  |    int I;
                             6613 ; 176  |} ;
                             6614 ; 177  |
                             6615 ; 178  |
                             6616 ; 179  |struct Button {
                             6617 ; 180  |        WORD wButtonEvent;
                             6618 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6619 ; 182  |};
                             6620 ; 183  |
                             6621 ; 184  |struct Message {
                             6622 ; 185  |        WORD wMsgLength;
                             6623 ; 186  |        WORD wMsgCommand;
                             6624 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6625 ; 188  |};
                             6626 ; 189  |
                             6627 ; 190  |union EventTypes {
                             6628 ; 191  |        struct CMessage msg;
                             6629 ; 192  |        struct Button Button ;
                             6630 ; 193  |        struct Message Message;
                             6631 ; 194  |};
                             6632 ; 195  |
                             6633 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6634 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6635 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6636 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6637 ; 200  |
                             6638 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6639 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6640 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6641 ; 204  |
                             6642 ; 205  |#if DEBUG
                             6643 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6644 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6645 ; 208  |#else 
                             6646 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6647 ; 210  |#define DebugBuildAssert(x)    
                             6648 ; 211  |#endif
                             6649 ; 212  |
                             6650 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6651 ; 214  |//  #pragma asm
                             6652 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6653 ; 216  |//  #pragma endasm
                             6654 ; 217  |
                             6655 ; 218  |
                             6656 ; 219  |#ifdef COLOR_262K
                             6657 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6658 ; 221  |#elif defined(COLOR_65K)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6659 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             6660 ; 223  |#else
                             6661 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6662 ; 225  |#endif
                             6663 ; 226  |    
                             6664 ; 227  |#endif // #ifndef _TYPES_H
                             6665 
                             6667 
                             6668 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6669 ; 7    |
                             6670 ; 8    |//   SYSTEM STMP Registers 
                             6671 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6672 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6673 ; 11   |
                             6674 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6675 ; 13   |
                             6676 ; 14   |
                             6677 ; 15   |
                             6678 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6679 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6680 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6681 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6682 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6683 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6684 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6685 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6686 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6687 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6688 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6689 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6690 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6691 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6692 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6693 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6694 ; 32   |
                             6695 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6696 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6697 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6698 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6699 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6700 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6701 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6702 ; 40   |
                             6703 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             6704 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6705 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             6706 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             6707 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             6708 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             6709 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             6710 ; 48   |
                             6711 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6712 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6713 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6714 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6715 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6716 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6717 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6718 ; 56   |
                             6719 ; 57   |typedef union               
                             6720 ; 58   |{
                             6721 ; 59   |    struct {
                             6722 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6723 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6724 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6725 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6726 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6727 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6728 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6729 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6730 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6731 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6732 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             6733 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             6734 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             6735 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             6736 ; 74   |    } B;
                             6737 ; 75   |   unsigned int I;
                             6738 ; 76   |        unsigned int U;
                             6739 ; 77   |} lradc_ctrl_type;
                             6740 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             6741 ; 79   |
                             6742 ; 80   |
                             6743 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6744 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6745 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6746 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6747 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6748 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6749 ; 87   |
                             6750 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6751 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6752 ; 90   |
                             6753 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6754 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6755 ; 93   |
                             6756 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             6757 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             6758 ; 96   |
                             6759 ; 97   |
                             6760 ; 98   |typedef union               
                             6761 ; 99   |{
                             6762 ; 100  |    struct {
                             6763 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6764 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6765 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6766 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6767 ; 105  |    } B;
                             6768 ; 106  |    unsigned int I;
                             6769 ; 107  |} lradc_thrsh_type;
                             6770 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             6771 ; 109  |
                             6772 ; 110  |
                             6773 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6774 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6775 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6776 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6777 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6778 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6779 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6780 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6781 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6782 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6783 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6784 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6785 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6786 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6787 ; 125  |
                             6788 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6789 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6790 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6791 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6792 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6793 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6794 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6795 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6796 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6797 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6798 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6799 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6800 ; 138  |
                             6801 ; 139  |
                             6802 ; 140  |
                             6803 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             6804 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             6805 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             6806 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             6807 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             6808 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             6809 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             6810 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             6811 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             6812 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             6813 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             6814 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6815 ; 153  |
                             6816 ; 154  |
                             6817 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             6818 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             6819 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             6820 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             6821 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             6822 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             6823 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             6824 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             6825 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             6826 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             6827 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             6828 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             6829 ; 167  |
                             6830 ; 168  |typedef union               
                             6831 ; 169  |{
                             6832 ; 170  |    struct {
                             6833 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             6834 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             6835 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             6836 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             6837 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             6838 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             6839 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             6840 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             6841 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             6842 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             6843 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             6844 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             6845 ; 183  |    } B;
                             6846 ; 184  |    unsigned int I;
                             6847 ; 185  |} lradc_result_type;
                             6848 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             6849 ; 187  |
                             6850 ; 188  |
                             6851 ; 189  |
                             6852 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             6853 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             6854 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             6855 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             6856 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6857 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             6858 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             6859 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             6860 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             6861 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             6862 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             6863 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             6864 ; 202  |
                             6865 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             6866 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6867 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             6868 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             6869 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             6870 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             6871 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             6872 ; 210  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6873 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             6874 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             6875 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             6876 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             6877 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             6878 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             6879 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             6880 ; 218  |
                             6881 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             6882 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             6883 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             6884 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             6885 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             6886 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             6887 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             6888 ; 226  |
                             6889 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             6890 ; 228  |
                             6891 ; 229  |
                             6892 ; 230  |
                             6893 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             6894 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             6895 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             6896 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             6897 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             6898 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             6899 ; 237  |
                             6900 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             6901 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             6902 ; 240  |
                             6903 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             6904 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             6905 ; 243  |
                             6906 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             6907 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             6908 ; 246  |
                             6909 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             6910 ; 248  |
                             6911 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             6912 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             6913 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             6914 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             6915 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             6916 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             6917 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             6918 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             6919 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6920 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             6921 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             6922 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             6923 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             6924 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             6925 ; 263  |
                             6926 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             6927 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             6928 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             6929 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             6930 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             6931 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             6932 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             6933 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             6934 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             6935 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             6936 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             6937 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             6938 ; 276  |
                             6939 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             6940 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             6941 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             6942 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             6943 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             6944 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             6945 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             6946 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             6947 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             6948 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             6949 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             6950 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             6951 ; 289  |
                             6952 ; 290  |
                             6953 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             6954 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             6955 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             6956 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             6957 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             6958 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             6959 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             6960 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             6961 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             6962 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             6963 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             6964 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             6965 ; 303  |
                             6966 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             6967 ; 305  |
                             6968 ; 306  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6969 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             6970 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             6971 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             6972 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6973 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             6974 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             6975 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             6976 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             6977 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             6978 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             6979 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             6980 ; 318  |
                             6981 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             6982 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6983 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             6984 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             6985 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             6986 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             6987 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             6988 ; 326  |
                             6989 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             6990 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             6991 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             6992 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             6993 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             6994 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             6995 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             6996 ; 334  |
                             6997 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             6998 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             6999 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7000 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7001 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7002 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7003 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7004 ; 342  |
                             7005 ; 343  |
                             7006 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7007 ; 345  |
                             7008 ; 346  |
                             7009 ; 347  |
                             7010 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7011 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7012 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7013 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7014 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7015 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7016 ; 354  |
                             7017 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7018 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7019 ; 357  |
                             7020 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7021 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7022 ; 360  |
                             7023 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7024 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7025 ; 363  |
                             7026 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7027 ; 365  |
                             7028 ; 366  |
                             7029 ; 367  |
                             7030 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7031 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7032 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7033 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7034 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7035 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7036 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7037 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7038 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7039 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7040 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7041 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7042 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7043 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7044 ; 382  |
                             7045 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7046 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7047 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7048 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7049 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7050 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7051 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7052 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7053 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7054 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7055 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7056 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7057 ; 395  |
                             7058 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7059 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7060 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7061 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7062 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7063 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7064 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             7065 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7066 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             7067 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7068 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7069 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             7070 ; 408  |
                             7071 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7072 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7073 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7074 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7075 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7076 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7077 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7078 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7079 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7080 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7081 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7082 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7083 ; 421  |
                             7084 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             7085 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7086 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7087 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7088 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7089 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7090 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7091 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7092 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7093 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7094 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7095 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7096 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7097 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7098 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7099 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7100 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7101 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             7102 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             7103 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7104 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7105 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7106 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7107 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7108 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7109 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7110 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7111 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7112 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7113 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7114 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7115 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7116 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7117 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7118 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7119 ; 457  |
                             7120 ; 458  |//Needed by button.asm
                             7121 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7122 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7123 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7124 ; 462  |
                             7125 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7126 ; 464  |
                             7127 ; 465  |#endif
                             7128 ; 466  |
                             7129 ; 467  |
                             7130 
                             7132 
                             7133 ; 22   |#include "regsgpio.h"
                             7134 
                             7136 
                             7137 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             7138 ; 2    |#define __REGS_GPIO_INC 1
                             7139 ; 3    |
                             7140 ; 4    |#include "types.h"
                             7141 
                             7143 
                             7144 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7145 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7146 ; 3    |//
                             7147 ; 4    |// Filename: types.h
                             7148 ; 5    |// Description: Standard data types
                             7149 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7150 ; 7    |
                             7151 ; 8    |#ifndef _TYPES_H
                             7152 ; 9    |#define _TYPES_H
                             7153 ; 10   |
                             7154 ; 11   |// TODO:  move this outta here!
                             7155 ; 12   |#if !defined(NOERROR)
                             7156 ; 13   |#define NOERROR 0
                             7157 ; 14   |#define SUCCESS 0
                             7158 ; 15   |#endif 
                             7159 ; 16   |#if !defined(SUCCESS)
                             7160 ; 17   |#define SUCCESS  0
                             7161 ; 18   |#endif
                             7162 ; 19   |#if !defined(ERROR)
                             7163 ; 20   |#define ERROR   -1
                             7164 ; 21   |#endif
                             7165 ; 22   |#if !defined(FALSE)
                             7166 ; 23   |#define FALSE 0
                             7167 ; 24   |#endif
                             7168 ; 25   |#if !defined(TRUE)
                             7169 ; 26   |#define TRUE  1
                             7170 ; 27   |#endif
                             7171 ; 28   |
                             7172 ; 29   |#if !defined(NULL)
                             7173 ; 30   |#define NULL 0
                             7174 ; 31   |#endif
                             7175 ; 32   |
                             7176 ; 33   |#define MAX_INT     0x7FFFFF
                             7177 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7178 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7179 ; 36   |#define MAX_ULONG   (-1) 
                             7180 ; 37   |
                             7181 ; 38   |#define WORD_SIZE   24              // word size in bits
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7182 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7183 ; 40   |
                             7184 ; 41   |
                             7185 ; 42   |#define BYTE    unsigned char       // btVarName
                             7186 ; 43   |#define CHAR    signed char         // cVarName
                             7187 ; 44   |#define USHORT  unsigned short      // usVarName
                             7188 ; 45   |#define SHORT   unsigned short      // sVarName
                             7189 ; 46   |#define WORD    unsigned int        // wVarName
                             7190 ; 47   |#define INT     signed int          // iVarName
                             7191 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7192 ; 49   |#define LONG    signed long         // lVarName
                             7193 ; 50   |#define BOOL    unsigned int        // bVarName
                             7194 ; 51   |#define FRACT   _fract              // frVarName
                             7195 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7196 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7197 ; 54   |#define FLOAT   float               // fVarName
                             7198 ; 55   |#define DBL     double              // dVarName
                             7199 ; 56   |#define ENUM    enum                // eVarName
                             7200 ; 57   |#define CMX     _complex            // cmxVarName
                             7201 ; 58   |typedef WORD UCS3;                   // 
                             7202 ; 59   |
                             7203 ; 60   |#define UINT16  unsigned short
                             7204 ; 61   |#define UINT8   unsigned char   
                             7205 ; 62   |#define UINT32  unsigned long
                             7206 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7207 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7208 ; 65   |#define WCHAR   UINT16
                             7209 ; 66   |
                             7210 ; 67   |//UINT128 is 16 bytes or 6 words
                             7211 ; 68   |typedef struct UINT128_3500 {   
                             7212 ; 69   |    int val[6];     
                             7213 ; 70   |} UINT128_3500;
                             7214 ; 71   |
                             7215 ; 72   |#define UINT128   UINT128_3500
                             7216 ; 73   |
                             7217 ; 74   |// Little endian word packed byte strings:   
                             7218 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7219 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7220 ; 77   |// Little endian word packed byte strings:   
                             7221 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7222 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7223 ; 80   |
                             7224 ; 81   |// Declare Memory Spaces To Use When Coding
                             7225 ; 82   |// A. Sector Buffers
                             7226 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7227 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7228 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7229 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7230 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7231 ; 88   |// B. Media DDI Memory
                             7232 ; 89   |#define MEDIA_DDI_MEM _Y
                             7233 ; 90   |
                             7234 ; 91   |
                             7235 ; 92   |
                             7236 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7237 ; 94   |// Examples of circular pointers:
                             7238 ; 95   |//    INT CIRC cpiVarName
                             7239 ; 96   |//    DWORD CIRC cpdwVarName
                             7240 ; 97   |
                             7241 ; 98   |#define RETCODE INT                 // rcVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7242 ; 99   |
                             7243 ; 100  |// generic bitfield structure
                             7244 ; 101  |struct Bitfield {
                             7245 ; 102  |    unsigned int B0  :1;
                             7246 ; 103  |    unsigned int B1  :1;
                             7247 ; 104  |    unsigned int B2  :1;
                             7248 ; 105  |    unsigned int B3  :1;
                             7249 ; 106  |    unsigned int B4  :1;
                             7250 ; 107  |    unsigned int B5  :1;
                             7251 ; 108  |    unsigned int B6  :1;
                             7252 ; 109  |    unsigned int B7  :1;
                             7253 ; 110  |    unsigned int B8  :1;
                             7254 ; 111  |    unsigned int B9  :1;
                             7255 ; 112  |    unsigned int B10 :1;
                             7256 ; 113  |    unsigned int B11 :1;
                             7257 ; 114  |    unsigned int B12 :1;
                             7258 ; 115  |    unsigned int B13 :1;
                             7259 ; 116  |    unsigned int B14 :1;
                             7260 ; 117  |    unsigned int B15 :1;
                             7261 ; 118  |    unsigned int B16 :1;
                             7262 ; 119  |    unsigned int B17 :1;
                             7263 ; 120  |    unsigned int B18 :1;
                             7264 ; 121  |    unsigned int B19 :1;
                             7265 ; 122  |    unsigned int B20 :1;
                             7266 ; 123  |    unsigned int B21 :1;
                             7267 ; 124  |    unsigned int B22 :1;
                             7268 ; 125  |    unsigned int B23 :1;
                             7269 ; 126  |};
                             7270 ; 127  |
                             7271 ; 128  |union BitInt {
                             7272 ; 129  |        struct Bitfield B;
                             7273 ; 130  |        int        I;
                             7274 ; 131  |};
                             7275 ; 132  |
                             7276 ; 133  |#define MAX_MSG_LENGTH 10
                             7277 ; 134  |struct CMessage
                             7278 ; 135  |{
                             7279 ; 136  |        unsigned int m_uLength;
                             7280 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7281 ; 138  |};
                             7282 ; 139  |
                             7283 ; 140  |typedef struct {
                             7284 ; 141  |    WORD m_wLength;
                             7285 ; 142  |    WORD m_wMessage;
                             7286 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7287 ; 144  |} Message;
                             7288 ; 145  |
                             7289 ; 146  |struct MessageQueueDescriptor
                             7290 ; 147  |{
                             7291 ; 148  |        int *m_pBase;
                             7292 ; 149  |        int m_iModulo;
                             7293 ; 150  |        int m_iSize;
                             7294 ; 151  |        int *m_pHead;
                             7295 ; 152  |        int *m_pTail;
                             7296 ; 153  |};
                             7297 ; 154  |
                             7298 ; 155  |struct ModuleEntry
                             7299 ; 156  |{
                             7300 ; 157  |    int m_iSignaledEventMask;
                             7301 ; 158  |    int m_iWaitEventMask;
                             7302 ; 159  |    int m_iResourceOfCode;
                             7303 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7304 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7305 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7306 ; 163  |    int m_uTimeOutHigh;
                             7307 ; 164  |    int m_uTimeOutLow;
                             7308 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7309 ; 166  |};
                             7310 ; 167  |
                             7311 ; 168  |union WaitMask{
                             7312 ; 169  |    struct B{
                             7313 ; 170  |        unsigned int m_bNone     :1;
                             7314 ; 171  |        unsigned int m_bMessage  :1;
                             7315 ; 172  |        unsigned int m_bTimer    :1;
                             7316 ; 173  |        unsigned int m_bButton   :1;
                             7317 ; 174  |    } B;
                             7318 ; 175  |    int I;
                             7319 ; 176  |} ;
                             7320 ; 177  |
                             7321 ; 178  |
                             7322 ; 179  |struct Button {
                             7323 ; 180  |        WORD wButtonEvent;
                             7324 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7325 ; 182  |};
                             7326 ; 183  |
                             7327 ; 184  |struct Message {
                             7328 ; 185  |        WORD wMsgLength;
                             7329 ; 186  |        WORD wMsgCommand;
                             7330 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7331 ; 188  |};
                             7332 ; 189  |
                             7333 ; 190  |union EventTypes {
                             7334 ; 191  |        struct CMessage msg;
                             7335 ; 192  |        struct Button Button ;
                             7336 ; 193  |        struct Message Message;
                             7337 ; 194  |};
                             7338 ; 195  |
                             7339 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7340 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7341 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7342 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7343 ; 200  |
                             7344 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7345 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7346 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7347 ; 204  |
                             7348 ; 205  |#if DEBUG
                             7349 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7350 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7351 ; 208  |#else 
                             7352 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7353 ; 210  |#define DebugBuildAssert(x)    
                             7354 ; 211  |#endif
                             7355 ; 212  |
                             7356 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7357 ; 214  |//  #pragma asm
                             7358 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7359 ; 216  |//  #pragma endasm
                             7360 ; 217  |
                             7361 ; 218  |
                             7362 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7363 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7364 ; 221  |#elif defined(COLOR_65K)
                             7365 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7366 ; 223  |#else
                             7367 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7368 ; 225  |#endif
                             7369 ; 226  |    
                             7370 ; 227  |#endif // #ifndef _TYPES_H
                             7371 
                             7373 
                             7374 ; 5    |
                             7375 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             7376 ; 7    |//  Interrupt Collector Registers
                             7377 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             7378 ; 9    |
                             7379 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             7380 ; 11   |
                             7381 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             7382 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             7383 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             7384 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             7385 ; 16   |
                             7386 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             7387 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             7388 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             7389 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             7390 ; 21   |
                             7391 ; 22   |#define HW_GPB_GPENR 0
                             7392 ; 23   |#define HW_GPB_GPDOR 1
                             7393 ; 24   |#define HW_GPB_GPDIR 2
                             7394 ; 25   |#define HW_GPB_GPDOER 3
                             7395 ; 26   |#define HW_GPB_GPIPENR 4
                             7396 ; 27   |#define HW_GPB_GPIENR 5
                             7397 ; 28   |#define HW_GPB_GPILVLR 6
                             7398 ; 29   |#define HW_GPB_GPIPOLR 7
                             7399 ; 30   |#define HW_GPB_GPISTATR 8
                             7400 ; 31   |#define HW_GPB_GPPWR 9
                             7401 ; 32   |#define HW_GPB_GP8MA 10
                             7402 ; 33   |
                             7403 ; 34   |
                             7404 ; 35   |
                             7405 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7406 ; 37   |//  GPIO Register Bit Positions
                             7407 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             7408 ; 39   |{
                             7409 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             7410 ; 41   |    unsigned int I;
                             7411 ; 42   |    unsigned int U;
                             7412 ; 43   |} gpr_type;
                             7413 ; 44   |
                             7414 ; 45   |#define HW_GP_B0_BITPOS 0
                             7415 ; 46   |#define HW_GP_B1_BITPOS 1
                             7416 ; 47   |#define HW_GP_B2_BITPOS 2
                             7417 ; 48   |#define HW_GP_B3_BITPOS 3
                             7418 ; 49   |#define HW_GP_B4_BITPOS 4
                             7419 ; 50   |#define HW_GP_B5_BITPOS 5
                             7420 ; 51   |#define HW_GP_B6_BITPOS 6
                             7421 ; 52   |#define HW_GP_B7_BITPOS 7
                             7422 ; 53   |#define HW_GP_B8_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7423 ; 54   |#define HW_GP_B9_BITPOS 9
                             7424 ; 55   |#define HW_GP_B10_BITPOS 10
                             7425 ; 56   |#define HW_GP_B11_BITPOS 11
                             7426 ; 57   |#define HW_GP_B12_BITPOS 12
                             7427 ; 58   |#define HW_GP_B13_BITPOS 13
                             7428 ; 59   |#define HW_GP_B14_BITPOS 14
                             7429 ; 60   |#define HW_GP_B15_BITPOS 15
                             7430 ; 61   |#define HW_GP_B16_BITPOS 16
                             7431 ; 62   |#define HW_GP_B17_BITPOS 17
                             7432 ; 63   |#define HW_GP_B18_BITPOS 18
                             7433 ; 64   |#define HW_GP_B19_BITPOS 19
                             7434 ; 65   |#define HW_GP_B20_BITPOS 20
                             7435 ; 66   |#define HW_GP_B21_BITPOS 21
                             7436 ; 67   |#define HW_GP_B22_BITPOS 22
                             7437 ; 68   |#define HW_GP_B23_BITPOS 23
                             7438 ; 69   |
                             7439 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             7440 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             7441 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             7442 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             7443 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             7444 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             7445 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             7446 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             7447 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             7448 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             7449 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             7450 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             7451 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             7452 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             7453 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             7454 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             7455 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             7456 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             7457 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             7458 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             7459 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             7460 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             7461 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             7462 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             7463 ; 94   |
                             7464 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             7465 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             7466 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             7467 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             7468 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             7469 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             7470 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             7471 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             7472 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             7473 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             7474 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             7475 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             7476 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             7477 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             7478 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             7479 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             7480 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             7481 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             7482 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             7483 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             7484 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7485 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             7486 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             7487 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             7488 ; 119  |
                             7489 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             7490 ; 121  |//  GPIO 8mA Register Bit Positions
                             7491 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             7492 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             7493 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             7494 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             7495 ; 126  |
                             7496 ; 127  |
                             7497 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             7498 ; 129  |//  Logical GPIO numbers
                             7499 ; 130  |#define HW_GPIO_000 0
                             7500 ; 131  |#define HW_GPIO_001 1
                             7501 ; 132  |#define HW_GPIO_002 2
                             7502 ; 133  |#define HW_GPIO_003 3
                             7503 ; 134  |#define HW_GPIO_004 4
                             7504 ; 135  |#define HW_GPIO_005 5
                             7505 ; 136  |#define HW_GPIO_006 6
                             7506 ; 137  |#define HW_GPIO_007 7
                             7507 ; 138  |#define HW_GPIO_008 8
                             7508 ; 139  |#define HW_GPIO_009 9
                             7509 ; 140  |#define HW_GPIO_010 10
                             7510 ; 141  |#define HW_GPIO_011 11
                             7511 ; 142  |#define HW_GPIO_012 12
                             7512 ; 143  |#define HW_GPIO_013 13
                             7513 ; 144  |#define HW_GPIO_014 14
                             7514 ; 145  |#define HW_GPIO_015 15
                             7515 ; 146  |#define HW_GPIO_016 16
                             7516 ; 147  |#define HW_GPIO_017 17
                             7517 ; 148  |#define HW_GPIO_018 18
                             7518 ; 149  |#define HW_GPIO_019 19
                             7519 ; 150  |#define HW_GPIO_020 20
                             7520 ; 151  |#define HW_GPIO_021 21
                             7521 ; 152  |#define HW_GPIO_022 22
                             7522 ; 153  |#define HW_GPIO_023 23
                             7523 ; 154  |#define HW_GPIO_024 24
                             7524 ; 155  |#define HW_GPIO_025 25
                             7525 ; 156  |#define HW_GPIO_026 26
                             7526 ; 157  |#define HW_GPIO_027 27
                             7527 ; 158  |#define HW_GPIO_028 28
                             7528 ; 159  |#define HW_GPIO_029 29
                             7529 ; 160  |#define HW_GPIO_030 30
                             7530 ; 161  |#define HW_GPIO_031 31
                             7531 ; 162  |#define HW_GPIO_032 32
                             7532 ; 163  |#define HW_GPIO_033 33
                             7533 ; 164  |#define HW_GPIO_034 34
                             7534 ; 165  |#define HW_GPIO_035 35
                             7535 ; 166  |#define HW_GPIO_036 36
                             7536 ; 167  |#define HW_GPIO_037 37
                             7537 ; 168  |#define HW_GPIO_038 38
                             7538 ; 169  |#define HW_GPIO_039 39
                             7539 ; 170  |#define HW_GPIO_040 40
                             7540 ; 171  |#define HW_GPIO_041 41
                             7541 ; 172  |#define HW_GPIO_042 42
                             7542 ; 173  |#define HW_GPIO_043 43
                             7543 ; 174  |#define HW_GPIO_044 44
                             7544 ; 175  |#define HW_GPIO_045 45
                             7545 ; 176  |#define HW_GPIO_046 46
                             7546 ; 177  |#define HW_GPIO_047 47
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7547 ; 178  |#define HW_GPIO_048 48
                             7548 ; 179  |#define HW_GPIO_049 49
                             7549 ; 180  |#define HW_GPIO_050 50
                             7550 ; 181  |#define HW_GPIO_051 51
                             7551 ; 182  |#define HW_GPIO_052 52
                             7552 ; 183  |#define HW_GPIO_053 53
                             7553 ; 184  |#define HW_GPIO_054 54
                             7554 ; 185  |#define HW_GPIO_055 55
                             7555 ; 186  |#define HW_GPIO_056 56
                             7556 ; 187  |#define HW_GPIO_057 57
                             7557 ; 188  |#define HW_GPIO_058 58
                             7558 ; 189  |#define HW_GPIO_059 59
                             7559 ; 190  |#define HW_GPIO_060 60
                             7560 ; 191  |#define HW_GPIO_061 61
                             7561 ; 192  |#define HW_GPIO_062 62
                             7562 ; 193  |#define HW_GPIO_063 63
                             7563 ; 194  |#define HW_GPIO_064 64
                             7564 ; 195  |#define HW_GPIO_065 65
                             7565 ; 196  |#define HW_GPIO_066 66
                             7566 ; 197  |#define HW_GPIO_067 67
                             7567 ; 198  |#define HW_GPIO_068 68
                             7568 ; 199  |#define HW_GPIO_069 69
                             7569 ; 200  |#define HW_GPIO_070 70
                             7570 ; 201  |#define HW_GPIO_071 71
                             7571 ; 202  |#define HW_GPIO_072 72
                             7572 ; 203  |#define HW_GPIO_073 73
                             7573 ; 204  |#define HW_GPIO_074 74
                             7574 ; 205  |#define HW_GPIO_075 75
                             7575 ; 206  |#define HW_GPIO_076 76
                             7576 ; 207  |#define HW_GPIO_077 77
                             7577 ; 208  |#define HW_GPIO_078 78
                             7578 ; 209  |#define HW_GPIO_079 79
                             7579 ; 210  |#define HW_GPIO_080 80
                             7580 ; 211  |#define HW_GPIO_081 81
                             7581 ; 212  |#define HW_GPIO_082 82
                             7582 ; 213  |#define HW_GPIO_083 83
                             7583 ; 214  |#define HW_GPIO_084 84
                             7584 ; 215  |#define HW_GPIO_085 85
                             7585 ; 216  |#define HW_GPIO_086 86
                             7586 ; 217  |#define HW_GPIO_087 87
                             7587 ; 218  |#define HW_GPIO_088 88
                             7588 ; 219  |#define HW_GPIO_089 89
                             7589 ; 220  |#define HW_GPIO_090 90
                             7590 ; 221  |#define HW_GPIO_091 91
                             7591 ; 222  |#define HW_GPIO_092 92
                             7592 ; 223  |#define HW_GPIO_093 93
                             7593 ; 224  |#define HW_GPIO_094 94
                             7594 ; 225  |#define HW_GPIO_095 95
                             7595 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             7596 ; 227  |
                             7597 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             7598 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             7599 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             7600 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             7601 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             7602 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7603 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             7604 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             7605 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             7606 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             7607 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             7608 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             7609 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             7610 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             7611 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             7612 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             7613 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             7614 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             7615 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             7616 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             7617 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             7618 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             7619 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             7620 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             7621 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             7622 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             7623 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             7624 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             7625 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             7626 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             7627 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             7628 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             7629 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             7630 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             7631 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             7632 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             7633 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             7634 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7635 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             7636 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             7637 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             7638 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             7639 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             7640 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             7641 ; 272  |
                             7642 ; 273  |#endif
                             7643 ; 274  |
                             7644 
                             7646 
                             7647 ; 23   |#include "icoll.h"
                             7648 
                             7650 
                             7651 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7652 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             7653 ; 3    |//
                             7654 ; 4    |// Filename: icoll.h
                             7655 ; 5    |// Description: 
                             7656 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7657 ; 7    |
                             7658 ; 8    |#ifndef _ICOLL_H
                             7659 ; 9    |#define _ICOLL_H
                             7660 ; 10   |
                             7661 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             7662 ; 12   |// Defs
                             7663 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             7664 ; 14   |                                                                                          
                                  
                             7665 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             7666 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             7667 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             7668 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             7669 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             7670 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             7671 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             7672 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             7673 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             7674 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             7675 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             7676 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             7677 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             7678 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             7679 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             7680 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             7681 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                             7682 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                             7683 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                             7684 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                             7685 ; 35   |
                             7686 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             7687 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7688 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                             7689 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                             7690 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                             7691 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             7692 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                             7693 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                             7694 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                             7695 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                             7696 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                             7697 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                             7698 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                             7699 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                             7700 ; 50   |
                             7701 ; 51   |#else
                             7702 ; 52   |
                             7703 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                             7704 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                             7705 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                             7706 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             7707 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                             7708 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                             7709 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                             7710 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                             7711 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                             7712 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                             7713 ; 63   |
                             7714 ; 64   |#endif
                             7715 ; 65   |
                             7716 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                             7717 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                             7718 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             7719 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                             7720 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             7721 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             7722 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             7723 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             7724 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             7725 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             7726 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7727 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             7728 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             7729 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             7730 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             7731 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             7732 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             7733 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             7734 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             7735 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             7736 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             7737 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             7738 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             7739 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                             7740 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             7741 ; 91   |
                             7742 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             7743 ; 93   |
                             7744 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             7745 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             7746 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             7747 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             7748 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             7749 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             7750 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             7751 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             7752 ; 102  |
                             7753 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             7754 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             7755 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             7756 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             7757 ; 107  |
                             7758 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             7759 ; 109  |// ERRORS
                             7760 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             7761 ; 111  |                                                                                          
                                  
                             7762 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             7763 ; 113  |
                             7764 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             7765 ; 115  |// Structure definitions
                             7766 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             7767 ; 117  |
                             7768 ; 118  |typedef void (*ISR_VECTOR)(void);
                             7769 ; 119  |
                             7770 ; 120  |typedef struct
                             7771 ; 121  |{
                             7772 ; 122  |    WORD wSource;
                             7773 ; 123  |    WORD wPriority;
                             7774 ; 124  |    WORD wSteering;
                             7775 ; 125  |} ICOLL_ELEMENT;
                             7776 ; 126  |
                             7777 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             7778 ; 128  |// Prototypes
                             7779 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             7780 ; 130  |
                             7781 ; 131  |void _reentrant IcollShutDown(void);
                             7782 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             7783 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             7784 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             7785 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             7786 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7787 
                             7792 
                             7793 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             7794 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             7795 ; 139  |#endif // #ifndef _ICOLL_H
                             7796 
                             7798 
                             7799 ; 24   |#include "ipr.h"
                             7800 
                             7802 
                             7803 ; 1    |#ifndef __IPR_H
                             7804 ; 2    |#define __IPR_H
                             7805 ; 3    |
                             7806 ; 4    |
                             7807 ; 5    |
                             7808 ; 6    |#define IVL_DISABLED    0
                             7809 ; 7    |#define IVL_PRIORITY_0  1
                             7810 ; 8    |#define IVL_PRIORITY_1  2
                             7811 ; 9    |#define IVL_PRIORITY_2  3
                             7812 ; 10   |
                             7813 ; 11   |#define IVL_LINE_0     10
                             7814 ; 12   |#define IVL_LINE_1     12
                             7815 ; 13   |#define IVL_LINE_2     14
                             7816 ; 14   |#define IVL_LINE_3     16
                             7817 ; 15   |#define IVL_LINE_4     18
                             7818 ; 16   |#define IVL_LINE_5     20
                             7819 ; 17   |#define IVL_LINE_6     22
                             7820 ; 18   |
                             7821 ; 19   |
                             7822 ; 20   |_asmfunc WORD IPRSetIVLPriority(WORD wIVL, WORD wPriority);
                             7823 ; 21   |
                             7824 ; 22   |#endif 
                             7825 
                             7827 
                             7828 ; 25   |#include "misc.h"
                             7829 
                             7831 
                             7832 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7833 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             7834 ; 3    |//
                             7835 ; 4    |// Filename: misc.h
                             7836 ; 5    |// Description: 
                             7837 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7838 ; 7    |
                             7839 ; 8    |#ifndef _MISC_H
                             7840 ; 9    |#define _MISC_H
                             7841 ; 10   |
                             7842 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             7843 ; 12   |// Defs
                             7844 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             7845 ; 14   |
                             7846 ; 15   |////////////////////////////////////////////////////////////////////////////////
                             7847 ; 16   |// Error codes
                             7848 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             7849 ; 18   |
                             7850 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             7851 ; 20   |// Typedefs
                             7852 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             7853 ; 22   |
                             7854 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             7855 ; 24   |// Prototypes
                             7856 ; 25   |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7857 ; 26   |
                             7858 ; 27   |RETCODE PowerInit(void);
                             7859 ; 28   |RETCODE PllInit(void);
                             7860 ; 29   |RETCODE _reentrant SystemShutdown(void);
                             7861 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                             7862 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                             7863 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                             7864 ; 33   |RETCODE GoToSleep(void);
                             7865 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                             7866 ; 35   |DWORD GetDclkCount(void);
                             7867 ; 36   |#ifdef USE_PLAYLIST2
                             7868 ; 37   |DWORD GetDclkCount_PL2(void);
                             7869 ; 38   |#endif
                             7870 ; 39   |void SetDclkCount(DWORD dwCount);
                             7871 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                             7872 ; 41   |RETCODE ProgramPll(INT iSpeed);
                             7873 ; 42   |void _reentrant SystemReset(void);
                             7874 ; 43   |void _reentrant SystemPowerOff(void);
                             7875 ; 44   |void _reentrant ReconfigureAsDcc(void);
                             7876 ; 45   |void _reentrant PowerDownFMTuners(void);
                             7877 ; 46   |#ifdef TUNER_5767
                             7878 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                             7879 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                             7880 ; 49   |#endif
                             7881 ; 50   |extern BOOL g_bPowerOff;
                             7882 ; 51   |
                             7883 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                             7884 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                             7885 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                             7886 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                             7887 ; 56   |#endif
                             7888 ; 57   |
                             7889 ; 58   |#endif // #ifndef _MISC_H
                             7890 
                             7892 
                             7893 ; 26   |#include "kernel.h"
                             7894 
                             7896 
                             7897 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             7898 ; 2    |///
                             7899 ; 3    |/// Filename: kernel.h
                             7900 ; 4    |/// Description: 
                             7901 ; 5    |///
                             7902 ; 6    |///
                             7903 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             7904 ; 8    |///
                             7905 ; 9    |/// SigmaTel, Inc.
                             7906 ; 10   |/// Proprietary  Confidential
                             7907 ; 11   |///
                             7908 ; 12   |/// This source code and the algorithms implemented therein constitute
                             7909 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             7910 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             7911 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             7912 ; 16   |/// source code was originally received.
                             7913 ; 17   |///
                             7914 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             7915 ; 19   |#ifndef __KERNEL_H
                             7916 ; 20   |#define __KERNEL_H
                             7917 ; 21   |
                             7918 ; 22   |
                             7919 ; 23   |#include "types.h"
                             7920 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7922 
                             7923 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7924 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7925 ; 3    |//
                             7926 ; 4    |// Filename: types.h
                             7927 ; 5    |// Description: Standard data types
                             7928 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7929 ; 7    |
                             7930 ; 8    |#ifndef _TYPES_H
                             7931 ; 9    |#define _TYPES_H
                             7932 ; 10   |
                             7933 ; 11   |// TODO:  move this outta here!
                             7934 ; 12   |#if !defined(NOERROR)
                             7935 ; 13   |#define NOERROR 0
                             7936 ; 14   |#define SUCCESS 0
                             7937 ; 15   |#endif 
                             7938 ; 16   |#if !defined(SUCCESS)
                             7939 ; 17   |#define SUCCESS  0
                             7940 ; 18   |#endif
                             7941 ; 19   |#if !defined(ERROR)
                             7942 ; 20   |#define ERROR   -1
                             7943 ; 21   |#endif
                             7944 ; 22   |#if !defined(FALSE)
                             7945 ; 23   |#define FALSE 0
                             7946 ; 24   |#endif
                             7947 ; 25   |#if !defined(TRUE)
                             7948 ; 26   |#define TRUE  1
                             7949 ; 27   |#endif
                             7950 ; 28   |
                             7951 ; 29   |#if !defined(NULL)
                             7952 ; 30   |#define NULL 0
                             7953 ; 31   |#endif
                             7954 ; 32   |
                             7955 ; 33   |#define MAX_INT     0x7FFFFF
                             7956 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7957 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7958 ; 36   |#define MAX_ULONG   (-1) 
                             7959 ; 37   |
                             7960 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7961 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7962 ; 40   |
                             7963 ; 41   |
                             7964 ; 42   |#define BYTE    unsigned char       // btVarName
                             7965 ; 43   |#define CHAR    signed char         // cVarName
                             7966 ; 44   |#define USHORT  unsigned short      // usVarName
                             7967 ; 45   |#define SHORT   unsigned short      // sVarName
                             7968 ; 46   |#define WORD    unsigned int        // wVarName
                             7969 ; 47   |#define INT     signed int          // iVarName
                             7970 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7971 ; 49   |#define LONG    signed long         // lVarName
                             7972 ; 50   |#define BOOL    unsigned int        // bVarName
                             7973 ; 51   |#define FRACT   _fract              // frVarName
                             7974 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7975 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7976 ; 54   |#define FLOAT   float               // fVarName
                             7977 ; 55   |#define DBL     double              // dVarName
                             7978 ; 56   |#define ENUM    enum                // eVarName
                             7979 ; 57   |#define CMX     _complex            // cmxVarName
                             7980 ; 58   |typedef WORD UCS3;                   // 
                             7981 ; 59   |
                             7982 ; 60   |#define UINT16  unsigned short
                             7983 ; 61   |#define UINT8   unsigned char   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7984 ; 62   |#define UINT32  unsigned long
                             7985 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7986 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7987 ; 65   |#define WCHAR   UINT16
                             7988 ; 66   |
                             7989 ; 67   |//UINT128 is 16 bytes or 6 words
                             7990 ; 68   |typedef struct UINT128_3500 {   
                             7991 ; 69   |    int val[6];     
                             7992 ; 70   |} UINT128_3500;
                             7993 ; 71   |
                             7994 ; 72   |#define UINT128   UINT128_3500
                             7995 ; 73   |
                             7996 ; 74   |// Little endian word packed byte strings:   
                             7997 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7998 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7999 ; 77   |// Little endian word packed byte strings:   
                             8000 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8001 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8002 ; 80   |
                             8003 ; 81   |// Declare Memory Spaces To Use When Coding
                             8004 ; 82   |// A. Sector Buffers
                             8005 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8006 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8007 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8008 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8009 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8010 ; 88   |// B. Media DDI Memory
                             8011 ; 89   |#define MEDIA_DDI_MEM _Y
                             8012 ; 90   |
                             8013 ; 91   |
                             8014 ; 92   |
                             8015 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8016 ; 94   |// Examples of circular pointers:
                             8017 ; 95   |//    INT CIRC cpiVarName
                             8018 ; 96   |//    DWORD CIRC cpdwVarName
                             8019 ; 97   |
                             8020 ; 98   |#define RETCODE INT                 // rcVarName
                             8021 ; 99   |
                             8022 ; 100  |// generic bitfield structure
                             8023 ; 101  |struct Bitfield {
                             8024 ; 102  |    unsigned int B0  :1;
                             8025 ; 103  |    unsigned int B1  :1;
                             8026 ; 104  |    unsigned int B2  :1;
                             8027 ; 105  |    unsigned int B3  :1;
                             8028 ; 106  |    unsigned int B4  :1;
                             8029 ; 107  |    unsigned int B5  :1;
                             8030 ; 108  |    unsigned int B6  :1;
                             8031 ; 109  |    unsigned int B7  :1;
                             8032 ; 110  |    unsigned int B8  :1;
                             8033 ; 111  |    unsigned int B9  :1;
                             8034 ; 112  |    unsigned int B10 :1;
                             8035 ; 113  |    unsigned int B11 :1;
                             8036 ; 114  |    unsigned int B12 :1;
                             8037 ; 115  |    unsigned int B13 :1;
                             8038 ; 116  |    unsigned int B14 :1;
                             8039 ; 117  |    unsigned int B15 :1;
                             8040 ; 118  |    unsigned int B16 :1;
                             8041 ; 119  |    unsigned int B17 :1;
                             8042 ; 120  |    unsigned int B18 :1;
                             8043 ; 121  |    unsigned int B19 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8044 ; 122  |    unsigned int B20 :1;
                             8045 ; 123  |    unsigned int B21 :1;
                             8046 ; 124  |    unsigned int B22 :1;
                             8047 ; 125  |    unsigned int B23 :1;
                             8048 ; 126  |};
                             8049 ; 127  |
                             8050 ; 128  |union BitInt {
                             8051 ; 129  |        struct Bitfield B;
                             8052 ; 130  |        int        I;
                             8053 ; 131  |};
                             8054 ; 132  |
                             8055 ; 133  |#define MAX_MSG_LENGTH 10
                             8056 ; 134  |struct CMessage
                             8057 ; 135  |{
                             8058 ; 136  |        unsigned int m_uLength;
                             8059 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8060 ; 138  |};
                             8061 ; 139  |
                             8062 ; 140  |typedef struct {
                             8063 ; 141  |    WORD m_wLength;
                             8064 ; 142  |    WORD m_wMessage;
                             8065 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8066 ; 144  |} Message;
                             8067 ; 145  |
                             8068 ; 146  |struct MessageQueueDescriptor
                             8069 ; 147  |{
                             8070 ; 148  |        int *m_pBase;
                             8071 ; 149  |        int m_iModulo;
                             8072 ; 150  |        int m_iSize;
                             8073 ; 151  |        int *m_pHead;
                             8074 ; 152  |        int *m_pTail;
                             8075 ; 153  |};
                             8076 ; 154  |
                             8077 ; 155  |struct ModuleEntry
                             8078 ; 156  |{
                             8079 ; 157  |    int m_iSignaledEventMask;
                             8080 ; 158  |    int m_iWaitEventMask;
                             8081 ; 159  |    int m_iResourceOfCode;
                             8082 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8083 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8084 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8085 ; 163  |    int m_uTimeOutHigh;
                             8086 ; 164  |    int m_uTimeOutLow;
                             8087 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8088 ; 166  |};
                             8089 ; 167  |
                             8090 ; 168  |union WaitMask{
                             8091 ; 169  |    struct B{
                             8092 ; 170  |        unsigned int m_bNone     :1;
                             8093 ; 171  |        unsigned int m_bMessage  :1;
                             8094 ; 172  |        unsigned int m_bTimer    :1;
                             8095 ; 173  |        unsigned int m_bButton   :1;
                             8096 ; 174  |    } B;
                             8097 ; 175  |    int I;
                             8098 ; 176  |} ;
                             8099 ; 177  |
                             8100 ; 178  |
                             8101 ; 179  |struct Button {
                             8102 ; 180  |        WORD wButtonEvent;
                             8103 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8104 ; 182  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8105 ; 183  |
                             8106 ; 184  |struct Message {
                             8107 ; 185  |        WORD wMsgLength;
                             8108 ; 186  |        WORD wMsgCommand;
                             8109 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8110 ; 188  |};
                             8111 ; 189  |
                             8112 ; 190  |union EventTypes {
                             8113 ; 191  |        struct CMessage msg;
                             8114 ; 192  |        struct Button Button ;
                             8115 ; 193  |        struct Message Message;
                             8116 ; 194  |};
                             8117 ; 195  |
                             8118 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8119 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8120 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8121 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8122 ; 200  |
                             8123 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8124 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8125 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8126 ; 204  |
                             8127 ; 205  |#if DEBUG
                             8128 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8129 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8130 ; 208  |#else 
                             8131 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8132 ; 210  |#define DebugBuildAssert(x)    
                             8133 ; 211  |#endif
                             8134 ; 212  |
                             8135 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8136 ; 214  |//  #pragma asm
                             8137 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8138 ; 216  |//  #pragma endasm
                             8139 ; 217  |
                             8140 ; 218  |
                             8141 ; 219  |#ifdef COLOR_262K
                             8142 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8143 ; 221  |#elif defined(COLOR_65K)
                             8144 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8145 ; 223  |#else
                             8146 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8147 ; 225  |#endif
                             8148 ; 226  |    
                             8149 ; 227  |#endif // #ifndef _TYPES_H
                             8150 
                             8152 
                             8153 ; 24   |#include "gettime.h"
                             8154 
                             8156 
                             8157 ; 1    |#ifndef __TIME_H
                             8158 ; 2    |#define __TIME_H
                             8159 ; 3    |
                             8160 ; 4    |_callee_save LONG GetTime(void);
                             8161 ; 5    |
                             8162 ; 6    |#endif
                             8163 
                             8165 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8166 ; 25   |#include "sysirq.h"
                             8167 
                             8169 
                             8170 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8171 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             8172 ; 3    |//
                             8173 ; 4    |// Filename: sysirq.h
                             8174 ; 5    |// Description: 
                             8175 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8176 ; 7    |
                             8177 ; 8    |#ifndef _SYSIRQ_H
                             8178 ; 9    |#define _SYSIRQ_H
                             8179 ; 10   |
                             8180 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             8181 ; 12   |// Defs
                             8182 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             8183 ; 14   |
                             8184 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             8185 ; 16   |
                             8186 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             8187 ; 18   |// Structure definitions
                             8188 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             8189 ; 20   |
                             8190 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             8191 ; 22   |// Prototypes
                             8192 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             8193 ; 24   |
                             8194 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             8195 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             8196 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             8197 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             8198 ; 29   |
                             8199 ; 30   |#endif // #ifndef _SYSIRQ_H
                             8200 
                             8202 
                             8203 ; 26   |#include "icoll.h"
                             8204 
                             8206 
                             8207 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8208 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             8209 ; 3    |//
                             8210 ; 4    |// Filename: icoll.h
                             8211 ; 5    |// Description: 
                             8212 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8213 ; 7    |
                             8214 ; 8    |#ifndef _ICOLL_H
                             8215 ; 9    |#define _ICOLL_H
                             8216 ; 10   |
                             8217 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             8218 ; 12   |// Defs
                             8219 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             8220 ; 14   |                                                                                          
                                  
                             8221 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             8222 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             8223 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             8224 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             8225 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             8226 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             8227 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             8228 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             8229 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8230 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             8231 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             8232 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             8233 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             8234 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             8235 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             8236 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             8237 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                             8238 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                             8239 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                             8240 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                             8241 ; 35   |
                             8242 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             8243 ; 37   |
                             8244 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                             8245 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                             8246 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                             8247 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             8248 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                             8249 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                             8250 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                             8251 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                             8252 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                             8253 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                             8254 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                             8255 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                             8256 ; 50   |
                             8257 ; 51   |#else
                             8258 ; 52   |
                             8259 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                             8260 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                             8261 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                             8262 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             8263 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                             8264 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                             8265 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                             8266 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                             8267 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8268 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                             8269 ; 63   |
                             8270 ; 64   |#endif
                             8271 ; 65   |
                             8272 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                             8273 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                             8274 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             8275 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                             8276 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             8277 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             8278 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             8279 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             8280 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             8281 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             8282 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             8283 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             8284 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             8285 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             8286 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             8287 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             8288 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             8289 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             8290 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             8291 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             8292 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             8293 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             8294 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             8295 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                             8296 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             8297 ; 91   |
                             8298 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             8299 ; 93   |
                             8300 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             8301 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             8302 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             8303 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             8304 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             8305 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             8306 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             8307 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             8308 ; 102  |
                             8309 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             8310 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             8311 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             8312 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             8313 ; 107  |
                             8314 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             8315 ; 109  |// ERRORS
                             8316 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             8317 ; 111  |                                                                                          
                                  
                             8318 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             8319 ; 113  |
                             8320 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             8321 ; 115  |// Structure definitions
                             8322 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             8323 ; 117  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8324 ; 118  |typedef void (*ISR_VECTOR)(void);
                             8325 ; 119  |
                             8326 ; 120  |typedef struct
                             8327 ; 121  |{
                             8328 ; 122  |    WORD wSource;
                             8329 ; 123  |    WORD wPriority;
                             8330 ; 124  |    WORD wSteering;
                             8331 ; 125  |} ICOLL_ELEMENT;
                             8332 ; 126  |
                             8333 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             8334 ; 128  |// Prototypes
                             8335 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             8336 ; 130  |
                             8337 ; 131  |void _reentrant IcollShutDown(void);
                             8338 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             8339 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             8340 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             8341 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             8342 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             8343 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             8344 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             8345 ; 139  |#endif // #ifndef _ICOLL_H
                             8346 
                             8348 
                             8349 ; 27   |
                             8350 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             8351 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             8352 ; 30   |#endif
                             8353 ; 31   |
                             8354 ; 32   |#ifndef MAX_REGIONS
                             8355 ; 33   |#define MAX_REGIONS 5
                             8356 ; 34   |#endif 
                             8357 ; 35   |
                             8358 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             8359 ; 37   |
                             8360 ; 38   |struct TaskEntryStruct;
                             8361 ; 39   |
                             8362 ; 40   |union SyncObjectStruct;
                             8363 ; 41   |
                             8364 ; 42   |
                             8365 ; 43   |// JCP - Already defined in types.h
                             8366 ; 44   |
                             8367 ; 45   |//typedef struct {
                             8368 ; 46   |//    WORD m_wLength;
                             8369 ; 47   |//    WORD m_wMessage;
                             8370 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             8371 ; 49   |//} Message;
                             8372 ; 50   |
                             8373 ; 51   |typedef struct {
                             8374 ; 52   |    _circ WORD    *m_pHead;
                             8375 ; 53   |    _circ WORD    *m_pTail;
                             8376 ; 54   |} CircularBufferDescriptor;
                             8377 ; 55   |
                             8378 ; 56   |typedef struct MemoryRegionStruct {
                             8379 ; 57   |    WORD m_wResourceLoaded;
                             8380 ; 58   |    _P INT *m_StartAddress;
                             8381 ; 59   |    _P INT *m_EndAddress;
                             8382 ; 60   |} MemoryRegion;
                             8383 
                             8390 
                             8391 ; 61   |
                             8392 ; 62   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8393 ; 63   |typedef struct TaskEntryStruct{
                             8394 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             8395 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                             8396 ; 66   |    WORD    m_wWaitingOnWord;
                             8397 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                             8398 ; 68   |    WORD   *m_pStackPointer;
                             8399 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                             8400 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                             8401 ; 71   |                                                            //  be task aware.
                             8402 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                             8403 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                             8404 ; 74   |    WORD    m_wPriority;                                    
                             8405 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             8406 ; 76   |    WORD    m_wStackSize;
                             8407 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             8408 ; 78   |} TaskEntry;
                             8409 
                             8434 
                             8435 ; 79   |
                             8436 ; 80   |typedef union SyncObjectStruct {
                             8437 ; 81   |    TaskEntry   *m_pOwner;
                             8438 ; 82   |    struct
                             8439 ; 83   |    {
                             8440 ; 84   |    int          m_iOwner :16;
                             8441 ; 85   |    int          m_iCount : 8;
                             8442 ; 86   |    } counter;
                             8443 ; 87   |} SyncObject;
                             8444 ; 88   |
                             8445 ; 89   |typedef WORD SignalGroup;
                             8446 ; 90   |
                             8447 ; 91   |
                             8448 ; 92   |typedef struct {
                             8449 ; 93   |    WORD    m_wMessageType;
                             8450 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             8451 ; 95   |}  RoutingEntry;
                             8452 
                             8457 
                             8458 ; 96   |
                             8459 ; 97   |extern RoutingEntry g_RoutingTable[];
                             8460 ; 98   |extern TaskEntry *g_TaskList[];
                             8461 
                             8469 
                             8470 ; 99   |extern MemoryRegion *g_RegionTable[];
                             8471 ; 100  |
                             8472 ; 101  |//Time Releated Functions
                             8473 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             8474 ; 103  |
                             8475 ; 104  |//Task Related Functions
                             8476 ; 105  |_reentrant WORD SysGetTaskID(void);
                             8477 ; 106  |
                             8478 ; 107  |//Message related functions
                             8479 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             8480 
                             8487 
                             8488 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             8489 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8490 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             8491 ; 112  |
                             8492 ; 113  |//maybe this is too much functionality?
                             8493 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             8494 
                             8506 
                             8507 ; 115  |
                             8508 ; 116  |//SyncObject Related functions
                             8509 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             8510 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             8511 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             8512 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             8513 ; 121  |
                             8514 ; 122  |//Queue Related Functions
                             8515 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                             8516 ; 124  |
                             8517 ; 125  |//Event Related Functions
                             8518 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             8519 
                             8521 
                             8522 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             8523 ; 128  |
                             8524 ; 129  |//ISR function
                             8525 ; 130  |
                             8526 ; 131  |//SysCallFunctions
                             8527 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             8528 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             8529 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             8530 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             8531 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                             8532 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             8533 ; 138  |
                             8534 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             8535 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             8536 ; 141  |
                             8537 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             8538 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                             8539 ; 144  |
                             8540 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                             8541 ; 146  |
                             8542 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             8543 ; 148  |
                             8544 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                             8545 ; 150  |
                             8546 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                             8547 ; 152  |
                             8548 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                             8549 ; 154  |
                             8550 ; 155  |
                             8551 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                             8552 ; 157  |//is waiting on.
                             8553 ; 158  |#define EVENT_TIMEOUT   0
                             8554 ; 159  |#define EVENT_MESSAGE   1
                             8555 ; 160  |#define EVENT_OBJECT    2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8556 ; 161  |#define EVENT_QUEUE     4
                             8557 ; 162  |#define EVENT_SIGNAL    5
                             8558 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             8559 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             8560 ; 165  |
                             8561 ; 166  |
                             8562 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                             8563 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             8564 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             8565 ; 170  |
                             8566 ; 171  |
                             8567 ; 172  |#ifdef INSTRUMENT_ENABLE
                             8568 ; 173  |#include <regsgpio.h>
                             8569 ; 174  |
                             8570 ; 175  |//
                             8571 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             8572 ; 177  |//
                             8573 ; 178  |#define GPIO_24     B0
                             8574 ; 179  |#define GPIO_36     B12
                             8575 ; 180  |#define GPIO_37     B13
                             8576 ; 181  |#define GPIO_38     B14
                             8577 ; 182  |#define GPIO_39     B15
                             8578 ; 183  |#define GPIO_42     B18
                             8579 ; 184  |#define GPIO_46     B22
                             8580 ; 185  |#define GPIO_47     B23
                             8581 ; 186  |
                             8582 ; 187  |//=============================================================================
                             8583 ; 188  |// SysSignalEvent
                             8584 ; 189  |//-----------------------------------------------------------------------------
                             8585 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             8586 ; 191  |//! part.
                             8587 ; 192  |//! \param wGPIONumber 
                             8588 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             8589 ; 194  |//!     GPIO will be set.
                             8590 ; 195  |//!
                             8591 ; 196  |//! \return
                             8592 ; 197  |//!     None. 
                             8593 ; 198  |//!
                             8594 ; 199  |//=============================================================================
                             8595 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             8596 ; 201  |{                                           \ 
                             8597 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             8598 ; 203  |}
                             8599 ; 204  |
                             8600 ; 205  |//=============================================================================
                             8601 ; 206  |// SysClearEvent
                             8602 ; 207  |//-----------------------------------------------------------------------------
                             8603 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             8604 ; 209  |//! the part.
                             8605 ; 210  |//! \param wGPIONumber 
                             8606 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             8607 ; 212  |//!     GPIO will be set.
                             8608 ; 213  |//!
                             8609 ; 214  |//! \return
                             8610 ; 215  |//!     None. 
                             8611 ; 216  |//!
                             8612 ; 217  |//=============================================================================
                             8613 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             8614 ; 219  |{                                           \ 
                             8615 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             8616 ; 221  |}
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8617 ; 222  |
                             8618 ; 223  |//=============================================================================
                             8619 ; 224  |// SysEnableEvent
                             8620 ; 225  |//-----------------------------------------------------------------------------
                             8621 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             8622 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             8623 ; 228  |//!
                             8624 ; 229  |//! \param wGPIONumber 
                             8625 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             8626 ; 231  |//!     GPIO will be set.
                             8627 ; 232  |//!
                             8628 ; 233  |//! \return
                             8629 ; 234  |//!     None. 
                             8630 ; 235  |//!
                             8631 ; 236  |//=============================================================================
                             8632 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             8633 ; 238  |{                                           \ 
                             8634 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             8635 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             8636 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             8637 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             8638 ; 243  |}
                             8639 ; 244  |#else // INSTRUMENT_ENABLE
                             8640 ; 245  |#define SysSignalEvent(wGPIONumber)
                             8641 ; 246  |#define SysClearEvent(wGPIONumber)
                             8642 ; 247  |#define SysEnableEvent(wGPIONumber)
                             8643 ; 248  |#endif // INSTRUMENT_ENABLE
                             8644 ; 249  |    
                             8645 ; 250  |#endif
                             8646 
                             8648 
                             8649 ; 27   |#include "batterycharge.h"
                             8650 
                             8652 
                             8653 ; 1    |#ifndef __BATTERYCHARGE_H
                             8654 ; 2    |#define __BATTERYCHARGE_H
                             8655 ; 3    |
                             8656 ; 4    |//entry point for menus. function called via SysCallFunction()
                             8657 ; 5    |#ifdef STMP_BUILD_PLAYER
                             8658 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                             8659 ; 7    |#else
                             8660 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                             8661 ; 9    |#endif
                             8662 ; 10   |
                             8663 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                             8664 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                             8665 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                             8666 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                             8667 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                             8668 ; 16   |
                             8669 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                             8670 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                             8671 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                             8672 ; 20   |
                             8673 ; 21   |
                             8674 ; 22   |#endif 
                             8675 
                             8677 
                             8678 ; 28   |#include "battery_config.h"
                             8679 
                             8681 
                             8682 ; 1    |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8683 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             8684 ; 3    |// Filename: battery_config.h
                             8685 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             8686 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             8687 ; 6    |
                             8688 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             8689 ; 8    |    //these are 3500 only
                             8690 ; 9    |    #define VBATT_REF           REF_5120MV
                             8691 ; 10   |    #define VBATT_MIN_MV        3000
                             8692 ; 11   |    #define VBATT_MAX_MV        4200
                             8693 ; 12   |
                             8694 ; 13   |    #define VBATT_BO_MV         3000
                             8695 ; 14   |
                             8696 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             8697 ; 16   |
                             8698 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             8699 ; 18   |    //this is in mV
                             8700 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             8701 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             8702 ; 21   |    #endif 
                             8703 ; 22   |
                             8704 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             8705 ; 24   |    //This is in millivolts
                             8706 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             8707 ; 26   |    #endif
                             8708 ; 27   |
                             8709 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             8710 ; 29   |    //This is in mA.   
                             8711 ; 30   |    //Refer to the battery data sheet for the proper value
                             8712 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             8713 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             8714 ; 33   |    #endif 
                             8715 ; 34   |
                             8716 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             8717 ; 36   |    //the default is 4 hours
                             8718 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             8719 ; 38   |    #endif 
                             8720 ; 39   |
                             8721 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             8722 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             8723 ; 42   |    //charging on and off is 20 mV
                             8724 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             8725 ; 44   |    #endif 
                             8726 ; 45   |
                             8727 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             8728 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             8729 ; 48   |    //differential threshhold.  
                             8730 ; 49   |
                             8731 ; 50   |#ifdef STMP_BUILD_PLAYER
                             8732 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             8733 ; 52   |#else
                             8734 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             8735 ; 54   |#endif
                             8736 ; 55   |    #endif 
                             8737 ; 56   |
                             8738 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             8739 ; 58   |    //This is in mA.   
                             8740 ; 59   |    //Refer to the battery data sheet for the proper value
                             8741 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                             8742 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8743 ; 62   |    #endif 
                             8744 ; 63   |
                             8745 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             8746 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             8747 ; 66   |    //in this case, 2 minutes (was 30)
                             8748 ; 67   |#ifdef STMP_BUILD_PLAYER
                             8749 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             8750 ; 69   |#else
                             8751 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             8752 ; 71   |#endif
                             8753 ; 72   |    #endif
                             8754 ; 73   |
                             8755 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             8756 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             8757 ; 76   |#ifdef STMP_BUILD_PLAYER
                             8758 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             8759 ; 78   |#else
                             8760 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             8761 ; 80   |#endif
                             8762 ; 81   |        #endif
                             8763 ; 82   |#endif
                             8764 ; 83   |
                             8765 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             8766 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             8767 ; 86   |    #define ONE  1
                             8768 ; 87   |    #define ZERO 0
                             8769 ; 88   |
                             8770 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             8771 ; 90   |#ifdef STMP_BUILD_PLAYER
                             8772 ; 91   |    #define VBATT_REF          REF_2700MV
                             8773 ; 92   |    #define VBATT_MIN_MV       900
                             8774 ; 93   |    #define VBATT_MAX_MV       1500
                             8775 ; 94   |    #define VBATT_BO_MV        840
                             8776 ; 95   |#else
                             8777 ; 96   |    #define VBATT_REF          REF_5120MV
                             8778 ; 97   |    #define VBATT_MIN_MV       900
                             8779 ; 98   |    #define VBATT_MAX_MV       1200
                             8780 ; 99   |    #define VBATT_BO_MV        850
                             8781 ; 100  |#endif
                             8782 ; 101  |
                             8783 ; 102  |    #ifdef DEVICE_3500
                             8784 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             8785 ; 104  |    #else
                             8786 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             8787 ; 106  |    #endif
                             8788 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             8789 ; 108  |    
                             8790 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             8791 ; 110  |    //Units: mV. This is the rated battery voltage.
                             8792 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             8793 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             8794 ; 113  |    #endif 
                             8795 ; 114  |
                             8796 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             8797 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             8798 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             8799 ; 118  |    #endif
                             8800 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8801 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             8802 ; 121  |
                             8803 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             8804 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             8805 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             8806 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             8807 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             8808 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             8809 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             8810 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             8811 ; 130  |
                             8812 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             8813 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                             8814 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             8815 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             8816 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                             8817 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             8818 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             8819 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             8820 ; 139  |    // GPIO Enable register number as GPIO function.
                             8821 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             8822 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             8823 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             8824 ; 143  |    // bit num to use with desired input pin above
                             8825 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             8826 ; 145  |    
                             8827 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             8828 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             8829 ; 148  |    //------- end batt case polarity detection
                             8830 ; 149  |
                             8831 ; 150  |    //------------------------------------
                             8832 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             8833 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             8834 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                             8835 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             8836 ; 155  |    #endif 
                             8837 ; 156  |    
                             8838 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             8839 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             8840 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
                             8841 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             8842 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             8843 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             8844 ; 163  |    #endif   
                             8845 ; 164  |    #ifndef
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8846 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             8847 ; 166  |    #endif
                             8848 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             8849 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             8850 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             8851 ; 170  |    //-------------------------------------
                             8852 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             8853 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             8854 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             8855 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             8856 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             8857 ; 176  |    #endif
                             8858 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             8859 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             8860 ; 179  |    #endif
                             8861 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             8862 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             8863 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             8864 ; 183  |    #endif
                             8865 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             8866 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             8867 ; 186  |    #endif
                             8868 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             8869 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             8870 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             8871 ; 190  |    #endif    
                             8872 ; 191  |    //-------------------------------------
                             8873 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             8874 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             8875 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             8876 ; 195  |    #endif      
                             8877 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             8878 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             8879 ; 198  |    //the charging in this case,                       n minutes
                             8880 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             8881 ; 200  |    #endif
                             8882 ; 201  |
                             8883 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             8884 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             8885 ; 204  |#ifdef STMP_BUILD_PLAYER
                             8886 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             8887 ; 206  |#else
                             8888 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             8889 ; 208  |#endif
                             8890 ; 209  |        #endif
                             8891 ; 210  |    
                             8892 ; 211  |#endif // BATTERY_TYPE_NIMH
                             8893 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             8894 ; 213  |
                             8895 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             8896 ; 215  |#ifdef STMP_BUILD_PLAYER
                             8897 ; 216  |    #define VBATT_REF          REF_2700MV
                             8898 ; 217  |    #define VBATT_MIN_MV       900
                             8899 ; 218  |    #define VBATT_MAX_MV       1500
                             8900 ; 219  |    #define VBATT_BO_MV        840
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8901 ; 220  |#else
                             8902 ; 221  |    #define VBATT_REF          REF_5120MV
                             8903 ; 222  |    #define VBATT_MIN_MV       900
                             8904 ; 223  |    #define VBATT_MAX_MV       1500
                             8905 ; 224  |    #define VBATT_BO_MV        850
                             8906 ; 225  |#endif
                             8907 ; 226  |
                             8908 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             8909 ; 228  |    
                             8910 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             8911 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             8912 ; 231  |#endif 
                             8913 
                             8915 
                             8916 ; 29   |
                             8917 ; 30   |////////////////////////////////////////////////////////////////////////////////
                             8918 ; 31   |// Externs
                             8919 ; 32   |////////////////////////////////////////////////////////////////////////////////
                             8920 ; 33   |extern void SysBatteryGetLevel(void);
                             8921 ; 34   |extern WORD g_wVBatt_mV_NotCharging;
                             8922 ; 35   |
                             8923 ; 36   |//wAdcBattResolution is used for battery monitoring.  It was moved here to eliminate need 
                                  
                             8924 ; 37   |//for LowResolutionAdcInit.c.
                             8925 ; 38   |extern WORD    wAdcBattResolution;
                             8926 ; 39   |
                             8927 ; 40   |////////////////////////////////////////////////////////////////////////////////
                             8928 ; 41   |// Defs
                             8929 ; 42   |////////////////////////////////////////////////////////////////////////////////
                             8930 ; 43   |//Assumes HW_BATT_CTRL.I = 0x020200.  REF 5120MV
                             8931 ; 44   |#define BOOST_NLEV_BASE_STEP  46
                             8932 ; 45   |#define BOOST_LOW_BATT_SHUTDOWN_THRESHOLD 50
                             8933 ; 46   |#define BUCK_LOW_BATT_SHUTDOWN_THRESHOLD 160
                             8934 ; 47   |
                             8935 ; 48   |////////////////////////////////////////////////////////////////////////////////
                             8936 ; 49   |// Prototypes
                             8937 ; 50   |////////////////////////////////////////////////////////////////////////////////
                             8938 ; 51   |void _long_interrupt(HW_IVECVDD5VDISC/2) WallPowerDisconnected_ISR(void);
                             8939 ; 52   |void _long_interrupt(HW_IVECVDD5VCONN/2) WallPowerConnected_ISR(void);
                             8940 ; 53   |void _long_interrupt(ICOLL_SOURCE_BROWNOUT) SysBrownout_ISR(void);
                             8941 ; 54   |void _reentrant ServiceDCDC(void);
                             8942 ; 55   |////////////////////////////////////////////////////////////////////////////////
                             8943 ; 56   |// Variables
                             8944 ; 57   |////////////////////////////////////////////////////////////////////////////////
                             8945 ; 58   |_X  BOOL g_bServiceDCDC = FALSE;
                             8946 
                             8947 
X:0000                       8948         org     x,".xdatamiscproject",init:
                             8949 Fg_bServiceDCDC:
X:0000 000000                8950         dc      $000000
                             8953 
                             8954 ; 59   |_X  INT g_iBattLevel = 0;
                             8955 
                             8956 Fg_iBattLevel:
X:0001 000000                8957         dc      $000000
                             8960 
                             8961 ; 60   |
                             8962 ; 61   |////////////////////////////////////////////////////////////////////////////////
                             8963 ; 62   |// Code
                             8964 ; 63   |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8965 ; 64   |
                             8966 ; 65   |
                             8967 ; 66   |////////////////////////////////////////////////////////////////////////////////
                             8968 ; 67   |//
                             8969 ; 68   |//>  Name:          MiscProjectInit
                             8970 ; 69   |//
                             8971 ; 70   |//   Type:          Function
                             8972 ; 71   |//
                             8973 ; 72   |//   Description:   
                             8974 ; 73   |//
                             8975 ; 74   |//   Inputs:        none
                             8976 ; 75   |//
                             8977 ; 76   |//   Outputs:       RETCODE
                             8978 ; 77   |//
                             8979 ; 78   |//   Notes:         none
                             8980 ; 79   |//<
                             8981 ; 80   |////////////////////////////////////////////////////////////////////////////////
                             8982 ; 81   |RETCODE MiscProjectInit(void)
                             8983 ; 82   |{
                             8984 
P:0000                       8985         org     p,".ptextmiscproject":
                             9024 FMiscProjectInit:
P:0000 05707C rrrrrr  4    4 9025         movec   ssh,y:ss_MiscProjectInit
                             9027 
                             9028 ; 83   |        //Initialize Battery.  Hard code instead of using SysBatteryLRADCInit(); to save
                             9029 ; 84   |        //space.  Use the same batt control for both boost and buck.  Setting
                             9030 ; 85   |        //DIV2 will create a path to GND which allow the player to detect a 'no battery'
                             9031 ; 86   |        //condition. LRADC Settings: Batt Range - 5.12V-0V; REF_VAL-10, DIV2-1
                             9032 ; 87   |        HW_BATT_CTRL.I = 0x020200;
                             9033 
P:0002 57F400 020200  3    7 9035         move    #$20200,b
P:0004 557000 00FA20  3   10 9036         move    b1,x:$FA20
                             9037 
                             9038 ; 88   |        
                             9039 ; 89   |        //Initialize LRADC globals
                             9040 ; 90   |        wAdcBattResolution = RES_REF_5120MV;
                             9041 
P:0006 56F400 0000C8  3   13 9043         move    #>200,a
P:0008 5C7000 rrrrrr  3   16 9044         move    a1,y:FwAdcBattResolution
                             9045 
                             9046 ; 91   |
                             9047 ; 92   |    // Generically enable serial numbers for all media
                             9048 ; 93   |    SerialNumberEnableInit();
                             9049 
P:000A 0BF080 rrrrrr  6   22 9051         jsr     FSerialNumberEnableInit
                             9052 
                             9053 ; 94   |    
                             9054 ; 95   |    // Initialize the internal media serial number
                             9055 ; 96   |    InternalMediaSerialNumberInit();
                             9056 
P:000C 0BF080 rrrrrr  6   28 9058         jsr     FInternalMediaSerialNumberInit
                             9059 
                             9060 ; 97   |    
                             9061 ; 98   |    return SUCCESS;
                             9062 
P:000E 200013         2   30 9064         clr     a   
                             9065 
                             9066 ; 99   |}
                             9067 
P:000F 05F07C rrrrrr  4   34 9069         movec   y:ss_MiscProjectInit,ssh
P:0011 000000         2   36 9071         nop
P:0012 00000C         4   40 9072         rts
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9073 
Y:0000                       9074         org     y,".yovlmiscproject@MiscProjectInit",overlay:
                             9075 ss_MiscProjectInit:
Y:0000 RESERVED              9076         ds      1
Y:0000
                             9077 
P:0013                       9078         org     p,".ptextmiscproject":
                             9080 
                             9081 ; 100  |
                             9082 ; 101  |////////////////////////////////////////////////////////////////////////////////
                             9083 ; 102  |//
                             9084 ; 103  |//>  Name:          SerialNumberEnableInit
                             9085 ; 104  |//
                             9086 ; 105  |//   Type:          Function
                             9087 ; 106  |//
                             9088 ; 107  |//   Description:   
                             9089 ; 108  |//
                             9090 ; 109  |//   Inputs:        none
                             9091 ; 110  |//
                             9092 ; 111  |//   Outputs:       RETCODE
                             9093 ; 112  |//
                             9094 ; 113  |//   Notes:         none
                             9095 ; 114  |//<
                             9096 ; 115  |////////////////////////////////////////////////////////////////////////////////
                             9097 ; 116  |RETCODE _reentrant SerialNumberEnableInit(void)
                             9098 ; 117  |{
                             9099 
                             9104 FSerialNumberEnableInit:
                             9105 
                             9106 ; 118  |    return SUCCESS;
                             9107 
P:0013 200013         2   42 9109         clr     a   
                             9110 
                             9111 ; 119  |}
                             9112 
P:0014 00000C         4   46 9114         rts
                             9116 
                             9117 ; 120  |
                             9118 ; 121  |////////////////////////////////////////////////////////////////////////////////
                             9119 ; 122  |//
                             9120 ; 123  |//>  Name:          SerialNumbersEnabled
                             9121 ; 124  |//
                             9122 ; 125  |//   Type:          Function
                             9123 ; 126  |//
                             9124 ; 127  |//   Description:   
                             9125 ; 128  |//
                             9126 ; 129  |//   Inputs:        none
                             9127 ; 130  |//
                             9128 ; 131  |//   Outputs:       BOOL        TRUE if serial numbers enabled
                             9129 ; 132  |//                              FALSE if serial numbers disabled
                             9130 ; 133  |//
                             9131 ; 134  |//   Notes:         none
                             9132 ; 135  |//<
                             9133 ; 136  |////////////////////////////////////////////////////////////////////////////////
                             9134 ; 137  |BOOL _reentrant SerialNumbersEnabled(void)
                             9135 ; 138  |{
                             9136 
                             9141 FSerialNumbersEnabled:
                             9142 
                             9143 ; 139  |    #ifdef WMAAPI_NO_DRM
                             9144 ; 140  |        return FALSE;
                             9145 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0015 200013         2   48 9147         clr     a   
                             9148 
                             9149 ; 141  |    #else
                             9150 ; 142  |        return TRUE;
                             9151 ; 143  |    #endif    
                             9152 ; 144  |}
                             9153 
P:0016 00000C         4   52 9155         rts
                             9157 
                             9158 ; 145  |
                             9159 ; 146  |////////////////////////////////////////////////////////////////////////////////
                             9160 ; 147  |//
                             9161 ; 148  |//>  Name:          EnterNonReentrantSection
                             9162 ; 149  |//
                             9163 ; 150  |//   Type:          Function
                             9164 ; 151  |//
                             9165 ; 152  |//   Description:   Stub to satisfy linker, not actually needed.
                             9166 ; 153  |//
                             9167 ; 154  |//   Inputs:        none
                             9168 ; 155  |//
                             9169 ; 156  |//   Outputs:       none
                             9170 ; 157  |//
                             9171 ; 158  |//   Notes:         none
                             9172 ; 159  |//<
                             9173 ; 160  |////////////////////////////////////////////////////////////////////////////////
                             9174 ; 161  |void EnterNonReentrantSection(void)
                             9175 ; 162  |{
                             9176 
                             9181 FEnterNonReentrantSection:
                             9182 
                             9183 ; 163  |    return;
                             9184 ; 164  |}
                             9185 
P:0017 00000C         4   56 9187         rts
                             9189 
                             9190 ; 165  |
                             9191 ; 166  |////////////////////////////////////////////////////////////////////////////////
                             9192 ; 167  |//
                             9193 ; 168  |//>  Name:          LeaveNonReentrantSection
                             9194 ; 169  |//
                             9195 ; 170  |//   Type:          Function
                             9196 ; 171  |//
                             9197 ; 172  |//   Description:   Stub to satisfy linker, not actually needed.
                             9198 ; 173  |//
                             9199 ; 174  |//   Inputs:        none
                             9200 ; 175  |//
                             9201 ; 176  |//   Outputs:       none
                             9202 ; 177  |//
                             9203 ; 178  |//   Notes:         none
                             9204 ; 179  |//<
                             9205 ; 180  |////////////////////////////////////////////////////////////////////////////////
                             9206 ; 181  |void LeaveNonReentrantSection(void)
                             9207 ; 182  |{
                             9208 
                             9213 FLeaveNonReentrantSection:
                             9214 
                             9215 ; 183  |    return;
                             9216 ; 184  |}
                             9217 
P:0018 00000C         4   60 9219         rts
                             9221 
                             9222 ; 185  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9223 ; 186  |////////////////////////////////////////////////////////////////////////////////
                             9224 ; 187  |//
                             9225 ; 188  |//>  Name:          Init5VSense
                             9226 ; 189  |//
                             9227 ; 190  |//   Type:          Function
                             9228 ; 191  |//
                             9229 ; 192  |//   Description:   Initialize the 5V detection interrupts and variables
                             9230 ; 193  |//
                             9231 ; 194  |//   Inputs:        none
                             9232 ; 195  |//
                             9233 ; 196  |//   Outputs:       none
                             9234 ; 197  |//
                             9235 ; 198  |//   Notes:         none
                             9236 ; 199  |//<
                             9237 ; 200  |////////////////////////////////////////////////////////////////////////////////
                             9238 ; 201  |void _reentrant Init5VSense(void)
                             9239 ; 202  |{
                             9240 
                             9623 FInit5VSense:
P:0019 055F7C         2   62 9624         movec   ssh,y:(r7)+
                             9627 
                             9628 ; 203  |//Only add code if using 5V to DCDC Power Transfer
                             9629 ; 204  |#ifdef DCDC_POWER_TRANSFER
                             9630 ; 205  |        /* setup 5V Detect Interrupts */
                             9631 ; 206  |        // Since we are in USBMSC, the 5V connect INT is not needed     
                             9632 ; 207  |   IcollInstallIsrVector(WallPowerDisconnected_ISR,ICOLL_SOURCE_VDD_5V_DISCONNECTED);
                             9633 
P:001A 60F400 rrrrrr  3   65 9635         move    #FWallPowerDisconnected_ISR,r0
P:001C 56F400 000017  3   68 9636         move    #>23,a
P:001E 0BF080 rrrrrr  6   74 9637         jsr     FIcollInstallIsrVector
                             9638 
                             9639 ; 208  |   IcollInstallIsrVector(SysBrownout_ISR,ICOLL_SOURCE_BROWNOUT);
                             9640 
P:0020 60F400 rrrrrr  3   77 9642         move    #FSysBrownout_ISR,r0
P:0022 56F400 000030  3   80 9643         move    #>$30,a
P:0024 0BF080 rrrrrr  6   86 9644         jsr     FIcollInstallIsrVector
                             9645 
                             9646 ; 209  |
                             9647 ; 210  |   IcollSetPriority(ICOLL_SOURCE_VDD_5V_DISCONNECTED,ICOLL_PRIORITY_000);
                             9648 
P:0026 200013         2   88 9650         clr     a   
P:0027 281700         2   90 9651         move    #23,a0
P:0028 20001B         2   92 9652         clr     b   
P:0029 0BF080 rrrrrr  6   98 9653         jsr     FIcollSetPriority
                             9654 
                             9655 ; 211  |   IcollSetSteering(ICOLL_SOURCE_VDD_5V_DISCONNECTED,ICOLL_STEERING_IVL3);    
                             9656 
P:002B 200013         2  100 9658         clr     a   
P:002C 281700         2  102 9659         move    #23,a0
P:002D 57F400 000002  3  105 9660         move    #>2,b
P:002F 0BF080 rrrrrr  6  111 9661         jsr     FIcollSetSteering
                             9662 
                             9663 ; 212  |   IcollEnable(ICOLL_SOURCE_VDD_5V_DISCONNECTED);
                             9664 
P:0031 200013         2  113 9666         clr     a   
P:0032 281700         2  115 9667         move    #23,a0
P:0033 0BF080 rrrrrr  6  121 9668         jsr     FIcollEnable
                             9669 
                             9670 ; 213  |
                             9671 ; 214  |   HW_IPR.B.L3P = 3;  //Must be set to highest priority
                             9672 
P:0035 084F3F         2  123 9674         movep   x:<<$FFFF,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0036 250300         2  125 9675         move    #<3,x1
P:0037 20006A         2  127 9676         or      x1,b
P:0038 08CD3F         4  131 9677         movep   b1,x:<<$FFFF
                             9678 
                             9679 ; 215  |   
                             9680 ; 216  |        // Enable the IRQB interrupt & set level
                             9681 ; 217  |        HW_IPR.B.IRQBP = 1;
                             9682 
P:0039 084F3F         2  133 9684         movep   x:<<$FFFF,b
P:003A 46F400 FFFFE7  3  136 9685         move    #$FFFFE7,y0
P:003C 20005E         2  138 9686         and     y0,b
P:003D 46F400 000008  3  141 9687         move    #>8,y0
P:003F 20005A         2  143 9688         or      y0,b
P:0040 08CD3F         4  147 9689         movep   b1,x:<<$FFFF
                             9690 
                             9691 ; 218  |        HW_IPR.B.IRQBT = 0;
                             9692 
P:0041 0ABF05         4  151 9694         bclr    #5,x:<<$FFFF
                             9695 
                             9696 ; 219  |
                             9697 ; 220  |        // Turn On Interrupts
                             9698 ; 221  |        HW_USBCSR.B.VBUSDISCXIE = 1;
                             9699 
P:0042 0A7026 00F200  6  157 9701         bset    #6,x:$F200
                             9702 
                             9703 ; 222  |        HW_USBCSR.B.VBUSCXIE = 1;
                             9704 
P:0044 0A7024 00F200  6  163 9706         bset    #4,x:$F200
                             9707 
                             9708 ; 223  |        HW_ICLENABLE0R.B.SEN20 = 1;
                             9709 
P:0046 0A7034 00F300  6  169 9711         bset    #20,x:$F300
                             9712 
                             9713 ; 224  |        HW_ICLENABLE0R.B.SEN23 = 1;
                             9714 
P:0048 0A7037 00F300  6  175 9716         bset    #23,x:$F300
                             9717 
                             9718 ; 225  |
                             9719 ; 226  |        //*******TEMP Power/LRADC Settings.  Can be Moved Later *********//
                             9720 ; 227  |        //DCDC settings, only required if using the 5V-DCDC power hand off on disconnects.
                                  
                             9721 ; 228  |        
                             9722 ; 229  |        //With the 5V to DCDC power transfer, there is no VDDIO protection.  Need to add i
                                  t.
                             9723 ; 230  |        HW_DCDC_VDDIO.B.BROWNOUT_ENABLE = 1;
                             9724 
P:004A 0A7030 00FA0E  6  181 9726         bset    #16,x:$FA0E
                             9727 
                             9728 ; 231  |
                             9729 ; 232  |#ifdef BATTERY_TYPE_LI_ION
                             9730 ; 233  |                //buck mode
                             9731 ; 234  |                HW_DCDC1_CTRL0.B.NLEV = 0x12;
                             9732 
P:004C 56F000 00FA0C  3  184 9734         move    x:$FA0C,a
P:004E 46F400 E0FFFF  3  187 9735         move    #$E0FFFF,y0
P:0050 200056         2  189 9736         and     y0,a
P:0051 261200         2  191 9737         move    #<$12,y0
P:0052 200052         2  193 9738         or      y0,a
P:0053 547000 00FA0C  3  196 9739         move    a1,x:$FA0C
                             9740 
                             9741 ; 235  |                HW_DCDC2_CTRL0.B.NLEV = 0x09;
                             9742 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0055 57F000 00FA11  3  199 9744         move    x:$FA11,b
P:0057 44F400 E0FFFF  3  202 9745         move    #$E0FFFF,x0
P:0059 20004E         2  204 9746         and     x0,b
P:005A 240900         2  206 9747         move    #<9,x0
P:005B 20004A         2  208 9748         or      x0,b
P:005C 557000 00FA11  3  211 9749         move    b1,x:$FA11
                             9750 
                             9751 ; 236  |        HW_MIXTBR.I = 0x010040;         //clock glitch stmp10060 clear HW_MIXTBR.XBGC bit 
                                  was 0x012040;
                             9752 
P:005E 46F400 010040  3  214 9754         move    #65600,y0
P:0060 467000 00FA03  3  217 9755         move    y0,x:$FA03
                             9756 
                             9757 ; 237  |                HW_DCDC_TBR.I = 0x009000;
                             9758 
P:0062 44F400 009000  3  220 9760         move    #$9000,x0
P:0064 447000 00FA14  3  223 9761         move    x0,x:$FA14
                             9762 
                             9763 ; 238  |                HW_BATT_THRSH.B.THRESHOLD_EVENT0 = BUCK_LOW_BATT_SHUTDOWN_THRESHOLD;
                             9764 
P:0066 57F000 00FA21  3  226 9766         move    x:$FA21,b
P:0068 46F400 FFFE00  3  229 9767         move    #$FFFE00,y0
P:006A 20005E         2  231 9768         and     y0,b
P:006B 46F400 0000A0  3  234 9769         move    #>$A0,y0
P:006D 20005A         2  236 9770         or      y0,b
P:006E 557000 00FA21  3  239 9771         move    b1,x:$FA21
                             9772 
                             9773 ; 239  |#else
                             9774 ; 240  |                //boost mode
                             9775 ; 241  |                HW_DCDC1_CTRL0.B.NLEV = 0x01;
                             9776 ; 242  |                HW_DCDC2_CTRL0.B.NLEV = 0x01;
                             9777 ; 243  |                HW_MIXTBR.I = 0x010040;           //clock glitch stmp10060 clear HW_MIXTBR
                                  .XBGC bit was 0x012040;
                             9778 ; 244  |                HW_DCDC_TBR.I = 0x009000;       
                             9779 ; 245  |                HW_BATT_THRSH.B.THRESHOLD_EVENT0 = BOOST_LOW_BATT_SHUTDOWN_THRESHOLD;
                             9780 ; 246  |#endif
                             9781 ; 247  |
                             9782 ; 248  |        //reset R/C Values to correct state
                             9783 ; 249  |    HW_DCDC1_CTRL1.B.R = 5;
                             9784 
P:0070 56F000 00FA0D  3  242 9786         move    x:$FA0D,a
P:0072 47F400 FFFF0F  3  245 9787         move    #$FFFF0F,y1
P:0074 200076         2  247 9788         and     y1,a
P:0075 47F400 000050  3  250 9789         move    #>$50,y1
P:0077 200072         2  252 9790         or      y1,a
P:0078 547000 00FA0D  3  255 9791         move    a1,x:$FA0D
                             9792 
                             9793 ; 250  |        HW_DCDC1_CTRL1.B.C = 4;
                             9794 
P:007A 57F000 00FA0D  3  258 9796         move    x:$FA0D,b
P:007C 45F400 FFFFF0  3  261 9797         move    #$FFFFF0,x1
P:007E 20006E         2  263 9798         and     x1,b
P:007F 45F400 000004  3  266 9799         move    #>4,x1
P:0081 20006A         2  268 9800         or      x1,b
P:0082 557000 00FA0D  3  271 9801         move    b1,x:$FA0D
                             9802 
                             9803 ; 251  |        HW_DCDC2_CTRL1.B.R = 5;
                             9804 
P:0084 57F000 00FA12  3  274 9806         move    x:$FA12,b
P:0086 45F400 FFFF0F  3  277 9807         move    #$FFFF0F,x1
P:0088 20006E         2  279 9808         and     x1,b
P:0089 20E500         2  281 9809         move    y1,x1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
P:008A 20006A         2  283 9810         or      x1,b
P:008B 557000 00FA12  3  286 9811         move    b1,x:$FA12
                             9812 
                             9813 ; 252  |        HW_DCDC2_CTRL1.B.C = 4;
                             9814 
P:008D 57F000 00FA12  3  289 9816         move    x:$FA12,b
P:008F 46F400 FFFFF0  3  292 9817         move    #$FFFFF0,y0
P:0091 20005E         2  294 9818         and     y0,b
P:0092 46F400 000004  3  297 9819         move    #>4,y0
P:0094 20005A         2  299 9820         or      y0,b
P:0095 557000 00FA12  3  302 9821         move    b1,x:$FA12
                             9822 
                             9823 ; 253  |
                             9824 ; 254  |    //  low power mode with Ring OSC not counting
                             9825 ; 255  |        // RINGOSC1/2 are used to read the dc-dc duty cycle
                             9826 ; 256  |    HW_SPEED.I &= (HW_SPEED_OSC1_START_COUNT_CLRMASK & HW_SPEED_OSC1_PWRUP_CLRMASK & HW_SP
                                  EED_OSC2_PWRUP_CLRMASK & HW_SPEED_OSC2_START_COUNT_CLRMASK);
                             9827 
P:0097 57F000 00FA13  3  305 9829         move    x:$FA13,b
P:0099 46F400 FFCFFC  3  308 9830         move    #16764924,y0
P:009B 20005E         2  310 9831         and     y0,b
P:009C 557000 00FA13  3  313 9832         move    b1,x:$FA13
                             9833 
                             9834 ; 257  |    SysWait(1);
                             9835 
P:009E 56F400 000001  3  316 9837         move    #>1,a
P:00A0 0BF080 rrrrrr  6  322 9838         jsr     FSysWait
                             9839 
                             9840 ; 258  |
                             9841 ; 259  |        //The DCDC Converters serviced to ensure the proper control state.
                             9842 ; 260  |        if(HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT)
                             9843 
P:00A2 50F000 00FA1D  3  325 9845         move    x:$FA1D,a0
P:00A4 0AC814 rrrrrr  6  331 9846         jclr    #20,a0,L3
                             9847 
                             9848 ; 261  |        {               
                             9849 ; 262  |                //service the DCDC Converters
                             9850 ; 263  |                g_bServiceDCDC = TRUE;
                             9851 
P:00A6 46F400 000001  3  334 9853         move    #>1,y0
P:00A8 467000 rrrrrr  3  337 9854         move    y0,x:Fg_bServiceDCDC
                             9855 
                             9856 ; 264  |        ServiceDCDC();
                             9857 
P:00AA 0BF080 rrrrrr  6  343 9859         jsr     FServiceDCDC
                             9860 
                             9861 ; 265  |
                             9862 ; 266  |        }
                             9863 
P:00AC 0AF080 rrrrrr  6  349 9865         jmp     L5
                             9866 
                             9867 ; 267  |        else
                             9868 ; 268  |        {       //If 5V was connected during the ROM, the PWDN_ON_IOBRNOUT bit will be set
                                  .  This bit 
                             9869 ; 269  |                //forces the internal linear regulators to stay on.  If 5V is removed with
                                   PWDN_ON_IOBRNOUT 
                             9870 ; 270  |                //bit set, the player will shutdown in Boost or 2 Channel Buck.  In Single
                                   channel buck, 
                             9871 ; 271  |                //the external VDDIO regulator will actually supply power to VDDD.  If the
                                   PWDN_ON_IOBRNOUT 
                             9872 ; 272  |                //bit is cleared before the DCDC Converter is initialized, the player will
                                   crash.  Need to 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9873 ; 273  |                //service the DCDC converter before clearing PWDN_ON_IOBRNOUT to maintain 
                                  power in 1 channel buck.
                             9874 ; 274  |                if(HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT)
                             9875 
P:00AE 46F000 00FA1D  3  352 9877 L3:     move    x:$FA1D,y0
P:00B0 0AC60D rrrrrr  6  358 9878         jclr    #13,y0,L5
                             9879 
                             9880 ; 275  |                {
                             9881 ; 276  |                        //service the DCDC Converters
                             9882 ; 277  |                        g_bServiceDCDC = TRUE;
                             9883 
P:00B2 44F400 000001  3  361 9885         move    #>1,x0
P:00B4 447000 rrrrrr  3  364 9886         move    x0,x:Fg_bServiceDCDC
                             9887 
                             9888 ; 278  |                        ServiceDCDC();
                             9889 
P:00B6 0BF080 rrrrrr  6  370 9891         jsr     FServiceDCDC
                             9892 
                             9893 ; 279  |
                             9894 ; 280  |                        HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;
                             9895 
P:00B8 0A700D 00FA1D  6  376 9897         bclr    #13,x:$FA1D
                             9898 
                             9899 ; 281  |
                             9900 ; 282  |                        //reset R/C Values to correct state
                             9901 ; 283  |                HW_DCDC1_CTRL1.B.R = 5;
                             9902 
P:00BA 57F000 00FA0D  3  379 9904         move    x:$FA0D,b
P:00BC 46F400 FFFF0F  3  382 9905         move    #$FFFF0F,y0
P:00BE 20005E         2  384 9906         and     y0,b
P:00BF 46F400 000050  3  387 9907         move    #>$50,y0
P:00C1 20005A         2  389 9908         or      y0,b
P:00C2 557000 00FA0D  3  392 9909         move    b1,x:$FA0D
                             9910 
                             9911 ; 284  |                HW_DCDC1_CTRL1.B.C = 4;
                             9912 
P:00C4 56F000 00FA0D  3  395 9914         move    x:$FA0D,a
P:00C6 47F400 FFFFF0  3  398 9915         move    #$FFFFF0,y1
P:00C8 200076         2  400 9916         and     y1,a
P:00C9 47F400 000004  3  403 9917         move    #>4,y1
P:00CB 200072         2  405 9918         or      y1,a
P:00CC 547000 00FA0D  3  408 9919         move    a1,x:$FA0D
                             9920 
                             9921 ; 285  |                HW_DCDC2_CTRL1.B.R = 5;
                             9922 
P:00CE 57F000 00FA12  3  411 9924         move    x:$FA12,b
P:00D0 46F400 FFFF0F  3  414 9925         move    #$FFFF0F,y0
P:00D2 20005E         2  416 9926         and     y0,b
P:00D3 46F400 000050  3  419 9927         move    #>$50,y0
P:00D5 20005A         2  421 9928         or      y0,b
P:00D6 557000 00FA12  3  424 9929         move    b1,x:$FA12
                             9930 
                             9931 ; 286  |                HW_DCDC2_CTRL1.B.C = 4;
                             9932 
P:00D8 57F000 00FA12  3  427 9934         move    x:$FA12,b
P:00DA 44F400 FFFFF0  3  430 9935         move    #$FFFFF0,x0
P:00DC 20004E         2  432 9936         and     x0,b
P:00DD 20E400         2  434 9937         move    y1,x0
P:00DE 20004A         2  436 9938         or      x0,b
P:00DF 557000 00FA12  3  439 9939         move    b1,x:$FA12
                             9940 
                             9941 ; 287  |                }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9942 ; 288  |        }
                             9943 
                             9945 L5:
                             9946 
                             9947 ; 289  |#endif    //DCDC_POWER_TRANSFER
                             9948 ; 290  |}
                             9949 
P:00E1 05FF7C         4  443 9951         movec   y:-(r7),ssh
P:00E2 000000         2  445 9954         nop
P:00E3 00000C         4  449 9955         rts
                             9957 
                             9958 ; 291  |
                             9959 ; 292  |////////////////////////////////////////////////////////////////////////////////
                             9960 ; 293  |//
                             9961 ; 294  |//>  Name:          ServiceDCDC
                             9962 ; 295  |//
                             9963 ; 296  |//   Type:          Function
                             9964 ; 297  |//
                             9965 ; 298  |//   Description:   Service the DCDC converter to prepare for disconnect
                             9966 ; 299  |//
                             9967 ; 300  |//   Inputs:        none
                             9968 ; 301  |//
                             9969 ; 302  |//   Outputs:       none
                             9970 ; 303  |//
                             9971 ; 304  |//   Notes:         none
                             9972 ; 305  |//<
                             9973 ; 306  |////////////////////////////////////////////////////////////////////////////////
                             9974 ; 307  |void _reentrant ServiceDCDC(void)
                             9975 ; 308  |{         
                             9976 
                             9992 FServiceDCDC:
P:00E4 055F7C         2  451 9993         movec   ssh,y:(r7)+
                            10000 
                            10001 ; 309  |//Only add code if using 5V to DCDC Power Transfer
                            10002 ; 310  |#ifdef DCDC_POWER_TRANSFER
                            10003 ; 311  |
                            10004 ; 312  |  INT iBattLevel=0;
                            10005 ; 313  |  INT iNLevel=0;
                            10006 ; 314  |
                            10007 ; 315  |  if(g_bServiceDCDC)    //service DCDC converter if flag is set
                            10008 
P:00E5 56F000 rrrrrr  3  45410010         move    x:Fg_bServiceDCDC,a
P:00E7 2A0000         2  45610011         move    #0,a2
P:00E8 200003         2  45810012         tst     a
P:00E9 0AF0AA rrrrrr  6  46410013         jeq     L25
                            10014 
                            10015 ; 316  |  {             
                            10016 ; 317  |                if((HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT) || (HW_VDD5V_PWR_CHARGE.B.PWDN_ON
                                  _IOBRNOUT))
                            10017 
P:00EB 47F000 00FA1D  3  46710019         move    x:$FA1D,y1
P:00ED 0AC734 rrrrrr  6  47310020         jset    #20,y1,L16
P:00EF 44F000 00FA1D  3  47610021         move    x:$FA1D,x0
P:00F1 0AC40D rrrrrr  6  48210022         jclr    #13,x0,L22
                            10023 
                            10024 ; 318  |                {
                            10025 ; 319  |//Build option to service DCDC based on DCDC Mode (boost or buck)
                            10026 ; 320  |#ifdef BATTERY_TYPE_LI_ION
                            10027 ; 321  |                // Open DCDC control loop and set it up to be close to desired target for 
                                  disconnect.
                            10028 ; 322  |                HW_DCDC1_CTRL1.B.R = 9;
                            10029 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00F3 57F000 00FA0D  3  48510031 L16:    move    x:$FA0D,b
P:00F5 46F400 FFFF0F  3  48810032         move    #$FFFF0F,y0
P:00F7 20005E         2  49010033         and     y0,b
P:00F8 46F400 000090  3  49310034         move    #>$90,y0
P:00FA 20005A         2  49510035         or      y0,b
P:00FB 557000 00FA0D  3  49810036         move    b1,x:$FA0D
                            10037 
                            10038 ; 323  |                HW_DCDC1_CTRL1.B.C = 0;
                            10039 
P:00FD 57F000 00FA0D  3  50110041         move    x:$FA0D,b
P:00FF 44F400 FFFFF0  3  50410042         move    #$FFFFF0,x0
P:0101 20004E         2  50610043         and     x0,b
P:0102 557000 00FA0D  3  50910044         move    b1,x:$FA0D
                            10045 
                            10046 ; 324  |                HW_DCDC2_CTRL1.B.R = 9;
                            10047 
P:0104 56F000 00FA12  3  51210049         move    x:$FA12,a
P:0106 46F400 FFFF0F  3  51510050         move    #$FFFF0F,y0
P:0108 200056         2  51710051         and     y0,a
P:0109 46F400 000090  3  52010052         move    #>$90,y0
P:010B 200052         2  52210053         or      y0,a
P:010C 547000 00FA12  3  52510054         move    a1,x:$FA12
                            10055 
                            10056 ; 325  |                HW_DCDC2_CTRL1.B.C = 0;
                            10057 
P:010E 57F000 00FA12  3  52810059         move    x:$FA12,b
P:0110 20004E         2  53010060         and     x0,b
P:0111 557000 00FA12  3  53310061         move    b1,x:$FA12
                            10062 
                            10063 ; 326  |
                            10064 ; 327  |                //Check for Single Channel Buck.  DCDCMODE=1 for 100-pin package.  DCDCMOD
                                  E=3 if 144-pin package
                            10065 ; 328  |                        //is forced to single channel buck
                            10066 ; 329  |                if ((HW_REVR.B.DCDCMODE == 0x1)||(HW_REVR.B.DCDCMODE == 0x3))
                            10067 
P:0113 45F000 00FA02  3  53610069         move    x:$FA02,x1
P:0115 0105F8         2  53810070         mpy     x1,#5,b
P:0116 45F400 000007  3  54110071         move    #>7,x1
P:0118 20006E         2  54310072         and     x1,b
P:0119 44F400 000001  3  54610073         move    #>1,x0
P:011B 21AF00         2  54810074         move    b1,b
P:011C 2B0000         2  55010075         move    #0,b2
P:011D 20004D         2  55210076         cmp     x0,b
P:011E 0AF0AA rrrrrr  6  55810077         jeq     L17
P:0120 46F000 00FA02  3  56110078         move    x:$FA02,y0
P:0122 0105E0         2  56310079         mpy     y0,#5,a
P:0123 20A600         2  56510080         move    x1,y0
P:0124 200056         2  56710081         and     y0,a
P:0125 218E00         2  56910082         move    a1,a
P:0126 46F400 000003  3  57210083         move    #>3,y0
P:0128 2A0000         2  57410084         move    #0,a2
P:0129 200055         2  57610085         cmp     y0,a
P:012A 0AF0A2 rrrrrr  6  58210086         jne     L18
                            10087 
                            10088 ; 330  |                {   
                            10089 ; 331  |                // Control loop is in a bad state
                            10090 ; 332  |                HW_DCDC1_CTRL0.B.NLEV = 0x1A;
                            10091 
P:012C 57F000 00FA0C  3  58510093 L17:    move    x:$FA0C,b
P:012E 45F400 E0FFFF  3  58810094         move    #$E0FFFF,x1
P:0130 20006E         2  59010095         and     x1,b
P:0131 251A00         2  59210096         move    #<$1A,x1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0132 20006A         2  59410097         or      x1,b
P:0133 557000 00FA0C  3  59710098         move    b1,x:$FA0C
                            10099 
                            10100 ; 333  |                SysWait(1);
                            10101 
P:0135 56F400 000001  3  60010103         move    #>1,a
P:0137 0BF080 rrrrrr  6  60610104         jsr     FSysWait
                            10105 
                            10106 ; 334  |                HW_DCDC1_CTRL0.B.NLEV = 0x12;                
                            10107 
P:0139 57F000 00FA0C  3  60910109         move    x:$FA0C,b
P:013B 46F400 E0FFFF  3  61210110         move    #$E0FFFF,y0
P:013D 20005E         2  61410111         and     y0,b
P:013E 261200         2  61610112         move    #<$12,y0
P:013F 20005A         2  61810113         or      y0,b
P:0140 557000 00FA0C  3  62110114         move    b1,x:$FA0C
                            10115 
                            10116 ; 335  |                // Ring OSC1 should be around 0x78 at this point
                            10117 ; 336  |                                g_bServiceDCDC = FALSE;    //control loop in a good state;
                                   stop service
                            10118 
P:0142 2D0000         2  62310120         move    #0,b1
P:0143 557000 rrrrrr  3  62610121         move    b1,x:Fg_bServiceDCDC
                            10122 
                            10123 ; 337  |                                HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;  //Clear PWDN_ON
                                  _IOBRNOUT bit
                            10124 
P:0145 0A700D 00FA1D  6  63210126         bclr    #13,x:$FA1D
                            10127 
                            10128 ; 338  |                        }
                            10129 
P:0147 0AF080 rrrrrr  6  63810131         jmp     L25
                            10132 
                            10133 ; 339  |                else
                            10134 ; 340  |                {   // 2 Channel buck mode
                            10135 ; 341  |                        // Ring OSC2 should be between 0x20 and 0x30 after the loop runs a
                                   few times
                            10136 ; 342  |                if((HW_SPEED.B.RINGOSC2 < 0x27) || (HW_SPEED.B.RINGOSC2 > 0x30))
                            10137 
P:0149 45F000 00FA13  3  64110139 L18:    move    x:$FA13,x1
P:014B 0110F0         2  64310140         mpy     x1,#16,a
P:014C 45F400 00007F  3  64610141         move    #>$7F,x1
P:014E 200066         2  64810142         and     x1,a
P:014F 218E00         2  65010143         move    a1,a
P:0150 57F400 000027  3  65310144         move    #>39,b
P:0152 2A0000         2  65510145         move    #0,a2
P:0153 200005         2  65710146         cmp     b,a
P:0154 0AF0A9 rrrrrr  6  66310147         jlt     L19
P:0156 46F000 00FA13  3  66610148         move    x:$FA13,y0
P:0158 0110E8         2  66810149         mpy     y0,#16,b
P:0159 20A600         2  67010150         move    x1,y0
P:015A 20005E         2  67210151         and     y0,b
P:015B 21AF00         2  67410152         move    b1,b
P:015C 46F400 000030  3  67710153         move    #>$30,y0
P:015E 2B0000         2  67910154         move    #0,b2
P:015F 20005D         2  68110155         cmp     y0,b
P:0160 0AF0AF rrrrrr  6  68710156         jle     L20
                            10157 
                            10158 ; 343  |                {  
                            10159 ; 344  |                        // Control loop is in a bad state
                            10160 ; 345  |                        HW_DCDC2_CTRL1.B.FFOR = 1;
                            10161 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0162 56F000 00FA12  3  69010163 L19:    move    x:$FA12,a
P:0164 45F400 FFF8FF  3  69310164         move    #$FFF8FF,x1
P:0166 200066         2  69510165         and     x1,a
P:0167 45F400 000100  3  69810166         move    #$100,x1
P:0169 200062         2  70010167         or      x1,a
P:016A 547000 00FA12  3  70310168         move    a1,x:$FA12
P:016C 56F400 000001  3  70610169         move    #>1,a
                            10170 
                            10171 ; 346  |                        SysWait(1);
                            10172 
P:016E 0BF080 rrrrrr  6  71210174         jsr     FSysWait
                            10175 
                            10176 ; 347  |                        HW_DCDC2_CTRL1.B.FFOR = 0;
                            10177 
P:0170 57F000 00FA12  3  71510179         move    x:$FA12,b
P:0172 46F400 FFF8FF  3  71810180         move    #$FFF8FF,y0
P:0174 20005E         2  72010181         and     y0,b
P:0175 557000 00FA12  3  72310182         move    b1,x:$FA12
                            10183 
                            10184 ; 348  |                }
                            10185 
P:0177 0AF080 rrrrrr  6  72910187         jmp     L21
                            10188 
                            10189 ; 349  |                                else
                            10190 ; 350  |                                {
                            10191 ; 351  |                                        g_bServiceDCDC = FALSE;    //control loop in a goo
                                  d state; stop service           
                            10192 
P:0179 2C0000         2  73110194 L20:    move    #0,a1
P:017A 547000 rrrrrr  3  73410195         move    a1,x:Fg_bServiceDCDC
                            10196 
                            10197 ; 352  |                                        HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;  //Clear
                                   PWDN_ON_IOBRNOUT bit
                            10198 
P:017C 0A700D 00FA1D  6  74010200         bclr    #13,x:$FA1D
                            10201 
                            10202 ; 353  |                                        HW_DCDC2_CTRL0.B.NLEV = 0x1F;  //Now change NLEV t
                                  o Buck State
                            10203 
P:017E 57F000 00FA11  3  74310205         move    x:$FA11,b
P:0180 261F00         2  74510206         move    #<$1F,y0
P:0181 20005A         2  74710207         or      y0,b
P:0182 557000 00FA11  3  75010208         move    b1,x:$FA11
                            10209 
                            10210 ; 354  |                                }
                            10211 ; 355  |
                            10212 ; 356  |                // Control loop is in a bad state
                            10213 ; 357  |                HW_DCDC1_CTRL0.B.NLEV = 0x1A;
                            10214 
P:0184 56F000 00FA0C  3  75310216 L21:    move    x:$FA0C,a
P:0186 44F400 E0FFFF  3  75610217         move    #$E0FFFF,x0
P:0188 200046         2  75810218         and     x0,a
P:0189 241A00         2  76010219         move    #<$1A,x0
P:018A 200042         2  76210220         or      x0,a
P:018B 547000 00FA0C  3  76510221         move    a1,x:$FA0C
                            10222 
                            10223 ; 358  |                SysWait(1);
                            10224 
P:018D 56F400 000001  3  76810226         move    #>1,a
P:018F 0BF080 rrrrrr  6  77410227         jsr     FSysWait
                            10228 
                            10229 ; 359  |                HW_DCDC1_CTRL0.B.NLEV = 0x12;                
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10230 
P:0191 57F000 00FA0C  3  77710232         move    x:$FA0C,b
P:0193 46F400 E0FFFF  3  78010233         move    #$E0FFFF,y0
P:0195 20005E         2  78210234         and     y0,b
P:0196 261200         2  78410235         move    #<$12,y0
P:0197 20005A         2  78610236         or      y0,b
P:0198 557000 00FA0C  3  78910237         move    b1,x:$FA0C
                            10238 
                            10239 ; 360  |                // Ring OSC1 should be around 0x78 at this point
                            10240 ; 361  |                }
                            10241 ; 362  |#else //Boost Player
                            10242 ; 363  |                // Open DCDC control loop and set it up to be close to desired target for 
                                  disconnect.
                            10243 ; 364  |                HW_DCDC1_CTRL1.B.R = 9;
                            10244 ; 365  |                HW_DCDC1_CTRL1.B.C = 0;
                            10245 ; 366  |                HW_DCDC2_CTRL1.B.R = 9;
                            10246 ; 367  |                HW_DCDC2_CTRL1.B.C = 0;
                            10247 ; 368  |
                            10248 ; 369  |                // boost mode
                            10249 ; 370  |                        //Check the battery level and updated if it has changed.  Required
                                   for Boost Mode.        
                            10250 ; 371  |                        iBattLevel=HW_BATT_RESULT.B.DATA_OUT;
                            10251 ; 372  |
                            10252 ; 373  |            // alter NLEV and return back to step control loop
                            10253 ; 374  |                        //scale NLEV based on battery voltage.  if >1.44 NLEV=06, 1.44V-0.
                                  9V NLEV=06 to NLEV=31 
                            10254 ; 375  |                        iNLevel = 31-(iBattLevel-BOOST_NLEV_BASE_STEP);   //assumes HW_BAT
                                  T_CTRL.I = 0x020200 (steps 46-72)
                            10255 ; 376  |                        if (iNLevel < 6)
                            10256 ; 377  |                                iNLevel = 6;
                            10257 ; 378  |                        else if (iNLevel > 31)
                            10258 ; 379  |                                iNLevel = 31;
                            10259 ; 380  |
                            10260 ; 381  |            HW_DCDC1_CTRL0.B.NLEV = iNLevel; 
                            10261 ; 382  |            
                            10262 ; 383  |                        //Control Loop in an open state, clear PWDN_ON_IOBRNOUT bit
                            10263 ; 384  |            HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;                       
                            10264 ; 385  |                        
                            10265 ; 386  |                        // disable battery brownout for case with 5V present and battery r
                                  emoved
                            10266 ; 387  |            // ** currently disabled in usbmsc in SDK ** add code if change SDK
                            10267 ; 388  |                
                            10268 ; 389  |#endif
                            10269 ; 390  |                }
                            10270 
P:019A 0AF080 rrrrrr  6  79510272         jmp     L25
                            10273 
                            10274 ; 391  |                else  //5V is not connected,  close DCDC control loop
                            10275 ; 392  |                {
                            10276 ; 393  |//Build option to service DCDC based on DCDC Mode (boost or buck)
                            10277 ; 394  |#ifdef BATTERY_TYPE_LI_ION
                            10278 ; 395  |                        //close DCDC Control loop
                            10279 ; 396  |                HW_DCDC1_CTRL1.B.R = 5;
                            10280 
P:019C 57F000 00FA0D  3  79810282 L22:    move    x:$FA0D,b
P:019E 44F400 FFFF0F  3  80110283         move    #$FFFF0F,x0
P:01A0 20004E         2  80310284         and     x0,b
P:01A1 44F400 000050  3  80610285         move    #>$50,x0
P:01A3 20004A         2  80810286         or      x0,b
P:01A4 557000 00FA0D  3  81110287         move    b1,x:$FA0D
                            10288 
                            10289 ; 397  |                HW_DCDC1_CTRL1.B.C = 4;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10290 
P:01A6 56F000 00FA0D  3  81410292         move    x:$FA0D,a
P:01A8 46F400 FFFFF0  3  81710293         move    #$FFFFF0,y0
P:01AA 200056         2  81910294         and     y0,a
P:01AB 46F400 000004  3  82210295         move    #>4,y0
P:01AD 200052         2  82410296         or      y0,a
P:01AE 547000 00FA0D  3  82710297         move    a1,x:$FA0D
                            10298 
                            10299 ; 398  |                HW_DCDC2_CTRL1.B.R = 5;
                            10300 
P:01B0 57F000 00FA12  3  83010302         move    x:$FA12,b
P:01B2 44F400 FFFF0F  3  83310303         move    #$FFFF0F,x0
P:01B4 20004E         2  83510304         and     x0,b
P:01B5 44F400 000050  3  83810305         move    #>$50,x0
P:01B7 20004A         2  84010306         or      x0,b
P:01B8 557000 00FA12  3  84310307         move    b1,x:$FA12
                            10308 
                            10309 ; 399  |                HW_DCDC2_CTRL1.B.C = 4;
                            10310 
P:01BA 57F000 00FA12  3  84610312         move    x:$FA12,b
P:01BC 46F400 FFFFF0  3  84910313         move    #$FFFFF0,y0
P:01BE 20005E         2  85110314         and     y0,b
P:01BF 46F400 000004  3  85410315         move    #>4,y0
P:01C1 20005A         2  85610316         or      y0,b
P:01C2 557000 00FA12  3  85910317         move    b1,x:$FA12
                            10318 
                            10319 ; 400  |#else
                            10320 ; 401  |                        //close DCDC Control loop
                            10321 ; 402  |                HW_DCDC1_CTRL1.B.R = 3;
                            10322 ; 403  |                HW_DCDC1_CTRL1.B.C = 4;
                            10323 ; 404  |                HW_DCDC2_CTRL1.B.R = 3;
                            10324 ; 405  |                HW_DCDC2_CTRL1.B.C = 4;
                            10325 ; 406  |#endif
                            10326 ; 407  |                }
                            10327 ; 408  |  }     //end g_bServiceDCDC
                            10328 
                            10330 L25:
                            10331 
                            10332 ; 409  |#endif  //DCDC_POWER_TRANSFER
                            10333 ; 410  |
                            10334 ; 411  |
                            10335 ; 412  |}  //end Check5V
                            10336 
P:01C4 05FF7C         4  86310338         movec   y:-(r7),ssh
P:01C5 000000         2  86510341         nop
P:01C6 00000C         4  86910342         rts
                            10344 
                            10345 ; 413  |
                            10346 ; 414  |
                            10347 ; 415  |void _long_interrupt(HW_IVECVDD5VDISC/2) WallPowerDisconnected_ISR(void)
                            10348 ; 416  |{
                            10349 
                            10441 FWallPowerDisconnected_ISR:
P:01C7 05707D rrrrrr  4  87310442         movec   ssl,y:ss_WallPowerDisconnected_ISR
P:01C9 05707C rrrrrr  4  87710443         movec   ssh,y:ss_WallPowerDisconnected_ISR+1
P:01CB 7F7000 rrrrrr  3  88010445         move    n7,y:ss_WallPowerDisconnected_ISR+2
P:01CD 6E7000 rrrrrr  3  88310446         move    r6,y:ss_WallPowerDisconnected_ISR+3
P:01CF 057066 rrrrrr  4  88710447         movec   m6,y:ss_WallPowerDisconnected_ISR+4
P:01D1 0466A7         2  88910448         movec   m7,m6
P:01D2 7E7000 rrrrrr  3  89210449         move    n6,y:ss_WallPowerDisconnected_ISR+5
P:01D4 6D7000 rrrrrr  3  89510450         move    r5,y:ss_WallPowerDisconnected_ISR+6
P:01D6 057065 rrrrrr  4  89910451         movec   m5,y:ss_WallPowerDisconnected_ISR+7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01D8 0465A7         2  90110452         movec   m7,m5
P:01D9 7D7000 rrrrrr  3  90410453         move    n5,y:ss_WallPowerDisconnected_ISR+8
P:01DB 6C7000 rrrrrr  3  90710454         move    r4,y:ss_WallPowerDisconnected_ISR+9
P:01DD 057064 rrrrrr  4  91110455         movec   m4,y:ss_WallPowerDisconnected_ISR+10
P:01DF 0464A7         2  91310456         movec   m7,m4
P:01E0 7C7000 rrrrrr  3  91610457         move    n4,y:ss_WallPowerDisconnected_ISR+11
P:01E2 6B7000 rrrrrr  3  91910458         move    r3,y:ss_WallPowerDisconnected_ISR+12
P:01E4 057063 rrrrrr  4  92310459         movec   m3,y:ss_WallPowerDisconnected_ISR+13
P:01E6 0463A7         2  92510460         movec   m7,m3
P:01E7 7B7000 rrrrrr  3  92810461         move    n3,y:ss_WallPowerDisconnected_ISR+14
P:01E9 6A7000 rrrrrr  3  93110462         move    r2,y:ss_WallPowerDisconnected_ISR+15
P:01EB 057062 rrrrrr  4  93510463         movec   m2,y:ss_WallPowerDisconnected_ISR+16
P:01ED 0462A7         2  93710464         movec   m7,m2
P:01EE 7A7000 rrrrrr  3  94010465         move    n2,y:ss_WallPowerDisconnected_ISR+17
P:01F0 697000 rrrrrr  3  94310466         move    r1,y:ss_WallPowerDisconnected_ISR+18
P:01F2 057061 rrrrrr  4  94710467         movec   m1,y:ss_WallPowerDisconnected_ISR+19
P:01F4 0461A7         2  94910468         movec   m7,m1
P:01F5 797000 rrrrrr  3  95210469         move    n1,y:ss_WallPowerDisconnected_ISR+20
P:01F7 687000 rrrrrr  3  95510470         move    r0,y:ss_WallPowerDisconnected_ISR+21
P:01F9 057060 rrrrrr  4  95910471         movec   m0,y:ss_WallPowerDisconnected_ISR+22
P:01FB 0460A7         2  96110472         movec   m7,m0
P:01FC 787000 rrrrrr  3  96410473         move    n0,y:ss_WallPowerDisconnected_ISR+23
P:01FE 4E7000 rrrrrr  3  96710474         move    y0,y:ss_WallPowerDisconnected_ISR+24
P:0200 4F7000 rrrrrr  3  97010475         move    y1,y:ss_WallPowerDisconnected_ISR+25
P:0202 4C7000 rrrrrr  3  97310476         move    x0,y:ss_WallPowerDisconnected_ISR+26
P:0204 4D7000 rrrrrr  3  97610477         move    x1,y:ss_WallPowerDisconnected_ISR+27
P:0206 5B7000 rrrrrr  3  97910478         move    b2,y:ss_WallPowerDisconnected_ISR+28
P:0208 597000 rrrrrr  3  98210479         move    b0,y:ss_WallPowerDisconnected_ISR+29
P:020A 5D7000 rrrrrr  3  98510480         move    b1,y:ss_WallPowerDisconnected_ISR+30
P:020C 5A7000 rrrrrr  3  98810481         move    a2,y:ss_WallPowerDisconnected_ISR+31
P:020E 587000 rrrrrr  3  99110482         move    a0,y:ss_WallPowerDisconnected_ISR+32
P:0210 5C7000 rrrrrr  3  99410483         move    a1,y:ss_WallPowerDisconnected_ISR+33
                            10486 
                            10487 ; 417  |        int iRCDelay=10000;  //delay for buck mode R/C
                            10488 
P:0212 57F400 002710  3  99710490         move    #10000,b
                            10494 
                            10495 ; 418  |        int iVDDDRampDelay=2000;  //delay for VDDD ramp
                            10496 
P:0214 46F400 0007D0  3 100010498         move    #2000,y0
P:0216 4E7000 rrrrrr  3 100310500         move    y0,y:ss_WallPowerDisconnected_ISR+34
                            10503 
                            10504 ; 419  |
                            10505 ; 420  |
                            10506 ; 421  |    #pragma asm
                            10507 
                            10510     ; Clear the DM bit (double-precision multiply mode, bit 6) of the Mode Register
                            10511     ; This will be returned to its previous state when the RTI occurs (since the SR
                            10512     ; will be popped back off System Stack Low (SSL).
                            10513     ; Accumulator behavior is unpredictable when the DM bit is set.
                            10514     ; Next cycle after clearing it should NOT be an ALU instruction.
P:0218 00BFB8         2 100510515     andi #$BF,mr
P:0219 000000         2 100710516     nop
                            10517 
                            10518 ; 429  |    #pragma endasm
                            10519 ; 430  |
                            10520 ; 431  |        //May have been in suspend mode, speed up clock.
                            10521 ; 432  |    HW_CCR.B.DDIV_MSB = 0;
                            10522 
P:021A 0A7017 00FA00  6 101310524         bclr    #23,x:$FA00
                            10525 
                            10526 ; 433  |    HW_CCR.B.DDIV = 0;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10527 
P:021C 56F000 00FA00  3 101610529         move    x:$FA00,a
P:021E 46F400 FFF1FF  3 101910530         move    #$FFF1FF,y0
P:0220 200056         2 102110531         and     y0,a
P:0221 547000 00FA00  3 102410532         move    a1,x:$FA00
                            10533 
                            10534 ; 434  |
                            10535 ; 435  |        //May have been in suspend mode.  Turn on DCDC converters and return to correct sp
                                  eed.
                            10536 ; 436  |    HW_VDD5V_PWR_CHARGE.B.DCANA_LP = FALSE;
                            10537 
P:0223 0A700E 00FA1D  6 103010539         bclr    #14,x:$FA1D
                            10540 
                            10541 ; 437  |        HW_DCDC_TBR.B.DCDC2_STOPCLK = FALSE;  //Turn on DCDC#2
                            10542 
P:0225 0A7017 00FA14  6 103610544         bclr    #23,x:$FA14
                            10545 
                            10546 ; 438  |    HW_DCDC_TBR.B.DCDC1_STOPCLK = FALSE;  //Turn on DCDC#1
                            10547 
P:0227 0A700B 00FA14  6 104210549         bclr    #11,x:$FA14
                            10550 
                            10551 ; 439  |
                            10552 ; 440  |#ifdef BATTERY_TYPE_LI_ION
                            10553 ; 441  |        //Disconnect routine to close DCDC Control loop on Buck Mode Players
                            10554 ; 442  |    HW_DCDC1_CTRL1.B.C = 4;
                            10555 
P:0229 56F000 00FA0D  3 104510557         move    x:$FA0D,a
P:022B 46F400 FFFFF0  3 104810558         move    #$FFFFF0,y0
P:022D 200056         2 105010559         and     y0,a
P:022E 46F400 000004  3 105310560         move    #>4,y0
P:0230 200052         2 105510561         or      y0,a
P:0231 547000 00FA0D  3 105810562         move    a1,x:$FA0D
                            10563 
                            10564 ; 443  |    HW_DCDC2_CTRL1.B.C = 4;
                            10565 
P:0233 56F000 00FA12  3 106110567         move    x:$FA12,a
P:0235 46F400 FFFFF0  3 106410568         move    #$FFFFF0,y0
P:0237 200056         2 106610569         and     y0,a
P:0238 46F400 000004  3 106910570         move    #>4,y0
P:023A 200052         2 107110571         or      y0,a
P:023B 547000 00FA12  3 107410572         move    a1,x:$FA12
                            10573 
                            10574 ; 444  |
                            10575 ; 445  |        //Wait about 1ms before returning the 'R' back to its battery setting.
                            10576 ; 446  |        while(iRCDelay)
                            10577 
P:023D 46F400 000001  3 107710579         move    #>1,y0
P:023F 0AF080 rrrrrr  6 108310580         jmp     L27
                            10581 
                            10582 ; 447  |                iRCDelay--;
                            10583 
P:0241 20005C         2 108510585 L26:    sub     y0,b
P:0242 20000B         2 108710587 L27:    tst     b
P:0243 0AF0A2 rrrrrr  6 109310588         jne     L26
                            10589 
                            10590 ; 448  |
                            10591 ; 449  |    HW_DCDC1_CTRL1.B.R = 3;
                            10592 
P:0245 57F000 00FA0D  3 109610594         move    x:$FA0D,b
P:0247 46F400 FFFF0F  3 109910595         move    #$FFFF0F,y0
P:0249 20005E         2 110110596         and     y0,b
P:024A 46F400 000030  3 110410597         move    #>$30,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
P:024C 20005A         2 110610598         or      y0,b
P:024D 557000 00FA0D  3 110910599         move    b1,x:$FA0D
                            10600 
                            10601 ; 450  |    HW_DCDC2_CTRL1.B.R = 3;
                            10602 
P:024F 57F000 00FA12  3 111210604         move    x:$FA12,b
P:0251 46F400 FFFF0F  3 111510605         move    #$FFFF0F,y0
P:0253 20005E         2 111710606         and     y0,b
P:0254 46F400 000030  3 112010607         move    #>$30,y0
P:0256 20005A         2 112210608         or      y0,b
P:0257 557000 00FA12  3 112510609         move    b1,x:$FA12
                            10610 
                            10611 ; 451  |#else   
                            10612 ; 452  |        //Change NLEV back if boost mode
                            10613 ; 453  |        if ((HW_REVR.B.DCDCMODE == 0x7) || (HW_REVR.B.DCDCMODE == 0x5))
                            10614 ; 454  |                HW_DCDC1_CTRL0.B.NLEV = 0x01;
                            10615 ; 455  |
                            10616 ; 456  |        //Set R/C values for DCDC mode
                            10617 ; 457  |    HW_DCDC1_CTRL1.B.R = 5;
                            10618 ; 458  |    HW_DCDC1_CTRL1.B.C = 4;
                            10619 ; 459  |    HW_DCDC2_CTRL1.B.R = 5;
                            10620 ; 460  |    HW_DCDC2_CTRL1.B.C = 4;
                            10621 ; 461  |
                            10622 ; 462  |#endif
                            10623 ; 463  |        //shutdow USB 
                            10624 ; 464  |        SystemShutdown();
                            10625 
P:0259 0BF080 rrrrrr  6 113110627         jsr     FSystemShutdown
                            10629 
                            10630 ; 465  |
                            10631 ; 466  |        g_bServiceDCDC = TRUE;
                            10632 
P:025B 47F400 000001  3 113410634         move    #>1,y1
P:025D 477000 rrrrrr  3 113710635         move    y1,x:Fg_bServiceDCDC
                            10636 
                            10637 ; 467  |                
                            10638 ; 468  |        //Check for Low Battery
                            10639 ; 469  |        if(HW_BATT_RESULT.B.LT_EVENT0)
                            10640 
P:025F 46F000 00FA22  3 114010642         move    x:$FA22,y0
P:0261 0AC605 rrrrrr  6 114610643         jclr    #5,y0,L28
                            10644 
                            10645 ; 470  |        { //if battery is low, poweroff
                            10646 ; 471  |                SystemPowerOff();
                            10647 
P:0263 0BF080 rrrrrr  6 115210649         jsr     FSystemPowerOff
                            10650 
                            10651 ; 472  |        }
                            10652 
P:0265 0AF080 rrrrrr  6 115810654         jmp     L31
                            10655 
                            10656 ; 473  |        else
                            10657 ; 474  |        {//reset to player
                            10658 ; 475  |
                            10659 ; 476  |                //Before reseting, ramp VDDD to proper level
                            10660 ; 477  |                HW_DCDC_VDDD.B.VOLTAGE_LEVEL = 0x16;
                            10661 
P:0267 57F000 00FA0F  3 116110663 L28:    move    x:$FA0F,b
P:0269 46F400 FFFFE0  3 116410664         move    #$FFFFE0,y0
P:026B 20005E         2 116610665         and     y0,b
P:026C 46F400 000016  3 116910666         move    #>$16,y0
P:026E 20005A         2 117110667         or      y0,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
P:026F 557000 00FA0F  3 117410668         move    b1,x:$FA0F
                            10669 
                            10670 ; 478  |
                            10671 ; 479  |                //wait for VDDD to stabalize before reseting
                            10672 ; 480  |                while(iVDDDRampDelay)
                            10673 
P:0271 0AF080 rrrrrr  6 118010675         jmp     L30
                            10676 
                            10677 ; 481  |                {
                            10678 ; 482  |                        iVDDDRampDelay--;
                            10679 
                            10681 L29:
P:0273 20007C         2 118210684         sub     y1,b
P:0274 5D7000 rrrrrr  3 118510685         move    b1,y:ss_WallPowerDisconnected_ISR+34
P:0276 5FF000 rrrrrr  3 118810689 L30:    move    y:ss_WallPowerDisconnected_ISR+34,b
P:0278 20000B         2 119010690         tst     b
P:0279 0AF0A2 rrrrrr  6 119610693         jne     L29
                            10694 
                            10695 ; 483  |                }
                            10696 ; 484  |                //Reset the player      
                            10697 ; 485  |                SystemReset();
                            10698 
P:027B 0BF080 rrrrrr  6 120210700         jsr     FSystemReset
                            10702 
                            10703 ; 486  |        }
                            10704 
                            10706 L31:
                            10707 
                            10708 ; 487  |
                            10709 ; 488  |}
                            10710 
P:027D 5CF000 rrrrrr  3 120510712         move    y:ss_WallPowerDisconnected_ISR+33,a1
P:027F 58F000 rrrrrr  3 120810713         move    y:ss_WallPowerDisconnected_ISR+32,a0
P:0281 5AF000 rrrrrr  3 121110714         move    y:ss_WallPowerDisconnected_ISR+31,a2
P:0283 5DF000 rrrrrr  3 121410715         move    y:ss_WallPowerDisconnected_ISR+30,b1
P:0285 59F000 rrrrrr  3 121710716         move    y:ss_WallPowerDisconnected_ISR+29,b0
P:0287 5BF000 rrrrrr  3 122010717         move    y:ss_WallPowerDisconnected_ISR+28,b2
P:0289 4DF000 rrrrrr  3 122310718         move    y:ss_WallPowerDisconnected_ISR+27,x1
P:028B 4CF000 rrrrrr  3 122610719         move    y:ss_WallPowerDisconnected_ISR+26,x0
P:028D 4FF000 rrrrrr  3 122910720         move    y:ss_WallPowerDisconnected_ISR+25,y1
P:028F 4EF000 rrrrrr  3 123210721         move    y:ss_WallPowerDisconnected_ISR+24,y0
P:0291 78F000 rrrrrr  3 123510722         move    y:ss_WallPowerDisconnected_ISR+23,n0
P:0293 05F060 rrrrrr  4 123910723         movec   y:ss_WallPowerDisconnected_ISR+22,m0
P:0295 68F000 rrrrrr  3 124210724         move    y:ss_WallPowerDisconnected_ISR+21,r0
P:0297 79F000 rrrrrr  3 124510725         move    y:ss_WallPowerDisconnected_ISR+20,n1
P:0299 05F061 rrrrrr  4 124910726         movec   y:ss_WallPowerDisconnected_ISR+19,m1
P:029B 69F000 rrrrrr  3 125210727         move    y:ss_WallPowerDisconnected_ISR+18,r1
P:029D 7AF000 rrrrrr  3 125510728         move    y:ss_WallPowerDisconnected_ISR+17,n2
P:029F 05F062 rrrrrr  4 125910729         movec   y:ss_WallPowerDisconnected_ISR+16,m2
P:02A1 6AF000 rrrrrr  3 126210730         move    y:ss_WallPowerDisconnected_ISR+15,r2
P:02A3 7BF000 rrrrrr  3 126510731         move    y:ss_WallPowerDisconnected_ISR+14,n3
P:02A5 05F063 rrrrrr  4 126910732         movec   y:ss_WallPowerDisconnected_ISR+13,m3
P:02A7 6BF000 rrrrrr  3 127210733         move    y:ss_WallPowerDisconnected_ISR+12,r3
P:02A9 7CF000 rrrrrr  3 127510734         move    y:ss_WallPowerDisconnected_ISR+11,n4
P:02AB 05F064 rrrrrr  4 127910735         movec   y:ss_WallPowerDisconnected_ISR+10,m4
P:02AD 6CF000 rrrrrr  3 128210736         move    y:ss_WallPowerDisconnected_ISR+9,r4
P:02AF 7DF000 rrrrrr  3 128510737         move    y:ss_WallPowerDisconnected_ISR+8,n5
P:02B1 05F065 rrrrrr  4 128910738         movec   y:ss_WallPowerDisconnected_ISR+7,m5
P:02B3 6DF000 rrrrrr  3 129210739         move    y:ss_WallPowerDisconnected_ISR+6,r5
P:02B5 7EF000 rrrrrr  3 129510740         move    y:ss_WallPowerDisconnected_ISR+5,n6
P:02B7 05F066 rrrrrr  4 129910741         movec   y:ss_WallPowerDisconnected_ISR+4,m6
P:02B9 6EF000 rrrrrr  3 130210742         move    y:ss_WallPowerDisconnected_ISR+3,r6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
P:02BB 7FF000 rrrrrr  3 130510743         move    y:ss_WallPowerDisconnected_ISR+2,n7
P:02BD 05F07C rrrrrr  4 130910744         movec   y:ss_WallPowerDisconnected_ISR+1,ssh
P:02BF 05F07D rrrrrr  4 131310746         movec   y:ss_WallPowerDisconnected_ISR,ssl
P:02C1 000000         2 131510747         nop
P:02C2 000004         4 131910748         rti
                            10749 
                            10750 
P:0056                      10751         org     p,".irq43":$56
P:0056 0BF080 rrrrrr  6    610752 irq43:  jsr     FWallPowerDisconnected_ISR
                            10753 
Y:0000                      10754         org     y,".yovlmiscproject@WallPowerDisconnected_ISR",overlay:
                            10755 ss_WallPowerDisconnected_ISR:
Y:0000                      10756         ds      35
   |   RESERVED                   
Y:0022
                            10757 
P:02C3                      10758         org     p,".ptextmiscproject":
                            10760 
                            10761 ; 489  |
                            10762 ; 490  |void _long_interrupt(ICOLL_SOURCE_BROWNOUT) SysBrownout_ISR(void)
                            10763 ; 491  |{
                            10764 
                            10769 FSysBrownout_ISR:
P:02C3 05707D rrrrrr  4 132310770         movec   ssl,y:ss_SysBrownout_ISR
P:02C5 05707C rrrrrr  4 132710771         movec   ssh,y:ss_SysBrownout_ISR+1
P:02C7 7F7000 rrrrrr  3 133010773         move    n7,y:ss_SysBrownout_ISR+2
P:02C9 6E7000 rrrrrr  3 133310774         move    r6,y:ss_SysBrownout_ISR+3
P:02CB 057066 rrrrrr  4 133710775         movec   m6,y:ss_SysBrownout_ISR+4
P:02CD 0466A7         2 133910776         movec   m7,m6
P:02CE 7E7000 rrrrrr  3 134210777         move    n6,y:ss_SysBrownout_ISR+5
P:02D0 6D7000 rrrrrr  3 134510778         move    r5,y:ss_SysBrownout_ISR+6
P:02D2 057065 rrrrrr  4 134910779         movec   m5,y:ss_SysBrownout_ISR+7
P:02D4 0465A7         2 135110780         movec   m7,m5
P:02D5 7D7000 rrrrrr  3 135410781         move    n5,y:ss_SysBrownout_ISR+8
P:02D7 6C7000 rrrrrr  3 135710782         move    r4,y:ss_SysBrownout_ISR+9
P:02D9 057064 rrrrrr  4 136110783         movec   m4,y:ss_SysBrownout_ISR+10
P:02DB 0464A7         2 136310784         movec   m7,m4
P:02DC 7C7000 rrrrrr  3 136610785         move    n4,y:ss_SysBrownout_ISR+11
P:02DE 6B7000 rrrrrr  3 136910786         move    r3,y:ss_SysBrownout_ISR+12
P:02E0 057063 rrrrrr  4 137310787         movec   m3,y:ss_SysBrownout_ISR+13
P:02E2 0463A7         2 137510788         movec   m7,m3
P:02E3 7B7000 rrrrrr  3 137810789         move    n3,y:ss_SysBrownout_ISR+14
P:02E5 6A7000 rrrrrr  3 138110790         move    r2,y:ss_SysBrownout_ISR+15
P:02E7 057062 rrrrrr  4 138510791         movec   m2,y:ss_SysBrownout_ISR+16
P:02E9 0462A7         2 138710792         movec   m7,m2
P:02EA 7A7000 rrrrrr  3 139010793         move    n2,y:ss_SysBrownout_ISR+17
P:02EC 697000 rrrrrr  3 139310794         move    r1,y:ss_SysBrownout_ISR+18
P:02EE 057061 rrrrrr  4 139710795         movec   m1,y:ss_SysBrownout_ISR+19
P:02F0 0461A7         2 139910796         movec   m7,m1
P:02F1 797000 rrrrrr  3 140210797         move    n1,y:ss_SysBrownout_ISR+20
P:02F3 687000 rrrrrr  3 140510798         move    r0,y:ss_SysBrownout_ISR+21
P:02F5 057060 rrrrrr  4 140910799         movec   m0,y:ss_SysBrownout_ISR+22
P:02F7 0460A7         2 141110800         movec   m7,m0
P:02F8 787000 rrrrrr  3 141410801         move    n0,y:ss_SysBrownout_ISR+23
P:02FA 4E7000 rrrrrr  3 141710802         move    y0,y:ss_SysBrownout_ISR+24
P:02FC 4F7000 rrrrrr  3 142010803         move    y1,y:ss_SysBrownout_ISR+25
P:02FE 4C7000 rrrrrr  3 142310804         move    x0,y:ss_SysBrownout_ISR+26
P:0300 4D7000 rrrrrr  3 142610805         move    x1,y:ss_SysBrownout_ISR+27
P:0302 5B7000 rrrrrr  3 142910806         move    b2,y:ss_SysBrownout_ISR+28
P:0304 597000 rrrrrr  3 143210807         move    b0,y:ss_SysBrownout_ISR+29
P:0306 5D7000 rrrrrr  3 143510808         move    b1,y:ss_SysBrownout_ISR+30
P:0308 5A7000 rrrrrr  3 143810809         move    a2,y:ss_SysBrownout_ISR+31
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
P:030A 587000 rrrrrr  3 144110810         move    a0,y:ss_SysBrownout_ISR+32
P:030C 5C7000 rrrrrr  3 144410811         move    a1,y:ss_SysBrownout_ISR+33
                            10812 
                            10813 ; 492  |    #pragma asm
                            10814 
                            10817     ; Clear the DM bit (double-precision multiply mode, bit 6) of the Mode Register
                            10818     ; This will be returned to its previous state when the RTI occurs (since the SR
                            10819     ; will be popped back off System Stack Low (SSL).
                            10820     ; Accumulator behavior is unpredictable when the DM bit is set.
                            10821     ; Next cycle after clearing it should NOT be an ALU instruction.
P:030E 00BFB8         2 144610822     andi #$BF,mr
P:030F 000000         2 144810823     nop
                            10824 
                            10825 ; 500  |    #pragma endasm
                            10826 ; 501  |
                            10827 ; 502  |        //Ensure it actually was a VDDIO BO
                            10828 ; 503  |        if(HW_DCDC_VDDIO.B.BROWNOUT_STATUS)
                            10829 
P:0310 46F000 00FA0E  3 145110831         move    x:$FA0E,y0
P:0312 0AC614 rrrrrr  6 145710832         jclr    #20,y0,L32
                            10833 
                            10834 ; 504  |        {
                            10835 ; 505  |                //shutdown USB systems 1st 
                            10836 ; 506  |                SystemShutdown();
                            10837 
P:0314 0BF080 rrrrrr  6 146310839         jsr     FSystemShutdown
                            10840 
                            10841 ; 507  |                //now power off
                            10842 ; 508  |                SystemPowerOff();
                            10843 
P:0316 0BF080 rrrrrr  6 146910845         jsr     FSystemPowerOff
                            10846 
                            10847 ; 509  |        }
                            10848 
                            10850 L32:
                            10851 
                            10852 ; 510  |}
                            10853 
P:0318 5CF000 rrrrrr  3 147210855         move    y:ss_SysBrownout_ISR+33,a1
P:031A 58F000 rrrrrr  3 147510856         move    y:ss_SysBrownout_ISR+32,a0
P:031C 5AF000 rrrrrr  3 147810857         move    y:ss_SysBrownout_ISR+31,a2
P:031E 5DF000 rrrrrr  3 148110858         move    y:ss_SysBrownout_ISR+30,b1
P:0320 59F000 rrrrrr  3 148410859         move    y:ss_SysBrownout_ISR+29,b0
P:0322 5BF000 rrrrrr  3 148710860         move    y:ss_SysBrownout_ISR+28,b2
P:0324 4DF000 rrrrrr  3 149010861         move    y:ss_SysBrownout_ISR+27,x1
P:0326 4CF000 rrrrrr  3 149310862         move    y:ss_SysBrownout_ISR+26,x0
P:0328 4FF000 rrrrrr  3 149610863         move    y:ss_SysBrownout_ISR+25,y1
P:032A 4EF000 rrrrrr  3 149910864         move    y:ss_SysBrownout_ISR+24,y0
P:032C 78F000 rrrrrr  3 150210865         move    y:ss_SysBrownout_ISR+23,n0
P:032E 05F060 rrrrrr  4 150610866         movec   y:ss_SysBrownout_ISR+22,m0
P:0330 68F000 rrrrrr  3 150910867         move    y:ss_SysBrownout_ISR+21,r0
P:0332 79F000 rrrrrr  3 151210868         move    y:ss_SysBrownout_ISR+20,n1
P:0334 05F061 rrrrrr  4 151610869         movec   y:ss_SysBrownout_ISR+19,m1
P:0336 69F000 rrrrrr  3 151910870         move    y:ss_SysBrownout_ISR+18,r1
P:0338 7AF000 rrrrrr  3 152210871         move    y:ss_SysBrownout_ISR+17,n2
P:033A 05F062 rrrrrr  4 152610872         movec   y:ss_SysBrownout_ISR+16,m2
P:033C 6AF000 rrrrrr  3 152910873         move    y:ss_SysBrownout_ISR+15,r2
P:033E 7BF000 rrrrrr  3 153210874         move    y:ss_SysBrownout_ISR+14,n3
P:0340 05F063 rrrrrr  4 153610875         movec   y:ss_SysBrownout_ISR+13,m3
P:0342 6BF000 rrrrrr  3 153910876         move    y:ss_SysBrownout_ISR+12,r3
P:0344 7CF000 rrrrrr  3 154210877         move    y:ss_SysBrownout_ISR+11,n4
P:0346 05F064 rrrrrr  4 154610878         movec   y:ss_SysBrownout_ISR+10,m4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0348 6CF000 rrrrrr  3 154910879         move    y:ss_SysBrownout_ISR+9,r4
P:034A 7DF000 rrrrrr  3 155210880         move    y:ss_SysBrownout_ISR+8,n5
P:034C 05F065 rrrrrr  4 155610881         movec   y:ss_SysBrownout_ISR+7,m5
P:034E 6DF000 rrrrrr  3 155910882         move    y:ss_SysBrownout_ISR+6,r5
P:0350 7EF000 rrrrrr  3 156210883         move    y:ss_SysBrownout_ISR+5,n6
P:0352 05F066 rrrrrr  4 156610884         movec   y:ss_SysBrownout_ISR+4,m6
P:0354 6EF000 rrrrrr  3 156910885         move    y:ss_SysBrownout_ISR+3,r6
P:0356 7FF000 rrrrrr  3 157210886         move    y:ss_SysBrownout_ISR+2,n7
P:0358 05F07C rrrrrr  4 157610887         movec   y:ss_SysBrownout_ISR+1,ssh
P:035A 05F07D rrrrrr  4 158010889         movec   y:ss_SysBrownout_ISR,ssl
P:035C 000000         2 158210890         nop
P:035D 000004         4 158610891         rti
                            10892 
                            10893 
P:0060                      10894         org     p,".irq48":$60
P:0060 0BF080 rrrrrr  6    610895 irq48:  jsr     FSysBrownout_ISR
                            10896 
Y:0000                      10897         org     y,".yovlmiscproject@SysBrownout_ISR",overlay:
                            10898 ss_SysBrownout_ISR:
Y:0000                      10899         ds      34
   |   RESERVED                   
Y:0021
                            10900 
P:035E                      10901         org     p,".ptextmiscproject":
                            10923 
                            10924         extern  FIcollEnable, FIcollInstallIsrVector, FIcollSetPriority
                            10925         extern  FIcollSetSteering, FInternalMediaSerialNumberInit
                            10926         extern  FSysWait, FSystemPowerOff, FSystemReset, FSystemShutdown
                            10927         extern  y:FwAdcBattResolution
                            10928 
                            10929         global  FEnterNonReentrantSection, FInit5VSense
                            10930         global  FLeaveNonReentrantSection, FMiscProjectInit
                            10931         global  FSerialNumberEnableInit, FSerialNumbersEnabled
                            10932         global  FServiceDCDC, FSysBrownout_ISR, FWallPowerDisconnected_ISR
                            10933         global  Fg_bServiceDCDC, Fg_iBattLevel, irq43, irq48
                            10934 
                            10935         local   L3, L5, L16, L17, L18, L19, L20, L21, L22, L25, L26, L27
                            10936         local   L28, L29, L30, L31, L32, ss_MiscProjectInit
                            10937         local   ss_SysBrownout_ISR, ss_WallPowerDisconnected_ISR
                            10938 
                            10939         calls   "Init5VSense", "IcollEnable", "IcollInstallIsrVector"
                            10940         calls   "Init5VSense", "IcollSetPriority", "IcollSetSteering"
                            10941         calls   "Init5VSense", "ServiceDCDC", "SysWait"
                            10942         calls   "MiscProjectInit", "InternalMediaSerialNumberInit"
                            10943         calls   "MiscProjectInit", "SerialNumberEnableInit"
                            10944         calls   "ServiceDCDC", "SysWait"
                            10945         calls   "SysBrownout_ISR", "SystemPowerOff", "SystemShutdown"
                            10946         calls   "WallPowerDisconnected_ISR", "SystemPowerOff"
                            10947         calls   "WallPowerDisconnected_ISR", "SystemReset"
                            10948         calls   "WallPowerDisconnected_ISR", "SystemShutdown"
                            10949 
