TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc873b6b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;         rand.c:
                               92 ; 1    |/*
                               93 ; 2    | *  File: Rand.c 
                               94 ; 3    | *
                               95 ; 4    | *  Mix multiple hardware sources with sequences for Random Number Generation
                               96 ; 5    | */
                               97 ; 6    |
                               98 ; 7    |#include "types.h"
                               99 
                              101 
                              102 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              103 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              104 ; 3    |//
                              105 ; 4    |// Filename: types.h
                              106 ; 5    |// Description: Standard data types
                              107 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 7    |
                              109 ; 8    |#ifndef _TYPES_H
                              110 ; 9    |#define _TYPES_H
                              111 ; 10   |
                              112 ; 11   |// TODO:  move this outta here!
                              113 ; 12   |#if !defined(NOERROR)
                              114 ; 13   |#define NOERROR 0
                              115 ; 14   |#define SUCCESS 0
                              116 ; 15   |#endif 
                              117 ; 16   |#if !defined(SUCCESS)
                              118 ; 17   |#define SUCCESS  0
                              119 ; 18   |#endif
                              120 ; 19   |#if !defined(ERROR)
                              121 ; 20   |#define ERROR   -1
                              122 ; 21   |#endif
                              123 ; 22   |#if !defined(FALSE)
                              124 ; 23   |#define FALSE 0
                              125 ; 24   |#endif
                              126 ; 25   |#if !defined(TRUE)
                              127 ; 26   |#define TRUE  1
                              128 ; 27   |#endif
                              129 ; 28   |
                              130 ; 29   |#if !defined(NULL)
                              131 ; 30   |#define NULL 0
                              132 ; 31   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 32   |
                              134 ; 33   |#define MAX_INT     0x7FFFFF
                              135 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              136 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              137 ; 36   |#define MAX_ULONG   (-1) 
                              138 ; 37   |
                              139 ; 38   |#define WORD_SIZE   24              // word size in bits
                              140 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              141 ; 40   |
                              142 ; 41   |
                              143 ; 42   |#define BYTE    unsigned char       // btVarName
                              144 ; 43   |#define CHAR    signed char         // cVarName
                              145 ; 44   |#define USHORT  unsigned short      // usVarName
                              146 ; 45   |#define SHORT   unsigned short      // sVarName
                              147 ; 46   |#define WORD    unsigned int        // wVarName
                              148 ; 47   |#define INT     signed int          // iVarName
                              149 ; 48   |#define DWORD   unsigned long       // dwVarName
                              150 ; 49   |#define LONG    signed long         // lVarName
                              151 ; 50   |#define BOOL    unsigned int        // bVarName
                              152 ; 51   |#define FRACT   _fract              // frVarName
                              153 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              154 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              155 ; 54   |#define FLOAT   float               // fVarName
                              156 ; 55   |#define DBL     double              // dVarName
                              157 ; 56   |#define ENUM    enum                // eVarName
                              158 ; 57   |#define CMX     _complex            // cmxVarName
                              159 ; 58   |typedef WORD UCS3;                   // 
                              160 ; 59   |
                              161 ; 60   |#define UINT16  unsigned short
                              162 ; 61   |#define UINT8   unsigned char   
                              163 ; 62   |#define UINT32  unsigned long
                              164 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              165 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              166 ; 65   |#define WCHAR   UINT16
                              167 ; 66   |
                              168 ; 67   |//UINT128 is 16 bytes or 6 words
                              169 ; 68   |typedef struct UINT128_3500 {   
                              170 ; 69   |    int val[6];     
                              171 ; 70   |} UINT128_3500;
                              172 ; 71   |
                              173 ; 72   |#define UINT128   UINT128_3500
                              174 ; 73   |
                              175 ; 74   |// Little endian word packed byte strings:   
                              176 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              177 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              178 ; 77   |// Little endian word packed byte strings:   
                              179 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              180 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              181 ; 80   |
                              182 ; 81   |// Declare Memory Spaces To Use When Coding
                              183 ; 82   |// A. Sector Buffers
                              184 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              185 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              186 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              187 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              188 
                              190 
                              191 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              192 ; 88   |// B. Media DDI Memory
                              193 ; 89   |#define MEDIA_DDI_MEM _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 90   |
                              195 ; 91   |
                              196 ; 92   |
                              197 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              198 ; 94   |// Examples of circular pointers:
                              199 ; 95   |//    INT CIRC cpiVarName
                              200 ; 96   |//    DWORD CIRC cpdwVarName
                              201 ; 97   |
                              202 ; 98   |#define RETCODE INT                 // rcVarName
                              203 ; 99   |
                              204 ; 100  |// generic bitfield structure
                              205 ; 101  |struct Bitfield {
                              206 ; 102  |    unsigned int B0  :1;
                              207 ; 103  |    unsigned int B1  :1;
                              208 ; 104  |    unsigned int B2  :1;
                              209 ; 105  |    unsigned int B3  :1;
                              210 ; 106  |    unsigned int B4  :1;
                              211 ; 107  |    unsigned int B5  :1;
                              212 ; 108  |    unsigned int B6  :1;
                              213 ; 109  |    unsigned int B7  :1;
                              214 ; 110  |    unsigned int B8  :1;
                              215 ; 111  |    unsigned int B9  :1;
                              216 ; 112  |    unsigned int B10 :1;
                              217 ; 113  |    unsigned int B11 :1;
                              218 ; 114  |    unsigned int B12 :1;
                              219 ; 115  |    unsigned int B13 :1;
                              220 ; 116  |    unsigned int B14 :1;
                              221 ; 117  |    unsigned int B15 :1;
                              222 ; 118  |    unsigned int B16 :1;
                              223 ; 119  |    unsigned int B17 :1;
                              224 ; 120  |    unsigned int B18 :1;
                              225 ; 121  |    unsigned int B19 :1;
                              226 ; 122  |    unsigned int B20 :1;
                              227 ; 123  |    unsigned int B21 :1;
                              228 ; 124  |    unsigned int B22 :1;
                              229 ; 125  |    unsigned int B23 :1;
                              230 ; 126  |};
                              231 ; 127  |
                              232 ; 128  |union BitInt {
                              233 ; 129  |        struct Bitfield B;
                              234 ; 130  |        int        I;
                              235 ; 131  |};
                              236 ; 132  |
                              237 ; 133  |#define MAX_MSG_LENGTH 10
                              238 ; 134  |struct CMessage
                              239 ; 135  |{
                              240 ; 136  |        unsigned int m_uLength;
                              241 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              242 ; 138  |};
                              243 ; 139  |
                              244 ; 140  |typedef struct {
                              245 ; 141  |    WORD m_wLength;
                              246 ; 142  |    WORD m_wMessage;
                              247 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              248 ; 144  |} Message;
                              249 ; 145  |
                              250 ; 146  |struct MessageQueueDescriptor
                              251 ; 147  |{
                              252 ; 148  |        int *m_pBase;
                              253 ; 149  |        int m_iModulo;
                              254 ; 150  |        int m_iSize;
                              255 ; 151  |        int *m_pHead;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 152  |        int *m_pTail;
                              257 ; 153  |};
                              258 ; 154  |
                              259 ; 155  |struct ModuleEntry
                              260 ; 156  |{
                              261 ; 157  |    int m_iSignaledEventMask;
                              262 ; 158  |    int m_iWaitEventMask;
                              263 ; 159  |    int m_iResourceOfCode;
                              264 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              265 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              266 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              267 ; 163  |    int m_uTimeOutHigh;
                              268 ; 164  |    int m_uTimeOutLow;
                              269 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              270 ; 166  |};
                              271 ; 167  |
                              272 ; 168  |union WaitMask{
                              273 ; 169  |    struct B{
                              274 ; 170  |        unsigned int m_bNone     :1;
                              275 ; 171  |        unsigned int m_bMessage  :1;
                              276 ; 172  |        unsigned int m_bTimer    :1;
                              277 ; 173  |        unsigned int m_bButton   :1;
                              278 ; 174  |    } B;
                              279 ; 175  |    int I;
                              280 ; 176  |} ;
                              281 ; 177  |
                              282 ; 178  |
                              283 ; 179  |struct Button {
                              284 ; 180  |        WORD wButtonEvent;
                              285 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              286 ; 182  |};
                              287 ; 183  |
                              288 ; 184  |struct Message {
                              289 ; 185  |        WORD wMsgLength;
                              290 ; 186  |        WORD wMsgCommand;
                              291 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              292 ; 188  |};
                              293 ; 189  |
                              294 ; 190  |union EventTypes {
                              295 ; 191  |        struct CMessage msg;
                              296 ; 192  |        struct Button Button ;
                              297 ; 193  |        struct Message Message;
                              298 ; 194  |};
                              299 ; 195  |
                              300 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              301 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              302 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              303 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              304 ; 200  |
                              305 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              306 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              307 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              308 ; 204  |
                              309 ; 205  |#if DEBUG
                              310 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              311 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              312 ; 208  |#else 
                              313 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              314 ; 210  |#define DebugBuildAssert(x)    
                              315 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 212  |
                              317 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              318 ; 214  |//  #pragma asm
                              319 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              320 ; 216  |//  #pragma endasm
                              321 ; 217  |
                              322 ; 218  |
                              323 ; 219  |#ifdef COLOR_262K
                              324 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              325 ; 221  |#elif defined(COLOR_65K)
                              326 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              327 ; 223  |#else
                              328 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              329 ; 225  |#endif
                              330 ; 226  |    
                              331 ; 227  |#endif // #ifndef _TYPES_H
                              332 
                              334 
                              335 ; 8    |#include "rand_internal.h"
                              336 
                              338 
                              339 ; 1    |#ifndef __RAND_INTERNAL_H
                              340 ; 2    |#define __RAND_INTERNAL_H
                              341 ; 3    |
                              342 ; 4    |
                              343 ; 5    |extern WORD g_RandWorkingValue;  
                              344 ; 6    |
                              345 ; 7    |#endif
                              346 
                              348 
                              349 ; 9    |
                              350 ; 10   |#pragma optimize 1
                              352 ; 11   |
                              353 ; 12   |WORD g_RandWorkingValue= 1;  
                              354 
                              355 
Y:0000                        356         org     y,".ydatarand",init:
                              357 Fg_RandWorkingValue:
Y:0000 000001                 358         dc      $000001
                              361 
                              362 ; 13   |
                              363 ; 14   |
                              364 ; 15   |/*//////////////////////////////////////////////////////////////////////////////
                              365 ; 16   |//
                              366 ; 17   |//>  Name:          WORD _reentrant rand(void);
                              367 ; 18   |//
                              368 ; 19   |//   Type:          Function
                              369 ; 20   |//
                              370 ; 21   |//   Description:   Returns a positive pseudo random WORD from 0 to MAX_INT. 
                              371 ; 22   |//
                              372 ; 23   |//   Inputs:        none
                              373 ; 24   |//
                              374 ; 25   |//   Outputs:       a pseudo random WORD 
                              375 ; 26   |//
                              376 ; 27   |//   Notes:         this implementation is based on an ANSI definition.
                              377 ; 28   |//   Global usage:  g_RandWorkingValue; 
                              378 ; 29   |//<
                              379 ; 30   |///////////////////////////////////////////////////////////////////////////////*/
                              380 ; 31   |WORD _reentrant rand( void )
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              381 ; 32   |{
                              382 
P:0000                        383         org     p,".ptextrand":
                              388 Frand:
                              389 
                              390 ; 33   |        g_RandWorkingValue= g_RandWorkingValue* 1103515245 + 12345;
                              391 
                              411 
                              412 ; 34   |        return( (unsigned int)(g_RandWorkingValue/65536) & (32768 - 1));
                              413 
                              419 
                              420 ; 35   |}
                              421 
P:0000 250000         2    2  394         move    #0,x1
P:0001 4CF000 rrrrrr  3    5  393         move    y:Fg_RandWorkingValue,x0
P:0003 47F400 000041  3    8  395         move    #>$41,y1
P:0005 46F400 C64E6D  3   11  396         move    #$C64E6D,y0
P:0007 0040F8         2   13  397         ori     #$40,mr
P:0008 000000         2   15  397         nop             ; (inserted)
P:0009 2000D0         2   17  399         mpy     y0,x0,a
P:000A 2109E2         2   19  400         mac     x1,y0,a a0,b0
P:000B 2000C2         2   21  401         mac     x0,y1,a
P:000C 210DF2         2   23  402         mac     y1,x1,a a0,b1
P:000D 00BFB8         2   25  403         andi    #$BF,mr
P:000E 210B00         2   27  404         move    a0,b2
P:000F 46F42A 007FFF  3   30  405         asr     b	                #$7FFF,y0
P:0011 2E0000         2   32  406         move    #0,a
P:0012 50F400 003039  3   35  407         move    #12345,a0
P:0014 200018         2   37  408         add     a,b
P:0015 212700         2   39  409         move    b0,y1
P:0016 0110C0         2   41  415         mpy     y1,#16,a
P:0017 4F7056 rrrrrr  3   44  417         and     y0,a	                y1,y:Fg_RandWorkingValue
P:0019 218E00         2   46  418         move    a1,a
P:001A 00000C         4   50  423         rts
                              425 
                              426 ; 36   |
                              427 ; 37   |
                              428 ; 38   |
                              429 
                              431 
                              432         global  Fg_RandWorkingValue, Frand
                              433 
