TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87173b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;   ddiproject.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                               94 ; 3    |//
                               95 ; 4    |// Filename: ddiproject.c
                               96 ; 5    |// Description: DDI Test
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |//   Includes and external references
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |
                              103 ; 12   |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 13   |#include "project.h"
                              341 
                              343 
                              344 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              346 ; 3    |//  Filename: project.inc
                              347 ; 4    |//  Description: 
                              348 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 6    |
                              350 ; 7    |#if (!defined(_PROJECT_INC))
                              351 ; 8    |#define _PROJECT_INC 1
                              352 ; 9    |
                              353 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              354 ; 11   |#include "hwequ.h"
                              355 ; 12   |#else 
                              356 ; 13   |//include "regscodec.inc"
                              357 ; 14   |#endif
                              358 ; 15   |
                              359 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              360 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              361 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              362 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              363 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              364 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              365 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              366 ; 23   |
                              367 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              368 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              369 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              370 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              371 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              372 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              373 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              374 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              375 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              376 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              377 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              378 ; 35   |
                              379 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              380 ; 37   |// MEDIA DEFINITIONS
                              381 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              382 ; 39   |
                              383 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              384 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              385 ; 42   |#if defined(NAND1)
                              386 ; 43   |#define SM_INTERNAL_CHIPS 1
                              387 ; 44   |#else 
                              388 ; 45   |#if defined(NAND2)
                              389 ; 46   |#define SM_INTERNAL_CHIPS 2
                              390 ; 47   |#else 
                              391 ; 48   |#if defined(NAND3)
                              392 ; 49   |#define SM_INTERNAL_CHIPS 3
                              393 ; 50   |#else 
                              394 ; 51   |#if defined(NAND4)
                              395 ; 52   |#define SM_INTERNAL_CHIPS 4
                              396 ; 53   |#else 
                              397 ; 54   |#define SM_INTERNAL_CHIPS 1
                              398 ; 55   |#endif
                              399 ; 56   |#endif
                              400 ; 57   |#endif
                              401 ; 58   |#endif
                              402 ; 59   |
                              403 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              404 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              405 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              406 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              407 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              408 ; 65   |//*** comment out if active high ****
                              409 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              410 ; 67   |
                              411 ; 68   |#if defined(SMEDIA)
                              412 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              413 ; 70   |#define NUM_SM_EXTERNAL 1
                              414 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              415 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              416 ; 73   |#else 
                              417 ; 74   |#if defined(MMC)
                              418 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              419 ; 76   |#define NUM_SM_EXTERNAL 0
                              420 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              421 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              422 ; 79   |#else 
                              423 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              424 ; 81   |#define NUM_SM_EXTERNAL 0
                              425 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              426 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              427 ; 84   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              428 ; 85   |#endif
                              429 ; 86   |
                              430 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              431 ; 88   |// Mass Storage Class definitions
                              432 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              433 ; 90   |// Set to 0 if Composite Device build is desired.    
                              434 ; 91   |#define MULTI_LUN_BUILD 1   
                              435 ; 92   |
                              436 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              437 ; 94   |//  SCSI
                              438 ; 95   |#if (MULTI_LUN_BUILD==0)
                              439 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              440 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              441 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              442 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              443 ; 100  |  #else
                              444 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              445 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              446 ; 103  |  #endif
                              447 ; 104  |#else
                              448 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              449 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              450 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              451 ; 108  |  #else
                              452 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              453 ; 110  |  #endif
                              454 ; 111  |#endif
                              455 ; 112  |
                              456 ; 113  |
                              457 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              458 ; 115  |
                              459 ; 116  |
                              460 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              461 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              462 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              463 ; 120  |#ifdef MMC
                              464 ; 121  |#ifdef MTP_BUILD
                              465 ; 122  |// --------------------
                              466 ; 123  |// MTP and MMC
                              467 ; 124  |// --------------------
                              468 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              469 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              470 ; 127  |#else  // ifndef MTP_BUILD
                              471 ; 128  |#ifdef STMP_BUILD_PLAYER
                              472 ; 129  |// --------------------
                              473 ; 130  |// Player and MMC
                              474 ; 131  |// --------------------
                              475 ; 132  |#else
                              476 ; 133  |// --------------------
                              477 ; 134  |// USBMSC and MMC
                              478 ; 135  |// --------------------
                              479 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              480 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              481 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              482 ; 139  |#endif // ifdef MTP_BUILD
                              483 ; 140  |#else  // ifndef MMC
                              484 ; 141  |#ifdef MTP_BUILD
                              485 ; 142  |// --------------------
                              486 ; 143  |// MTP and NAND only
                              487 ; 144  |// --------------------
                              488 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              489 ; 146  |#define NUM_LOGICAL_DRIVES      7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              490 ; 147  |#else  // ifndef MTP_BUILD
                              491 ; 148  |#ifdef STMP_BUILD_PLAYER
                              492 ; 149  |// --------------------
                              493 ; 150  |// Player and NAND only
                              494 ; 151  |// --------------------
                              495 ; 152  |#else
                              496 ; 153  |// --------------------
                              497 ; 154  |// USBMSC and NAND only
                              498 ; 155  |// --------------------
                              499 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              500 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              501 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              502 ; 159  |#endif // ifdef MTP_BUILD
                              503 ; 160  |#endif // ifdef MMC 
                              504 ; 161  |
                              505 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              506 ; 163  |#if (defined(MTP_BUILD))
                              507 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              508 ; 165  |
                              509 ; 166  |////!
                              510 ; 167  |////! This varible holds the watchdog count for the store flush.
                              511 ; 168  |////!
                              512 ; 169  |///
                              513 ; 170  |#include <types.h>
                              514 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              515 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              516 ; 173  |#endif
                              517 ; 174  |
                              518 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              519 ; 176  |// These are needed here for Mass Storage Class
                              520 ; 177  |// Needs to be cleaned up
                              521 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              522 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              523 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              524 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              525 ; 182  |
                              526 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              527 ; 184  |
                              528 ; 185  |#endif
                              529 ; 186  |
                              530 ; 187  |
                              531 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              532 ; 189  |// SmartMedia/NAND defs
                              533 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              534 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              535 ; 192  |
                              536 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              537 ; 194  |// Sysloadresources defs
                              538 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              539 ; 196  |
                              540 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              541 ; 198  |// MMC defs
                              542 ; 199  |#define MMC_MAX_PARTITIONS 1
                              543 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              544 ; 201  |
                              545 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              546 ; 203  |// SPI defs
                              547 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              548 ; 205  |
                              549 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              550 ; 207  |// Global media defs
                              551 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              552 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              553 ; 210  |
                              554 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              555 ; 212  |// DO NOT CHANGE THESE!!!
                              556 ; 213  |#define SM_MAX_PARTITIONS 4
                              557 ; 214  |#define MAX_HANDLES 2
                              558 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              559 ; 216  |
                              560 ; 217  |
                              561 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              562 ; 219  |// Battery LRADC Values 
                              563 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              564 ; 221  |// brownout trip point in mV (moved by RS)
                              565 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              566 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              567 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              568 ; 225  |//     audio recording to media.
                              569 ; 226  |#define BATT_SAFETY_MARGIN 10
                              570 ; 227  |
                              571 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              572 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              573 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              574 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              575 ; 232  |
                              576 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              577 ; 234  |
                              578 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              579 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              580 ; 237  |#if (!defined(CLCD))
                              581 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              582 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              583 ; 240  |#else 
                              584 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              585 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              586 ; 243  |#endif
                              587 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              588 ; 245  |
                              589 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              590 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              591 ; 248  |// See mp3 encoder overlay.
                              592 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              593 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              594 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              595 ; 252  |
                              596 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              597 ; 254  |// Voice recording filenames
                              598 ; 255  |// number of digits in filename Vxxx.wav
                              599 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              600 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              601 ; 258  |
                              602 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              603 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              604 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              605 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              606 ; 263  |#if defined(DEVICE_3500)
                              607 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              608 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              609 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              610 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                              611 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              612 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              613 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              614 ; 271  |
                              615 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              616 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              617 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              618 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              619 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              620 ; 277  |
                              621 ; 278  |#else 
                              622 ; 279  |// STMP3410
                              623 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              624 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              625 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              626 ; 283  |#endif
                              627 ; 284  |
                              628 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              629 ; 286  |// Number of available soft timers
                              630 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              631 ; 288  |#if defined(SYNC_LYRICS)
                              632 ; 289  |#define SOFT_TIMERS 10
                              633 ; 290  |#else 
                              634 ; 291  |#if defined(JPEG_DECODER)
                              635 ; 292  |#define SOFT_TIMERS 10
                              636 ; 293  |#else 
                              637 ; 294  |#define SOFT_TIMERS 9
                              638 ; 295  |#endif
                              639 ; 296  |#endif
                              640 ; 297  |
                              641 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              642 ; 299  |//  sizes
                              643 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              644 ; 301  |#if defined(MMC)
                              645 ; 302  |#if defined(USE_PLAYLIST5)
                              646 ; 303  |#define MENU_STACK_SIZE 1500
                              647 ; 304  |#else 
                              648 ; 305  |#define MENU_STACK_SIZE 1250
                              649 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              650 ; 307  |#else 
                              651 ; 308  |#if defined(USE_PLAYLIST5)
                              652 ; 309  |#define MENU_STACK_SIZE 1500
                              653 ; 310  |#else 
                              654 ; 311  |#define MENU_STACK_SIZE 1250
                              655 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              656 ; 313  |#endif //if @def('MMC')
                              657 ; 314  |
                              658 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              659 ; 316  |// 
                              660 ; 317  |#define STACK_L1_SIZE 750
                              661 ; 318  |#define STACK_L2_SIZE 100
                              662 ; 319  |#define STACK_L3_SIZE 160
                              663 ; 320  |
                              664 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              665 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              666 ; 323  |// is ok with switching code.
                              667 ; 324  |#if defined(MTP_BUILD)
                              668 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              669 ; 326  |#endif
                              670 ; 327  |
                              671 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              672 ; 329  |// maximum number of nested funclets 
                              673 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              674 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              675 ; 332  |
                              676 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              677 ; 334  |//    LCD DEFINITIONS
                              678 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              679 ; 336  |
                              680 ; 337  |#define SPACE_CHAR 0x000020          
                              681 ; 338  |#define ZERO_CHAR 0x000030
                              682 ; 339  |#define COLON_CHAR 0x00003A
                              683 ; 340  |#define PERIOD_CHAR 0x00002E
                              684 ; 341  |
                              685 ; 342  |#if (defined(S6B33B0A_LCD))
                              686 ; 343  |#define LCD_X_SIZE 128
                              687 ; 344  |#define LCD_Y_SIZE 159
                              688 ; 345  |#endif
                              689 ; 346  |
                              690 ; 347  |#if (defined(SED15XX_LCD))
                              691 ; 348  |#define LCD_X_SIZE 128
                              692 ; 349  |#define LCD_Y_SIZE 64
                              693 ; 350  |#endif
                              694 ; 351  |
                              695 ; 352  |
                              696 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              697 ; 354  |//   Details on Customizing Contrast
                              698 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              699 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              700 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              701 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              702 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              703 ; 360  |//   unless the ezact sequence is remembered.
                              704 ; 361  |//   To find out what range your player supports: 
                              705 ; 362  |//   change these equs to full range or comment out (full range is default)
                              706 ; 363  |//;;;;;;
                              707 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              708 ; 365  |// recommended calibration using player -- uncomment 
                              709 ; 366  |//;;;;;;
                              710 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              711 ; 368  |////////////////////////////
                              712 ; 369  |#if (defined(DEMO_HW))
                              713 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              714 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              715 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              716 ; 373  |#else 
                              717 ; 374  |
                              718 ; 375  |#if (defined(S6B33B0A_LCD))
                              719 ; 376  |#define LCD_MAX_CONTRAST 210
                              720 ; 377  |#define LCD_MIN_CONTRAST 160    
                              721 ; 378  |#endif
                              722 ; 379  |
                              723 ; 380  |#if (defined(SED15XX_LCD))
                              724 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              725 ; 382  |// Engineering board regs support range [17-37].
                              726 ; 383  |//   Engineering board DC/DC support range [24-46]. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              727 ; 384  |//   One default contrast range [24-42] works for both.
                              728 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              729 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              730 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              731 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              732 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              733 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              734 ; 391  |
                              735 ; 392  |#if (defined(NEWSHINGYIH))
                              736 ; 393  |#define LCD_MAX_CONTRAST 250
                              737 ; 394  |#define LCD_MIN_CONTRAST 0
                              738 ; 395  |#else 
                              739 ; 396  |//-----
                              740 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              741 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              742 ; 399  |#define LCD_MAX_CONTRAST 250
                              743 ; 400  |#define LCD_MIN_CONTRAST 0
                              744 ; 401  |
                              745 ; 402  |//=====
                              746 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              747 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              748 ; 405  |//LCD_MAX_CONTRAST equ 42
                              749 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              750 ; 407  |
                              751 ; 408  |#endif
                              752 ; 409  |#endif
                              753 ; 410  |
                              754 ; 411  |#endif
                              755 ; 412  |
                              756 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              757 ; 414  |// The default value of the lcd contrast in % of range
                              758 ; 415  |//   the default value is used when no settings.dat is available
                              759 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              760 ; 417  |
                              761 ; 418  |#if (defined(S6B33B0A_LCD))
                              762 ; 419  |// 60% of range is default value
                              763 ; 420  |#define DEFAULT_CONTRAST 50 
                              764 ; 421  |#endif
                              765 ; 422  |
                              766 ; 423  |#if (defined(SED15XX_LCD))
                              767 ; 424  |// % of range is default value (was 60%)
                              768 ; 425  |#define DEFAULT_CONTRAST 50 
                              769 ; 426  |#endif
                              770 ; 427  |
                              771 ; 428  |
                              772 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              773 ; 430  |// make lower when doing calibration
                              774 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              775 ; 432  |
                              776 ; 433  |
                              777 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              778 ; 435  |// For FFWD and RWND
                              779 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              780 ; 437  |#define SECONDS_TO_SKIP 1
                              781 ; 438  |#define SECONDS_TO_SKIP1 3
                              782 ; 439  |#define SECONDS_TO_SKIP2 6
                              783 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              784 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              785 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              786 ; 443  |#define FIRST_TIME_BOUNDARY 15 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              787 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              788 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              789 ; 446  |
                              790 ; 447  |// For audible FFW/RWD
                              791 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              792 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              793 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              794 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              795 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              796 ; 453  |#define LEVEL1_BOUNDARY 17 
                              797 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              798 ; 455  |#define LEVEL2_BOUNDARY 33 
                              799 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              800 ; 457  |#define LEVEL3_BOUNDARY 50 
                              801 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              802 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              803 ; 460  |// Short Song Time, songs too short to play.
                              804 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              805 ; 462  |
                              806 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              807 ; 464  |// MP3 Sync Values
                              808 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              809 ; 466  |// # bytes to look for sync before marking it bad
                              810 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              811 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              812 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              813 ; 470  |// once we have sync'd, the isr should be called this frequently
                              814 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              815 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              816 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              817 ; 474  |
                              818 ; 475  |
                              819 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              820 ; 477  |//// Multi-Stage Volume Control Definitions
                              821 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              822 ; 479  |//// Use Multi-Stage Volume
                              823 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              824 ; 481  |
                              825 ; 482  |//// Master Volume definitions
                              826 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              827 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              828 ; 485  |
                              829 ; 486  |//// DAC-Mode definitions
                              830 ; 487  |//// Adjusts 0dB point
                              831 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              832 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              833 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              834 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              835 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              836 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              837 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              838 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              839 ; 496  |
                              840 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              841 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              842 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                              843 ; 500  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              844 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              845 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                              846 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              847 ; 504  |
                              848 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              849 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              850 ; 507  |
                              851 ; 508  |
                              852 ; 509  |//// Line In definitions (used for Line-In 1)
                              853 ; 510  |//// 0dB point of the Line In
                              854 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              855 ; 512  |//// Minimum volume of Line In
                              856 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              857 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              858 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              859 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              860 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              861 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              862 ; 519  |
                              863 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              864 ; 521  |//// 0dB point of the Line In
                              865 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              866 ; 523  |//// Minimum volume of Line In
                              867 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              868 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              869 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              870 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              871 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              872 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              873 ; 530  |
                              874 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              875 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              876 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              877 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              878 ; 535  |
                              879 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              880 ; 537  |////
                              881 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              882 ; 539  |////
                              883 ; 540  |///
                              884 ; 541  |#include <types.h>
                              885 
                              887 
                              888 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              889 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              890 ; 3    |//
                              891 ; 4    |// Filename: types.h
                              892 ; 5    |// Description: Standard data types
                              893 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              894 ; 7    |
                              895 ; 8    |#ifndef _TYPES_H
                              896 ; 9    |#define _TYPES_H
                              897 ; 10   |
                              898 ; 11   |// TODO:  move this outta here!
                              899 ; 12   |#if !defined(NOERROR)
                              900 ; 13   |#define NOERROR 0
                              901 ; 14   |#define SUCCESS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              902 ; 15   |#endif 
                              903 ; 16   |#if !defined(SUCCESS)
                              904 ; 17   |#define SUCCESS  0
                              905 ; 18   |#endif
                              906 ; 19   |#if !defined(ERROR)
                              907 ; 20   |#define ERROR   -1
                              908 ; 21   |#endif
                              909 ; 22   |#if !defined(FALSE)
                              910 ; 23   |#define FALSE 0
                              911 ; 24   |#endif
                              912 ; 25   |#if !defined(TRUE)
                              913 ; 26   |#define TRUE  1
                              914 ; 27   |#endif
                              915 ; 28   |
                              916 ; 29   |#if !defined(NULL)
                              917 ; 30   |#define NULL 0
                              918 ; 31   |#endif
                              919 ; 32   |
                              920 ; 33   |#define MAX_INT     0x7FFFFF
                              921 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              922 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              923 ; 36   |#define MAX_ULONG   (-1) 
                              924 ; 37   |
                              925 ; 38   |#define WORD_SIZE   24              // word size in bits
                              926 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              927 ; 40   |
                              928 ; 41   |
                              929 ; 42   |#define BYTE    unsigned char       // btVarName
                              930 ; 43   |#define CHAR    signed char         // cVarName
                              931 ; 44   |#define USHORT  unsigned short      // usVarName
                              932 ; 45   |#define SHORT   unsigned short      // sVarName
                              933 ; 46   |#define WORD    unsigned int        // wVarName
                              934 ; 47   |#define INT     signed int          // iVarName
                              935 ; 48   |#define DWORD   unsigned long       // dwVarName
                              936 ; 49   |#define LONG    signed long         // lVarName
                              937 ; 50   |#define BOOL    unsigned int        // bVarName
                              938 ; 51   |#define FRACT   _fract              // frVarName
                              939 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              940 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              941 ; 54   |#define FLOAT   float               // fVarName
                              942 ; 55   |#define DBL     double              // dVarName
                              943 ; 56   |#define ENUM    enum                // eVarName
                              944 ; 57   |#define CMX     _complex            // cmxVarName
                              945 ; 58   |typedef WORD UCS3;                   // 
                              946 ; 59   |
                              947 ; 60   |#define UINT16  unsigned short
                              948 ; 61   |#define UINT8   unsigned char   
                              949 ; 62   |#define UINT32  unsigned long
                              950 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              951 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              952 ; 65   |#define WCHAR   UINT16
                              953 ; 66   |
                              954 ; 67   |//UINT128 is 16 bytes or 6 words
                              955 ; 68   |typedef struct UINT128_3500 {   
                              956 ; 69   |    int val[6];     
                              957 ; 70   |} UINT128_3500;
                              958 ; 71   |
                              959 ; 72   |#define UINT128   UINT128_3500
                              960 ; 73   |
                              961 ; 74   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              962 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              963 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              964 ; 77   |// Little endian word packed byte strings:   
                              965 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              966 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              967 ; 80   |
                              968 ; 81   |// Declare Memory Spaces To Use When Coding
                              969 ; 82   |// A. Sector Buffers
                              970 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              971 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              972 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              973 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              974 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              975 ; 88   |// B. Media DDI Memory
                              976 ; 89   |#define MEDIA_DDI_MEM _Y
                              977 ; 90   |
                              978 ; 91   |
                              979 ; 92   |
                              980 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              981 ; 94   |// Examples of circular pointers:
                              982 ; 95   |//    INT CIRC cpiVarName
                              983 ; 96   |//    DWORD CIRC cpdwVarName
                              984 ; 97   |
                              985 ; 98   |#define RETCODE INT                 // rcVarName
                              986 ; 99   |
                              987 ; 100  |// generic bitfield structure
                              988 ; 101  |struct Bitfield {
                              989 ; 102  |    unsigned int B0  :1;
                              990 ; 103  |    unsigned int B1  :1;
                              991 ; 104  |    unsigned int B2  :1;
                              992 ; 105  |    unsigned int B3  :1;
                              993 ; 106  |    unsigned int B4  :1;
                              994 ; 107  |    unsigned int B5  :1;
                              995 ; 108  |    unsigned int B6  :1;
                              996 ; 109  |    unsigned int B7  :1;
                              997 ; 110  |    unsigned int B8  :1;
                              998 ; 111  |    unsigned int B9  :1;
                              999 ; 112  |    unsigned int B10 :1;
                             1000 ; 113  |    unsigned int B11 :1;
                             1001 ; 114  |    unsigned int B12 :1;
                             1002 ; 115  |    unsigned int B13 :1;
                             1003 ; 116  |    unsigned int B14 :1;
                             1004 ; 117  |    unsigned int B15 :1;
                             1005 ; 118  |    unsigned int B16 :1;
                             1006 ; 119  |    unsigned int B17 :1;
                             1007 ; 120  |    unsigned int B18 :1;
                             1008 ; 121  |    unsigned int B19 :1;
                             1009 ; 122  |    unsigned int B20 :1;
                             1010 ; 123  |    unsigned int B21 :1;
                             1011 ; 124  |    unsigned int B22 :1;
                             1012 ; 125  |    unsigned int B23 :1;
                             1013 ; 126  |};
                             1014 ; 127  |
                             1015 ; 128  |union BitInt {
                             1016 ; 129  |        struct Bitfield B;
                             1017 ; 130  |        int        I;
                             1018 ; 131  |};
                             1019 ; 132  |
                             1020 ; 133  |#define MAX_MSG_LENGTH 10
                             1021 ; 134  |struct CMessage
                             1022 ; 135  |{
                             1023 ; 136  |        unsigned int m_uLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1025 ; 138  |};
                             1026 ; 139  |
                             1027 ; 140  |typedef struct {
                             1028 ; 141  |    WORD m_wLength;
                             1029 ; 142  |    WORD m_wMessage;
                             1030 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1031 ; 144  |} Message;
                             1032 ; 145  |
                             1033 ; 146  |struct MessageQueueDescriptor
                             1034 ; 147  |{
                             1035 ; 148  |        int *m_pBase;
                             1036 ; 149  |        int m_iModulo;
                             1037 ; 150  |        int m_iSize;
                             1038 ; 151  |        int *m_pHead;
                             1039 ; 152  |        int *m_pTail;
                             1040 ; 153  |};
                             1041 ; 154  |
                             1042 ; 155  |struct ModuleEntry
                             1043 ; 156  |{
                             1044 ; 157  |    int m_iSignaledEventMask;
                             1045 ; 158  |    int m_iWaitEventMask;
                             1046 ; 159  |    int m_iResourceOfCode;
                             1047 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1048 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1049 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1050 ; 163  |    int m_uTimeOutHigh;
                             1051 ; 164  |    int m_uTimeOutLow;
                             1052 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1053 ; 166  |};
                             1054 ; 167  |
                             1055 ; 168  |union WaitMask{
                             1056 ; 169  |    struct B{
                             1057 ; 170  |        unsigned int m_bNone     :1;
                             1058 ; 171  |        unsigned int m_bMessage  :1;
                             1059 ; 172  |        unsigned int m_bTimer    :1;
                             1060 ; 173  |        unsigned int m_bButton   :1;
                             1061 ; 174  |    } B;
                             1062 ; 175  |    int I;
                             1063 ; 176  |} ;
                             1064 ; 177  |
                             1065 ; 178  |
                             1066 ; 179  |struct Button {
                             1067 ; 180  |        WORD wButtonEvent;
                             1068 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1069 ; 182  |};
                             1070 ; 183  |
                             1071 ; 184  |struct Message {
                             1072 ; 185  |        WORD wMsgLength;
                             1073 ; 186  |        WORD wMsgCommand;
                             1074 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1075 ; 188  |};
                             1076 ; 189  |
                             1077 ; 190  |union EventTypes {
                             1078 ; 191  |        struct CMessage msg;
                             1079 ; 192  |        struct Button Button ;
                             1080 ; 193  |        struct Message Message;
                             1081 ; 194  |};
                             1082 ; 195  |
                             1083 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1084 ; 197  |#define BUILD_TYPE_UPDATER  0x100
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1085 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1086 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1087 ; 200  |
                             1088 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1089 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1090 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1091 ; 204  |
                             1092 ; 205  |#if DEBUG
                             1093 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1094 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1095 ; 208  |#else 
                             1096 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1097 ; 210  |#define DebugBuildAssert(x)    
                             1098 ; 211  |#endif
                             1099 ; 212  |
                             1100 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1101 ; 214  |//  #pragma asm
                             1102 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1103 ; 216  |//  #pragma endasm
                             1104 ; 217  |
                             1105 ; 218  |
                             1106 ; 219  |#ifdef COLOR_262K
                             1107 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1108 ; 221  |#elif defined(COLOR_65K)
                             1109 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1110 ; 223  |#else
                             1111 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1112 ; 225  |#endif
                             1113 ; 226  |    
                             1114 ; 227  |#endif // #ifndef _TYPES_H
                             1115 
                             1117 
                             1118 ; 542  |extern volatile WORD g_wActivityState;
                             1119 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1120 ; 544  |
                             1121 ; 545  |void _reentrant Init5VSense(void);
                             1122 ; 546  |void _reentrant ServiceDCDC(void);
                             1123 ; 547  |
                             1124 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1125 ; 549  |//// JPEG Thumbnail Mode Setting
                             1126 ; 550  |//// number of column in thumbnail mode
                             1127 ; 551  |#define THUMBNAIL_X 2           
                             1128 ; 552  |//// number of row in  thumbnail mode
                             1129 ; 553  |#define THUMBNAIL_Y 2           
                             1130 ; 554  |//// thumbnail boundary offset x
                             1131 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1132 ; 556  |//// thumbnail boundary offset y
                             1133 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1134 ; 558  |
                             1135 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1136 ; 560  |
                             1137 
                             1139 
                             1140 ; 14   |#include "ddildl.h"
                             1141 
                             1143 
                             1144 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1145 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1146 ; 3    |//
                             1147 ; 4    |// Filename: ddildl.h
                             1148 ; 5    |// Description: 
                             1149 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1150 ; 7    |
                             1151 ; 8    |#ifndef _DDILDL_H
                             1152 ; 9    |#define _DDILDL_H
                             1153 ; 10   |
                             1154 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1155 ; 12   |// Includes
                             1156 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1157 ; 14   |
                             1158 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             1159 ; 16   |// Definitions
                             1160 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1161 ; 18   |// version before march 11 2005 
                             1162 ; 19   |//#ifdef PLAYER_BUILD
                             1163 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                             1164 ; 21   |//#else
                             1165 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                             1166 ; 23   |//#endif
                             1167 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                             1168 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                             1169 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                             1170 ; 27   |
                             1171 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             1172 ; 29   |
                             1173 ; 30   |//
                             1174 ; 31   |// WARNING
                             1175 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             1176 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                             1177 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                             1178 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             1179 ; 36   |#ifdef PLAYER_BUILD
                             1180 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             1181 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             1182 ; 39   |/********************************************************************************
                             1183 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             1184 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             1185 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             1186 ; 43   | ********************************************************************************/
                             1187 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             1188 ; 45   |#endif
                             1189 ; 46   |
                             1190 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             1191 ; 48   |
                             1192 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             1193 ; 50   |// Error codes
                             1194 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             1195 ; 52   |
                             1196 ; 53   |#include "errors.h"
                             1197 
                             1199 
                             1200 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1201 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             1202 ; 3    |////
                             1203 ; 4    |//// Filename: errors.inc
                             1204 ; 5    |//// Description: 
                             1205 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             1206 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1207 ; 8    |#if (!defined(ERRORS_INC))
                             1208 ; 9    |#define ERRORS_INC 1
                             1209 ; 10   |
                             1210 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             1211 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             1212 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             1213 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             1214 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             1215 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             1216 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             1217 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             1218 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             1219 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             1220 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             1221 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             1222 ; 23   |// block in the device. The block was marked bad and tables updated.
                             1223 ; 24   |// The application must start over.
                             1224 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             1225 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             1226 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             1227 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             1228 ; 29   |
                             1229 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             1230 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             1231 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             1232 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             1233 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             1234 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             1235 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             1236 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             1237 ; 38   |//Specific to NAND
                             1238 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             1239 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             1240 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             1241 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             1242 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             1243 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             1244 ; 45   |
                             1245 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             1246 ; 47   |
                             1247 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             1248 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             1249 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             1250 ; 51   |
                             1251 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             1252 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             1253 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             1254 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             1255 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             1256 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             1257 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             1258 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             1259 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             1260 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             1261 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             1262 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             1263 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             1264 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             1265 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             1266 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             1267 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             1268 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1269 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             1270 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             1271 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             1272 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             1273 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             1274 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             1275 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             1276 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             1277 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             1278 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             1279 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             1280 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             1281 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             1282 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             1283 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             1284 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             1285 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             1286 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             1287 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             1288 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             1289 ; 90   |
                             1290 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             1291 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             1292 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             1293 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             1294 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             1295 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             1296 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             1297 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             1298 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             1299 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             1300 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             1301 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             1302 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             1303 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             1304 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             1305 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             1306 ; 107  |
                             1307 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             1308 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             1309 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             1310 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             1311 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             1312 ; 113  |
                             1313 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             1314 ; 115  |// match the previously initialized Nand chip type.
                             1315 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             1316 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             1317 ; 118  |// Errors from calling HIL functions
                             1318 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             1319 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             1320 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             1321 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             1322 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             1323 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             1324 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             1325 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             1326 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             1327 ; 128  |// for 3410 build
                             1328 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             1329 ; 130  |// for 3410 build
                             1330 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1331 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             1332 ; 133  |
                             1333 ; 134  |// indicates that the GetStatus returned a FAIL
                             1334 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             1335 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             1336 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             1337 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             1338 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             1339 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             1340 ; 141  |// indicates the NAND was already BUSY
                             1341 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             1342 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             1343 ; 144  |// ECC Error Codes
                             1344 ; 145  |// ECC Computation has successfully completed
                             1345 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             1346 ; 147  |// ECC computation still busy
                             1347 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             1348 ; 149  |// timed out while waiting on object
                             1349 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             1350 ; 151  |// flag already set for SDK2.4 lock
                             1351 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             1352 ; 153  |
                             1353 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             1354 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             1355 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             1356 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             1357 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             1358 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             1359 ; 160  |
                             1360 ; 161  |// MMC Errors
                             1361 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             1362 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             1363 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             1364 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             1365 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             1366 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             1367 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             1368 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             1369 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             1370 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             1371 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             1372 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             1373 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             1374 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             1375 ; 176  |
                             1376 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             1377 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             1378 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             1379 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             1380 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             1381 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             1382 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             1383 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             1384 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             1385 ; 186  |
                             1386 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1387 ; 188  |//// MMC HAL Error codes
                             1388 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             1389 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             1390 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             1391 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             1392 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1393 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             1394 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             1395 ; 196  |
                             1396 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             1397 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             1398 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             1399 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             1400 ; 201  |
                             1401 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             1402 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             1403 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             1404 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             1405 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             1406 ; 207  |
                             1407 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             1408 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             1409 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             1410 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             1411 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             1412 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             1413 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             1414 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             1415 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             1416 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             1417 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             1418 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             1419 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             1420 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             1421 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             1422 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             1423 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             1424 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             1425 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             1426 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             1427 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             1428 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             1429 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             1430 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             1431 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             1432 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             1433 ; 234  |
                             1434 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             1435 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             1436 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             1437 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             1438 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             1439 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             1440 ; 241  |
                             1441 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             1442 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             1443 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             1444 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             1445 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             1446 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             1447 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             1448 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             1449 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             1450 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             1451 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             1452 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             1453 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             1454 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1455 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             1456 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             1457 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             1458 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             1459 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             1460 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             1461 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             1462 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             1463 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             1464 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             1465 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             1466 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             1467 ; 268  |
                             1468 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             1469 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             1470 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             1471 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             1472 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             1473 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             1474 ; 275  |
                             1475 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             1476 ; 277  |//MATH errors...
                             1477 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             1478 ; 279  |
                             1479 ; 280  |//Memory Pointer errors...
                             1480 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             1481 ; 282  |//****************************************************************/
                             1482 ; 283  |#if (!defined(NOERROR))
                             1483 ; 284  |#define NOERROR 0
                             1484 ; 285  |#endif
                             1485 ; 286  |
                             1486 ; 287  |////Added by RAKS
                             1487 ; 288  |
                             1488 ; 289  |#define ERRProgram 0x911111
                             1489 ; 290  |#define ERRNoMedia 0x922222
                             1490 ; 291  |#define ERRHwFail 0x933333   
                             1491 ; 292  |#define ERRInvMedia 0x944444
                             1492 ; 293  |#define ERRBlkFail 0x955555
                             1493 ; 294  |#define ERRInvDataStatus 0x966666
                             1494 ; 295  |#define ERRWriteFail 0x977777
                             1495 ; 296  |#define ERRECCCorr 0x988888
                             1496 ; 297  |#define ERRECCFail 0x999999
                             1497 ; 298  |#define ERRZoneFull 0x9aaaaa
                             1498 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             1499 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             1500 ; 301  |//invalid partition table signature. 
                             1501 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             1502 ; 303  |//boot ID bad
                             1503 ; 304  |#define ERRBootID 0x9BBBBB   
                             1504 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             1505 ; 306  |////Nothing was here : RAKS
                             1506 ; 307  |//JUMP instruction bad
                             1507 ; 308  |#define ERRBootJump 0x9DDDDD  
                             1508 ; 309  |//ID Byte bad
                             1509 ; 310  |#define ERRIDByte 0x9EEEEE  
                             1510 ; 311  |
                             1511 ; 312  |
                             1512 ; 313  |//****************************************************************
                             1513 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             1514 ; 315  |//****************************************************************
                             1515 ; 316  |// Master ERROR File
                             1516 ; 317  |//****************************************************************/
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1517 ; 318  |// FAT File System Error Codes
                             1518 ; 319  |// corrupt FAT
                             1519 ; 320  |#define FATCorrupt -1        
                             1520 ; 321  |// invalid FAT sector
                             1521 ; 322  |#define DIRInvlaidSector -2        
                             1522 ; 323  |
                             1523 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             1524 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             1525 ; 326  |#define FATwarningReservedCx 0x0A1111
                             1526 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             1527 ; 328  |//FATcxsFree==0 
                             1528 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             1529 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             1530 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             1531 ; 332  |
                             1532 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             1533 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             1534 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             1535 ; 336  |
                             1536 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             1537 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             1538 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             1539 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             1540 ; 341  |//No Free Cxs on FAT Scan!
                             1541 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             1542 ; 343  |
                             1543 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             1544 ; 345  |
                             1545 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             1546 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             1547 ; 348  |
                             1548 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             1549 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             1550 ; 351  |
                             1551 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             1552 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             1553 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             1554 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             1555 ; 356  |
                             1556 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             1557 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             1558 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             1559 ; 360  |
                             1560 ; 361  |#define SEEKprefix 0x85
                             1561 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             1562 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             1563 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             1564 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             1565 ; 366  |
                             1566 ; 367  |#define READprefix 0x86
                             1567 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             1568 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             1569 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             1570 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             1571 ; 372  |#define READerrorFreeCx 0x860000
                             1572 ; 373  |#define READerrorEndOfChain 0x861111
                             1573 ; 374  |#define READerrorReservedCx 0x862222
                             1574 ; 375  |#define READerrorBadCx 0x863333
                             1575 ; 376  |
                             1576 ; 377  |#define WRITEprefix 0x87
                             1577 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             1578 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1579 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             1580 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             1581 ; 382  |#define WRITEerrorFreeCx 0x870000
                             1582 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             1583 ; 384  |#define WRITEerrorReservedCx 0x872222
                             1584 ; 385  |#define WRITEerrorBadCx 0x873333
                             1585 ; 386  |
                             1586 ; 387  |#define UTILprefix 0x88
                             1587 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             1588 ; 389  |
                             1589 ; 390  |// Directory Error Codes
                             1590 ; 391  |
                             1591 ; 392  |// invalid DIR sector specified
                             1592 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             1593 ; 394  |// PATH search string has invlaid directory
                             1594 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             1595 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             1596 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             1597 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             1598 ; 399  |// Bad cluster number
                             1599 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             1600 ; 401  |// Can't open ROOT
                             1601 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             1602 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             1603 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             1604 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             1605 ; 406  |// bad record number to read
                             1606 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             1607 ; 408  |// record requeste not in range
                             1608 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             1609 ; 410  |// record requeste past end of ROOT
                             1610 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             1611 ; 412  |// device number invalid
                             1612 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             1613 ; 414  |// FCB Does not popint to a sub-Directory entry
                             1614 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             1615 ; 416  |// Path specified is invalid
                             1616 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             1617 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             1618 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             1619 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             1620 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             1621 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             1622 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             1623 ; 424  |
                             1624 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             1625 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             1626 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             1627 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             1628 ; 429  |// String Manipulation Error Codes
                             1629 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             1630 ; 431  |
                             1631 ; 432  |#endif //@DEF(ERRORS_INC)
                             1632 ; 433  |
                             1633 
                             1635 
                             1636 ; 54   |
                             1637 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             1638 ; 56   |// Typedefs
                             1639 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             1640 ; 58   |
                             1641 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1642 ; 60   |
                             1643 ; 61   |#include "ddildl\ddildl_defs.h"
                             1644 
                             1646 
                             1647 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1648 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             1649 ; 3    |//
                             1650 ; 4    |// Filename: ddildl_defs.h
                             1651 ; 5    |// Description: 
                             1652 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1653 ; 7    |
                             1654 ; 8    |#ifndef _DDILDL_DEFS_H
                             1655 ; 9    |#define _DDILDL_DEFS_H
                             1656 ; 10   |
                             1657 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1658 ; 12   |// Typedefs
                             1659 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1660 ; 14   |
                             1661 ; 15   |typedef enum {
                             1662 ; 16   |  MediaStateUnknown,
                             1663 ; 17   |  MediaStateErased,
                             1664 ; 18   |  MediaStateAllocated
                             1665 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             1666 ; 20   |
                             1667 ; 21   |typedef enum {
                             1668 ; 22   |    MediaTypeNand = 0,
                             1669 ; 23   |    MediaTypeMMC = 1,
                             1670 ; 24   |    MediaTypeHDD = 2,
                             1671 ; 25   |    MediaTypeRAM = 3
                             1672 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             1673 ; 27   |
                             1674 ; 28   |typedef enum {
                             1675 ; 29   |    MediaInfoNumberOfDrives = 0,
                             1676 ; 30   |    MediaInfoSizeInBytes = 1,
                             1677 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             1678 ; 32   |    MediaInfoIsInitialized = 3,
                             1679 ; 33   |    MediaInfoMediaState = 4,
                             1680 ; 34   |    MediaInfoIsWriteProtected = 5,
                             1681 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             1682 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             1683 ; 37   |    MediaInfoSerialNumber = 8,
                             1684 ; 38   |    MediaInfoIsSystemMedia = 9,
                             1685 ; 39   |    MediaInfoIsMediaPresent = 10
                             1686 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             1687 ; 41   |
                             1688 ; 42   |#ifdef MFG_TOOL
                             1689 ; 43   |  
                             1690 ; 44   |typedef enum {
                             1691 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             1692 ; 46   |    SerialNoInfoSerialNumber = 1
                             1693 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             1694 ; 48   |#endif
                             1695 ; 49   |
                             1696 ; 50   |typedef enum {
                             1697 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             1698 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                             1699 ; 53   |    DriveInfoSizeInBytes = 2,
                             1700 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             1701 ; 55   |    DriveInfoSizeInSectors = 4,
                             1702 ; 56   |    DriveInfoType = 5,
                             1703 ; 57   |    DriveInfoTag = 6,
                             1704 ; 58   |    DriveInfoComponentVersion = 7,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1705 ; 59   |    DriveInfoProjectVersion = 8,
                             1706 ; 60   |    DriveInfoIsWriteProtected = 9,
                             1707 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             1708 ; 62   |    DriveInfoSerialNumber = 11,
                             1709 ; 63   |    DriveInfoMediaPresent = 12,
                             1710 ; 64   |    DriveInfoMediaChange = 13,
                             1711 ; 65   |    DriveInfoSectorAllocation = 14
                             1712 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             1713 ; 67   |
                             1714 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                             1715 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                             1716 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             1717 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                             1718 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                             1719 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             1720 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                             1721 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                             1722 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                             1723 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             1724 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                             1725 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             1726 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                             1727 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             1728 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                             1729 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             1730 ; 84   |//  may extend the system drives without DDI source code.
                             1731 ; 85   |/*
                             1732 ; 86   |typedef enum {
                             1733 ; 87   |    ResourceBinDriveTag = 0x00,
                             1734 ; 88   |    BootManagerDriveTag = 0x50,
                             1735 ; 89   |    StmpSysDriveTag = 0x01,
                             1736 ; 90   |    UsbMscDriveTag = 0x02,
                             1737 ; 91   |    DataDriveTag = 0x0A
                             1738 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             1739 ; 93   |*/
                             1740 ; 94   |
                             1741 ; 95   |typedef enum {
                             1742 ; 96   |    DriveTypeData = 0,
                             1743 ; 97   |    DriveTypeSystem = 1,
                             1744 ; 98   |    DriveTypeHidden = 2,
                             1745 ; 99   |    DriveTypeUnknown = 3
                             1746 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             1747 
                             1754 
                             1755 ; 101  |
                             1756 ; 102  |typedef struct {
                             1757 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             1758 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             1759 ; 105  |    WORD wTag;
                             1760 ; 106  |    DWORD dwSizeInBytes;
                             1761 ; 107  |    BOOL bRequired;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1762 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             1763 
                             1771 
                             1772 ; 109  |
                             1773 ; 110  |typedef struct {
                             1774 ; 111  |    WORD wNumEntries;
                             1775 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             1776 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             1777 ; 114  |
                             1778 ; 115  |
                             1779 ; 116  |#define TA6_ROM_REV_ID  6
                             1780 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             1781 ; 118  |
                             1782 ; 119  | 
                             1783 ; 120  |typedef union {
                             1784 ; 121  |
                             1785 ; 122  |    struct {
                             1786 ; 123  |        WORD MinorL      : 8;
                             1787 ; 124  |        WORD MinorH      : 8;
                             1788 ; 125  |        WORD MiddleL     : 8;
                             1789 ; 126  |        WORD MiddleH     : 8;
                             1790 ; 127  |        WORD MajorL      : 8;
                             1791 ; 128  |        WORD MajorH      : 8;
                             1792 ; 129  |        } PARTIAL_VERSION;
                             1793 ; 130  |        
                             1794 ; 131  |    DWORD   Version;        
                             1795 ; 132  |
                             1796 ; 133  |} SYSTEM_VERSION;
                             1797 ; 134  |
                             1798 ; 135  |
                             1799 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             1800 
                             1802 
                             1803 ; 62   |
                             1804 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             1805 ; 64   |// Prototypes
                             1806 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             1807 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             1808 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             1809 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             1810 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             1811 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             1812 
                             1820 
                             1821 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             1822 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             1823 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             1824 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             1825 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             1826 
                             1840 
                             1841 ; 76   |    void * _Y pInfo);
                             1842 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             1843 ; 78   |
                             1844 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             1845 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1846 
                             1864 
                             1865 ; 81   |    void * pInfo);
                             1866 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1867 ; 83   |    void * pInfo);
                             1868 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1869 
                             1873 
                             1874 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             1875 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1876 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             1877 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             1878 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             1879 
                             1884 
                             1885 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             1886 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             1887 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             1888 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             1889 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             1890 ; 95   |
                             1891 ; 96   |RETCODE DdiInitAll(void);
                             1892 ; 97   |
                             1893 ; 98   |
                             1894 ; 99   |#endif // #ifndef _DDILDL_H
                             1895 
                             1897 
                             1898 ; 15   |#include "RAMDdi.h"
                             1899 
                             1901 
                             1902 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1903 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             1904 ; 3    |//
                             1905 ; 4    |// Filename: RAMDdi.h
                             1906 ; 5    |// Description: 
                             1907 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1908 ; 7    |
                             1909 ; 8    |#ifndef _RAM_DDI_H
                             1910 ; 9    |#define _RAM_DDI_H
                             1911 ; 10   |
                             1912 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1913 ; 12   |// Includes
                             1914 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1915 ; 14   |#include "ddildl_internal.h"
                             1916 
                             1918 
                             1919 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1920 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             1921 ; 3    |//
                             1922 ; 4    |// Filename: ddildl_internal.h
                             1923 ; 5    |// Description: 
                             1924 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1925 ; 7    |#ifndef _DDILDL_INTERNAL_H
                             1926 ; 8    |#define _DDILDL_INTERNAL_H
                             1927 ; 9    |
                             1928 ; 10   |#include "ddildl.h"
                             1929 
                             1931 
                             1932 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1933 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             1934 ; 3    |//
                             1935 ; 4    |// Filename: ddildl.h
                             1936 ; 5    |// Description: 
                             1937 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1938 ; 7    |
                             1939 ; 8    |#ifndef _DDILDL_H
                             1940 ; 9    |#define _DDILDL_H
                             1941 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1942 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1943 ; 12   |// Includes
                             1944 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1945 ; 14   |
                             1946 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             1947 ; 16   |// Definitions
                             1948 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1949 ; 18   |// version before march 11 2005 
                             1950 ; 19   |//#ifdef PLAYER_BUILD
                             1951 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                             1952 ; 21   |//#else
                             1953 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                             1954 ; 23   |//#endif
                             1955 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                             1956 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                             1957 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                             1958 ; 27   |
                             1959 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             1960 ; 29   |
                             1961 ; 30   |//
                             1962 ; 31   |// WARNING
                             1963 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             1964 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                             1965 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                             1966 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             1967 ; 36   |#ifdef PLAYER_BUILD
                             1968 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             1969 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             1970 ; 39   |/********************************************************************************
                             1971 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             1972 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             1973 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             1974 ; 43   | ********************************************************************************/
                             1975 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             1976 ; 45   |#endif
                             1977 ; 46   |
                             1978 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             1979 ; 48   |
                             1980 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             1981 ; 50   |// Error codes
                             1982 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             1983 ; 52   |
                             1984 ; 53   |#include "errors.h"
                             1985 ; 54   |
                             1986 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             1987 ; 56   |// Typedefs
                             1988 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             1989 ; 58   |
                             1990 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             1991 ; 60   |
                             1992 ; 61   |#include "ddildl\ddildl_defs.h"
                             1993 ; 62   |
                             1994 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             1995 ; 64   |// Prototypes
                             1996 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             1997 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             1998 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             1999 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             2000 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             2001 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2002 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             2003 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             2004 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             2005 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             2006 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             2007 ; 76   |    void * _Y pInfo);
                             2008 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             2009 ; 78   |
                             2010 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             2011 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             2012 ; 81   |    void * pInfo);
                             2013 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             2014 ; 83   |    void * pInfo);
                             2015 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             2016 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             2017 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             2018 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             2019 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             2020 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             2021 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             2022 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             2023 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             2024 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             2025 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             2026 ; 95   |
                             2027 ; 96   |RETCODE DdiInitAll(void);
                             2028 ; 97   |
                             2029 ; 98   |
                             2030 ; 99   |#endif // #ifndef _DDILDL_H
                             2031 
                             2044 
                             2045 ; 11   |
                             2046 ; 12   |///////////////////////////////////////
                             2047 ; 13   |// Logical Media structures
                             2048 ; 14   |///////////////////////////////////////
                             2049 ; 15   |
                             2050 ; 16   |typedef struct {
                             2051 ; 17   |    // Discovered at Run Time by MediaInit:
                             2052 ; 18   |    WORD    wMediaNumber;
                             2053 ; 19   |    BOOL    bInitialized;
                             2054 ; 20   |    MEDIA_STATE eState;
                             2055 ; 21   |    BOOL    bAllocated;
                             2056 ; 22   |    BOOL    bWriteProtected;
                             2057 ; 23   |    WORD    wNumberOfDrives;//on this media
                             2058 ; 24   |    DWORD   dwSizeInBytes;
                             2059 ; 25   |    WORD    wAllocationUnitSizeInBytes;
                             2060 ; 26   |    PHYSICAL_MEDIA_TYPE PhysicalType;
                             2061 ; 27   |    void * pMediaInfo;  // same as in LOGICAL_DRIVE_DESCRIPTOR
                             2062 ; 28   |} LOGICAL_MEDIA_DESCRIPTOR, * P_LOGICAL_MEDIA_DESCRIPTOR;
                             2063 
                             2080 
                             2081 ; 29   |
                             2082 ; 30   |// Logical Media API functions
                             2083 ; 31   |typedef _reentrant RETCODE (*P_MEDIA_INIT_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR);
                             2084 ; 32   |typedef RETCODE _reentrant (*P_MEDIA_ALLOCATE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             2085 ; 33   |    P_MEDIA_ALLOCATION_TABLE);
                             2086 ; 34   |typedef RETCODE _reentrant (*P_MEDIA_DISCOVER_ALLOCATION_FUNCTION)(P_LOGICAL_MEDIA_DESCRIP
                                  TOR);
                             2087 ; 35   |typedef RETCODE _reentrant (*P_MEDIA_GET_MEDIA_TABLE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                                  
                             2088 ; 36   |    P_MEDIA_ALLOCATION_TABLE);
                             2089 ; 37   |typedef RETCODE _reentrant (*P_MEDIA_GET_INFO_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2090 ; 38   |    LOGICAL_MEDIA_INFO, void * _Y);
                             2091 ; 39   |typedef RETCODE _reentrant (*P_MEDIA_ERASE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             2092 ; 40   |    WORD wMagicNumber);
                             2093 
                             2118 
                             2119 ; 41   |
                             2120 ; 42   |typedef struct {
                             2121 ; 43   |    WORD wInitCodeBank;
                             2122 ; 44   |    P_MEDIA_INIT_FUNCTION pInit;
                             2123 ; 45   |    WORD wAllocateCodeBank;
                             2124 ; 46   |    P_MEDIA_ALLOCATE_FUNCTION pAllocate;
                             2125 ; 47   |    WORD wDiscoverAllocationCodeBank;
                             2126 ; 48   |    P_MEDIA_DISCOVER_ALLOCATION_FUNCTION pDiscoverAllocation;
                             2127 ; 49   |    WORD wGetMediaTableCodeBank;
                             2128 ; 50   |    P_MEDIA_GET_MEDIA_TABLE_FUNCTION pGetMediatable;
                             2129 ; 51   |    WORD wGetInfoCodeBank;
                             2130 ; 52   |    P_MEDIA_GET_INFO_FUNCTION pGetInfo;
                             2131 ; 53   |    WORD wEraseCodeBank;
                             2132 ; 54   |    P_MEDIA_ERASE_FUNCTION pErase;
                             2133 ; 55   |} LOGICAL_MEDIA_API, * P_LOGICAL_MEDIA_API;
                             2134 
                             2151 
                             2152 ; 56   |
                             2153 ; 57   |typedef struct {
                             2154 ; 58   |    P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor;
                             2155 ; 59   |    P_LOGICAL_MEDIA_API pApi;
                             2156 ; 60   |} LOGICAL_MEDIA, * P_LOGICAL_MEDIA;
                             2157 
                             2175 
                             2176 ; 61   |
                             2177 ; 62   |///////////////////////////////////////
                             2178 ; 63   |// Logical Drive structures
                             2179 ; 64   |///////////////////////////////////////
                             2180 ; 65   |
                             2181 ; 66   |typedef struct {
                             2182 ; 67   |    // Discovered at Run Time by MediaDiscover
                             2183 ; 68   |    BOOL    bInitialized;
                             2184 ; 69   |    BOOL    bPresent;       // Indicates if a system drive is present
                             2185 ; 70   |                            // wTag from Config Block matches wTag from Drive
                             2186 ; 71   |                            // redundant area
                             2187 ; 72   |    BOOL    bErased;
                             2188 ; 73   |    BOOL    bWriteProtected;
                             2189 ; 74   |    DWORD   dwNumberOfSectors;
                             2190 ; 75   |    LOGICAL_DRIVE_TYPE Type;
                             2191 ; 76   |    WORD    wTag;
                             2192 ; 77   |    WORD    wDriveNumber;
                             2193 ; 78   |    DWORD   dwSizeInBytes;
                             2194 ; 79   |    WORD    wSectorSizeInBytes; // not included bad blocks (NAND media)
                             2195 ; 80   |    WORD    wEraseSizeInBytes;
                             2196 ; 81   |    SYSTEM_VERSION ProjectVersion;
                             2197 ; 82   |    SYSTEM_VERSION ComponentVersion;
                             2198 ; 83   |    P_LOGICAL_MEDIA_DESCRIPTOR pLogicalMediaDescriptor;
                             2199 ; 84   |    void * pMediaInfo;  // same as in LOGICAL_MEDIA_DESCRIPTOR
                             2200 ; 85   |    void * pDriveInfo;
                             2201 ; 86   |} LOGICAL_DRIVE_DESCRIPTOR, * P_LOGICAL_DRIVE_DESCRIPTOR;
                             2202 
                             2223 
                             2224 ; 87   |
                             2225 ; 88   |// Logical Drive API functions
                             2226 ; 89   |typedef RETCODE _reentrant (*P_DRIVE_INIT_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             2227 ; 90   |typedef RETCODE _reentrant (*P_DRIVE_GET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2228 ; 91   |    LOGICAL_DRIVE_INFO, void *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2229 ; 92   |typedef RETCODE _reentrant (*P_DRIVE_SET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2230 ; 93   |    LOGICAL_DRIVE_INFO, void *);
                             2231 ; 94   |typedef RETCODE _reentrant (*P_DRIVE_READ_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2232 ; 95   |    DWORD, P_SECTOR_BUFFER);
                             2233 ; 96   |typedef RETCODE _reentrant (*P_DRIVE_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2234 ; 97   |    DWORD, P_SECTOR_BUFFER);
                             2235 ; 98   |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SETUP_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTO
                                  R,
                             2236 ; 99   |    DWORD, WORD, MULTI_WRITE_CALLBACK_FUNCTION);
                             2237 ; 100  |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPT
                                  OR,
                             2238 ; 101  |    P_SECTOR_BUFFER, LONG);
                             2239 ; 102  |typedef RETCODE _reentrant (*P_DRIVE_ERASE_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR, WORD);
                             2240 ; 103  |typedef RETCODE _reentrant (*P_DRIVE_FLUSH_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             2241 
                             2278 
                             2279 ; 104  |
                             2280 ; 105  |typedef struct {
                             2281 ; 106  |    WORD wInitCodeBank;
                             2282 ; 107  |    P_DRIVE_INIT_FUNCTION pInit;
                             2283 ; 108  |    WORD wGetInfoCodeBank;
                             2284 ; 109  |    P_DRIVE_GET_INFO_FUNCTION pGetInfo;
                             2285 ; 110  |    WORD wSetInfoCodeBank;
                             2286 ; 111  |    P_DRIVE_SET_INFO_FUNCTION pSetInfo;
                             2287 ; 112  |    WORD wReadSectorCodeBank;
                             2288 ; 113  |    P_DRIVE_READ_SECTOR_FUNCTION pReadSector;
                             2289 ; 114  |    WORD wWriteSectorCodeBank;
                             2290 ; 115  |    P_DRIVE_WRITE_SECTOR_FUNCTION pWriteSector;
                             2291 ; 116  |    WORD wMultiWriteSetupCodeBank;
                             2292 ; 117  |    P_DRIVE_MULTI_WRITE_SETUP_FUNCTION pMultiWriteSetup;
                             2293 ; 118  |    WORD wMultiWriteSectorCodeBank;
                             2294 ; 119  |    P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION pMultiWriteSector;
                             2295 ; 120  |    WORD wEraseCodeBank;
                             2296 ; 121  |    P_DRIVE_ERASE_FUNCTION pErase;
                             2297 ; 122  |    WORD wFlushCodeBank;
                             2298 ; 123  |    P_DRIVE_FLUSH_FUNCTION pFlush;
                             2299 ; 124  |} LOGICAL_DRIVE_API, * P_LOGICAL_DRIVE_API;
                             2300 
                             2323 
                             2324 ; 125  |
                             2325 ; 126  |typedef struct {
                             2326 ; 127  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             2327 ; 128  |    P_LOGICAL_DRIVE_API pApi;
                             2328 ; 129  |} LOGICAL_DRIVE, * P_LOGICAL_DRIVE;
                             2329 
                             2331 
                             2332 ; 130  |
                             2333 ; 131  |///////////////////////////////////////////////////////////////////////////////
                             2334 ; 132  |// Global variables
                             2335 ; 133  |///////////////////////////////////////////////////////////////////////////////
                             2336 ; 134  |extern MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[];
                             2337 
                             2339 
                             2340 ; 135  |extern LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[];
                             2341 
                             2346 
                             2347 ; 136  |extern LOGICAL_MEDIA g_Media[];
                             2348 ; 137  |extern WORD g_wNumMedia;
                             2349 
                             2351 
                             2352 ; 138  |extern LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[];
                             2353 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2358 
                             2359 ; 139  |extern LOGICAL_DRIVE g_Drive[];
                             2360 ; 140  |extern WORD g_wNumDrives;
                             2361 ; 141  |
                             2362 ; 142  |///////////////////////////////////////////////////////////////////////////////
                             2363 ; 143  |// SysCallFunction Variants
                             2364 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             2365 ; 145  |RETCODE _asmfunc SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR_f(WORD * RESOURCE,RETCODE _ree
                                  ntrant (int,int,int*),  int, int, int *);
                             2366 ; 146  |#define SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR(rsrc,func,a,b,p) SysCallFunction_P_LOGI
                                  CAL_MEDIA_DESCRIPTOR_f((void*)rsrc,(func),(a),(b),(p))
                             2367 ; 147  |
                             2368 ; 148  |#endif
                             2369 
                             2371 
                             2372 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             2373 ; 16   |// Definitions
                             2374 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             2375 ; 18   |
                             2376 ; 19   |#define MAX_RAM_MEDIA_TABLE_ENTRIES         5
                             2377 ; 20   |
                             2378 ; 21   |#define RAM_SECTOR_SIZE_IN_WORDS            170
                             2379 ; 22   |
                             2380 ; 23   |#define RAM_DATA_DRIVE_0        0
                             2381 ; 24   |#define RAM_SYSTEM_DRIVE_0      1
                             2382 ; 25   |#define RAM_SYSTEM_DRIVE_1      2
                             2383 ; 26   |#define RAM_SYSTEM_DRIVE_2      3
                             2384 ; 27   |#define RAM_SYSTEM_DRIVE_3      4
                             2385 ; 28   |#define RAM_SYSTEM_DRIVE_4      5
                             2386 ; 29   |
                             2387 ; 30   |///////////////////////////////////////////////////////////////////////////////
                             2388 ; 31   |// Error codes
                             2389 ; 32   |///////////////////////////////////////////////////////////////////////////////
                             2390 ; 33   |
                             2391 ; 34   |///////////////////////////////////////////////////////////////////////////////
                             2392 ; 35   |// Typedefs
                             2393 ; 36   |///////////////////////////////////////////////////////////////////////////////
                             2394 ; 37   |
                             2395 ; 38   |typedef struct {
                             2396 ; 39   |    P_SECTOR_BUFFER pSector[32];
                             2397 ; 40   |} RAW_MEDIA, * P_RAW_MEDIA;
                             2398 ; 41   |
                             2399 ; 42   |typedef struct {
                             2400 ; 43   |    // This struct is currently not used.
                             2401 ; 44   |    DWORD dwSizeInBytes;
                             2402 ; 45   |} RAM_MEDIA_INFO, * P_RAM_MEDIA_INFO;
                             2403 
                             2409 
                             2410 ; 46   |
                             2411 ; 47   |typedef struct {
                             2412 ; 48   |    void * pStartAddress;
                             2413 ; 49   |    P_RAM_MEDIA_INFO pRAMMediaInfo;
                             2414 ; 50   |} RAM_DRIVE_INFO, * P_RAM_DRIVE_INFO;
                             2415 ; 51   |
                             2416 ; 52   |typedef struct {
                             2417 ; 53   |    LOGICAL_DRIVE_TYPE Type;
                             2418 ; 54   |    WORD wTag;
                             2419 ; 55   |    WORD wNumberOfSectors;
                             2420 ; 56   |    WORD wRamDriveType;
                             2421 ; 57   |    void * pMemoryAddress;
                             2422 ; 58   |} RAM_MEDIA_ALLOCATION_TABLE_ENTRY, * P_RAM_MEDIA_ALLOCATION_TABLE_ENTRY;
                             2423 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2431 
                             2432 ; 59   |
                             2433 ; 60   |typedef struct {
                             2434 ; 61   |    WORD wNumEntries;
                             2435 ; 62   |    RAM_MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_RAM_MEDIA_TABLE_ENTRIES];
                             2436 ; 63   |} RAM_MEDIA_ALLOCATION_TABLE, * P_RAM_MEDIA_ALLOCATION_TABLE;
                             2437 ; 64   |
                             2438 ; 65   |///////////////////////////////////////////////////////////////////////////////
                             2439 ; 66   |// Prototypes
                             2440 ; 67   |///////////////////////////////////////////////////////////////////////////////
                             2441 ; 68   |RETCODE _reentrant RAMMediaInit(P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor);
                             2442 ; 69   |RETCODE _reentrant RAMMediaDiscoverAllocation(P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor);
                             2443 ; 70   |RETCODE _reentrant RAMMediaAllocate(P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor,
                             2444 ; 71   |    P_MEDIA_ALLOCATION_TABLE pTable);
                             2445 ; 72   |RETCODE _reentrant RAMMediaGetMediaTable(P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor,
                             2446 ; 73   |    P_MEDIA_ALLOCATION_TABLE pTable);
                             2447 ; 74   |RETCODE _reentrant RAMMediaGetInfo(P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor,
                             2448 ; 75   |    LOGICAL_MEDIA_INFO Type, void * Info);
                             2449 ; 76   |RETCODE _reentrant RAMMediaErase(P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor,
                             2450 ; 77   |    WORD wMagicNumber);
                             2451 ; 78   |RETCODE _reentrant RAMDataDriveInit(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
                             2452 ; 79   |RETCODE _reentrant RAMDataDriveGetInfo(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2453 ; 80   |    LOGICAL_DRIVE_INFO Type, void * Info);
                             2454 ; 81   |RETCODE _reentrant RAMDataDriveSetInfo(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2455 ; 82   |    LOGICAL_DRIVE_INFO Type, void * Info);
                             2456 ; 83   |RETCODE _reentrant RAMDataDriveReadSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2457 ; 84   |    DWORD dwSectorNumber, P_SECTOR_BUFFER pSectorData);
                             2458 ; 85   |RETCODE _reentrant RAMDataDriveWriteSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2459 ; 86   |    DWORD dwSectorNumber, P_SECTOR_BUFFER pSectorData);
                             2460 ; 87   |RETCODE _reentrant RAMDataDriveMultiWriteSetup(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2461 ; 88   |    DWORD dwStartSectorNumber, WORD wSectorCount, void * pCallBackFunction);
                             2462 ; 89   |RETCODE _reentrant RAMDataDriveMultiWriteSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2463 ; 90   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             2464 ; 91   |RETCODE _reentrant RAMDataDriveErase(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2465 ; 92   |    WORD wMagicNumber);
                             2466 ; 93   |RETCODE _reentrant RAMDataDriveFlush(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
                             2467 ; 94   |
                             2468 ; 95   |RETCODE _reentrant RAMSystemDriveInit(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
                             2469 ; 96   |RETCODE _reentrant RAMSystemDriveGetInfo(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2470 ; 97   |    LOGICAL_DRIVE_INFO Type, void * Info);
                             2471 ; 98   |RETCODE _reentrant RAMSystemDriveSetInfo(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2472 ; 99   |    LOGICAL_DRIVE_INFO Type, void * Info);
                             2473 ; 100  |RETCODE _reentrant RAMSystemDriveReadSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2474 ; 101  |    DWORD dwSectorNumber, P_SECTOR_BUFFER pSectorData);
                             2475 ; 102  |RETCODE _reentrant RAMSystemDriveWriteSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2476 ; 103  |    DWORD dwSectorNumber, P_SECTOR_BUFFER pSectorData);
                             2477 ; 104  |RETCODE _reentrant RAMSystemDriveMultiWriteSetup(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2478 ; 105  |    DWORD dwStartSectorNumber, WORD wSectorCount, void * pCallBackFunction);
                             2479 ; 106  |RETCODE _reentrant RAMSystemDriveMultiWriteSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2480 ; 107  |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             2481 ; 108  |RETCODE _reentrant RAMSystemDriveErase(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             2482 ; 109  |    WORD wMagicNumber);
                             2483 ; 110  |RETCODE _reentrant RAMSystemDriveFlush(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
                             2484 
                             2486 
                             2487 ; 111  |
                             2488 ; 112  |
                             2489 ; 113  |///////////////////////////////////////////////////////////////////////////////
                             2490 ; 114  |// Global variables
                             2491 ; 115  |///////////////////////////////////////////////////////////////////////////////
                             2492 ; 116  |extern LOGICAL_MEDIA_API RAMMediaApi;
                             2493 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2495 
                             2496 ; 117  |extern RAM_MEDIA_INFO g_RAMMediaInfo[];
                             2497 
                             2499 
                             2500 ; 118  |
                             2501 ; 119  |extern LOGICAL_DRIVE_API RAMDataDriveApi;
                             2502 ; 120  |extern LOGICAL_DRIVE_API RAMSystemDriveApi;
                             2503 
                             2508 
                             2509 ; 121  |extern RAM_DRIVE_INFO g_RAMDriveInfo[];
                             2510 
                             2516 
                             2517 ; 122  |
                             2518 ; 123  |extern RAM_MEDIA_ALLOCATION_TABLE g_RAMMediaAllocation[];
                             2519 ; 124  |extern WORD g_wNumRAMMedia;
                             2520 ; 125  |
                             2521 ; 126  |#endif // #ifndef _RAM_DDI_H
                             2522 
                             2524 
                             2525 ; 16   |#include "RAMHal.h"
                             2526 
                             2528 
                             2529 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2530 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             2531 ; 3    |//
                             2532 ; 4    |// Filename: hal_ram.h
                             2533 ; 5    |// Description: 
                             2534 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2535 ; 7    |
                             2536 ; 8    |#ifndef _HAL_RAM_H
                             2537 ; 9    |#define _HAL_RAM_H
                             2538 ; 10   |
                             2539 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2540 ; 12   |// Includes
                             2541 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2542 ; 14   |
                             2543 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             2544 ; 16   |// Definitions
                             2545 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             2546 ; 18   |#define RAM_SECTOR_BUFFER_MEM_X _X
                             2547 ; 19   |#define RAM_SECTOR_BUFFER_MEM_Y _Y
                             2548 ; 20   |#define RAM_SECTOR_BUFFER_MEM RAM_SECTOR_BUFFER_MEM_Y
                             2549 ; 21   |typedef WORD RAM_SECTOR_BUFFER_MEM RAM_SECTOR_BUFFER;
                             2550 
                             2552 
                             2553 ; 22   |typedef RAM_SECTOR_BUFFER * P_RAM_SECTOR_BUFFER;
                             2554 
                             2558 
                             2559 ; 23   |
                             2560 ; 24   |///////////////////////////////////////////////////////////////////////////////
                             2561 ; 25   |// Error codes
                             2562 ; 26   |///////////////////////////////////////////////////////////////////////////////
                             2563 ; 27   |
                             2564 ; 28   |///////////////////////////////////////////////////////////////////////////////
                             2565 ; 29   |// Typedefs
                             2566 ; 30   |///////////////////////////////////////////////////////////////////////////////
                             2567 ; 31   |
                             2568 ; 32   |///////////////////////////////////////////////////////////////////////////////
                             2569 ; 33   |// Prototypes
                             2570 ; 34   |///////////////////////////////////////////////////////////////////////////////
                             2571 ; 35   |RETCODE RamReadRawSector(
                             2572 ; 36   |    P_RAM_DRIVE_INFO pRamDriveInfo,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2573 ; 37   |    DWORD dwSectorNumber,
                             2574 ; 38   |    P_SECTOR_BUFFER pSectorData);
                             2575 ; 39   |RETCODE RamWriteRawSector(
                             2576 ; 40   |    P_RAM_DRIVE_INFO pRamDriveInfo,
                             2577 ; 41   |    DWORD dwSectorNumber,
                             2578 ; 42   |    P_SECTOR_BUFFER pSectorData);
                             2579 ; 43   |
                             2580 ; 44   |///////////////////////////////////////////////////////////////////////////////
                             2581 ; 45   |// Global variables
                             2582 ; 46   |///////////////////////////////////////////////////////////////////////////////
                             2583 ; 47   |
                             2584 ; 48   |#endif // #ifndef _HAL_RAM_H
                             2585 
                             2587 
                             2588 ; 17   |#include "NANDddi.h"
                             2589 
                             2591 
                             2592 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2593 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             2594 ; 3    |//
                             2595 ; 4    |// Filename: NANDDdi.h
                             2596 ; 5    |// Description: 
                             2597 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2598 ; 7    |
                             2599 ; 8    |#ifndef _NANDDDI_H
                             2600 ; 9    |#define _NANDDDI_H
                             2601 ; 10   |
                             2602 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2603 ; 12   |// Includes
                             2604 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2605 ; 14   |
                             2606 ; 15   |#include "ddildl_internal.h"
                             2607 
                             2609 
                             2610 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2611 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             2612 ; 3    |//
                             2613 ; 4    |// Filename: ddildl_internal.h
                             2614 ; 5    |// Description: 
                             2615 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2616 ; 7    |#ifndef _DDILDL_INTERNAL_H
                             2617 ; 8    |#define _DDILDL_INTERNAL_H
                             2618 ; 9    |
                             2619 ; 10   |#include "ddildl.h"
                             2620 ; 11   |
                             2621 ; 12   |///////////////////////////////////////
                             2622 ; 13   |// Logical Media structures
                             2623 ; 14   |///////////////////////////////////////
                             2624 ; 15   |
                             2625 ; 16   |typedef struct {
                             2626 ; 17   |    // Discovered at Run Time by MediaInit:
                             2627 ; 18   |    WORD    wMediaNumber;
                             2628 ; 19   |    BOOL    bInitialized;
                             2629 ; 20   |    MEDIA_STATE eState;
                             2630 ; 21   |    BOOL    bAllocated;
                             2631 ; 22   |    BOOL    bWriteProtected;
                             2632 ; 23   |    WORD    wNumberOfDrives;//on this media
                             2633 ; 24   |    DWORD   dwSizeInBytes;
                             2634 ; 25   |    WORD    wAllocationUnitSizeInBytes;
                             2635 ; 26   |    PHYSICAL_MEDIA_TYPE PhysicalType;
                             2636 ; 27   |    void * pMediaInfo;  // same as in LOGICAL_DRIVE_DESCRIPTOR
                             2637 ; 28   |} LOGICAL_MEDIA_DESCRIPTOR, * P_LOGICAL_MEDIA_DESCRIPTOR;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2638 ; 29   |
                             2639 ; 30   |// Logical Media API functions
                             2640 ; 31   |typedef _reentrant RETCODE (*P_MEDIA_INIT_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR);
                             2641 ; 32   |typedef RETCODE _reentrant (*P_MEDIA_ALLOCATE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             2642 ; 33   |    P_MEDIA_ALLOCATION_TABLE);
                             2643 ; 34   |typedef RETCODE _reentrant (*P_MEDIA_DISCOVER_ALLOCATION_FUNCTION)(P_LOGICAL_MEDIA_DESCRIP
                                  TOR);
                             2644 ; 35   |typedef RETCODE _reentrant (*P_MEDIA_GET_MEDIA_TABLE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                                  
                             2645 ; 36   |    P_MEDIA_ALLOCATION_TABLE);
                             2646 ; 37   |typedef RETCODE _reentrant (*P_MEDIA_GET_INFO_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             2647 ; 38   |    LOGICAL_MEDIA_INFO, void * _Y);
                             2648 ; 39   |typedef RETCODE _reentrant (*P_MEDIA_ERASE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             2649 ; 40   |    WORD wMagicNumber);
                             2650 ; 41   |
                             2651 ; 42   |typedef struct {
                             2652 ; 43   |    WORD wInitCodeBank;
                             2653 ; 44   |    P_MEDIA_INIT_FUNCTION pInit;
                             2654 ; 45   |    WORD wAllocateCodeBank;
                             2655 ; 46   |    P_MEDIA_ALLOCATE_FUNCTION pAllocate;
                             2656 ; 47   |    WORD wDiscoverAllocationCodeBank;
                             2657 ; 48   |    P_MEDIA_DISCOVER_ALLOCATION_FUNCTION pDiscoverAllocation;
                             2658 ; 49   |    WORD wGetMediaTableCodeBank;
                             2659 ; 50   |    P_MEDIA_GET_MEDIA_TABLE_FUNCTION pGetMediatable;
                             2660 ; 51   |    WORD wGetInfoCodeBank;
                             2661 ; 52   |    P_MEDIA_GET_INFO_FUNCTION pGetInfo;
                             2662 ; 53   |    WORD wEraseCodeBank;
                             2663 ; 54   |    P_MEDIA_ERASE_FUNCTION pErase;
                             2664 ; 55   |} LOGICAL_MEDIA_API, * P_LOGICAL_MEDIA_API;
                             2665 ; 56   |
                             2666 ; 57   |typedef struct {
                             2667 ; 58   |    P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor;
                             2668 ; 59   |    P_LOGICAL_MEDIA_API pApi;
                             2669 ; 60   |} LOGICAL_MEDIA, * P_LOGICAL_MEDIA;
                             2670 ; 61   |
                             2671 ; 62   |///////////////////////////////////////
                             2672 ; 63   |// Logical Drive structures
                             2673 ; 64   |///////////////////////////////////////
                             2674 ; 65   |
                             2675 ; 66   |typedef struct {
                             2676 ; 67   |    // Discovered at Run Time by MediaDiscover
                             2677 ; 68   |    BOOL    bInitialized;
                             2678 ; 69   |    BOOL    bPresent;       // Indicates if a system drive is present
                             2679 ; 70   |                            // wTag from Config Block matches wTag from Drive
                             2680 ; 71   |                            // redundant area
                             2681 ; 72   |    BOOL    bErased;
                             2682 ; 73   |    BOOL    bWriteProtected;
                             2683 ; 74   |    DWORD   dwNumberOfSectors;
                             2684 ; 75   |    LOGICAL_DRIVE_TYPE Type;
                             2685 ; 76   |    WORD    wTag;
                             2686 ; 77   |    WORD    wDriveNumber;
                             2687 ; 78   |    DWORD   dwSizeInBytes;
                             2688 ; 79   |    WORD    wSectorSizeInBytes; // not included bad blocks (NAND media)
                             2689 ; 80   |    WORD    wEraseSizeInBytes;
                             2690 ; 81   |    SYSTEM_VERSION ProjectVersion;
                             2691 ; 82   |    SYSTEM_VERSION ComponentVersion;
                             2692 ; 83   |    P_LOGICAL_MEDIA_DESCRIPTOR pLogicalMediaDescriptor;
                             2693 ; 84   |    void * pMediaInfo;  // same as in LOGICAL_MEDIA_DESCRIPTOR
                             2694 ; 85   |    void * pDriveInfo;
                             2695 ; 86   |} LOGICAL_DRIVE_DESCRIPTOR, * P_LOGICAL_DRIVE_DESCRIPTOR;
                             2696 ; 87   |
                             2697 ; 88   |// Logical Drive API functions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2698 ; 89   |typedef RETCODE _reentrant (*P_DRIVE_INIT_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             2699 ; 90   |typedef RETCODE _reentrant (*P_DRIVE_GET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2700 ; 91   |    LOGICAL_DRIVE_INFO, void *);
                             2701 ; 92   |typedef RETCODE _reentrant (*P_DRIVE_SET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2702 ; 93   |    LOGICAL_DRIVE_INFO, void *);
                             2703 ; 94   |typedef RETCODE _reentrant (*P_DRIVE_READ_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2704 ; 95   |    DWORD, P_SECTOR_BUFFER);
                             2705 ; 96   |typedef RETCODE _reentrant (*P_DRIVE_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             2706 ; 97   |    DWORD, P_SECTOR_BUFFER);
                             2707 ; 98   |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SETUP_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTO
                                  R,
                             2708 ; 99   |    DWORD, WORD, MULTI_WRITE_CALLBACK_FUNCTION);
                             2709 ; 100  |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPT
                                  OR,
                             2710 ; 101  |    P_SECTOR_BUFFER, LONG);
                             2711 ; 102  |typedef RETCODE _reentrant (*P_DRIVE_ERASE_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR, WORD);
                             2712 ; 103  |typedef RETCODE _reentrant (*P_DRIVE_FLUSH_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             2713 ; 104  |
                             2714 ; 105  |typedef struct {
                             2715 ; 106  |    WORD wInitCodeBank;
                             2716 ; 107  |    P_DRIVE_INIT_FUNCTION pInit;
                             2717 ; 108  |    WORD wGetInfoCodeBank;
                             2718 ; 109  |    P_DRIVE_GET_INFO_FUNCTION pGetInfo;
                             2719 ; 110  |    WORD wSetInfoCodeBank;
                             2720 ; 111  |    P_DRIVE_SET_INFO_FUNCTION pSetInfo;
                             2721 ; 112  |    WORD wReadSectorCodeBank;
                             2722 ; 113  |    P_DRIVE_READ_SECTOR_FUNCTION pReadSector;
                             2723 ; 114  |    WORD wWriteSectorCodeBank;
                             2724 ; 115  |    P_DRIVE_WRITE_SECTOR_FUNCTION pWriteSector;
                             2725 ; 116  |    WORD wMultiWriteSetupCodeBank;
                             2726 ; 117  |    P_DRIVE_MULTI_WRITE_SETUP_FUNCTION pMultiWriteSetup;
                             2727 ; 118  |    WORD wMultiWriteSectorCodeBank;
                             2728 ; 119  |    P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION pMultiWriteSector;
                             2729 ; 120  |    WORD wEraseCodeBank;
                             2730 ; 121  |    P_DRIVE_ERASE_FUNCTION pErase;
                             2731 ; 122  |    WORD wFlushCodeBank;
                             2732 ; 123  |    P_DRIVE_FLUSH_FUNCTION pFlush;
                             2733 ; 124  |} LOGICAL_DRIVE_API, * P_LOGICAL_DRIVE_API;
                             2734 ; 125  |
                             2735 ; 126  |typedef struct {
                             2736 ; 127  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             2737 ; 128  |    P_LOGICAL_DRIVE_API pApi;
                             2738 ; 129  |} LOGICAL_DRIVE, * P_LOGICAL_DRIVE;
                             2739 ; 130  |
                             2740 ; 131  |///////////////////////////////////////////////////////////////////////////////
                             2741 ; 132  |// Global variables
                             2742 ; 133  |///////////////////////////////////////////////////////////////////////////////
                             2743 ; 134  |extern MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[];
                             2744 ; 135  |extern LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[];
                             2745 ; 136  |extern LOGICAL_MEDIA g_Media[];
                             2746 ; 137  |extern WORD g_wNumMedia;
                             2747 ; 138  |extern LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[];
                             2748 ; 139  |extern LOGICAL_DRIVE g_Drive[];
                             2749 ; 140  |extern WORD g_wNumDrives;
                             2750 ; 141  |
                             2751 ; 142  |///////////////////////////////////////////////////////////////////////////////
                             2752 ; 143  |// SysCallFunction Variants
                             2753 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             2754 ; 145  |RETCODE _asmfunc SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR_f(WORD * RESOURCE,RETCODE _ree
                                  ntrant (int,int,int*),  int, int, int *);
                             2755 ; 146  |#define SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR(rsrc,func,a,b,p) SysCallFunction_P_LOGI
                                  CAL_MEDIA_DESCRIPTOR_f((void*)rsrc,(func),(a),(b),(p))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2756 ; 147  |
                             2757 ; 148  |#endif
                             2758 
                             2760 
                             2761 ; 16   |#include "nandhal.h"
                             2762 
                             2764 
                             2765 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2766 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             2767 ; 3    |//
                             2768 ; 4    |// Filename:     NANDHal.h
                             2769 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal routines.
                             2770 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2771 ; 7    |
                             2772 ; 8    |#ifndef _NANDHAL_H
                             2773 ; 9    |#define _NANDHAL_H
                             2774 ; 10   |
                             2775 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2776 ; 12   |// Includes
                             2777 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2778 ; 14   |
                             2779 ; 15   |#include "errors.h"
                             2780 
                             2782 
                             2783 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             2784 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             2785 ; 3    |////
                             2786 ; 4    |//// Filename: errors.inc
                             2787 ; 5    |//// Description: 
                             2788 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             2789 ; 7    |
                             2790 ; 8    |#if (!defined(ERRORS_INC))
                             2791 ; 9    |#define ERRORS_INC 1
                             2792 ; 10   |
                             2793 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             2794 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             2795 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             2796 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             2797 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             2798 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             2799 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             2800 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             2801 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             2802 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             2803 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             2804 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             2805 ; 23   |// block in the device. The block was marked bad and tables updated.
                             2806 ; 24   |// The application must start over.
                             2807 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             2808 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             2809 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             2810 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             2811 ; 29   |
                             2812 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             2813 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             2814 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             2815 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             2816 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             2817 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             2818 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             2819 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             2820 ; 38   |//Specific to NAND
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2821 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             2822 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             2823 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             2824 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             2825 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             2826 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             2827 ; 45   |
                             2828 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             2829 ; 47   |
                             2830 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             2831 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             2832 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             2833 ; 51   |
                             2834 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             2835 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             2836 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             2837 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             2838 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             2839 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             2840 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             2841 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             2842 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             2843 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             2844 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             2845 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             2846 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             2847 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             2848 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             2849 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             2850 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             2851 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             2852 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             2853 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             2854 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             2855 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             2856 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             2857 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             2858 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             2859 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             2860 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             2861 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             2862 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             2863 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             2864 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             2865 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             2866 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             2867 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             2868 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             2869 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             2870 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             2871 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             2872 ; 90   |
                             2873 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             2874 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             2875 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             2876 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             2877 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             2878 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             2879 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             2880 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             2881 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             2882 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2883 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             2884 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             2885 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             2886 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             2887 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             2888 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             2889 ; 107  |
                             2890 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             2891 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             2892 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             2893 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             2894 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             2895 ; 113  |
                             2896 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             2897 ; 115  |// match the previously initialized Nand chip type.
                             2898 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             2899 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             2900 ; 118  |// Errors from calling HIL functions
                             2901 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             2902 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             2903 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             2904 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             2905 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             2906 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             2907 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             2908 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             2909 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             2910 ; 128  |// for 3410 build
                             2911 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             2912 ; 130  |// for 3410 build
                             2913 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             2914 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             2915 ; 133  |
                             2916 ; 134  |// indicates that the GetStatus returned a FAIL
                             2917 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             2918 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             2919 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             2920 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             2921 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             2922 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             2923 ; 141  |// indicates the NAND was already BUSY
                             2924 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             2925 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             2926 ; 144  |// ECC Error Codes
                             2927 ; 145  |// ECC Computation has successfully completed
                             2928 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             2929 ; 147  |// ECC computation still busy
                             2930 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             2931 ; 149  |// timed out while waiting on object
                             2932 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             2933 ; 151  |// flag already set for SDK2.4 lock
                             2934 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             2935 ; 153  |
                             2936 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             2937 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             2938 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             2939 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             2940 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             2941 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             2942 ; 160  |
                             2943 ; 161  |// MMC Errors
                             2944 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2945 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             2946 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             2947 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             2948 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             2949 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             2950 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             2951 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             2952 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             2953 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             2954 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             2955 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             2956 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             2957 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             2958 ; 176  |
                             2959 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             2960 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             2961 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             2962 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             2963 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             2964 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             2965 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             2966 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             2967 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             2968 ; 186  |
                             2969 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             2970 ; 188  |//// MMC HAL Error codes
                             2971 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             2972 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             2973 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             2974 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             2975 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             2976 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             2977 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             2978 ; 196  |
                             2979 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             2980 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             2981 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             2982 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             2983 ; 201  |
                             2984 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             2985 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             2986 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             2987 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             2988 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             2989 ; 207  |
                             2990 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             2991 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             2992 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             2993 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             2994 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             2995 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             2996 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             2997 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             2998 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             2999 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             3000 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             3001 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             3002 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             3003 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             3004 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             3005 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             3006 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3007 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             3008 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             3009 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             3010 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             3011 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             3012 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             3013 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             3014 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             3015 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             3016 ; 234  |
                             3017 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             3018 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             3019 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             3020 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             3021 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             3022 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             3023 ; 241  |
                             3024 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             3025 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             3026 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             3027 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             3028 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             3029 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             3030 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             3031 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             3032 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             3033 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             3034 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             3035 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             3036 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             3037 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             3038 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             3039 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             3040 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             3041 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             3042 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             3043 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             3044 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             3045 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             3046 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             3047 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             3048 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             3049 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             3050 ; 268  |
                             3051 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             3052 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             3053 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             3054 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             3055 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             3056 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             3057 ; 275  |
                             3058 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             3059 ; 277  |//MATH errors...
                             3060 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             3061 ; 279  |
                             3062 ; 280  |//Memory Pointer errors...
                             3063 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             3064 ; 282  |//****************************************************************/
                             3065 ; 283  |#if (!defined(NOERROR))
                             3066 ; 284  |#define NOERROR 0
                             3067 ; 285  |#endif
                             3068 ; 286  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3069 ; 287  |////Added by RAKS
                             3070 ; 288  |
                             3071 ; 289  |#define ERRProgram 0x911111
                             3072 ; 290  |#define ERRNoMedia 0x922222
                             3073 ; 291  |#define ERRHwFail 0x933333   
                             3074 ; 292  |#define ERRInvMedia 0x944444
                             3075 ; 293  |#define ERRBlkFail 0x955555
                             3076 ; 294  |#define ERRInvDataStatus 0x966666
                             3077 ; 295  |#define ERRWriteFail 0x977777
                             3078 ; 296  |#define ERRECCCorr 0x988888
                             3079 ; 297  |#define ERRECCFail 0x999999
                             3080 ; 298  |#define ERRZoneFull 0x9aaaaa
                             3081 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             3082 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             3083 ; 301  |//invalid partition table signature. 
                             3084 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             3085 ; 303  |//boot ID bad
                             3086 ; 304  |#define ERRBootID 0x9BBBBB   
                             3087 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             3088 ; 306  |////Nothing was here : RAKS
                             3089 ; 307  |//JUMP instruction bad
                             3090 ; 308  |#define ERRBootJump 0x9DDDDD  
                             3091 ; 309  |//ID Byte bad
                             3092 ; 310  |#define ERRIDByte 0x9EEEEE  
                             3093 ; 311  |
                             3094 ; 312  |
                             3095 ; 313  |//****************************************************************
                             3096 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             3097 ; 315  |//****************************************************************
                             3098 ; 316  |// Master ERROR File
                             3099 ; 317  |//****************************************************************/
                             3100 ; 318  |// FAT File System Error Codes
                             3101 ; 319  |// corrupt FAT
                             3102 ; 320  |#define FATCorrupt -1        
                             3103 ; 321  |// invalid FAT sector
                             3104 ; 322  |#define DIRInvlaidSector -2        
                             3105 ; 323  |
                             3106 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             3107 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             3108 ; 326  |#define FATwarningReservedCx 0x0A1111
                             3109 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             3110 ; 328  |//FATcxsFree==0 
                             3111 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             3112 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             3113 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             3114 ; 332  |
                             3115 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             3116 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             3117 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             3118 ; 336  |
                             3119 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             3120 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             3121 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             3122 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             3123 ; 341  |//No Free Cxs on FAT Scan!
                             3124 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             3125 ; 343  |
                             3126 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             3127 ; 345  |
                             3128 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             3129 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             3130 ; 348  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3131 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             3132 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             3133 ; 351  |
                             3134 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             3135 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             3136 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             3137 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             3138 ; 356  |
                             3139 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             3140 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             3141 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             3142 ; 360  |
                             3143 ; 361  |#define SEEKprefix 0x85
                             3144 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             3145 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             3146 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             3147 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             3148 ; 366  |
                             3149 ; 367  |#define READprefix 0x86
                             3150 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             3151 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             3152 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             3153 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             3154 ; 372  |#define READerrorFreeCx 0x860000
                             3155 ; 373  |#define READerrorEndOfChain 0x861111
                             3156 ; 374  |#define READerrorReservedCx 0x862222
                             3157 ; 375  |#define READerrorBadCx 0x863333
                             3158 ; 376  |
                             3159 ; 377  |#define WRITEprefix 0x87
                             3160 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             3161 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             3162 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             3163 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             3164 ; 382  |#define WRITEerrorFreeCx 0x870000
                             3165 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             3166 ; 384  |#define WRITEerrorReservedCx 0x872222
                             3167 ; 385  |#define WRITEerrorBadCx 0x873333
                             3168 ; 386  |
                             3169 ; 387  |#define UTILprefix 0x88
                             3170 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             3171 ; 389  |
                             3172 ; 390  |// Directory Error Codes
                             3173 ; 391  |
                             3174 ; 392  |// invalid DIR sector specified
                             3175 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             3176 ; 394  |// PATH search string has invlaid directory
                             3177 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             3178 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             3179 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             3180 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             3181 ; 399  |// Bad cluster number
                             3182 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             3183 ; 401  |// Can't open ROOT
                             3184 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             3185 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             3186 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             3187 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             3188 ; 406  |// bad record number to read
                             3189 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             3190 ; 408  |// record requeste not in range
                             3191 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             3192 ; 410  |// record requeste past end of ROOT
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3193 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             3194 ; 412  |// device number invalid
                             3195 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             3196 ; 414  |// FCB Does not popint to a sub-Directory entry
                             3197 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             3198 ; 416  |// Path specified is invalid
                             3199 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             3200 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             3201 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             3202 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             3203 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             3204 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             3205 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             3206 ; 424  |
                             3207 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             3208 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             3209 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             3210 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             3211 ; 429  |// String Manipulation Error Codes
                             3212 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             3213 ; 431  |
                             3214 ; 432  |#endif //@DEF(ERRORS_INC)
                             3215 ; 433  |
                             3216 
                             3218 
                             3219 ; 16   |#include "sectordef.h"
                             3220 
                             3222 
                             3223 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3224 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             3225 ; 3    |//
                             3226 ; 4    |// Filename:     sectordef.h
                             3227 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal & other 
                             3228 ; 6    |//               routines.
                             3229 ; 7    |////////////////////////////////////////////////////////////////////////////////
                             3230 ; 8    |
                             3231 ; 9    |#ifndef _SECTORDEF_H
                             3232 ; 10   |#define _SECTORDEF_H
                             3233 ; 11   |
                             3234 ; 12   |    #define RAM_SECTOR_TOTAL_SIZE                 (528)
                             3235 ; 13   |    #define RAM_SECTOR_DATA_SIZE                  (512)
                             3236 ; 14   |    #define RAM_SECTOR_REDUNDANT_SIZE             (16)
                             3237 ; 15   |
                             3238 ; 16   |
                             3239 ; 17   |    #define MMC_SECTOR_TOTAL_SIZE                 (528)
                             3240 ; 18   |    #define MMC_SECTOR_DATA_SIZE                  (512)
                             3241 ; 19   |    #define MMC_SECTOR_REDUNDANT_SIZE             (16)
                             3242 ; 20   |
                             3243 ; 21   |
                             3244 ; 22   |    #define SSFDC_SECTOR_TOTAL_SIZE                 (528)
                             3245 ; 23   |    #define SSFDC_SECTOR_DATA_SIZE                  (512)
                             3246 ; 24   |    #define SSFDC_SECTOR_REDUNDANT_SIZE             (16)
                             3247 ; 25   |
                             3248 ; 26   | // Define large sector macros as small ones so sdk3.x fits in ram and mtp with small 
                             3249 ; 27   | // sector flash gets the performance boosts from optimized nand timings, etc. 
                             3250 ; 28   | // TOVERIFY: Comment out the next macro def when you want large sector support as 
                             3251 ; 29   | // in sdk2.6 and you can find the free data RAM. Or uncomment if you want to save data ra
                                  m
                             3252 ; 30   | // and only support 512 byte sectors and their associated flash types. 
                             3253 ; 31   |//#define LARGE_SECTOR_DEFS_AS_SMALL_SECTOR
                             3254 ; 32   |#ifdef LARGE_SECTOR_DEFS_AS_SMALL_SECTOR 
                             3255 ; 33   |    #define LARGE_SECTOR_TOTAL_SIZE                 (528)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3256 ; 34   |    #define LARGE_SECTOR_DATA_SIZE                  (512)
                             3257 ; 35   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (16)
                             3258 ; 36   |#else
                             3259 ; 37   |    // Real large sector defines to use when large sector flash support is desired.
                             3260 ; 38   |    #define LARGE_SECTOR_TOTAL_SIZE                 (2112)
                             3261 ; 39   |    #define LARGE_SECTOR_DATA_SIZE                  (2048)
                             3262 ; 40   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (64)
                             3263 ; 41   |#endif
                             3264 ; 42   |    
                             3265 ; 43   |    // round up to the nearest WORD, then add one to pad for the ECC DMA bug
                             3266 ; 44   |    #define SECTOR_BUFFER_ALLOC_SIZE(a)             (((a+2)/3)+1)
                             3267 ; 45   |
                             3268 ; 46   |
                             3269 ; 47   |    // These are moved here from chkdsk.h     TOVERIFY. 
                             3270 ; 48   |    #define SEC_512_BYTES_PER_SECTOR                        SSFDC_SECTOR_DATA_SIZE
                             3271 ; 49   |        #define SEC_512_BYTES_TOTAL_SIZE                                                SS
                                  FDC_SECTOR_TOTAL_SIZE
                             3272 ; 50   |        #define SEC_512_WORDS_TOTAL_SIZE                                                17
                                  6
                             3273 ; 51   |    #define SEC_512_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT    12
                             3274 ; 52   |    #define SEC_512_BYTES_DIR_REC_PER_SECTOR                16
                             3275 ; 53   |    #define SEC_512_BYTES_WORDS_PER_SECTOR                  177
                             3276 ; 54   |    #define SEC_2K_BYTES_PER_SECTOR                         LARGE_SECTOR_DATA_SIZE
                             3277 ; 55   |        #define SEC_2K_BYTES_TOTAL_SIZE                                                 LA
                                  RGE_SECTOR_TOTAL_SIZE
                             3278 ; 56   |    #define SEC_2K_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT     12
                             3279 ; 57   |    #define SEC_2K_BYTES_DIR_REC_PER_SECTOR                 64
                             3280 ; 58   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR                   705
                             3281 ; 59   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR_NO_RA             683
                             3282 ; 60   |
                             3283 ; 61   |    // Next 5 lines imported from nandsystemdrivewritesector.c
                             3284 ; 62   |    #define RA_ATTR_MEMORY_OFFSET           682
                             3285 ; 63   |    #define NUMBER_OF_WORDS_IN_512BYTES     171
                             3286 ; 64   |    #define NUM_ECC_DATA_IN_WORDS           3
                             3287 ; 65   |    #define SEC_512_WORD1_RA_SWAP           171
                             3288 ; 66   |    #define SEC_512_WORD2_RA_SWAP           173
                             3289 ; 67   |
                             3290 ; 68   |#endif  // _SECTORDEF_H
                             3291 ; 69   |
                             3292 
                             3294 
                             3295 ; 17   |
                             3296 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             3297 ; 19   |// Definitions
                             3298 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             3299 ; 21   |// Can disable ECC interrupt for testing
                             3300 ; 22   |#if 0 
                             3301 ; 23   |#define ECC_POLLING
                             3302 ; 24   |#endif
                             3303 ; 25   |
                             3304 ; 26   |#define RSECC_DELAY_COUNTER_VALUE 1000
                             3305 ; 27   |
                             3306 ; 28   |//-------------------------------
                             3307 ; 29   |// these byte values are also seen in device ID in nandtables.h and nanddesc.c for bootmgr
                                  .
                             3308 ; 30   |#define STMakerID    0x20
                             3309 ; 31   |#define HynixMakerID 0xAD
                             3310 ; 32   |
                             3311 ; 33   |#define SAMSUNG_MAKER_ID 0xEC
                             3312 ; 34   |#define MICRON_MAKER_ID   0x2c
                             3313 ; 35   |
                             3314 ; 36   |#define ToshibaMakerID        0x98
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3315 ; 37   |#define RENESAS_MAKER_ID  0x07
                             3316 ; 38   |//#define SandiskMakerID 0x000045
                             3317 ; 39   |//-------------------------------
                             3318 ; 40   |// place the tables in X space.
                             3319 ; 41   |#define NAND_TABLES_MEMSPACE _X
                             3320 ; 42   |
                             3321 ; 43   |#define NANDHAL_MEM_X _X
                             3322 ; 44   |#define NANDHAL_MEM_Y _Y
                             3323 ; 45   |#define NANDHAL_MEM NANDHAL_MEM_Y    // ***** IF THIS CHANGES, YOU MUST UPDATE NANDHal.inc
                                   to MATCH!!!!
                             3324 ; 46   |
                             3325 ; 47   |#define LEAVE_CE_PIN_ASSERTED 0  // formerly FALSE
                             3326 ; 48   |#define DEASSERT_CE_PIN       1  // formerly TRUE
                             3327 ; 49   |
                             3328 ; 50   |// These are for readfunctions -- to ease readability
                             3329 ; 51   |#define wColumnByteZero 0
                             3330 ; 52   |#define wColumnAddrZero 0
                             3331 ; 53   |#define wRowByteZero    0
                             3332 ; 54   |#define wRowByteOne     1
                             3333 ; 55   |#define wRowAddrZero    0
                             3334 ; 56   |#define wReadZeroBytes  0
                             3335 ; 57   |#define wReadOneByte    1
                             3336 ; 58   |#define wReadTwoBytes   2
                             3337 ; 59   |#define wReadThreeBytes 3
                             3338 ; 60   |#define wReadSixBytes   6
                             3339 ; 61   |#define wByteOffsetZero 0
                             3340 ; 62   |
                             3341 ; 63   |// Timeouts -- TBD -- These either get replaced altogether, or go somewhere else.
                             3342 ; 64   |// WaitForREADY() timeout counts
                             3343 ; 65   |// These control how long we will wait for the NAND to finish some internal operation
                             3344 ; 66   |// (e.g. Read Page (to cache), Program Page (from cache), Erase Block, Reset).
                             3345 ; 67   |// NOTE: For timeouts, each "count" is on the order of 50 nsec.
                             3346 ; 68   |// (<10 instructions, at a few 10s of nanosecs each)
                             3347 ; 69   |// The settings below are probably very conservative, but still short in human time
                             3348 ; 70   |// (e.g. 2000000 counts is approx. 100 msec)
                             3349 ; 71   |#define NAND_READ_PAGE_TIMEOUT          (2000000)
                             3350 ; 72   |#define NAND_READ_REDUNDANT_TIMEOUT     (2000000)
                             3351 ; 73   |#define NAND_RESET_TIMEOUT              (2000000)
                             3352 ; 74   |#define NAND_WRITE_PAGE_TIMEOUT         (2000000)
                             3353 ; 75   |#define NAND_ERASE_BLOCK_TIMEOUT        (2000000)
                             3354 ; 76   |
                             3355 ; 77   |// Read Status Register Masks
                             3356 ; 78   |// commented out with definition of new API
                             3357 ; 79   |// #define NAND_SR_PASS_MASK           0x000001
                             3358 ; 80   |// #define NAND_SR_CACHEPASS_MASK      0x000002
                             3359 ; 81   |// #define NAND_SR_READY_MASK          0x000060
                             3360 ; 82   |// //#define NAND_SR_READY_MASK          0x000040
                             3361 ; 83   |// #define NAND_SR_WRITEPROTECT_MASK   0x000080
                             3362 ; 84   |
                             3363 ; 85   |// new definitions for standardized API
                             3364 ; 86   |#define NAND_STATUS_PASS_MASK                   0x000001
                             3365 ; 87   |#define NAND_STATUS_DISTRICT_0_PASS_MASK        0x000002
                             3366 ; 88   |#define NAND_STATUS_DISTRICT_1_PASS_MASK        0x000004
                             3367 ; 89   |#define NAND_STATUS_DISTRICT_2_PASS_MASK        0x000008
                             3368 ; 90   |#define NAND_STATUS_DISTRICT_3_PASS_MASK        0x000010
                             3369 ; 91   |#define NAND_STATUS_TRUE_READY_MASK             0x000020
                             3370 ; 92   |#define NAND_STATUS_CACHE_READY_MASK            0x000040
                             3371 ; 93   |#define NAND_STATUS_WRITE_PROTECT_MASK          0x000080
                             3372 ; 94   |#define NAND_STATUS_CACHE_PREVIOUS_PASS_MASK    0x000100
                             3373 ; 95   |// The next 3 are used for Renesas part.
                             3374 ; 96   |#define NAND_STATUS_PROGRAM_CHECK_PASS_MASK     0x000008
                             3375 ; 97   |#define NAND_STATUS_ERASE_CHECK_PASS_MASK       0x000010
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3376 ; 98   |#define NAND_STATUS_ECC_CORRECTABLE_MASK        0x000020
                             3377 ; 99   |#define NAND_STATUS_INVALID_MASK                0x800000
                             3378 ; 100  |
                             3379 ; 101  |#define NAND_STATUS_PASS_VALUE                  0x000001
                             3380 ; 102  |#define NAND_STATUS_DISTRICT_0_PASS_VALUE       0x000002
                             3381 ; 103  |#define NAND_STATUS_DISTRICT_1_PASS_VALUE       0x000004
                             3382 ; 104  |#define NAND_STATUS_DISTRICT_2_PASS_VALUE       0x000008
                             3383 ; 105  |#define NAND_STATUS_DISTRICT_3_PASS_VALUE       0x000010
                             3384 ; 106  |#define NAND_STATUS_TRUE_READY_VALUE            0x000020
                             3385 ; 107  |#define NAND_STATUS_CACHE_READY_VALUE           0x000040
                             3386 ; 108  |#define NAND_STATUS_WRITE_PROTECT_VALUE         0x000080
                             3387 ; 109  |#define NAND_STATUS_CACHE_PREVIOUS_PASS_VALUE   0x000100
                             3388 ; 110  |
                             3389 ; 111  |#define NAND_STATUS_PROGRAM_CHECK_PASS_VALUE    0x000008
                             3390 ; 112  |#define NAND_STATUS_ERASE_CHECK_PASS_VALUE      0x000010
                             3391 ; 113  |#define NAND_STATUS_ECC_CORRECTABLE             0x000020
                             3392 ; 114  |
                             3393 ; 115  |#define WP_NAND_INTERNAL    0   // write protect line for internal
                             3394 ; 116  |#define WP_EXTERNAL         1   // write protect line for external
                             3395 ; 117  |
                             3396 ; 118  |#define MakerIDMask 0x0000ff
                             3397 ; 119  |#define INVALID_SECTOR_ADDRESS     (0xFFFFF0) // FFFFF0 is a dummy value intended to be an
                                   invalid sector address
                             3398 ; 120  |
                             3399 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             3400 ; 122  |//  Macros
                             3401 ; 123  |/////////////////////////////////////////////////////////////////////////////////
                             3402 ; 124  |
                             3403 ; 125  |//////////////////////////////////////////
                             3404 ; 126  |// NAND-Specific Physical Media structures
                             3405 ; 127  |//////////////////////////////////////////
                             3406 ; 128  |typedef enum {
                             3407 ; 129  |  // NOTE: NandHalInit checks for zero to see if initialization needed.
                             3408 ; 130  |  // Therefore, do not use a ZERO in the typedef.
                             3409 ; 131  |  eNandTypeUnknown = 0, // use for init
                             3410 ; 132  |  eNandType1 = 1,
                             3411 ; 133  |  eNandType2 = 2,
                             3412 ; 134  |  eNandType4 = 4,
                             3413 ; 135  |  eNandType5 = 5,
                             3414 ; 136  |  eNandType6 = 6,
                             3415 ; 137  |  eNandType7 = 7
                             3416 ; 138  |} NAND_TYPE;
                             3417 ; 139  |
                             3418 ; 140  |typedef enum {
                             3419 ; 141  |  eNandLockStateFree   = 0,
                             3420 ; 142  |  eNandLockStateLocked = 1
                             3421 ; 143  |} NAND_LOCK_STATE;
                             3422 ; 144  |
                             3423 ; 145  |typedef enum {
                             3424 ; 146  |    eNandProgCmdReadID                    = 0x000090,
                             3425 ; 147  |    eNandProgCmdReadID2                   = 0x000091,
                             3426 ; 148  |    eNandProgCmdReadStatus                = 0x000070,
                             3427 ; 149  |    eNandProgCmdReset                     = 0x0000ff,
                             3428 ; 150  |    eNandProgCmdSerialDataInput           = 0x000080,   // Page Program/Cache Program
                             3429 ; 151  |    eNandProgCmdRead1                     = 0x000000,   // Read or Read for CopyBack
                             3430 ; 152  |    eNandProgCmdRead1_2ndCycle            = 0x000030,   // Second Cycle for Read (Type 2 N
                                  ANDs)
                             3431 ; 153  |    eNandProgCmdReadForCopyBack_2ndCycle  = 0x000035,   // Second Cycle for Read for Copy 
                                  Back
                             3432 ; 154  |    eNandProgCmdReadForCacheCopyback_2nd  = 0x00003A,
                             3433 ; 155  |    eNandProgCmdRead2                     = 0x000001,
                             3434 ; 156  |    eNandProgCmdRead3                     = 0x000050,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3435 ; 157  |    eNandProgCmdPageProgram               = 0x000010,   // Second cycle for wSerialDataInp
                                  ut for Page Program
                             3436 ; 158  |    eNandProgCmdCacheProgram              = 0x000015,   // Second cycle for wSerialDataInp
                                  ut for Cache Program
                             3437 ; 159  |    eNandProgCmdCopyBackProgram           = 0x000085,
                             3438 ; 160  |    eNandProgCmdCopyBack2Program          = 0x00008C,
                             3439 ; 161  |    eNandProgCmdCopyBackProgram_2ndCycle  = 0x000010,   // Second cycle for Copy Back Prog
                                  ram
                             3440 ; 162  |    eNandProgCmdBlockErase                = 0x000060,
                             3441 ; 163  |    eNandProgCmdBlockErase_2ndCycle       = 0x0000d0,
                             3442 ; 164  |    eNandProgCmdRandomDataIn              = 0x000085,
                             3443 ; 165  |    eNandProgCmdRandomDataOut             = 0x000005,
                             3444 ; 166  |    eNandProgCmdRandomDataOut_2ndCycle    = 0x0000E0,
                             3445 ; 167  |    eNandProgCmdReadMultiPlaneStatus      = 0x000071,   // MLC MultiPlane
                             3446 ; 168  |    eNandProgCmdReadErrorStatus           = 0x000072,   // MLC Single Plane Error Status
                             3447 ; 169  |    eNandProgCmdReadMultiPlaneErrorStatus = 0x000073,   // MLC MultiPlane Error Status.
                             3448 ; 170  |    eNandProgCmdMultiPlaneWrite           = 0x000011,
                             3449 ; 171  |    eNandProgCmdStatusModeReset           = 0x00007F,
                             3450 ; 172  |    eNandProgCmdMultiPlaneRead_2ndCycle   = 0x000031,
                             3451 ; 173  |    eNandProgCmdPageDataOutput            = 0x000006,
                             3452 ; 174  |    eNandProgCmdMultiPlaneVerifyErased    = 0x0000D3,
                             3453 ; 175  |    eNandProgCmdMultiPlaneBlockErase      = 0x00ffff,   // TBD !!! Need code for this.
                             3454 ; 176  |    eNandProgCmdNone                      = 0x7FFFFF,   // invalid entry
                             3455 ; 177  |    eNandProgCmdDummyProgram              = 0x6FFFFF    // invalid entry
                             3456 ; 178  |} NAND_PROGRAM_CODES;
                             3457 ; 179  |
                             3458 ; 180  |
                             3459 ; 181  |
                             3460 ; 182  |// NAND Physical Media API functions
                             3461 ; 183  |typedef RETCODE (*P_HAL_READ_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD, P_SECTO
                                  R_BUFFER);
                             3462 ; 184  |typedef RETCODE (*P_HAL_READ_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag *, WOR
                                  D, P_SECTOR_BUFFER, BOOL);
                             3463 ; 185  |typedef RETCODE (*P_HAL_ENABLE_WRITES_FUNCTION)(WORD);
                             3464 ; 186  |typedef RETCODE (*P_HAL_DISABLE_WRITES_FUNCTION)(WORD);
                             3465 ; 187  |typedef RETCODE (*P_HAL_WRITE_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD, P_SECT
                                  OR_BUFFER);
                             3466 ; 188  |typedef RETCODE (*P_HAL_WRITE_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag *, WO
                                  RD, P_SECTOR_BUFFER);
                             3467 ; 189  |typedef RETCODE (*P_HAL_ERASE_BLOCK_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                             3468 ; 190  |typedef RETCODE (*P_HAL_ERASE_BLOCK_ASYNC_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                             3469 ; 191  |typedef RETCODE (*P_HAL_COPY_SECTORS_FUNCTION)(struct NandPhysicalMediaTag *, WORD, WORD, 
                                  WORD);
                             3470 ; 192  |typedef RETCODE (*P_HAL_GET_STATUS_FUNCTION)(struct NandPhysicalMediaTag *, WORD *, WORD);
                                  
                             3471 ; 193  |typedef RETCODE (*P_HAL_SETUP_WRITE_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                                  
                             3472 ; 194  |typedef RETCODE (*P_HAL_SETUP_WRITE_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag
                                   *, WORD);
                             3473 ; 195  |typedef RETCODE (*P_HAL_SEND_SECTOR_DATA_FUNCTION)(struct NandPhysicalMediaTag *, P_SECTOR
                                  _BUFFER);
                             3474 ; 196  |typedef RETCODE (*P_HAL_SEND_PROGRAM_COMMAND_FUNCTION)(struct NandPhysicalMediaTag *, NAND
                                  _PROGRAM_CODES);
                             3475 
                             3510 
                             3511 ; 197  |typedef RETCODE (*P_HAL_GET_DMA_STATUS_FUNCTION)(struct NandPhysicalMediaTag *);
                             3512 ; 198  |typedef RETCODE (*P_HAL_LOCK_INTERFACE_PORT_FUNCTION)(void);
                             3513 ; 199  |typedef RETCODE (*P_HAL_RELEASE_INTERFACE_PORT_FUNCTION)(void);
                             3514 ; 200  |typedef RETCODE (*P_HAL_LOCK_NAND_FUNCTION)(struct NandPhysicalMediaTag *);
                             3515 ; 201  |typedef RETCODE (*P_HAL_RELEASE_NAND_FUNCTION)(struct NandPhysicalMediaTag *);
                             3516 ; 202  |typedef RETCODE (*P_HAL_START_COMPUTE_ECC_FUNCTION)(P_SECTOR_BUFFER,WORD);
                             3517 ; 203  |typedef RETCODE (*P_HAL_COMPUTE_ECC_GET_STATUS_FUNCTION)(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3518 ; 204  |typedef RETCODE (*P_HAL_CORRECT_ECC_FUNCTION)(P_SECTOR_BUFFER);
                             3519 ; 205  |typedef BOOL    (*P_BUSYDONE_CALLBACK_FUNCTION)(int, void*);
                             3520 ; 206  |typedef RETCODE (*P_HAL_MSW_SECTOR_COMMIT)(struct NandPhysicalMediaTag *);
                             3521 ; 207  |typedef RETCODE (*P_HAL_MSW_PAGE_COMMIT)(struct NandPhysicalMediaTag *);
                             3522 
                             3603 
                             3604 ; 208  |
                             3605 ; 209  |
                             3606 ; 210  |typedef struct {
                             3607 ; 211  |    WORD wReadSectorCodeBank;
                             3608 ; 212  |    P_HAL_READ_SECTOR_FUNCTION pReadSector;
                             3609 ; 213  |    WORD wReadSectorRedundantCodeBank;
                             3610 ; 214  |    P_HAL_READ_SECTOR_REDUNDANT_FUNCTION pReadSectorRedundant;
                             3611 ; 215  |    WORD wGetStatusCodeBank;
                             3612 ; 216  |    P_HAL_GET_STATUS_FUNCTION pGetStatus;
                             3613 ; 217  |    WORD wEnableWritesCodeBank;
                             3614 ; 218  |    P_HAL_ENABLE_WRITES_FUNCTION pEnableWrites;
                             3615 ; 219  |    WORD wDisableWritesCodeBank;
                             3616 ; 220  |    P_HAL_DISABLE_WRITES_FUNCTION pDisableWrites;
                             3617 ; 221  |    WORD wWriteSectorCodeBank;
                             3618 ; 222  |    P_HAL_WRITE_SECTOR_FUNCTION pWriteSector;
                             3619 ; 223  |    WORD wWriteSectorRedundantCodeBank;
                             3620 ; 224  |    P_HAL_WRITE_SECTOR_REDUNDANT_FUNCTION pWriteSectorRedundant;
                             3621 ; 225  |    WORD wEraseBlockCodeBank;
                             3622 ; 226  |    P_HAL_ERASE_BLOCK_FUNCTION pEraseBlock;
                             3623 ; 227  |    WORD wEraseBlockAsyncCodeBank;
                             3624 ; 228  |    P_HAL_ERASE_BLOCK_ASYNC_FUNCTION pEraseBlockAsync;
                             3625 ; 229  |    WORD wCopySectorsCodeBank;
                             3626 ; 230  |    P_HAL_COPY_SECTORS_FUNCTION pCopySectors;
                             3627 ; 231  |    WORD wSetupWriteSectorCodeBank;
                             3628 ; 232  |    P_HAL_SETUP_WRITE_SECTOR_FUNCTION pSetupWriteSector;
                             3629 ; 233  |    WORD wSetupWriteSectorRedundantCodeBank;
                             3630 ; 234  |    P_HAL_SETUP_WRITE_SECTOR_REDUNDANT_FUNCTION pSetupWriteSectorRedundant;
                             3631 ; 235  |    WORD wSendSectorDataCodeBank;
                             3632 ; 236  |    P_HAL_SEND_SECTOR_DATA_FUNCTION pSendSectorData;
                             3633 ; 237  |    WORD wSendProgramCommandCodeBank;
                             3634 ; 238  |    P_HAL_SEND_PROGRAM_COMMAND_FUNCTION pSendProgramCommand;
                             3635 ; 239  |    WORD wStartComputeECCCodeBank;
                             3636 ; 240  |    P_HAL_START_COMPUTE_ECC_FUNCTION pStartComputeECC;
                             3637 ; 241  |    WORD wComputeECCGetStatusCodeBank;
                             3638 ; 242  |    P_HAL_COMPUTE_ECC_GET_STATUS_FUNCTION pComputeECCGetStatus;
                             3639 ; 243  |    WORD wCorrectECCCodeBank;
                             3640 ; 244  |    P_HAL_CORRECT_ECC_FUNCTION pCorrectECC;
                             3641 ; 245  |    WORD wSectorCommitBank;
                             3642 ; 246  |    P_HAL_MSW_SECTOR_COMMIT pCommitSector;
                             3643 ; 247  |    WORD wPageCommitBank;
                             3644 ; 248  |    P_HAL_MSW_PAGE_COMMIT pCommitPage;
                             3645 ; 249  |
                             3646 ; 250  |} NANDHAL_API_DESCRIPTOR, * P_NANDHAL_API_DESCRIPTOR;
                             3647 
                             3699 
                             3700 ; 251  |
                             3701 ; 252  |typedef struct {
                             3702 ; 253  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             3703 ; 254  |    NAND_TYPE                NandType;
                             3704 ; 255  |
                             3705 ; 256  |    // SECTOR PARAMETERS
                             3706 ; 257  |    WORD wSectorTotalSize;              // Total sector size (Data + Redundant Area)
                             3707 ; 258  |    WORD wSectorDataSize;               // Number of Data Bytes per Page
                             3708 ; 259  |    WORD wRedundantAreaSize;            // Number of Bytes per Redundant/Spare Area
                             3709 ; 260  |    // A physical Page may contain multiple Sectors.
                             3710 ; 261  |    // It is assumed that the number or Sectors per Page is always
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3711 ; 262  |    // a power of 2 (i.e. 1,2,4...)
                             3712 ; 263  |    // The following elements are used to help address the Sectors within a Page
                             3713 ; 264  |    WORD wSectorToPageShift;            // Number of right shifts to compute Page Num from
                                   Sector Num
                             3714 ; 265  |    WORD wSectorInPageMask;             // Mask to extract "relative sector in Page" from 
                                  absolute Sector Num
                             3715 ; 266  |
                             3716 ; 267  |    // BLOCK PARAMETERS
                             3717 ; 268  |    WORD wSectorsToBlockShift;
                             3718 ; 269  |    WORD wSectorsPerBlockMask;
                             3719 ; 270  |    WORD wNumberSectorsPerBlock;
                             3720 ; 271  |    WORD wPagesPerBlock;
                             3721 ; 272  |
                             3722 ; 273  |    // DEVICE ADDRESSING PARAMETERS
                             3723 ; 274  |    WORD wNumColumnBytes;
                             3724 ; 275  |    WORD wNumRowBytes;
                             3725 ; 276  |    BOOL bSendAddressForEachSector;
                             3726 ; 277  |} NAND_PARAMETERS_DESCRIPTOR, * P_NAND_PARAMETERS_DESCRIPTOR;
                             3727 
                             3754 
                             3755 ; 278  |
                             3756 ; 279  |typedef struct NandPhysicalMediaTag{
                             3757 ; 280  |    P_NAND_PARAMETERS_DESCRIPTOR pNANDParams;
                             3758 ; 281  |    WORD                         wChipNumber;
                             3759 ; 282  |    NAND_LOCK_STATE              Lock;
                             3760 ; 283  |    BOOL                         bNANDIsBusy;              // Used for SetNANDBusy and NAN
                                  DIsReady
                             3761 ; 284  |    P_BUSYDONE_CALLBACK_FUNCTION pBusyDoneCallbackFunction;// Used for SetNANDBusy and NAN
                                  DIsReady
                             3762 ; 285  |    void                      *  pBusyArg;                 // Used for SetNANDBusy and NAN
                                  DIsReady
                             3763 ; 286  |    WORD                         wTotalSectors;
                             3764 ; 287  |    WORD                         wTotalBlocks;
                             3765 ; 288  |    WORD                         wTotalInternalDice;       // (1/2/4/...) - number of chip
                                  s pretending to be a single chip
                             3766 ; 289  |    WORD                         wBlocksPerDie;            // (wTotalBlocks / wTotalIntern
                                  alDice )
                             3767 ; 290  |} NAND_PHYSICAL_MEDIA_DESCRIPTOR, * P_NAND_PHYSICAL_MEDIA_DESCRIPTOR;
                             3768 
                             3780 
                             3781 ; 291  |
                             3782 ; 292  |
                             3783 ; 293  |// These are physical parameters that can be overruled in NAND_INIT_DESCRIPTOR
                             3784 ; 294  |// by analyzing the data read during read IDs command.
                             3785 ; 295  |typedef struct {
                             3786 ; 296  |    WORD                     wTotalInternalDice;       // (1/2/4/...) - number of chips pr
                                  etending to be a single chip
                             3787 ; 297  |    WORD                     wBlocksPerDie;            // (wTotalBlocks / wTotalInternalDi
                                  ce)
                             3788 ; 298  |
                             3789 ; 299  |} NAND_OVER_RULED_PARAMTERS;
                             3790 ; 300  |
                             3791 ; 301  |// These are used by the TypeNDescriptor files -- use for copying.
                             3792 ; 302  |typedef struct {
                             3793 ; 303  |    WORD wSectorTotalSize;       // Total sector size (Data + Redundant Area)
                             3794 ; 304  |    // A physical Page may contain multiple Sectors.
                             3795 ; 305  |    // It is assumed that the number or Sectors per Page is always
                             3796 ; 306  |    // a power of 2 (i.e. 1,2,4...)
                             3797 ; 307  |    // The following elements are used to help address the Sectors within a Page
                             3798 ; 308  |    BOOL bSendAddressForEachSector; // FALSE if sectors in Page can be DMA'd without new s
                                  etup
                             3799 ; 309  |} NAND_SECTOR_DESCRIPTOR, * P_NAND_SECTOR_DESCRIPTOR;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3800 ; 310  |
                             3801 ; 311  |typedef struct {
                             3802 ; 312  |    WORD wNumberSectorsPerBlock;
                             3803 ; 313  |    WORD wPagesPerBlock;
                             3804 ; 314  |} NAND_BLOCK_DESCRIPTOR, * P_NAND_BLOCK_DESCRIPTOR;
                             3805 ; 315  |
                             3806 ; 316  |typedef struct {
                             3807 ; 317  |    WORD wNumColumnBytes;
                             3808 ; 318  |    WORD wNumRowBytes;
                             3809 ; 319  |} NAND_DEVICE_ADDR_DESCRIPTOR, * P_NAND_DEVICE_ADDR_DESCRIPTOR;
                             3810 
                             3823 
                             3824 ; 320  |
                             3825 ; 321  |typedef struct {
                             3826 ; 322  |    // at init -- these are copied to NAND_PARAMETERS_DESCRIPTOR
                             3827 ; 323  |    NAND_SECTOR_DESCRIPTOR NAND_TABLES_MEMSPACE *         pSectorDescriptor;
                             3828 ; 324  |    NAND_BLOCK_DESCRIPTOR  NAND_TABLES_MEMSPACE *         pBlockDescriptor;
                             3829 ; 325  |    NAND_DEVICE_ADDR_DESCRIPTOR NAND_TABLES_MEMSPACE *    pDeviceAddressingDescriptor;
                             3830 ; 326  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             3831 ; 327  |    NAND_TYPE                NandType;
                             3832 ; 328  |} NAND_DESCRIPTOR_SUB_STRUCT, * P_NAND_DESCRIPTOR_SUB_STRUCT;
                             3833 
                             3847 
                             3848 ; 329  |
                             3849 ; 330  |typedef struct {
                             3850 ; 331  |    // at init -- these are copied to NAND_PARAMETERS_DESCRIPTOR
                             3851 ; 332  |    NAND_DESCRIPTOR_SUB_STRUCT NAND_TABLES_MEMSPACE * pNandDescriptorSubStruct;
                             3852 ; 333  |    // at init -- these are copied to NAND_PHYSICAL_MEDIA_DESCRIPTOR
                             3853 ; 334  |    WORD                     wTotalBlocks;
                             3854 ; 335  |    WORD                     wTotalInternalDice;       // (1/2/4/...) - number of chips pr
                                  etending to be a single chip
                             3855 ; 336  |} NAND_INIT_DESCRIPTOR, * P_NAND_INIT_DESCRIPTOR;
                             3856 ; 337  |
                             3857 ; 338  |typedef union {                     // All fields in nanoseconds
                             3858 ; 339  |
                             3859 ; 340  |    // By placing this word before the bitfield it allows structure copies to be done
                             3860 ; 341  |    //  safely by assignment rather than by memcpy.
                             3861 ; 342  |
                             3862 ; 343  |    WORD initializer;
                             3863 ; 344  |
                             3864 ; 345  |    // These field lengths are arbitrary... they only need to be large enough to hold
                             3865 ; 346  |    //  the values.  Possible optimization by using enumerations rather than the actual
                             3866 ; 347  |    //  values here and teaching NANDHalSetGPFlashTiming how to interpret them.
                             3867 ; 348  |
                             3868 ; 349  |    struct {
                             3869 ; 350  |        WORD TDH    :7;                         // tWH, tREH, tDH
                             3870 ; 351  |        WORD TDS    :7;                         // tWP, tDS
                             3871 ; 352  |        WORD THOLD  :5;                         // tCLH, tCH, tALH, tDH
                             3872 ; 353  |        WORD TSU    :5;                         // tCLS, tCS, tALS
                             3873 ; 354  |    } decode;
                             3874 ; 355  |} NAND_TIMINGS;
                             3875 ; 356  |
                             3876 ; 357  |// Special types to aid in absolute vs relative block address confusion  
                             3877 ; 358  |typedef WORD REGION_RELATIVE_BLK_ADDR;  
                             3878 ; 359  |typedef WORD ABSOLUTE_BLK_ADDR;  
                             3879 ; 360  |
                             3880 ; 361  |#define MK_NAND_TIMINGS_REAL( tsu, thold, tds, tdh )             ( ((tsu   & 0x1F) << 19) 
                                    \ 
                             3881 ; 362  |                                                                 | ((thold & 0x1F) << 14) 
                                    \ 
                             3882 ; 363  |                                                                 | ((tds   & 0x7F) << 7)  
                                    \ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3883 ; 364  |                                                                 |  (tdh   & 0x7F) )
                             3884 ; 365  |
                             3885 ; 366  |//!! The max value for an unsigned 7 bit number is 2^7 - 1 = 127 so don't use any value >1
                                  27 for tdh & tds (macro param 3&4), else overflow & crash occurs. 
                             3886 ; 367  |//!! The max value for an unsigned 5 bit number is 2^5 - 1 = 31  so don't use any value >3
                                  1  for           (macro param 1&2), else overflow & crash can occur. 
                             3887 ; 368  |
                             3888 ; 369  |#if DEBUG
                             3889 ; 370  |    //  NAND1 and NAND2 get optimized timings.  NAND3 and NAND4 get failsafe timings.
                             3890 ; 371  |    #ifdef NAND1
                             3891 ; 372  |        #define NAND_FAILSAFE_TIMINGS                   MK_NAND_TIMINGS_REAL( 0, 10, 45, 3
                                  0 )
                             3892 ; 373  |        #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             3893 ; 374  |    #else
                             3894 ; 375  |        #ifdef NAND2
                             3895 ; 376  |            #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_REAL( 0, 1
                                  0, 61, 48 )
                             3896 ; 377  |            #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             3897 ; 378  |        #else
                             3898 ; 379  |            #ifdef NAND3
                             3899 ; 380  |                #define NAND_FAILSAFE_TIMINGS                   MK_NAND_TIMINGS_REAL( 0, 1
                                  0, 82, 48 )
                             3900 ; 381  |                #define MK_NAND_TIMINGS(a,b,c,d)        NAND_FAILSAFE_TIMINGS
                             3901 ; 382  |            #else
                             3902 ; 383  |                #ifdef NAND4
                             3903 ; 384  |                    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_RE
                                  AL( 0, 10, 82, 48 )
                             3904 ; 385  |                    #define MK_NAND_TIMINGS(a,b,c,d)        NAND_FAILSAFE_TIMINGS
                             3905 ; 386  |                #else
                             3906 ; 387  |                    // DEBUG defined but not (NAND1 NAND2 NAND3 or NAND4)
                             3907 ; 388  |                    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_RE
                                  AL( 0, 10, 45, 30 )
                             3908 ; 389  |                    #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             3909 ; 390  |                #endif
                             3910 ; 391  |            #endif
                             3911 ; 392  |        #endif
                             3912 ; 393  |    #endif
                             3913 ; 394  |#else
                             3914 ; 395  |    // Retail builds get full speed timings
                             3915 ; 396  |    // non DEBUG (RETAIL) builds (non engr board layouts) get one best case timing set.
                             3916 ; 397  |    // You may be able to reduce these values per your flash datasheet to increase perform
                                  ance.
                             3917 ; 398  |    #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL((a),(b),(c),(d))
                             3918 ; 399  |    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_REAL( 0, 10, 45, 3
                                  0 )
                             3919 ; 400  |#endif
                             3920 
                             3941 
                             3942 ; 401  |
                             3943 ; 402  |typedef struct {
                             3944 ; 403  |  WORD                                        DeviceManufacturerCode;   // 00:Device:Manuf
                                  acturer
                             3945 ; 404  |  NAND_TIMINGS                                NandTimings;
                             3946 ; 405  |  NAND_INIT_DESCRIPTOR NAND_TABLES_MEMSPACE * pNANDInitDescriptor;
                             3947 ; 406  |} NAND_DEVICECODE_MAP, * P_NAND_DEVICECODE_MAP;
                             3948 ; 407  |
                             3949 ; 408  |typedef union
                             3950 ; 409  |{
                             3951 ; 410  |   SECTOR_BUFFER singleLargeSector[SECTOR_BUFFER_ALLOC_SIZE(LARGE_SECTOR_TOTAL_SIZE)];
                             3952 ; 411  |   SECTOR_BUFFER singleSmallSector[SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_SIZE)];
                             3953 ; 412  |} _X NAND_COPY_BUFFER;
                             3954 ; 413  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3955 ; 414  |typedef struct
                             3956 ; 415  |{
                             3957 ; 416  |    WORD SectorDataSizeInBytes;
                             3958 ; 417  |    WORD SectorDataSizeInWords;
                             3959 ; 418  |    WORD SectorRedundantSizeInBytes;
                             3960 ; 419  |    WORD SectorRedundantSizeInWords;
                             3961 ; 420  |    WORD SectorTotalSizeInBytes;
                             3962 ; 421  |    WORD SectorTotalSizeInWords;
                             3963 ; 422  |} NAND_OUT_OF_CONTEXT_DATA;
                             3964 ; 423  |
                             3965 ; 424  |
                             3966 ; 425  |typedef enum
                             3967 ; 426  |{
                             3968 ; 427  |    WRITE_MODE_NONE,
                             3969 ; 428  |    WRITE_MODE_SINGLE,
                             3970 ; 429  |    WRITE_MODE_MULTI
                             3971 ; 430  |} NAND_WRITE_MODE;
                             3972 ; 431  |
                             3973 ; 432  |typedef struct _id_decode
                             3974 ; 433  |{
                             3975 ; 434  |    // Read ID Byte 1
                             3976 ; 435  |    WORD MakerCode              : 8;
                             3977 ; 436  |    // Read ID Byte 2
                             3978 ; 437  |    WORD DeviceCode             : 8;
                             3979 ; 438  |    // Read ID Byte 3
                             3980 ; 439  |    WORD InternalChipNumber     : 2;        // Number of die = (1 << n)
                             3981 ; 440  |    WORD CellType               : 2;        // Number of bits per memory cell = ( 1 << (n+
                                  1) ) // may 2005: 2 bits per cell for today's mlc.
                             3982 ; 441  |    WORD VendorSpecific0        : 3;
                             3983 ; 442  |    WORD CacheProgram           : 1;        // 0 == Not supported
                             3984 ; 443  |    // Read ID Byte 4
                             3985 ; 444  |    WORD PageSize               : 2;        // Page size in bytes = (1 << n) * 1024
                             3986 ; 445  |    WORD RedundantAreaSize      : 1;        // Redundant area bytes per 512 data bytes = 8
                                   * (1 << n)
                             3987 ; 446  |    WORD Reserved0              : 1;
                             3988 ; 447  |    WORD BlockSize              : 2;        // Block size in bytes = 64 * 1024 * (1 << n)
                             3989 ; 448  |    WORD Organization           : 1;        // 0 == x8, 1 == x16
                             3990 ; 449  |    WORD SamsungHSSerialAccess  : 1;        // 0 == 50/30ns, 1 == 25ns
                             3991 ; 450  |    // Read ID Byte 5
                             3992 ; 451  |    WORD VendorSpecific1        : 2;
                             3993 ; 452  |    WORD PlaneNumber            : 2;        // # of planes total (see note below) = (1 << 
                                  n)
                             3994 ; 453  |    WORD PlaneSize              : 3;        // # of bytes per plane = 64 * 1024 * 1024 * (
                                  1 << n)
                             3995 ; 454  |    WORD Reserved4              : 1;
                             3996 ; 455  |    // Read ID Byte 6
                             3997 ; 456  |    WORD Reserved5              : 3;
                             3998 ; 457  |    WORD ToshibaHighSpeedMode   : 1;        // 0 == Not supported
                             3999 ; 458  |    WORD Reserved6              : 4;
                             4000 ; 459  |}t_id_decode;
                             4001 
                             4003 
                             4004 ; 460  |
                             4005 ; 461  |// Note on # of planes for all Large Page Devices (SLC and MLC)
                             4006 ; 462  |//  This field will contain the number of planes per die * the number of die on a per chip
                                   enable basis.
                             4007 ; 463  |//    Examples;  1 plane, 1 die; value = 1
                             4008 ; 464  |//      2 plane, 1 die; value = 2
                             4009 ; 465  |//      2 plane, 2 die; value = 4
                             4010 ; 466  |//      2 plane, 2 die, 2 chip enable; value = 2
                             4011 ; 467  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4012 ; 468  |//  In case of multi-stacked device, the "plane number" will show the total number of plan
                                  es of the packaged
                             4013 ; 469  |//  device and not the number of planes per die. (e.g. If 2 pieces of device that has 2 pl
                                  anes were stacked
                             4014 ; 470  |//  in a package, the plane number will show "4")
                             4015 ; 471  |
                             4016 ; 472  |///////////////////////////////////////////////////////////////////////////////
                             4017 ; 473  |// Prototypes
                             4018 ; 474  |///////////////////////////////////////////////////////////////////////////////
                             4019 ; 475  |RETCODE _reentrant Type1_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             4020 ; 476  |RETCODE _reentrant Type1_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4021 ; 477  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             4022 ; 478  |RETCODE _reentrant Type1_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4023 ; 479  |RETCODE _reentrant Type1_CommitPage(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4024 ; 480  |
                             4025 ; 481  |
                             4026 ; 482  |RETCODE _reentrant Type2_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4027 ; 483  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             4028 ; 484  |RETCODE _reentrant Type2_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             4029 ; 485  |RETCODE _reentrant Type2_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4030 ; 486  |RETCODE _reentrant Type2_CommitPage(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4031 ; 487  |
                             4032 ; 488  |
                             4033 ; 489  |RETCODE _reentrant Type4_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             4034 ; 490  |RETCODE _reentrant Type4_EraseBlockAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                                    WORD wBlockNum);
                             4035 ; 491  |RETCODE _reentrant Type4_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4036 ; 492  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             4037 ; 493  |RETCODE _reentrant Type4_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4038 ; 494  |
                             4039 ; 495  |
                             4040 ; 496  |RETCODE _reentrant Type5_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4041 ; 497  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             4042 ; 498  |
                             4043 ; 499  |
                             4044 ; 500  |void _reentrant TypeX_FlushReadCache(short);
                             4045 ; 501  |void _reentrant TypeX_ReadForCopyback( P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, W
                                  ORD wSourceStartSectorNum, WORD readCommand );
                             4046 ; 502  |void _reentrant TypeX_CopybackProgram( P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, W
                                  ORD wTargetStartSectorNum, WORD firstProgCmd, WORD secondProgCmd, P_SECTOR_BUFFER pBuf );
                             4047 ; 503  |RETCODE _reentrant TypeX_SetupWriteSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor
                                  ,  WORD wSectorNum);
                             4048 ; 504  |RETCODE _reentrant TypeX_SetupWriteSectorRedundant(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDD
                                  escriptor,  WORD wSectorNum);
                             4049 ; 505  |WORD _reentrant TypeX_ComputeCol(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD wB
                                  yteOffset);
                             4050 ; 506  |RETCODE _reentrant TypeX_ReadSectorData(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4051 ; 507  |                        WORD iSectorNum, P_SECTOR_BUFFER pBuf);
                             4052 ; 508  |RETCODE _reentrant TypeX_ReadSectorRedundant(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescrip
                                  tor,
                             4053 ; 509  |                         WORD iSectorNum, P_SECTOR_BUFFER pSectorBuf, BOOL crcCorrect);
                             4054 ; 510  |RETCODE _reentrant TypeX_WaitForProgramDone(
                             4055 ; 511  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4056 ; 512  |RETCODE _reentrant TypeX_SendSectorData(
                             4057 ; 513  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4058 ; 514  |                  P_SECTOR_BUFFER pBuf);
                             4059 ; 515  |RETCODE _reentrant TypeX_SendSectorRedundantArea(
                             4060 ; 516  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4061 ; 517  |                  P_SECTOR_BUFFER pBuf);
                             4062 ; 518  |RETCODE _reentrant TypeX_SendProgramCommand(
                             4063 ; 519  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4064 ; 520  |                  NAND_PROGRAM_CODES eCommandCode);
                             4065 ; 521  |RETCODE _reentrant TypeX_WriteSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4066 ; 522  |                                     WORD wSectorNum, P_SECTOR_BUFFER pBuf);
                             4067 ; 523  |RETCODE _reentrant TypeX_WriteSectorRedundant(
                             4068 ; 524  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4069 ; 525  |                  WORD wSectorNum, P_SECTOR_BUFFER pBuf);
                             4070 ; 526  |RETCODE _reentrant TypeX_EraseBlock(
                             4071 ; 527  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD wBlockNum);
                             4072 ; 528  |RETCODE _reentrant TypeX_EraseBlockAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                                  
                             4073 ; 529  |                                         WORD wBlockNum);
                             4074 ; 530  |
                             4075 ; 531  |RETCODE _reentrant NANDHALCommon_EnableWrites(WORD wWPn);
                             4076 ; 532  |RETCODE _reentrant NANDHALCommon_DisableWrites(WORD wWPn);
                             4077 ; 533  |
                             4078 ; 534  |RETCODE _reentrant NANDHalStartComputeECC_1Bit(P_SECTOR_BUFFER pCompleteSectorBuf, WORD wW
                                  hichHalf);
                             4079 ; 535  |RETCODE _reentrant NANDHalStartComputeECC_4Bit(P_SECTOR_BUFFER pCompleteSectorBuf, WORD wW
                                  hichHalf);
                             4080 ; 536  |RETCODE _reentrant NANDHalCorrectECC_1Bit(P_SECTOR_BUFFER pCompleteSectorBuf);
                             4081 ; 537  |RETCODE _reentrant NANDHalCorrectECC_4Bit(P_SECTOR_BUFFER pCompleteSectorBuf);
                             4082 ; 538  |
                             4083 ; 539  |// These functions are all direct-callable. Do not need to go through struct de-referencin
                                  g.
                             4084 ; 540  |RETCODE _reentrant NANDHalLockInterfacePort(void);
                             4085 ; 541  |RETCODE _reentrant NANDHalReleaseInterfacePort(void);
                             4086 ; 542  |RETCODE _reentrant NANDHalLockNand(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4087 ; 543  |RETCODE _reentrant NANDHalReleaseNand(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4088 ; 544  |RETCODE _reentrant NANDHalComputeECCGetStatus(void);
                             4089 ; 545  |WORD _reentrant CRC8(WORD _X * wData, WORD wOffset, WORD wBcount);
                             4090 ; 546  |void _reentrant NandReset(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4091 ; 547  |RETCODE _reentrant NandHalInit(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, NAND_TIMI
                                  NGS * timings );
                             4092 ; 548  |RETCODE _reentrant NANDHalSetNandBusy(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4093 ; 549  |                                      BOOL (* pCallbackFun)(int iStatus, void * pObj), voi
                                  d * pArg);
                             4094 ; 550  |BOOL _reentrant bNANDHalNandIsReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4095 ; 551  |RETCODE _reentrant NANDHalWaitForAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             4096 ; 552  |RETCODE _reentrant HALMarkBlockBadInRA(
                             4097 ; 553  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             4098 
                             4100 
                             4101 ; 554  |    ABSOLUTE_BLK_ADDR wBlockAddr);
                             4102 ; 555  |RETCODE _reentrant NANDHilInit(WORD wDeviceNum);
                             4103 ; 556  |RETCODE _reentrant NANDHalWaitForTrueReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescripto
                                  r, WORD * pStatus);
                             4104 ; 557  |RETCODE _reentrant NANDHalWaitForCacheReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescript
                                  or, WORD * pStatus);
                             4105 ; 558  |void _reentrant NANDHalDblChkStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD
                                   wMask, WORD *pwStatus);
                             4106 ; 559  |RETCODE _reentrant NANDHalSetGPFlashTiming( NAND_TIMINGS const * pNT );
                             4107 
                             4109 
                             4110 ; 560  |///////////////////////////////////////////////////////////////////////////////
                             4111 ; 561  |// Externs
                             4112 ; 562  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4113 ; 563  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type1_NANDHALApiDescriptor;
                             4114 ; 564  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type2_NANDHALApiDescriptor;
                             4115 ; 565  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type4_NANDHALApiDescriptor;
                             4116 ; 566  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type5_NANDHALApiDescriptor;
                             4117 ; 567  |extern NANDHAL_MEM WORD g_iCachedPageNumInNAND[];
                             4118 ; 568  |#define INVALID_SECTOR_ADDRESS     (0xFFFFF0) // FFFFF0 is a dummy value intended to be an
                                   invalid sector address
                             4119 
                             4126 
                             4127 ; 569  |
                             4128 ; 570  |extern NAND_COPY_BUFFER wCopyBuffer;
                             4129 
                             4138 
                             4139 ; 571  |
                             4140 ; 572  |extern NAND_OUT_OF_CONTEXT_DATA g_NandAuxData;
                             4141 ; 573  |//extern NAND_WRITE_MODE g_WriteMode;  // can enable this line later. sdk 2.610 has it. 
                             4142 ; 574  |extern WORD g_maker_code;
                             4143 ; 575  |extern WORD g_CellType;
                             4144 ; 576  |extern WORD g_VendorSpecific1;
                             4145 ; 577  |extern WORD g_device_code;
                             4146 
                             4187 
                             4188 ; 578  |
                             4189 ; 579  |extern t_id_decode SECTOR_BUFFER_MEM * pReadIDDecode;
                             4190 ; 580  |#if 1 // TOVERIFY2: 
                             4191 ; 581  |///////////////////////////////////////////////////////////////////////////////
                             4192 ; 582  |// Macros
                             4193 ; 583  |///////////////////////////////////////////////////////////////////////////////
                             4194 ; 584  |//On NAND4 builds, if less than 4 Nands are used, then the ID structure gets overwritten w
                                  ith garbage
                             4195 ; 585  |//( zeros?),whenever the empty slots are probed. But we need to preserve the Maker code
                             4196 ; 586  |//for Hynix and ST Micro Nands.
                             4197 ; 587  |#define _nand_hal_preserve_data();\ 
                             4198 ; 588  |{                                          \ 
                             4199 ; 589  |  g_maker_code = pReadIDDecode->MakerCode; \ 
                             4200 ; 590  |  g_CellType = pReadIDDecode->CellType; \ 
                             4201 ; 591  |  g_device_code = pReadIDDecode->DeviceCode;\ 
                             4202 ; 592  |  g_VendorSpecific1 = pReadIDDecode->VendorSpecific1; \ 
                             4203 ; 593  |} // cell type backed up to glob so it's not lost during 2nd call to DetermineNandType in 
                                  a multi CE present case. We call that > once only when >1 CE present.
                             4204 ; 594  |#else // old ver
                             4205 ; 595  |extern WORD NANDHAL_MEM wID1;
                             4206 ; 596  |//On NAND4 builds, if less than 4 Nands are used, then the ID structure gets overwritten w
                                  ith garbage 
                             4207 ; 597  |//( zeros?),whenever the empty slots are probed. But we need to preserve the Maker code an
                                  d cell type
                             4208 ; 598  |//for Hynix and ST Micro and other Nands. 
                             4209 ; 599  |#define _nand_hal_preserve_data();\ 
                             4210 ; 600  |{                                          \ 
                             4211 ; 601  |  g_maker_code = (wID1 & MakerIDMask); \ 
                             4212 ; 602  |  //g_CellType = pReadIDDecode->CellType; \  /* should save this and uncomment this line t
                                  oo if you ever revert to this old way */
                             4213 ; 603  |  //g_VendorSpecific1 = pReadIDDecode->VendorSpecific1; \  /* should save this and uncomme
                                  nt this line too if you ever revert to this old way */
                             4214 ; 604  |}
                             4215 ; 605  |#endif
                             4216 ; 606  |
                             4217 ; 607  |#endif // #ifndef _NANDHAL_H
                             4218 ; 608  |
                             4219 ; 609  |
                             4220 
                             4222 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4223 ; 17   |
                             4224 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             4225 ; 19   |// Definitions
                             4226 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             4227 ; 21   |
                             4228 ; 22   |#define ECC_TIMEOUT                         1000
                             4229 ; 23   |
                             4230 ; 24   |// ECC & DMA get status functions return SUCCESS when completed successfully
                             4231 ; 25   |#define ECC_STATUS_BUSY                     0x006000
                             4232 ; 26   |#define ECC_STATUE_TIMEOUT                  0x006001
                             4233 ; 27   |#define DMA_STATUS_BUSY                     0x006001
                             4234 ; 28   |#define DMA_STATUE_TIMEOUT                  0x006002
                             4235 ; 29   |#define NAND_PROGRAM_STATUS_BUSY            0x006003
                             4236 ; 30   |#define NAND_PROGRAM_STATUS_TIMEOUT         0x006004
                             4237 ; 31   |#define NAND_PROGRAM_STATUS_FAILED          0x006005
                             4238 ; 32   |
                             4239 ; 33   |// Errors generated in Media Driver
                             4240 ; 34   |#define NAND_READ_SECTOR_FAIL               0x006006
                             4241 ; 35   |#define NAND_CONFIG_BLOCK_NOT_FOUND         0x006007
                             4242 ; 36   |
                             4243 ; 37   |
                             4244 ; 38   |#define MAX_CHIPS                           4   // Maximum number of chips 
                             4245 ; 39   |                                                // supported in a multi nand
                             4246 ; 40   |                                                // configuration
                             4247 ; 41   |
                             4248 ; 42   |#define NUM_PAGES_MARKED_BAD_IN_BLOCK       4   // Number of pages marked bad
                             4249 ; 43   |                                                // once a block is found Bad. 
                             4250 ; 44   |                                                // We decided to attempt to mark 
                             4251 ; 45   |                                                // 4 pages bad in case the status
                             4252 ; 46   |                                                // information does not stick.
                             4253 ; 47   |
                             4254 ; 48   |///////////////////////////////////////////////////////////////////////////
                             4255 ; 49   |// BAD BLOCK TABLE ENTRIES
                             4256 ; 50   |//
                             4257 ; 51   |// A BBTABLE_ENTRY may be FREE, meaning it is not associated with any Bad Block, 
                             4258 ; 52   |// yet (but may be in the future), or it may be NOT_ASSIGNED, meaning it is
                             4259 ; 53   |// associated with a Bad Block but no Data Drive RBlock has been assigned to
                             4260 ; 54   |// it (e.g. it may be a System Drive block), or it may have both a Bad Block
                             4261 ; 55   |// and an RBlock assigned to it.
                             4262 ; 56   |///////////////////////////////////////////////////////////////////////////
                             4263 ; 57   |#define BBTBL_FREE (-1)
                             4264 ; 58   |#define BBTBL_NOT_ASSIGNED (-1)
                             4265 ; 59   |//sdk3.110 requirement said to leave this as 14 and 10 bits but when we add renesas this m
                                  ust change to 15 and 9 bits as described in next comment.
                             4266 ; 60   |typedef struct NandBbTableEntryStruct {  // 16k quantity of superblocks on 2Gbit renesas, 
                                  so first field below needs max value of 16383. 2^14 -1 = 16383.  
                             4267 ; 61   |    INT iBBPhysicalAddress       :   15;    // Physical address of Bad Block  // Dec19'05:
                                   changed both from INT to WORD & changed bitsz from 14 to 15 and 10 to 9 to prevent Renesas defect
                                  . Jan18'06 back to INT solves 9793 in sdk2.610 prerelease. No defect in sdk3.
                             4268 ; 62   |                                            // (relative to Chip) || BBTBL_FREE
                             4269 ; 63   |    INT iRblkIdx                 :   9;    // Index of Region's assigned Rblock. num R blk
                                  s is 1.5% of tot blocks by default so 9 signed bits is enough to store max which is <256. 
                             4270 ; 64   |                                            // (for Data Drive) || BBTBL_NOT_ASSIGNED
                             4271 ; 65   | 
                             4272 ; 66   |} NAND_BBTABLE_ENTRY_T;
                             4273 ; 67   |// These allow declarations and externs to use the define below and we
                             4274 ; 68   |// specify _X or _Y here only. If X, BBTable defaults to x_sys cluster.
                             4275 ; 69   |// If _Y used below, BBTable section will default to y_extra cluster.
                             4276 ; 70   |#define NAND_BBTABLE_ENTRY      NAND_BBTABLE_ENTRY_T _Y
                             4277 ; 71   |#define P_NAND_BBTABLE_ENTRY    NAND_BBTABLE_ENTRY_T _Y *
                             4278 ; 72   |#define P_NAND_BBTABLE          NAND_BBTABLE_ENTRY_T _Y *
                             4279 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4280 ; 74   |
                             4281 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             4282 ; 76   |//  UPDATES TABLE
                             4283 ; 77   |//
                             4284 ; 78   |// Each Region has an Updates Table (UTbl), which is a subset of the Data Drive's
                             4285 ; 79   |// Master Updates Table.
                             4286 ; 80   |//
                             4287 ; 81   |// The Region knows the max size (iNumUBlks), which is exactly the number of UBlocks
                             4288 ; 82   |// in the Region, and has a pointer to the table entries, an array of 
                             4289 ; 83   |// NAND_UPDATES_ENTRYs.
                             4290 ; 84   |//
                             4291 ; 85   |// The NAND_UPDATES_ENTRY has two fields:
                             4292 ; 86   |//
                             4293 ; 87   |// iHBlkAddr is the physical address (14 bits worth, relative to the chip) of the 
                             4294 ; 88   |// HBlock which is being Updated.  If the Update Entry is not is use, this value is
                             4295 ; 89   |// UTBL_ERASED, if the UBlock pointed to by iUBlkIdx has been erased, or UTBL_FREE.
                             4296 ; 90   |// 
                             4297 ; 91   |// iUBlkIdx is the index of the UBlock which is being used to Update the HBlock.
                             4298 ; 92   |// This value is always present and unique, even if the Update is marked as UTBL_FREE
                             4299 ; 93   |// or UTBL_ERASED.  That is, THERE IS ALWAYS AN ENTRY FOR EVERY UBLOCK IN THE UPDATES
                             4300 ; 94   |// TABLE.  This allows us to search for an unused UBlock, by finding a UTbl entry
                             4301 ; 95   |// with iHBlkAddr set to UTBL_FREE or UTBL_ERASED and grabbing the iUBlkIdx field's
                             4302 ; 96   |// value.
                             4303 ; 97   |//
                             4304 ; 98   |// To get the physical address of the UBlock, add UBlkIdx to pRegion->iUBlksPhysAddr.
                             4305 ; 99   |//
                             4306 ; 100  |// Entries in the UTbl are kept sorted by the iHBlkAddr fields (UTBL_FREE and 
                             4307 ; 101  |// UTBL_ERASED are moved to the end of the table).  This allows fast searches for
                             4308 ; 102  |// HBlk addresses, an operation which occurs very often.
                             4309 ; 103  |//
                             4310 ; 104  |// When a new entry  is added to the table, it must be inserted into the sort order,
                             4311 ; 105  |// which may require moving some other entries down.
                             4312 ; 106  |//
                             4313 ; 107  |// See also: Update Sectors Map
                             4314 ; 108  |//
                             4315 ; 109  |/////////////////////////////////////////////////////////////////////////////////
                             4316 ; 110  |// Any iHBlkAddr value >= UTBL_SPECIAL_CODES is a special code, instead of an address
                             4317 ; 111  |#define UPDATE_TABLE_SPECIAL_CODES (0x3ffd)
                             4318 ; 112  |#define UPDATE_TABLE_ERASED (0x3fff)
                             4319 ; 113  |#define UPDATE_TABLE_FREE   (0x3ffe)
                             4320 ; 114  |#define UPDATE_TABLE_BAD    (0x3ffd)
                             4321 ; 115  |
                             4322 ; 116  |
                             4323 ; 117  |
                             4324 ; 118  |typedef struct {
                             4325 ; 119  |  WORD wHBlkAddr                 :   14;    // Physiscal address of Home Block
                             4326 ; 120  |                                            // (relative to chip) being Updated
                             4327 ; 121  |                                            // || UPDATE_TABLE_FREE  || UPDATE_TABLE_BAD
                             4328 ; 122  |  WORD wUBlkIdx                  :   10;    // Index of Region's assigned UBlock
                             4329 ; 123  |                                            // ALL UBlk INDICES ARE PRESENT,
                             4330 ; 124  |                                            // even if iHBlkAddr = UTBL_FREE || UTBL_ERASE
                                  D
                             4331 ; 125  |} NAND_UPDATES_ENTRY, * P_NAND_UPDATES_ENTRY, * P_UTABLE;
                             4332 
                             4347 
                             4348 ; 126  |
                             4349 ; 127  |
                             4350 ; 128  |
                             4351 ; 129  |/////////////////////////////////////////////////////////////////////////////////
                             4352 ; 130  |// NAND Region Info Struct
                             4353 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                             4354 ; 132  |typedef struct RegionInfoStruct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4355 ; 133  |
                             4356 ; 134  |  int                                iChip;                // Index of NAND Chip containin
                                  g this Region
                             4357 ; 135  |  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR   pNANDDesc;            // NAND descriptor
                             4358 ; 136  |  P_NAND_PARAMETERS_DESCRIPTOR       pNANDParms;           // NAND parameters (shortcut)
                             4359 ; 137  |  P_LOGICAL_DRIVE_DESCRIPTOR         pLogicalDrive;        // Pointer back to our grandpar
                                  ent
                             4360 ; 138  |
                             4361 ; 139  |  LOGICAL_DRIVE_TYPE                 eDriveType;           // Some System Drive, or Data D
                                  rive
                             4362 ; 140  |  WORD                               wTag;                 // Drive Tag
                             4363 ; 141  |
                             4364 ; 142  |  int                                iStartPhysAddr;       // Starting Block number for Re
                                  gion
                             4365 ; 143  |                                                           // relative to chip 
                             4366 ; 144  |  int                                iNumBlks;             // Size, in blocks, of whole Re
                                  gion
                             4367 ; 145  |                                                           // Size includes embedded Bad B
                                  locks
                             4368 ; 146  |
                             4369 ; 147  |
                             4370 ; 148  |            ////////////////////////////////////////////////////////////////
                             4371 ; 149  |            // The following elements, relating to HBlocks, are set and used
                             4372 ; 150  |            // by the Data Drive, only.  They are included in this structure
                             4373 ; 151  |            // for convenience.
                             4374 ; 152  |
                             4375 ; 153  |  int                                iHBlksPhysAddr;       // Starting Physical Block numb
                                  er for 
                             4376 ; 154  |                                                           // Home Blocks.
                             4377 ; 155  |  int                                iNumHBlks;            // Size, in blocks, of Home Blo
                                  cks area.
                             4378 ; 156  |                                                           // Size includes embedded Bad B
                                  locks
                             4379 ; 157  |
                             4380 ; 158  |  int                                iHBlksLogBlkAddr;     // Starting Logical Block numbe
                                  r
                             4381 ; 159  |
                             4382 ; 160  |  DWORD                              dwHBlks1stLogSector;  // Staring Logical Sector Numbe
                                  r
                             4383 ; 161  |  DWORD                              dwNumHSectors;        // Number of Sectors in the HBl
                                  ocks in
                             4384 ; 162  |                                                           // this Region. (Includes Bad B
                                  locks.)
                             4385 ; 163  |            ////////////////////////////////////////////////////////////////
                             4386 ; 164  |
                             4387 ; 165  |
                             4388 ; 166  |  int                                iUBlksPhysAddr;       // Starting Block number for UB
                                  locks
                             4389 ; 167  |  int                                iNumUBlks;            // For non-Data Drive, should =
                                   0
                             4390 ; 168  |                                                           // Size includes embedded Bad B
                                  locks
                             4391 ; 169  |  P_UTABLE                           pUTable;              // Pointer to Updates Table (ar
                                  ray)
                             4392 ; 170  |  WORD                               *pFreshList;          // Pointer to Updates Fresh Lis
                                  t for Region
                             4393 ; 171  |  WORD                               wFreshListHead;       // Head pointer (index) for Fre
                                  shList
                             4394 ; 172  |
                             4395 ; 173  |  int                                iRBlksPhysAddr;       // Starting Block number for RB
                                  locks
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4396 ; 174  |  int                                iNumRBlks;            // For non-Data Drive, should =
                                   0
                             4397 ; 175  |                                                           // Size includes embedded Bad B
                                  locks
                             4398 ; 176  |
                             4399 ; 177  |
                             4400 ; 178  |  int                                iNumBadBlks;          // Number Bad Blocks in this Re
                                  gion
                             4401 ; 179  |  int                                iMaxBadBlks;          // Max for this Region (i.e. ho
                                  w
                             4402 ; 180  |                                                           // much padding is there for "n
                                  ew"
                             4403 ; 181  |                                                           // Bad Blocks?)
                             4404 ; 182  |
                             4405 ; 183  |  P_NAND_BBTABLE                     pBBTable;             // Table of Bad Blocks for this
                                   Region
                             4406 ; 184  |                                                           // (This is just a pointer into
                                   a
                             4407 ; 185  |                                                           // subset of the BadBlocksTable
                                   in
                             4408 ; 186  |                                                           // a (the) NAND_MEDIA_INFO stru
                                  cture
                             4409 ; 187  |                                                           // (below).
                             4410 ; 188  |  BOOL                               bRegionInfoDirty;     // If TRUE, the bad block infor
                                  mation
                             4411 ; 189  |                                                           // has updates                 
                                                                            
                             4412 ; 190  |} NAND_REGION_INFO, *P_NAND_REGION_INFO;
                             4413 
                             4444 
                             4445 ; 191  |
                             4446 ; 192  |/////////////////////////////////////////////////////////////////////////////////
                             4447 ; 193  |// NAND Media Physial Media Struct
                             4448 ; 194  |//
                             4449 ; 195  |// This structure contains all of the information about a (the) NAND Media.
                             4450 ; 196  |// It has a table of all of the Chips' NANDDescriptors, the addresses of the
                             4451 ; 197  |// Configuration Block for each chip, a table of all of the Regions
                             4452 ; 198  |// on those chips, and a table of all of the Bad Blocks on those chips.
                             4453 ; 199  |//
                             4454 ; 200  |// There will typically be *one* of these structures, and it will be pointed 
                             4455 ; 201  |// to by the "PhysMediaTypeStruct" element of the LOGICAL_MEDIA_DESCRIPTOR and 
                             4456 ; 202  |// LOGICAL_DRIVE_DESCRIPTOR's for the NAND Media.
                             4457 ; 203  |//
                             4458 ; 204  |// Note: The array sizes, MAX_NAND_CHIPS, MAX_NAND_REGIONS and 
                             4459 ; 205  |// NAND_MEDIA_MAX_BAD_BLOCKS are meant to be Project-specific.  So the actual
                             4460 ; 206  |// arrays must be allocated in a Project-specific source (e.g. project.c).
                             4461 ; 207  |// The NAND_MEDIA_INFO (assuming there's only one) can also be allocated there,
                             4462 ; 208  |// with initial values pointing to the arrays (and initial counts of zero).
                             4463 ; 209  |//
                             4464 ; 210  |/////////////////////////////////////////////////////////////////////////////////
                             4465 ; 211  |
                             4466 ; 212  |typedef struct {
                             4467 ; 213  |
                             4468 ; 214  |  int                                   iNumNANDChips;
                             4469 ; 215  |  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR      pNANDDesc;          // NANDDesc[MAX_NAND_CHIPS]
                             4470 ; 216  |
                             4471 ; 217  |  int                                   ConfigBlkAddr[MAX_CHIPS];     // ConfigBlkAddr[MAX
                                  _NAND_CHIPS]
                             4472 ; 218  |
                             4473 ; 219  |  int                                   iNumRegions;
                             4474 ; 220  |  P_NAND_REGION_INFO                    pRegionInfo;        // RegionInfo[MAX_NAND_REGIONS
                                  ];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4475 ; 221  |
                             4476 ; 222  |  int                                   iNumBadBlks;
                             4477 ; 223  |  P_NAND_BBTABLE                        pMasterBBTable;     // MasterBBTable[NAND_MEDIA_MA
                                  X_BAD_BLOCKS]
                             4478 ; 224  |
                             4479 ; 225  |} NAND_MEDIA_INFO, * P_NAND_MEDIA_INFO;
                             4480 ; 226  |
                             4481 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                             4482 ; 228  |// Config Block Region Info
                             4483 ; 229  |/////////////////////////////////////////////////////////////////////////////////
                             4484 ; 230  |typedef struct {
                             4485 ; 231  |  LOGICAL_DRIVE_TYPE         eDriveType;       // Some System Drive, or Data Drive
                             4486 ; 232  |  WORD                       wTag;              // Drive Tag
                             4487 ; 233  |
                             4488 ; 234  |//  DataDriveMultiNANDConfig   eMultiNANDConfig; // CONCATENATED_MULTI_NAND | STRIPED_MULT
                                  I_NAND
                             4489 ; 235  |
                             4490 ; 236  |//  DataDriveAddressing        eAddressing;      // NAND_LINEAR_ADDRESSING | NAND_MULTI_PL
                                  ANE_ADDRESSING
                             4491 ; 237  |
                             4492 ; 238  |  int                        iNumBlks;         // Size, in blocks, of whole Region
                             4493 ; 239  |                                               // Size includes embedded Bad Blocks
                             4494 ; 240  |
                             4495 ; 241  |  int                        iNumUBlks;        // For non-Data Drive, this should = 0
                             4496 ; 242  |                                               // Size includes embedded Bad Blocks
                             4497 ; 243  |
                             4498 ; 244  |  int                        iNumRBlks;        // For non-Data Drive, this should = 0
                             4499 ; 245  |                                               // Size includes embedded Bad Blocks
                             4500 ; 246  |
                             4501 ; 247  |} NAND_CFG_BLK_REGION_INFO, * P_NAND_CFG_BLK_REGION_INFO;
                             4502 
                             4510 
                             4511 ; 248  |
                             4512 ; 249  |
                             4513 ; 250  |
                             4514 ; 251  |
                             4515 ; 252  |/////////////////////////////////////////////////////////////////////////////////
                             4516 ; 253  |// Configuration Block Info Sector
                             4517 ; 254  |//
                             4518 ; 255  |// Note: The array size, NAND_MEDIA_MAX_REGIONS, is meant to be project-specfic.
                             4519 ; 256  |// So, in this structure, a array of size, 1, is defined.  This structure will
                             4520 ; 257  |// not typically be allocated anywhere - it's just used to cast a pointer onto
                             4521 ; 258  |// a Sector buffer.  So, with the array at the end of the structure, we can merrily
                             4522 ; 259  |// read beyond the stated size (1), as long as we don't go off the end of the
                             4523 ; 260  |// Sector.  A NAND_CFG_BLK_REGION_INFO is only 4 WORDs (12 bytes) long, so we
                             4524 ; 261  |// can go on for 41 Regions before we run off the edge.  That's way more Regions 
                             4525 ; 262  |// than we should ever have.  (So the day this statement becomes false, I'll
                             4526 ; 263  |// have to come back and fix this some other way.)
                             4527 ; 264  |//
                             4528 ; 265  |/////////////////////////////////////////////////////////////////////////////////
                             4529 ; 266  |typedef struct {
                             4530 ; 267  |  int                        iMagicCookie;
                             4531 ; 268  |  int                        iVersionNum;
                             4532 ; 269  |
                             4533 ; 270  |  int                        iNumBadBlks;        // Number Bad Blocks on this Chip
                             4534 ; 271  |
                             4535 ; 272  |  int                        iNumRegions;
                             4536 ; 273  |  NAND_CFG_BLK_REGION_INFO   Regions[1];         // Regions[NAND_MEDIA_MAX_REGIONS]
                             4537 ; 274  |
                             4538 ; 275  |} NAND_CFG_BLK_INFO, * P_NAND_CFG_BLK_INFO;
                             4539 ; 276  |
                             4540 ; 277  |#define RelativeSectorToPhysical(pNandParameters, iBlkNum, iRelSector) \ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4541 ; 278  |     ((iRelSector) + (iBlkNum) * ((pNandParameters)->wNumberSectorsPerBlock))
                             4542 ; 279  |
                             4543 ; 280  |///////////////////////////////////////////////////////////////////////////////
                             4544 ; 281  |// Error codes
                             4545 ; 282  |///////////////////////////////////////////////////////////////////////////////
                             4546 ; 283  |
                             4547 ; 284  |///////////////////////////////////////////////////////////////////////////////
                             4548 ; 285  |// Typedefs
                             4549 ; 286  |///////////////////////////////////////////////////////////////////////////////
                             4550 ; 287  |
                             4551 ; 288  |
                             4552 ; 289  |///////////////////////////////////////////////////////////////////////////////
                             4553 ; 290  |// Prototypes
                             4554 ; 291  |///////////////////////////////////////////////////////////////////////////////
                             4555 ; 292  |RETCODE _reentrant NANDCalculateCompleteEccSync(
                             4556 ; 293  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4557 ; 294  |    P_SECTOR_BUFFER pBuffer);
                             4558 ; 295  |
                             4559 ; 296  |#if 0
                             4560 ; 297  |// No longer used
                             4561 ; 298  |RETCODE _reentrant NANDCalculatePartialEccSync(
                             4562 ; 299  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4563 ; 300  |    P_SECTOR_BUFFER pBuffer);
                             4564 ; 301  |
                             4565 ; 302  |RETCODE _reentrant NANDStartEcc(
                             4566 ; 303  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4567 ; 304  |    P_SECTOR_BUFFER pBuffer,
                             4568 ; 305  |    WORD wWhich);
                             4569 ; 306  |#endif
                             4570 ; 307  |RETCODE _reentrant NANDGetEccStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4571 ; 308  |
                             4572 ; 309  |RETCODE _reentrant NANDWritePageStartDmaSync(
                             4573 ; 310  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4574 ; 311  |    WORD wAbsoluteSectorNum,
                             4575 ; 312  |    P_SECTOR_BUFFER pBuffer);
                             4576 ; 313  |RETCODE _reentrant NANDGetDmaStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4577 ; 314  |RETCODE _reentrant NANDWriteStartPageProgramSync(
                             4578 ; 315  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4579 ; 316  |RETCODE _reentrant NANDWriteStartCachePageProgramSync(
                             4580 ; 317  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4581 ; 318  |RETCODE _reentrant NANDWriteStartMultiPageProgramSync(
                             4582 ; 319  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4583 ; 320  |RETCODE _reentrant NANDGetPageProgramStatus(
                             4584 ; 321  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4585 ; 322  |RETCODE _reentrant NANDGetCachePageProgramStatus(
                             4586 ; 323  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4587 ; 324  |    WORD * wStatus);
                             4588 ; 325  |
                             4589 ; 326  |RETCODE _reentrant NANDSetSectorLba(
                             4590 ; 327  |    WORD wBlockNumber,
                             4591 ; 328  |    WORD wSectorOffset,
                             4592 ; 329  |    P_SECTOR_BUFFER pBuffer);
                             4593 ; 330  |
                             4594 ; 331  |RETCODE NANDRecoverHardwareFromEraseFailure(
                             4595 ; 332  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4596 ; 333  |
                             4597 ; 334  |///////////////////////////////////////////////////////////////////////////////
                             4598 ; 335  |// Global variables
                             4599 ; 336  |///////////////////////////////////////////////////////////////////////////////
                             4600 ; 337  |extern LOGICAL_MEDIA_API NANDMediaApi;
                             4601 
                             4612 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4613 ; 338  |extern NAND_MEDIA_INFO g_NANDMediaInfo[];
                             4614 ; 339  |
                             4615 ; 340  |extern LOGICAL_DRIVE_API NANDDataDriveApi;
                             4616 ; 341  |extern LOGICAL_DRIVE_API NANDSystemDriveApi;
                             4617 ; 342  |
                             4618 ; 343  |
                             4619 ; 344  |#endif // #ifndef _NANDDDI_H
                             4620 
                             4622 
                             4623 ; 18   |
                             4624 ; 19   |#include "NANDDdi.h"
                             4625 
                             4627 
                             4628 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4629 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             4630 ; 3    |//
                             4631 ; 4    |// Filename: NANDDdi.h
                             4632 ; 5    |// Description: 
                             4633 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4634 ; 7    |
                             4635 ; 8    |#ifndef _NANDDDI_H
                             4636 ; 9    |#define _NANDDDI_H
                             4637 ; 10   |
                             4638 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             4639 ; 12   |// Includes
                             4640 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             4641 ; 14   |
                             4642 ; 15   |#include "ddildl_internal.h"
                             4643 ; 16   |#include "nandhal.h"
                             4644 ; 17   |
                             4645 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             4646 ; 19   |// Definitions
                             4647 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             4648 ; 21   |
                             4649 ; 22   |#define ECC_TIMEOUT                         1000
                             4650 ; 23   |
                             4651 ; 24   |// ECC & DMA get status functions return SUCCESS when completed successfully
                             4652 ; 25   |#define ECC_STATUS_BUSY                     0x006000
                             4653 ; 26   |#define ECC_STATUE_TIMEOUT                  0x006001
                             4654 ; 27   |#define DMA_STATUS_BUSY                     0x006001
                             4655 ; 28   |#define DMA_STATUE_TIMEOUT                  0x006002
                             4656 ; 29   |#define NAND_PROGRAM_STATUS_BUSY            0x006003
                             4657 ; 30   |#define NAND_PROGRAM_STATUS_TIMEOUT         0x006004
                             4658 ; 31   |#define NAND_PROGRAM_STATUS_FAILED          0x006005
                             4659 ; 32   |
                             4660 ; 33   |// Errors generated in Media Driver
                             4661 ; 34   |#define NAND_READ_SECTOR_FAIL               0x006006
                             4662 ; 35   |#define NAND_CONFIG_BLOCK_NOT_FOUND         0x006007
                             4663 ; 36   |
                             4664 ; 37   |
                             4665 ; 38   |#define MAX_CHIPS                           4   // Maximum number of chips 
                             4666 ; 39   |                                                // supported in a multi nand
                             4667 ; 40   |                                                // configuration
                             4668 ; 41   |
                             4669 ; 42   |#define NUM_PAGES_MARKED_BAD_IN_BLOCK       4   // Number of pages marked bad
                             4670 ; 43   |                                                // once a block is found Bad. 
                             4671 ; 44   |                                                // We decided to attempt to mark 
                             4672 ; 45   |                                                // 4 pages bad in case the status
                             4673 ; 46   |                                                // information does not stick.
                             4674 ; 47   |
                             4675 ; 48   |///////////////////////////////////////////////////////////////////////////
                             4676 ; 49   |// BAD BLOCK TABLE ENTRIES
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4677 ; 50   |//
                             4678 ; 51   |// A BBTABLE_ENTRY may be FREE, meaning it is not associated with any Bad Block, 
                             4679 ; 52   |// yet (but may be in the future), or it may be NOT_ASSIGNED, meaning it is
                             4680 ; 53   |// associated with a Bad Block but no Data Drive RBlock has been assigned to
                             4681 ; 54   |// it (e.g. it may be a System Drive block), or it may have both a Bad Block
                             4682 ; 55   |// and an RBlock assigned to it.
                             4683 ; 56   |///////////////////////////////////////////////////////////////////////////
                             4684 ; 57   |#define BBTBL_FREE (-1)
                             4685 ; 58   |#define BBTBL_NOT_ASSIGNED (-1)
                             4686 ; 59   |//sdk3.110 requirement said to leave this as 14 and 10 bits but when we add renesas this m
                                  ust change to 15 and 9 bits as described in next comment.
                             4687 ; 60   |typedef struct NandBbTableEntryStruct {  // 16k quantity of superblocks on 2Gbit renesas, 
                                  so first field below needs max value of 16383. 2^14 -1 = 16383.  
                             4688 ; 61   |    INT iBBPhysicalAddress       :   15;    // Physical address of Bad Block  // Dec19'05:
                                   changed both from INT to WORD & changed bitsz from 14 to 15 and 10 to 9 to prevent Renesas defect
                                  . Jan18'06 back to INT solves 9793 in sdk2.610 prerelease. No defect in sdk3.
                             4689 ; 62   |                                            // (relative to Chip) || BBTBL_FREE
                             4690 ; 63   |    INT iRblkIdx                 :   9;    // Index of Region's assigned Rblock. num R blk
                                  s is 1.5% of tot blocks by default so 9 signed bits is enough to store max which is <256. 
                             4691 ; 64   |                                            // (for Data Drive) || BBTBL_NOT_ASSIGNED
                             4692 ; 65   | 
                             4693 ; 66   |} NAND_BBTABLE_ENTRY_T;
                             4694 ; 67   |// These allow declarations and externs to use the define below and we
                             4695 ; 68   |// specify _X or _Y here only. If X, BBTable defaults to x_sys cluster.
                             4696 ; 69   |// If _Y used below, BBTable section will default to y_extra cluster.
                             4697 ; 70   |#define NAND_BBTABLE_ENTRY      NAND_BBTABLE_ENTRY_T _Y
                             4698 ; 71   |#define P_NAND_BBTABLE_ENTRY    NAND_BBTABLE_ENTRY_T _Y *
                             4699 ; 72   |#define P_NAND_BBTABLE          NAND_BBTABLE_ENTRY_T _Y *
                             4700 ; 73   |
                             4701 ; 74   |
                             4702 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             4703 ; 76   |//  UPDATES TABLE
                             4704 ; 77   |//
                             4705 ; 78   |// Each Region has an Updates Table (UTbl), which is a subset of the Data Drive's
                             4706 ; 79   |// Master Updates Table.
                             4707 ; 80   |//
                             4708 ; 81   |// The Region knows the max size (iNumUBlks), which is exactly the number of UBlocks
                             4709 ; 82   |// in the Region, and has a pointer to the table entries, an array of 
                             4710 ; 83   |// NAND_UPDATES_ENTRYs.
                             4711 ; 84   |//
                             4712 ; 85   |// The NAND_UPDATES_ENTRY has two fields:
                             4713 ; 86   |//
                             4714 ; 87   |// iHBlkAddr is the physical address (14 bits worth, relative to the chip) of the 
                             4715 ; 88   |// HBlock which is being Updated.  If the Update Entry is not is use, this value is
                             4716 ; 89   |// UTBL_ERASED, if the UBlock pointed to by iUBlkIdx has been erased, or UTBL_FREE.
                             4717 ; 90   |// 
                             4718 ; 91   |// iUBlkIdx is the index of the UBlock which is being used to Update the HBlock.
                             4719 ; 92   |// This value is always present and unique, even if the Update is marked as UTBL_FREE
                             4720 ; 93   |// or UTBL_ERASED.  That is, THERE IS ALWAYS AN ENTRY FOR EVERY UBLOCK IN THE UPDATES
                             4721 ; 94   |// TABLE.  This allows us to search for an unused UBlock, by finding a UTbl entry
                             4722 ; 95   |// with iHBlkAddr set to UTBL_FREE or UTBL_ERASED and grabbing the iUBlkIdx field's
                             4723 ; 96   |// value.
                             4724 ; 97   |//
                             4725 ; 98   |// To get the physical address of the UBlock, add UBlkIdx to pRegion->iUBlksPhysAddr.
                             4726 ; 99   |//
                             4727 ; 100  |// Entries in the UTbl are kept sorted by the iHBlkAddr fields (UTBL_FREE and 
                             4728 ; 101  |// UTBL_ERASED are moved to the end of the table).  This allows fast searches for
                             4729 ; 102  |// HBlk addresses, an operation which occurs very often.
                             4730 ; 103  |//
                             4731 ; 104  |// When a new entry  is added to the table, it must be inserted into the sort order,
                             4732 ; 105  |// which may require moving some other entries down.
                             4733 ; 106  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4734 ; 107  |// See also: Update Sectors Map
                             4735 ; 108  |//
                             4736 ; 109  |/////////////////////////////////////////////////////////////////////////////////
                             4737 ; 110  |// Any iHBlkAddr value >= UTBL_SPECIAL_CODES is a special code, instead of an address
                             4738 ; 111  |#define UPDATE_TABLE_SPECIAL_CODES (0x3ffd)
                             4739 ; 112  |#define UPDATE_TABLE_ERASED (0x3fff)
                             4740 ; 113  |#define UPDATE_TABLE_FREE   (0x3ffe)
                             4741 ; 114  |#define UPDATE_TABLE_BAD    (0x3ffd)
                             4742 ; 115  |
                             4743 ; 116  |
                             4744 ; 117  |
                             4745 ; 118  |typedef struct {
                             4746 ; 119  |  WORD wHBlkAddr                 :   14;    // Physiscal address of Home Block
                             4747 ; 120  |                                            // (relative to chip) being Updated
                             4748 ; 121  |                                            // || UPDATE_TABLE_FREE  || UPDATE_TABLE_BAD
                             4749 ; 122  |  WORD wUBlkIdx                  :   10;    // Index of Region's assigned UBlock
                             4750 ; 123  |                                            // ALL UBlk INDICES ARE PRESENT,
                             4751 ; 124  |                                            // even if iHBlkAddr = UTBL_FREE || UTBL_ERASE
                                  D
                             4752 ; 125  |} NAND_UPDATES_ENTRY, * P_NAND_UPDATES_ENTRY, * P_UTABLE;
                             4753 ; 126  |
                             4754 ; 127  |
                             4755 ; 128  |
                             4756 ; 129  |/////////////////////////////////////////////////////////////////////////////////
                             4757 ; 130  |// NAND Region Info Struct
                             4758 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                             4759 ; 132  |typedef struct RegionInfoStruct {
                             4760 ; 133  |
                             4761 ; 134  |  int                                iChip;                // Index of NAND Chip containin
                                  g this Region
                             4762 ; 135  |  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR   pNANDDesc;            // NAND descriptor
                             4763 ; 136  |  P_NAND_PARAMETERS_DESCRIPTOR       pNANDParms;           // NAND parameters (shortcut)
                             4764 ; 137  |  P_LOGICAL_DRIVE_DESCRIPTOR         pLogicalDrive;        // Pointer back to our grandpar
                                  ent
                             4765 ; 138  |
                             4766 ; 139  |  LOGICAL_DRIVE_TYPE                 eDriveType;           // Some System Drive, or Data D
                                  rive
                             4767 ; 140  |  WORD                               wTag;                 // Drive Tag
                             4768 ; 141  |
                             4769 ; 142  |  int                                iStartPhysAddr;       // Starting Block number for Re
                                  gion
                             4770 ; 143  |                                                           // relative to chip 
                             4771 ; 144  |  int                                iNumBlks;             // Size, in blocks, of whole Re
                                  gion
                             4772 ; 145  |                                                           // Size includes embedded Bad B
                                  locks
                             4773 ; 146  |
                             4774 ; 147  |
                             4775 ; 148  |            ////////////////////////////////////////////////////////////////
                             4776 ; 149  |            // The following elements, relating to HBlocks, are set and used
                             4777 ; 150  |            // by the Data Drive, only.  They are included in this structure
                             4778 ; 151  |            // for convenience.
                             4779 ; 152  |
                             4780 ; 153  |  int                                iHBlksPhysAddr;       // Starting Physical Block numb
                                  er for 
                             4781 ; 154  |                                                           // Home Blocks.
                             4782 ; 155  |  int                                iNumHBlks;            // Size, in blocks, of Home Blo
                                  cks area.
                             4783 ; 156  |                                                           // Size includes embedded Bad B
                                  locks
                             4784 ; 157  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4785 ; 158  |  int                                iHBlksLogBlkAddr;     // Starting Logical Block numbe
                                  r
                             4786 ; 159  |
                             4787 ; 160  |  DWORD                              dwHBlks1stLogSector;  // Staring Logical Sector Numbe
                                  r
                             4788 ; 161  |  DWORD                              dwNumHSectors;        // Number of Sectors in the HBl
                                  ocks in
                             4789 ; 162  |                                                           // this Region. (Includes Bad B
                                  locks.)
                             4790 ; 163  |            ////////////////////////////////////////////////////////////////
                             4791 ; 164  |
                             4792 ; 165  |
                             4793 ; 166  |  int                                iUBlksPhysAddr;       // Starting Block number for UB
                                  locks
                             4794 ; 167  |  int                                iNumUBlks;            // For non-Data Drive, should =
                                   0
                             4795 ; 168  |                                                           // Size includes embedded Bad B
                                  locks
                             4796 ; 169  |  P_UTABLE                           pUTable;              // Pointer to Updates Table (ar
                                  ray)
                             4797 ; 170  |  WORD                               *pFreshList;          // Pointer to Updates Fresh Lis
                                  t for Region
                             4798 ; 171  |  WORD                               wFreshListHead;       // Head pointer (index) for Fre
                                  shList
                             4799 ; 172  |
                             4800 ; 173  |  int                                iRBlksPhysAddr;       // Starting Block number for RB
                                  locks
                             4801 ; 174  |  int                                iNumRBlks;            // For non-Data Drive, should =
                                   0
                             4802 ; 175  |                                                           // Size includes embedded Bad B
                                  locks
                             4803 ; 176  |
                             4804 ; 177  |
                             4805 ; 178  |  int                                iNumBadBlks;          // Number Bad Blocks in this Re
                                  gion
                             4806 ; 179  |  int                                iMaxBadBlks;          // Max for this Region (i.e. ho
                                  w
                             4807 ; 180  |                                                           // much padding is there for "n
                                  ew"
                             4808 ; 181  |                                                           // Bad Blocks?)
                             4809 ; 182  |
                             4810 ; 183  |  P_NAND_BBTABLE                     pBBTable;             // Table of Bad Blocks for this
                                   Region
                             4811 ; 184  |                                                           // (This is just a pointer into
                                   a
                             4812 ; 185  |                                                           // subset of the BadBlocksTable
                                   in
                             4813 ; 186  |                                                           // a (the) NAND_MEDIA_INFO stru
                                  cture
                             4814 ; 187  |                                                           // (below).
                             4815 ; 188  |  BOOL                               bRegionInfoDirty;     // If TRUE, the bad block infor
                                  mation
                             4816 ; 189  |                                                           // has updates                 
                                                                            
                             4817 ; 190  |} NAND_REGION_INFO, *P_NAND_REGION_INFO;
                             4818 ; 191  |
                             4819 ; 192  |/////////////////////////////////////////////////////////////////////////////////
                             4820 ; 193  |// NAND Media Physial Media Struct
                             4821 ; 194  |//
                             4822 ; 195  |// This structure contains all of the information about a (the) NAND Media.
                             4823 ; 196  |// It has a table of all of the Chips' NANDDescriptors, the addresses of the
                             4824 ; 197  |// Configuration Block for each chip, a table of all of the Regions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4825 ; 198  |// on those chips, and a table of all of the Bad Blocks on those chips.
                             4826 ; 199  |//
                             4827 ; 200  |// There will typically be *one* of these structures, and it will be pointed 
                             4828 ; 201  |// to by the "PhysMediaTypeStruct" element of the LOGICAL_MEDIA_DESCRIPTOR and 
                             4829 ; 202  |// LOGICAL_DRIVE_DESCRIPTOR's for the NAND Media.
                             4830 ; 203  |//
                             4831 ; 204  |// Note: The array sizes, MAX_NAND_CHIPS, MAX_NAND_REGIONS and 
                             4832 ; 205  |// NAND_MEDIA_MAX_BAD_BLOCKS are meant to be Project-specific.  So the actual
                             4833 ; 206  |// arrays must be allocated in a Project-specific source (e.g. project.c).
                             4834 ; 207  |// The NAND_MEDIA_INFO (assuming there's only one) can also be allocated there,
                             4835 ; 208  |// with initial values pointing to the arrays (and initial counts of zero).
                             4836 ; 209  |//
                             4837 ; 210  |/////////////////////////////////////////////////////////////////////////////////
                             4838 ; 211  |
                             4839 ; 212  |typedef struct {
                             4840 ; 213  |
                             4841 ; 214  |  int                                   iNumNANDChips;
                             4842 ; 215  |  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR      pNANDDesc;          // NANDDesc[MAX_NAND_CHIPS]
                             4843 ; 216  |
                             4844 ; 217  |  int                                   ConfigBlkAddr[MAX_CHIPS];     // ConfigBlkAddr[MAX
                                  _NAND_CHIPS]
                             4845 ; 218  |
                             4846 ; 219  |  int                                   iNumRegions;
                             4847 ; 220  |  P_NAND_REGION_INFO                    pRegionInfo;        // RegionInfo[MAX_NAND_REGIONS
                                  ];
                             4848 ; 221  |
                             4849 ; 222  |  int                                   iNumBadBlks;
                             4850 ; 223  |  P_NAND_BBTABLE                        pMasterBBTable;     // MasterBBTable[NAND_MEDIA_MA
                                  X_BAD_BLOCKS]
                             4851 ; 224  |
                             4852 ; 225  |} NAND_MEDIA_INFO, * P_NAND_MEDIA_INFO;
                             4853 ; 226  |
                             4854 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                             4855 ; 228  |// Config Block Region Info
                             4856 ; 229  |/////////////////////////////////////////////////////////////////////////////////
                             4857 ; 230  |typedef struct {
                             4858 ; 231  |  LOGICAL_DRIVE_TYPE         eDriveType;       // Some System Drive, or Data Drive
                             4859 ; 232  |  WORD                       wTag;              // Drive Tag
                             4860 ; 233  |
                             4861 ; 234  |//  DataDriveMultiNANDConfig   eMultiNANDConfig; // CONCATENATED_MULTI_NAND | STRIPED_MULT
                                  I_NAND
                             4862 ; 235  |
                             4863 ; 236  |//  DataDriveAddressing        eAddressing;      // NAND_LINEAR_ADDRESSING | NAND_MULTI_PL
                                  ANE_ADDRESSING
                             4864 ; 237  |
                             4865 ; 238  |  int                        iNumBlks;         // Size, in blocks, of whole Region
                             4866 ; 239  |                                               // Size includes embedded Bad Blocks
                             4867 ; 240  |
                             4868 ; 241  |  int                        iNumUBlks;        // For non-Data Drive, this should = 0
                             4869 ; 242  |                                               // Size includes embedded Bad Blocks
                             4870 ; 243  |
                             4871 ; 244  |  int                        iNumRBlks;        // For non-Data Drive, this should = 0
                             4872 ; 245  |                                               // Size includes embedded Bad Blocks
                             4873 ; 246  |
                             4874 ; 247  |} NAND_CFG_BLK_REGION_INFO, * P_NAND_CFG_BLK_REGION_INFO;
                             4875 ; 248  |
                             4876 ; 249  |
                             4877 ; 250  |
                             4878 ; 251  |
                             4879 ; 252  |/////////////////////////////////////////////////////////////////////////////////
                             4880 ; 253  |// Configuration Block Info Sector
                             4881 ; 254  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4882 ; 255  |// Note: The array size, NAND_MEDIA_MAX_REGIONS, is meant to be project-specfic.
                             4883 ; 256  |// So, in this structure, a array of size, 1, is defined.  This structure will
                             4884 ; 257  |// not typically be allocated anywhere - it's just used to cast a pointer onto
                             4885 ; 258  |// a Sector buffer.  So, with the array at the end of the structure, we can merrily
                             4886 ; 259  |// read beyond the stated size (1), as long as we don't go off the end of the
                             4887 ; 260  |// Sector.  A NAND_CFG_BLK_REGION_INFO is only 4 WORDs (12 bytes) long, so we
                             4888 ; 261  |// can go on for 41 Regions before we run off the edge.  That's way more Regions 
                             4889 ; 262  |// than we should ever have.  (So the day this statement becomes false, I'll
                             4890 ; 263  |// have to come back and fix this some other way.)
                             4891 ; 264  |//
                             4892 ; 265  |/////////////////////////////////////////////////////////////////////////////////
                             4893 ; 266  |typedef struct {
                             4894 ; 267  |  int                        iMagicCookie;
                             4895 ; 268  |  int                        iVersionNum;
                             4896 ; 269  |
                             4897 ; 270  |  int                        iNumBadBlks;        // Number Bad Blocks on this Chip
                             4898 ; 271  |
                             4899 ; 272  |  int                        iNumRegions;
                             4900 ; 273  |  NAND_CFG_BLK_REGION_INFO   Regions[1];         // Regions[NAND_MEDIA_MAX_REGIONS]
                             4901 ; 274  |
                             4902 ; 275  |} NAND_CFG_BLK_INFO, * P_NAND_CFG_BLK_INFO;
                             4903 ; 276  |
                             4904 ; 277  |#define RelativeSectorToPhysical(pNandParameters, iBlkNum, iRelSector) \ 
                             4905 ; 278  |     ((iRelSector) + (iBlkNum) * ((pNandParameters)->wNumberSectorsPerBlock))
                             4906 ; 279  |
                             4907 ; 280  |///////////////////////////////////////////////////////////////////////////////
                             4908 ; 281  |// Error codes
                             4909 ; 282  |///////////////////////////////////////////////////////////////////////////////
                             4910 ; 283  |
                             4911 ; 284  |///////////////////////////////////////////////////////////////////////////////
                             4912 ; 285  |// Typedefs
                             4913 ; 286  |///////////////////////////////////////////////////////////////////////////////
                             4914 ; 287  |
                             4915 ; 288  |
                             4916 ; 289  |///////////////////////////////////////////////////////////////////////////////
                             4917 ; 290  |// Prototypes
                             4918 ; 291  |///////////////////////////////////////////////////////////////////////////////
                             4919 ; 292  |RETCODE _reentrant NANDCalculateCompleteEccSync(
                             4920 ; 293  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4921 ; 294  |    P_SECTOR_BUFFER pBuffer);
                             4922 ; 295  |
                             4923 ; 296  |#if 0
                             4924 ; 297  |// No longer used
                             4925 ; 298  |RETCODE _reentrant NANDCalculatePartialEccSync(
                             4926 ; 299  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4927 ; 300  |    P_SECTOR_BUFFER pBuffer);
                             4928 ; 301  |
                             4929 ; 302  |RETCODE _reentrant NANDStartEcc(
                             4930 ; 303  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4931 ; 304  |    P_SECTOR_BUFFER pBuffer,
                             4932 ; 305  |    WORD wWhich);
                             4933 ; 306  |#endif
                             4934 ; 307  |RETCODE _reentrant NANDGetEccStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4935 ; 308  |
                             4936 ; 309  |RETCODE _reentrant NANDWritePageStartDmaSync(
                             4937 ; 310  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4938 ; 311  |    WORD wAbsoluteSectorNum,
                             4939 ; 312  |    P_SECTOR_BUFFER pBuffer);
                             4940 ; 313  |RETCODE _reentrant NANDGetDmaStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4941 ; 314  |RETCODE _reentrant NANDWriteStartPageProgramSync(
                             4942 ; 315  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4943 ; 316  |RETCODE _reentrant NANDWriteStartCachePageProgramSync(
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4944 ; 317  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4945 ; 318  |RETCODE _reentrant NANDWriteStartMultiPageProgramSync(
                             4946 ; 319  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4947 ; 320  |RETCODE _reentrant NANDGetPageProgramStatus(
                             4948 ; 321  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4949 ; 322  |RETCODE _reentrant NANDGetCachePageProgramStatus(
                             4950 ; 323  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             4951 ; 324  |    WORD * wStatus);
                             4952 ; 325  |
                             4953 ; 326  |RETCODE _reentrant NANDSetSectorLba(
                             4954 ; 327  |    WORD wBlockNumber,
                             4955 ; 328  |    WORD wSectorOffset,
                             4956 ; 329  |    P_SECTOR_BUFFER pBuffer);
                             4957 ; 330  |
                             4958 ; 331  |RETCODE NANDRecoverHardwareFromEraseFailure(
                             4959 ; 332  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             4960 ; 333  |
                             4961 ; 334  |///////////////////////////////////////////////////////////////////////////////
                             4962 ; 335  |// Global variables
                             4963 ; 336  |///////////////////////////////////////////////////////////////////////////////
                             4964 ; 337  |extern LOGICAL_MEDIA_API NANDMediaApi;
                             4965 ; 338  |extern NAND_MEDIA_INFO g_NANDMediaInfo[];
                             4966 ; 339  |
                             4967 ; 340  |extern LOGICAL_DRIVE_API NANDDataDriveApi;
                             4968 ; 341  |extern LOGICAL_DRIVE_API NANDSystemDriveApi;
                             4969 ; 342  |
                             4970 ; 343  |
                             4971 ; 344  |#endif // #ifndef _NANDDDI_H
                             4972 
                             4974 
                             4975 ; 20   |#include "NANDHal.h"
                             4976 
                             4978 
                             4979 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4980 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             4981 ; 3    |//
                             4982 ; 4    |// Filename:     NANDHal.h
                             4983 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal routines.
                             4984 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4985 ; 7    |
                             4986 ; 8    |#ifndef _NANDHAL_H
                             4987 ; 9    |#define _NANDHAL_H
                             4988 ; 10   |
                             4989 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             4990 ; 12   |// Includes
                             4991 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             4992 ; 14   |
                             4993 ; 15   |#include "errors.h"
                             4994 ; 16   |#include "sectordef.h"
                             4995 ; 17   |
                             4996 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             4997 ; 19   |// Definitions
                             4998 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             4999 ; 21   |// Can disable ECC interrupt for testing
                             5000 ; 22   |#if 0 
                             5001 ; 23   |#define ECC_POLLING
                             5002 ; 24   |#endif
                             5003 ; 25   |
                             5004 ; 26   |#define RSECC_DELAY_COUNTER_VALUE 1000
                             5005 ; 27   |
                             5006 ; 28   |//-------------------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5007 ; 29   |// these byte values are also seen in device ID in nandtables.h and nanddesc.c for bootmgr
                                  .
                             5008 ; 30   |#define STMakerID    0x20
                             5009 ; 31   |#define HynixMakerID 0xAD
                             5010 ; 32   |
                             5011 ; 33   |#define SAMSUNG_MAKER_ID 0xEC
                             5012 ; 34   |#define MICRON_MAKER_ID   0x2c
                             5013 ; 35   |
                             5014 ; 36   |#define ToshibaMakerID        0x98
                             5015 ; 37   |#define RENESAS_MAKER_ID  0x07
                             5016 ; 38   |//#define SandiskMakerID 0x000045
                             5017 ; 39   |//-------------------------------
                             5018 ; 40   |// place the tables in X space.
                             5019 ; 41   |#define NAND_TABLES_MEMSPACE _X
                             5020 ; 42   |
                             5021 ; 43   |#define NANDHAL_MEM_X _X
                             5022 ; 44   |#define NANDHAL_MEM_Y _Y
                             5023 ; 45   |#define NANDHAL_MEM NANDHAL_MEM_Y    // ***** IF THIS CHANGES, YOU MUST UPDATE NANDHal.inc
                                   to MATCH!!!!
                             5024 ; 46   |
                             5025 ; 47   |#define LEAVE_CE_PIN_ASSERTED 0  // formerly FALSE
                             5026 ; 48   |#define DEASSERT_CE_PIN       1  // formerly TRUE
                             5027 ; 49   |
                             5028 ; 50   |// These are for readfunctions -- to ease readability
                             5029 ; 51   |#define wColumnByteZero 0
                             5030 ; 52   |#define wColumnAddrZero 0
                             5031 ; 53   |#define wRowByteZero    0
                             5032 ; 54   |#define wRowByteOne     1
                             5033 ; 55   |#define wRowAddrZero    0
                             5034 ; 56   |#define wReadZeroBytes  0
                             5035 ; 57   |#define wReadOneByte    1
                             5036 ; 58   |#define wReadTwoBytes   2
                             5037 ; 59   |#define wReadThreeBytes 3
                             5038 ; 60   |#define wReadSixBytes   6
                             5039 ; 61   |#define wByteOffsetZero 0
                             5040 ; 62   |
                             5041 ; 63   |// Timeouts -- TBD -- These either get replaced altogether, or go somewhere else.
                             5042 ; 64   |// WaitForREADY() timeout counts
                             5043 ; 65   |// These control how long we will wait for the NAND to finish some internal operation
                             5044 ; 66   |// (e.g. Read Page (to cache), Program Page (from cache), Erase Block, Reset).
                             5045 ; 67   |// NOTE: For timeouts, each "count" is on the order of 50 nsec.
                             5046 ; 68   |// (<10 instructions, at a few 10s of nanosecs each)
                             5047 ; 69   |// The settings below are probably very conservative, but still short in human time
                             5048 ; 70   |// (e.g. 2000000 counts is approx. 100 msec)
                             5049 ; 71   |#define NAND_READ_PAGE_TIMEOUT          (2000000)
                             5050 ; 72   |#define NAND_READ_REDUNDANT_TIMEOUT     (2000000)
                             5051 ; 73   |#define NAND_RESET_TIMEOUT              (2000000)
                             5052 ; 74   |#define NAND_WRITE_PAGE_TIMEOUT         (2000000)
                             5053 ; 75   |#define NAND_ERASE_BLOCK_TIMEOUT        (2000000)
                             5054 ; 76   |
                             5055 ; 77   |// Read Status Register Masks
                             5056 ; 78   |// commented out with definition of new API
                             5057 ; 79   |// #define NAND_SR_PASS_MASK           0x000001
                             5058 ; 80   |// #define NAND_SR_CACHEPASS_MASK      0x000002
                             5059 ; 81   |// #define NAND_SR_READY_MASK          0x000060
                             5060 ; 82   |// //#define NAND_SR_READY_MASK          0x000040
                             5061 ; 83   |// #define NAND_SR_WRITEPROTECT_MASK   0x000080
                             5062 ; 84   |
                             5063 ; 85   |// new definitions for standardized API
                             5064 ; 86   |#define NAND_STATUS_PASS_MASK                   0x000001
                             5065 ; 87   |#define NAND_STATUS_DISTRICT_0_PASS_MASK        0x000002
                             5066 ; 88   |#define NAND_STATUS_DISTRICT_1_PASS_MASK        0x000004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5067 ; 89   |#define NAND_STATUS_DISTRICT_2_PASS_MASK        0x000008
                             5068 ; 90   |#define NAND_STATUS_DISTRICT_3_PASS_MASK        0x000010
                             5069 ; 91   |#define NAND_STATUS_TRUE_READY_MASK             0x000020
                             5070 ; 92   |#define NAND_STATUS_CACHE_READY_MASK            0x000040
                             5071 ; 93   |#define NAND_STATUS_WRITE_PROTECT_MASK          0x000080
                             5072 ; 94   |#define NAND_STATUS_CACHE_PREVIOUS_PASS_MASK    0x000100
                             5073 ; 95   |// The next 3 are used for Renesas part.
                             5074 ; 96   |#define NAND_STATUS_PROGRAM_CHECK_PASS_MASK     0x000008
                             5075 ; 97   |#define NAND_STATUS_ERASE_CHECK_PASS_MASK       0x000010
                             5076 ; 98   |#define NAND_STATUS_ECC_CORRECTABLE_MASK        0x000020
                             5077 ; 99   |#define NAND_STATUS_INVALID_MASK                0x800000
                             5078 ; 100  |
                             5079 ; 101  |#define NAND_STATUS_PASS_VALUE                  0x000001
                             5080 ; 102  |#define NAND_STATUS_DISTRICT_0_PASS_VALUE       0x000002
                             5081 ; 103  |#define NAND_STATUS_DISTRICT_1_PASS_VALUE       0x000004
                             5082 ; 104  |#define NAND_STATUS_DISTRICT_2_PASS_VALUE       0x000008
                             5083 ; 105  |#define NAND_STATUS_DISTRICT_3_PASS_VALUE       0x000010
                             5084 ; 106  |#define NAND_STATUS_TRUE_READY_VALUE            0x000020
                             5085 ; 107  |#define NAND_STATUS_CACHE_READY_VALUE           0x000040
                             5086 ; 108  |#define NAND_STATUS_WRITE_PROTECT_VALUE         0x000080
                             5087 ; 109  |#define NAND_STATUS_CACHE_PREVIOUS_PASS_VALUE   0x000100
                             5088 ; 110  |
                             5089 ; 111  |#define NAND_STATUS_PROGRAM_CHECK_PASS_VALUE    0x000008
                             5090 ; 112  |#define NAND_STATUS_ERASE_CHECK_PASS_VALUE      0x000010
                             5091 ; 113  |#define NAND_STATUS_ECC_CORRECTABLE             0x000020
                             5092 ; 114  |
                             5093 ; 115  |#define WP_NAND_INTERNAL    0   // write protect line for internal
                             5094 ; 116  |#define WP_EXTERNAL         1   // write protect line for external
                             5095 ; 117  |
                             5096 ; 118  |#define MakerIDMask 0x0000ff
                             5097 ; 119  |#define INVALID_SECTOR_ADDRESS     (0xFFFFF0) // FFFFF0 is a dummy value intended to be an
                                   invalid sector address
                             5098 ; 120  |
                             5099 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             5100 ; 122  |//  Macros
                             5101 ; 123  |/////////////////////////////////////////////////////////////////////////////////
                             5102 ; 124  |
                             5103 ; 125  |//////////////////////////////////////////
                             5104 ; 126  |// NAND-Specific Physical Media structures
                             5105 ; 127  |//////////////////////////////////////////
                             5106 ; 128  |typedef enum {
                             5107 ; 129  |  // NOTE: NandHalInit checks for zero to see if initialization needed.
                             5108 ; 130  |  // Therefore, do not use a ZERO in the typedef.
                             5109 ; 131  |  eNandTypeUnknown = 0, // use for init
                             5110 ; 132  |  eNandType1 = 1,
                             5111 ; 133  |  eNandType2 = 2,
                             5112 ; 134  |  eNandType4 = 4,
                             5113 ; 135  |  eNandType5 = 5,
                             5114 ; 136  |  eNandType6 = 6,
                             5115 ; 137  |  eNandType7 = 7
                             5116 ; 138  |} NAND_TYPE;
                             5117 ; 139  |
                             5118 ; 140  |typedef enum {
                             5119 ; 141  |  eNandLockStateFree   = 0,
                             5120 ; 142  |  eNandLockStateLocked = 1
                             5121 ; 143  |} NAND_LOCK_STATE;
                             5122 ; 144  |
                             5123 ; 145  |typedef enum {
                             5124 ; 146  |    eNandProgCmdReadID                    = 0x000090,
                             5125 ; 147  |    eNandProgCmdReadID2                   = 0x000091,
                             5126 ; 148  |    eNandProgCmdReadStatus                = 0x000070,
                             5127 ; 149  |    eNandProgCmdReset                     = 0x0000ff,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5128 ; 150  |    eNandProgCmdSerialDataInput           = 0x000080,   // Page Program/Cache Program
                             5129 ; 151  |    eNandProgCmdRead1                     = 0x000000,   // Read or Read for CopyBack
                             5130 ; 152  |    eNandProgCmdRead1_2ndCycle            = 0x000030,   // Second Cycle for Read (Type 2 N
                                  ANDs)
                             5131 ; 153  |    eNandProgCmdReadForCopyBack_2ndCycle  = 0x000035,   // Second Cycle for Read for Copy 
                                  Back
                             5132 ; 154  |    eNandProgCmdReadForCacheCopyback_2nd  = 0x00003A,
                             5133 ; 155  |    eNandProgCmdRead2                     = 0x000001,
                             5134 ; 156  |    eNandProgCmdRead3                     = 0x000050,
                             5135 ; 157  |    eNandProgCmdPageProgram               = 0x000010,   // Second cycle for wSerialDataInp
                                  ut for Page Program
                             5136 ; 158  |    eNandProgCmdCacheProgram              = 0x000015,   // Second cycle for wSerialDataInp
                                  ut for Cache Program
                             5137 ; 159  |    eNandProgCmdCopyBackProgram           = 0x000085,
                             5138 ; 160  |    eNandProgCmdCopyBack2Program          = 0x00008C,
                             5139 ; 161  |    eNandProgCmdCopyBackProgram_2ndCycle  = 0x000010,   // Second cycle for Copy Back Prog
                                  ram
                             5140 ; 162  |    eNandProgCmdBlockErase                = 0x000060,
                             5141 ; 163  |    eNandProgCmdBlockErase_2ndCycle       = 0x0000d0,
                             5142 ; 164  |    eNandProgCmdRandomDataIn              = 0x000085,
                             5143 ; 165  |    eNandProgCmdRandomDataOut             = 0x000005,
                             5144 ; 166  |    eNandProgCmdRandomDataOut_2ndCycle    = 0x0000E0,
                             5145 ; 167  |    eNandProgCmdReadMultiPlaneStatus      = 0x000071,   // MLC MultiPlane
                             5146 ; 168  |    eNandProgCmdReadErrorStatus           = 0x000072,   // MLC Single Plane Error Status
                             5147 ; 169  |    eNandProgCmdReadMultiPlaneErrorStatus = 0x000073,   // MLC MultiPlane Error Status.
                             5148 ; 170  |    eNandProgCmdMultiPlaneWrite           = 0x000011,
                             5149 ; 171  |    eNandProgCmdStatusModeReset           = 0x00007F,
                             5150 ; 172  |    eNandProgCmdMultiPlaneRead_2ndCycle   = 0x000031,
                             5151 ; 173  |    eNandProgCmdPageDataOutput            = 0x000006,
                             5152 ; 174  |    eNandProgCmdMultiPlaneVerifyErased    = 0x0000D3,
                             5153 ; 175  |    eNandProgCmdMultiPlaneBlockErase      = 0x00ffff,   // TBD !!! Need code for this.
                             5154 ; 176  |    eNandProgCmdNone                      = 0x7FFFFF,   // invalid entry
                             5155 ; 177  |    eNandProgCmdDummyProgram              = 0x6FFFFF    // invalid entry
                             5156 ; 178  |} NAND_PROGRAM_CODES;
                             5157 ; 179  |
                             5158 ; 180  |
                             5159 ; 181  |
                             5160 ; 182  |// NAND Physical Media API functions
                             5161 ; 183  |typedef RETCODE (*P_HAL_READ_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD, P_SECTO
                                  R_BUFFER);
                             5162 ; 184  |typedef RETCODE (*P_HAL_READ_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag *, WOR
                                  D, P_SECTOR_BUFFER, BOOL);
                             5163 ; 185  |typedef RETCODE (*P_HAL_ENABLE_WRITES_FUNCTION)(WORD);
                             5164 ; 186  |typedef RETCODE (*P_HAL_DISABLE_WRITES_FUNCTION)(WORD);
                             5165 ; 187  |typedef RETCODE (*P_HAL_WRITE_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD, P_SECT
                                  OR_BUFFER);
                             5166 ; 188  |typedef RETCODE (*P_HAL_WRITE_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag *, WO
                                  RD, P_SECTOR_BUFFER);
                             5167 ; 189  |typedef RETCODE (*P_HAL_ERASE_BLOCK_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                             5168 ; 190  |typedef RETCODE (*P_HAL_ERASE_BLOCK_ASYNC_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                             5169 ; 191  |typedef RETCODE (*P_HAL_COPY_SECTORS_FUNCTION)(struct NandPhysicalMediaTag *, WORD, WORD, 
                                  WORD);
                             5170 ; 192  |typedef RETCODE (*P_HAL_GET_STATUS_FUNCTION)(struct NandPhysicalMediaTag *, WORD *, WORD);
                                  
                             5171 ; 193  |typedef RETCODE (*P_HAL_SETUP_WRITE_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                                  
                             5172 ; 194  |typedef RETCODE (*P_HAL_SETUP_WRITE_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag
                                   *, WORD);
                             5173 ; 195  |typedef RETCODE (*P_HAL_SEND_SECTOR_DATA_FUNCTION)(struct NandPhysicalMediaTag *, P_SECTOR
                                  _BUFFER);
                             5174 ; 196  |typedef RETCODE (*P_HAL_SEND_PROGRAM_COMMAND_FUNCTION)(struct NandPhysicalMediaTag *, NAND
                                  _PROGRAM_CODES);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5175 ; 197  |typedef RETCODE (*P_HAL_GET_DMA_STATUS_FUNCTION)(struct NandPhysicalMediaTag *);
                             5176 ; 198  |typedef RETCODE (*P_HAL_LOCK_INTERFACE_PORT_FUNCTION)(void);
                             5177 ; 199  |typedef RETCODE (*P_HAL_RELEASE_INTERFACE_PORT_FUNCTION)(void);
                             5178 ; 200  |typedef RETCODE (*P_HAL_LOCK_NAND_FUNCTION)(struct NandPhysicalMediaTag *);
                             5179 ; 201  |typedef RETCODE (*P_HAL_RELEASE_NAND_FUNCTION)(struct NandPhysicalMediaTag *);
                             5180 ; 202  |typedef RETCODE (*P_HAL_START_COMPUTE_ECC_FUNCTION)(P_SECTOR_BUFFER,WORD);
                             5181 ; 203  |typedef RETCODE (*P_HAL_COMPUTE_ECC_GET_STATUS_FUNCTION)(void);
                             5182 ; 204  |typedef RETCODE (*P_HAL_CORRECT_ECC_FUNCTION)(P_SECTOR_BUFFER);
                             5183 ; 205  |typedef BOOL    (*P_BUSYDONE_CALLBACK_FUNCTION)(int, void*);
                             5184 ; 206  |typedef RETCODE (*P_HAL_MSW_SECTOR_COMMIT)(struct NandPhysicalMediaTag *);
                             5185 ; 207  |typedef RETCODE (*P_HAL_MSW_PAGE_COMMIT)(struct NandPhysicalMediaTag *);
                             5186 ; 208  |
                             5187 ; 209  |
                             5188 ; 210  |typedef struct {
                             5189 ; 211  |    WORD wReadSectorCodeBank;
                             5190 ; 212  |    P_HAL_READ_SECTOR_FUNCTION pReadSector;
                             5191 ; 213  |    WORD wReadSectorRedundantCodeBank;
                             5192 ; 214  |    P_HAL_READ_SECTOR_REDUNDANT_FUNCTION pReadSectorRedundant;
                             5193 ; 215  |    WORD wGetStatusCodeBank;
                             5194 ; 216  |    P_HAL_GET_STATUS_FUNCTION pGetStatus;
                             5195 ; 217  |    WORD wEnableWritesCodeBank;
                             5196 ; 218  |    P_HAL_ENABLE_WRITES_FUNCTION pEnableWrites;
                             5197 ; 219  |    WORD wDisableWritesCodeBank;
                             5198 ; 220  |    P_HAL_DISABLE_WRITES_FUNCTION pDisableWrites;
                             5199 ; 221  |    WORD wWriteSectorCodeBank;
                             5200 ; 222  |    P_HAL_WRITE_SECTOR_FUNCTION pWriteSector;
                             5201 ; 223  |    WORD wWriteSectorRedundantCodeBank;
                             5202 ; 224  |    P_HAL_WRITE_SECTOR_REDUNDANT_FUNCTION pWriteSectorRedundant;
                             5203 ; 225  |    WORD wEraseBlockCodeBank;
                             5204 ; 226  |    P_HAL_ERASE_BLOCK_FUNCTION pEraseBlock;
                             5205 ; 227  |    WORD wEraseBlockAsyncCodeBank;
                             5206 ; 228  |    P_HAL_ERASE_BLOCK_ASYNC_FUNCTION pEraseBlockAsync;
                             5207 ; 229  |    WORD wCopySectorsCodeBank;
                             5208 ; 230  |    P_HAL_COPY_SECTORS_FUNCTION pCopySectors;
                             5209 ; 231  |    WORD wSetupWriteSectorCodeBank;
                             5210 ; 232  |    P_HAL_SETUP_WRITE_SECTOR_FUNCTION pSetupWriteSector;
                             5211 ; 233  |    WORD wSetupWriteSectorRedundantCodeBank;
                             5212 ; 234  |    P_HAL_SETUP_WRITE_SECTOR_REDUNDANT_FUNCTION pSetupWriteSectorRedundant;
                             5213 ; 235  |    WORD wSendSectorDataCodeBank;
                             5214 ; 236  |    P_HAL_SEND_SECTOR_DATA_FUNCTION pSendSectorData;
                             5215 ; 237  |    WORD wSendProgramCommandCodeBank;
                             5216 ; 238  |    P_HAL_SEND_PROGRAM_COMMAND_FUNCTION pSendProgramCommand;
                             5217 ; 239  |    WORD wStartComputeECCCodeBank;
                             5218 ; 240  |    P_HAL_START_COMPUTE_ECC_FUNCTION pStartComputeECC;
                             5219 ; 241  |    WORD wComputeECCGetStatusCodeBank;
                             5220 ; 242  |    P_HAL_COMPUTE_ECC_GET_STATUS_FUNCTION pComputeECCGetStatus;
                             5221 ; 243  |    WORD wCorrectECCCodeBank;
                             5222 ; 244  |    P_HAL_CORRECT_ECC_FUNCTION pCorrectECC;
                             5223 ; 245  |    WORD wSectorCommitBank;
                             5224 ; 246  |    P_HAL_MSW_SECTOR_COMMIT pCommitSector;
                             5225 ; 247  |    WORD wPageCommitBank;
                             5226 ; 248  |    P_HAL_MSW_PAGE_COMMIT pCommitPage;
                             5227 ; 249  |
                             5228 ; 250  |} NANDHAL_API_DESCRIPTOR, * P_NANDHAL_API_DESCRIPTOR;
                             5229 ; 251  |
                             5230 ; 252  |typedef struct {
                             5231 ; 253  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             5232 ; 254  |    NAND_TYPE                NandType;
                             5233 ; 255  |
                             5234 ; 256  |    // SECTOR PARAMETERS
                             5235 ; 257  |    WORD wSectorTotalSize;              // Total sector size (Data + Redundant Area)
                             5236 ; 258  |    WORD wSectorDataSize;               // Number of Data Bytes per Page
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5237 ; 259  |    WORD wRedundantAreaSize;            // Number of Bytes per Redundant/Spare Area
                             5238 ; 260  |    // A physical Page may contain multiple Sectors.
                             5239 ; 261  |    // It is assumed that the number or Sectors per Page is always
                             5240 ; 262  |    // a power of 2 (i.e. 1,2,4...)
                             5241 ; 263  |    // The following elements are used to help address the Sectors within a Page
                             5242 ; 264  |    WORD wSectorToPageShift;            // Number of right shifts to compute Page Num from
                                   Sector Num
                             5243 ; 265  |    WORD wSectorInPageMask;             // Mask to extract "relative sector in Page" from 
                                  absolute Sector Num
                             5244 ; 266  |
                             5245 ; 267  |    // BLOCK PARAMETERS
                             5246 ; 268  |    WORD wSectorsToBlockShift;
                             5247 ; 269  |    WORD wSectorsPerBlockMask;
                             5248 ; 270  |    WORD wNumberSectorsPerBlock;
                             5249 ; 271  |    WORD wPagesPerBlock;
                             5250 ; 272  |
                             5251 ; 273  |    // DEVICE ADDRESSING PARAMETERS
                             5252 ; 274  |    WORD wNumColumnBytes;
                             5253 ; 275  |    WORD wNumRowBytes;
                             5254 ; 276  |    BOOL bSendAddressForEachSector;
                             5255 ; 277  |} NAND_PARAMETERS_DESCRIPTOR, * P_NAND_PARAMETERS_DESCRIPTOR;
                             5256 ; 278  |
                             5257 ; 279  |typedef struct NandPhysicalMediaTag{
                             5258 ; 280  |    P_NAND_PARAMETERS_DESCRIPTOR pNANDParams;
                             5259 ; 281  |    WORD                         wChipNumber;
                             5260 ; 282  |    NAND_LOCK_STATE              Lock;
                             5261 ; 283  |    BOOL                         bNANDIsBusy;              // Used for SetNANDBusy and NAN
                                  DIsReady
                             5262 ; 284  |    P_BUSYDONE_CALLBACK_FUNCTION pBusyDoneCallbackFunction;// Used for SetNANDBusy and NAN
                                  DIsReady
                             5263 ; 285  |    void                      *  pBusyArg;                 // Used for SetNANDBusy and NAN
                                  DIsReady
                             5264 ; 286  |    WORD                         wTotalSectors;
                             5265 ; 287  |    WORD                         wTotalBlocks;
                             5266 ; 288  |    WORD                         wTotalInternalDice;       // (1/2/4/...) - number of chip
                                  s pretending to be a single chip
                             5267 ; 289  |    WORD                         wBlocksPerDie;            // (wTotalBlocks / wTotalIntern
                                  alDice )
                             5268 ; 290  |} NAND_PHYSICAL_MEDIA_DESCRIPTOR, * P_NAND_PHYSICAL_MEDIA_DESCRIPTOR;
                             5269 ; 291  |
                             5270 ; 292  |
                             5271 ; 293  |// These are physical parameters that can be overruled in NAND_INIT_DESCRIPTOR
                             5272 ; 294  |// by analyzing the data read during read IDs command.
                             5273 ; 295  |typedef struct {
                             5274 ; 296  |    WORD                     wTotalInternalDice;       // (1/2/4/...) - number of chips pr
                                  etending to be a single chip
                             5275 ; 297  |    WORD                     wBlocksPerDie;            // (wTotalBlocks / wTotalInternalDi
                                  ce)
                             5276 ; 298  |
                             5277 ; 299  |} NAND_OVER_RULED_PARAMTERS;
                             5278 ; 300  |
                             5279 ; 301  |// These are used by the TypeNDescriptor files -- use for copying.
                             5280 ; 302  |typedef struct {
                             5281 ; 303  |    WORD wSectorTotalSize;       // Total sector size (Data + Redundant Area)
                             5282 ; 304  |    // A physical Page may contain multiple Sectors.
                             5283 ; 305  |    // It is assumed that the number or Sectors per Page is always
                             5284 ; 306  |    // a power of 2 (i.e. 1,2,4...)
                             5285 ; 307  |    // The following elements are used to help address the Sectors within a Page
                             5286 ; 308  |    BOOL bSendAddressForEachSector; // FALSE if sectors in Page can be DMA'd without new s
                                  etup
                             5287 ; 309  |} NAND_SECTOR_DESCRIPTOR, * P_NAND_SECTOR_DESCRIPTOR;
                             5288 ; 310  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5289 ; 311  |typedef struct {
                             5290 ; 312  |    WORD wNumberSectorsPerBlock;
                             5291 ; 313  |    WORD wPagesPerBlock;
                             5292 ; 314  |} NAND_BLOCK_DESCRIPTOR, * P_NAND_BLOCK_DESCRIPTOR;
                             5293 ; 315  |
                             5294 ; 316  |typedef struct {
                             5295 ; 317  |    WORD wNumColumnBytes;
                             5296 ; 318  |    WORD wNumRowBytes;
                             5297 ; 319  |} NAND_DEVICE_ADDR_DESCRIPTOR, * P_NAND_DEVICE_ADDR_DESCRIPTOR;
                             5298 ; 320  |
                             5299 ; 321  |typedef struct {
                             5300 ; 322  |    // at init -- these are copied to NAND_PARAMETERS_DESCRIPTOR
                             5301 ; 323  |    NAND_SECTOR_DESCRIPTOR NAND_TABLES_MEMSPACE *         pSectorDescriptor;
                             5302 ; 324  |    NAND_BLOCK_DESCRIPTOR  NAND_TABLES_MEMSPACE *         pBlockDescriptor;
                             5303 ; 325  |    NAND_DEVICE_ADDR_DESCRIPTOR NAND_TABLES_MEMSPACE *    pDeviceAddressingDescriptor;
                             5304 ; 326  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             5305 ; 327  |    NAND_TYPE                NandType;
                             5306 ; 328  |} NAND_DESCRIPTOR_SUB_STRUCT, * P_NAND_DESCRIPTOR_SUB_STRUCT;
                             5307 ; 329  |
                             5308 ; 330  |typedef struct {
                             5309 ; 331  |    // at init -- these are copied to NAND_PARAMETERS_DESCRIPTOR
                             5310 ; 332  |    NAND_DESCRIPTOR_SUB_STRUCT NAND_TABLES_MEMSPACE * pNandDescriptorSubStruct;
                             5311 ; 333  |    // at init -- these are copied to NAND_PHYSICAL_MEDIA_DESCRIPTOR
                             5312 ; 334  |    WORD                     wTotalBlocks;
                             5313 ; 335  |    WORD                     wTotalInternalDice;       // (1/2/4/...) - number of chips pr
                                  etending to be a single chip
                             5314 ; 336  |} NAND_INIT_DESCRIPTOR, * P_NAND_INIT_DESCRIPTOR;
                             5315 ; 337  |
                             5316 ; 338  |typedef union {                     // All fields in nanoseconds
                             5317 ; 339  |
                             5318 ; 340  |    // By placing this word before the bitfield it allows structure copies to be done
                             5319 ; 341  |    //  safely by assignment rather than by memcpy.
                             5320 ; 342  |
                             5321 ; 343  |    WORD initializer;
                             5322 ; 344  |
                             5323 ; 345  |    // These field lengths are arbitrary... they only need to be large enough to hold
                             5324 ; 346  |    //  the values.  Possible optimization by using enumerations rather than the actual
                             5325 ; 347  |    //  values here and teaching NANDHalSetGPFlashTiming how to interpret them.
                             5326 ; 348  |
                             5327 ; 349  |    struct {
                             5328 ; 350  |        WORD TDH    :7;                         // tWH, tREH, tDH
                             5329 ; 351  |        WORD TDS    :7;                         // tWP, tDS
                             5330 ; 352  |        WORD THOLD  :5;                         // tCLH, tCH, tALH, tDH
                             5331 ; 353  |        WORD TSU    :5;                         // tCLS, tCS, tALS
                             5332 ; 354  |    } decode;
                             5333 ; 355  |} NAND_TIMINGS;
                             5334 ; 356  |
                             5335 ; 357  |// Special types to aid in absolute vs relative block address confusion  
                             5336 ; 358  |typedef WORD REGION_RELATIVE_BLK_ADDR;  
                             5337 ; 359  |typedef WORD ABSOLUTE_BLK_ADDR;  
                             5338 ; 360  |
                             5339 ; 361  |#define MK_NAND_TIMINGS_REAL( tsu, thold, tds, tdh )             ( ((tsu   & 0x1F) << 19) 
                                    \ 
                             5340 ; 362  |                                                                 | ((thold & 0x1F) << 14) 
                                    \ 
                             5341 ; 363  |                                                                 | ((tds   & 0x7F) << 7)  
                                    \ 
                             5342 ; 364  |                                                                 |  (tdh   & 0x7F) )
                             5343 ; 365  |
                             5344 ; 366  |//!! The max value for an unsigned 7 bit number is 2^7 - 1 = 127 so don't use any value >1
                                  27 for tdh & tds (macro param 3&4), else overflow & crash occurs. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5345 ; 367  |//!! The max value for an unsigned 5 bit number is 2^5 - 1 = 31  so don't use any value >3
                                  1  for           (macro param 1&2), else overflow & crash can occur. 
                             5346 ; 368  |
                             5347 ; 369  |#if DEBUG
                             5348 ; 370  |    //  NAND1 and NAND2 get optimized timings.  NAND3 and NAND4 get failsafe timings.
                             5349 ; 371  |    #ifdef NAND1
                             5350 ; 372  |        #define NAND_FAILSAFE_TIMINGS                   MK_NAND_TIMINGS_REAL( 0, 10, 45, 3
                                  0 )
                             5351 ; 373  |        #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             5352 ; 374  |    #else
                             5353 ; 375  |        #ifdef NAND2
                             5354 ; 376  |            #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_REAL( 0, 1
                                  0, 61, 48 )
                             5355 ; 377  |            #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             5356 ; 378  |        #else
                             5357 ; 379  |            #ifdef NAND3
                             5358 ; 380  |                #define NAND_FAILSAFE_TIMINGS                   MK_NAND_TIMINGS_REAL( 0, 1
                                  0, 82, 48 )
                             5359 ; 381  |                #define MK_NAND_TIMINGS(a,b,c,d)        NAND_FAILSAFE_TIMINGS
                             5360 ; 382  |            #else
                             5361 ; 383  |                #ifdef NAND4
                             5362 ; 384  |                    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_RE
                                  AL( 0, 10, 82, 48 )
                             5363 ; 385  |                    #define MK_NAND_TIMINGS(a,b,c,d)        NAND_FAILSAFE_TIMINGS
                             5364 ; 386  |                #else
                             5365 ; 387  |                    // DEBUG defined but not (NAND1 NAND2 NAND3 or NAND4)
                             5366 ; 388  |                    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_RE
                                  AL( 0, 10, 45, 30 )
                             5367 ; 389  |                    #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             5368 ; 390  |                #endif
                             5369 ; 391  |            #endif
                             5370 ; 392  |        #endif
                             5371 ; 393  |    #endif
                             5372 ; 394  |#else
                             5373 ; 395  |    // Retail builds get full speed timings
                             5374 ; 396  |    // non DEBUG (RETAIL) builds (non engr board layouts) get one best case timing set.
                             5375 ; 397  |    // You may be able to reduce these values per your flash datasheet to increase perform
                                  ance.
                             5376 ; 398  |    #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL((a),(b),(c),(d))
                             5377 ; 399  |    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_REAL( 0, 10, 45, 3
                                  0 )
                             5378 ; 400  |#endif
                             5379 ; 401  |
                             5380 ; 402  |typedef struct {
                             5381 ; 403  |  WORD                                        DeviceManufacturerCode;   // 00:Device:Manuf
                                  acturer
                             5382 ; 404  |  NAND_TIMINGS                                NandTimings;
                             5383 ; 405  |  NAND_INIT_DESCRIPTOR NAND_TABLES_MEMSPACE * pNANDInitDescriptor;
                             5384 ; 406  |} NAND_DEVICECODE_MAP, * P_NAND_DEVICECODE_MAP;
                             5385 ; 407  |
                             5386 ; 408  |typedef union
                             5387 ; 409  |{
                             5388 ; 410  |   SECTOR_BUFFER singleLargeSector[SECTOR_BUFFER_ALLOC_SIZE(LARGE_SECTOR_TOTAL_SIZE)];
                             5389 ; 411  |   SECTOR_BUFFER singleSmallSector[SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_SIZE)];
                             5390 ; 412  |} _X NAND_COPY_BUFFER;
                             5391 ; 413  |
                             5392 ; 414  |typedef struct
                             5393 ; 415  |{
                             5394 ; 416  |    WORD SectorDataSizeInBytes;
                             5395 ; 417  |    WORD SectorDataSizeInWords;
                             5396 ; 418  |    WORD SectorRedundantSizeInBytes;
                             5397 ; 419  |    WORD SectorRedundantSizeInWords;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5398 ; 420  |    WORD SectorTotalSizeInBytes;
                             5399 ; 421  |    WORD SectorTotalSizeInWords;
                             5400 ; 422  |} NAND_OUT_OF_CONTEXT_DATA;
                             5401 ; 423  |
                             5402 ; 424  |
                             5403 ; 425  |typedef enum
                             5404 ; 426  |{
                             5405 ; 427  |    WRITE_MODE_NONE,
                             5406 ; 428  |    WRITE_MODE_SINGLE,
                             5407 ; 429  |    WRITE_MODE_MULTI
                             5408 ; 430  |} NAND_WRITE_MODE;
                             5409 ; 431  |
                             5410 ; 432  |typedef struct _id_decode
                             5411 ; 433  |{
                             5412 ; 434  |    // Read ID Byte 1
                             5413 ; 435  |    WORD MakerCode              : 8;
                             5414 ; 436  |    // Read ID Byte 2
                             5415 ; 437  |    WORD DeviceCode             : 8;
                             5416 ; 438  |    // Read ID Byte 3
                             5417 ; 439  |    WORD InternalChipNumber     : 2;        // Number of die = (1 << n)
                             5418 ; 440  |    WORD CellType               : 2;        // Number of bits per memory cell = ( 1 << (n+
                                  1) ) // may 2005: 2 bits per cell for today's mlc.
                             5419 ; 441  |    WORD VendorSpecific0        : 3;
                             5420 ; 442  |    WORD CacheProgram           : 1;        // 0 == Not supported
                             5421 ; 443  |    // Read ID Byte 4
                             5422 ; 444  |    WORD PageSize               : 2;        // Page size in bytes = (1 << n) * 1024
                             5423 ; 445  |    WORD RedundantAreaSize      : 1;        // Redundant area bytes per 512 data bytes = 8
                                   * (1 << n)
                             5424 ; 446  |    WORD Reserved0              : 1;
                             5425 ; 447  |    WORD BlockSize              : 2;        // Block size in bytes = 64 * 1024 * (1 << n)
                             5426 ; 448  |    WORD Organization           : 1;        // 0 == x8, 1 == x16
                             5427 ; 449  |    WORD SamsungHSSerialAccess  : 1;        // 0 == 50/30ns, 1 == 25ns
                             5428 ; 450  |    // Read ID Byte 5
                             5429 ; 451  |    WORD VendorSpecific1        : 2;
                             5430 ; 452  |    WORD PlaneNumber            : 2;        // # of planes total (see note below) = (1 << 
                                  n)
                             5431 ; 453  |    WORD PlaneSize              : 3;        // # of bytes per plane = 64 * 1024 * 1024 * (
                                  1 << n)
                             5432 ; 454  |    WORD Reserved4              : 1;
                             5433 ; 455  |    // Read ID Byte 6
                             5434 ; 456  |    WORD Reserved5              : 3;
                             5435 ; 457  |    WORD ToshibaHighSpeedMode   : 1;        // 0 == Not supported
                             5436 ; 458  |    WORD Reserved6              : 4;
                             5437 ; 459  |}t_id_decode;
                             5438 ; 460  |
                             5439 ; 461  |// Note on # of planes for all Large Page Devices (SLC and MLC)
                             5440 ; 462  |//  This field will contain the number of planes per die * the number of die on a per chip
                                   enable basis.
                             5441 ; 463  |//    Examples;  1 plane, 1 die; value = 1
                             5442 ; 464  |//      2 plane, 1 die; value = 2
                             5443 ; 465  |//      2 plane, 2 die; value = 4
                             5444 ; 466  |//      2 plane, 2 die, 2 chip enable; value = 2
                             5445 ; 467  |
                             5446 ; 468  |//  In case of multi-stacked device, the "plane number" will show the total number of plan
                                  es of the packaged
                             5447 ; 469  |//  device and not the number of planes per die. (e.g. If 2 pieces of device that has 2 pl
                                  anes were stacked
                             5448 ; 470  |//  in a package, the plane number will show "4")
                             5449 ; 471  |
                             5450 ; 472  |///////////////////////////////////////////////////////////////////////////////
                             5451 ; 473  |// Prototypes
                             5452 ; 474  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5453 ; 475  |RETCODE _reentrant Type1_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             5454 ; 476  |RETCODE _reentrant Type1_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5455 ; 477  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             5456 ; 478  |RETCODE _reentrant Type1_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5457 ; 479  |RETCODE _reentrant Type1_CommitPage(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5458 ; 480  |
                             5459 ; 481  |
                             5460 ; 482  |RETCODE _reentrant Type2_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5461 ; 483  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             5462 ; 484  |RETCODE _reentrant Type2_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             5463 ; 485  |RETCODE _reentrant Type2_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5464 ; 486  |RETCODE _reentrant Type2_CommitPage(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5465 ; 487  |
                             5466 ; 488  |
                             5467 ; 489  |RETCODE _reentrant Type4_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             5468 ; 490  |RETCODE _reentrant Type4_EraseBlockAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                                    WORD wBlockNum);
                             5469 ; 491  |RETCODE _reentrant Type4_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5470 ; 492  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             5471 ; 493  |RETCODE _reentrant Type4_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5472 ; 494  |
                             5473 ; 495  |
                             5474 ; 496  |RETCODE _reentrant Type5_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5475 ; 497  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             5476 ; 498  |
                             5477 ; 499  |
                             5478 ; 500  |void _reentrant TypeX_FlushReadCache(short);
                             5479 ; 501  |void _reentrant TypeX_ReadForCopyback( P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, W
                                  ORD wSourceStartSectorNum, WORD readCommand );
                             5480 ; 502  |void _reentrant TypeX_CopybackProgram( P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, W
                                  ORD wTargetStartSectorNum, WORD firstProgCmd, WORD secondProgCmd, P_SECTOR_BUFFER pBuf );
                             5481 ; 503  |RETCODE _reentrant TypeX_SetupWriteSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor
                                  ,  WORD wSectorNum);
                             5482 ; 504  |RETCODE _reentrant TypeX_SetupWriteSectorRedundant(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDD
                                  escriptor,  WORD wSectorNum);
                             5483 ; 505  |WORD _reentrant TypeX_ComputeCol(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD wB
                                  yteOffset);
                             5484 ; 506  |RETCODE _reentrant TypeX_ReadSectorData(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5485 ; 507  |                        WORD iSectorNum, P_SECTOR_BUFFER pBuf);
                             5486 ; 508  |RETCODE _reentrant TypeX_ReadSectorRedundant(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescrip
                                  tor,
                             5487 ; 509  |                         WORD iSectorNum, P_SECTOR_BUFFER pSectorBuf, BOOL crcCorrect);
                             5488 ; 510  |RETCODE _reentrant TypeX_WaitForProgramDone(
                             5489 ; 511  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5490 ; 512  |RETCODE _reentrant TypeX_SendSectorData(
                             5491 ; 513  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5492 ; 514  |                  P_SECTOR_BUFFER pBuf);
                             5493 ; 515  |RETCODE _reentrant TypeX_SendSectorRedundantArea(
                             5494 ; 516  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5495 ; 517  |                  P_SECTOR_BUFFER pBuf);
                             5496 ; 518  |RETCODE _reentrant TypeX_SendProgramCommand(
                             5497 ; 519  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5498 ; 520  |                  NAND_PROGRAM_CODES eCommandCode);
                             5499 ; 521  |RETCODE _reentrant TypeX_WriteSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5500 ; 522  |                                     WORD wSectorNum, P_SECTOR_BUFFER pBuf);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5501 ; 523  |RETCODE _reentrant TypeX_WriteSectorRedundant(
                             5502 ; 524  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5503 ; 525  |                  WORD wSectorNum, P_SECTOR_BUFFER pBuf);
                             5504 ; 526  |RETCODE _reentrant TypeX_EraseBlock(
                             5505 ; 527  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD wBlockNum);
                             5506 ; 528  |RETCODE _reentrant TypeX_EraseBlockAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                                  
                             5507 ; 529  |                                         WORD wBlockNum);
                             5508 ; 530  |
                             5509 ; 531  |RETCODE _reentrant NANDHALCommon_EnableWrites(WORD wWPn);
                             5510 ; 532  |RETCODE _reentrant NANDHALCommon_DisableWrites(WORD wWPn);
                             5511 ; 533  |
                             5512 ; 534  |RETCODE _reentrant NANDHalStartComputeECC_1Bit(P_SECTOR_BUFFER pCompleteSectorBuf, WORD wW
                                  hichHalf);
                             5513 ; 535  |RETCODE _reentrant NANDHalStartComputeECC_4Bit(P_SECTOR_BUFFER pCompleteSectorBuf, WORD wW
                                  hichHalf);
                             5514 ; 536  |RETCODE _reentrant NANDHalCorrectECC_1Bit(P_SECTOR_BUFFER pCompleteSectorBuf);
                             5515 ; 537  |RETCODE _reentrant NANDHalCorrectECC_4Bit(P_SECTOR_BUFFER pCompleteSectorBuf);
                             5516 ; 538  |
                             5517 ; 539  |// These functions are all direct-callable. Do not need to go through struct de-referencin
                                  g.
                             5518 ; 540  |RETCODE _reentrant NANDHalLockInterfacePort(void);
                             5519 ; 541  |RETCODE _reentrant NANDHalReleaseInterfacePort(void);
                             5520 ; 542  |RETCODE _reentrant NANDHalLockNand(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5521 ; 543  |RETCODE _reentrant NANDHalReleaseNand(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5522 ; 544  |RETCODE _reentrant NANDHalComputeECCGetStatus(void);
                             5523 ; 545  |WORD _reentrant CRC8(WORD _X * wData, WORD wOffset, WORD wBcount);
                             5524 ; 546  |void _reentrant NandReset(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5525 ; 547  |RETCODE _reentrant NandHalInit(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, NAND_TIMI
                                  NGS * timings );
                             5526 ; 548  |RETCODE _reentrant NANDHalSetNandBusy(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5527 ; 549  |                                      BOOL (* pCallbackFun)(int iStatus, void * pObj), voi
                                  d * pArg);
                             5528 ; 550  |BOOL _reentrant bNANDHalNandIsReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5529 ; 551  |RETCODE _reentrant NANDHalWaitForAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             5530 ; 552  |RETCODE _reentrant HALMarkBlockBadInRA(
                             5531 ; 553  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             5532 ; 554  |    ABSOLUTE_BLK_ADDR wBlockAddr);
                             5533 ; 555  |RETCODE _reentrant NANDHilInit(WORD wDeviceNum);
                             5534 ; 556  |RETCODE _reentrant NANDHalWaitForTrueReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescripto
                                  r, WORD * pStatus);
                             5535 ; 557  |RETCODE _reentrant NANDHalWaitForCacheReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescript
                                  or, WORD * pStatus);
                             5536 ; 558  |void _reentrant NANDHalDblChkStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD
                                   wMask, WORD *pwStatus);
                             5537 ; 559  |RETCODE _reentrant NANDHalSetGPFlashTiming( NAND_TIMINGS const * pNT );
                             5538 ; 560  |///////////////////////////////////////////////////////////////////////////////
                             5539 ; 561  |// Externs
                             5540 ; 562  |///////////////////////////////////////////////////////////////////////////////
                             5541 ; 563  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type1_NANDHALApiDescriptor;
                             5542 ; 564  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type2_NANDHALApiDescriptor;
                             5543 ; 565  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type4_NANDHALApiDescriptor;
                             5544 ; 566  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type5_NANDHALApiDescriptor;
                             5545 ; 567  |extern NANDHAL_MEM WORD g_iCachedPageNumInNAND[];
                             5546 ; 568  |#define INVALID_SECTOR_ADDRESS     (0xFFFFF0) // FFFFF0 is a dummy value intended to be an
                                   invalid sector address
                             5547 ; 569  |
                             5548 ; 570  |extern NAND_COPY_BUFFER wCopyBuffer;
                             5549 ; 571  |
                             5550 ; 572  |extern NAND_OUT_OF_CONTEXT_DATA g_NandAuxData;
                             5551 ; 573  |//extern NAND_WRITE_MODE g_WriteMode;  // can enable this line later. sdk 2.610 has it. 
                             5552 ; 574  |extern WORD g_maker_code;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5553 ; 575  |extern WORD g_CellType;
                             5554 ; 576  |extern WORD g_VendorSpecific1;
                             5555 ; 577  |extern WORD g_device_code;
                             5556 ; 578  |
                             5557 ; 579  |extern t_id_decode SECTOR_BUFFER_MEM * pReadIDDecode;
                             5558 ; 580  |#if 1 // TOVERIFY2: 
                             5559 ; 581  |///////////////////////////////////////////////////////////////////////////////
                             5560 ; 582  |// Macros
                             5561 ; 583  |///////////////////////////////////////////////////////////////////////////////
                             5562 ; 584  |//On NAND4 builds, if less than 4 Nands are used, then the ID structure gets overwritten w
                                  ith garbage
                             5563 ; 585  |//( zeros?),whenever the empty slots are probed. But we need to preserve the Maker code
                             5564 ; 586  |//for Hynix and ST Micro Nands.
                             5565 ; 587  |#define _nand_hal_preserve_data();\ 
                             5566 ; 588  |{                                          \ 
                             5567 ; 589  |  g_maker_code = pReadIDDecode->MakerCode; \ 
                             5568 ; 590  |  g_CellType = pReadIDDecode->CellType; \ 
                             5569 ; 591  |  g_device_code = pReadIDDecode->DeviceCode;\ 
                             5570 ; 592  |  g_VendorSpecific1 = pReadIDDecode->VendorSpecific1; \ 
                             5571 ; 593  |} // cell type backed up to glob so it's not lost during 2nd call to DetermineNandType in 
                                  a multi CE present case. We call that > once only when >1 CE present.
                             5572 ; 594  |#else // old ver
                             5573 ; 595  |extern WORD NANDHAL_MEM wID1;
                             5574 ; 596  |//On NAND4 builds, if less than 4 Nands are used, then the ID structure gets overwritten w
                                  ith garbage 
                             5575 ; 597  |//( zeros?),whenever the empty slots are probed. But we need to preserve the Maker code an
                                  d cell type
                             5576 ; 598  |//for Hynix and ST Micro and other Nands. 
                             5577 ; 599  |#define _nand_hal_preserve_data();\ 
                             5578 ; 600  |{                                          \ 
                             5579 ; 601  |  g_maker_code = (wID1 & MakerIDMask); \ 
                             5580 ; 602  |  //g_CellType = pReadIDDecode->CellType; \  /* should save this and uncomment this line t
                                  oo if you ever revert to this old way */
                             5581 ; 603  |  //g_VendorSpecific1 = pReadIDDecode->VendorSpecific1; \  /* should save this and uncomme
                                  nt this line too if you ever revert to this old way */
                             5582 ; 604  |}
                             5583 ; 605  |#endif
                             5584 ; 606  |
                             5585 ; 607  |#endif // #ifndef _NANDHAL_H
                             5586 ; 608  |
                             5587 ; 609  |
                             5588 
                             5590 
                             5591 ; 21   |#include "NANDDataDrive.h"
                             5592 
                             5594 
                             5595 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5596 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             5597 ; 3    |//
                             5598 ; 4    |// Filename: NANDDataDrive.h
                             5599 ; 5    |// Description: Contains OEM customizable flash driver options that were previously
                             5600 ; 6    |//              in nandmediadefaults.c (see that file also)
                             5601 ; 7    |////////////////////////////////////////////////////////////////////////////////
                             5602 ; 8    |
                             5603 ; 9    |#ifndef _NANDDATADRIVE_H
                             5604 ; 10   |#define _NANDDATADRIVE_H
                             5605 ; 11   |
                             5606 ; 12   |///////////////////////////////////////////////////////////////////////////////
                             5607 ; 13   |// Includes
                             5608 ; 14   |///////////////////////////////////////////////////////////////////////////////
                             5609 ; 15   |
                             5610 ; 16   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5611 ; 17   |// Definitions
                             5612 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             5613 ; 19   |
                             5614 ; 20   |/////////////////////////////////////////////////////////////////////////////////
                             5615 ; 21   |// You may have up to 4 NAND chips, used as a Concatenated MultiNAND or a Striped
                             5616 ; 22   |// MultiNAND.  To have an external NAND drive, you must set MAX_NAND_CHIPS to less 
                             5617 ; 23   |// than 4.  If you will never have more than "n" chips, set MAX_NAND_CHIPS to "n"
                             5618 ; 24   |// to save RAM, unless this is MLC which needs high # of BB handling.
                             5619 ; 25   |/////////////////////////////////////////////////////////////////////////////////
                             5620 ; 26   |// Set to 1 to enable or 0 to disable. Only enable one of 2 defines below. 
                             5621 ; 27   |// If the following 3 defines are all 0, config is auto set to 2 die per chipSelect & 4 ch
                                  ips max, 
                             5622 ; 28   |// so 8 data drive regions (NAND4). 
                             5623 ; 29   |// 46 words of data RAM used for each additional die's datadrive region & region array +)
                             5624 ; 30   |
                             5625 ; 31   |// The 8 die config below uses 108 words of additional data RAM beyond 6 die config.  
                             5626 ; 32   |#define SUPPORT_QUAD_DIE_NAND2          0  /* Untested but expected to function. 8 total d
                                  ie config for 2 Chip Enables  */
                             5627 ; 33   |#define SUPPORT_OCTAL_DIE_NAND1         0  /* Only enable if you wish to support 8-die sin
                                  gle-ChipEnable cases. */
                             5628 ; 34   |
                             5629 ; 35   |#define EIGHTDIEMAX 1   /* to support 8 die total, uncomment this line or for 6 die max to
                                   save ram, comment out this line */
                             5630 ; 36   |// ifdef allow 8 total die, else default limit to 6 die max to save ram
                             5631 ; 37   |#ifdef EIGHTDIEMAX
                             5632 ; 38   |#define LIMIT_TO_6_DIE_CONFIG_MAX       0  /* 8 total die supported */
                             5633 ; 39   |#elif SUPPORT_QUAD_DIE_NAND2
                             5634 ; 40   |#define LIMIT_TO_6_DIE_CONFIG_MAX       0  /* 8 total die supported */
                             5635 ; 41   |#elif SUPPORT_OCTAL_DIE_NAND1
                             5636 ; 42   |#define LIMIT_TO_6_DIE_CONFIG_MAX       0  /* 8 total die supported */
                             5637 ; 43   |#else
                             5638 ; 44   |// LIMIT_TO_6_DIE_CONFIG_MAX when defined as 1, supports a single quad die (1 Chip Enable)
                                  , or 
                             5639 ; 45   |// dual die in 1x/2x/3x physical config but not 4x physical config since 8 dice unsupporte
                                  d. 
                             5640 ; 46   |#define LIMIT_TO_6_DIE_CONFIG_MAX       1  /* Emulate previous configs & uses no additiona
                                  l data RAM. */
                             5641 ; 47   |#endif
                             5642 ; 48   |
                             5643 ; 49   |
                             5644 ; 50   |// Note: if plib has hard coded references to this, you may need to use our 6 die max defa
                                  ult above.
                             5645 ; 51   |#if SUPPORT_QUAD_DIE_NAND2
                             5646 ; 52   | // If 4 die nand packages (or needs to be treated as one like toshiba w/ inter-zone page 
                                  copy restriction), 
                             5647 ; 53   | // this supports 2 ChipEnables max to save ram. 
                             5648 ; 54   | #define MAX_NAND_CHIPS 2  /* 2 here gives 8 dice config max & 8 data drives for dice */
                             5649 ; 55   |#elif SUPPORT_OCTAL_DIE_NAND1
                             5650 ; 56   | // OCTAL die       multinand not supported by default due to desired ram usage.
                             5651 ; 57   | #define MAX_NAND_CHIPS 1  /* 1 here gives 8 dice config max & 8 data drives for dice */
                             5652 ; 58   |#else
                             5653 ; 59   | // default: 2 die packages can use 3 or 4 chips here (issue: ram amount used. SDK2.521 ha
                                  d MAX_NAND_CHIPS 4)
                             5654 ; 60   | #define MAX_NAND_CHIPS 4
                             5655 ; 61   |#endif // since we added a hidden data drive and 1 system drive for sdk3.0 suggest 3 2die 
                                  chips max instead of 4 to save ram.
                             5656 ; 62   |
                             5657 ; 63   |// if the limit define above is disabled, nandmediadefaults auto multiplies macros (this f
                                  ile 3 pages down):
                             5658 ; 64   |// numDiePerChip *  chosenMaxNumChipsForYramDesired   =  max num data drive regions result
                                  ing
                             5659 ; 65   |//  2                   4     as previously.          =  8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5660 ; 66   |//  4 (new)             2                             =  8
                             5661 ; 67   |//  8 (new)             1                             =  8
                             5662 ; 68   |
                             5663 ; 69   |/////////////////////////////////////////////////////////////////////////////////
                             5664 ; 70   |//  Each chip may have one or more Data Regions.  One reason to
                             5665 ; 71   |//  have more than one Data Region per chip is to allow MultiPlane addressing for
                             5666 ; 72   |//  an 8-plane 128 MByte NAND. TODO UPDATE PREVIOUS COMMENT. Such a NAND is organized as t
                                  wo 4-plane blocks.
                             5667 ; 73   |//  Making each block part of a different Region allows MultiPlane features to
                             5668 ; 74   |//  be exploited.
                             5669 ; 75   |//  Note that the value following is not used if LIMIT_TO_6_DICE_CONFIG_MAX is enabled.
                             5670 ; 76   |//  A very few flash packages need 8 here since they have 8 die/districts/regions per chip
                                   enable. 
                             5671 ; 77   |//  Sets 4 here if you enabled support of 2 quad-die configurations each with a chipEnable
                                   (multnand). 
                             5672 ; 78   |//  Or default sets 2 for 2-die packages (except: toshiba 512MB w/ page copy restriction t
                                  hat needs 4 here)
                             5673 ; 79   |#if SUPPORT_QUAD_DIE_NAND2
                             5674 ; 80   |#define MAX_DATA_REGIONS_PER_CHIP 4
                             5675 ; 81   |#elif SUPPORT_OCTAL_DIE_NAND1
                             5676 ; 82   |#define MAX_DATA_REGIONS_PER_CHIP 8
                             5677 ; 83   |#else
                             5678 ; 84   |// default as in sdk 2.521 (most nand flash today have 2 die per ChipEnable (march 2005)
                             5679 ; 85   |#define MAX_DATA_REGIONS_PER_CHIP 2 
                             5680 ; 86   |#endif
                             5681 ; 87   |
                             5682 ; 88   |////////////////////////////////////////////////////////////////////////////////////////
                             5683 ; 89   |// A typical SDK3.0 system has the following System Drives:
                             5684 ; 90   |//        bootmanager.sb    hostlink.sb   hostrsc.bin   StmpSys.sb  resource.bin
                             5685 ; 91   |//        Note: updater.sb is not flashed & is only used during usb boot (firmware recover
                                  y mode). 
                             5686 ; 92   |// Adding any vendor-specific drives will require increasing MAX_NAND_SYSTEM_DRIVES.
                             5687 ; 93   |// There are 5 system drives in sdk3.x, 4 sys drives in sdk 2.521. 
                             5688 ; 94   |#define MAX_NAND_SYSTEM_DRIVES 9 
                             5689 ; 95   |
                             5690 ; 96   |////////////////////////////////////////////////////////////////////////////////////////
                             5691 ; 97   |// A typical system will have just one hidden data Drives:
                             5692 ; 98   |// Adding any vendor-specific drives will require increasing MAX_NAND_HIDDEN_DRIVES.
                             5693 ; 99   |#define MAX_NAND_HIDDEN_DRIVES 1 
                             5694 ; 100  |
                             5695 ; 101  |/////////////////////////////////////////////////////////////////////////////////
                             5696 ; 102  |// The Master Bad Block Table (in RAM) must be allocated at compile-time.  Each
                             5697 ; 103  |// Region on each NAND gets a portion of this table to track the Bad Blocks in
                             5698 ; 104  |// that Region.  The actual size of the Region's portion depends on the actual
                             5699 ; 105  |// number of Bad Blocks in that Region, plus other factors, so different Regions
                             5700 ; 106  |// may get different size allocations.  The total size allocation, for the Master
                             5701 ; 107  |// Bad Block Table allows for each NAND to get the following number of entries,
                             5702 ; 108  |// "on average".  Your mileage may vary. 
                             5703 ; 109  |/////////////////////////////////////////////////////////////////////////////////
                             5704 ; 110  |// JLN: Toshiba MLC 512 MByte datasheet says <= 720 Bad Blocks guaranteed for new device. 
                                  
                             5705 ; 111  |//      Toshiba MLC 256 MByte datasheet says <= 360 Bad Blocks guaranteed. 
                             5706 ; 112  |//      Toshiba MLC 128 MByte datasheet says <= 180 Bad Blocks guaranteed. 
                             5707 ; 113  |//                2x256 MByte                <= 720 Bad Blocks guaranteed. 
                             5708 ; 114  |//                2x128 MByte                <= 360 Bad Blocks guaranteed.
                             5709 ; 115  |// Note that that we instead specify quad blocks as bad if one of the quad is bad.
                             5710 ; 116  |// 360 BB case is fully handled by BB per chip*4 below, but if you want to completely hand
                                  le 
                             5711 ; 117  |// the 720 bad quad block case, more y mem can be allocated here if you export more 
                             5712 ; 118  |// data (y_extra) sections to elsewhere.
                             5713 ; 119  |// To reduce data mem usage, set this define to 0 if you won't use MLC. Only used here cur
                                  rently.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5714 ; 120  |// SDK 3.000 CAN NOT SUPPORT MLC SO LEAVE 0. 3.1 planned to support large block MLC aka ty
                                  pe 5 flash.
                             5715 ; 121  |
                             5716 ; 122  |//DS: Enabled the directive below, in order to increase the number of Bad Block entries. 
                             5717 ; 123  |#define SUPPORT_MLC 1
                             5718 ; 124  |
                             5719 ; 125  |#if SUPPORT_MLC
                             5720 ; 126  |// Uses much data memory. Likely multiplied by 4 chips max when allocating actual BB table
                                  .
                             5721 ; 127  |//the following are the number of Bad Block entries currently allocated for the player and
                                   mtp builds.
                             5722 ; 128  |#ifdef PLAYER
                             5723 ; 129  |#define MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP 56 // 56*4=224  for 4 chips
                             5724 ; 130  |#else
                             5725 ; 131  |#define MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP 76 // 76*4=304  for 4 chips
                             5726 ; 132  |#endif
                             5727 ; 133  |#else
                             5728 ; 134  |#define MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP 38 // 38*4=152 word 
                             5729 ; 135  |#endif
                             5730 ; 136  |
                             5731 ; 137  |
                             5732 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             5733 ; 139  |//  FRACTION_RBLOCKS tells what minimal part of each Region should be allocated as 
                             5734 ; 140  |//  Replacement Blocks - blocks used to substitute for Home Blocks (HBlocks) which 
                             5735 ; 141  |//  are bad.  This number is typically something like 10/1024, i.e. reserve 10 
                             5736 ; 142  |//  blocks out of every 1024.  This determines the initial number of RBlocks allocated
                             5737 ; 143  |//  when there are few known Bad Blocks.  Later, MIN_SPARE_RBLOCKS_PER_REGION (below)
                             5738 ; 144  |//  kicks in.
                             5739 ; 145  |//  As Type 3 NANDs (MLC) typically need more RBlocks to function well, for
                             5740 ; 146  |//  Type 3s, the number of RBlocks will be scaled up by TYPE3_RBLOCKS_SCALER.
                             5741 ; 147  |//  This define allows Type 3s to be scaled up without punishing other NAND types
                             5742 ; 148  |//  by forcing them to have more RBlocks than they need.
                             5743 ; 149  |/////////////////////////////////////////////////////////////////////////////////
                             5744 ; 150  |#define FRACTION_RBLOCKS 0.025
                             5745 ; 151  |#define TYPE3_RBLOCKS_SCALER 6.7
                             5746 ; 152  |
                             5747 ; 153  |/////////////////////////////////////////////////////////////////////////////////
                             5748 ; 154  |//  MIN_SPARE_RBLOCKS_PER_REGION specifies the minimum number of "spare" RBlocks
                             5749 ; 155  |//  get allocated for a Region when the number of known Bad Blocks in that Region,
                             5750 ; 156  |//  plus MIN_SPARE_RBLOCKS_PER_REGION, is greater than FRACTION_RBLOCKS * RegionSize.
                             5751 ; 157  |//
                             5752 ; 158  |//  As the NAND ages and new Bad Blocks are discovered, the initial pool of Rblocks
                             5753 ; 159  |//  (FRACTION_RBLOCKS * RegionSize) gets used up.  A new allocation will see that
                             5754 ; 160  |//  there are few spare RBlocks (or none!), and will steal blocks from the HBlocks
                             5755 ; 161  |//  to increase the RBlock pool.
                             5756 ; 162  |//
                             5757 ; 163  |//  The minimum spare RBlocks allocation will be scaled up by TYPE3_RBLOCKS_SCALER,
                             5758 ; 164  |//  for Type 3 NANDs.
                             5759 ; 165  |/////////////////////////////////////////////////////////////////////////////////
                             5760 ; 166  |#define MIN_SPARE_RBLOCKS_PER_REGION 4
                             5761 ; 167  |
                             5762 ; 168  |/////////////////////////////////////////////////////////////////////////////////
                             5763 ; 169  |//  Each Data Drive Region has an Updates Table, listing all of the UBlocks and
                             5764 ; 170  |//  their mappings/status.  The number of UBlocks of each Region is given in the
                             5765 ; 171  |//  Configuration Block, on the NAND.  The total number of UBlocks there must be
                             5766 ; 172  |//  less than or equal to the number of Data Drive Regions times the number given
                             5767 ; 173  |//  below (AVG_UPDATE_BLOCKS_PER_REGION);  otherwise, DataDriveInit() will fail
                             5768 ; 174  |//  and a full update (new MediaAllocate()) must be performed.  This should only
                             5769 ; 175  |//  happen if the firmware is changed without re-allocating the NANDs.
                             5770 ; 176  |//
                             5771 ; 177  |//  As Type 3 NANDs (SB-MLC now unsupported) typically need more UBlocks to function well 
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5772 ; 178  |//  (as do type5 LB-MLC), for Type 3s, the number of UBlocks will be scaled up by TYPE3_UB
                                  LOCKS_SCALER.
                             5773 ; 179  |//  This define allows Type 3s to be scaled up without punishing other NAND types
                             5774 ; 180  |//  by forcing them to have more UBlocks than they need.
                             5775 ; 181  |/////////////////////////////////////////////////////////////////////////////////
                             5776 ; 182  |// more u block allocation. For 2 year player life.
                             5777 ; 183  |#define AVG_UPDATE_BLOCKS_PER_REGION  31 
                             5778 ; 184  |
                             5779 ; 185  |// This is unused in the SDK currently. 
                             5780 ; 186  |#define TYPE3_UBLOCKS_SCALER 3.
                             5781 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             5782 ; 188  |// REVIEW: comment below appears to be in error:
                             5783 ; 189  |//  AVG_UPDATE_BLOCKS_PER_REGION is good for drives that have blocks greater than
                             5784 ; 190  |//  2*(AVG_UPDATE_BLOCKS_PER_REGION + MIN_SPARE_RBLOCKS_PER_REGION) but for drives
                             5785 ; 191  |//  that are too small with fewer blocks we need another define for minimum blocks
                             5786 ; 192  |//  per region.  (this is basically just for 8MByte and smaller flash or regions like the 
                                  hidden drive)
                             5787 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             5788 ; 194  |#define MIN_UPDATE_BLOCKS_PER_REGION  MIN_SPARE_RBLOCKS_PER_REGION
                             5789 ; 195  |
                             5790 ; 196  |/////////////////////////////////////////////////////////////////////////////////
                             5791 ; 197  |//  Using MIN_UPDATE_BLOCKS_PER_REGION and MIN_SPARE_RBLOCKS_PER_REGION we can 
                             5792 ; 198  |//  define minimum size required for a small size data drive.
                             5793 ; 199  |/////////////////////////////////////////////////////////////////////////////////
                             5794 ; 200  |#define MIN_DATA_DRIVE_SIZE ( 2 * ( MIN_UPDATE_BLOCKS_PER_REGION + MIN_SPARE_RBLOCKS_PER_R
                                  EGION ) )
                             5795 ; 201  |
                             5796 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             5797 ; 203  |//  HIDDEN_DRIVE_PERCENTAGE gives the percentage of data drive to be allocated
                             5798 ; 204  |//  for hidden drive.
                             5799 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             5800 ; 206  |//#define HIDDEN_DRIVE_PERCENTAGE (0.01) 
                             5801 ; 207  |
                             5802 ; 208  |// Making the HIDDEN_DRIVE_PERCENTAGE 0 will cause it 
                             5803 ; 209  |// to default to a minimum block size.  Right now that
                             5804 ; 210  |// block size is 16 blocks.
                             5805 ; 211  |#define HIDDEN_DRIVE_PERCENTAGE 0
                             5806 ; 212  |
                             5807 ; 213  |/////////////////////////////////////////////////////////////////////////////////
                             5808 ; 214  |//  Update Sectors Maps allocation
                             5809 ; 215  |//  This is just a crude version, allowing for 6 maps of 256-Sector UBlocks.
                             5810 ; 216  |/////////////////////////////////////////////////////////////////////////////////
                             5811 ; 217  |#define NUM_OF_MAX_SIZE_USECTORS_MAPS 6
                             5812 ; 218  |#define MAX_USECTORS_PER_BLOCK  256
                             5813 ; 219  |#define MAX_WORDS_FOR_UPDATE_SECTOR_MAPS  (NUM_OF_MAX_SIZE_USECTORS_MAPS * ((MAX_USECTORS_
                                  PER_BLOCK+2)/3 + sizeof(UPDATE_SECTORS_MAP_DESCRIPTOR)))
                             5814 ; 220  |
                             5815 ; 221  |
                             5816 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             5817 ; 223  |//  Garbage Collector Configuration
                             5818 ; 224  |//
                             5819 ; 225  |/////////////////////////////////////////////////////////////////////////////////
                             5820 ; 226  |
                             5821 ; 227  |#define NUM_FRESH_LISTEES 6
                             5822 ; 228  |
                             5823 ; 229  |
                             5824 ; 230  |
                             5825 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             5826 ; 232  |/////////////////////////////////////////////////////////////////////////////////
                             5827 ; 233  |//  SIGMATEL CUSTOMERS SHOULD NOT MODIFY ANYTHING BELOW THIS LINE *********
                             5828 ; 234  |/////////////////////////////////////////////////////////////////////////////////
                             5829 ; 235  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5830 ; 236  |
                             5831 ; 237  |
                             5832 ; 238  |
                             5833 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             5834 ; 240  |// Each chip will have MAX_DATA_REGIONS_PER_CHIP Data Drive Regions (e.g. 2 to 
                             5835 ; 241  |// cover 8-plane 128MB NANDs).
                             5836 ; 242  |// Each System Drive also uses one Region
                             5837 ; 243  |/////////////////////////////////////////////////////////////////////////////////
                             5838 ; 244  |// DO NOT CHANGE THIS. ENABLE/DISABLE DEFs AT TOP OF FILE TO SUPPORT 2, 4, OR 8 DIE FLASH.
                                  
                             5839 ; 245  |// SDK3.0 IS CAN DEFAULT ABOVE TO ENABLE ONLY 6 DICE TOTAL OR A CALCULATED TOTAL SUCH AS 8
                                  . 
                             5840 ; 246  |//    DON'T CHANGE THIS TO RM A WARNING UNLESS .ybssnandmediadefaults size is unchanged.
                             5841 ; 247  |#if LIMIT_TO_6_DIE_CONFIG_MAX
                             5842 ; 248  |// SDK3.0 default stays at 6 max data drive regions so no RAM growth                      
                                      
                             5843 ; 249  |// 6 supports 3 dual-die ChipEnables max. Or 1 4-die configured nand.
                             5844 ; 250  |#define MAX_DATA_DRIVE_REGIONS (                          6               ) 
                             5845 ; 251  |#else
                             5846 ; 252  |// sdk2.5x                            2                   *     4        =  8
                             5847 ; 253  |// sdk3.0 default:                   {2,2,4,8}            *    {4,3,2,1} = {8,6,8,8}
                             5848 ; 254  |#define MAX_DATA_DRIVE_REGIONS (MAX_DATA_REGIONS_PER_CHIP * MAX_NAND_CHIPS)
                             5849 ; 255  |#endif
                             5850 ; 256  |
                             5851 ; 257  |// sdk2.5x                               8       +           4            + 0             
                                         =  12
                             5852 ; 258  |// sdk3.0 default:                {8,6,8,8}      +           5            + 1             
                                         = {14,12,14,14}
                             5853 ; 259  |#define MAX_NAND_REGIONS (MAX_DATA_DRIVE_REGIONS + MAX_NAND_SYSTEM_DRIVES + MAX_NAND_HIDDE
                                  N_DRIVES) 
                             5854 ; 260  |
                             5855 ; 261  |
                             5856 ; 262  |
                             5857 ; 263  |#define MAX_NAND_BAD_BLOCKS  (MAX_NAND_CHIPS * MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP)
                             5858 ; 264  |
                             5859 ; 265  |#if 1 
                             5860 ; 266  |// update line: in sdk3.110 this change to no longer allocate ram for u block for sys driv
                                  es (which don't use u blocks)
                             5861 ; 267  |// is just a mem savings since we kept just 20 u blocks per drive region. 3.120 is higher.
                                   
                             5862 ; 268  |// New approach for sdk3.110 (and 2.610) excludes sys drives & allocates no more ram.     
                                              
                             5863 ; 269  |// This can give at least 50% more u blocks per region in the same RAM. In 3.120 & 2.610 m
                                  ore % increase above this is done in nandmediaallocate at stupdater time.
                             5864 ; 270  |// HDS is said to be only 4 u blocks. Verify if 4 u blocks is enough. Some said it is writ
                                  ten infrequently so probably ok. 
                             5865 ; 271  |#define MAX_UPDATE_BLOCKS ((AVG_UPDATE_BLOCKS_PER_REGION*(MAX_DATA_DRIVE_REGIONS+MAX_NAND_
                                  HIDDEN_DRIVES))+MAX_DATA_DRIVE_REGIONS)
                             5866 ; 272  |#else
                             5867 ; 273  |// Add a constant MAX_DATA_DRIVE_REGIONS for growth.
                             5868 ; 274  |#define MAX_UPDATE_BLOCKS ((AVG_UPDATE_BLOCKS_PER_REGION * MAX_NAND_REGIONS)+MAX_DATA_DRIV
                                  E_REGIONS)
                             5869 ; 275  |#endif
                             5870 ; 276  |
                             5871 ; 277  |#define NUM_BBTABLE_ENTRIES_PER_REGION  12
                             5872 ; 278  |#define NUM_BAD_BLOCKS_REGION_0         9
                             5873 ; 279  |#define NUM_BAD_BLOCKS_REGION_1         9
                             5874 ; 280  |#define NUM_BAD_BLOCKS_REGION_2         9
                             5875 ; 281  |#define NUM_BAD_BLOCKS_REGION_3         9
                             5876 ; 282  |
                             5877 ; 283  |///////////////////////////////////////////////////////////////////////////////
                             5878 ; 284  |// Error codes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5879 ; 285  |///////////////////////////////////////////////////////////////////////////////
                             5880 ; 286  |
                             5881 ; 287  |#include "errors.h"
                             5882 
                             5884 
                             5885 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5886 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             5887 ; 3    |////
                             5888 ; 4    |//// Filename: errors.inc
                             5889 ; 5    |//// Description: 
                             5890 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5891 ; 7    |
                             5892 ; 8    |#if (!defined(ERRORS_INC))
                             5893 ; 9    |#define ERRORS_INC 1
                             5894 ; 10   |
                             5895 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             5896 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             5897 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             5898 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             5899 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             5900 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             5901 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             5902 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             5903 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             5904 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             5905 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             5906 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             5907 ; 23   |// block in the device. The block was marked bad and tables updated.
                             5908 ; 24   |// The application must start over.
                             5909 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             5910 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             5911 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             5912 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             5913 ; 29   |
                             5914 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             5915 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             5916 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             5917 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             5918 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             5919 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             5920 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             5921 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             5922 ; 38   |//Specific to NAND
                             5923 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             5924 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             5925 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             5926 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             5927 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             5928 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             5929 ; 45   |
                             5930 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             5931 ; 47   |
                             5932 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             5933 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             5934 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             5935 ; 51   |
                             5936 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             5937 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             5938 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             5939 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             5940 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             5941 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5942 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             5943 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             5944 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             5945 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             5946 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             5947 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             5948 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             5949 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             5950 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             5951 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             5952 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             5953 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             5954 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             5955 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             5956 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             5957 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             5958 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             5959 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             5960 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             5961 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             5962 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             5963 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             5964 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             5965 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             5966 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             5967 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             5968 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             5969 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             5970 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             5971 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             5972 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             5973 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             5974 ; 90   |
                             5975 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             5976 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             5977 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             5978 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             5979 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             5980 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             5981 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             5982 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             5983 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             5984 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             5985 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             5986 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             5987 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             5988 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             5989 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             5990 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             5991 ; 107  |
                             5992 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             5993 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             5994 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             5995 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             5996 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             5997 ; 113  |
                             5998 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             5999 ; 115  |// match the previously initialized Nand chip type.
                             6000 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             6001 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             6002 ; 118  |// Errors from calling HIL functions
                             6003 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6004 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             6005 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             6006 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             6007 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             6008 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             6009 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             6010 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             6011 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             6012 ; 128  |// for 3410 build
                             6013 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             6014 ; 130  |// for 3410 build
                             6015 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             6016 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             6017 ; 133  |
                             6018 ; 134  |// indicates that the GetStatus returned a FAIL
                             6019 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             6020 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             6021 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             6022 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             6023 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             6024 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             6025 ; 141  |// indicates the NAND was already BUSY
                             6026 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             6027 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             6028 ; 144  |// ECC Error Codes
                             6029 ; 145  |// ECC Computation has successfully completed
                             6030 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             6031 ; 147  |// ECC computation still busy
                             6032 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             6033 ; 149  |// timed out while waiting on object
                             6034 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             6035 ; 151  |// flag already set for SDK2.4 lock
                             6036 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             6037 ; 153  |
                             6038 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             6039 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             6040 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             6041 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             6042 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             6043 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             6044 ; 160  |
                             6045 ; 161  |// MMC Errors
                             6046 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             6047 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             6048 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             6049 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             6050 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             6051 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             6052 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             6053 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             6054 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             6055 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             6056 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             6057 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             6058 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             6059 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             6060 ; 176  |
                             6061 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             6062 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             6063 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             6064 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             6065 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6066 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             6067 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             6068 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             6069 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             6070 ; 186  |
                             6071 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             6072 ; 188  |//// MMC HAL Error codes
                             6073 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             6074 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             6075 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             6076 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             6077 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             6078 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             6079 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             6080 ; 196  |
                             6081 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             6082 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             6083 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             6084 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             6085 ; 201  |
                             6086 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             6087 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             6088 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             6089 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             6090 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             6091 ; 207  |
                             6092 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             6093 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             6094 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             6095 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             6096 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             6097 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             6098 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             6099 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             6100 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             6101 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             6102 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             6103 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             6104 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             6105 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             6106 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             6107 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             6108 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             6109 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             6110 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             6111 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             6112 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             6113 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             6114 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             6115 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             6116 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             6117 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             6118 ; 234  |
                             6119 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             6120 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             6121 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             6122 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             6123 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             6124 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             6125 ; 241  |
                             6126 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             6127 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6128 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             6129 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             6130 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             6131 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             6132 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             6133 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             6134 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             6135 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             6136 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             6137 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             6138 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             6139 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             6140 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             6141 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             6142 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             6143 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             6144 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             6145 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             6146 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             6147 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             6148 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             6149 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             6150 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             6151 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             6152 ; 268  |
                             6153 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             6154 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             6155 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             6156 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             6157 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             6158 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             6159 ; 275  |
                             6160 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             6161 ; 277  |//MATH errors...
                             6162 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             6163 ; 279  |
                             6164 ; 280  |//Memory Pointer errors...
                             6165 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             6166 ; 282  |//****************************************************************/
                             6167 ; 283  |#if (!defined(NOERROR))
                             6168 ; 284  |#define NOERROR 0
                             6169 ; 285  |#endif
                             6170 ; 286  |
                             6171 ; 287  |////Added by RAKS
                             6172 ; 288  |
                             6173 ; 289  |#define ERRProgram 0x911111
                             6174 ; 290  |#define ERRNoMedia 0x922222
                             6175 ; 291  |#define ERRHwFail 0x933333   
                             6176 ; 292  |#define ERRInvMedia 0x944444
                             6177 ; 293  |#define ERRBlkFail 0x955555
                             6178 ; 294  |#define ERRInvDataStatus 0x966666
                             6179 ; 295  |#define ERRWriteFail 0x977777
                             6180 ; 296  |#define ERRECCCorr 0x988888
                             6181 ; 297  |#define ERRECCFail 0x999999
                             6182 ; 298  |#define ERRZoneFull 0x9aaaaa
                             6183 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             6184 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             6185 ; 301  |//invalid partition table signature. 
                             6186 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             6187 ; 303  |//boot ID bad
                             6188 ; 304  |#define ERRBootID 0x9BBBBB   
                             6189 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6190 ; 306  |////Nothing was here : RAKS
                             6191 ; 307  |//JUMP instruction bad
                             6192 ; 308  |#define ERRBootJump 0x9DDDDD  
                             6193 ; 309  |//ID Byte bad
                             6194 ; 310  |#define ERRIDByte 0x9EEEEE  
                             6195 ; 311  |
                             6196 ; 312  |
                             6197 ; 313  |//****************************************************************
                             6198 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             6199 ; 315  |//****************************************************************
                             6200 ; 316  |// Master ERROR File
                             6201 ; 317  |//****************************************************************/
                             6202 ; 318  |// FAT File System Error Codes
                             6203 ; 319  |// corrupt FAT
                             6204 ; 320  |#define FATCorrupt -1        
                             6205 ; 321  |// invalid FAT sector
                             6206 ; 322  |#define DIRInvlaidSector -2        
                             6207 ; 323  |
                             6208 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             6209 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             6210 ; 326  |#define FATwarningReservedCx 0x0A1111
                             6211 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             6212 ; 328  |//FATcxsFree==0 
                             6213 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             6214 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             6215 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             6216 ; 332  |
                             6217 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             6218 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             6219 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             6220 ; 336  |
                             6221 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             6222 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             6223 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             6224 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             6225 ; 341  |//No Free Cxs on FAT Scan!
                             6226 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             6227 ; 343  |
                             6228 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             6229 ; 345  |
                             6230 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             6231 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             6232 ; 348  |
                             6233 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             6234 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             6235 ; 351  |
                             6236 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             6237 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             6238 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             6239 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             6240 ; 356  |
                             6241 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             6242 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             6243 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             6244 ; 360  |
                             6245 ; 361  |#define SEEKprefix 0x85
                             6246 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             6247 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             6248 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             6249 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             6250 ; 366  |
                             6251 ; 367  |#define READprefix 0x86
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6252 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             6253 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             6254 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             6255 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             6256 ; 372  |#define READerrorFreeCx 0x860000
                             6257 ; 373  |#define READerrorEndOfChain 0x861111
                             6258 ; 374  |#define READerrorReservedCx 0x862222
                             6259 ; 375  |#define READerrorBadCx 0x863333
                             6260 ; 376  |
                             6261 ; 377  |#define WRITEprefix 0x87
                             6262 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             6263 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             6264 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             6265 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             6266 ; 382  |#define WRITEerrorFreeCx 0x870000
                             6267 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             6268 ; 384  |#define WRITEerrorReservedCx 0x872222
                             6269 ; 385  |#define WRITEerrorBadCx 0x873333
                             6270 ; 386  |
                             6271 ; 387  |#define UTILprefix 0x88
                             6272 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             6273 ; 389  |
                             6274 ; 390  |// Directory Error Codes
                             6275 ; 391  |
                             6276 ; 392  |// invalid DIR sector specified
                             6277 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             6278 ; 394  |// PATH search string has invlaid directory
                             6279 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             6280 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             6281 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             6282 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             6283 ; 399  |// Bad cluster number
                             6284 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             6285 ; 401  |// Can't open ROOT
                             6286 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             6287 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             6288 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             6289 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             6290 ; 406  |// bad record number to read
                             6291 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             6292 ; 408  |// record requeste not in range
                             6293 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             6294 ; 410  |// record requeste past end of ROOT
                             6295 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             6296 ; 412  |// device number invalid
                             6297 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             6298 ; 414  |// FCB Does not popint to a sub-Directory entry
                             6299 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             6300 ; 416  |// Path specified is invalid
                             6301 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             6302 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             6303 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             6304 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             6305 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             6306 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             6307 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             6308 ; 424  |
                             6309 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             6310 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             6311 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             6312 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             6313 ; 429  |// String Manipulation Error Codes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6314 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             6315 ; 431  |
                             6316 ; 432  |#endif //@DEF(ERRORS_INC)
                             6317 ; 433  |
                             6318 
                             6320 
                             6321 ; 288  |
                             6322 ; 289  |
                             6323 ; 290  |///////////////////////////////////////////////////////////////////////////////
                             6324 ; 291  |// Typedefs
                             6325 ; 292  |///////////////////////////////////////////////////////////////////////////////
                             6326 ; 293  |
                             6327 ; 294  |typedef struct {
                             6328 ; 295  |    P_NAND_REGION_INFO pRegion;
                             6329 ; 296  |    WORD wUBlkAddr;
                             6330 ; 297  |} ASYNC_ERASE_CALLBACK_PARAMS, * P_ASYNC_ERASE_CALLBACK_PARAMS;
                             6331 ; 298  |
                             6332 ; 299  |    #ifdef NDD_STRESS_TEST
                             6333 ; 300  |// This is used by the nand data drive stress test.
                             6334 ; 301  |// It is externed in nddAddBlkToBBTbl.c
                             6335 ; 302  |typedef struct {
                             6336 ; 303  |    WORD wNumBadBlocks;
                             6337 ; 304  |    WORD wBadBlockAddr[50];
                             6338 ; 305  |    WORD wChip[50];
                             6339 ; 306  |} STRESS_TEST_UPDATE_BB, * P_STRESS_TEST_UPDATE_BB;
                             6340 ; 307  |    #endif
                             6341 ; 308  |
                             6342 ; 309  |/////////////////////////////////////////////////////////////////////////////////
                             6343 ; 310  |//  UPDATE SECTORS MAPS
                             6344 ; 311  |//
                             6345 ; 312  |//  An array of Update Sector Maps are shared by all Data Drive Regions, to hold
                             6346 ; 313  |//  a mapping between HBlock Sectors and UBlock Sectors, in RAM, for HBlocks which 
                             6347 ; 314  |//  have open Updates.
                             6348 ; 315  |//
                             6349 ; 316  |//  Some Update Sectors Maps can consume a large amount of memory (depending on the
                             6350 ; 317  |//  number of Sectors per Block), so we have only a limited number of them.  There 
                             6351 ; 318  |//  may be many more Open Updates than Update Sectors Maps, so only a few Updates 
                             6352 ; 319  |//  are mapped, in RAM, at any one time.  Other Updates are mapped only by their 
                             6353 ; 320  |//  Logical Block Address (LBA) and Logical Sector Address (LSA) fields in the 
                             6354 ; 321  |//  Redundant Areas of the USectors on NAND.  
                             6355 ; 322  |//
                             6356 ; 323  |//  When a needed Update Sectors Map is not in RAM, it can built built, on demand,
                             6357 ; 324  |//  by reading the Redundant Areas off NAND and filling in one of the shared Update 
                             6358 ; 325  |//  Sectors Maps in the RAM array.  (Another map may have to be discarded to make
                             6359 ; 326  |//  room;  it can be rebuilt when needed.  Obviously, you want to have as many
                             6360 ; 327  |//  Update Sectors Maps in RAM as you can afford, to reduce "thrashing".)
                             6361 ; 328  |//
                             6362 ; 329  |//  An Update Sectors Map in the array is associated with a particular Update through
                             6363 ; 330  |//  the pRegion and iUBlkIdx elements.  These identify the Region and give the 
                             6364 ; 331  |//  index of the UBlock used for the Update.  To find the Updates Sector Map for a 
                             6365 ; 332  |//  particular Update for a given Region, you have to search the shared Update 
                             6366 ; 333  |//  Sectors Maps for a match;  there is no forward pointer (from the Updates Table), 
                             6367 ; 334  |//  to save memory.  Since there are a small number of Update Sectors Maps, this 
                             6368 ; 335  |//  should not be too many CPU cycles.  
                             6369 ; 336  |//
                             6370 ; 337  |//  Note the Updates Table gets resorted whenever an Update gets opened or closed, 
                             6371 ; 338  |//  so the index into the Updates Table is not a robust way to link the USectors Maps 
                             6372 ; 339  |//  to the Updates Table.  Instead, we use the UBlock index, which is fixed until the 
                             6373 ; 340  |//  Update gets closed.  Setting the Block Index to USECTORS_MAP_NOT_MAPPED clears the
                             6374 ; 341  |//  USectorMap entry.
                             6375 ; 342  |//
                             6376 ; 343  |//  pSectorsMap points at the actual Sector mappings.  It is an array of WORDS, but
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6377 ; 344  |//  it is accessed on a byte basis, using a "mod 3" function.  Each byte, by index,
                             6378 ; 345  |//  corresponds to a particular HSector.  The contents of the byte is either a USector
                             6379 ; 346  |//  index or iSectorsPerBlock (which is greater than any USector index).  A value of
                             6380 ; 347  |//  iSectorsPerBlock (MAX+1) means that the HBlock has not been updated.
                             6381 ; 348  |//
                             6382 ; 349  |//  USectors are written sequentially into the UBlock, and iUpdatedSectorsCnt keeps 
                             6383 ; 350  |//  track of how many have been written (and what the next write index is).
                             6384 ; 351  |//
                             6385 ; 352  |//  iSectorsPerBlock will be a power of two, ranging from 32 to 256.
                             6386 ; 353  |//
                             6387 ; 354  |//  The Sector Maps can be defined, dynamically, from a fixed-sized reserved area,
                             6388 ; 355  |//  such that the number of maps depends on the Sectors per Block.  For large blocks,
                             6389 ; 356  |//  you'd have a small number of maps, but for small blocks, you could have more
                             6390 ; 357  |//  maps.  More maps means less "trashing".
                             6391 ; 358  |//
                             6392 ; 359  |//  The DataDrive needs to keep a pointer to the array of Sector Maps, and it probably 
                             6393 ; 360  |//  defines them, in DataDriveInit.
                             6394 ; 361  |//
                             6395 ; 362  |/////////////////////////////////////////////////////////////////////////////////
                             6396 ; 363  |
                             6397 ; 364  |#define USECTORS_MAP_FREE  (0xffffff)
                             6398 ; 365  |
                             6399 ; 366  |// Using the last valid index here is ok because we never completely fill an update block
                             6400 ; 367  |#define USECTORS_MAP_MAX_SECTOR_INDEX (0xFF)
                             6401 ; 368  |#define USECTORS_THREE_UNMAPPED_SECTOR_INDICES (0xFFFFFF)
                             6402 ; 369  |
                             6403 ; 370  |typedef WORD * UPDATE_SECTORS_MAP_BYTES, * P_UPDATE_SECTORS_MAP_BYTES;
                             6404 
                             6406 
                             6407 ; 371  |
                             6408 ; 372  |typedef struct {
                             6409 ; 373  |
                             6410 ; 374  |  P_NAND_REGION_INFO       pRegion;                // Which Region and
                             6411 ; 375  |  WORD                     wUBlkIdx;               // which Update Block this Map goes wit
                                  h OR USECTORS_MAP_NOT_MAPPED
                             6412 ; 376  |
                             6413 ; 377  |  int                      iUpdatedSectorsCnt;     // The number of actual USectors that h
                                  ave been 
                             6414 ; 378  |                                                   // written to the UBlock.  They are wri
                                  tten 
                             6415 ; 379  |                                                   // sequentially, so this is also the in
                                  dex for
                             6416 ; 380  |                                                   // the next USector write
                             6417 ; 381  |
                             6418 ; 382  |  P_UPDATE_SECTORS_MAP_BYTES pSectorsMapBytes;     // array of Update Sector Mappings
                             6419 ; 383  |
                             6420 ; 384  |} UPDATE_SECTORS_MAP_DESCRIPTOR, * P_UPDATE_SECTORS_MAP_DESCRIPTOR;
                             6421 
                             6430 
                             6431 ; 385  |
                             6432 ; 386  |
                             6433 ; 387  |
                             6434 ; 388  |
                             6435 ; 389  |
                             6436 ; 390  |
                             6437 ; 391  |typedef struct {
                             6438 ; 392  |  WORD wNumRegions;
                             6439 ; 393  |  P_NAND_REGION_INFO *ppRegion;
                             6440 ; 394  |    
                             6441 ; 395  |  WORD iNumUSectorsMaps;
                             6442 ; 396  |  P_UPDATE_SECTORS_MAP_DESCRIPTOR pUSectorsMaps;
                             6443 ; 397  |  int iLastUSectorsMapIdxTouched;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6444 ; 398  |
                             6445 ; 399  |} NAND_DATA_DRIVE_INFO, * P_NAND_DATA_DRIVE_INFO;
                             6446 ; 400  |
                             6447 ; 401  |
                             6448 ; 402  |    #ifdef NDD_COUNT_ROUTINES
                             6449 ; 403  |typedef struct {
                             6450 ; 404  |    WORD AddUSector;
                             6451 ; 405  |    WORD BuildUSectorsMap;
                             6452 ; 406  |    WORD CloseUpdate;
                             6453 ; 407  |    WORD CloseUpdate_PreserveHSectors;
                             6454 ; 408  |    WORD GetFreeErasedUBlock;
                             6455 ; 409  |    WORD GetRecycledUBlock;
                             6456 ; 410  |    WORD GetUSectorsMap;
                             6457 ; 411  |    WORD KillUpdate;
                             6458 ; 412  |    WORD KillUSector;
                             6459 ; 413  |    WORD LookupUBlock;
                             6460 ; 414  |    WORD LookupUSector;
                             6461 ; 415  |    WORD ProtectUBlock;
                             6462 ; 416  |    WORD RecoverBadUBlock;
                             6463 ; 417  |    WORD StartNewUpdate;
                             6464 ; 418  |    WORD AddBlkToBBTbl;
                             6465 ; 419  |    WORD CopySectors;
                             6466 ; 420  |    WORD GetFreeErasedRBlock;
                             6467 ; 421  |    WORD LookupRBlock;
                             6468 ; 422  |    WORD RecoverBadHBlock;
                             6469 ; 423  |    WORD RecoverBadRBlock;
                             6470 ; 424  |    WORD SearchBBTableForPhysBlock;
                             6471 ; 425  |    WORD write_in_place;
                             6472 ; 426  |    WORD pin_allocation;
                             6473 ; 427  |} NDD_ROUTINE_COUNT, * P_NDD_ROUTINE_COUNT;
                             6474 ; 428  |    #endif
                             6475 ; 429  |
                             6476 ; 430  |
                             6477 ; 431  |
                             6478 ; 432  |///////////////////////////////////////////////////////////////////////////////
                             6479 ; 433  |// Prototypes
                             6480 ; 434  |///////////////////////////////////////////////////////////////////////////////
                             6481 ; 435  |RETCODE _reentrant NANDDataDriveInit(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
                             6482 ; 436  |
                             6483 ; 437  |RETCODE _reentrant NANDDataDriveGetInfo(
                             6484 ; 438  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             6485 ; 439  |    LOGICAL_DRIVE_INFO Type,
                             6486 ; 440  |    void * pInfo);
                             6487 
                             6499 
                             6500 ; 441  |
                             6501 ; 442  |RETCODE NANDDataDriveConvertLogicalToRelative(
                             6502 ; 443  |    P_NAND_DATA_DRIVE_INFO pDriveInfo,
                             6503 ; 444  |    DWORD dwLogicalSectorNum,
                             6504 ; 445  |    P_NAND_REGION_INFO *hRegion,
                             6505 ; 446  |    WORD *pwRelativeSectorNum);
                             6506 ; 447  |    
                             6507 ; 448  |RETCODE NANDDataDriveConvertRelativeToPhysical(
                             6508 ; 449  |    P_NAND_REGION_INFO pRegion,
                             6509 ; 450  |    WORD wRelativeSectorNum,
                             6510 ; 451  |    WORD *pwHBlockAddr,
                             6511 ; 452  |    WORD *pwHSectorIdx);
                             6512 ; 453  |    
                             6513 ; 454  |RETCODE NANDDataDriveLinearConvertRelativeToPhysical(
                             6514 ; 455  |    P_NAND_REGION_INFO pRegion,
                             6515 ; 456  |    WORD wRelativeSectorNum,
                             6516 ; 457  |    WORD *pwHBlkAddr,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6517 ; 458  |    WORD *pwHSectorIdx);
                             6518 ; 459  |    
                             6519 ; 460  |RETCODE NANDDataDriveMPConvertRelativeToPhysical(
                             6520 ; 461  |    P_NAND_REGION_INFO pRegion,
                             6521 ; 462  |    WORD wRelativeSectorNum,
                             6522 ; 463  |    WORD *pwHBlkAddr,
                             6523 ; 464  |    WORD *pwHSectorIdx);
                             6524 ; 465  |    
                             6525 ; 466  |RETCODE NANDDataDriveLookupRBlock(
                             6526 ; 467  |    P_NAND_REGION_INFO pRegion,
                             6527 ; 468  |    WORD HBlkAddr,
                             6528 ; 469  |    WORD *pRBlkAddr);
                             6529 ; 470  |    
                             6530 ; 471  |RETCODE NANDDataDriveSearchBBTableForPhysBlock(
                             6531 ; 472  |    P_NAND_REGION_INFO pRegion,
                             6532 ; 473  |    WORD wPhysBlkNum, 
                             6533 ; 474  |    WORD *pwBBIdx);
                             6534 ; 475  |
                             6535 ; 476  |RETCODE NANDDataDriveGetFreeErasedRBlock(
                             6536 ; 477  |    P_NAND_REGION_INFO pRegion,
                             6537 ; 478  |    WORD wOldBlockAddr,
                             6538 ; 479  |    WORD * pwRBlockAddr);
                             6539 ; 480  |
                             6540 ; 481  |RETCODE NANDDataDriveLinearGetFreeErasedRBlock(
                             6541 ; 482  |    P_NAND_REGION_INFO pRegion,
                             6542 ; 483  |    WORD wOldBlockAddr,
                             6543 ; 484  |    WORD * pwRBlockAddr);
                             6544 ; 485  |    
                             6545 ; 486  |RETCODE NANDDataDriveMPGetFreeErasedRBlock(
                             6546 ; 487  |    P_NAND_REGION_INFO pRegion,
                             6547 ; 488  |    WORD wOldBlockAddr,
                             6548 ; 489  |    WORD * pwRBlockAddr);
                             6549 ; 490  |
                             6550 ; 491  |RETCODE NANDDataDriveAddBlkToBBTbl(
                             6551 ; 492  |    P_NAND_REGION_INFO pRegion,
                             6552 ; 493  |    int iBlkAddr,
                             6553 ; 494  |    int iMapping);
                             6554 ; 495  |
                             6555 ; 496  |
                             6556 ; 497  |RETCODE NANDDataDriveRecoverBadHBlock(
                             6557 ; 498  |    P_NAND_REGION_INFO pRegion,
                             6558 ; 499  |    WORD wHBlockAddr,
                             6559 ; 500  |    WORD wNumSectors,
                             6560 ; 501  |    WORD *pwNewRBlockAddr);
                             6561 ; 502  |
                             6562 ; 503  |RETCODE NANDDataDriveRecoverBadRBlock(
                             6563 ; 504  |    P_NAND_REGION_INFO pRegion,
                             6564 ; 505  |    WORD wHBlockAddr,
                             6565 ; 506  |    WORD wRBlockAddr,
                             6566 ; 507  |    WORD wNumSectors,
                             6567 ; 508  |    WORD *pwNewRBlockAddr);
                             6568 ; 509  |
                             6569 ; 510  |RETCODE NANDDataDriveEraseBlock(
                             6570 ; 511  |    P_NAND_REGION_INFO pRegion, 
                             6571 ; 512  |    WORD wBlockAddr);
                             6572 ; 513  |
                             6573 ; 514  |RETCODE _reentrant NANDDataDriveWriteSector(
                             6574 ; 515  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             6575 ; 516  |    DWORD dwSectorNumber,
                             6576 ; 517  |    P_SECTOR_BUFFER pSectorData);
                             6577 ; 518  |
                             6578 ; 519  |RETCODE _reentrant nddWriteSector(
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6579 ; 520  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             6580 ; 521  |    DWORD dwSectorNumber,
                             6581 ; 522  |    P_SECTOR_BUFFER pSectorData);
                             6582 ; 523  |
                             6583 ; 524  |//#ifdef k_opt_performance_enhancement
                             6584 ; 525  |// this perf opt code block stays on even when perf opt is disabled.
                             6585 ; 526  |// the reason is to keep the stub of ndd_write_sector_in_place
                             6586 ; 527  |// in the build to prevent having to build with different .dsc files.
                             6587 ; 528  |RETCODE _reentrant ndd_write_sector_in_place(
                             6588 ; 529  |                                            P_LOGICAL_DRIVE_DESCRIPTOR p_descriptor,
                             6589 ; 530  |                                            DWORD dw_sector_number,
                             6590 ; 531  |                                            P_SECTOR_BUFFER p_sector_data);
                             6591 ; 532  |//#endif // k_opt_performance_enhancement
                             6592 ; 533  |
                             6593 ; 534  |
                             6594 ; 535  |RETCODE _reentrant NANDDataDriveReadSector(
                             6595 ; 536  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             6596 ; 537  |    DWORD dwSectorNumber,
                             6597 ; 538  |    P_SECTOR_BUFFER pSectorData);
                             6598 ; 539  |
                             6599 ; 540  |
                             6600 ; 541  |RETCODE NANDDataDriveCopySectors(P_NAND_REGION_INFO pRegion, 
                             6601 ; 542  |                                 WORD wSrcBlkAddr, 
                             6602 ; 543  |                                 WORD wSrcSectorIdx, 
                             6603 ; 544  |                                 WORD wDestBlkAddr, 
                             6604 ; 545  |                                 WORD wDestSectorIdx, 
                             6605 ; 546  |                                 WORD wNumSectorsToCopy);
                             6606 ; 547  |
                             6607 ; 548  |_reentrant BOOL NANDDataDriveAsyncEraseUBlkCallback(int iStatus, void *pObj);
                             6608 ; 549  |
                             6609 ; 550  |// Garbage Collecotr API
                             6610 ; 551  |RETCODE NANDForegroundGarbageCollector(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive);
                             6611 ; 552  |RETCODE NANDBackgroundGarbageCollector(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive);
                             6612 ; 553  |RETCODE NANDBackgroundGarbageCollectorEnable(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive)
                                  ;
                             6613 ; 554  |RETCODE NANDBackgroundGarbageCollectorDisable(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive
                                  );
                             6614 ; 555  |
                             6615 ; 556  |
                             6616 ; 557  |
                             6617 ; 558  |///////////////////////////////////////////////////////////////////////////////
                             6618 ; 559  |// Global variables
                             6619 ; 560  |///////////////////////////////////////////////////////////////////////////////
                             6620 ; 561  |extern BOOL g_bMultiWriteStarted;
                             6621 
                             6623 
                             6624 ; 562  |extern NAND_DATA_DRIVE_INFO g_NANDDriveInfo[];
                             6625 
                             6627 
                             6628 ; 563  |
                             6629 ; 564  |
                             6630 ; 565  |
                             6631 ; 566  |extern NAND_REGION_INFO                g_aInternalNANDRegionInfoStructs[];
                             6632 ; 567  |extern int                             g_iMaxNANDRegions;
                             6633 ; 568  |
                             6634 ; 569  |extern P_NAND_REGION_INFO              g_apInternalDataDriveRegions[];
                             6635 ; 570  |extern P_NAND_REGION_INFO              g_apInternalHiddenDriveRegion[];
                             6636 ; 571  |extern int                             g_iMaxNANDDataDriveRegions;
                             6637 ; 572  |
                             6638 ; 573  |extern NAND_BBTABLE_ENTRY              g_aInternalNANDMasterBBTable[];
                             6639 ; 574  |extern int                             g_iMaxNANDBadBlocks;
                             6640 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6642 
                             6643 ; 575  |
                             6644 ; 576  |extern NAND_UPDATES_ENTRY              g_aInternalNANDMasterUpdatesTable[];
                             6645 ; 577  |extern int                             g_iMaxNANDUpdateBlocks;
                             6646 ; 578  |
                             6647 ; 579  |extern WORD                            g_UpdateSectorsMapsMemory[];
                             6648 ; 580  |extern int                             g_iMaxWORDsForUpdateSectorsMaps;
                             6649 ; 581  |
                             6650 ; 582  |    #ifdef NDD_COUNT_ROUTINES
                             6651 ; 583  |extern NDD_ROUTINE_COUNT               g_NddRoutineCount;
                             6652 ; 584  |    #endif
                             6653 ; 585  |
                             6654 ; 586  |/////////////////////////////////////////////////////////////////////////////////
                             6655 ; 587  |//  TEST CODE
                             6656 ; 588  |/////////////////////////////////////////////////////////////////////////////////
                             6657 ; 589  |
                             6658 ; 590  |typedef enum {
                             6659 ; 591  |  USECTORS_TEST_NO_SECTORS,
                             6660 ; 592  |  USECTORS_TEST_FIRST_HSECTOR,
                             6661 ; 593  |  USECTORS_TEST_LAST_HSECTOR,
                             6662 ; 594  |  USECTORS_TEST_MIDDLE_HSECTOR,
                             6663 ; 595  |  USECTORS_TEST_ALL_HSECTORS,
                             6664 ; 596  |  USECTORS_TEST_HALF_HSECTORS,
                             6665 ; 597  |  USECTORS_TEST_FAIL
                             6666 ; 598  |} USECTORS_TEST;
                             6667 ; 599  |
                             6668 ; 600  |// TT - use MJ's method to debug MultiWrites. 
                             6669 ; 601  |// JN: Change default to undefined by commenting line below.
                             6670 ; 602  |//  #define DEBUG_MULTIWRITE 1
                             6671 ; 603  |  #ifdef DEBUG_MULTIWRITE
                             6672 ; 604  |    #define DebugMultiWrite() SystemHalt()
                             6673 ; 605  |  #else
                             6674 ; 606  |    #define DebugMultiWrite()
                             6675 ; 607  |  #endif
                             6676 
                             6686 
                             6687 ; 608  |
                             6688 ; 609  |extern USECTORS_TEST g_eUSECTORS_TEST;
                             6689 
                             6694 
                             6695 ; 610  |extern ASYNC_ERASE_CALLBACK_PARAMS g_AsyncEraseCallBackParam;
                             6696 ; 611  |
                             6697 ; 612  |// Must be a power of 2
                             6698 ; 613  |#define MAX_MULTI_WRITE_INFO    8
                             6699 ; 614  |#define MULTI_WRITE_FIFO_MODULO (MAX_MULTI_WRITE_INFO-1)
                             6700 ; 615  |
                             6701 ; 616  |typedef enum {
                             6702 ; 617  |    MultiWriteBlockTypeHBlock = 0,
                             6703 ; 618  |    MultiWriteBlockTypeUBlock = 1,
                             6704 ; 619  |    MultiWriteBlockTypeRBlock = 2
                             6705 ; 620  |} MULTI_WRITE_BLOCK_TYPE;
                             6706 ; 621  |    
                             6707 ; 622  |typedef enum {
                             6708 ; 623  |    MultiWritePipelineSectorFree = 0,
                             6709 ; 624  |    MultiWritePipelineSectorEccInProgress = 1,
                             6710 ; 625  |    MultiWritePipelineSectorDmaInProgress = 2,
                             6711 ; 626  |    MultiWritePipelineSectorProgramInProgress = 3,
                             6712 ; 627  |    MultiWritePipelineSectorReleasePending = 4
                             6713 ; 628  |} MULTI_WRITE_SECTOR_STATUS, * P_MULTI_WRITE_SECTOR_STATUS;
                             6714 
                             6725 
                             6726 ; 629  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6727 ; 630  |typedef struct {
                             6728 ; 631  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             6729 ; 632  |    P_NAND_MEDIA_INFO pNandMediaInfo;
                             6730 ; 633  |    P_NAND_DATA_DRIVE_INFO pNandDriveInfo;
                             6731 ; 634  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc;
                             6732 ; 635  |    P_NAND_PARAMETERS_DESCRIPTOR pNANDParms;
                             6733 ; 636  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             6734 ; 637  |    DWORD dwSectorNumber;
                             6735 ; 638  |    P_SECTOR_BUFFER pSectorData;
                             6736 ; 639  |    LONG lCallBackParameter;
                             6737 ; 640  |    // also need the block number?
                             6738 ; 641  |    MULTI_WRITE_SECTOR_STATUS eStatus;
                             6739 ; 642  |    RETCODE rtCode;
                             6740 ; 643  |} MULTI_WRITE_INFO, * P_MULTI_WRITE_INFO;
                             6741 ; 644  |
                             6742 ; 645  |typedef RETCODE (*DUMB_MULTIWRITE_PIPELINE_FUNCTION)(void);
                             6743 ; 646  |
                             6744 ; 647  |//#define DEBUG_MWRITE_CACHE 1
                             6745 ; 648  |#ifdef DEBUG_MWRITE_CACHE
                             6746 ; 649  |    #define DebugMwriteCache() SystemHalt()
                             6747 ; 650  |#else
                             6748 ; 651  |    #define DebugMwriteCache()
                             6749 ; 652  |#endif
                             6750 ; 653  |
                             6751 ; 654  |RETCODE _reentrant NANDDataDriveRecoverMultiWriteBlock(void);
                             6752 ; 655  |RETCODE _reentrant MultiWriteSectorRelease(
                             6753 ; 656  |    WORD wOffset,
                             6754 ; 657  |    RETCODE rtCode);
                             6755 
                             6771 
                             6772 ; 658  |RETCODE _reentrant MultiWriteCreateSectorInfo(P_MULTI_WRITE_INFO *hMultiWriteSectorInfo);
                             6773 ; 659  |RETCODE _reentrant MultiWriteRemoveSectorInfo(void);
                             6774 ; 660  |RETCODE _reentrant MultiWriteFetchSectorInfo(
                             6775 ; 661  |    WORD wOffset,
                             6776 ; 662  |    P_MULTI_WRITE_INFO * hMultiWriteSectorInfo);
                             6777 ; 663  |RETCODE _reentrant MWDCleanupFatalError(
                             6778 ; 664  |    BOOL bCallBacks,
                             6779 ; 665  |    LONG lCallBackParam);
                             6780 ; 666  |
                             6781 ; 667  |#endif // #ifndef _NANDDATADRIVE_H
                             6782 
                             6784 
                             6785 ; 22   |
                             6786 ; 23   |#ifdef MMC
                             6787 ; 24   |  #include "MMCDataDrive.h"
                             6788 
                             6790 
                             6791 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6792 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             6793 ; 3    |//
                             6794 ; 4    |// Filename: MMCDataDrive.h
                             6795 ; 5    |// Description: 
                             6796 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6797 ; 7    |
                             6798 ; 8    |#ifndef _MMCDATADRIVE_H
                             6799 ; 9    |#define _MMCDATADRIVE_H
                             6800 ; 10   |
                             6801 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             6802 ; 12   |// Includes
                             6803 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             6804 ; 14   |
                             6805 ; 15   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6806 ; 16   |// Definitions
                             6807 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             6808 ; 18   |
                             6809 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             6810 ; 20   |// Error codes
                             6811 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             6812 ; 22   |
                             6813 ; 23   |#include "errors.h"
                             6814 
                             6816 
                             6817 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             6818 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             6819 ; 3    |////
                             6820 ; 4    |//// Filename: errors.inc
                             6821 ; 5    |//// Description: 
                             6822 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             6823 ; 7    |
                             6824 ; 8    |#if (!defined(ERRORS_INC))
                             6825 ; 9    |#define ERRORS_INC 1
                             6826 ; 10   |
                             6827 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             6828 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             6829 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             6830 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             6831 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             6832 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             6833 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             6834 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             6835 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             6836 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             6837 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             6838 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             6839 ; 23   |// block in the device. The block was marked bad and tables updated.
                             6840 ; 24   |// The application must start over.
                             6841 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             6842 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             6843 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             6844 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             6845 ; 29   |
                             6846 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             6847 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             6848 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             6849 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             6850 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             6851 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             6852 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             6853 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             6854 ; 38   |//Specific to NAND
                             6855 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             6856 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             6857 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             6858 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             6859 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             6860 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             6861 ; 45   |
                             6862 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             6863 ; 47   |
                             6864 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             6865 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             6866 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             6867 ; 51   |
                             6868 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6869 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             6870 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             6871 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             6872 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             6873 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             6874 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             6875 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             6876 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             6877 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             6878 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             6879 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             6880 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             6881 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             6882 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             6883 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             6884 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             6885 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             6886 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             6887 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             6888 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             6889 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             6890 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             6891 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             6892 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             6893 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             6894 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             6895 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             6896 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             6897 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             6898 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             6899 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             6900 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             6901 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             6902 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             6903 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             6904 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             6905 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             6906 ; 90   |
                             6907 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             6908 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             6909 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             6910 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             6911 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             6912 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             6913 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             6914 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             6915 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             6916 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             6917 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             6918 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             6919 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             6920 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             6921 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             6922 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             6923 ; 107  |
                             6924 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             6925 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             6926 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             6927 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             6928 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             6929 ; 113  |
                             6930 ; 114  |// indicates that during the NandHalInit, the NandType did not
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6931 ; 115  |// match the previously initialized Nand chip type.
                             6932 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             6933 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             6934 ; 118  |// Errors from calling HIL functions
                             6935 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             6936 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             6937 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             6938 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             6939 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             6940 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             6941 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             6942 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             6943 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             6944 ; 128  |// for 3410 build
                             6945 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             6946 ; 130  |// for 3410 build
                             6947 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             6948 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             6949 ; 133  |
                             6950 ; 134  |// indicates that the GetStatus returned a FAIL
                             6951 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             6952 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             6953 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             6954 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             6955 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             6956 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             6957 ; 141  |// indicates the NAND was already BUSY
                             6958 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             6959 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             6960 ; 144  |// ECC Error Codes
                             6961 ; 145  |// ECC Computation has successfully completed
                             6962 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             6963 ; 147  |// ECC computation still busy
                             6964 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             6965 ; 149  |// timed out while waiting on object
                             6966 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             6967 ; 151  |// flag already set for SDK2.4 lock
                             6968 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             6969 ; 153  |
                             6970 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             6971 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             6972 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             6973 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             6974 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             6975 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             6976 ; 160  |
                             6977 ; 161  |// MMC Errors
                             6978 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             6979 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             6980 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             6981 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             6982 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             6983 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             6984 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             6985 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             6986 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             6987 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             6988 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             6989 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             6990 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             6991 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             6992 ; 176  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6993 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             6994 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             6995 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             6996 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             6997 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             6998 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             6999 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             7000 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             7001 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             7002 ; 186  |
                             7003 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             7004 ; 188  |//// MMC HAL Error codes
                             7005 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             7006 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             7007 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             7008 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             7009 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             7010 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             7011 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             7012 ; 196  |
                             7013 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             7014 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             7015 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             7016 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             7017 ; 201  |
                             7018 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             7019 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             7020 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             7021 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             7022 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             7023 ; 207  |
                             7024 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             7025 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             7026 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             7027 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             7028 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             7029 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             7030 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             7031 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             7032 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             7033 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             7034 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             7035 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             7036 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             7037 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             7038 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             7039 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             7040 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             7041 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             7042 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             7043 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             7044 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             7045 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             7046 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             7047 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             7048 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             7049 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             7050 ; 234  |
                             7051 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             7052 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             7053 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             7054 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7055 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             7056 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             7057 ; 241  |
                             7058 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             7059 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             7060 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             7061 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             7062 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             7063 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             7064 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             7065 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             7066 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             7067 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             7068 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             7069 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             7070 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             7071 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             7072 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             7073 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             7074 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             7075 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             7076 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             7077 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             7078 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             7079 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             7080 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             7081 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             7082 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             7083 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             7084 ; 268  |
                             7085 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             7086 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             7087 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             7088 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             7089 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             7090 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             7091 ; 275  |
                             7092 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             7093 ; 277  |//MATH errors...
                             7094 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             7095 ; 279  |
                             7096 ; 280  |//Memory Pointer errors...
                             7097 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             7098 ; 282  |//****************************************************************/
                             7099 ; 283  |#if (!defined(NOERROR))
                             7100 ; 284  |#define NOERROR 0
                             7101 ; 285  |#endif
                             7102 ; 286  |
                             7103 ; 287  |////Added by RAKS
                             7104 ; 288  |
                             7105 ; 289  |#define ERRProgram 0x911111
                             7106 ; 290  |#define ERRNoMedia 0x922222
                             7107 ; 291  |#define ERRHwFail 0x933333   
                             7108 ; 292  |#define ERRInvMedia 0x944444
                             7109 ; 293  |#define ERRBlkFail 0x955555
                             7110 ; 294  |#define ERRInvDataStatus 0x966666
                             7111 ; 295  |#define ERRWriteFail 0x977777
                             7112 ; 296  |#define ERRECCCorr 0x988888
                             7113 ; 297  |#define ERRECCFail 0x999999
                             7114 ; 298  |#define ERRZoneFull 0x9aaaaa
                             7115 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             7116 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7117 ; 301  |//invalid partition table signature. 
                             7118 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             7119 ; 303  |//boot ID bad
                             7120 ; 304  |#define ERRBootID 0x9BBBBB   
                             7121 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             7122 ; 306  |////Nothing was here : RAKS
                             7123 ; 307  |//JUMP instruction bad
                             7124 ; 308  |#define ERRBootJump 0x9DDDDD  
                             7125 ; 309  |//ID Byte bad
                             7126 ; 310  |#define ERRIDByte 0x9EEEEE  
                             7127 ; 311  |
                             7128 ; 312  |
                             7129 ; 313  |//****************************************************************
                             7130 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             7131 ; 315  |//****************************************************************
                             7132 ; 316  |// Master ERROR File
                             7133 ; 317  |//****************************************************************/
                             7134 ; 318  |// FAT File System Error Codes
                             7135 ; 319  |// corrupt FAT
                             7136 ; 320  |#define FATCorrupt -1        
                             7137 ; 321  |// invalid FAT sector
                             7138 ; 322  |#define DIRInvlaidSector -2        
                             7139 ; 323  |
                             7140 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             7141 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             7142 ; 326  |#define FATwarningReservedCx 0x0A1111
                             7143 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             7144 ; 328  |//FATcxsFree==0 
                             7145 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             7146 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             7147 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             7148 ; 332  |
                             7149 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             7150 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             7151 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             7152 ; 336  |
                             7153 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             7154 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             7155 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             7156 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             7157 ; 341  |//No Free Cxs on FAT Scan!
                             7158 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             7159 ; 343  |
                             7160 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             7161 ; 345  |
                             7162 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             7163 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             7164 ; 348  |
                             7165 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             7166 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             7167 ; 351  |
                             7168 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             7169 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             7170 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             7171 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             7172 ; 356  |
                             7173 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             7174 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             7175 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             7176 ; 360  |
                             7177 ; 361  |#define SEEKprefix 0x85
                             7178 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7179 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             7180 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             7181 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             7182 ; 366  |
                             7183 ; 367  |#define READprefix 0x86
                             7184 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             7185 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             7186 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             7187 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             7188 ; 372  |#define READerrorFreeCx 0x860000
                             7189 ; 373  |#define READerrorEndOfChain 0x861111
                             7190 ; 374  |#define READerrorReservedCx 0x862222
                             7191 ; 375  |#define READerrorBadCx 0x863333
                             7192 ; 376  |
                             7193 ; 377  |#define WRITEprefix 0x87
                             7194 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             7195 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             7196 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             7197 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             7198 ; 382  |#define WRITEerrorFreeCx 0x870000
                             7199 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             7200 ; 384  |#define WRITEerrorReservedCx 0x872222
                             7201 ; 385  |#define WRITEerrorBadCx 0x873333
                             7202 ; 386  |
                             7203 ; 387  |#define UTILprefix 0x88
                             7204 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             7205 ; 389  |
                             7206 ; 390  |// Directory Error Codes
                             7207 ; 391  |
                             7208 ; 392  |// invalid DIR sector specified
                             7209 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             7210 ; 394  |// PATH search string has invlaid directory
                             7211 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             7212 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             7213 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             7214 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             7215 ; 399  |// Bad cluster number
                             7216 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             7217 ; 401  |// Can't open ROOT
                             7218 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             7219 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             7220 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             7221 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             7222 ; 406  |// bad record number to read
                             7223 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             7224 ; 408  |// record requeste not in range
                             7225 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             7226 ; 410  |// record requeste past end of ROOT
                             7227 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             7228 ; 412  |// device number invalid
                             7229 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             7230 ; 414  |// FCB Does not popint to a sub-Directory entry
                             7231 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             7232 ; 416  |// Path specified is invalid
                             7233 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             7234 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             7235 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             7236 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             7237 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             7238 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             7239 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             7240 ; 424  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7241 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             7242 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             7243 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             7244 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             7245 ; 429  |// String Manipulation Error Codes
                             7246 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             7247 ; 431  |
                             7248 ; 432  |#endif //@DEF(ERRORS_INC)
                             7249 ; 433  |
                             7250 
                             7252 
                             7253 ; 24   |
                             7254 ; 25   |
                             7255 ; 26   |///////////////////////////////////////////////////////////////////////////////
                             7256 ; 27   |// Typedefs
                             7257 ; 28   |///////////////////////////////////////////////////////////////////////////////
                             7258 ; 29   |
                             7259 ; 30   |///////////////////////////////////////////////////////////////////////////////
                             7260 ; 31   |// Prototypes
                             7261 ; 32   |///////////////////////////////////////////////////////////////////////////////
                             7262 ; 33   |RETCODE _reentrant MMCDataDriveInit(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
                             7263 ; 34   |
                             7264 ; 35   |RETCODE _reentrant MMCDataDriveGetInfo(
                             7265 ; 36   |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7266 ; 37   |    LOGICAL_DRIVE_INFO Type,
                             7267 ; 38   |    void * pInfo);
                             7268 ; 39   |
                             7269 ; 40   |RETCODE _reentrant MMCDataDriveSetInfo(
                             7270 ; 41   |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7271 ; 42   |    LOGICAL_DRIVE_INFO Type, void * pInfo);
                             7272 ; 43   |
                             7273 ; 44   |RETCODE _reentrant MMCDataDriveReadSector(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7274 ; 45   |    DWORD dwSectorNumber, P_SECTOR_BUFFER pSectorData);
                             7275 ; 46   |
                             7276 ; 47   |RETCODE _reentrant MMCDataDriveWriteSector( P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7277 ; 48   |    DWORD dwSectorNumber, P_SECTOR_BUFFER pSectorData);
                             7278 ; 49   |
                             7279 ; 50   |RETCODE _reentrant MmcDataDriveMultiWriteSetup(
                             7280 ; 51   |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7281 ; 52   |    DWORD dwStartSectorNumber,
                             7282 ; 53   |    WORD wSectorCount,
                             7283 ; 54   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             7284 ; 55   |
                             7285 ; 56   |RETCODE _reentrant MmcDataDriveMultiWriteSector(
                             7286 ; 57   |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7287 ; 58   |    P_SECTOR_BUFFER pSectorData,
                             7288 ; 59   |    LONG lCallBackPassThru);
                             7289 ; 60   |
                             7290 ; 61   |RETCODE _reentrant MMCDataDriveErase(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             7291 ; 62   |                                     WORD wMagicNumber);
                             7292 ; 63   |
                             7293 ; 64   |RETCODE _reentrant MMCDataDriveFlush(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor );
                             7294 ; 65   |
                             7295 ; 66   |
                             7296 ; 67   |
                             7297 ; 68   |_reentrant BOOL MMCDataDriveAsyncEraseCallback(int iStatus, void *pObj);
                             7298 ; 69   |
                             7299 ; 70   |extern LOGICAL_DRIVE_API MMCDataDriveApi;
                             7300 ; 71   |
                             7301 ; 72   |///////////////////////////////////////////////////////////////////////////////
                             7302 ; 73   |// Global variables
                             7303 ; 74   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7304 ; 75   |
                             7305 ; 76   |#endif // #ifndef _MMCDATADRIVE_H
                             7306 
                             7308 
                             7309 ; 25   |  #include "MMCddi.h"
                             7310 
                             7312 
                             7313 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7314 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             7315 ; 3    |//
                             7316 ; 4    |// Filename: MMCDdi.h
                             7317 ; 5    |// Description: 
                             7318 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7319 ; 7    |
                             7320 ; 8    |#ifndef _MMCDDI_H
                             7321 ; 9    |#define _MMCDDI_H
                             7322 ; 10   |
                             7323 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             7324 ; 12   |// Includes
                             7325 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             7326 ; 14   |
                             7327 ; 15   |#include "ddildl_internal.h"
                             7328 
                             7330 
                             7331 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7332 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             7333 ; 3    |//
                             7334 ; 4    |// Filename: ddildl_internal.h
                             7335 ; 5    |// Description: 
                             7336 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7337 ; 7    |#ifndef _DDILDL_INTERNAL_H
                             7338 ; 8    |#define _DDILDL_INTERNAL_H
                             7339 ; 9    |
                             7340 ; 10   |#include "ddildl.h"
                             7341 ; 11   |
                             7342 ; 12   |///////////////////////////////////////
                             7343 ; 13   |// Logical Media structures
                             7344 ; 14   |///////////////////////////////////////
                             7345 ; 15   |
                             7346 ; 16   |typedef struct {
                             7347 ; 17   |    // Discovered at Run Time by MediaInit:
                             7348 ; 18   |    WORD    wMediaNumber;
                             7349 ; 19   |    BOOL    bInitialized;
                             7350 ; 20   |    MEDIA_STATE eState;
                             7351 ; 21   |    BOOL    bAllocated;
                             7352 ; 22   |    BOOL    bWriteProtected;
                             7353 ; 23   |    WORD    wNumberOfDrives;//on this media
                             7354 ; 24   |    DWORD   dwSizeInBytes;
                             7355 ; 25   |    WORD    wAllocationUnitSizeInBytes;
                             7356 ; 26   |    PHYSICAL_MEDIA_TYPE PhysicalType;
                             7357 ; 27   |    void * pMediaInfo;  // same as in LOGICAL_DRIVE_DESCRIPTOR
                             7358 ; 28   |} LOGICAL_MEDIA_DESCRIPTOR, * P_LOGICAL_MEDIA_DESCRIPTOR;
                             7359 ; 29   |
                             7360 ; 30   |// Logical Media API functions
                             7361 ; 31   |typedef _reentrant RETCODE (*P_MEDIA_INIT_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR);
                             7362 ; 32   |typedef RETCODE _reentrant (*P_MEDIA_ALLOCATE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             7363 ; 33   |    P_MEDIA_ALLOCATION_TABLE);
                             7364 ; 34   |typedef RETCODE _reentrant (*P_MEDIA_DISCOVER_ALLOCATION_FUNCTION)(P_LOGICAL_MEDIA_DESCRIP
                                  TOR);
                             7365 ; 35   |typedef RETCODE _reentrant (*P_MEDIA_GET_MEDIA_TABLE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                                  
                             7366 ; 36   |    P_MEDIA_ALLOCATION_TABLE);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7367 ; 37   |typedef RETCODE _reentrant (*P_MEDIA_GET_INFO_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             7368 ; 38   |    LOGICAL_MEDIA_INFO, void * _Y);
                             7369 ; 39   |typedef RETCODE _reentrant (*P_MEDIA_ERASE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             7370 ; 40   |    WORD wMagicNumber);
                             7371 ; 41   |
                             7372 ; 42   |typedef struct {
                             7373 ; 43   |    WORD wInitCodeBank;
                             7374 ; 44   |    P_MEDIA_INIT_FUNCTION pInit;
                             7375 ; 45   |    WORD wAllocateCodeBank;
                             7376 ; 46   |    P_MEDIA_ALLOCATE_FUNCTION pAllocate;
                             7377 ; 47   |    WORD wDiscoverAllocationCodeBank;
                             7378 ; 48   |    P_MEDIA_DISCOVER_ALLOCATION_FUNCTION pDiscoverAllocation;
                             7379 ; 49   |    WORD wGetMediaTableCodeBank;
                             7380 ; 50   |    P_MEDIA_GET_MEDIA_TABLE_FUNCTION pGetMediatable;
                             7381 ; 51   |    WORD wGetInfoCodeBank;
                             7382 ; 52   |    P_MEDIA_GET_INFO_FUNCTION pGetInfo;
                             7383 ; 53   |    WORD wEraseCodeBank;
                             7384 ; 54   |    P_MEDIA_ERASE_FUNCTION pErase;
                             7385 ; 55   |} LOGICAL_MEDIA_API, * P_LOGICAL_MEDIA_API;
                             7386 ; 56   |
                             7387 ; 57   |typedef struct {
                             7388 ; 58   |    P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor;
                             7389 ; 59   |    P_LOGICAL_MEDIA_API pApi;
                             7390 ; 60   |} LOGICAL_MEDIA, * P_LOGICAL_MEDIA;
                             7391 ; 61   |
                             7392 ; 62   |///////////////////////////////////////
                             7393 ; 63   |// Logical Drive structures
                             7394 ; 64   |///////////////////////////////////////
                             7395 ; 65   |
                             7396 ; 66   |typedef struct {
                             7397 ; 67   |    // Discovered at Run Time by MediaDiscover
                             7398 ; 68   |    BOOL    bInitialized;
                             7399 ; 69   |    BOOL    bPresent;       // Indicates if a system drive is present
                             7400 ; 70   |                            // wTag from Config Block matches wTag from Drive
                             7401 ; 71   |                            // redundant area
                             7402 ; 72   |    BOOL    bErased;
                             7403 ; 73   |    BOOL    bWriteProtected;
                             7404 ; 74   |    DWORD   dwNumberOfSectors;
                             7405 ; 75   |    LOGICAL_DRIVE_TYPE Type;
                             7406 ; 76   |    WORD    wTag;
                             7407 ; 77   |    WORD    wDriveNumber;
                             7408 ; 78   |    DWORD   dwSizeInBytes;
                             7409 ; 79   |    WORD    wSectorSizeInBytes; // not included bad blocks (NAND media)
                             7410 ; 80   |    WORD    wEraseSizeInBytes;
                             7411 ; 81   |    SYSTEM_VERSION ProjectVersion;
                             7412 ; 82   |    SYSTEM_VERSION ComponentVersion;
                             7413 ; 83   |    P_LOGICAL_MEDIA_DESCRIPTOR pLogicalMediaDescriptor;
                             7414 ; 84   |    void * pMediaInfo;  // same as in LOGICAL_MEDIA_DESCRIPTOR
                             7415 ; 85   |    void * pDriveInfo;
                             7416 ; 86   |} LOGICAL_DRIVE_DESCRIPTOR, * P_LOGICAL_DRIVE_DESCRIPTOR;
                             7417 ; 87   |
                             7418 ; 88   |// Logical Drive API functions
                             7419 ; 89   |typedef RETCODE _reentrant (*P_DRIVE_INIT_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             7420 ; 90   |typedef RETCODE _reentrant (*P_DRIVE_GET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             7421 ; 91   |    LOGICAL_DRIVE_INFO, void *);
                             7422 ; 92   |typedef RETCODE _reentrant (*P_DRIVE_SET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             7423 ; 93   |    LOGICAL_DRIVE_INFO, void *);
                             7424 ; 94   |typedef RETCODE _reentrant (*P_DRIVE_READ_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             7425 ; 95   |    DWORD, P_SECTOR_BUFFER);
                             7426 ; 96   |typedef RETCODE _reentrant (*P_DRIVE_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             7427 ; 97   |    DWORD, P_SECTOR_BUFFER);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7428 ; 98   |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SETUP_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTO
                                  R,
                             7429 ; 99   |    DWORD, WORD, MULTI_WRITE_CALLBACK_FUNCTION);
                             7430 ; 100  |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPT
                                  OR,
                             7431 ; 101  |    P_SECTOR_BUFFER, LONG);
                             7432 ; 102  |typedef RETCODE _reentrant (*P_DRIVE_ERASE_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR, WORD);
                             7433 ; 103  |typedef RETCODE _reentrant (*P_DRIVE_FLUSH_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             7434 ; 104  |
                             7435 ; 105  |typedef struct {
                             7436 ; 106  |    WORD wInitCodeBank;
                             7437 ; 107  |    P_DRIVE_INIT_FUNCTION pInit;
                             7438 ; 108  |    WORD wGetInfoCodeBank;
                             7439 ; 109  |    P_DRIVE_GET_INFO_FUNCTION pGetInfo;
                             7440 ; 110  |    WORD wSetInfoCodeBank;
                             7441 ; 111  |    P_DRIVE_SET_INFO_FUNCTION pSetInfo;
                             7442 ; 112  |    WORD wReadSectorCodeBank;
                             7443 ; 113  |    P_DRIVE_READ_SECTOR_FUNCTION pReadSector;
                             7444 ; 114  |    WORD wWriteSectorCodeBank;
                             7445 ; 115  |    P_DRIVE_WRITE_SECTOR_FUNCTION pWriteSector;
                             7446 ; 116  |    WORD wMultiWriteSetupCodeBank;
                             7447 ; 117  |    P_DRIVE_MULTI_WRITE_SETUP_FUNCTION pMultiWriteSetup;
                             7448 ; 118  |    WORD wMultiWriteSectorCodeBank;
                             7449 ; 119  |    P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION pMultiWriteSector;
                             7450 ; 120  |    WORD wEraseCodeBank;
                             7451 ; 121  |    P_DRIVE_ERASE_FUNCTION pErase;
                             7452 ; 122  |    WORD wFlushCodeBank;
                             7453 ; 123  |    P_DRIVE_FLUSH_FUNCTION pFlush;
                             7454 ; 124  |} LOGICAL_DRIVE_API, * P_LOGICAL_DRIVE_API;
                             7455 ; 125  |
                             7456 ; 126  |typedef struct {
                             7457 ; 127  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             7458 ; 128  |    P_LOGICAL_DRIVE_API pApi;
                             7459 ; 129  |} LOGICAL_DRIVE, * P_LOGICAL_DRIVE;
                             7460 ; 130  |
                             7461 ; 131  |///////////////////////////////////////////////////////////////////////////////
                             7462 ; 132  |// Global variables
                             7463 ; 133  |///////////////////////////////////////////////////////////////////////////////
                             7464 ; 134  |extern MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[];
                             7465 ; 135  |extern LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[];
                             7466 ; 136  |extern LOGICAL_MEDIA g_Media[];
                             7467 ; 137  |extern WORD g_wNumMedia;
                             7468 ; 138  |extern LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[];
                             7469 ; 139  |extern LOGICAL_DRIVE g_Drive[];
                             7470 ; 140  |extern WORD g_wNumDrives;
                             7471 ; 141  |
                             7472 ; 142  |///////////////////////////////////////////////////////////////////////////////
                             7473 ; 143  |// SysCallFunction Variants
                             7474 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             7475 ; 145  |RETCODE _asmfunc SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR_f(WORD * RESOURCE,RETCODE _ree
                                  ntrant (int,int,int*),  int, int, int *);
                             7476 ; 146  |#define SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR(rsrc,func,a,b,p) SysCallFunction_P_LOGI
                                  CAL_MEDIA_DESCRIPTOR_f((void*)rsrc,(func),(a),(b),(p))
                             7477 ; 147  |
                             7478 ; 148  |#endif
                             7479 
                             7481 
                             7482 ; 16   |#include "mmchal.h"
                             7483 
                             7485 
                             7486 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7487 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7488 ; 3    |//
                             7489 ; 4    |// Filename: mmchal.h
                             7490 ; 5    |// Description: 
                             7491 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7492 ; 7    |
                             7493 ; 8    |#ifndef _MMCHAL_H
                             7494 ; 9    |#define _MMCHAL_H
                             7495 ; 10   |
                             7496 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             7497 ; 12   |// MMC HAL definitions
                             7498 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             7499 ; 14   |
                             7500 ; 15   |#define MMC_NULL_ARG    0
                             7501 ; 16   |
                             7502 ; 17   |// MMC commands
                             7503 ; 18   |#define MMC_CMD0        0x40|0
                             7504 ; 19   |#define MMC_CMD1        0x40|1
                             7505 ; 20   |#define MMC_CMD8                0x40|8
                             7506 ; 21   |#define MMC_CMD9        0x40|9
                             7507 ; 22   |#define MMC_CMD10       0x40|10
                             7508 ; 23   |#define MMC_CMD12       0x40|12
                             7509 ; 24   |#define MMC_CMD13       0x40|13
                             7510 ; 25   |#define MMC_CMD16       0x40|16
                             7511 ; 26   |#define MMC_CMD17       0x40|17
                             7512 ; 27   |#define MMC_CMD18       0x40|18
                             7513 ; 28   |#define MMC_CMD23       0x40|23
                             7514 ; 29   |#define MMC_CMD24       0x40|24
                             7515 ; 30   |#define MMC_CMD25       0x40|25
                             7516 ; 31   |#define MMC_CMD27       0x40|27
                             7517 ; 32   |#define MMC_CMD28       0x40|28
                             7518 ; 33   |#define MMC_CMD29       0x40|29
                             7519 ; 34   |#define MMC_CMD30       0x40|30
                             7520 ; 35   |#define MMC_CMD32       0x40|32
                             7521 ; 36   |#define MMC_CMD33       0x40|33
                             7522 ; 37   |#define MMC_CMD35       0x40|35
                             7523 ; 38   |#define MMC_CMD36       0x40|36
                             7524 ; 39   |#define MMC_CMD38       0x40|38
                             7525 ; 40   |#define MMC_CMD42       0x40|42
                             7526 ; 41   |#define MMC_CMD55       0x40|55
                             7527 ; 42   |#define MMC_CMD56       0x40|56
                             7528 ; 43   |#define MMC_CMD58       0x40|58
                             7529 ; 44   |#define MMC_CMD59       0x40|59
                             7530 ; 45   |
                             7531 ; 46   |// SD-specific commands
                             7532 ; 47   |#define SD_ACMD13       0x40|13
                             7533 ; 48   |#define SD_ACMD22       0x40|22
                             7534 ; 49   |#define SD_ACMD23       0x40|23
                             7535 ; 50   |#define SD_ACMD41       0x40|41
                             7536 ; 51   |#define SD_ACMD42       0x40|42
                             7537 ; 52   |#define SD_ACMD51       0x40|51
                             7538 ; 53   |
                             7539 ; 54   |// Responses
                             7540 ; 55   |#define MMC_RESPONSE_TYPE       WORD
                             7541 ; 56   |#define MMC_RESPONSE_TYPE_R1    0
                             7542 ; 57   |#define MMC_RESPONSE_TYPE_R2    1
                             7543 ; 58   |#define MMC_RESPONSE_TYPE_R3    2
                             7544 ; 59   |
                             7545 ; 60   |#define MMC_R1_NO_ERROR                     0x00
                             7546 ; 61   |#define MMC_R1_IDLE_NO_ERROR                0x01
                             7547 ; 62   |#define MMC_R1_IN_IDLE_STATE_BITPOS         0
                             7548 ; 63   |#define MMC_R1_ERASE_RESET_BITPOS           1
                             7549 ; 64   |#define MMC_R1_ILLEGAL_COMMAND_BITPOS       2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7550 ; 65   |#define MMC_R1_COM_CRC_ERROR_BITPOS         3
                             7551 ; 66   |#define MMC_R1_ERASE_SEQUENCE_ERROR_BITPOS  4
                             7552 ; 67   |#define MMC_R1_ADDRESS_ERROR                5
                             7553 ; 68   |#define MMC_R1_PARAMETER_ERROR              6
                             7554 ; 69   |
                             7555 ; 70   |#define MMC_START_BYTE          0xFE
                             7556 ; 71   |
                             7557 ; 72   |#define MMC_CSD_VERSION_10      0
                             7558 ; 73   |#define MMC_CSD_VERSION_11      1
                             7559 ; 74   |#define MMC_CSD_VERSION_12      2
                             7560 ; 75   |#define MMC_CSD_VERSION_FROM_EXT_CSD    3
                             7561 ; 76   |
                             7562 ; 77   |#define MMC_SPEC_VERSION_10     0
                             7563 ; 78   |#define MMC_SPEC_VERSION_14     1
                             7564 ; 79   |#define MMC_SPEC_VERSION_20     2
                             7565 ; 80   |#define MMC_SPEC_VERSION_31     3
                             7566 ; 81   |#define MMC_SPEC_VERSION_40     4
                             7567 ; 82   |
                             7568 ; 83   |#define SD_CSD_VERSION_10       0
                             7569 ; 84   |
                             7570 ; 85   |#define MMC_CARD_TYPE           WORD
                             7571 ; 86   |#define MMC_CARD_TYPE_MMC       (MMC_CARD_TYPE)0
                             7572 ; 87   |#define MMC_CARD_TYPE_SD        (MMC_CARD_TYPE)1
                             7573 ; 88   |
                             7574 ; 89   |#define MMC_SUPPORTED_SECTOR_SIZE   512
                             7575 ; 90   |
                             7576 ; 91   |#define MMC_OCR_SUPPORT (DWORD)0x000000020000
                             7577 ; 92   |
                             7578 ; 93   |//   The STMP3400 max SCK speed is DCLK/6, STMP3410 is DCLK/2:
                             7579 ; 94   |//   Assume a 100MHz DCLK & SCK=DCLK/2=50Mhz. It takes a minimum of 15 DCLKs
                             7580 ; 95   |//   between each SPI byte transfer, so one byte takes (8*2)+15=31 DCLKs.  This
                             7581 ; 96   |//   is a byte rate of 1.612MBytes/s.  Assume all timeouts are 1s.
                             7582 ; 97   |#define MMC_PORT_TIMEOUT            (WORD)(100000000/31)
                             7583 ; 98   |#define MMC_START_BYTE_TIMEOUT      MMC_PORT_TIMEOUT
                             7584 ; 99   |#define MMC_WRITE_BUSY_TIMEOUT      MMC_PORT_TIMEOUT
                             7585 ; 100  |#define MMC_CSD_WRITE_BUSY_TIMEOUT  MMC_PORT_TIMEOUT
                             7586 ; 101  |#define MMC_ERASE_BUSY_TIMEOUT      MMC_PORT_TIMEOUT
                             7587 ; 102  |#define MMC_REGISTER_READ_TIMEOUT   MMC_PORT_TIMEOUT
                             7588 ; 103  |
                             7589 ; 104  |///////////////////////////////////////////////////////////////////////////////
                             7590 ; 105  |// MMC HAL structure definitions
                             7591 ; 106  |///////////////////////////////////////////////////////////////////////////////
                             7592 ; 107  |
                             7593 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             7594 ; 109  |// MMC definitions
                             7595 ; 110  |
                             7596 ; 111  |// ifdef this struct for SPI or MMCBUS (currently only support SPI)
                             7597 ; 112  |typedef struct {
                             7598 ; 113  |    _X WORD *wGpioBase;
                             7599 ; 114  |    WORD wGpioSetMask;
                             7600 ; 115  |    WORD wGpioClearMask;
                             7601 ; 116  |    _X WORD *wWriteProtectGpioBase;
                             7602 ; 117  |    WORD wWriteProtectGpioSetMask;
                             7603 ; 118  |    WORD wWriteProtectGpioClearMask;
                             7604 ; 119  |    _X WORD *wMediaDetectGpioBase;
                             7605 ; 120  |    WORD wMediaDetectGpioSetMask;
                             7606 ; 121  |    WORD wMediaDetectGpioClearMask;
                             7607 ; 122  |    WORD wMediaDetectPolarity;
                             7608 ; 123  |    WORD wSpiDeviceNumber;
                             7609 ; 124  |    BOOL bSPIBusInitialized;
                             7610 ; 125  |} MMC_PHYSICAL_BUS;
                             7611 ; 126  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7612 ; 127  |typedef struct {
                             7613 ; 128  |    WORD wCommand;
                             7614 ; 129  |    WORD wArg3;
                             7615 ; 130  |    WORD wArg2;
                             7616 ; 131  |    WORD wArg1;
                             7617 ; 132  |    WORD wArg0;
                             7618 ; 133  |    WORD wCRC7;
                             7619 ; 134  |} MMC_CMD;
                             7620 ; 135  |
                             7621 ; 136  |typedef union {
                             7622 ; 137  |    struct {
                             7623 ; 138  |        WORD Idle            : 1;
                             7624 ; 139  |        WORD EraseReset      : 1;
                             7625 ; 140  |        WORD IllCommand      : 1;
                             7626 ; 141  |        WORD ComCrcError     : 1;
                             7627 ; 142  |        WORD EraseSeqError   : 1;
                             7628 ; 143  |        WORD AddressError    : 1;
                             7629 ; 144  |        WORD ParamError      : 1;
                             7630 ; 145  |        WORD ZeroBit         : 1;
                             7631 ; 146  |    } B;
                             7632 ; 147  |    WORD I;
                             7633 ; 148  |} MMC_RESPONSE_R1;
                             7634 ; 149  |
                             7635 ; 150  |typedef union {
                             7636 ; 151  |    struct {
                             7637 ; 152  |        WORD CardLocked      : 1;
                             7638 ; 153  |        WORD WpeLucf         : 1;
                             7639 ; 154  |        WORD Error           : 1;
                             7640 ; 155  |        WORD CCError         : 1;
                             7641 ; 156  |        WORD CardEccFail     : 1;
                             7642 ; 157  |        WORD WpViolation     : 1;
                             7643 ; 158  |        WORD EraseParam      : 1;
                             7644 ; 159  |        WORD OorCsdovw       : 1;
                             7645 ; 160  |        WORD Idle            : 1;
                             7646 ; 161  |        WORD EraseReset      : 1;
                             7647 ; 162  |        WORD IllCommand      : 1;
                             7648 ; 163  |        WORD ComCrcError     : 1;
                             7649 ; 164  |        WORD EraseSeqError   : 1;
                             7650 ; 165  |        WORD AddressError    : 1;
                             7651 ; 166  |        WORD ParamError      : 1;
                             7652 ; 167  |    } B;
                             7653 ; 168  |    WORD I;
                             7654 ; 169  |} MMC_RESPONSE_R2;
                             7655 
                             7677 
                             7678 ; 170  |
                             7679 ; 171  |typedef struct {
                             7680 ; 172  |    DWORD dwOcr;
                             7681 ; 173  |    MMC_RESPONSE_R1 R1;
                             7682 ; 174  |} MMC_RESPONSE_R3;
                             7683 
                             7723 
                             7724 ; 175  |
                             7725 ; 176  |typedef union {
                             7726 ; 177  |    MMC_RESPONSE_R1 R1;
                             7727 ; 178  |    MMC_RESPONSE_R2 R2;
                             7728 ; 179  |    MMC_RESPONSE_R3 R3;
                             7729 ; 180  |} MMC_RESPONSE;
                             7730 
                             7747 
                             7748 ; 181  |    
                             7749 ; 182  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7750 ; 183  |///////////////////////////////////////////////////////////////////////////////
                             7751 ; 184  |// MMC prototypes
                             7752 ; 185  |///////////////////////////////////////////////////////////////////////////////
                             7753 ; 186  |
                             7754 ; 187  |// functions that map directly to MMC commands
                             7755 ; 188  |RETCODE _reentrant HalMmcGoIdleStateSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Re
                                  sponse);
                             7756 
                             7762 
                             7763 ; 189  |RETCODE _reentrant HalMmcSendOpCondSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Res
                                  ponse);
                             7764 ; 190  |RETCODE _reentrant HalMmcSendCidSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffer[]
                                  ,
                             7765 ; 191  |    MMC_RESPONSE * Response);
                             7766 ; 192  |RETCODE _reentrant HalMmcSendCsdSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffer[]
                                  ,
                             7767 ; 193  |    MMC_RESPONSE * Response);
                             7768 ; 194  |RETCODE _reentrant HalMmcAppCmdSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Respons
                                  e);
                             7769 ; 195  |RETCODE _reentrant HalMmcReadOcrSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Respon
                                  se);
                             7770 ; 196  |RETCODE _reentrant HalMmcSendStatusSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Res
                                  ponse);
                             7771 ; 197  |RETCODE _reentrant HalMmcReadSingleBlockSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddre
                                  ss,
                             7772 ; 198  |    WORD _X pwReadBuffer[], MMC_RESPONSE * Response);
                             7773 ; 199  |RETCODE _reentrant HalMmcProgramCsdSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffe
                                  r[],
                             7774 ; 200  |    MMC_RESPONSE * Response);
                             7775 ; 201  |RETCODE _reentrant HalMmcSetBlocklenSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwLength, 
                             7776 ; 202  |    MMC_RESPONSE * Response);
                             7777 ; 203  |RETCODE _reentrant HalMmcBusInit(MMC_PHYSICAL_BUS * pBusPointer);
                             7778 ; 204  |
                             7779 ; 205  |RETCODE _reentrant HalMmcWriteBlockSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddress,
                             7780 ; 206  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             7781 ; 207  |RETCODE _reentrant HalMmcWriteMultipleBlockFirstSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD
                                   dwAddress,
                             7782 ; 208  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             7783 ; 209  |RETCODE _reentrant HalMmcWriteMultipleBlockNextSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD 
                                  dwAddress,
                             7784 ; 210  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             7785 ; 211  |RETCODE _reentrant HalMmcWriteMultipleBlockEndSync(MMC_PHYSICAL_BUS * pBusPointer);
                             7786 ; 212  |RETCODE _reentrant HalMmcTagSectorStartSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddres
                                  s,
                             7787 ; 213  |    MMC_RESPONSE * Response);
                             7788 ; 214  |RETCODE _reentrant HalMmcTagSectorEndSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddress,
                                  
                             7789 ; 215  |    MMC_RESPONSE * Response);
                             7790 ; 216  |RETCODE _reentrant HalMmcTagEraseGroupStartSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAd
                                  dress,
                             7791 ; 217  |    MMC_RESPONSE * Response);
                             7792 ; 218  |RETCODE _reentrant HalMmcTagEraseGroupEndSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddr
                                  ess,
                             7793 ; 219  |    MMC_RESPONSE * Response);
                             7794 ; 220  |RETCODE _reentrant HalMmcErase(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Response);
                             7795 ; 221  |
                             7796 ; 222  |// functions that map directly to SD commands
                             7797 ; 223  |RETCODE _reentrant HalSdSendOpCondSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Resp
                                  onse);
                             7798 ; 224  |
                             7799 ; 225  |// other HAL functions
                             7800 ; 226  |#ifdef MMC_SEMAPHORE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7801 ; 227  |RETCODE _reentrant HalMmcPhysicalGrab(WORD wNum);
                             7802 ; 228  |RETCODE _reentrant HalMmcPhysicalRelease(WORD wNum);
                             7803 ; 229  |#endif
                             7804 ; 230  |BOOL _reentrant HalMmcIsDeviceInserted(MMC_PHYSICAL_BUS * pBusPointer);
                             7805 ; 231  |
                             7806 ; 232  |// ancillary functions
                             7807 ; 233  |RETCODE _reentrant MmcSendCommandSync(MMC_PHYSICAL_BUS * pBusPointer, WORD wCommand, 
                             7808 ; 234  |    DWORD dwArgument, MMC_RESPONSE * Response, MMC_RESPONSE_TYPE ResponseType);
                             7809 ; 235  |RETCODE _reentrant MmcWaitForRegisterSync(MMC_PHYSICAL_BUS * pBusPointer);
                             7810 ; 236  |RETCODE _reentrant MmcTransactionCompleteSync(MMC_PHYSICAL_BUS * pBusPointer);
                             7811 
                             7820 
                             7821 ; 237  |RETCODE _reentrant MmcCalcCommandCrc(MMC_CMD * pCmd);
                             7822 ; 238  |
                             7823 ; 239  |#endif // #ifndef _MMCHAL_H
                             7824 
                             7826 
                             7827 ; 17   |
                             7828 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             7829 ; 19   |// Definitions
                             7830 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             7831 ; 21   |
                             7832 ; 22   |#define MMC_SECTOR_SIZE_IN_BYTES            512
                             7833 ; 23   |
                             7834 ; 24   |typedef enum {
                             7835 ; 25   |  eMmcLockStateFree   = 0,
                             7836 ; 26   |  eMmcLockStateLocked = 1
                             7837 ; 27   |} MMC_LOCK_STATE;
                             7838 ; 28   |
                             7839 ; 29   |typedef BOOL    (*P_MMCBUSYDONE_CALLBACK_FUNCTION)(int, void*);
                             7840 ; 30   |
                             7841 ; 31   |/////////////////////////////////////////////////////////////////////////////////
                             7842 ; 32   |// MMC Physical Device Struct
                             7843 ; 33   |/////////////////////////////////////////////////////////////////////////////////
                             7844 ; 34   |typedef struct {
                             7845 ; 35   |    BOOL  bMMCCardPresent;
                             7846 ; 36   |        BOOL    bEnumerated;
                             7847 ; 37   |    BOOL        bWriteProtected;
                             7848 ; 38   |    BOOL        bEraseTested;
                             7849 ; 39   |    BOOL        bEraseIsFunctional;
                             7850 ; 40   |//    BOOL      bMmcMultiWriteSupported;
                             7851 ; 41   |//    BOOL      bMmcMultiWriteInProgress;
                             7852 ; 42   |} MMC_PHYSICAL_DEVICE_FLAGS, * P_MMC_PHYSICAL_DEVICE_FLAGS;
                             7853 ; 43   |
                             7854 ; 44   |
                             7855 ; 45   |/////////////////////////////////////////////////////////////////////////////////
                             7856 ; 46   |// MMC CID Struct
                             7857 ; 47   |/////////////////////////////////////////////////////////////////////////////////
                             7858 ; 48   |typedef struct {
                             7859 ; 49   |
                             7860 ; 50   |        WORD    wMID;       //Manufacturer ID
                             7861 ; 51   |    WORD        wCIN[4];        // Spec 1.4 only
                             7862 ; 52   |    WORD        wOID;       // OEM/App ID
                             7863 ; 53   |    DWORD       dwPNM;  // Product Name
                             7864 ; 54   |    WORD        wPRV;       // Product Revision
                             7865 ; 55   |    DWORD       dwPSN;  // Product Serial Number
                             7866 ; 56   |    WORD        wMDT;       // Manufacturing Date
                             7867 ; 57   |    WORD        wCRC;       // CRC checksum
                             7868 ; 58   |} MMC_CID, *P_MMC_CID;
                             7869 ; 59   |
                             7870 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             7871 ; 61   |// MMC CSD Struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7872 ; 62   |/////////////////////////////////////////////////////////////////////////////////
                             7873 ; 63   |typedef struct {
                             7874 ; 64   |
                             7875 ; 65   |    WORD        wCSD_STRUCTURE;         // *
                             7876 ; 66   |    WORD        wSPEC_VERS;                 // * System Specification Version
                             7877 ; 67   |    WORD        wTAAC;                        // Data Read Access Time 1
                             7878 ; 68   |    WORD        wNSAC;                        // Data Read Access Time 2
                             7879 ; 69   |    WORD        wTRANS_SPEED;             // Max Data Transfer Rate
                             7880 ; 70   |    WORD        wCCC;                           // Card Command Classes
                             7881 ; 71   |    WORD        wREAD_BL_LEN;             // * Max Read Data block Length
                             7882 ; 72   |    WORD        wREAD_BL_PARTIAL;               // Partial Blocks for read allowed
                             7883 ; 73   |    WORD        wWRITE_BLK_MISALIGN;    // Write Block misaligned
                             7884 ; 74   |    WORD        wREAD_BLK_MISALIGN;     // Read Block misaligned
                             7885 ; 75   |    WORD        wDSR_INP;                     // DSR Implemented
                             7886 ; 76   |    WORD        wC_SIZE;                            // * Device Size
                             7887 ; 77   |    WORD        wVDD_R_CURR_MIN;        // Max Read Current at Vdd Min
                             7888 ; 78   |    WORD        wVDD_R_CURR_MAX;        // Max Read Current at Vdd Max
                             7889 ; 79   |    WORD        wVDD_W_CURR_MIN;  // Max Write Current at Vdd Min
                             7890 ; 80   |    WORD        wVDD_W_CURR_MAX;        // Max Write Current at Vdd Max
                             7891 ; 81   |    WORD        wC_SIZE_MULT;             // * Device Size Mulitplier
                             7892 ; 82   |    WORD        wERASE_BLK_EN;          // Erase Block Enable (SD 1.0)
                             7893 ; 83   |    WORD        wSECTOR_SIZE;             // Sector Size (SD 1.0)
                             7894 ; 84   |    WORD        wERASE_GRP_SIZE;        // * Erase Group Size
                             7895 ; 85   |    WORD        wERASE_GRP_MULT;        // * Erase Group Multiplier
                             7896 ; 86   |    WORD        wWP_GRP_SIZE;             // Write Protect Group Size
                             7897 ; 87   |    WORD        wWP_GROUP_ENABLE;       // Write Protect Group Enable
                             7898 ; 88   |    WORD        wDEFAULT_ECC;             // Manufacturer Default ECC
                             7899 ; 89   |    WORD        wR2W_FACTOR;              // Write Speed Factor
                             7900 ; 90   |    WORD        wWRITE_BL_LEN;    // Max Write data block length
                             7901 ; 91   |    WORD        wWRITE_BL_PARTIAL;      // Partial blocks for  Write allowed
                             7902 ; 92   |    WORD        wFILE_FORMAT_GRP;       // File format group
                             7903 ; 93   |    WORD        wCOPY;                        // Copy Flag (OTP)
                             7904 ; 94   |    WORD        wPERM_WRITE_PROTECT;    // Permanent Write Protection
                             7905 ; 95   |    WORD        wTMP_WRITE_PROTECT;     // Temporary Write Protection
                             7906 ; 96   |    WORD        wFILE_FORMAT;             // File Format
                             7907 ; 97   |    WORD        wECC;                           // ECC
                             7908 ; 98   |    WORD        wCRC;                           // CRC
                             7909 ; 99   |                            //      *  =  Spec 3.1
                             7910 ; 100  |
                             7911 ; 101  |} MMC_CSD, *P_MMC_CSD;
                             7912 ; 102  |
                             7913 ; 103  |typedef struct _MMCMultiWriteStruct
                             7914 ; 104  |{
                             7915 ; 105  |  BOOL  bMultiWriteSupported;
                             7916 ; 106  |  BOOL  bMultiWriteStarted;
                             7917 ; 107  |  BOOL  bMultiWriteInProgress;
                             7918 ; 108  |  DWORD dwMultiWriteStartSectorNumber;
                             7919 ; 109  |  DWORD dwMultiWriteCurrentSectorNumber;
                             7920 ; 110  |  WORD  wMultiWriteSectorsRemaining;
                             7921 ; 111  |  DWORD dwMMCPreviousWriteSector;
                             7922 ; 112  |  MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction;
                             7923 ; 113  |} MMCMultiWriteStruct;
                             7924 
                             7997 
                             7998 ; 114  |
                             7999 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             8000 ; 116  |// MMC Media Info Struct
                             8001 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             8002 ; 118  |typedef struct {
                             8003 ; 119  |  MMC_LOCK_STATE  Lock;
                             8004 ; 120  |  BOOL            bMMCIsBusy;       // Used for SetMMCBusy and MMCIsReady
                             8005 ; 121  |  P_MMCBUSYDONE_CALLBACK_FUNCTION pMMCBusyDoneCallbackFunction;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8006 ; 122  |  void *          pMMCBusyArg;              // Used for SetMMCBusy and MMCIsReady
                             8007 ; 123  |  DWORD           dwTotalSectors;           //
                             8008 ; 124  |  MMC_PHYSICAL_DEVICE_FLAGS     Flags;  // operation flags
                             8009 ; 125  |  MMC_CARD_TYPE   Type;         // MMC or SD?
                             8010 ; 126  |  MMC_CID                     Cid;              // Card ID structure
                             8011 ; 127  |  MMC_CSD                     Csd;              // Card Specific Data Register
                             8012 ; 128  |  WORD                  wEraseSize;     // Erase Size
                             8013 ; 129  |  DWORD                 dwDeviceSize;
                             8014 ; 130  |  MMC_PHYSICAL_BUS * pMMCPhysicalBus;     //SPI Bus Pin definitions for Media.
                             8015 ; 131  |  MMCMultiWriteStruct MultWrite;
                             8016 ; 132  |} MMC_MEDIA_INFO, * P_MMC_MEDIA_INFO;
                             8017 ; 133  |
                             8018 ; 134  |
                             8019 ; 135  |///////////////////////////////////////////////////////////////////////////////
                             8020 ; 136  |// Error codes
                             8021 ; 137  |///////////////////////////////////////////////////////////////////////////////
                             8022 ; 138  |
                             8023 ; 139  |///////////////////////////////////////////////////////////////////////////////
                             8024 ; 140  |// Typedefs
                             8025 ; 141  |///////////////////////////////////////////////////////////////////////////////
                             8026 ; 142  |
                             8027 ; 143  |
                             8028 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             8029 ; 145  |// Prototypes
                             8030 ; 146  |///////////////////////////////////////////////////////////////////////////////
                             8031 ; 147  |
                             8032 ; 148  |
                             8033 ; 149  |///////////////////////////////////////////////////////////////////////////////
                             8034 ; 150  |// Global variables
                             8035 ; 151  |///////////////////////////////////////////////////////////////////////////////
                             8036 ; 152  |extern LOGICAL_MEDIA_API MMCMediaApi;
                             8037 ; 153  |extern LOGICAL_DRIVE_API MMCDataDriveApi;
                             8038 
                             8056 
                             8057 ; 154  |extern MMC_MEDIA_INFO MEDIA_DDI_MEM MmcMediaInfo;
                             8058 ; 155  |
                             8059 ; 156  |#endif // #ifndef _MMCDDI_H
                             8060 
                             8062 
                             8063 ; 26   |
                             8064 ; 27   |  #include "regsgpio.h"
                             8065 
                             8067 
                             8068 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             8069 ; 2    |#define __REGS_GPIO_INC 1
                             8070 ; 3    |
                             8071 ; 4    |#include "types.h"
                             8072 
                             8074 
                             8075 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8076 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8077 ; 3    |//
                             8078 ; 4    |// Filename: types.h
                             8079 ; 5    |// Description: Standard data types
                             8080 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8081 ; 7    |
                             8082 ; 8    |#ifndef _TYPES_H
                             8083 ; 9    |#define _TYPES_H
                             8084 ; 10   |
                             8085 ; 11   |// TODO:  move this outta here!
                             8086 ; 12   |#if !defined(NOERROR)
                             8087 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8088 ; 14   |#define SUCCESS 0
                             8089 ; 15   |#endif 
                             8090 ; 16   |#if !defined(SUCCESS)
                             8091 ; 17   |#define SUCCESS  0
                             8092 ; 18   |#endif
                             8093 ; 19   |#if !defined(ERROR)
                             8094 ; 20   |#define ERROR   -1
                             8095 ; 21   |#endif
                             8096 ; 22   |#if !defined(FALSE)
                             8097 ; 23   |#define FALSE 0
                             8098 ; 24   |#endif
                             8099 ; 25   |#if !defined(TRUE)
                             8100 ; 26   |#define TRUE  1
                             8101 ; 27   |#endif
                             8102 ; 28   |
                             8103 ; 29   |#if !defined(NULL)
                             8104 ; 30   |#define NULL 0
                             8105 ; 31   |#endif
                             8106 ; 32   |
                             8107 ; 33   |#define MAX_INT     0x7FFFFF
                             8108 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8109 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8110 ; 36   |#define MAX_ULONG   (-1) 
                             8111 ; 37   |
                             8112 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8113 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8114 ; 40   |
                             8115 ; 41   |
                             8116 ; 42   |#define BYTE    unsigned char       // btVarName
                             8117 ; 43   |#define CHAR    signed char         // cVarName
                             8118 ; 44   |#define USHORT  unsigned short      // usVarName
                             8119 ; 45   |#define SHORT   unsigned short      // sVarName
                             8120 ; 46   |#define WORD    unsigned int        // wVarName
                             8121 ; 47   |#define INT     signed int          // iVarName
                             8122 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8123 ; 49   |#define LONG    signed long         // lVarName
                             8124 ; 50   |#define BOOL    unsigned int        // bVarName
                             8125 ; 51   |#define FRACT   _fract              // frVarName
                             8126 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8127 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8128 ; 54   |#define FLOAT   float               // fVarName
                             8129 ; 55   |#define DBL     double              // dVarName
                             8130 ; 56   |#define ENUM    enum                // eVarName
                             8131 ; 57   |#define CMX     _complex            // cmxVarName
                             8132 ; 58   |typedef WORD UCS3;                   // 
                             8133 ; 59   |
                             8134 ; 60   |#define UINT16  unsigned short
                             8135 ; 61   |#define UINT8   unsigned char   
                             8136 ; 62   |#define UINT32  unsigned long
                             8137 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8138 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8139 ; 65   |#define WCHAR   UINT16
                             8140 ; 66   |
                             8141 ; 67   |//UINT128 is 16 bytes or 6 words
                             8142 ; 68   |typedef struct UINT128_3500 {   
                             8143 ; 69   |    int val[6];     
                             8144 ; 70   |} UINT128_3500;
                             8145 ; 71   |
                             8146 ; 72   |#define UINT128   UINT128_3500
                             8147 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8148 ; 74   |// Little endian word packed byte strings:   
                             8149 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8150 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8151 ; 77   |// Little endian word packed byte strings:   
                             8152 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8153 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8154 ; 80   |
                             8155 ; 81   |// Declare Memory Spaces To Use When Coding
                             8156 ; 82   |// A. Sector Buffers
                             8157 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8158 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8159 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8160 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8161 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8162 ; 88   |// B. Media DDI Memory
                             8163 ; 89   |#define MEDIA_DDI_MEM _Y
                             8164 ; 90   |
                             8165 ; 91   |
                             8166 ; 92   |
                             8167 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8168 ; 94   |// Examples of circular pointers:
                             8169 ; 95   |//    INT CIRC cpiVarName
                             8170 ; 96   |//    DWORD CIRC cpdwVarName
                             8171 ; 97   |
                             8172 ; 98   |#define RETCODE INT                 // rcVarName
                             8173 ; 99   |
                             8174 ; 100  |// generic bitfield structure
                             8175 ; 101  |struct Bitfield {
                             8176 ; 102  |    unsigned int B0  :1;
                             8177 ; 103  |    unsigned int B1  :1;
                             8178 ; 104  |    unsigned int B2  :1;
                             8179 ; 105  |    unsigned int B3  :1;
                             8180 ; 106  |    unsigned int B4  :1;
                             8181 ; 107  |    unsigned int B5  :1;
                             8182 ; 108  |    unsigned int B6  :1;
                             8183 ; 109  |    unsigned int B7  :1;
                             8184 ; 110  |    unsigned int B8  :1;
                             8185 ; 111  |    unsigned int B9  :1;
                             8186 ; 112  |    unsigned int B10 :1;
                             8187 ; 113  |    unsigned int B11 :1;
                             8188 ; 114  |    unsigned int B12 :1;
                             8189 ; 115  |    unsigned int B13 :1;
                             8190 ; 116  |    unsigned int B14 :1;
                             8191 ; 117  |    unsigned int B15 :1;
                             8192 ; 118  |    unsigned int B16 :1;
                             8193 ; 119  |    unsigned int B17 :1;
                             8194 ; 120  |    unsigned int B18 :1;
                             8195 ; 121  |    unsigned int B19 :1;
                             8196 ; 122  |    unsigned int B20 :1;
                             8197 ; 123  |    unsigned int B21 :1;
                             8198 ; 124  |    unsigned int B22 :1;
                             8199 ; 125  |    unsigned int B23 :1;
                             8200 ; 126  |};
                             8201 ; 127  |
                             8202 ; 128  |union BitInt {
                             8203 ; 129  |        struct Bitfield B;
                             8204 ; 130  |        int        I;
                             8205 ; 131  |};
                             8206 ; 132  |
                             8207 ; 133  |#define MAX_MSG_LENGTH 10
                             8208 ; 134  |struct CMessage
                             8209 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8210 ; 136  |        unsigned int m_uLength;
                             8211 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8212 ; 138  |};
                             8213 ; 139  |
                             8214 ; 140  |typedef struct {
                             8215 ; 141  |    WORD m_wLength;
                             8216 ; 142  |    WORD m_wMessage;
                             8217 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8218 ; 144  |} Message;
                             8219 ; 145  |
                             8220 ; 146  |struct MessageQueueDescriptor
                             8221 ; 147  |{
                             8222 ; 148  |        int *m_pBase;
                             8223 ; 149  |        int m_iModulo;
                             8224 ; 150  |        int m_iSize;
                             8225 ; 151  |        int *m_pHead;
                             8226 ; 152  |        int *m_pTail;
                             8227 ; 153  |};
                             8228 ; 154  |
                             8229 ; 155  |struct ModuleEntry
                             8230 ; 156  |{
                             8231 ; 157  |    int m_iSignaledEventMask;
                             8232 ; 158  |    int m_iWaitEventMask;
                             8233 ; 159  |    int m_iResourceOfCode;
                             8234 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8235 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8236 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8237 ; 163  |    int m_uTimeOutHigh;
                             8238 ; 164  |    int m_uTimeOutLow;
                             8239 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8240 ; 166  |};
                             8241 ; 167  |
                             8242 ; 168  |union WaitMask{
                             8243 ; 169  |    struct B{
                             8244 ; 170  |        unsigned int m_bNone     :1;
                             8245 ; 171  |        unsigned int m_bMessage  :1;
                             8246 ; 172  |        unsigned int m_bTimer    :1;
                             8247 ; 173  |        unsigned int m_bButton   :1;
                             8248 ; 174  |    } B;
                             8249 ; 175  |    int I;
                             8250 ; 176  |} ;
                             8251 ; 177  |
                             8252 ; 178  |
                             8253 ; 179  |struct Button {
                             8254 ; 180  |        WORD wButtonEvent;
                             8255 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8256 ; 182  |};
                             8257 ; 183  |
                             8258 ; 184  |struct Message {
                             8259 ; 185  |        WORD wMsgLength;
                             8260 ; 186  |        WORD wMsgCommand;
                             8261 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8262 ; 188  |};
                             8263 ; 189  |
                             8264 ; 190  |union EventTypes {
                             8265 ; 191  |        struct CMessage msg;
                             8266 ; 192  |        struct Button Button ;
                             8267 ; 193  |        struct Message Message;
                             8268 ; 194  |};
                             8269 ; 195  |
                             8270 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8271 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8272 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8273 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8274 ; 200  |
                             8275 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8276 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8277 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8278 ; 204  |
                             8279 ; 205  |#if DEBUG
                             8280 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8281 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8282 ; 208  |#else 
                             8283 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8284 ; 210  |#define DebugBuildAssert(x)    
                             8285 ; 211  |#endif
                             8286 ; 212  |
                             8287 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8288 ; 214  |//  #pragma asm
                             8289 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8290 ; 216  |//  #pragma endasm
                             8291 ; 217  |
                             8292 ; 218  |
                             8293 ; 219  |#ifdef COLOR_262K
                             8294 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8295 ; 221  |#elif defined(COLOR_65K)
                             8296 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8297 ; 223  |#else
                             8298 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8299 ; 225  |#endif
                             8300 ; 226  |    
                             8301 ; 227  |#endif // #ifndef _TYPES_H
                             8302 
                             8304 
                             8305 ; 5    |
                             8306 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             8307 ; 7    |//  Interrupt Collector Registers
                             8308 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             8309 ; 9    |
                             8310 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             8311 ; 11   |
                             8312 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             8313 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             8314 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             8315 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             8316 ; 16   |
                             8317 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             8318 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             8319 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             8320 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             8321 ; 21   |
                             8322 ; 22   |#define HW_GPB_GPENR 0
                             8323 ; 23   |#define HW_GPB_GPDOR 1
                             8324 ; 24   |#define HW_GPB_GPDIR 2
                             8325 ; 25   |#define HW_GPB_GPDOER 3
                             8326 ; 26   |#define HW_GPB_GPIPENR 4
                             8327 ; 27   |#define HW_GPB_GPIENR 5
                             8328 ; 28   |#define HW_GPB_GPILVLR 6
                             8329 ; 29   |#define HW_GPB_GPIPOLR 7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8330 ; 30   |#define HW_GPB_GPISTATR 8
                             8331 ; 31   |#define HW_GPB_GPPWR 9
                             8332 ; 32   |#define HW_GPB_GP8MA 10
                             8333 ; 33   |
                             8334 ; 34   |
                             8335 ; 35   |
                             8336 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8337 ; 37   |//  GPIO Register Bit Positions
                             8338 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             8339 ; 39   |{
                             8340 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             8341 ; 41   |    unsigned int I;
                             8342 ; 42   |    unsigned int U;
                             8343 ; 43   |} gpr_type;
                             8344 ; 44   |
                             8345 ; 45   |#define HW_GP_B0_BITPOS 0
                             8346 ; 46   |#define HW_GP_B1_BITPOS 1
                             8347 ; 47   |#define HW_GP_B2_BITPOS 2
                             8348 ; 48   |#define HW_GP_B3_BITPOS 3
                             8349 ; 49   |#define HW_GP_B4_BITPOS 4
                             8350 ; 50   |#define HW_GP_B5_BITPOS 5
                             8351 ; 51   |#define HW_GP_B6_BITPOS 6
                             8352 ; 52   |#define HW_GP_B7_BITPOS 7
                             8353 ; 53   |#define HW_GP_B8_BITPOS 8
                             8354 ; 54   |#define HW_GP_B9_BITPOS 9
                             8355 ; 55   |#define HW_GP_B10_BITPOS 10
                             8356 ; 56   |#define HW_GP_B11_BITPOS 11
                             8357 ; 57   |#define HW_GP_B12_BITPOS 12
                             8358 ; 58   |#define HW_GP_B13_BITPOS 13
                             8359 ; 59   |#define HW_GP_B14_BITPOS 14
                             8360 ; 60   |#define HW_GP_B15_BITPOS 15
                             8361 ; 61   |#define HW_GP_B16_BITPOS 16
                             8362 ; 62   |#define HW_GP_B17_BITPOS 17
                             8363 ; 63   |#define HW_GP_B18_BITPOS 18
                             8364 ; 64   |#define HW_GP_B19_BITPOS 19
                             8365 ; 65   |#define HW_GP_B20_BITPOS 20
                             8366 ; 66   |#define HW_GP_B21_BITPOS 21
                             8367 ; 67   |#define HW_GP_B22_BITPOS 22
                             8368 ; 68   |#define HW_GP_B23_BITPOS 23
                             8369 ; 69   |
                             8370 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             8371 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             8372 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             8373 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             8374 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             8375 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             8376 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             8377 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             8378 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             8379 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             8380 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             8381 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             8382 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             8383 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             8384 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             8385 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             8386 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             8387 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             8388 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             8389 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             8390 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             8391 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8392 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             8393 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             8394 ; 94   |
                             8395 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             8396 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             8397 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             8398 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             8399 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             8400 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             8401 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             8402 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             8403 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             8404 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             8405 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             8406 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             8407 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             8408 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             8409 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             8410 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             8411 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             8412 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             8413 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             8414 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             8415 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             8416 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             8417 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             8418 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             8419 ; 119  |
                             8420 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             8421 ; 121  |//  GPIO 8mA Register Bit Positions
                             8422 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             8423 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             8424 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             8425 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             8426 ; 126  |
                             8427 ; 127  |
                             8428 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             8429 ; 129  |//  Logical GPIO numbers
                             8430 ; 130  |#define HW_GPIO_000 0
                             8431 ; 131  |#define HW_GPIO_001 1
                             8432 ; 132  |#define HW_GPIO_002 2
                             8433 ; 133  |#define HW_GPIO_003 3
                             8434 ; 134  |#define HW_GPIO_004 4
                             8435 ; 135  |#define HW_GPIO_005 5
                             8436 ; 136  |#define HW_GPIO_006 6
                             8437 ; 137  |#define HW_GPIO_007 7
                             8438 ; 138  |#define HW_GPIO_008 8
                             8439 ; 139  |#define HW_GPIO_009 9
                             8440 ; 140  |#define HW_GPIO_010 10
                             8441 ; 141  |#define HW_GPIO_011 11
                             8442 ; 142  |#define HW_GPIO_012 12
                             8443 ; 143  |#define HW_GPIO_013 13
                             8444 ; 144  |#define HW_GPIO_014 14
                             8445 ; 145  |#define HW_GPIO_015 15
                             8446 ; 146  |#define HW_GPIO_016 16
                             8447 ; 147  |#define HW_GPIO_017 17
                             8448 ; 148  |#define HW_GPIO_018 18
                             8449 ; 149  |#define HW_GPIO_019 19
                             8450 ; 150  |#define HW_GPIO_020 20
                             8451 ; 151  |#define HW_GPIO_021 21
                             8452 ; 152  |#define HW_GPIO_022 22
                             8453 ; 153  |#define HW_GPIO_023 23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8454 ; 154  |#define HW_GPIO_024 24
                             8455 ; 155  |#define HW_GPIO_025 25
                             8456 ; 156  |#define HW_GPIO_026 26
                             8457 ; 157  |#define HW_GPIO_027 27
                             8458 ; 158  |#define HW_GPIO_028 28
                             8459 ; 159  |#define HW_GPIO_029 29
                             8460 ; 160  |#define HW_GPIO_030 30
                             8461 ; 161  |#define HW_GPIO_031 31
                             8462 ; 162  |#define HW_GPIO_032 32
                             8463 ; 163  |#define HW_GPIO_033 33
                             8464 ; 164  |#define HW_GPIO_034 34
                             8465 ; 165  |#define HW_GPIO_035 35
                             8466 ; 166  |#define HW_GPIO_036 36
                             8467 ; 167  |#define HW_GPIO_037 37
                             8468 ; 168  |#define HW_GPIO_038 38
                             8469 ; 169  |#define HW_GPIO_039 39
                             8470 ; 170  |#define HW_GPIO_040 40
                             8471 ; 171  |#define HW_GPIO_041 41
                             8472 ; 172  |#define HW_GPIO_042 42
                             8473 ; 173  |#define HW_GPIO_043 43
                             8474 ; 174  |#define HW_GPIO_044 44
                             8475 ; 175  |#define HW_GPIO_045 45
                             8476 ; 176  |#define HW_GPIO_046 46
                             8477 ; 177  |#define HW_GPIO_047 47
                             8478 ; 178  |#define HW_GPIO_048 48
                             8479 ; 179  |#define HW_GPIO_049 49
                             8480 ; 180  |#define HW_GPIO_050 50
                             8481 ; 181  |#define HW_GPIO_051 51
                             8482 ; 182  |#define HW_GPIO_052 52
                             8483 ; 183  |#define HW_GPIO_053 53
                             8484 ; 184  |#define HW_GPIO_054 54
                             8485 ; 185  |#define HW_GPIO_055 55
                             8486 ; 186  |#define HW_GPIO_056 56
                             8487 ; 187  |#define HW_GPIO_057 57
                             8488 ; 188  |#define HW_GPIO_058 58
                             8489 ; 189  |#define HW_GPIO_059 59
                             8490 ; 190  |#define HW_GPIO_060 60
                             8491 ; 191  |#define HW_GPIO_061 61
                             8492 ; 192  |#define HW_GPIO_062 62
                             8493 ; 193  |#define HW_GPIO_063 63
                             8494 ; 194  |#define HW_GPIO_064 64
                             8495 ; 195  |#define HW_GPIO_065 65
                             8496 ; 196  |#define HW_GPIO_066 66
                             8497 ; 197  |#define HW_GPIO_067 67
                             8498 ; 198  |#define HW_GPIO_068 68
                             8499 ; 199  |#define HW_GPIO_069 69
                             8500 ; 200  |#define HW_GPIO_070 70
                             8501 ; 201  |#define HW_GPIO_071 71
                             8502 ; 202  |#define HW_GPIO_072 72
                             8503 ; 203  |#define HW_GPIO_073 73
                             8504 ; 204  |#define HW_GPIO_074 74
                             8505 ; 205  |#define HW_GPIO_075 75
                             8506 ; 206  |#define HW_GPIO_076 76
                             8507 ; 207  |#define HW_GPIO_077 77
                             8508 ; 208  |#define HW_GPIO_078 78
                             8509 ; 209  |#define HW_GPIO_079 79
                             8510 ; 210  |#define HW_GPIO_080 80
                             8511 ; 211  |#define HW_GPIO_081 81
                             8512 ; 212  |#define HW_GPIO_082 82
                             8513 ; 213  |#define HW_GPIO_083 83
                             8514 ; 214  |#define HW_GPIO_084 84
                             8515 ; 215  |#define HW_GPIO_085 85
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8516 ; 216  |#define HW_GPIO_086 86
                             8517 ; 217  |#define HW_GPIO_087 87
                             8518 ; 218  |#define HW_GPIO_088 88
                             8519 ; 219  |#define HW_GPIO_089 89
                             8520 ; 220  |#define HW_GPIO_090 90
                             8521 ; 221  |#define HW_GPIO_091 91
                             8522 ; 222  |#define HW_GPIO_092 92
                             8523 ; 223  |#define HW_GPIO_093 93
                             8524 ; 224  |#define HW_GPIO_094 94
                             8525 ; 225  |#define HW_GPIO_095 95
                             8526 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             8527 ; 227  |
                             8528 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             8529 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             8530 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             8531 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             8532 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             8533 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             8534 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             8535 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             8536 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             8537 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8538 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             8539 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             8540 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             8541 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             8542 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             8543 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             8544 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             8545 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             8546 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             8547 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             8548 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8549 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             8550 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             8551 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             8552 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             8553 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8554 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             8555 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             8556 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             8557 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             8558 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             8559 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8560 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             8561 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             8562 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             8563 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             8564 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             8565 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             8566 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             8567 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             8568 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             8569 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             8570 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8571 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             8572 ; 272  |
                             8573 ; 273  |#endif
                             8574 ; 274  |
                             8575 
                             8577 
                             8578 ; 28   |  #include "mediadetection.h"
                             8579 
                             8581 
                             8582 ; 1    |#ifndef _MEDIADETECTION_H
                             8583 ; 2    |#define _MEDIADETECTION_H
                             8584 ; 3    |
                             8585 ; 4    |#define MEDIA_DETECT_POSITIVE_POLARITY  0
                             8586 ; 5    |#define MEDIA_DETECT_NEGATIVE_POLARITY  1
                             8587 ; 6    |
                             8588 ; 7    |#define MEDIA_TYPE_SMARTMEDIA   0
                             8589 ; 8    |#define MEDIA_TYPE_MMC          1
                             8590 ; 9    |
                             8591 ; 10   |//#ifndef NUM_REMOVABLE_MEDIA
                             8592 ; 11   |//#define NUM_REMOVABLE_MEDIA 1
                             8593 ; 12   |//#endif
                             8594 ; 13   |
                             8595 ; 14   |#endif // #ifndef _MEDIADETECTION_H
                             8596 
                             8598 
                             8599 ; 29   |#endif
                             8600 ; 30   |
                             8601 ; 31   |#ifdef USE_PLAYLIST3_HOST
                             8602 ; 32   |#include "persist_bits.h"       //added by samuel on 31/1/05 for flash write detection
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8603 
                             8605 
                             8606 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             8607 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2005
                             8608 ; 3    |//;
                             8609 ; 4    |//; Filename:    persist_bits.h
                             8610 ; 5    |//; Description: General purpose interface to Persistent Bits
                             8611 ; 6    |//;              Persistent bits are mapped to more generic bits in regsrtc.inc.
                             8612 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             8613 ; 8    |
                             8614 ; 9    |#ifndef _PERSIST_BITS_H
                             8615 ; 10   |#define _PERSIST_BITS_H
                             8616 ; 11   |
                             8617 ; 12   |#include "regsrtc.h"
                             8618 
                             8620 
                             8621 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8622 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8623 ; 3    |// Filename: regsrtc.inc
                             8624 ; 4    |// Description: Register definitions for RTC interface
                             8625 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8626 ; 6    |// The following naming conventions are followed in this file.
                             8627 ; 7    |// All registers are named using the format...
                             8628 ; 8    |//     HW_<module>_<regname>
                             8629 ; 9    |// where <module> is the module name which can be any of the following...
                             8630 ; 10   |//     USB20
                             8631 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8632 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8633 ; 13   |// that module)
                             8634 ; 14   |// <regname> is the specific register within that module
                             8635 ; 15   |// We also define the following...
                             8636 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8637 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8638 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8639 ; 19   |// which does something else, and
                             8640 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8641 ; 21   |// which does something else.
                             8642 ; 22   |// Other rules
                             8643 ; 23   |//     All caps
                             8644 ; 24   |//     Numeric identifiers start at 0
                             8645 ; 25   |#if !(defined(regsrtcinc))
                             8646 ; 26   |#define regsrtcinc 1
                             8647 ; 27   |
                             8648 ; 28   |#include "types.h"
                             8649 
                             8651 
                             8652 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8653 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8654 ; 3    |//
                             8655 ; 4    |// Filename: types.h
                             8656 ; 5    |// Description: Standard data types
                             8657 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8658 ; 7    |
                             8659 ; 8    |#ifndef _TYPES_H
                             8660 ; 9    |#define _TYPES_H
                             8661 ; 10   |
                             8662 ; 11   |// TODO:  move this outta here!
                             8663 ; 12   |#if !defined(NOERROR)
                             8664 ; 13   |#define NOERROR 0
                             8665 ; 14   |#define SUCCESS 0
                             8666 ; 15   |#endif 
                             8667 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8668 ; 17   |#define SUCCESS  0
                             8669 ; 18   |#endif
                             8670 ; 19   |#if !defined(ERROR)
                             8671 ; 20   |#define ERROR   -1
                             8672 ; 21   |#endif
                             8673 ; 22   |#if !defined(FALSE)
                             8674 ; 23   |#define FALSE 0
                             8675 ; 24   |#endif
                             8676 ; 25   |#if !defined(TRUE)
                             8677 ; 26   |#define TRUE  1
                             8678 ; 27   |#endif
                             8679 ; 28   |
                             8680 ; 29   |#if !defined(NULL)
                             8681 ; 30   |#define NULL 0
                             8682 ; 31   |#endif
                             8683 ; 32   |
                             8684 ; 33   |#define MAX_INT     0x7FFFFF
                             8685 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8686 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8687 ; 36   |#define MAX_ULONG   (-1) 
                             8688 ; 37   |
                             8689 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8690 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8691 ; 40   |
                             8692 ; 41   |
                             8693 ; 42   |#define BYTE    unsigned char       // btVarName
                             8694 ; 43   |#define CHAR    signed char         // cVarName
                             8695 ; 44   |#define USHORT  unsigned short      // usVarName
                             8696 ; 45   |#define SHORT   unsigned short      // sVarName
                             8697 ; 46   |#define WORD    unsigned int        // wVarName
                             8698 ; 47   |#define INT     signed int          // iVarName
                             8699 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8700 ; 49   |#define LONG    signed long         // lVarName
                             8701 ; 50   |#define BOOL    unsigned int        // bVarName
                             8702 ; 51   |#define FRACT   _fract              // frVarName
                             8703 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8704 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8705 ; 54   |#define FLOAT   float               // fVarName
                             8706 ; 55   |#define DBL     double              // dVarName
                             8707 ; 56   |#define ENUM    enum                // eVarName
                             8708 ; 57   |#define CMX     _complex            // cmxVarName
                             8709 ; 58   |typedef WORD UCS3;                   // 
                             8710 ; 59   |
                             8711 ; 60   |#define UINT16  unsigned short
                             8712 ; 61   |#define UINT8   unsigned char   
                             8713 ; 62   |#define UINT32  unsigned long
                             8714 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8715 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8716 ; 65   |#define WCHAR   UINT16
                             8717 ; 66   |
                             8718 ; 67   |//UINT128 is 16 bytes or 6 words
                             8719 ; 68   |typedef struct UINT128_3500 {   
                             8720 ; 69   |    int val[6];     
                             8721 ; 70   |} UINT128_3500;
                             8722 ; 71   |
                             8723 ; 72   |#define UINT128   UINT128_3500
                             8724 ; 73   |
                             8725 ; 74   |// Little endian word packed byte strings:   
                             8726 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8727 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8728 ; 77   |// Little endian word packed byte strings:   
                             8729 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8730 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8731 ; 80   |
                             8732 ; 81   |// Declare Memory Spaces To Use When Coding
                             8733 ; 82   |// A. Sector Buffers
                             8734 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8735 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8736 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8737 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8738 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8739 ; 88   |// B. Media DDI Memory
                             8740 ; 89   |#define MEDIA_DDI_MEM _Y
                             8741 ; 90   |
                             8742 ; 91   |
                             8743 ; 92   |
                             8744 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8745 ; 94   |// Examples of circular pointers:
                             8746 ; 95   |//    INT CIRC cpiVarName
                             8747 ; 96   |//    DWORD CIRC cpdwVarName
                             8748 ; 97   |
                             8749 ; 98   |#define RETCODE INT                 // rcVarName
                             8750 ; 99   |
                             8751 ; 100  |// generic bitfield structure
                             8752 ; 101  |struct Bitfield {
                             8753 ; 102  |    unsigned int B0  :1;
                             8754 ; 103  |    unsigned int B1  :1;
                             8755 ; 104  |    unsigned int B2  :1;
                             8756 ; 105  |    unsigned int B3  :1;
                             8757 ; 106  |    unsigned int B4  :1;
                             8758 ; 107  |    unsigned int B5  :1;
                             8759 ; 108  |    unsigned int B6  :1;
                             8760 ; 109  |    unsigned int B7  :1;
                             8761 ; 110  |    unsigned int B8  :1;
                             8762 ; 111  |    unsigned int B9  :1;
                             8763 ; 112  |    unsigned int B10 :1;
                             8764 ; 113  |    unsigned int B11 :1;
                             8765 ; 114  |    unsigned int B12 :1;
                             8766 ; 115  |    unsigned int B13 :1;
                             8767 ; 116  |    unsigned int B14 :1;
                             8768 ; 117  |    unsigned int B15 :1;
                             8769 ; 118  |    unsigned int B16 :1;
                             8770 ; 119  |    unsigned int B17 :1;
                             8771 ; 120  |    unsigned int B18 :1;
                             8772 ; 121  |    unsigned int B19 :1;
                             8773 ; 122  |    unsigned int B20 :1;
                             8774 ; 123  |    unsigned int B21 :1;
                             8775 ; 124  |    unsigned int B22 :1;
                             8776 ; 125  |    unsigned int B23 :1;
                             8777 ; 126  |};
                             8778 ; 127  |
                             8779 ; 128  |union BitInt {
                             8780 ; 129  |        struct Bitfield B;
                             8781 ; 130  |        int        I;
                             8782 ; 131  |};
                             8783 ; 132  |
                             8784 ; 133  |#define MAX_MSG_LENGTH 10
                             8785 ; 134  |struct CMessage
                             8786 ; 135  |{
                             8787 ; 136  |        unsigned int m_uLength;
                             8788 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8789 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8790 ; 139  |
                             8791 ; 140  |typedef struct {
                             8792 ; 141  |    WORD m_wLength;
                             8793 ; 142  |    WORD m_wMessage;
                             8794 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8795 ; 144  |} Message;
                             8796 ; 145  |
                             8797 ; 146  |struct MessageQueueDescriptor
                             8798 ; 147  |{
                             8799 ; 148  |        int *m_pBase;
                             8800 ; 149  |        int m_iModulo;
                             8801 ; 150  |        int m_iSize;
                             8802 ; 151  |        int *m_pHead;
                             8803 ; 152  |        int *m_pTail;
                             8804 ; 153  |};
                             8805 ; 154  |
                             8806 ; 155  |struct ModuleEntry
                             8807 ; 156  |{
                             8808 ; 157  |    int m_iSignaledEventMask;
                             8809 ; 158  |    int m_iWaitEventMask;
                             8810 ; 159  |    int m_iResourceOfCode;
                             8811 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8812 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8813 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8814 ; 163  |    int m_uTimeOutHigh;
                             8815 ; 164  |    int m_uTimeOutLow;
                             8816 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8817 ; 166  |};
                             8818 ; 167  |
                             8819 ; 168  |union WaitMask{
                             8820 ; 169  |    struct B{
                             8821 ; 170  |        unsigned int m_bNone     :1;
                             8822 ; 171  |        unsigned int m_bMessage  :1;
                             8823 ; 172  |        unsigned int m_bTimer    :1;
                             8824 ; 173  |        unsigned int m_bButton   :1;
                             8825 ; 174  |    } B;
                             8826 ; 175  |    int I;
                             8827 ; 176  |} ;
                             8828 ; 177  |
                             8829 ; 178  |
                             8830 ; 179  |struct Button {
                             8831 ; 180  |        WORD wButtonEvent;
                             8832 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8833 ; 182  |};
                             8834 ; 183  |
                             8835 ; 184  |struct Message {
                             8836 ; 185  |        WORD wMsgLength;
                             8837 ; 186  |        WORD wMsgCommand;
                             8838 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8839 ; 188  |};
                             8840 ; 189  |
                             8841 ; 190  |union EventTypes {
                             8842 ; 191  |        struct CMessage msg;
                             8843 ; 192  |        struct Button Button ;
                             8844 ; 193  |        struct Message Message;
                             8845 ; 194  |};
                             8846 ; 195  |
                             8847 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8848 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8849 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8850 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8851 ; 200  |
                             8852 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8853 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8854 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8855 ; 204  |
                             8856 ; 205  |#if DEBUG
                             8857 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8858 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8859 ; 208  |#else 
                             8860 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8861 ; 210  |#define DebugBuildAssert(x)    
                             8862 ; 211  |#endif
                             8863 ; 212  |
                             8864 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8865 ; 214  |//  #pragma asm
                             8866 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8867 ; 216  |//  #pragma endasm
                             8868 ; 217  |
                             8869 ; 218  |
                             8870 ; 219  |#ifdef COLOR_262K
                             8871 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8872 ; 221  |#elif defined(COLOR_65K)
                             8873 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8874 ; 223  |#else
                             8875 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8876 ; 225  |#endif
                             8877 ; 226  |    
                             8878 ; 227  |#endif // #ifndef _TYPES_H
                             8879 
                             8881 
                             8882 ; 29   |
                             8883 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8884 ; 31   |
                             8885 ; 32   |//   RTC STMP Registers 
                             8886 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8887 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8888 ; 35   |
                             8889 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8890 ; 37   |
                             8891 ; 38   |
                             8892 ; 39   |
                             8893 ; 40   |
                             8894 ; 41   |
                             8895 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8896 ; 43   |
                             8897 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8898 ; 45   |
                             8899 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8900 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8901 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8902 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8903 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8904 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8905 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8906 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8907 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8908 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8909 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8910 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8911 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8912 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8913 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8914 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8915 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8916 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8917 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8918 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8919 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8920 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8921 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8922 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8923 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8924 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8925 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8926 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8927 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8928 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8929 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8930 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8931 ; 78   |
                             8932 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8933 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             8934 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8935 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8936 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8937 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8938 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8939 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8940 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8941 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8942 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8943 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8944 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8945 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8946 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8947 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8948 ; 95   |
                             8949 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8950 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8951 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8952 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8953 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8954 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8955 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8956 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8957 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8958 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8959 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8960 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8961 ; 108  |
                             8962 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8963 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8964 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8965 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8966 ; 113  |
                             8967 ; 114  |
                             8968 ; 115  |typedef union               
                             8969 ; 116  |{
                             8970 ; 117  |    struct {
                             8971 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8972 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8973 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8974 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8975 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8976 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8977 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8978 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8979 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8980 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8981 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8982 ; 129  |    } B;
                             8983 ; 130  |    int I;
                             8984 ; 131  |    unsigned int U;
                             8985 ; 132  |} rtc_csr_type;
                             8986 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8987 ; 134  |
                             8988 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8989 ; 136  |
                             8990 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8991 ; 138  |
                             8992 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8993 ; 140  |
                             8994 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8995 ; 142  |
                             8996 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8997 ; 144  |
                             8998 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8999 ; 146  |
                             9000 ; 147  |typedef union               
                             9001 ; 148  |{
                             9002 ; 149  |    struct {
                             9003 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             9004 ; 151  |    } B;
                             9005 ; 152  |    int I;
                             9006 ; 153  |    unsigned int U;
                             9007 ; 154  |} rtc_mseconds0_type;
                             9008 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             9009 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             9010 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             9011 ; 158  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9012 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             9013 ; 160  |
                             9014 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             9015 ; 162  |
                             9016 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             9017 ; 164  |
                             9018 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             9019 ; 166  |
                             9020 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             9021 ; 168  |
                             9022 ; 169  |typedef union               
                             9023 ; 170  |{
                             9024 ; 171  |    struct {
                             9025 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             9026 ; 173  |    } B;
                             9027 ; 174  |    int I;
                             9028 ; 175  |    unsigned int U;
                             9029 ; 176  |} rtc_mseconds1_type;
                             9030 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             9031 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             9032 ; 179  |
                             9033 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             9034 ; 181  |#define HW_RTC_UP_OFFSET 2
                             9035 ; 182  |
                             9036 ; 183  |
                             9037 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             9038 ; 185  |
                             9039 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             9040 ; 187  |
                             9041 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             9042 ; 189  |
                             9043 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             9044 ; 191  |
                             9045 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             9046 ; 193  |
                             9047 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             9048 ; 195  |
                             9049 ; 196  |typedef union               
                             9050 ; 197  |{
                             9051 ; 198  |    struct {
                             9052 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             9053 ; 200  |    } B;
                             9054 ; 201  |    int I;
                             9055 ; 202  |    unsigned int U;
                             9056 ; 203  |} rtc_watchdog_type;
                             9057 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             9058 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             9059 ; 206  |
                             9060 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             9061 ; 208  |
                             9062 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             9063 ; 210  |
                             9064 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             9065 ; 212  |
                             9066 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             9067 ; 214  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9068 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             9069 ; 216  |
                             9070 ; 217  |typedef union               
                             9071 ; 218  |{
                             9072 ; 219  |    struct {
                             9073 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             9074 ; 221  |    } B;
                             9075 ; 222  |    int I;
                             9076 ; 223  |    unsigned int U;
                             9077 ; 224  |} rtc_alarm0_type;
                             9078 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             9079 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             9080 ; 227  |
                             9081 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             9082 ; 229  |
                             9083 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             9084 ; 231  |
                             9085 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             9086 ; 233  |
                             9087 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             9088 ; 235  |
                             9089 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             9090 ; 237  |
                             9091 ; 238  |typedef union               
                             9092 ; 239  |{
                             9093 ; 240  |    struct {
                             9094 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             9095 ; 242  |    } B;
                             9096 ; 243  |    int I;
                             9097 ; 244  |    unsigned int U;
                             9098 ; 245  |} rtc_alarm1_type;
                             9099 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             9100 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9101 ; 248  |
                             9102 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             9103 ; 250  |
                             9104 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             9105 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             9106 ; 253  |
                             9107 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             9108 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             9109 ; 256  |
                             9110 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             9111 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             9112 ; 259  |
                             9113 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             9114 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             9115 ; 262  |
                             9116 ; 263  |typedef union               
                             9117 ; 264  |{
                             9118 ; 265  |    struct {
                             9119 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             9120 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             9121 ; 268  |    } B;
                             9122 ; 269  |    int I;
                             9123 ; 270  |    unsigned int U;
                             9124 ; 271  |} rtc_xtaldivide_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9125 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             9126 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             9127 ; 274  |
                             9128 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             9129 ; 276  |
                             9130 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             9131 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             9132 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             9133 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             9134 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             9135 ; 282  |
                             9136 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             9137 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             9138 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             9139 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             9140 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             9141 ; 288  |
                             9142 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             9143 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             9144 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             9145 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             9146 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             9147 ; 294  |
                             9148 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             9149 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             9150 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             9151 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             9152 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             9153 ; 300  |
                             9154 ; 301  |typedef union               
                             9155 ; 302  |{
                             9156 ; 303  |   struct {
                             9157 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             9158 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             9159 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             9160 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             9161 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             9162 ; 309  |   } B;
                             9163 ; 310  |    int I;
                             9164 ; 311  |    unsigned int U;
                             9165 ; 312  |} rtc_PERSISTENT0_type;
                             9166 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             9167 ; 314  |
                             9168 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             9169 ; 316  |
                             9170 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             9171 ; 318  |
                             9172 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             9173 ; 320  |
                             9174 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             9175 ; 322  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9176 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             9177 ; 324  |
                             9178 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             9179 ; 326  |
                             9180 ; 327  |
                             9181 ; 328  |typedef union               
                             9182 ; 329  |{
                             9183 ; 330  |    struct {
                             9184 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             9185 ; 332  |    } B;
                             9186 ; 333  |    int I;
                             9187 ; 334  |    unsigned int U;
                             9188 ; 335  |} rtc_PERSISTENT1_type;
                             9189 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             9190 ; 337  |
                             9191 ; 338  |
                             9192 ; 339  |#endif
                             9193 ; 340  |
                             9194 ; 341  |
                             9195 ; 342  |
                             9196 ; 343  |
                             9197 ; 344  |
                             9198 ; 345  |
                             9199 ; 346  |
                             9200 ; 347  |
                             9201 ; 348  |
                             9202 ; 349  |
                             9203 ; 350  |
                             9204 ; 351  |
                             9205 ; 352  |
                             9206 ; 353  |
                             9207 
                             9209 
                             9210 ; 13   |
                             9211 ; 14   |// Reserve bit 0 for Low Power USB, if hub can't supply 500mA, need to reboot with 100mA
                             9212 ; 15   |#define HW_RTC_LOW_POWER_USB_REG                     (HW_RTC_PERSISTENT1)
                             9213 ; 16   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS      (0)
                             9214 ; 17   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_WIDTH       (1)
                             9215 ; 18   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_SETMASK     (((1<<HW_RTC_PERSISTANT1_LOW_POWER_US
                                  B_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS) 
                             9216 ; 19   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_CLRMASK     (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER_
                                  USB_SETMASK)
                             9217 ; 20   |
                             9218 ; 21   |// Reserve bit 1 for Skip Checkdisk.  If disk hasn't changed, don't run checkdisk.
                             9219 ; 22   |#define HW_RTC_SKIP_CHECKDISK_REG                    (HW_RTC_PERSISTENT1)
                             9220 ; 23   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_BITPOS     (1)
                             9221 ; 24   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_WIDTH      (1)
                             9222 ; 25   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_SETMASK    (((1<<HW_RTC_PERSISTANT1_SKIP_CHECKDI
                                  SK_WIDTH)-1)<<HW_RTC_PERSISTANT1_SKIP_CHECKDISK_BITPOS) 
                             9223 ; 26   |#define HW_RTC_PERSISTANT1_SKIP_CHECKDISK_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_SKIP_CHECK
                                  DISK_SETMASK)
                             9224 ; 27   |
                             9225 ; 28   |// Reserve bit 2 for Skip building music library internal flash.  If disk hasn't changed, 
                                  don't run building.
                             9226 ; 29   |#define HW_RTC_SKIP_REBUILD_REG                  (HW_RTC_PERSISTENT1)
                             9227 ; 30   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS   (2)
                             9228 ; 31   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_WIDTH    (1)
                             9229 ; 32   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_SETMASK  (((1<<HW_RTC_PERSISTENT1_SKIP_REBUILD_WID
                                  TH)-1)<<HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9230 ; 33   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_CLRMASK  (~(WORD)HW_RTC_PERSISTENT1_SKIP_REBUILD_S
                                  ETMASK)
                             9231 ; 34   |
                             9232 ; 35   |// Reserve bit 3 for 2nd try Low Power USB, if hub can't supply 500mA (try 2 times)
                             9233 ; 36   |// need to reboot with 100mA
                             9234 ; 37   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS     (3)
                             9235 ; 38   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_WIDTH      (1)
                             9236 ; 39   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_SETMASK    (((1<<HW_RTC_PERSISTANT1_LOW_POWER2_U
                                  SB_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS) 
                             9237 ; 40   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER2
                                  _USB_SETMASK)
                             9238 ; 41   |
                             9239 ; 42   |// Reserve bit 5 for MTP database clean flag. 1 => database "clean", 0 => database "dirty"
                                  
                             9240 ; 43   |#define HW_RTC_MTP_DB_CLEAN_FLAG_REG                 (HW_RTC_PERSISTENT1)
                             9241 ; 44   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS  (5)
                             9242 ; 45   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_WIDTH   (1)
                             9243 ; 46   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN
                                  _FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS) 
                             9244 ; 47   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_MTP_DB_CLE
                                  AN_FLAG_SETMASK)
                             9245 ; 48   |
                             9246 ; 49   |// Reserve bit 6 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                             9247 ; 50   |#define HW_RTC_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                             9248 ; 51   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (6)
                             9249 ; 52   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                             9250 ; 53   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_RESO
                                  URCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS) 
                             9251 ; 54   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_RESOURC
                                  E_BIN_REFRESH_FLAG_SETMASK)
                             9252 ; 55   |
                             9253 ; 56   |// Reserve bit 7 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                             9254 ; 57   |#define HW_RTC_HOST_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                             9255 ; 58   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (7)
                             9256 ; 59   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                             9257 ; 60   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1
                                  _HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPO
                                  S) 
                             9258 ; 61   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_HO
                                  ST_RESOURCE_BIN_REFRESH_FLAG_SETMASK)
                             9259 ; 62   |
                             9260 ; 63   |// Want to wait 2000 clocks before failing.
                             9261 ; 64   |#define PERSIST_WAIT_TIME                            2000
                             9262 ; 65   |
                             9263 ; 66   |void _reentrant StickyBitInit(void);
                             9264 ; 67   |RETCODE _reentrant ReadStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition, BOOL * b
                                  Result);
                             9265 ; 68   |RETCODE _reentrant SetStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                             9266 ; 69   |RETCODE _reentrant ClearStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                             9267 ; 70   |void _reentrant SetBitResourceRefresh(INT bBitValue); // should this line be commented out
                                  ? I think the func def was commented out since unused.
                             9268 ; 71   |INT _reentrant GetBitResourceRefresh(void);           // "
                             9269 ; 72   |void _reentrant StickyBitForceUpdate(void);
                             9270 ; 73   |
                             9271 ; 74   |#endif // _PERSIST_BITS_H
                             9272 
                             9274 
                             9275 ; 33   |#endif
                             9276 ; 34   |////////////////////////////////////////////////////////////////////////////////
                             9277 ; 35   |// Symbol Exports
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9278 ; 36   |////////////////////////////////////////////////////////////////////////////////
                             9279 ; 37   |
                             9280 ; 38   |////////////////////////////////////////////////////////////////////////////////
                             9281 ; 39   |// defs
                             9282 ; 40   |////////////////////////////////////////////////////////////////////////////////
                             9283 ; 41   |
                             9284 ; 42   |#define NUM_RAM_MEDIA           1
                             9285 ; 43   |
                             9286 ; 44   |////////////////////////////////////////////////////////////////////////////////
                             9287 ; 45   |// Variables
                             9288 ; 46   |////////////////////////////////////////////////////////////////////////////////
                             9289 ; 47   |#ifdef NAND2
                             9290 ; 48   |WORD g_wNumNANDChips = 2;
                             9291 ; 49   |#else
                             9292 ; 50   |#ifdef NAND3
                             9293 ; 51   |WORD g_wNumNANDChips = 3;
                             9294 ; 52   |#else
                             9295 ; 53   |#ifdef NAND4
                             9296 ; 54   |WORD g_wNumNANDChips = 4;
                             9297 ; 55   |#else
                             9298 ; 56   |WORD g_wNumNANDChips = 1;
                             9299 
                             9300 
Y:0000                       9301         org     y,".ydataddiproject",init:
                             9302 Fg_wNumNANDChips:
Y:0000 000001                9303         dc      $000001
                             9306 
                             9307 ; 57   |#endif
                             9308 ; 58   |#endif
                             9309 ; 59   |#endif
                             9310 ; 60   |
                             9311 ; 61   |LOGICAL_MEDIA g_Media[NUM_LOGICAL_MEDIA] = 
                             9312 
                             9313 Fg_Media:
Y:0001 rrrrrr rrrrrr         9314         dc      Fg_MediaDescriptor,FRAMMediaApi,Fg_MediaDescriptor+11
       rrrrrr                     
                             9315 
                             9316 ; 62   |{
                             9317 ; 63   |    &g_MediaDescriptor[0],&RAMMediaApi,
                             9318 ; 64   |    &g_MediaDescriptor[1],&NANDMediaApi
                             9319 ; 65   |#ifdef MMC
                             9320 
Y:0004 rrrrrr rrrrrr         9321         dc      FNANDMediaApi,Fg_MediaDescriptor+22
                             9322 
                             9323 ; 66   |    ,&g_MediaDescriptor[2],&MMCMediaApi
                             9324 ; 67   |#endif
                             9325 
Y:0006 rrrrrr                9326         dc      FMMCMediaApi
                             9330 
                             9331 ; 68   |};
                             9332 ; 69   |
                             9333 ; 70   |LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[NUM_LOGICAL_MEDIA] =
                             9334 
                             9335 Fg_MediaDescriptor:
Y:0007 000000 000000         9336         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:000F 000000 000000         9337         dc      $000000,$000000,$000000,$000001,$000000,$000000,$000000,$000000
       000000 000001              
       000000 000000              
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0017 000000 000000         9338         dc      $000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000                     
                             9339 
                             9340 ; 71   |{
                             9341 ; 72   |
                             9342 ; 73   |    {
                             9343 ; 74   |        0,                      // wMediaNumber
                             9344 ; 75   |        FALSE,                  // bInitialized
                             9345 ; 76   |        MediaStateUnknown,      // eState
                             9346 ; 77   |        FALSE,                  // bWriteProtected
                             9347 ; 78   |        0,                      // wNumberOfDrives
                             9348 ; 79   |        0,                      // dwSizeInBytes
                             9349 ; 80   |        0,                      // wAllocationUnitSizeInBytes
                             9350 ; 81   |        0,                      // PhysicalType
                             9351 ; 82   |        0                       // pMediaInfo
                             9352 ; 83   |    },
                             9353 ; 84   |
                             9354 ; 85   |
                             9355 ; 86   |    {
                             9356 ; 87   |        1,                      // wMediaNumber
                             9357 ; 88   |        FALSE,                  // bInitialized
                             9358 ; 89   |        MediaStateUnknown,      // eState
                             9359 ; 90   |        FALSE,                  // bWriteProtected
                             9360 ; 91   |        0,                      // wNumberOfDrives
                             9361 ; 92   |        0,                      // dwSizeInBytes
                             9362 ; 93   |        0,                      // wAllocationUnitSizeInBytes
                             9363 ; 94   |        0,                      // PhysicalType
                             9364 ; 95   |        0                       // pMediaInfo
                             9365 ; 96   |    }
                             9366 ; 97   |#ifdef MMC
                             9367 
Y:001C 000000 000002         9368         dc      $000000,$000002,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
       000000                     
Y:0025 000000 000000         9369         dc      $000000,$000000
                             9370 
                             9371 ; 98   |    ,
                             9372 ; 99   |    {
                             9373 ; 100  |        2,                      // wMediaNumber
                             9374 ; 101  |        FALSE,                  // bInitialized
                             9375 ; 102  |        MediaStateUnknown,      // eState
                             9376 ; 103  |        FALSE,                  // bWriteProtected
                             9377 ; 104  |        0,                      // wNumberOfDrives
                             9378 ; 105  |        0,                      // dwSizeInBytes
                             9379 ; 106  |        0,                      // wAllocationUnitSizeInBytes
                             9380 ; 107  |        0,                      // PhysicalType
                             9381 ; 108  |        0                       // pMediaInfo
                             9382 ; 109  |    }
                             9383 ; 110  |#endif
                             9384 
Y:0027 000000                9385         dc      $000000
                             9389 
                             9390 ; 111  |};
                             9391 ; 112  |
                             9392 ; 113  |MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[NUM_LOGICAL_MEDIA] =
                             9393 
                             9394 Fg_MediaAllocationTable:
Y:0028 000002 000000         9395         dc      $000002,$000000,$000000,$000000,$00c400,$000000,$000000,$000001
       000000 000000              
       00C400 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
       000000 000001              
Y:0030 000001 000002         9396         dc      $000001,$000002,$00c400,$000000,$000001,$000000,$000000,$000000
       00C400 000000              
       000001 000000              
       000000 000000              
Y:0038 000000 000000         9397         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0040 000000 000000         9398         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0048 000000 000000         9399         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0050 000000 000000         9400         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0058 000000 000000         9401         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0060 000000 000000         9402         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0068 000000 000000         9403         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0070 000000 000007         9404         dc      $000000,$000007,$000000,$000001,$000050,$002dd2,$000000,$000000
       000000 000001              
       000050 002DD2              
       000000 000000              
Y:0078 000001 000000         9405         dc      $000001,$000000,$00000a,$000000,$000000,$000000,$000002,$000002
       00000A 000000              
       000000 000000              
       000002 000002              
Y:0080 00000B 002DD2         9406         dc      $00000b,$002dd2,$000000,$000000,$000003,$000001,$000001,$0449e2,$000000
       000000 000000              
       000003 000001              
       000001 0449E2              
       000000                     
Y:0089 000000 000004         9407         dc      $000000,$000004,$000001,$000006,$03d012,$000000,$000000,$000005
       000001 000006              
       03D012 000000              
       000000 000005              
Y:0091 000001 000000         9408         dc      $000001,$000000,$032244,$000000,$000000,$000006,$000001,$000002
       032244 000000              
       000000 000006              
       000001 000002              
Y:0099 004980 000000         9409         dc      $004980,$000000,$000000
       000000                     
                             9410 
                             9411 ; 114  |{
                             9412 ; 115  |    {
                             9413 ; 116  |        2,
                             9414 ; 117  |        0,DriveTypeData,0,50176,FALSE,
                             9415 ; 118  |        1,DriveTypeSystem,DRIVE_TAG_RESOURCE_BIN,50176,TRUE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9416 ; 119  |    },
                             9417 ; 120  |    {
                             9418 ; 121  |        7,
                             9419 ; 122  |        0,DriveTypeSystem,DRIVE_TAG_BOOTMANAGER_S,0x2DD2,FALSE,
                             9420 ; 123  |        1,DriveTypeData,DRIVE_TAG_DATA,0,FALSE,
                             9421 ; 124  |        2,DriveTypeHidden,DRIVE_TAG_DATA_HIDDEN,0x2DD2,FALSE,      
                             9422 ; 125  |        3,DriveTypeSystem,DRIVE_TAG_HOSTLINK_S,0x449E2,FALSE,
                             9423 ; 126  |        4,DriveTypeSystem,DRIVE_TAG_HOSTRSC_BIN,0x3D012,FALSE,
                             9424 ; 127  |        5,DriveTypeSystem,DRIVE_TAG_STMPSYS_S,0x32244,FALSE,
                             9425 ; 128  |        6,DriveTypeSystem,DRIVE_TAG_RESOURCE_BIN,0x4980,FALSE    
                             9426 ; 129  |    }
                             9427 ; 130  |#ifdef MMC
                             9428 
Y:009C 000000 000000         9429         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00A4 000000 000000         9430         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00AC 000000 000000         9431         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00B4 000000 000000         9432         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000001,$000000
       000000 000000              
       000000 000000              
       000001 000000              
Y:00BC 000000 000000         9433         dc      $000000,$000000,$00c400,$000000,$000000
       00C400 000000              
       000000                     
                             9434 
                             9435 ; 131  |    ,
                             9436 ; 132  |    {
                             9437 ; 133  |        1,
                             9438 ; 134  |        0,DriveTypeData,0,50176,FALSE,
                             9439 ; 135  |    }
                             9440 ; 136  |#endif
                             9441 
Y:00C1 000000 000000         9442         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00C9 000000 000000         9443         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00D1 000000 000000         9444         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00D9 000000 000000         9445         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00E1 000000 000000         9446         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00E9 000000 000000         9447         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
       000000 000000              
Y:00F1 000000 000000         9448         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00F9 000000 000000         9449         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0101 000000 000000         9450         dc      $000000,$000000
                             9454 
                             9455 ; 137  |};
                             9456 ; 138  |
                             9457 ; 139  |// Each Resource sector is actually 510 bytes
                             9458 ; 140  |#define RAM_SYSTEM_DRIVE_1_NUM_SECTORS  99
                             9459 ; 141  |
                             9460 ; 142  |// Assign drive labels.  In typical applications there will not be a Data Drive
                             9461 ; 143  |//  and there will only be a single System Drive, typically containing 
                             9462 ; 144  |//  resource.bin.  In that case you would use
                             9463 ; 145  |//      extern Resource
                             9464 ; 146  |//      INT * g_pRamSystemDrive0 = &Resource;
                             9465 ; 147  |//  where Resource is defined in Resource.asm.
                             9466 ; 148  |
                             9467 ; 149  |extern Resource;
                             9468 ; 150  |
                             9469 ; 151  |RAM_MEDIA_ALLOCATION_TABLE g_RAMMediaAllocation[NUM_RAM_MEDIA] = 
                             9470 
                             9471 Fg_RAMMediaAllocation:
Y:0103 000002 000000         9472         dc      $000002,$000000,$00000a,$000001,$000000,FResource,$000001,$000002
       00000A 000001              
       000000 rrrrrr              
       000001 000002              
Y:010B 000063 000001         9473         dc      $000063,$000001,FResource,$000000,$000000,$000000,$000000,$000000
       rrrrrr 000000              
       000000 000000              
       000000 000000              
Y:0113 000000 000000         9474         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:011B 000000 000000         9475         dc      $000000,$000000
                             9479 
                             9480 ; 152  |{
                             9481 ; 153  |    {
                             9482 ; 154  |        2,
                             9483 ; 155  |        {
                             9484 ; 156  |            {DriveTypeData,DRIVE_TAG_DATA,1,RAM_DATA_DRIVE_0,(void *)(&Resource)},    // D
                                  o not need this one
                             9485 ; 157  |            {DriveTypeSystem,DRIVE_TAG_RESOURCE_BIN,RAM_SYSTEM_DRIVE_1_NUM_SECTORS,RAM_SYS
                                  TEM_DRIVE_0,(void *)(&Resource)}
                             9486 ; 158  |        }
                             9487 ; 159  |    }
                             9488 ; 160  |};
                             9489 ; 161  |
                             9490 ; 162  |///////////////////////////////////////
                             9491 ; 163  |// Setup the RAM media & drives
                             9492 ; 164  |///////////////////////////////////////
                             9493 ; 165  |
                             9494 ; 166  |
                             9495 ; 167  |
                             9496 ; 168  |WORD g_wNumRamMedia = NUM_RAM_MEDIA;
                             9497 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9498 Fg_wNumRamMedia:
Y:011D 000001                9499         dc      $000001
                             9502 
                             9503 ; 169  |
                             9504 ; 170  |
                             9505 ; 171  |///////////////////////////////////////
                             9506 ; 172  |// Setup the global Media structs
                             9507 ; 173  |///////////////////////////////////////
                             9508 ; 174  |
                             9509 ; 175  |WORD g_wNumMedia = NUM_LOGICAL_MEDIA;
                             9510 
                             9511 Fg_wNumMedia:
Y:011E 000003                9512         dc      $000003
                             9515 
                             9516 ; 176  |
                             9517 ; 177  |
                             9518 ; 178  |///////////////////////////////////////
                             9519 ; 179  |// Setup the global Drive structs
                             9520 ; 180  |///////////////////////////////////////
                             9521 ; 181  |// New global instead of just the MAX_LOGICAL_DRIVES define in driver lib, allows 
                             9522 ; 182  |// required customization by making previous macro refs in libs now use global. March 1 20
                                  05
                             9523 ; 183  |WORD g_wMaxLogicalDrives = MAX_LOGICAL_DRIVES; 
                             9524 
                             9525 Fg_wMaxLogicalDrives:
Y:011F 00000F                9526         dc      $00000f
                             9529 
                             9530 ; 184  |
                             9531 ; 185  |LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[MAX_LOGICAL_DRIVES];
                             9532 ; 186  |
                             9533 ; 187  |WORD g_wNumDrives = NUM_LOGICAL_MEDIA+1;
                             9534 
                             9535 Fg_wNumDrives:
Y:0120 000004                9536         dc      $000004
                             9539 
                             9540 ; 188  |WORD _X g_wHiddenDriveIdx = NUM_LOGICAL_MEDIA;
                             9541 
                             9542 
X:0000                       9543         org     x,".xdataddiproject",init:
                             9544 Fg_wHiddenDriveIdx:
X:0000 000003                9545         dc      $000003
                             9548 
                             9549 ; 189  |
                             9550 ; 190  |LOGICAL_DRIVE g_Drive[MAX_LOGICAL_DRIVES]=
                             9551 
                             9552 
Y:0121                       9553         org     y,".ydataddiproject",init:
                             9554 Fg_Drive:
Y:0121 rrrrrr rrrrrr         9555         dc      Fg_DriveDescriptor,FRAMDataDriveApi,Fg_DriveDescriptor+20,FNANDDataDriveApi
       rrrrrr rrrrrr              
                             9556 
                             9557 ; 191  |{
                             9558 ; 192  |    {&g_DriveDescriptor[0],&RAMDataDriveApi},
                             9559 ; 193  |    {&g_DriveDescriptor[1],&NANDDataDriveApi},
                             9560 ; 194  |#ifdef MMC
                             9561 
Y:0125 rrrrrr rrrrrr         9562         dc      Fg_DriveDescriptor+40,FMMCDataDriveApi
                             9563 
                             9564 ; 195  |    {&g_DriveDescriptor[2],&MMCDataDriveApi},
                             9565 ; 196  |#endif
                             9566 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0127 rrrrrr rrrrrr         9567         dc      Fg_DriveDescriptor+60,FRAMSystemDriveApi,Fg_DriveDescriptor+80
       rrrrrr                     
Y:012A rrrrrr rrrrrr         9568         dc      FNANDDataDriveApi,Fg_DriveDescriptor+100,FNANDSystemDriveApi,Fg_DriveDescriptor+12
       rrrrrr rrrrrr              0
Y:012E rrrrrr rrrrrr         9569         dc      FNANDSystemDriveApi,Fg_DriveDescriptor+140,FNANDSystemDriveApi
       rrrrrr                     
Y:0131 rrrrrr rrrrrr         9570         dc      Fg_DriveDescriptor+160,FNANDSystemDriveApi,Fg_DriveDescriptor+180
       rrrrrr                     
Y:0134 rrrrrr 000000         9571         dc      FNANDSystemDriveApi,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000                     
Y:013B 000000 000000         9572         dc      $000000,$000000,$000000,$000000
       000000 000000              
                             9576 
                             9577 ; 197  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA],&RAMSystemDriveApi},
                             9578 ; 198  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA+1],&NANDDataDriveApi},     //hidden
                             9579 ; 199  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA+2],&NANDSystemDriveApi},
                             9580 ; 200  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA+3],&NANDSystemDriveApi},
                             9581 ; 201  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA+4],&NANDSystemDriveApi},
                             9582 ; 202  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA+5],&NANDSystemDriveApi},
                             9583 ; 203  |    {&g_DriveDescriptor[NUM_LOGICAL_MEDIA+6],&NANDSystemDriveApi}
                             9584 ; 204  |};
                             9585 ; 205  |
                             9586 ; 206  |#ifdef USE_PLAYLIST3_HOST
                             9587 ; 207  |#define STORED_BIT_VALUE_MASK           (1)
                             9588 ; 208  |#define DISABLE_DETECTION_MASK  (2)
                             9589 ; 209  |#define STORED_BIT_VALID_MASK           (4)
                             9590 ; 210  |
                             9591 ; 211  |int g_FlashWriteOccurFlag = 0;
                             9592 
                             9593 Fg_FlashWriteOccurFlag:
Y:013F 000000                9594         dc      $000000
                             9597 
                             9598 ; 212  |#endif
                             9599 ; 213  |////////////////////////////////////////////////////////////////////////////////
                             9600 ; 214  |// Prototypes
                             9601 ; 215  |////////////////////////////////////////////////////////////////////////////////
                             9602 ; 216  |
                             9603 ; 217  |////////////////////////////////////////////////////////////////////////////////
                             9604 ; 218  |// Code
                             9605 ; 219  |////////////////////////////////////////////////////////////////////////////////
                             9606 ; 220  |#ifdef USE_PLAYLIST3_HOST
                             9607 ; 221  |/*
                             9608 ; 222  | *access the write detection flag
                             9609 ; 223  | *(option = [0,1,2,3,4]->[read the flag, set the flag, clear the flag,disable detection, e
                                  nable detection])
                             9610 ; 224  | *return current bit value
                             9611 ; 225  | */ 
                             9612 ; 226  |_reentrant int write_detection_access(int option)
                             9613 ; 227  |{
                             9614 
P:0000                       9615         org     p,".ptextddiproject":
                             9628 Fwrite_detection_access:
P:0000 055F7C         2    2 9629         movec   ssh,y:(r7)+
P:0001 205F00         2    4 9632         move    (r7)+
P:0002 205F00         2    6 9633         move    (r7)+
                             9642 
                             9643 ; 228  |
                             9644 ; 229  |        RETCODE returnCode;
                             9645 ; 230  |        BOOL bBitResult;
                             9646 ; 231  |        int return_value = -1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9647 
P:0003 47F400 FFFFFF  3    9 9649         move    #>-1,y1
                             9651 
                             9652 ; 232  |
                             9653 ; 233  |        //if disabled detection, nothing will be changed
                             9654 ; 234  |        if( (g_FlashWriteOccurFlag  & DISABLE_DETECTION_MASK) && (option != 4) )
                             9655 
P:0005 5DF000 rrrrrr  3   12 9657         move    y:Fg_FlashWriteOccurFlag,b1
P:0007 21A400         2   14 9658         move    b1,x0
P:0008 45F400 000002  3   17 9659         move    #>2,x1
P:000A 20006E         2   19 9660         and     x1,b
P:000B 0AF0AA rrrrrr  6   25 9661         jeq     L29
P:000D 46F400 000004  3   28 9662         move    #>4,y0
P:000F 200055         2   30 9663         cmp     y0,a
P:0010 0AF0AA rrrrrr  6   36 9664         jeq     L29
                             9665 
                             9666 ; 235  |        {
                             9667 ; 236  |                //return the stored bit no matter valid or not
                             9668 ; 237  |                        option = 0;
                             9669 
P:0012 200013         2   38 9671         clr     a   
                             9672 
                             9673 ; 238  |        }
                             9674 ; 239  |
                             9675 ; 240  |        //detect the bit value and set the return_value variable if valid
                             9676 ; 241  |        if(g_FlashWriteOccurFlag  & STORED_BIT_VALID_MASK)
                             9677 
P:0013 200049         2   40 9679 L29:    tfr     x0,b
P:0014 46F400 000004  3   43 9680         move    #>4,y0
P:0016 20005E         2   45 9681         and     y0,b
P:0017 045FA0         2   47 9682         movec   m0,n7
P:0018 000000         2   49 9683         nop
P:0019 5D6F00         4   53 9684         move    b1,y:(r7+n7)
P:001A 21AF00         2   55 9685         move    b1,b
P:001B 20000B         2   57 9686         tst     b
P:001C 0AF0AA rrrrrr  6   63 9687         jeq     L32
                             9688 
                             9689 ; 242  |        {
                             9690 ; 243  |                if(g_FlashWriteOccurFlag & STORED_BIT_VALUE_MASK)
                             9691 
P:001E 200049         2   65 9693         tfr     x0,b
P:001F 46F400 000001  3   68 9694         move    #>1,y0
P:0021 20005E         2   70 9695         and     y0,b
P:0022 0AF0AA rrrrrr  6   76 9696         jeq     L30
                             9697 
                             9698 ; 244  |                        return_value = 1;
                             9699 
P:0024 20C700         2   78 9701         move    y0,y1
P:0025 0AF080 rrrrrr  6   84 9702         jmp     L32
                             9703 
                             9704 ; 245  |                else
                             9705 ; 246  |                        return_value = 0;
                             9706 
P:0027 270000         2   86 9708 L30:    move    #0,y1
                             9709 
                             9710 ; 247  |        }
                             9711 ; 248  |        
                             9712 ; 249  |        switch(option)
                             9713 
P:0028 62F403 rrrrrr  3   89 9715 L32:    tst     a       #L51,r2
P:002A 0AF0AB rrrrrr  6   95 9716         jmi     L47
P:002C 44F400 000004  3   98 9717         move    #>4,x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
P:002E 21DA45         2  100 9718         cmp     x0,a    a,n2
P:002F 0AF0A7 rrrrrr  6  106 9719         jgt     L47
P:0031 07EA92         8  114 9720         movem   p:(r2+n2),r2
P:0032 000000         2  116 9721         nop
P:0033 0AE280         4  120 9722         jmp     (r2)
                             9723 
P:0034 rrrrrr                9724 L51:    dc      L33     ; case 0:
P:0035 rrrrrr                9725         dc      L34     ; case 1:
P:0036 rrrrrr                9726         dc      L36     ; case 2:
P:0037 rrrrrr                9727         dc      L39     ; case 3:
P:0038 rrrrrr                9728         dc      L40     ; case 4:
                             9729 
                             9730 
                             9731 ; 250  |        {
                             9732 ; 251  |                case 0: //read
                             9733 ; 252  |                        // bit stored is valid? if yes, just return it
                             9734 ; 253  |                        if(!(g_FlashWriteOccurFlag  & STORED_BIT_VALID_MASK))
                             9735 
P:0039 045FA0         2  122 9737 L33:    movec   m0,n7
P:003A 000000         2  124 9738         nop
P:003B 5FEF00         4  128 9739         move    y:(r7+n7),b
P:003C 20000B         2  130 9740         tst     b
P:003D 0AF0A2 rrrrrr  6  136 9741         jne     L47
                             9742 
                             9743 ; 254  |                        {
                             9744 ; 255  |                                //check whether a write to flash occurred before, if yes, 
                                  rebuild the library
                             9745 ; 256  |                                returnCode = ReadStickyBit((volatile _X WORD *)&HW_RTC_SKI
                                  P_REBUILD_REG,
                             9746 ; 257  |                                                                                HW_RTC_PER
                                  SISTENT1_SKIP_REBUILD_BITPOS,
                             9747 ; 258  |                                                                                &bBitResul
                                  t);
                             9748 
P:003F 60F400 00F508  3  139 9750         move    #$F508,r0
P:0041 77F400 FFFFFE  3  142 9751         move    #-2,n7
P:0043 000000         2  144 9752         nop
P:0044 044F14         4  148 9753         lua     (r7)+n7,r4
P:0045 200061         2  150 9754         tfr     x1,a
P:0046 0BF080 rrrrrr  6  156 9755         jsr     FReadStickyBit
                             9759 
                             9760 ; 259  |                        
                             9761 ; 260  |                                if(returnCode == SUCCESS)       //able to read the bit
                             9762 
P:0048 200003         2  158 9764         tst     a
P:0049 0AF0A2 rrrrrr  6  164 9765         jne     L38
                             9766 
                             9767 ; 261  |                                {
                             9768 ; 262  |                                        if(bBitResult)
                             9769 
P:004B 77F400 FFFFFE  3  167 9771         move    #-2,n7
P:004D 000000         2  169 9772         nop
P:004E 5FEF00         4  173 9773         move    y:(r7+n7),b
P:004F 2B0000         2  175 9774         move    #0,b2
P:0050 20000B         2  177 9775         tst     b
P:0051 0AF0AA rrrrrr  6  183 9776         jeq     L35
                             9777 
                             9778 ; 263  |                                                return_value = 1;
                             9779 ; 264  |                                        else
                             9780 ; 265  |                                                return_value = 0;
                             9781 ; 266  |                                }
                             9782 ; 267  |                                else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9783 ; 268  |                                        return_value = 1;               //if unable to rea
                                  d the bit, treat it as written before
                             9784 
P:0053 0AF080 rrrrrr  6  189 9786         jmp     L38
                             9787 
                             9788 ; 269  |                        }
                             9789 ; 270  |                        break;
                             9790 ; 271  |                                        
                             9791 ; 272  |                case 1: //set the flag -> clear the bit
                             9792 ; 273  |                        if(return_value != 0)
                             9793 
                             9795 L34:
P:0055 200071         2  191 9797         tfr     y1,a
P:0056 200003         2  193 9798         tst     a
P:0057 0AF0AA rrrrrr  6  199 9799         jeq     L47
                             9800 
                             9801 ; 274  |                        {
                             9802 ; 275  |                                //Even if hardware is not able to record the bit, nothing 
                                  can do!
                             9803 ; 276  |                                ClearStickyBit((volatile _X WORD *)&HW_RTC_SKIP_REBUILD_RE
                                  G, 
                             9804 ; 277  |                                                        HW_RTC_PERSISTENT1_SKIP_REBUILD_BI
                                  TPOS);          
                             9805 
P:0059 60F400 00F508  3  202 9807         move    #$F508,r0
P:005B 200061         2  204 9808         tfr     x1,a
P:005C 0BF080 rrrrrr  6  210 9809         jsr     FClearStickyBit
                             9812 
                             9813 ; 278  |                                return_value = 0;
                             9814 
P:005E 270000         2  212 9816 L35:    move    #0,y1
                             9818 
                             9819 ; 279  |                        }               
                             9820 ; 280  |                        break;
                             9821 
P:005F 0AF080 rrrrrr  6  218 9823         jmp     L47
                             9824 
                             9825 ; 281  |                        
                             9826 ; 282  |                case 2: //clear the flag -> set the bit
                             9827 ; 283  |                        if(return_value != 1)
                             9828 
P:0061 56F400 000001  3  221 9830 L36:    move    #>1,a
P:0063 200075         2  223 9831         cmp     y1,a
P:0064 0AF0AA rrrrrr  6  229 9832         jeq     L47
                             9833 
                             9834 ; 284  |                        {
                             9835 ; 285  |                                //Even if hardware is not able to record the bit, nothing 
                                  can do!
                             9836 ; 286  |                                SetStickyBit((volatile _X WORD *)&HW_RTC_SKIP_REBUILD_REG,
                                   
                             9837 ; 287  |                                                        HW_RTC_PERSISTENT1_SKIP_REBUILD_BI
                                  TPOS);
                             9838 
P:0066 60F400 00F508  3  232 9840         move    #$F508,r0
P:0068 200061         2  234 9841         tfr     x1,a
P:0069 0BF080 rrrrrr  6  240 9842         jsr     FSetStickyBit
                             9844 
                             9845 ; 288  |                                return_value = 1;
                             9846 
P:006B 47F400 000001  3  243 9848 L38:    move    #>1,y1
                             9850 
                             9851 ; 289  |                        }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9852 ; 290  |                        break;  
                             9853 
P:006D 0AF080 rrrrrr  6  249 9855         jmp     L47
                             9856 
                             9857 ; 291  |                                        
                             9858 ; 292  |                case 3: //disable
                             9859 ; 293  |                        g_FlashWriteOccurFlag |= DISABLE_DETECTION_MASK;
                             9860 
P:006F 0A7061 rrrrrr  6  255 9862 L39:    bset    #1,y:Fg_FlashWriteOccurFlag
                             9863 
                             9864 ; 294  |                        break;
                             9865 
P:0071 0AF080 rrrrrr  6  261 9867         jmp     L47
                             9868 
                             9869 ; 295  |                        
                             9870 ; 296  |                case 4: //enable
                             9871 ; 297  |                        g_FlashWriteOccurFlag &= (~DISABLE_DETECTION_MASK);
                             9872 
P:0073 0A7041 rrrrrr  6  267 9874 L40:    bclr    #1,y:Fg_FlashWriteOccurFlag
                             9875 
                             9876 ; 298  |                        break;          
                             9877 ; 299  |        }
                             9878 
P:0075 58F000 rrrrrr  3  270 9880 L47:    move    y:Fg_FlashWriteOccurFlag,a0
                             9881 
                             9882 ; 300  |        
                             9883 ; 301  |        //set the valid bit and set the stored bit value at the same time
                             9884 ; 302  |        g_FlashWriteOccurFlag |= (STORED_BIT_VALID_MASK | STORED_BIT_VALUE_MASK);
                             9885 
P:0077 0AC860         4  274 9887         bset    #0,a0
P:0078 0AC862         4  278 9888         bset    #2,a0
                             9889 
                             9890 ; 303  |        
                             9891 ; 304  |        //by the return value, we set the correct value of the stored bit
                             9892 ; 305  |        if(return_value == 0)
                             9893 
P:0079 200079         2  280 9895         tfr     y1,b
P:007A 20000B         2  282 9896         tst     b
P:007B 0AF0A2 rrrrrr  6  288 9897         jne     L48
                             9898 
                             9899 ; 306  |                g_FlashWriteOccurFlag &= (~STORED_BIT_VALUE_MASK);
                             9900 
P:007D 0AC840         4  292 9902         bclr    #0,a0
P:007E 587000 rrrrrr  3  295 9903 L48:    move    a0,y:Fg_FlashWriteOccurFlag
                             9904 
                             9905 ; 307  |
                             9906 ; 308  |        //if the bit is set -> flag is off
                             9907 ; 309  |        //if the bit is clear -> flag is on
                             9908 ; 310  |        if(return_value != 0)
                             9909 
P:0080 200079         2  297 9911         tfr     y1,b
P:0081 20000B         2  299 9912         tst     b
                             9915 
                             9916 ; 311  |                return 0;
                             9917 ; 312  |        else
                             9918 ; 313  |                return 1;
                             9919 
P:0082 56F400 000001  3  302 9921         move    #>1,a
P:0084 0AF0AA rrrrrr  6  308 9923         jeq     L50
P:0086 200013         2  310 9925         clr     a   
                             9926 
                             9927 ; 314  |}
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9928 
P:0087 205700         2  312 9930 L50:    move    (r7)-
P:0088 205700         2  314 9931         move    (r7)-
P:0089 05FF7C         4  318 9933         movec   y:-(r7),ssh
P:008A 000000         2  320 9936         nop
P:008B 00000C         4  324 9937         rts
                             9940 
                             9941 ; 315  |#else
                             9942 ; 316  |_reentrant int write_detection_access(int option)
                             9943 ; 317  |{
                             9944 ; 318  |    return 0;
                             9945 ; 319  |}
                             9946 ; 320  |#endif
                             9947 ; 321  |////////////////////////////////////////////////////////////////////////////////
                             9948 ; 322  |// MMC & SPI data structures
                             9949 ; 323  |////////////////////////////////////////////////////////////////////////////////
                             9950 ; 324  |
                             9951 ; 325  |// The following structure allocations & initializations are based on
                             9952 ; 326  |//      MMC_MAX_PHYSICAL_DEVICES which is defined in
                             9953 ; 327  |//      project.h.  If the user desires a different number of devices
                             9954 ; 328  |//      then project.h must be made local & modified.  The
                             9955 ; 329  |//      structure initializations will auto adjust.  The max numbers supported
                             9956 ; 330  |//      here are:
                             9957 ; 331  |//
                             9958 ; 332  |//      MMC_MAX_PHYSICAL_DEVICES max = 2
                             9959 ; 333  |//
                             9960 ; 334  |//      If the user requires more than this number then this file, mmcsalsstructs.c &
                             9961 ; 335  |//      appropriate bus structs file (most likely spistructs.c) must be made
                             9962 ; 336  |//      local to the project and customized to add more devices.
                             9963 ; 337  |//
                             9964 ; 338  |// The chip select pins are pre-defined here to be pins A4/CE3 for device 0 and
                             9965 ; 339  |//      A5/CE2 for device 1.  If the user requires different chip selects then
                             9966 ; 340  |//      this file must be made local to the project & customized.  If using the
                             9967 ; 341  |//      SPI bus then the spistructs.c file must also be made local & customized.
                             9968 ; 342  |//
                             9969 ; 343  |// The write-protect pins are pre-defined here to be pins A7 for device 0 and
                             9970 ; 344  |//      IORDN for device 1.  If the user requires different pins then
                             9971 ; 345  |//      this file must be made local to the project & customized.
                             9972 ; 346  |//
                             9973 ; 347  |// The media detect pins are pre-defined here to be pins A0 for device 0 and 
                             9974 ; 348  |//      IOWRN for device 1.  If the user requires different pins then
                             9975 ; 349  |//      this file must be made local to the project & customized.
                             9976 ; 350  |
                             9977 ; 351  |// HAL data structures
                             9978 ; 352  |#ifdef MMC
                             9979 ; 353  |MMC_PHYSICAL_BUS MmcPhysicalBus[MMC_MAX_PHYSICAL_DEVICES] =
                             9980 
                             9981 
Y:0140                       9982         org     y,".ydataddiproject",init:
                             9983 FMmcPhysicalBus:
Y:0140 00F410 001000         9984         dc      $00f410,$001000,$ffefff,$00f420,$000010,$ffffef,$00f410,$000100
       FFEFFF 00F420              
       000010 FFFFEF              
       00F410 000100              
Y:0148 FFFEFF 000001         9985         dc      $fffeff,$000001,$000000
       000000                     
                             9986 
                             9987 ; 354  |                    {
                             9988 ; 355  |                        {
                             9989 ; 356  |                            (_X WORD *)HW_GPB1_BASEADDR,    // Chip select
                             9990 ; 357  |                            HW_GP_B12_SETMASK,
                             9991 ; 358  |                            HW_GP_B12_CLRMASK,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9992 ; 359  |                            (_X WORD *)HW_GPB2_BASEADDR,    // Write protect
                             9993 ; 360  |                            HW_GP_B4_SETMASK,
                             9994 ; 361  |                            HW_GP_B4_CLRMASK,
                             9995 ; 362  |                            (_X WORD *)HW_GPB1_BASEADDR,    // Media detect
                             9996 ; 363  |                            HW_GP_B8_SETMASK,
                             9997 ; 364  |                            HW_GP_B8_CLRMASK,
                             9998 ; 365  |                            MEDIA_DETECT_NEGATIVE_POLARITY,
                             9999 ; 366  |                            0                               // SPI Device num
                            10000 ; 367  |                        }
                            10001 ; 368  |#if (MMC_MAX_PHYSICAL_DEVICES > 1)
                            10002 ; 369  |                        ,
                            10003 ; 370  |                        {
                            10004 ; 371  |                            (_X WORD *)HW_GPB1_BASEADDR,    // Chip select
                            10005 ; 372  |                            HW_GP_B13_SETMASK,
                            10006 ; 373  |                            HW_GP_B13_CLRMASK,
                            10007 ; 374  |                            (_X WORD *)HW_GPB1_BASEADDR,    // Write protect
                            10008 ; 375  |                            HW_GP_B9_SETMASK,
                            10009 ; 376  |                            HW_GP_B9_CLRMASK,
                            10010 ; 377  |                            (_X WORD *)HW_GPB2_BASEADDR,    // Media detect
                            10011 ; 378  |                            HW_GP_B3_SETMASK,
                            10012 ; 379  |                            HW_GP_B3_CLRMASK,
                            10013 ; 380  |                            MEDIA_DETECT_NEGATIVE_POLARITY,
                            10014 ; 381  |                            0                               // SPI Device num
                            10015 ; 382  |                        }
                            10016 ; 383  |#endif
                            10017 
Y:014B 000000               10018         dc      $000000
                            10022 
                            10023 ; 384  |                    };
                            10024 ; 385  |#endif
                            10025 
                            10035 
                            10039 
Y:0000                      10040         org     y,".ybssddiproject",bss:
                            10041 Fg_DriveDescriptor:
Y:0000                      10042         ds      300
   |   RESERVED                   
Y:012B
                            10050 
                            10051         extern  FClearStickyBit, y:FMMCDataDriveApi, y:FMMCMediaApi
                            10052         extern  y:FNANDDataDriveApi, y:FNANDMediaApi
                            10053         extern  y:FNANDSystemDriveApi, y:FRAMDataDriveApi, y:FRAMMediaApi
                            10054         extern  y:FRAMSystemDriveApi, FReadStickyBit, y:FResource
                            10055         extern  FSetStickyBit
                            10056 
                            10057         global  FMmcPhysicalBus, Fg_Drive, Fg_DriveDescriptor
                            10058         global  Fg_FlashWriteOccurFlag, Fg_Media, Fg_MediaAllocationTable
                            10059         global  Fg_MediaDescriptor, Fg_RAMMediaAllocation
                            10060         global  Fg_wHiddenDriveIdx, Fg_wMaxLogicalDrives, Fg_wNumDrives
                            10061         global  Fg_wNumMedia, Fg_wNumNANDChips, Fg_wNumRamMedia
                            10062         global  Fwrite_detection_access
                            10063 
                            10064         local   L29, L30, L32, L33, L34, L35, L36, L38, L39, L40, L47, L48
                            10065         local   L50, L51
                            10066 
                            10067         calls   "write_detection_access", "ClearStickyBit", "ReadStickyBit"
                            10068         calls   "write_detection_access", "SetStickyBit"
                            10069 
